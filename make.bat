echo off
setlocal EnableDelayedExpansion

REM Output files for autogenerated tables and module sizing
set a=bank\autogen.s
set m=bank\extern.mak

REM Starting bank number and ending bank number
set x=0
set y=3

:compile
color 17
echo Assembly started   : %date% %time%
echo  db "Build : %date%\r" > kernel\build.s
echo  db "128K Breadboard Computer\r" >> kernel\build.s
echo  db "By @6502Nerd\r" >> kernel\build.s
echo  db "Copyright (c) 2024\r",0 >> kernel\build.s


REM Initial binary creating symbol table with dummy values
echo Generating symbol table for externals

echo ; > !a!
for /f "tokens=1" %%e in ('findstr .* !m!') do (
    echo _%%e >> !a!
    echo   _bankjsr bankjsr_nul_addr, bankjsr_nul_bank >> !a!
)

REM Build with -t option to get the symbol table
for /l %%b in (!x!,1,!y!) do (
  echo Bank %%b
  as65 -n -x -c -t -dBANK%%b -orom\bank%%b.bin bank\bank%%b.s
  if errorlevel 1 goto errors
  REM copy symbol table to .sym file in case user wants to see it later
  copy bank\bank%%b.lst bank\bank%%b.sym
)


REM Final binary which include the real extern addresses and correct bank numbers
echo Generating final symbol tables for externals

echo ; > !a!
echo mod_sz_autogen_s >> !a!
for /f "tokens=1" %%e in ('findstr .* !m!') do (
  set f=N
  for /l %%b in (!x!,1,!y!) do (
    if !f!==N (
      for /f "tokens=3" %%i in ('findstr /C:" %%e :" bank\bank%%b.lst') do (
          echo _%%e >> !a!
          echo   _bankjsr %%i, %%b >> !a!
          set f=Y
      )
    )
  )
)
echo mod_sz_autogen_e >> !a!

REM Build with -l option to get full listing
echo Building ROMs

for /l %%b in (!x!,1,!y!) do (
  echo Bank %%b
  as65 -n -x -c -l -dBANK%%b -orom\bank%%b.bin bank\bank%%b.s
  if errorlevel 1 goto errors
)

REM Combine individual banks in to one 64K binary for EEPROM
copy /Y/B rom\bank0.bin+rom\bank2.bin+rom\bank1.bin+rom\bank3.bin rom\HB-BBC-128.ROM
powershell compress-archive -LiteralPath 'rom\HB-BBC-128.ROM' -DestinationPath 'emu\roms\hb128bbc.zip' -Force

color 27
findstr "_bank0_end" bank\bank0.sym
findstr "_bank1_end" bank\bank1.sym
findstr "_bank2_end" bank\bank2.sym
findstr "_bank3_end" bank\bank3.sym
findstr "_end_zero_page" bank\bank3.sym

echo COMPILE SUCCESSFUL : %date% %time%
goto end

:errors
color 47
echo STOPPED DUE TO ASSEMBLY ERRORS
goto end

:end


