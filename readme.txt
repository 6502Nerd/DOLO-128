Homebrew BreadBoard Computer (BBC!) - hb128bbc

Quick introduction notes on this zip file
Root;
-	readme.txt:	This file
-	as65.exe: 	I have packaged the as65 assembler by Kingswood Consulting
-	as65.man: 	As per Kingswood Consulting terms, this file is distributed
-				with their assembler and provides detailed information on
-				usage.
-	make.bat:	This is the build script which reequires cmd or powershell
-				to run.  It will re-assemble all source and generate a ROM
-				file that also is copied to the emulator folder, ready to run
-               In summary, the make file builds four 16KB bin files using
-               the information in the bank[0,1,2,3].s files and the
-               extern.mak file. The 16KB binaries are combined into a single
-               64K ROM which can be burnt to an EEPROM.  This file is also
-               copied to the emulator roms folder to be used under MAME.

All folders contain .s and .i assembler files which are processed by as65.exe
except for these special folders;
-	bank
-	emu
-	rom

Special folder descriptions;
-	bank:	Configuration of 4x16KB banks in the ROM
-			The bank*.sym and bank*.lst are generated by as65 assembly
-			bank.i is the macro used to enable globally accessible routines
-	        During assembly, ROM banks are constructed in this folder.
-			bank[0,1,2,3].s import the assembly for each bank.
-			the .lst files are listing files from assembly
-			extern.mak defines which routines are to be cross-bank accessible
-			autogen.s is created by the make file and generates the build date
- 	emu: 	Emulation folder containing a custom version of mame
-			The make file writes the combined ROM to the emu folder space
-			This custom version of mame created by Nigel Barnes, a mighty
-			mame developer which has made a release to GitHub possible!
-           How to use the emulator is described later in this doc.
-	rom:	Binaries and final ROM image
-			bank*.bin is the assembled binary for each 16KB bank
-			HB-BBC-128.ROM is the combined 64KB ROM file for the whole system
-			This 64K ROM can be burnt or used in the mame emulator (as above)

Code source folder structures;
-	cia:	65c22 VIA handling (including memory bank selection)
-	dflat:	dflat interpreter files
-	inc:	include files
-	kernel:	reset, interrupt, boot and cross-bank call handling
-	keyboard:keyboard handling
-	monitor:basic monitor
-	rtc:	Realtime clock handling
-	sdcard:	SD card protocol and FAT16 filesystem handling
-	serial:	ACIA handling
-	sound:	AY-3-8910 handling (including joystick)
-	utils:	Helper routines (including integer math)
-	vdp:	Graphics handling (including system fonts)

Build quick quide (using powershell as the CLI);
-   You need to be in the root folder of the homebrew directory.
-	Invoke ./make.bat from the command line. This rebuilds all source, the
-   output of 4x16KB bin and a single 64KB rom file in the rom folder.  In
-   addition the rom file is compressed and in the emu/roms folder.

Running under mame quick guide (using powershell as the CLI)
-	Your need to be in the emu folder of the homebrew directory
-	Invoke;
-       ./hb128bbc hb128bbc *OR*
-       ./hb128bbc hb128bbc -serial
-   This will start mame in normal mode or with a virtual serial terminal.
-	Press enter to skip the mame messages and warnings.
-	Press F12 (reset) with F1 for normal boot with keyboard as input.  If
-   F1 is not pressed during reset the machine boots in to serial I/O mode
-   by default (and therefore you really need to use the -serial option!)
-   The file hb128bbc.exe is actually a minimal build of mame by Nigel Barnes
-   (again, hugely grateful for his help!). Mame is a complex beast with many
-   options beyond my knowledge, but there are a couple of important things
-   about the SD card emulation you need to know to make best use of emulation.
-   Filesystem;
-       There is a filesystem