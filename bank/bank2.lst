AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank2.s --------------------------------

5714 lines read, no errors in pass 1.
c000 =                       _bank2_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank2.s --------------------------------

0002 =                       VDP_LONGDELAY 	= 2
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank2.s --------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank2.s --------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank2.s --------------------------------

0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank2.s --------------------------------

                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
                             	phy
                             	pha
                             	jsr str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank2.s --------------------------------

                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank2.s --------------------------------

                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank2.s --------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank2.s --------------------------------

0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank2.s --------------------------------

0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank2.s --------------------------------

                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank2.s --------------------------------

0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank2.s --------------------------------

                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank2.s --------------------------------

0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank2.s --------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank2.s --------------------------------

                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank2.s --------------------------------

                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank2.s --------------------------------

009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank2.s --------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank2.s --------------------------------

                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : dfc6                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : cfca                  	fcw init			; 0xfffc : Reset Vector
fffe : 1fc7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
c000 : 40                    	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c48c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c45c5           [ 3] 	jmp io_get_ch			; Vec 1
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank2.s --------------------------------

c007 : 4cd8c5           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c10c6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c1cc6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c7dc6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c25c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4ce5c5           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4cfcc5           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ; 
c02e :                       mod_sz_autogen_s 
c02e :                       _df_init 
                               _bankjsr $f19c, 1 
                             
c046 :                       _df_pg_dflat 
                               _bankjsr $d755, 1 
                             
c05e :                       _fs_chdir_w 
                               _bankjsr $d4d0, 2 
                             
c076 :                       _fs_mkdir_w 
                               _bankjsr $d563, 2 
                             
c08e :                       _fs_delete_w 
                               _bankjsr $d493, 2 
                             
c0a6 :                       _fs_close_w 
                               _bankjsr $d452, 2 
                             
c0be :                       _fs_get_byte_w 
                               _bankjsr $d176, 2 
                             
c0d6 :                       _fs_open_read_w 
                               _bankjsr $d33e, 2 
                             
c0ee :                       _fs_open_write_w 
                               _bankjsr $d402, 2 
                             
c106 :                       _fs_put_byte_w 
                               _bankjsr $d2cb, 2 
                             
c11e :                       _fs_dir_find_entry_w 
                               _bankjsr $cfb9, 2 
                             
c136 :                       _fs_dir_entry_next_w 
                               _bankjsr $cfef, 2 
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank2.s --------------------------------

                             
c14e :                       _fs_dir_root_start_w 
                               _bankjsr $cf74, 2 
                             
c166 :                       _get_byte 
                               _bankjsr $cecc, 0 
                             
c17e :                       _put_byte 
                               _bankjsr $cee1, 0 
                             
c196 :                       _gr_get_key 
                               _bankjsr $df8c, 0 
                             
c1ae :                       _gr_put_byte 
                               _bankjsr $df99, 0 
                             
c1c6 :                       _gr_init_screen 
                               _bankjsr $da59, 0 
                             
c1de :                       _init_acia 
                               _bankjsr $ceee, 0 
                             
c1f6 :                       _init_cia0 
                               _bankjsr $ce79, 0 
                             
c20e :                       _init_cia1 
                               _bankjsr $ceaa, 0 
                             
c226 :                       _init_fs 
                               _bankjsr $ce51, 2 
                             
c23e :                       _init_sdcard 
                               _bankjsr $cb4b, 2 
                             
c256 :                       _init_snd 
                               _bankjsr $d2ad, 0 
                             
c26e :                       _init_keyboard 
                               _bankjsr $cf00, 0 
                             
c286 :                       _kb_read_raw 
                               _bankjsr $cf0f, 0 
                             
c29e :                       _kb_read_dip 
                               _bankjsr $cf7a, 0 
                             
c2b6 :                       _command_line 
                               _bankjsr $cb4b, 0 
                             
c2ce :                       _gr_cls 
                               _bankjsr $da6c, 0 
                             
c2e6 :                       _gr_init_hires 
                               _bankjsr $da16, 0 
                             
c2fe :                       _gr_line 
                               _bankjsr $ddc6, 0 
                             
c316 :                       _gr_box 
                               _bankjsr $dc06, 0 
                             
c32e :                       _gr_circle 
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank2.s --------------------------------

                               _bankjsr $dd11, 0 
                             
c346 :                       _gr_plot 
                               _bankjsr $dad7, 0 
                             
c35e :                       _gr_hchar 
                               _bankjsr $db15, 0 
                             
c376 :                       _gr_point 
                               _bankjsr $dbbb, 0 
                             
c38e :                       _gr_get 
                               _bankjsr $daf2, 0 
                             
c3a6 :                       _gr_set_cur 
                               _bankjsr $dafa, 0 
                             
c3be :                       _snd_get_note 
                               _bankjsr $d2a6, 0 
                             
c3d6 :                       _snd_get_joy0 
                               _bankjsr $c67d, 0 
                             
c3ee :                       _snd_set 
                               _bankjsr $c625, 0 
                             
c406 :                       _vdp_peek 
                               _bankjsr $c61c, 0 
                             
c41e :                       _vdp_poke 
                               _bankjsr $c610, 0 
                             
c436 :                       _vdp_init 
                               _bankjsr $d800, 0 
                             
c44e :                       _rtc_init 
                               _bankjsr $d0d0, 0 
                             
c466 :                       _rtc_gettimedate 
                               _bankjsr $d237, 0 
                             
c47e :                       _rtc_setdatetime 
                               _bankjsr $d188, 0 
                             
c496 :                       _rtc_nvread 
                               _bankjsr $d29d, 0 
                             
c4ae :                       _rtc_nvwrite 
                               _bankjsr $d285, 0 
                             
c4c6 :                       _fs_dir_fhandle_str 
                               _bankjsr $d577, 2 
                             
c4de :                       _sd_sendcmd17 
                               _bankjsr $cd23, 2 
                             
c4f6 :                       _sd_sendcmd24 
                               _bankjsr $cd9c, 2 
                             
c50e :                       mod_sz_autogen_e 
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank2.s --------------------------------

c50e :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c50e :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c50e :                       io_init
c50e : a900             [ 2] 	lda #0				; Assume it's serial
c510 : 48               [ 3] 	pha
c511 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c514 : 2910             [ 2] 	and #0x10
c516 : d00b             [ 3] 	bne io_init_set_default
c518 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c51b : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c51d : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c51f : 68               [ 4] 	pla
c520 : a901             [ 2] 	lda #1
c522 : 48               [ 3] 	pha
c523 :                       io_init_set_default
c523 : 68               [ 4] 	pla
c524 : 8d000c           [ 4] 	sta io_default
c527 : 4c2ac5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank2.s --------------------------------

                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c52a :                       io_set_default			; Entry point for default
c52a : ad000c           [ 4] 	lda io_default
c52d :                       io_active_device		; Entry point for A set
c52d : 0a               [ 2] 	asl	a				; x16 the Block number
c52e : 0a               [ 2] 	asl a
c52f : 0a               [ 2] 	asl a
c530 : 0a               [ 2] 	asl a
c531 : a8               [ 2] 	tay
c532 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c534 :                       io_copy_data
c534 : b9a8c5           [ 4] 	lda io_devices,y
c537 : 9d010c           [ 5] 	sta io_block,x
c53a : c8               [ 2] 	iny
c53b : e8               [ 2] 	inx
c53c : e010             [ 2] 	cpx #io_struct
c53e : d0f4             [ 3] 	bne io_copy_data
                             	
c540 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c542 : 854a             [ 3] 	sta buf_ef
c544 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c545 :                       io_get_ch
c545 : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c548 :                       io_put_ch
c548 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c54b :                       io_open_read
c54b : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank2.s --------------------------------

                             ;* Regs affected : All
                             ;****************************************
c54e :                       io_open_write
c54e : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c551 :                       io_close
c551 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c554 :                       io_delete
c554 : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c557 :                       io_read_line
c557 : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c559 : 8548             [ 3] 	sta buf_adr+1
c55b : 8449             [ 3] 	sty buf_sz			; Max length
c55d : 08               [ 3] 	php					; Save echo state
c55e : a000             [ 2] 	ldy #0x00			; Starting at first byte
c560 :                       io_get_line_byte
c560 : 38               [ 2] 	sec					; Getting bytes synchronously
c561 : 2045c5           [ 6] 	jsr io_get_ch		; Get a byte
c564 : b026             [ 3] 	bcs io_get_line_done; Got nothing then finish
c566 : 28               [ 4] 	plp					; Get echo state
c567 : 08               [ 3] 	php					; Instantly save it back
c568 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c56a : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c56c : d005             [ 3] 	bne io_do_echo
c56e : c000             [ 2] 	cpy #0				; Already at beginning?
c570 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c572 : 88               [ 2] 	dey					; Else decrement length
c573 :                       io_do_echo
c573 : 2048c5           [ 6] 	jsr io_put_ch		; Echo it
c576 :                       io_skip_echo
c576 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c578 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c57a : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c57c : f003             [ 3] 	beq io_skip_special
c57e : 9147             [ 5] 	sta (buf_adr),y		; Save it
c580 : c8               [ 2] 	iny					; Increase length
c581 :                       io_skip_special
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank2.s --------------------------------

c581 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c583 : f007             [ 3] 	beq io_get_line_done	; If yes then done
c585 : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c587 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c589 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c58a : 38               [ 2] 	sec					; Yes, set carry flag
c58b : 60               [ 6] 	rts					; And done
c58c :                       io_get_line_done
c58c : a900             [ 2] 	lda #0
c58e : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c590 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c591 : 18               [ 2] 	clc					; Clear carry flag
c592 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c593 :                       io_print_line
c593 : 48               [ 3] 	pha
                             
c594 : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c596 : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c598 : a000             [ 2] 	ldy #0						; Start at the beginning!
c59a :                       io_print_line_byte
c59a : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c59c : f006             [ 3] 	beq io_print_done			; If zero then done - print
c59e : 2048c5           [ 6] 	jsr io_put_ch				; Transmit
c5a1 : c8               [ 2] 	iny
c5a2 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c5a4 :                       io_print_done
c5a4 : 68               [ 4] 	pla
c5a5 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c5a6 :                       io_null_op
c5a6 : 18               [ 2] 	clc
c5a7 : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c5a8 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c5a8 :                       io_device0					; Serial device, input = Ser, outp
c5a8 : 66c1                  	dw	_get_byte			; io_get_ch
c5aa : 7ec1                  	dw	_put_byte			; io_put_ch
c5ac : a6c5                  	dw	io_null_op			; io_open_r
c5ae : a6c5                  	dw	io_null_op			; io_open_w
c5b0 : a6c5                  	dw	io_null_op			; io_close_f
c5b2 : a6c5                  	dw	io_null_op			; io_del_f
c5b4 : a6c5                  	dw	io_null_op			; io_ext1
c5b6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c5b8 :                       io_device1					; Default device, input = screen e
c5b8 : 96c1                  	dw	_gr_get_key			; io_get_ch
c5ba : aec1                  	dw	_gr_put_byte		; io_put_ch
c5bc : a6c5                  	dw	io_null_op			; io_open_r
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank2.s --------------------------------

c5be : a6c5                  	dw	io_null_op			; io_open_w
c5c0 : a6c5                  	dw	io_null_op			; io_close_f
c5c2 : a6c5                  	dw	io_null_op			; io_del_f
c5c4 : a6c5                  	dw	io_null_op			; io_ext1
c5c6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c5c8 :                       io_device2					; SD device, input = SD, output = 
c5c8 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c5ca : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c5cc : d6c0                  	dw	_fs_open_read_w		; io_open_r
c5ce : eec0                  	dw	_fs_open_write_w	; io_open_w
c5d0 : a6c0                  	dw	_fs_close_w			; io_close_f
c5d2 : 8ec0                  	dw	_fs_delete_w		; io_del_f
c5d4 : a6c5                  	dw	io_null_op			; io_ext1
c5d6 : a6c5                  	dw	io_null_op			; io_ext2
                             
c5d8 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5d8 :                       vdp_wr_reg
c5d8 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5db : ea               [ 2] 	nop
c5dc : ea               [ 2] 	nop
c5dd : 0980             [ 2] 	ora #0x80
c5df : 8d0105           [ 4] 	sta VDP_MODE1
c5e2 : 4980             [ 2] 	eor #0x80
c5e4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5e5 :                       vdp_wr_addr
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank2.s --------------------------------

c5e5 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5e8 : ea               [ 2] 	nop
c5e9 : ea               [ 2] 	nop
c5ea : 0940             [ 2] 	ora #0x40		; Required by VDP
c5ec : 8d0105           [ 4] 	sta VDP_MODE1
c5ef : 4940             [ 2] 	eor #0x40		; Undo that bit
c5f1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5f2 :                       vdp_mem_wait
c5f2 : da               [ 3] 	phx								; 3
c5f3 : a616             [ 3] 	ldx vdp_delay					; 3
c5f5 : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c5f7 :                       vdp_mem_wait_loop
c5f7 : ca               [ 2] 	dex								; 2
c5f8 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c5fa :                       vdp_mem_wait_end
c5fa : fa               [ 4] 	plx								; 3
c5fb : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5fc :                       vdp_rd_addr
c5fc : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c5ff : ea               [ 2] 	nop
c600 : ea               [ 2] 	nop
c601 : 8d0105           [ 4] 	sta VDP_MODE1
c604 : 80ec             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c606 :                       vdp_rd_vram
c606 : ad0005           [ 4] 	lda VDP_VRAM
c609 : 80e7             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank2.s --------------------------------

                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c60b :                       vdp_wr_vram
c60b : 8d0005           [ 4] 	sta VDP_VRAM
c60e : 80e2             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c610 :                       vdp_poke
c610 : 48               [ 3] 	pha
c611 : 98               [ 2] 	tya
c612 : 78               [ 2] 	sei
c613 : 20e5c5           [ 6] 	jsr vdp_wr_addr
c616 : 68               [ 4] 	pla
c617 : 200bc6           [ 6] 	jsr vdp_wr_vram
c61a : 58               [ 2] 	cli
c61b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c61c :                       vdp_peek
c61c : 78               [ 2] 	sei
c61d : 20fcc5           [ 6] 	jsr vdp_rd_addr
c620 : 2006c6           [ 6] 	jsr vdp_rd_vram
c623 : 58               [ 2] 	cli
c624 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank2.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c625 :                       snd_set
c625 : 48               [ 3] 	pha
                             
c626 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c628 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c62b : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c62e : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c631 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c633 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c635 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c638 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c63a : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c63d : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c640 : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c642 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c645 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c647 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c64a : 68               [ 4] 	pla
                             	
c64b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c64c :                       snd_get
c64c : 48               [ 3] 	pha
                             
c64d : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c64f : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c652 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c655 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c658 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c65a : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c65c : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c65f : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c661 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c664 : a900             [ 2] 	lda #0x00				; Set Port A to input
c666 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c669 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c66c : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c66e : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c670 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c673 : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank2.s --------------------------------

                             	
c676 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c678 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c67b : 68               [ 4] 	pla
                             	
c67c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c67d :                       snd_get_joy0
c67d : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c67f : 204cc6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c682 : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c683 :                       main
                             
c683 :                       infinity
c683 : 2046c0           [ 6] 	jsr _df_pg_dflat
c686 : 4c83c6           [ 3] 	jmp infinity
                             
c689 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c689 : 4275696c64203a..       db "Build : 12/08/2023\r" 
c69c : 3132384b204272..       db "128K Breadboard Computer\r" 
c6b5 : 42792040363530..       db "By @6502Nerd\r" 
c6c2 : 436f7079726967..       db "Copyright (c) 2022\r",0 
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank2.s --------------------------------

                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c6d6 :                       init_nmi
                             	; Core IRQ handler
c6d6 : a9e2             [ 2] 	lda #lo(nmi)
c6d8 : 8502             [ 3] 	sta int_nmi
c6da : a9c6             [ 2] 	lda #hi(nmi)
c6dc : 8503             [ 3] 	sta int_nmi+1
c6de : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c6df :                       call_nmi_master
c6df : 6c0200           [ 6] 	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* Only the 6551 uses this - fills the receive bu
c6e2 :                       nmi
c6e2 : 48               [ 3] 	pha
                             
c6e3 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c6e6 : 100c             [ 3] 	bpl	nmi_fin					; If no interrupt don't do anyth
                             
c6e8 : 5a               [ 3] 	phy
c6e9 : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c6ec : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c6ee : 990008           [ 5] 	sta ser_buf,y
c6f1 : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c6f3 : 7a               [ 4] 	ply
c6f4 :                       nmi_fin
                             
c6f4 : 68               [ 4] 	pla
c6f5 : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c6f6 :                       init_irq
                             	; Core IRQ handler
c6f6 : a930             [ 2] 	lda #lo(irq)
c6f8 : 8504             [ 3] 	sta int_irq
c6fa : a9c7             [ 2] 	lda #hi(irq)
c6fc : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c6fe : a95e             [ 2] 	lda #lo(irq_brk)
c700 : 8506             [ 3] 	sta int_brk
c702 : a9c7             [ 2] 	lda #hi(irq_brk)
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank2.s --------------------------------

c704 : 8507             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c706 : a92f             [ 2] 	lda #lo(null_handler)
c708 : 8508             [ 3] 	sta int_uservdp
c70a : a9c7             [ 2] 	lda #hi(null_handler)
c70c : 8509             [ 3] 	sta int_uservdp+1
                             
c70e : a92f             [ 2] 	lda #lo(null_handler)
c710 : 850a             [ 3] 	sta int_usercia0
c712 : a9c7             [ 2] 	lda #hi(null_handler)
c714 : 850b             [ 3] 	sta int_usercia0+1
                             
c716 : a92f             [ 2] 	lda #lo(null_handler)
c718 : 850c             [ 3] 	sta int_usercia1
c71a : a9c7             [ 2] 	lda #hi(null_handler)
c71c : 850d             [ 3] 	sta int_usercia1+1
                             
c71e : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c71f :                       call_irq_master
c71f : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c722 :                       call_irq_brk
c722 : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c725 :                       call_irq_uservdp
c725 : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c728 :                       call_irq_usercia0
c728 : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c72b :                       call_irq_usercia1
c72b : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c72e :                       null_irq
c72e : 40               [ 6] 	rti
                             
                             ;* null handler
c72f :                       null_handler
c72f : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c730 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c733 : ba               [ 2] 	tsx
c734 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c737 : 2910             [ 2] 	and #0x10
c739 : d0e7             [ 3] 	bne call_irq_brk
                             	
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank2.s --------------------------------

c73b : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c73c : ad8d04           [ 4] 	lda IO_1 + IFR
c73f : 1003             [ 3] 	bpl irq_check_vdp
c741 : 202bc7           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c744 :                       irq_check_vdp	
c744 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c747 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c749 : 2025c7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c74c : 20abc7           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c74f : 2089c7           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c752 :                       irq_check_cia0
c752 : ad0d04           [ 4] 	lda IO_0 + IFR
c755 : 1003             [ 3] 	bpl irq_fin
c757 : 2028c7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c75a :                       irq_fin
                             	_pullAXY
                             
c75d : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c75e :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c75e : 38               [ 2] 	sec
c75f : bd0501           [ 4] 	lda 0x0105,x
c762 : e902             [ 2] 	sbc #2
c764 : 85a4             [ 3] 	sta df_brkpc
c766 : bd0601           [ 4] 	lda 0x0106,x
c769 : e900             [ 2] 	sbc #0
c76b : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c76d : a001             [ 2] 	ldy #1
c76f : b1a4             [ 5] 	lda (df_brkpc),y
c771 : 85a6             [ 3] 	sta df_brkval
c773 : 859f             [ 3] 	sta errno
                             	; now update the return address
c775 : a5a2             [ 3] 	lda df_pc
c777 : 9d0501           [ 5] 	sta 0x105,x
c77a : a5a3             [ 3] 	lda df_pc+1
c77c : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c782 : 8585             [ 3] 	sta num_a
c784 : 8686             [ 3] 	stx num_a+1
c786 : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c788 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank2.s --------------------------------

                             ;* Keyboard interrupt handler
                             ;****************************************
c789 :                       int_kb_handler	
c789 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c78b : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c78d : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c790 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c792 : f00c             [ 3] 	beq int_keys_up
c794 :                       int_do_read
c794 : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c796 : a53b             [ 3] 	lda kb_debounce			; Set debounce
c798 : 8537             [ 3] 	sta kb_deb
c79a :                       int_skip_scan
c79a : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c79c : 8d0d04           [ 4] 	sta IO_0 + IFR
c79f : 60               [ 6] 	rts
c7a0 :                       int_keys_up					; No key pressed
c7a0 : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c7a2 : 6434             [ 3] 	stz kb_last
c7a4 : 6435             [ 3] 	stz kb_code
c7a6 : 6437             [ 3] 	stz kb_deb
c7a8 : 6438             [ 3] 	stz kb_rep
c7aa : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c7ab :                       int_vdp_handler
c7ab : 20d7c7           [ 6] 	jsr update_timers	; If it is then update system 
                             
c7ae : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c7b0 : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c7b2 : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c7b4 : a513             [ 3] 	lda vdp_curstat		; Check it
c7b6 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c7b8 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c7ba : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c7bc : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c7be : 8513             [ 3] 	sta vdp_curstat		
                             
c7c0 : 18               [ 2] 	clc					; Add offset for cursor address in vram
c7c1 : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c7c3 : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c7c5 : aa               [ 2] 	tax
c7c6 : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c7c8 : 6900             [ 2] 	adc #0
                             
c7ca : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	
c7cd : a513             [ 3] 	lda vdp_curstat
c7cf : 2980             [ 2] 	and #0x80
c7d1 : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c7d3 : 200bc6           [ 6] 	jsr vdp_wr_vram
c7d6 :                       int_vdp_fin	
c7d6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank2.s --------------------------------

                             ;****************************************
c7d7 :                       update_timers
c7d7 : e610             [ 5] 	inc vdp_int_cnt
c7d9 : d002             [ 3] 	bne inc_kb_timers
c7db : e611             [ 5] 	inc vdp_int_cnt+1
c7dd :                       inc_kb_timers
c7dd : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c7df : f002             [ 3] 	beq skip_kb_deb
c7e1 : c637             [ 5] 	dec kb_deb
c7e3 :                       skip_kb_deb
c7e3 : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c7e5 : f002             [ 3] 	beq skip_kb_rep
c7e7 : c638             [ 5] 	dec kb_rep
c7e9 :                       skip_kb_rep
c7e9 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c7ea :                       long_delay
c7ea : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c7ee : a000             [ 2] 	ldy #0x00
c7f0 :                       long_delay_1
c7f0 : ea               [ 2] 	nop
c7f1 : ea               [ 2] 	nop
c7f2 : ea               [ 2] 	nop
c7f3 : ea               [ 2] 	nop
c7f4 : 88               [ 2] 	dey
c7f5 : d0f9             [ 3] 	bne long_delay_1
c7f7 : ca               [ 2] 	dex
c7f8 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c7fd : 28               [ 4] 	plp
                             	
c7fe : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank2.s --------------------------------

                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c7ff :                       utilPrintSPC
c7ff : 48               [ 3] 	pha
c800 : a920             [ 2] 	lda #' '
c802 : 2048c5           [ 6] 	jsr io_put_ch
c805 : 68               [ 4] 	pla
c806 : 60               [ 6] 	rts
                             
c807 :                       utilPrintCRLF
c807 : 48               [ 3] 	pha
c808 : a90d             [ 2] 	lda #UTF_CR
c80a : 2048c5           [ 6] 	jsr io_put_ch
c80d : 68               [ 4] 	pla
c80e : 60               [ 6] 	rts
                             
c80f :                       utilPrintA
c80f : 8545             [ 3] 	sta tmp_d
c811 : 48               [ 3] 	pha
c812 : 8a               [ 2] 	txa
c813 : 48               [ 3] 	pha
c814 : a545             [ 3] 	lda tmp_d
c816 : 2034c8           [ 6] 	jsr str_a_to_x
c819 : 2048c5           [ 6] 	jsr io_put_ch
c81c : 8a               [ 2] 	txa
c81d : 2048c5           [ 6] 	jsr io_put_ch
c820 : 68               [ 4] 	pla
c821 : aa               [ 2] 	tax
c822 : 68               [ 4] 	pla
c823 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c824 :                       util_clr_mem
c824 : 48               [ 3] 	pha
c825 : 5a               [ 3] 	phy
c826 : 863f             [ 3] 	stx tmp_v1
c828 : 8540             [ 3] 	sta tmp_v1+1
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank2.s --------------------------------

c82a : a900             [ 2] 	lda #0
c82c :                       mem_clr_byte
c82c : 88               [ 2] 	dey
c82d : 913f             [ 5] 	sta (tmp_v1),y
c82f : d0fb             [ 3] 	bne mem_clr_byte
c831 : 7a               [ 4] 	ply
c832 : 68               [ 4] 	pla
c833 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c834 :                       str_a_to_x
c834 : 48               [ 3] 	pha					; Save the byte using later on
c835 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c837 : 18               [ 2] 	clc
c838 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c83a : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c83c : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c83e : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c840 :                       skip_a_f_1
c840 : aa               [ 2] 	tax					; Low char is in X
c841 : 68               [ 4] 	pla					; Get byte back
c842 : 4a               [ 2] 	lsr a				; Make high nibble low
c843 : 4a               [ 2] 	lsr a
c844 : 4a               [ 2] 	lsr a
c845 : 4a               [ 2] 	lsr a
c846 : 18               [ 2] 	clc
c847 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c849 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c84b : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c84d : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c84f :                       skip_a_f_2
                             
c84f : 18               [ 2] 	clc					; No error
c850 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c851 :                       str_x_to_a
c851 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c853 : 38               [ 2] 	sec					; Process high char in A
c854 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c856 : c90a             [ 2] 	cmp #10				; If A < 10 then
c858 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c85a : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c85c :                       skip_x_f_1
c85c : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c85e : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c860 : 0a               [ 2] 	asl a				; This is the high nibble
c861 : 0a               [ 2] 	asl a
c862 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank2.s --------------------------------

c863 : 0a               [ 2] 	asl a
c864 : 48               [ 3] 	pha					; Save the high nibble
c865 : 8a               [ 2] 	txa					; Now process the low char in X
c866 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c868 : 38               [ 2] 	sec
c869 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c86b : c90a             [ 2] 	cmp #10				; If A < 10 then
c86d : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c86f : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c871 :                       skip_x_f_2
c871 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c873 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c875 : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c877 : 68               [ 4] 	pla					; Get high nibble
c878 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c87a : 18               [ 2] 	clc					; No error
c87b : 60               [ 6] 	rts					; A contains value
                             
c87c :                       str_x_to_a_errl
c87c : 68               [ 4] 	pla
c87d :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c87f :                       con_n_to_a
c87f : 8691             [ 3] 	stx num_tmp
c881 : 8592             [ 3] 	sta num_tmp+1
c883 : 6485             [ 3] 	stz num_a
c885 : 6486             [ 3] 	stz num_a+1
c887 : c000             [ 2] 	cpy #NUM_ANY
c889 : f014             [ 3] 	beq con_n_to_a_detect
c88b : 88               [ 2] 	dey
c88c : d003             [ 3] 	bne con_n_not_dec
c88e :                       con_dec_jmp
c88e : 4c22c9           [ 3] 	jmp con_dec_to_a_int
c891 :                       con_n_not_dec
c891 : 88               [ 2] 	dey
c892 : d003             [ 3] 	bne con_n_not_hex
c894 :                       con_hex_jmp
c894 : 4cb9c8           [ 3] 	jmp con_hex_to_a_int
c897 :                       con_n_not_hex
c897 : 88               [ 2] 	dey
c898 : d003             [ 3] 	bne con_n_err
c89a :                       con_bin_jmp
c89a : 4cf8c8           [ 3] 	jmp con_bin_to_a_int
c89d :                       con_n_err
c89d : 38               [ 2] 	sec
c89e : 60               [ 6] 	rts
c89f :                       con_n_to_a_detect
c89f : b291             [ 5] 	lda (num_tmp)
c8a1 : c930             [ 2] 	cmp #'0'
c8a3 : d0e9             [ 3] 	bne con_dec_jmp
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank2.s --------------------------------

c8a5 : a001             [ 2] 	ldy #1
c8a7 : b191             [ 5] 	lda (num_tmp),y
c8a9 : 0920             [ 2] 	ora #0x20
c8ab : c978             [ 2] 	cmp #'x'
c8ad : f0e5             [ 3] 	beq con_hex_jmp
c8af : c962             [ 2] 	cmp #'b'
c8b1 : f0e7             [ 3] 	beq con_bin_jmp
c8b3 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8b5 :                       con_hex_to_a
c8b5 : 8691             [ 3] 	stx num_tmp
c8b7 : 8592             [ 3] 	sta num_tmp+1
c8b9 :                       con_hex_to_a_int
c8b9 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c8bb : a002             [ 2] 	ldy #2			; start at first digit
c8bd :                       con_hex_digit
c8bd : b191             [ 5] 	lda (num_tmp),y
c8bf : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c8c1 : 38               [ 2] 	sec							; Process high char in A
c8c2 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c8c4 : c90a             [ 2] 	cmp #10						; If A < 10 then
c8c6 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c8c8 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c8ca :                       con_hex_skip_x_f_1
c8ca : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c8cc : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c8ce : 48               [ 3] 	pha
                             	; make room for lo nibble
c8cf : 0685             [ 5] 	asl num_a
c8d1 : 2686             [ 5] 	rol num_a+1
c8d3 : 0685             [ 5] 	asl num_a
c8d5 : 2686             [ 5] 	rol num_a+1
c8d7 : 0685             [ 5] 	asl num_a
c8d9 : 2686             [ 5] 	rol num_a+1
c8db : 0685             [ 5] 	asl num_a
c8dd : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c8df : 68               [ 4] 	pla
c8e0 : 0585             [ 3] 	ora num_a
c8e2 : 8585             [ 3] 	sta num_a
c8e4 : c8               [ 2] 	iny
c8e5 : ca               [ 2] 	dex
c8e6 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c8e8 :                       con_hex_err
c8e8 : 38               [ 2] 	sec
c8e9 : 60               [ 6] 	rts
                             	; found a non-hex digit
c8ea :                       con_hex_done
                             	; if no digits processed then error
c8ea : c002             [ 2] 	cpy #2
c8ec : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c8ee : 98               [ 2] 	tya
c8ef : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank2.s --------------------------------

c8f0 : a902             [ 2] 	lda #NUM_HEX
c8f2 : 18               [ 2] 	clc
c8f3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8f4 :                       con_bin_to_a
c8f4 : 8691             [ 3] 	stx num_tmp
c8f6 : 8592             [ 3] 	sta num_tmp+1
c8f8 :                       con_bin_to_a_int
c8f8 : a002             [ 2] 	ldy #2
c8fa : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c8fc :                       con_bin_digit
c8fc : b191             [ 5] 	lda (num_tmp),y
c8fe : c930             [ 2] 	cmp #'0'
c900 : 9010             [ 3] 	bcc con_bin_done
c902 : c932             [ 2] 	cmp #'1'+1
c904 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c906 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c908 : 2685             [ 5] 	rol num_a
c90a : 2686             [ 5] 	rol num_a+1
c90c : c8               [ 2] 	iny
c90d : ca               [ 2] 	dex
c90e : d0ec             [ 4] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c910 : 800a             [ 3] 	bra con_bin_err
c912 :                       con_bin_done
                             	; didn't process any digit = error
c912 : c002             [ 2] 	cpy #2
c914 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c916 : 98               [ 2] 	tya
c917 : aa               [ 2] 	tax
c918 : a903             [ 2] 	lda #NUM_BIN
c91a : 18               [ 2] 	clc
c91b : 60               [ 6] 	rts
c91c :                       con_bin_err
c91c : 38               [ 2] 	sec
c91d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c91e :                       con_dec_to_a
c91e : 8691             [ 3] 	stx num_tmp
c920 : 8592             [ 3] 	sta num_tmp+1
c922 :                       con_dec_to_a_int
c922 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c924 : b291             [ 5] 	lda (num_tmp)
c926 : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank2.s --------------------------------

c928 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c92a : c8               [ 2] 	iny
c92b :                       str_d_find_end
c92b : b191             [ 5] 	lda (num_tmp),y
c92d : c930             [ 2] 	cmp #'0'
c92f : 9007             [ 3] 	bcc str_d_found_end
c931 : c93a             [ 2] 	cmp #'9'+1
c933 : b003             [ 3] 	bcs str_d_found_end
c935 : c8               [ 2] 	iny
c936 : 80f3             [ 3] 	bra str_d_find_end
c938 :                       str_d_found_end
c938 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c93a : b052             [ 3] 	bcs str_d_error		; e.g. -32767 including minus
c93c : 8494             [ 3] 	sty num_tmp+3
c93e : 6493             [ 3] 	stz num_tmp+2
c940 : 6485             [ 3] 	stz num_a
c942 : 6486             [ 3] 	stz num_a+1
c944 :                       str_d_process_digit
c944 : 88               [ 2] 	dey
c945 : 3026             [ 3] 	bmi str_d_digits_done
                             
c947 : b191             [ 5] 	lda (num_tmp),y
                             
c949 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c94b : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c94d : 38               [ 2] 	sec
c94e : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c950 : 18               [ 2] 	clc
c951 : 0a               [ 2] 	asl a
c952 : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c954 : aa               [ 2] 	tax
c955 : a585             [ 3] 	lda num_a
c957 : 7d90c9           [ 4] 	adc str_d_powers,x
c95a : 8585             [ 3] 	sta num_a
c95c : a586             [ 3] 	lda num_a+1
c95e : 7d91c9           [ 4] 	adc str_d_powers+1,x
c961 : 8586             [ 3] 	sta num_a+1
c963 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c965 : a593             [ 3] 	lda num_tmp+2
c967 : 6914             [ 2] 	adc #20
c969 : 8593             [ 3] 	sta num_tmp+2
c96b : 80d7             [ 3] 	bra str_d_process_digit
c96d :                       str_d_digits_done
                             	; check if minus
c96d : b291             [ 5] 	lda (num_tmp)
c96f : c92d             [ 2] 	cmp #'-'
c971 : d011             [ 3] 	bne str_d_skip_neg
c973 : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c975 : e002             [ 2] 	cpx #2				; else it's an error
c977 : 9015             [ 3] 	bcc str_d_error
c979 : a685             [ 3] 	ldx num_a
c97b : a586             [ 3] 	lda num_a+1
c97d : 20f4c9           [ 6] 	jsr twos_complement
c980 : 8685             [ 3] 	stx num_a
c982 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank2.s --------------------------------

c984 :                       str_d_skip_neg
c984 : a694             [ 3] 	ldx num_tmp+3
c986 : e001             [ 2] 	cpx #1				; must be at least 1 char
c988 : 9004             [ 3] 	bcc str_d_error
c98a : a901             [ 2] 	lda #NUM_DEC
c98c : 18               [ 2] 	clc
c98d : 60               [ 6] 	rts
c98e :                       str_d_error
c98e : 38               [ 2] 	sec
c98f : 60               [ 6] 	rts
                             
c990 :                       str_d_powers
c990 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c9a4 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c9b8 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c9cc : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c9e0 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c9f4 :                       twos_complement
c9f4 : 49ff             [ 2] 	eor #0xff
c9f6 : 48               [ 3] 	pha
c9f7 : 8a               [ 2] 	txa
c9f8 : 49ff             [ 2] 	eor #0xff
c9fa : aa               [ 2] 	tax
c9fb : 68               [ 4] 	pla
c9fc : e8               [ 2] 	inx
c9fd : d001             [ 4] 	bne twos_complement_skip_X
c9ff : 1a               [ 2] 	inc a
ca00 :                       twos_complement_skip_X
ca00 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
ca01 :                       int_to_bcd
ca01 : 08               [ 3] 	php
ca02 : 48               [ 3] 	pha
ca03 : da               [ 3] 	phx
                             
ca04 : 8691             [ 3] 	stx num_tmp
ca06 : 8592             [ 3] 	sta num_tmp+1
ca08 : c980             [ 2] 	cmp #0x80			; Negative?
ca0a : 9003             [ 3] 	bcc int_to_bcd_skip_neg
ca0c : 20f4c9           [ 6] 	jsr twos_complement
ca0f :                       int_to_bcd_skip_neg
ca0f : 6485             [ 3] 	stz num_a
ca11 : 6486             [ 3] 	stz num_a+1
ca13 : 6487             [ 3] 	stz num_a+2
ca15 : 6488             [ 3] 	stz num_a+3
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank2.s --------------------------------

ca17 : a210             [ 2] 	ldx #16
ca19 : f8               [ 2] 	sed
ca1a :                       int_to_bcd_bit
ca1a : 0691             [ 5] 	asl num_tmp
ca1c : 2692             [ 5] 	rol num_tmp+1
ca1e : a585             [ 3] 	lda num_a
ca20 : 6585             [ 3] 	adc num_a
ca22 : 8585             [ 3] 	sta num_a
ca24 : a586             [ 3] 	lda num_a+1
ca26 : 6586             [ 3] 	adc num_a+1
ca28 : 8586             [ 3] 	sta num_a+1
ca2a : a587             [ 3] 	lda num_a+2
ca2c : 6587             [ 3] 	adc num_a+2
ca2e : 8587             [ 3] 	sta num_a+2
ca30 : ca               [ 2] 	dex
ca31 : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
ca33 : fa               [ 4] 	plx
ca34 : 68               [ 4] 	pla
ca35 : 28               [ 4] 	plp
ca36 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
ca37 :                       word_to_bcd
ca37 : 08               [ 3] 	php
ca38 : 48               [ 3] 	pha
ca39 : da               [ 3] 	phx
                             
ca3a : 8691             [ 3] 	stx num_tmp
ca3c : 8592             [ 3] 	sta num_tmp+1
ca3e : 6485             [ 3] 	stz num_a
ca40 : 6486             [ 3] 	stz num_a+1
ca42 : 6487             [ 3] 	stz num_a+2
ca44 : 6488             [ 3] 	stz num_a+3
ca46 : a210             [ 2] 	ldx #16			; 16 binary bits
ca48 : f8               [ 2] 	sed
ca49 :                       word_to_bcd_bit
ca49 : 0691             [ 5] 	asl num_tmp
ca4b : 2692             [ 5] 	rol num_tmp+1
ca4d : a585             [ 3] 	lda num_a
ca4f : 6585             [ 3] 	adc num_a
ca51 : 8585             [ 3] 	sta num_a
ca53 : a586             [ 3] 	lda num_a+1
ca55 : 6586             [ 3] 	adc num_a+1
ca57 : 8586             [ 3] 	sta num_a+1
ca59 : a587             [ 3] 	lda num_a+2
ca5b : 6587             [ 3] 	adc num_a+2
ca5d : 8587             [ 3] 	sta num_a+2
ca5f : ca               [ 2] 	dex
ca60 : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
ca62 : fa               [ 4] 	plx
ca63 : 68               [ 4] 	pla
ca64 : 28               [ 4] 	plp
ca65 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank2.s --------------------------------

                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
ca66 :                       int_to_str_ch
ca66 : 290f             [ 2] 	and #0xf
ca68 : 0930             [ 2] 	ora #0x30					; Convert to ascii
ca6a : 4930             [ 2] 	eor #0x30					; Check if zero digit
ca6c : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
ca6e : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
ca70 : 4930             [ 2] 	eor #0x30					; Restore A
ca72 : 60               [ 6] 	rts							; Return without storing anything
ca73 :                       int_to_str_nz
ca73 : 4930             [ 2] 	eor #0x30					; Restore A
ca75 : 999500           [ 5] 	sta num_buf,y
ca78 : c8               [ 2] 	iny
ca79 : 38               [ 2] 	sec							; Set C as a non-zero encountered
ca7a :                       int_to_str_ch_fin
ca7a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
ca7b :                       int_to_str
                             	_pushAXY
                             
ca7e : a000             [ 2] 	ldy #0						; first pos of num_buf
ca80 : 0900             [ 2] 	ora #0						; Test A for sign bit
ca82 : 08               [ 3] 	php							; Remember C bit of P
ca83 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
ca85 : 20f4c9           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
ca88 : 48               [ 3] 	pha							; Remember A
ca89 : a92d             [ 2] 	lda #'-'					; Put in negative sign
ca8b : 8595             [ 3] 	sta num_buf
ca8d : c8               [ 2] 	iny							; Start at second buffer pos
ca8e : 68               [ 4] 	pla							; Restore A
ca8f :                       int_to_str_skip_neg
ca8f : 2037ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
ca92 : a202             [ 2] 	ldx #2						; Start at BCD high byte
ca94 :                       int_str
ca94 : 28               [ 4] 	plp							; Get C but immediately
ca95 : 08               [ 3] 	php							; Save C (due to loop check later)
ca96 : b585             [ 4] 	lda num_a,x					; Get BCD digit
ca98 : 859c             [ 3] 	sta num_buf+7				; Save A it for the units later
ca9a : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
ca9b : 4a               [ 2] 	lsr a
ca9c : 4a               [ 2] 	lsr a
ca9d : 4a               [ 2] 	lsr a
ca9e : 28               [ 4] 	plp							; Get C
ca9f : 2066ca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
caa2 : a59c             [ 3] 	lda num_buf+7				; Get A for the units
caa4 : 2066ca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
caa7 : 08               [ 3] 	php							; Save C
caa8 : ca               [ 2] 	dex
caa9 : 10e9             [ 3] 	bpl int_str
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank2.s --------------------------------

caab : 28               [ 4] 	plp							; Check C
caac : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
caae : a930             [ 2] 	lda #'0'					; Stuff a zero
cab0 : 8595             [ 3] 	sta num_buf					; Must be in first position..
cab2 : c8               [ 2] 	iny
cab3 :                       int_to_str_fin
cab3 : a900             [ 2] 	lda #0						; Terminator
cab5 : 999500           [ 5] 	sta num_buf,y
cab8 : c8               [ 2] 	iny
                             	_pullAXY
                             
cabc : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank2.s --------------------------------

                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cabd :                       str_a_to_d
cabd : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank2.s --------------------------------

                             ;****************************************
cabe :                       print_a_to_d
cabe : 207bca           [ 6] 	jsr int_to_str
cac1 : a000             [ 2] 	ldy #0
cac3 :                       print_a_to_d_ch
cac3 : b99500           [ 4] 	lda num_buf,y
cac6 : f006             [ 3] 	beq print_a_to_d_fin
cac8 : 2048c5           [ 6] 	jsr io_put_ch
cacb : c8               [ 2] 	iny
cacc : d0f5             [ 3] 	bne print_a_to_d_ch
cace :                       print_a_to_d_fin
cace : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cacf :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
cacf : 4c2acb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cad2 :                       init_2					; init_ram will jump back to here
cad2 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cad4 : 9a               [ 2] 	txs
                             ;	cld					; No need as disabled on startup
                             	
cad5 : 20dbca           [ 6] 	jsr kernel_init
                             
cad8 : 4c83c6           [ 3] 	jmp main
                             
cadb :                       kernel_init
cadb : 20d6c6           [ 6] 	jsr init_nmi		; Initialise NMI handling
cade : 20f6c6           [ 6] 	jsr init_irq		; Initialise IRQ handling
cae1 : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cae4 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cae7 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
caea :                       kernel_test
caea : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
caed : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
caf0 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
caf3 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
caf5 : 48               [ 3] 	pha
caf6 : a20e             [ 2] 	ldx #0xe			; NV location for default text mode [
caf8 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cafb : b00b             [ 4] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cafd : aa               [ 2] 	tax					; Save the mode temporarily
cafe : 68               [ 4] 	pla					; Get the default mode from stack
caff : 8a               [ 2] 	txa					; And push the NV mode that was read
cb00 : 48               [ 3] 	pha
cb01 : a20f             [ 2] 	ldx #0xf			; NV location for the default colour
cb03 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cb06 : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cb08 :                       kernel_skip_nv	
cb08 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cb09 : 20c6c1           [ 6] 	jsr _gr_init_screen
cb0c : 200ec5           [ 6] 	jsr io_init			; Set default input/output device
cb0f : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank2.s --------------------------------

                             
                             
cb1d : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cb20 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cb23 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cb26 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cb29 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cb2a :                       init_ram
cb2a : 6400             [ 3] 	stz 0x00			; Start at page 0
cb2c : 6401             [ 3] 	stz 0x01
cb2e : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cb30 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cb32 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cb34 :                       init_ram_1
cb34 : e004             [ 2] 	cpx	#4				; Page <4 is ok
cb36 : 9006             [ 3] 	bcc init_ram_fill
cb38 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cb3a : b002             [ 3] 	bcs init_ram_fill
cb3c : 8002             [ 3] 	bra init_ram_skip
cb3e :                       init_ram_fill
cb3e : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cb40 :                       init_ram_skip
cb40 : c8               [ 2] 	iny
cb41 : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cb43 : e8               [ 2] 	inx					; Increment page counter
cb44 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cb46 : d0ec             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cb48 : 4cd2ca           [ 3] 	jmp init_2			; Carry on initialisation
                             
cb4b :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "sdcard\sdcard.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SDCARD.S
                             ;*  Low level SD card driver routines.  This modu
                             ;*  software bit banging through VIA 2 port B of 
                             ;*  interface.  So the card is clocked in softwar
                             ;*  not great for performance but fast enough for
                             ;*  purposes.  I think we can get around 8.5KB/s 
                             ;*  read/write speed, translating to around 5.5KB
                             ;*  throughput using the filesystem.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank2.s --------------------------------

                             
cb4b :                       mod_sz_sdcard_s
                             
                             ;****************************************
                             ;* init_sdcard
                             ;* Initialise SD card interface after CIA2!
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cb4b :                       init_sdcard
cb4b : ad8004           [ 4] 	lda IO_1+PRB					; Detect card
cb4e : 2904             [ 2] 	and #0x04						; Bit 2 of PRB = 0
cb50 : 854b             [ 3] 	sta sd_status
cb52 : d046             [ 3] 	bne init_sd_failed				; If not zero then no card
                             	_println sd_msg_initialising
                             
cb61 :                       init_sdcard_try
cb61 : a908             [ 2] 	lda #SD_CS						; Unselect device
cb63 : 0c8004           [ 3] 	tsb SD_REG
cb66 : a901             [ 2] 	lda #SD_CLK						; Set clock low
cb68 : 1c8004           [ 3] 	trb SD_REG
cb6b : a910             [ 2] 	lda #SD_MOSI					; DI/MOSI high
cb6d : 0c8004           [ 3] 	tsb SD_REG
cb70 : a208             [ 2] 	ldx #8							; 8*0.125ms = 1ms
cb72 : 20eac7           [ 6] 	jsr long_delay
                             
cb75 : a208             [ 2] 	ldx #8							; 10 bytes of 0xff
cb77 : a9ff             [ 2] 	lda #0xff
cb79 :                       init_sd_pulse
cb79 : 20d2cb           [ 6] 	jsr sd_sendbyte					; Send the 0xff byte
cb7c : ca               [ 2] 	dex
cb7d : d0fa             [ 3] 	bne init_sd_pulse
cb7f : a908             [ 2] 	lda #SD_CS						; Unselect device
cb81 : 0c8004           [ 3] 	tsb SD_REG
                             
cb84 :                       init_cmd0
cb84 : 2093cc           [ 6] 	jsr sd_sendcmd0
cb87 : c9ff             [ 2] 	cmp #0xff						; 0xff is not a valid response
cb89 : d002             [ 3] 	bne init_sd_next
cb8b : f0d4             [ 3] 	beq init_sdcard_try
                             	
cb8d :                       init_sd_next
cb8d :                       init_acmd41
cb8d : 20b5cc           [ 6] 	jsr sd_sendcmd55
                             
cb90 : 20d7cc           [ 6] 	jsr sd_sendcmd41
                             	
cb93 : c900             [ 2] 	cmp #0							; Was R1 = 0
cb95 : d0f6             [ 3] 	bne init_acmd41					; Retry if not
                             	
cb97 :                       init_cmd16
cb97 : 4cf9cc           [ 3] 	jmp sd_sendcmd16
cb9a :                       init_sd_failed
                             	; Got here then the card didn't initialise
                             	_println sd_msg_failed
                             
cba7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_startcmd
                             ;* Start a cmd frame by sending CS high to low
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank2.s --------------------------------

                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cba8 :                       sd_startcmd
cba8 : 48               [ 3] 	pha								; Save A
cba9 : ad0004           [ 4] 	lda IO_0 + PRB					; Get current led status
cbac : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
cbae : 4902             [ 2] 	eor #KB_LED0					; Switch on if C=1
cbb0 : 8d0004           [ 4] 	sta IO_0 + PRB					; Set the leds
                             
cbb3 : a9ff             [ 2] 	lda #0xff						; Send 0xff
cbb5 : 20d2cb           [ 6] 	jsr sd_sendbyte					; Delay / synch pulses
cbb8 : 20d2cb           [ 6] 	jsr sd_sendbyte					; With CS not asserted
                             
cbbb : a908             [ 2] 	lda #SD_CS						; Chip select bit
cbbd : 1c8004           [ 3] 	trb SD_REG						; Now set it low
                             
cbc0 : 68               [ 4] 	pla								; Restore A
cbc1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_endcmd
                             ;* End a cmd frame by sending CS high
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cbc2 :                       sd_endcmd
cbc2 : 48               [ 3] 	pha
                             
cbc3 : ad0004           [ 4] 	lda IO_0 + PRB					; Get current led status
cbc6 : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
cbc8 : 8d0004           [ 4] 	sta IO_0 + PRB					; Set the leds
                             
cbcb : a908             [ 2] 	lda #SD_CS						; Chip select bit
cbcd : 0c8004           [ 3] 	tsb SD_REG						; First set it high
                             
cbd0 : 68               [ 4] 	pla
cbd1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendbyte
                             ;* Low level byte send routine
                             ;* Input : A = byte to send
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cbd2 :                       sd_sendbyte
cbd2 : 48               [ 3] 	pha
cbd3 : 5a               [ 3] 	phy
                             
cbd4 : 8541             [ 3] 	sta tmp_a						; For shifting out
                             
cbd6 : a008             [ 2] 	ldy #8							; 8 bits to shift out
cbd8 : ad8004           [ 4] 	lda SD_REG						; Load the SD register to A
cbdb :                       sd_shiftoutbit
cbdb : 0910             [ 2] 	ora #SD_MOSI					; And initially set output bit 
cbdd : 0641             [ 5] 	asl tmp_a						; Unless the bit to transmit is '
cbdf : b002             [ 3] 	bcs sd_shiftskiplo				; so then EOR the bit back
cbe1 : 4910             [ 2] 	eor #SD_MOSI
cbe3 :                       sd_shiftskiplo
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank2.s --------------------------------

cbe3 : 8d8004           [ 4] 	sta SD_REG						; Save data bit first, it seems,
                             	
cbe6 : ee8004           [ 6] 	inc SD_REG						; Set bit 1 of clock
                             ;	dec SD_REG						; Reset bit 1 of clock
cbe9 : 8d8004           [ 4] 	sta SD_REG						; Reset bit 1 of clock
                             
cbec : 88               [ 2] 	dey								; Count bits
cbed : d0ec             [ 3] 	bne sd_shiftoutbit				; Until no more bits to se
                             
cbef : 7a               [ 4] 	ply
cbf0 : 68               [ 4] 	pla
                             
cbf1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getbyte
                             ;* Low level get a byte
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
                             
cbf2 :                       sd_getbyte
cbf2 : 5a               [ 3] 	phy
cbf3 : da               [ 3] 	phx
                             
cbf4 : ad8004           [ 4] 	lda SD_REG
cbf7 : 0910             [ 2] 	ora #SD_MOSI					; Set MOSI high
cbf9 : 8d8004           [ 4] 	sta SD_REG
cbfc : a8               [ 2] 	tay								; Same as A with clock high
cbfd : c8               [ 2] 	iny
cbfe : aa               [ 2] 	tax								; Same as A with clock low
                             	
                             	; Unroll the code almost 20% faster than looping
                             	; bit 7
cbff : 8c8004           [ 4] 	sty SD_REG
cc02 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc05 : 8e8004           [ 4] 	stx SD_REG
cc08 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc0a : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 6
cc0c : 8c8004           [ 4] 	sty SD_REG
cc0f : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc12 : 8e8004           [ 4] 	stx SD_REG
cc15 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc17 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 5
cc19 : 8c8004           [ 4] 	sty SD_REG
cc1c : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc1f : 8e8004           [ 4] 	stx SD_REG
cc22 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc24 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 4
cc26 : 8c8004           [ 4] 	sty SD_REG
cc29 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc2c : 8e8004           [ 4] 	stx SD_REG
cc2f : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc31 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 3
cc33 : 8c8004           [ 4] 	sty SD_REG
cc36 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc39 : 8e8004           [ 4] 	stx SD_REG
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank2.s --------------------------------

cc3c : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc3e : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 2
cc40 : 8c8004           [ 4] 	sty SD_REG
cc43 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc46 : 8e8004           [ 4] 	stx SD_REG
cc49 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc4b : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 1
cc4d : 8c8004           [ 4] 	sty SD_REG
cc50 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc53 : 8e8004           [ 4] 	stx SD_REG
cc56 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc58 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 0
cc5a : 8c8004           [ 4] 	sty SD_REG
cc5d : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc60 : 8e8004           [ 4] 	stx SD_REG
cc63 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc65 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             
cc67 : a541             [ 3] 	lda tmp_a						; Return response in A
                             
cc69 : fa               [ 4] 	plx
cc6a : 7a               [ 4] 	ply
                             
cc6b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespbyte
                             ;* Low level get response routine
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc6c :                       sd_getrespbyte
cc6c : da               [ 3] 	phx
cc6d : a200             [ 2] 	ldx #0							; Try up to 256 times
cc6f :                       sd_respff
cc6f : e8               [ 2] 	inx								; Retry counter
cc70 : f007             [ 3] 	beq sd_resptimeout
cc72 : 20f2cb           [ 6] 	jsr sd_getbyte
cc75 : c9ff             [ 2] 	cmp #0xff						; Keep reading MISO until not FF
cc77 : f0f6             [ 3] 	beq sd_respff
cc79 :                       sd_resptimeout
cc79 : fa               [ 4] 	plx
cc7a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_busy
                             ;* Low level busy check routine
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc7b :                       sd_busy
cc7b : 48               [ 3] 	pha
cc7c : a54b             [ 3] 	lda sd_status					; If no card then fall out
cc7e : d007             [ 3] 	bne sd_isbusy_fin
cc80 :                       sd_isbusy
cc80 : 20f2cb           [ 6] 	jsr sd_getbyte
cc83 : c9ff             [ 2] 	cmp #0xff						; Keep reading MISO until FF
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank2.s --------------------------------

cc85 : d0f9             [ 3] 	bne sd_isbusy
cc87 :                       sd_isbusy_fin
cc87 : 68               [ 4] 	pla
cc88 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_waitforn0byte
                             ;* Low level routine waits for card to be ready
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc89 :                       sd_waitforn0byte
cc89 : a54b             [ 3] 	lda sd_status
cc8b : d005             [ 3] 	bne sd_waitforn0byte_fin
cc8d : 206ccc           [ 6] 	jsr sd_getrespbyte
cc90 : f0f7             [ 3] 	beq sd_waitforn0byte					; Zero byte means not r
cc92 :                       sd_waitforn0byte_fin
cc92 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd0
                             ;* Send CMD0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc93 :                       sd_sendcmd0
cc93 : 20a8cb           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40, 0x00, 0x00, 0x00, 0x00, 0x95
cc96 : a940             [ 2] 	lda #0x40
cc98 : 20d2cb           [ 6] 	jsr sd_sendbyte
cc9b : a900             [ 2] 	lda #0x00
cc9d : 20d2cb           [ 6] 	jsr sd_sendbyte
cca0 : 20d2cb           [ 6] 	jsr sd_sendbyte
cca3 : 20d2cb           [ 6] 	jsr sd_sendbyte
cca6 : 20d2cb           [ 6] 	jsr sd_sendbyte
cca9 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
ccab : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
ccae : 201fcd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
ccb1 : 20c2cb           [ 6] 	jsr sd_endcmd
                             	
ccb4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd55
                             ;* Send CMD55
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ccb5 :                       sd_sendcmd55
ccb5 : 20a8cb           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+55, 0x00, 0x00, 0x00, 0x00, 0x95
ccb8 : a977             [ 2] 	lda #0x40+55
ccba : 20d2cb           [ 6] 	jsr sd_sendbyte
ccbd : a900             [ 2] 	lda #0x00
ccbf : 20d2cb           [ 6] 	jsr sd_sendbyte
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank2.s --------------------------------

ccc2 : 20d2cb           [ 6] 	jsr sd_sendbyte
ccc5 : 20d2cb           [ 6] 	jsr sd_sendbyte
ccc8 : 20d2cb           [ 6] 	jsr sd_sendbyte
cccb : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cccd : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
ccd0 : 201fcd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
ccd3 : 20c2cb           [ 6] 	jsr sd_endcmd
                             	
ccd6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd41
                             ;* Send ACMD41
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ccd7 :                       sd_sendcmd41
ccd7 : 20a8cb           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+41, 0x00, 0x00, 0x00, 0x00, 0x95
ccda : a969             [ 2] 	lda #0x40+41
ccdc : 20d2cb           [ 6] 	jsr sd_sendbyte
ccdf : a900             [ 2] 	lda #0x00
cce1 : 20d2cb           [ 6] 	jsr sd_sendbyte
cce4 : 20d2cb           [ 6] 	jsr sd_sendbyte
cce7 : 20d2cb           [ 6] 	jsr sd_sendbyte
ccea : 20d2cb           [ 6] 	jsr sd_sendbyte
cced : a995             [ 2] 	lda #0x95						; Checksum needs to be right
ccef : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
ccf2 : 201fcd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
ccf5 : 20c2cb           [ 6] 	jsr sd_endcmd
                             	
ccf8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd16
                             ;* Send CMD16
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ccf9 :                       sd_sendcmd16
ccf9 : 20a8cb           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+16, 0x00, 0x00, 0x02, 0x00, 0x95
ccfc : a950             [ 2] 	lda #0x40+16
ccfe : 20d2cb           [ 6] 	jsr sd_sendbyte
cd01 : a900             [ 2] 	lda #0x00
cd03 : 20d2cb           [ 6] 	jsr sd_sendbyte
cd06 : 20d2cb           [ 6] 	jsr sd_sendbyte
cd09 : a902             [ 2] 	lda #0x02						; 0x200 block size = 512 bytes
cd0b : 20d2cb           [ 6] 	jsr sd_sendbyte
cd0e : a900             [ 2] 	lda #0x00
cd10 : 20d2cb           [ 6] 	jsr sd_sendbyte
cd13 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cd15 : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank2.s --------------------------------

cd18 : 201fcd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
cd1b : 20c2cb           [ 6] 	jsr sd_endcmd
                             	
cd1e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespR1
                             ;* Low level get response R1
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd1f :                       sd_getrespR1
cd1f : 206ccc           [ 6] 	jsr sd_getrespbyte
cd22 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd17
                             ;* Send CMD17
                             ;* Input : sd_sect = 4 bytes of sector offset lit
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd23 :                       sd_sendcmd17
cd23 : da               [ 3] 	phx
cd24 : 48               [ 3] 	pha								; A is the page to write to
                             	
cd25 : 20a8cb           [ 6] 	jsr sd_startcmd
                             
                             	; Convert sector address to byte address
                             	; Sector address is little endian
                             	; Byte address is big endian
cd28 : 6455             [ 3] 	stz sd_addr+3					; LSB of address is always 0
cd2a : a54e             [ 3] 	lda sd_sect+0					; LSB of sector goes to addres
cd2c : 8554             [ 3] 	sta sd_addr+2					; Equivalent of * 256
cd2e : a54f             [ 3] 	lda sd_sect+1
cd30 : 8553             [ 3] 	sta sd_addr+1
cd32 : a550             [ 3] 	lda sd_sect+2
cd34 : 8552             [ 3] 	sta sd_addr+0
cd36 : 18               [ 2] 	clc								; Now addr*2 so equiv to sect*512
cd37 : 0655             [ 5] 	asl sd_addr+3
cd39 : 2654             [ 5] 	rol sd_addr+2
cd3b : 2653             [ 5] 	rol sd_addr+1
cd3d : 2652             [ 5] 	rol sd_addr+0
                             
cd3f :                       sd_cmd17addr
                             	; Send 0x40+17, 0xA3, 0xA2, 0xA1, 0xA0, 0x95
cd3f : a951             [ 2] 	lda #0x40+17
cd41 : 20d2cb           [ 6] 	jsr sd_sendbyte
cd44 : a552             [ 3] 	lda sd_addr+0
cd46 : 20d2cb           [ 6] 	jsr sd_sendbyte
cd49 : a553             [ 3] 	lda sd_addr+1
cd4b : 20d2cb           [ 6] 	jsr sd_sendbyte
cd4e : a554             [ 3] 	lda sd_addr+2
cd50 : 20d2cb           [ 6] 	jsr sd_sendbyte
cd53 : a555             [ 3] 	lda sd_addr+3
cd55 : 20d2cb           [ 6] 	jsr sd_sendbyte
cd58 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cd5a : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
cd5d : 206ccc           [ 6] 	jsr sd_getrespbyte
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank2.s --------------------------------

cd60 : aa               [ 2] 	tax								; Save response in X for return
                             
cd61 : 68               [ 4] 	pla								; Get the A param
cd62 : 206ecd           [ 6] 	jsr sd_getrespR17				; Get the response
                             
cd65 : 207bcc           [ 6] 	jsr sd_busy						; Wait for card to be ready
                             	
cd68 : 20c2cb           [ 6] 	jsr sd_endcmd
                             
cd6b : 8a               [ 2] 	txa								; Restore the response byte
cd6c : fa               [ 4] 	plx
                             	
cd6d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespR17
                             ;* Low level get response R17
                             ;* Input : A = R1 response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd6e :                       sd_getrespR17
cd6e : 48               [ 3] 	pha
cd6f : 5a               [ 3] 	phy
                             
cd70 : a44b             [ 3] 	ldy sd_status
cd72 : d025             [ 3] 	bne sd_getrespR17_fin
                             
cd74 : 8540             [ 3] 	sta tmp_v1+1					; Page to read in to
cd76 : 643f             [ 3] 	stz tmp_v1						; Always a page boundary
cd78 :                       sd_getrespR17token
cd78 : 20f2cb           [ 6] 	jsr sd_getbyte					; Get a byte
cd7b : c9fe             [ 2] 	cmp #0xfe						; Is it the token?
cd7d : d0f9             [ 3] 	bne sd_getrespR17token			; No
                             	
cd7f : a000             [ 2] 	ldy #0							; read 1st 256 bytes
cd81 :                       sd_getrespR17block1
cd81 : 20f2cb           [ 6] 	jsr sd_getbyte					; get a byte
cd84 : 913f             [ 5] 	sta (tmp_v1),y					; Save the byte
cd86 : c8               [ 2] 	iny								; Keep going
cd87 : d0f8             [ 3] 	bne sd_getrespR17block1			; Until all bytes read
                             
cd89 : e640             [ 5] 	inc tmp_v1+1					; Next page
cd8b :                       sd_getrespR17block2
cd8b : 20f2cb           [ 6] 	jsr sd_getbyte					; get a byet
cd8e : 913f             [ 5] 	sta (tmp_v1),y					; Save the byte
cd90 : c8               [ 2] 	iny								; Keep going
cd91 : d0f8             [ 3] 	bne sd_getrespR17block2			; Until all bytes read
                             
cd93 : 20f2cb           [ 6] 	jsr sd_getbyte					; CRC
cd96 : 20f2cb           [ 6] 	jsr sd_getbyte					; CRC
                             	
cd99 :                       sd_getrespR17_fin
cd99 : 7a               [ 4] 	ply
cd9a : 68               [ 4] 	pla
                             
cd9b : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* sd_sendcmd24
                             ;* Send CMD24
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank2.s --------------------------------

                             ;* Input : sd_sect = 4 bytes of sector offset lit
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd9c :                       sd_sendcmd24
cd9c : 5a               [ 3] 	phy
cd9d : 48               [ 3] 	pha
                             
cd9e : 20a8cb           [ 6] 	jsr sd_startcmd
                             
                             	; Convert sector address to byte address
                             	; Sector address is little endian
                             	; Byte address is big endian
cda1 : 6455             [ 3] 	stz sd_addr+3					; LSB of address is always 0
cda3 : a54e             [ 3] 	lda sd_sect+0					; LSB of sector goes to addres
cda5 : 8554             [ 3] 	sta sd_addr+2					; Equivalent of * 256
cda7 : a54f             [ 3] 	lda sd_sect+1
cda9 : 8553             [ 3] 	sta sd_addr+1
cdab : a551             [ 3] 	lda sd_sect+3
cdad : 8552             [ 3] 	sta sd_addr+0
cdaf : 18               [ 2] 	clc								; Now addr*2 so equiv to sect*512
cdb0 : 0655             [ 5] 	asl sd_addr+3
cdb2 : 2654             [ 5] 	rol sd_addr+2
cdb4 : 2653             [ 5] 	rol sd_addr+1
cdb6 : 2652             [ 5] 	rol sd_addr+0
                             
                             	; Send 0x40+24, 0xA0, 0xA1, 0xA2, 0xA3, 0x95
cdb8 : a958             [ 2] 	lda #0x40+24
cdba : 20d2cb           [ 6] 	jsr sd_sendbyte
cdbd : a552             [ 3] 	lda sd_addr+0
cdbf : 20d2cb           [ 6] 	jsr sd_sendbyte
cdc2 : a553             [ 3] 	lda sd_addr+1
cdc4 : 20d2cb           [ 6] 	jsr sd_sendbyte
cdc7 : a554             [ 3] 	lda sd_addr+2
cdc9 : 20d2cb           [ 6] 	jsr sd_sendbyte
cdcc : a555             [ 3] 	lda sd_addr+3
cdce : 20d2cb           [ 6] 	jsr sd_sendbyte
cdd1 : a995             [ 2] 	lda #0x95					; Checksum needs to be right
cdd3 : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
cdd6 : 206ccc           [ 6] 	jsr sd_getrespbyte			; Get response
                             
cdd9 : 20f2cb           [ 6] 	jsr sd_getbyte
                             	
cddc : a9fe             [ 2] 	lda #0xfe					; Start of data token
cdde : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
cde1 : 68               [ 4] 	pla							; Retrieve the address high byte
cde2 : 8540             [ 3] 	sta tmp_v1+1
cde4 : 643f             [ 3] 	stz tmp_v1					; Address is always page boundary
                             
cde6 : a000             [ 2] 	ldy #00
cde8 :                       sd_writeblock_1					; Send first 256 bytes
cde8 : b13f             [ 5] 	lda (tmp_v1), y
cdea : 20d2cb           [ 6] 	jsr sd_sendbyte
cded : c8               [ 2] 	iny
cdee : d0f8             [ 3] 	bne sd_writeblock_1
cdf0 : e640             [ 5] 	inc tmp_v1+1				; Next page for second 256 bytes
cdf2 :                       sd_writeblock_2					; Send second 256 bytes
cdf2 : b13f             [ 5] 	lda (tmp_v1), y
cdf4 : 20d2cb           [ 6] 	jsr sd_sendbyte
cdf7 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank2.s --------------------------------

cdf8 : d0f8             [ 3] 	bne sd_writeblock_2
                             
cdfa : a9aa             [ 2] 	lda #0xaa					; Arbitrary CRC bytes
cdfc : 20d2cb           [ 6] 	jsr sd_sendbyte
cdff : 20d2cb           [ 6] 	jsr sd_sendbyte
                             
ce02 : 20f2cb           [ 6] 	jsr sd_getbyte				; Get data response byte
ce05 : 48               [ 3] 	pha							; Save it to return
                             
ce06 :                       sd_waitforwritecomplete
ce06 : 207bcc           [ 6] 	jsr sd_busy					; Wait for card to be ready
                             	
ce09 : 20c2cb           [ 6] 	jsr sd_endcmd				; Release the card
                             
ce0c : 68               [ 4] 	pla
ce0d : 7a               [ 4] 	ply
ce0e : 60               [ 6] 	rts
                             
                             	
ce0f :                       sd_msg_initialising
ce0f : 0d496e69746961..      	db "\rInitialising SD Card\r", 0
ce26 :                       sd_msg_failed
ce26 : 0d426164206f72..      	db "\rBad or missing SD Card\r", 0
                             
ce3f :                       sd_cmd55
ce3f : 770000000095          	db (0x40+55), 0x00, 0x00, 0x00, 0x00, 0x95
ce45 :                       sd_cmd58
ce45 : 7a0000000095          	db (0x40+58), 0x00, 0x00, 0x00, 0x00, 0x95
ce4b :                       sd_acmd41
ce4b : 690000000095          	db (0x40+41), 0x00, 0x00, 0x00, 0x00, 0x95
                             	
ce51 :                       mod_sz_sdcard_e
                             
                             	include "sdcard\sd_fs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SD_FS.S
                             ;*  FAT16 filesystem module.  Implements a basic 
                             ;*  filesystem to enable mass storage support.
                             ;*  I've been a bit naughty in that I have assume
                             ;*  sd card size and sector 0 is the MBR.  This i
                             ;*  always the case, but it works for me so I cou
                             ;*  the time be asked to sort it out. I may fix t
                             ;*  more general use at some point..
                             ;*  The filesystem now supports sub directories a
                             ;*  implements the folling:
                             ;*  - load a file
                             ;*  - save a file
                             ;*  - delete a file from the card
                             ;*  - perform a directory listing
                             ;*  - change to subdirectory
                             ;*  I have to say I am pretty pleased with this, 
                             ;*  of reading and research!
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank2.s --------------------------------

                             
                             	; ROM code
                             	code
                             
ce51 :                       mod_sz_sd_fs_s
                             
                             	include "sdcard\sd_fs.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SD_FS.I
                             ;*  FAT16 filesystem definitions.  Nothing to see
                             ;*
                             ;************************************************
0001 =                       FS_FILEMODER    =   0x01
0080 =                       FS_FILEMODEW    =   0x80
                             
                             
                             ;****************************************
                             ;* init_fs
                             ;* Initialise filesystem - after sd card!
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce51 :                       init_fs
ce51 : a64b             [ 3] 	ldx sd_status
ce53 : f00e             [ 3] 	beq init_fs_do
                             	_println msg_noinit_fs
                             
ce62 : 60               [ 6] 	rts
                             
ce63 :                       init_fs_do
                             	_println msg_initialising_fs
                             
                             
                             	;Load MBR sector 0
ce70 : a203             [ 2] 	ldx #0x03					; Init sector to 0 (MBR)
ce72 :                       init_fs_clr_sect
ce72 : 744e             [ 4] 	stz sd_sect,x
ce74 : ca               [ 2] 	dex
ce75 : 10fb             [ 3] 	bpl init_fs_clr_sect
                             
ce77 : a902             [ 2] 	lda #hi(sd_buf)				; Read in to the buffer
ce79 : 2023cd           [ 6] 	jsr sd_sendcmd17			; Call read block
                             
                             	;Find sector of partition 1
ce7c : a203             [ 2] 	ldx #0x03					; Get partition 1
ce7e :                       init_fs_get_part1
ce7e : bdc603           [ 4] 	lda sd_buf+MBR_BootPart1,x
ce81 : 954e             [ 4] 	sta sd_sect,x
ce83 : 9d310c           [ 5] 	sta fs_bootsect,x			; This is also the 'bootsect
ce86 : ca               [ 2] 	dex
ce87 : 10f5             [ 3] 	bpl init_fs_get_part1
                             	; Get partition 1 sector
ce89 : a902             [ 2] 	lda #hi(sd_buf)				; Read in to the buffer
ce8b : 2023cd           [ 6] 	jsr sd_sendcmd17			; Call read block
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank2.s --------------------------------

                             
                             	; Calculate start of FAT tables
                             	; Assuming there are about 64k clusters
                             	; Each cluster assumed to be 32k sectors
                             	; Each sector is 512 bytes (0.5k)
                             	; Giving 64k x 32k x 0.5 ~ 1GB storage
ce8e : 18               [ 2] 	clc
ce8f : ad310c           [ 4] 	lda fs_bootsect
ce92 : 6d0e02           [ 4] 	adc sd_buf+MBR_ResvSect
ce95 : 8d350c           [ 4] 	sta fs_fatsect
ce98 : ad320c           [ 4] 	lda fs_bootsect+1
ce9b : 6d0f02           [ 4] 	adc sd_buf+MBR_ResvSect+1
ce9e : 8d360c           [ 4] 	sta fs_fatsect+1
cea1 : 9c370c           [ 4] 	stz fs_fatsect+2
cea4 : 9c380c           [ 4] 	stz fs_fatsect+3
                             	
                             	; Calculate start of Root Directory
cea7 : ad1602           [ 4] 	lda sd_buf+MBR_SectPerFAT	; Initialise to 2 * Se
ceaa : 0a               [ 2] 	asl a
ceab : 8d390c           [ 4] 	sta fs_rootsect
ceae : ad1702           [ 4] 	lda sd_buf+MBR_SectPerFAT+1
ceb1 : 2a               [ 2] 	rol a
ceb2 : 8d3a0c           [ 4] 	sta fs_rootsect+1
ceb5 : 9c3b0c           [ 4] 	stz fs_rootsect+2
ceb8 : 9c3c0c           [ 4] 	stz fs_rootsect+3
                             
                             	; Now add FAT offset
cebb : 18               [ 2] 	clc
cebc : a200             [ 2] 	ldx #0x00
cebe : a004             [ 2] 	ldy #4
cec0 :                       fs_init_add_fat
cec0 : bd350c           [ 4] 	lda fs_fatsect,x
cec3 : 7d390c           [ 4] 	adc fs_rootsect,x
cec6 : 9d390c           [ 5] 	sta fs_rootsect,x
cec9 : e8               [ 2] 	inx
ceca : 88               [ 2] 	dey
cecb : d0f3             [ 3] 	bne fs_init_add_fat
                             	
                             	; Calculate start of data area
                             	; Assuming 512 root dir entries
                             	; Each entry = 32 bytes
                             	; Divided by bytes per sector
                             	; to get sector count
cecd : a920             [ 2] 	lda #32						; (512*32)/512 = 32
cecf : 8d3d0c           [ 4] 	sta fs_datasect
ced2 : 9c3e0c           [ 4] 	stz fs_datasect+1
ced5 : 9c3f0c           [ 4] 	stz fs_datasect+2
ced8 : 9c400c           [ 4] 	stz fs_datasect+3
                             
                             	; Now add root directory offset
cedb : 18               [ 2] 	clc
cedc : a200             [ 2] 	ldx #0x00
cede : a004             [ 2] 	ldy #4
cee0 :                       fs_init_data
cee0 : bd390c           [ 4] 	lda fs_rootsect,x
cee3 : 7d3d0c           [ 4] 	adc fs_datasect,x
cee6 : 9d3d0c           [ 5] 	sta fs_datasect,x
cee9 : e8               [ 2] 	inx
ceea : 88               [ 2] 	dey
ceeb : d0f3             [ 3] 	bne fs_init_data
                             
ceed : 38               [ 2] 	sec							; Now subtract 2 clusters worth of sec
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank2.s --------------------------------

ceee : ad3d0c           [ 4] 	lda fs_datasect+0			; to enable easy use of clus
cef1 : e940             [ 2] 	sbc #0x40					; FS handling routines
cef3 : 8d3d0c           [ 4] 	sta fs_datasect+0			; Each cluster = 32 sectors
cef6 : ad3e0c           [ 4] 	lda fs_datasect+1			; Therefore take off 0x40 se
cef9 : e900             [ 2] 	sbc #0
cefb : 8d3e0c           [ 4] 	sta fs_datasect+1
cefe : ad3f0c           [ 4] 	lda fs_datasect+2
cf01 : e900             [ 2] 	sbc #0
cf03 : 8d3f0c           [ 4] 	sta fs_datasect+2
cf06 : ad400c           [ 4] 	lda fs_datasect+3
cf09 : e900             [ 2] 	sbc #0
cf0b : 8d400c           [ 4] 	sta fs_datasect+3
                             
                             	; Go to root directory using zero cluster #
cf0e : 6479             [ 3] 	stz fh_handle+FH_FirstClust
cf10 : 647a             [ 3] 	stz fh_handle+FH_FirstClust+1
cf12 : 20a1d4           [ 6] 	jsr fs_chdir_direct
                             	
cf15 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_getbyte_sd_buf
                             ;* Given a populated SD buffer, get byte
                             ;* Indexed by X,Y (X=lo,Y=hi) 
                             ;* Input : X,Y make 9 bit index
                             ;* Output : A=Byte
                             ;* Regs affected : None
                             ;****************************************
cf16 :                       fs_getbyte_sd_buf
                             	; if bit 9<>0 then 2nd half of sd_buf
cf16 : 98               [ 2] 	tya
cf17 : 2901             [ 2] 	and #1
cf19 : d004             [ 3] 	bne fs_getbyte_sd_buf_hi
cf1b : bd0002           [ 4] 	lda sd_buf,x
cf1e : 60               [ 6] 	rts
cf1f :                       fs_getbyte_sd_buf_hi
cf1f : bd0003           [ 4] 	lda sd_buf+0x100,x
cf22 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_putbyte_sd_buf
                             ;* Given a populated SD buffer, put byte
                             ;* Indexed by X,Y (X=lo,Y=hi), A=Val 
                             ;* Input : X,Y make 9 bit index, A=byte
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf23 :                       fs_putbyte_sd_buf
cf23 : 48               [ 3] 	pha
                             	; if bit 9<>0 then 2nd half of sd_buf
cf24 : 98               [ 2] 	tya
cf25 : 2901             [ 2] 	and #1
cf27 : d005             [ 3] 	bne fs_putbyte_sd_buf_hi
cf29 : 68               [ 4] 	pla
cf2a : 9d0002           [ 5] 	sta sd_buf,x
cf2d : 60               [ 6] 	rts
cf2e :                       fs_putbyte_sd_buf_hi
cf2e : 68               [ 4] 	pla
cf2f : 9d0003           [ 5] 	sta sd_buf+0x100,x
cf32 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank2.s --------------------------------

                             
                             ;****************************************
                             ;* fs_getword_sd_buf
                             ;* Given a populated SD buffer, get word
                             ;* Indexed by Y which is word aligned 
                             ;* Input : Y=Word offset in to sd_buf
                             ;* Output : X,A=Word
                             ;* Regs affected : Y
                             ;****************************************
cf33 :                       fs_getword_sd_buf
cf33 : 98               [ 2] 	tya
cf34 : 0a               [ 2] 	asl a
cf35 : a8               [ 2] 	tay
cf36 : b007             [ 3] 	bcs fs_getword_sd_buf_hi
cf38 : be0002           [ 4] 	ldx sd_buf,y
cf3b : b90102           [ 4] 	lda sd_buf+1,y
cf3e : 60               [ 6] 	rts
cf3f :                       fs_getword_sd_buf_hi
cf3f : be0003           [ 4] 	ldx sd_buf+0x100,y
cf42 : b90103           [ 4] 	lda sd_buf+0x100+1,y
cf45 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_putword_sd_buf
                             ;* Given a populated SD buffer, put word
                             ;* Indexed by Y which is word aligned 
                             ;* Input : Y=Word offset in to sd_buf
                             ;*         X,A=Word
                             ;* Regs affected : Y
                             ;****************************************
cf46 :                       fs_putword_sd_buf
cf46 : 48               [ 3] 	pha
cf47 : 98               [ 2] 	tya
cf48 : 0a               [ 2] 	asl a
cf49 : a8               [ 2] 	tay
cf4a : b009             [ 3] 	bcs fs_putword_sd_buf_hi
cf4c : 8a               [ 2] 	txa
cf4d : 990002           [ 5] 	sta sd_buf,y
cf50 : 68               [ 4] 	pla
cf51 : 990102           [ 5] 	sta sd_buf+1,y
cf54 : 60               [ 6] 	rts
cf55 :                       fs_putword_sd_buf_hi
cf55 : 8a               [ 2] 	txa
cf56 : 990003           [ 5] 	sta sd_buf+0x100,y
cf59 : 68               [ 4] 	pla
cf5a : 990103           [ 5] 	sta sd_buf+0x100+1,y
cf5d : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_root_start
                             ;* Initialise ready to read root directory
                             ;* Input : dirsect is current directory pointer
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf5e :                       fs_dir_root_start
                             	; Set SD sector to root directory
cf5e : a203             [ 2] 	ldx #0x03
cf60 :                       fs_dir_set_sd
cf60 : bd410c           [ 4] 	lda fs_dirsect,x
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank2.s --------------------------------

cf63 : 954e             [ 4] 	sta sd_sect,x
cf65 : ca               [ 2] 	dex
cf66 : 10f8             [ 3] 	bpl fs_dir_set_sd
                             
                             	; SD buffer is where blocks will be read to
cf68 : 644c             [ 3] 	stz sd_slo
cf6a : a902             [ 2] 	lda #hi(sd_buf)
cf6c : 854d             [ 3] 	sta sd_shi
                             
                             	; Load up first sector in to SD buf
cf6e : a902             [ 2] 	lda #hi(sd_buf)
cf70 : 2023cd           [ 6] 	jsr sd_sendcmd17
                             
cf73 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper function preserving A,X,Y
cf74 :                       fs_dir_root_start_w
cf74 : 48               [ 3] 	pha
cf75 : da               [ 3] 	phx
cf76 : 5a               [ 3] 	phy
                             	
cf77 : 205ecf           [ 6] 	jsr fs_dir_root_start
                             	
cf7a : 7a               [ 4] 	ply
cf7b : fa               [ 4] 	plx
cf7c : 68               [ 4] 	pla
cf7d : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_find_entry
                             ;* Read directory entry
                             ;* Input : sd_slo, sd_shi : Pointer to directory 
                             ;* Input : C = 0 only find active files.  C = 1 f
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf7e :                       fs_dir_find_entry
cf7e : 08               [ 3] 	php							; Save C state for checking later
cf7f :                       fs_dir_check_entry
                             	; Not LFN aware
cf7f : a00b             [ 2] 	ldy #FAT_Attr				; Check attribute
cf81 : a9ce             [ 2] 	lda #0xce					; Any of H, S, V, I then skip
cf83 : 314c             [ 5] 	and (sd_slo),y
cf85 : d01a             [ 3] 	bne fs_dir_find_another
cf87 : a000             [ 2] 	ldy #FAT_Name				; Examine 1st byte of name
cf89 : b14c             [ 5] 	lda (sd_slo),y
cf8b : 28               [ 4] 	plp							; Check C
cf8c : 08               [ 3] 	php
cf8d : 900a             [ 3] 	bcc	fs_find_active_slot		; Looking to find an ac
cf8f : c900             [ 2] 	cmp #0						; Else looking for 0 or 0xe5
cf91 : f020             [ 3] 	beq fs_dir_found_empty
cf93 : c9e5             [ 2] 	cmp #0xe5
cf95 : f01c             [ 3] 	beq fs_dir_found_empty
cf97 : 8008             [ 3] 	bra fs_dir_find_another		; Else not an entry we'
cf99 :                       fs_find_active_slot
cf99 : c900             [ 2] 	cmp #0
cf9b : f009             [ 3] 	beq fs_dir_notfound			; If zero then no more ent
cf9d : c9e5             [ 2] 	cmp #0xe5					; Deleted entry?
cf9f : d008             [ 3] 	bne fs_dir_found_active
cfa1 :                       fs_dir_find_another
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank2.s --------------------------------

cfa1 : 20c3cf           [ 6] 	jsr fs_dir_next_entry		; Advance read for next i
cfa4 : 80d9             [ 3] 	bra fs_dir_check_entry
                             
cfa6 :                       fs_dir_notfound					; No more entries
cfa6 : 28               [ 4] 	plp							; Remove temp P from stack
cfa7 : 38               [ 2] 	sec							; Set carry to indicate no more
cfa8 : 60               [ 6] 	rts
                             
cfa9 :                       fs_dir_found_active
cfa9 : a01f             [ 2] 	ldy #FATFileDesc-1			; Cache the sd entry to fs_
cfab :                       fs_dir_copy_sd_entry_byte
cfab : b14c             [ 5] 	lda (sd_slo),y
cfad : 99110c           [ 5] 	sta fs_direntry,y
cfb0 : 88               [ 2] 	dey
cfb1 : 10f8             [ 3] 	bpl fs_dir_copy_sd_entry_byte
cfb3 :                       fs_dir_found_empty
cfb3 : 20f9cf           [ 6] 	jsr fs_dir_entry_to_fhandle	; Now copy to file h
cfb6 : 28               [ 4] 	plp							; Remove temp P from stack
cfb7 : 18               [ 2] 	clc							; Clear carry to indicate found
cfb8 :                       fs_dir_fin						; Finalise
cfb8 : 60               [ 6] 	rts
                             
                             ;* Wrapper function preserving A,X,Y
cfb9 :                       fs_dir_find_entry_w
cfb9 : 48               [ 3] 	pha
cfba : da               [ 3] 	phx
cfbb : 5a               [ 3] 	phy
                             	
cfbc : 207ecf           [ 6] 	jsr fs_dir_find_entry
                             	
cfbf : 7a               [ 4] 	ply
cfc0 : fa               [ 4] 	plx
cfc1 : 68               [ 4] 	pla
cfc2 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_dir_next_entry
                             ;* Jump to next directory entry (32 bytes)
                             ;* Load next sector if required
                             ;* Input : sd_slo, sd_shi : Pointer to directory 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cfc3 :                       fs_dir_next_entry
cfc3 : 18               [ 2] 	clc							; Jump to next 32 byte entry
cfc4 : a54c             [ 3] 	lda sd_slo					; Update sd_slo, sd_shi
cfc6 : 6920             [ 2] 	adc #32
cfc8 : 854c             [ 3] 	sta sd_slo
cfca : a54d             [ 3] 	lda sd_shi
cfcc : 6900             [ 2] 	adc #0
cfce : 854d             [ 3] 	sta sd_shi
cfd0 : c904             [ 2] 	cmp #hi(sd_buf+0x200)		; If not at end of sector
cfd2 : d01a             [ 3] 	bne fs_dir_next_done		; then don't load next sec
                             
                             	; Advance the sector
cfd4 : a200             [ 2] 	ldx #0x00
cfd6 : a004             [ 2] 	ldy #0x04
cfd8 : 38               [ 2] 	sec
cfd9 :                       fs_dir_inc_sect
cfd9 : b54e             [ 4] 	lda sd_sect,x
cfdb : 6900             [ 2] 	adc #0
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank2.s --------------------------------

cfdd : 954e             [ 4] 	sta sd_sect,x
cfdf : e8               [ 2] 	inx
cfe0 : 88               [ 2] 	dey
cfe1 : d0f6             [ 3] 	bne fs_dir_inc_sect
                             	
                             	; Reset SD buffer  where blocks will be read to
cfe3 : 644c             [ 3] 	stz sd_slo
cfe5 : a902             [ 2] 	lda #hi(sd_buf)
cfe7 : 854d             [ 3] 	sta sd_shi
                             
cfe9 : a902             [ 2] 	lda #hi(sd_buf)				; Goes in to sd_buf
cfeb : 2023cd           [ 6] 	jsr sd_sendcmd17			; Load it
                             
cfee :                       fs_dir_next_done
cfee : 60               [ 6] 	rts
                             
                             ;* Wrapper function preserving A,X,Y
cfef :                       fs_dir_entry_next_w
cfef : 48               [ 3] 	pha
cff0 : da               [ 3] 	phx
cff1 : 5a               [ 3] 	phy
                             	
cff2 : 20c3cf           [ 6] 	jsr fs_dir_next_entry
                             	
cff5 : 7a               [ 4] 	ply
cff6 : fa               [ 4] 	plx
cff7 : 68               [ 4] 	pla
cff8 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_entry_to_fhandle
                             ;* Copy directory entry from fs_direntry to fh_ha
                             ;* Input : fs_direntry (32 bytes file descriptor 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cff9 :                       fs_dir_entry_to_fhandle
                             	;* Translate name to a string in fhandle
cff9 : a200             [ 2] 	ldx #FH_Name				; Destination
cffb : a000             [ 2] 	ldy #FAT_Name				; Source
cffd :                       fs_dir_get_fs_name_ch
cffd : b9110c           [ 4] 	lda fs_direntry,y			; Get name char
d000 : c920             [ 2] 	cmp #' '					; Don't copy space
d002 : f00e             [ 3] 	beq	fs_dir_skip_fs_name_ch
d004 : c008             [ 2] 	cpy #FAT_Ext				; At extension?
d006 : d007             [ 3] 	bne fs_dir_skip_fs_dot_ch
d008 : 48               [ 3] 	pha
d009 : a92e             [ 2] 	lda #'.'					; Inject dot into handle
d00b : 9556             [ 4] 	sta fh_handle,x
d00d : 68               [ 4] 	pla
d00e : e8               [ 2] 	inx							; Advance past dot separator
d00f :                       fs_dir_skip_fs_dot_ch
d00f : 9556             [ 4] 	sta fh_handle,x				; Copy char to handle
d011 : e8               [ 2] 	inx							; Advance handle
d012 :                       fs_dir_skip_fs_name_ch
d012 : c8               [ 2] 	iny							; Source
d013 : c00b             [ 2] 	cpy #FAT_Attr				; Passed end of name?
d015 : d0e6             [ 4] 	bne fs_dir_get_fs_name_ch
d017 : 7456             [ 4] 	stz fh_handle,x				; Put 0 (terminator)
                             
                             	;* Attribute byte
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank2.s --------------------------------

d019 : a20d             [ 2] 	ldx #FH_Attr				; Point to where attribute will 
d01b : a00b             [ 2] 	ldy #FAT_Attr				; Point to where attribute come
d01d : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* File size
d020 : a20e             [ 2] 	ldx #FH_Size				; Point to where size will go
d022 : a01c             [ 2] 	ldy #FAT_FileSize			; Point to get size from
d024 : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 4 bytes
d027 : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
d02a : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
d02d : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* First cluster
d030 : a223             [ 2] 	ldx #FH_FirstClust
d032 : a01a             [ 2] 	ldy	#FAT_FirstClust
d034 : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 2 bytes
d037 : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* Time and date - ignore ms and use modified da
d03a : a227             [ 2] 	ldx #FH_TimeDate
d03c : 7456             [ 4] 	stz fh_handle,x
d03e : e8               [ 2] 	inx							; Skip ms to time/date 4 bytes
d03f : a016             [ 2] 	ldy	#FAT_ModTime			; Get modified time/date entr
d041 : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 4 bytes (2 by
d044 : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte 
d047 : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte ; (2 bytes for date)
d04a : 2060d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             	
                             	; Meta data - remember the parent directory
d04d : a203             [ 2] 	ldx #0x03
d04f :                       fs_dir_dirsect_fh_byte
d04f : bd410c           [ 4] 	lda fs_dirsect,x
d052 : 9573             [ 4] 	sta fh_handle+FH_DirSect,x
d054 : ca               [ 2] 	dex
d055 : 10f8             [ 3] 	bpl fs_dir_dirsect_fh_byte
                             
                             	; Meta data - remember the offset in to the sd b
d057 : a54c             [ 3] 	lda sd_slo
d059 : 8577             [ 3] 	sta fh_handle+FH_DirOffset
d05b : a54d             [ 3] 	lda sd_shi
d05d : 8578             [ 3] 	sta fh_handle+FH_DirOffset+1
                             	
d05f : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_dir_entry_to_fh_byte
                             ;* Copy fs_direntry bytes to fh_handle area
                             ;* Input 	: y = offset in directory entry
                             ;*		 	: x = offset in handle entry
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d060 :                       fs_dir_entry_to_fh_byte
d060 : b9110c           [ 4] 	lda fs_direntry,y
d063 : 9556             [ 4] 	sta fh_handle,x
d065 : c8               [ 2] 	iny
d066 : e8               [ 2] 	inx
d067 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_entry_to_sd
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank2.s --------------------------------

                             ;* Copy fs_direntry bytes to sd card area
                             ;* Index by sd_lo, sd_hi
                             ;* Input	: None
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d068 :                       fs_dir_entry_to_sd
d068 : a21f             [ 2] 	ldx #FATFileDesc-1
d06a :                       fs_dir_entry_to_sd_byte
d06a : b9110c           [ 4] 	lda fs_direntry,y
d06d : 9556             [ 4] 	sta fh_handle,x
d06f : c8               [ 2] 	iny
d070 : e8               [ 2] 	inx
d071 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* fs_dir_fhandle_to_entry
                             ;* Copy directory entry from fh_handle to fs_dire
                             ;* Input : fs_fhandle 
                             ;* Output : fs_direntry updated
                             ;* Regs affected : None
                             ;****************************************
d072 :                       fs_dir_fhandle_to_entry
                             	; Set to spaces (11 in total)
d072 : a00a             [ 2] 	ldy #10
d074 : a920             [ 2] 	lda #' '
d076 :                       fs_dir_clear_entry
d076 : 99110c           [ 5] 	sta fs_direntry+FAT_Name,y
d079 : 88               [ 2] 	dey
d07a : 10fa             [ 3] 	bpl fs_dir_clear_entry
                             	;* Translate name to a string in direntry
d07c : a200             [ 2] 	ldx #FH_Name				; Source
d07e : a000             [ 2] 	ldy #FAT_Name				; Destination
d080 :                       fs_dir_get_fh_name_ch
d080 : b556             [ 4] 	lda fh_handle,x				; Get name char
d082 : f021             [ 3] 	beq	fs_dir_do_attr			; Process attribute if end 
d084 : 207ed1           [ 6] 	jsr fs_to_upper				; Case insensitive
d087 : c92e             [ 2] 	cmp #'.'					; Extension separator?
d089 : d011             [ 3] 	bne fs_dir_skip_ext			; No, then normal char
d08b : e000             [ 2] 	cpx #0						; If dot is first char
d08d : f00d             [ 3] 	beq fs_dir_skip_ext			; Then treat as normal cha
d08f : e001             [ 2] 	cpx #1						; If dot is not second char
d091 : d004             [ 3] 	bne fs_dir_get_fh_dot		; Then treat as dot
d093 : c556             [ 3] 	cmp fh_handle				; Was the first char dot?
d095 : f005             [ 3] 	beq fs_dir_skip_ext			; Yes then treat as normal
d097 :                       fs_dir_get_fh_dot
d097 : a008             [ 2] 	ldy #FAT_Ext				; Move to ext position
d099 : e8               [ 2] 	inx							; Jump over the dot
d09a : 80e4             [ 3] 	bra fs_dir_get_fh_name_ch	; Try more chars
d09c :                       fs_dir_skip_ext					; Normal char processing
d09c : 99110c           [ 5] 	sta fs_direntry,y			; Save it to direntry
d09f : c8               [ 2] 	iny							; Advance entry index
d0a0 : e8               [ 2] 	inx							; Advance string index
d0a1 : c00b             [ 2] 	cpy #FAT_Attr				; All name + ext done?
d0a3 : d0db             [ 3] 	bne fs_dir_get_fh_name_ch	; Try for another norm
                             	;* Attribute byte
d0a5 :                       fs_dir_do_attr
d0a5 : a20d             [ 2] 	ldx #FH_Attr				; Point to where attribute will 
d0a7 : a00b             [ 2] 	ldy #FAT_Attr				; Point to where attribute come
d0a9 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank2.s --------------------------------

                             
                             	;* File size
d0ac :                       fs_dir_fh_size
d0ac : a20e             [ 2] 	ldx #FH_Size				; Point to where size will go
d0ae : a01c             [ 2] 	ldy #FAT_FileSize			; Point to get size from
d0b0 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte	; Copy 4 bytes
d0b3 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte
d0b6 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte
d0b9 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* First cluster
d0bc :                       fs_dir_entry_clust
d0bc : a223             [ 2] 	ldx #FH_FirstClust
d0be : a01a             [ 2] 	ldy	#FAT_FirstClust
d0c0 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte	; Copy 2 bytes
d0c3 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* Time and date
d0c6 : a227             [ 2] 	ldx #FH_TimeDate
d0c8 : a00d             [ 2] 	ldy	#FAT_Createms
d0ca : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte	; ms
d0cd : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte ; time
d0d0 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte
d0d3 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte ; date
d0d6 : 20ebd0           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             	
                             	; Meta data - remember the parent directory
d0d9 : a203             [ 2] 	ldx #0x03
d0db :                       fs_dir_fh_dirsect_byte
d0db : b573             [ 4] 	lda fh_handle+FH_DirSect,x
d0dd : 954e             [ 4] 	sta sd_sect,x
d0df : ca               [ 2] 	dex
d0e0 : 10f9             [ 3] 	bpl fs_dir_fh_dirsect_byte
                             
                             	; Meta data - remember the offset in to the sd b
d0e2 : a577             [ 3] 	lda fh_handle+FH_DirOffset
d0e4 : 854c             [ 3] 	sta sd_slo
d0e6 : a578             [ 3] 	lda fh_handle+FH_DirOffset+1
d0e8 : 854d             [ 3] 	sta sd_shi
                             	
d0ea : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_dir_fh_to_entry_byte
                             ;* Copy fh_handle byte to fs_direntry area
                             ;* Input 	: y = offset in directory entry
                             ;*		 	: x = offset in handle entry
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d0eb :                       fs_dir_fh_to_entry_byte
d0eb : b556             [ 4] 	lda fh_handle,x
d0ed : 99110c           [ 5] 	sta fs_direntry,y
d0f0 : e8               [ 2] 	inx
d0f1 : c8               [ 2] 	iny
d0f2 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_get_next_cluster
                             ;* Given current cluster, find the next
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank2.s --------------------------------

                             ;* Input : fh_handle
                             ;* Output : 
                             ;* Regs affected : None
                             ;****************************************
d0f3 :                       fs_get_next_cluster
                             	; Get the FAT sector that current clust is in
d0f3 : 203cd2           [ 6] 	jsr fs_get_FAT_clust_sect
                             
                             	; Get next from this cluster index need low byte
                             	; as each FAT cluster contains 256 cluster entri
d0f6 : a468             [ 3] 	ldy fh_handle+FH_CurrClust
                             	; X = Low byte, A = High byte of cluster
d0f8 : 2033cf           [ 6] 	jsr fs_getword_sd_buf
                             
                             	; Calculate the sector address and make current 
d0fb : 2089d1           [ 6] 	jsr fs_get_start_sect_data
d0fe : a920             [ 2] 	lda #0x20					; 32 sector per cluster countdown	
d100 : 856a             [ 3] 	sta fh_handle+FH_SectCounter
                             
d102 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* fs_IsEOF
                             ;* End of File check (compare file pointer to fil
                             ;* Input : fh_handle
                             ;* Output : C=1 if EOF
                             ;* Regs affected : None
                             ;****************************************
d103 :                       fs_isEOF
d103 : a203             [ 2] 	ldx #0x03
d105 :                       fs_is_eof_cmp
d105 : b56f             [ 4] 	lda fh_handle+FH_Pointer,x
d107 : d564             [ 4] 	cmp fh_handle+FH_Size,x
d109 : d005             [ 3] 	bne fs_notEOF
d10b : ca               [ 2] 	dex
d10c : 10f7             [ 3] 	bpl fs_is_eof_cmp
d10e :                       fs_setEOF	
d10e : 38               [ 2] 	sec							; C = 1 for EOF
d10f : 60               [ 6] 	rts
d110 :                       fs_notEOF	
d110 : 18               [ 2] 	clc							; C = 0 for not EOF
d111 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper than preserves A,X,Y
d112 :                       fs_isEOF_w
d112 : 48               [ 3] 	pha
d113 : da               [ 3] 	phx
d114 : 5a               [ 3] 	phy
                             	
d115 : 2003d1           [ 6] 	jsr fs_isEOF
                             
d118 : 7a               [ 4] 	ply
d119 : fa               [ 4] 	plx
d11a : 68               [ 4] 	pla
d11b : 60               [ 6] 	rts
                             	
                             	
                             	
                             ;****************************************
                             ;* fs_inc_pointer
                             ;* Increment file point, loading sectors and clus
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank2.s --------------------------------

                             ;* This results in sd_buf containing the sector t
                             ;* Input : fh_handle
                             ;* Output : 
                             ;* Regs affected : None
                             ;****************************************
d11c :                       fs_inc_pointer
                             	;Increment pointer
d11c : a200             [ 2] 	ldx #0x00
d11e : a004             [ 2] 	ldy #0x04
d120 : 38               [ 2] 	sec									; Always adds 1 first
d121 :                       fs_inc_pointer_byte
d121 : b56f             [ 4] 	lda fh_handle+FH_Pointer,x
d123 : 6900             [ 2] 	adc #0x00
d125 : 956f             [ 4] 	sta fh_handle+FH_Pointer,x
d127 : e8               [ 2] 	inx
d128 : 88               [ 2] 	dey
d129 : d0f6             [ 3] 	bne fs_inc_pointer_byte
                             
d12b : a56f             [ 3] 	lda fh_handle+FH_Pointer			; If low order == 0
d12d : f001             [ 3] 	beq fs_inc_sector_ov				; Then sector 8 bits has
d12f :                       fs_inc_fin
d12f : 60               [ 6] 	rts
d130 :                       fs_inc_sector_ov						; Check if sector bit 8 has
d130 : a570             [ 3] 	lda fh_handle+FH_Pointer+1			; Load up next high
d132 : 2901             [ 2] 	and #1								; If bit zero = 0 then must have
d134 : d0f9             [ 3] 	bne fs_inc_fin						; overflowed.
                             	;Sector change required
d136 : a200             [ 2] 	ldx #0x00
d138 : a004             [ 2] 	ldy #0x04
d13a : 38               [ 2] 	sec									; Always adds 1 first
d13b :                       fs_inc_fh_sect
d13b : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d13d : 6900             [ 2] 	adc #0x00
d13f : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d141 : e8               [ 2] 	inx
d142 : 88               [ 2] 	dey
d143 : d0f6             [ 3] 	bne fs_inc_fh_sect
d145 :                       fs_inc_skip_sec_wrap
d145 : c66a             [ 5] 	dec fh_handle+FH_SectCounter		; If reached the e
d147 : d003             [ 3] 	bne fs_inc_load_sector				; Then get next cluste
                             	; Cluster change required
d149 : 20f3d0           [ 6] 	jsr fs_get_next_cluster				; Get next cluster ba
d14c :                       fs_inc_load_sector
d14c : 2003d1           [ 6] 	jsr fs_isEOF						; Check not EOF
d14f : b003             [ 3] 	bcs fs_skip_load_sect				; if so then don't load
d151 : 20c3d1           [ 6] 	jsr fs_load_curr_sect				; Load the sector
d154 :                       fs_skip_load_sect
d154 : 60               [ 6] 	rts
                             
                             
                             	
                             ;****************************************
                             ;* fs_get_byte
                             ;* Get a byte and advance pointer
                             ;* Input : fh_handle
                             ;* Output : A = char, C = 1 (EOF or file not open
                             ;* Regs affected : None
                             ;****************************************
d155 :                       fs_get_byte
                             	; First check that file is open to read
d155 : a901             [ 2] 	lda #FS_FILEMODER
d157 : 2582             [ 3] 	and fh_handle+FH_FileMode
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank2.s --------------------------------

d159 : f005             [ 3] 	beq fs_get_set_EOF
                             
d15b : 2003d1           [ 6] 	jsr fs_isEOF						; If at EOF then error
d15e : 9006             [ 3] 	bcc fs_get_skip_EOF
                             
d160 :                       fs_get_set_EOF
d160 : a901             [ 2] 	lda #FS_ERR_EOF
d162 : 859f             [ 3] 	sta errno
d164 : 38               [ 2] 	sec
d165 : 60               [ 6] 	rts
d166 :                       fs_get_skip_EOF
d166 : a66f             [ 3] 	ldx fh_handle+FH_Pointer			; Low 8 bits of secto
d168 : a470             [ 3] 	ldy fh_handle+FH_Pointer+1			; Which half of sec
                             	; A=SD buffer byte
d16a : 2016cf           [ 6] 	jsr fs_getbyte_sd_buf
d16d : 48               [ 3] 	pha									; Remember the byte!
d16e : 201cd1           [ 6] 	jsr fs_inc_pointer					; Increment file pointers
d171 : 68               [ 4] 	pla
                             
d172 : 18               [ 2] 	clc									; No error
d173 : 649f             [ 3] 	stz errno
d175 : 60               [ 6] 	rts
                             
                             ;* Wrapper function that preserves X,Y (A=return 
d176 :                       fs_get_byte_w
d176 : da               [ 3] 	phx
d177 : 5a               [ 3] 	phy
                             
d178 : 2055d1           [ 6] 	jsr fs_get_byte
                             	
d17b : 7a               [ 4] 	ply
d17c : fa               [ 4] 	plx
d17d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; With ASCII code in A, make upper
                             ;****************************************
d17e :                       fs_to_upper
d17e : c961             [ 2] 	cmp #'a'				; If >='a'
d180 : 9006             [ 3] 	bcc fs_to_upper_done
d182 : c97b             [ 2] 	cmp #'z'+1				; If <='z'
d184 : b002             [ 3] 	bcs fs_to_upper_done
d186 : e91f             [ 2] 	sbc #0x1f				; Sub 0x1f+1 (C=0)
d188 :                       fs_to_upper_done
d188 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ; Given the cluster #, find sector #
                             ; Given clust in X,A
                             ; Outputs to fh_handle->FH_CurrSec
                             ;            fh_handle->FH_CurrClust
                             ; Special case if X,A==0 then sector is
                             ; the root sector
                             ;****************************************
d189 :                       fs_get_start_sect_data
d189 : 8668             [ 3] 	stx fh_handle+FH_CurrClust
d18b : 866b             [ 3] 	stx fh_handle+FH_CurrSec+0
d18d : 8569             [ 3] 	sta fh_handle+FH_CurrClust+1
d18f : 856c             [ 3] 	sta fh_handle+FH_CurrSec+1
                             	
                             	; If cluster # == 0 then root directory
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank2.s --------------------------------

d191 : 056b             [ 3] 	ora fh_handle+FH_CurrSec+0
d193 : f023             [ 3] 	beq fs_get_start_sect_root
                             	
                             	; Initialise to input sector
d195 : 646d             [ 3] 	stz fh_handle+FH_CurrSec+2
d197 : 646e             [ 3] 	stz fh_handle+FH_CurrSec+3
                             	
                             	; Sector = Cluster * 32
                             	; Shift left 5 times
d199 : a005             [ 2] 	ldy #5
d19b :                       fs_get_data_sect_m5
d19b : 18               [ 2] 	clc
d19c : 066b             [ 5] 	asl fh_handle+FH_CurrSec+0
d19e : 266c             [ 5] 	rol fh_handle+FH_CurrSec+1
d1a0 : 266d             [ 5] 	rol fh_handle+FH_CurrSec+2
d1a2 : 266e             [ 5] 	rol fh_handle+FH_CurrSec+3
d1a4 : 88               [ 2] 	dey
d1a5 : d0f4             [ 3] 	bne fs_get_data_sect_m5
                             
                             	; Add data sector offset
d1a7 : a200             [ 2] 	ldx #0x00
d1a9 : a004             [ 2] 	ldy #0x04
d1ab : 18               [ 2] 	clc
d1ac :                       fs_get_start_data
d1ac : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d1ae : 7d3d0c           [ 4] 	adc fs_datasect,x
d1b1 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d1b3 : e8               [ 2] 	inx
d1b4 : 88               [ 2] 	dey
d1b5 : d0f5             [ 3] 	bne fs_get_start_data
d1b7 : 60               [ 6] 	rts
d1b8 :                       fs_get_start_sect_root
d1b8 : a203             [ 2] 	ldx #3
d1ba :                       fs_get_root_sect
d1ba : bd390c           [ 4] 	lda fs_rootsect,x
d1bd : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d1bf : ca               [ 2] 	dex
d1c0 : 10f8             [ 3] 	bpl fs_get_root_sect
d1c2 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ; Load the current sector in FH
                             ;****************************************
d1c3 :                       fs_load_curr_sect
d1c3 : 48               [ 3] 	pha
d1c4 : da               [ 3] 	phx
                             
d1c5 : a203             [ 2] 	ldx #0x03
d1c7 :                       fs_load_cpy_sect
d1c7 : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d1c9 : 954e             [ 4] 	sta sd_sect,x
d1cb : ca               [ 2] 	dex
d1cc : 10f9             [ 3] 	bpl fs_load_cpy_sect
d1ce : a902             [ 2] 	lda #hi(sd_buf)
d1d0 : 2023cd           [ 6] 	jsr sd_sendcmd17
                             
d1d3 : fa               [ 4] 	plx
d1d4 : 68               [ 4] 	pla
d1d5 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank2.s --------------------------------

                             ; Flush the current sector
                             ;****************************************
d1d6 :                       fs_flush_curr_sect
d1d6 : 48               [ 3] 	pha
d1d7 : da               [ 3] 	phx
                             
d1d8 : a203             [ 2] 	ldx #0x03
d1da :                       fs_flush_cpy_sect
d1da : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d1dc : 954e             [ 4] 	sta sd_sect,x
d1de : ca               [ 2] 	dex
d1df : 10f9             [ 3] 	bpl fs_flush_cpy_sect
d1e1 : a902             [ 2] 	lda #hi(sd_buf)				; Sending data in sd_buf
d1e3 : 209ccd           [ 6] 	jsr sd_sendcmd24
                             	
d1e6 : fa               [ 4] 	plx
d1e7 : 68               [ 4] 	pla
d1e8 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_find_empty_clust
                             ;* Find an empty cluster to write to
                             ;* Input : None
                             ;* Output : fh_handle->FH_CurrClust is the empty 
                             ;* Regs affected : None
                             ;****************************************
d1e9 :                       fs_find_empty_clust
                             	; Starting at cluster 0x0002
d1e9 : a902             [ 2] 	lda #02
d1eb : 8568             [ 3] 	sta fh_handle+FH_CurrClust
d1ed : 6469             [ 3] 	stz fh_handle+FH_CurrClust+1
                             
                             	; Start at the first FAT sector
d1ef : a203             [ 2] 	ldx #0x03
d1f1 :                       fs_find_init_fat
d1f1 : bd350c           [ 4] 	lda fs_fatsect,x
d1f4 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d1f6 : ca               [ 2] 	dex
d1f7 : 10f8             [ 3] 	bpl fs_find_init_fat
                             
                             	; There is only enough room for 512/2 = 256 clus
                             	; There are 256 sectors of FAT entries
                             
d1f9 :                       fs_check_empty_sector
d1f9 : 20c3d1           [ 6] 	jsr fs_load_curr_sect			; Load a FAT sector
d1fc :                       fs_check_curr_clust
d1fc : a468             [ 3] 	ldy fh_handle+FH_CurrClust		; Index in to this F
d1fe : 2033cf           [ 6] 	jsr fs_getword_sd_buf
d201 : e000             [ 2] 	cpx #0
d203 : d018             [ 3] 	bne fs_next_fat_entry
d205 : c900             [ 2] 	cmp #0
d207 : d014             [ 3] 	bne fs_next_fat_entry
                             	
                             	; If got here then empty cluster found
                             	; fh_handle->FH_CurrClust is the empty cluster
                             	
                             	; Mark this cluster as used
d209 : a2ff             [ 2] 	ldx #0xff
d20b : a9ff             [ 2] 	lda #0xff
d20d : 2046cf           [ 6] 	jsr fs_putword_sd_buf
                             
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank2.s --------------------------------

                             	; flush this FAT entry back so this cluster is s
d210 : 20d6d1           [ 6] 	jsr fs_flush_curr_sect
                             	
d213 : 646a             [ 3] 	stz fh_handle+FH_SectCounter	; Zero the sector c
d215 : a668             [ 3] 	ldx fh_handle+FH_CurrClust
d217 : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d219 : 2089d1           [ 6] 	jsr fs_get_start_sect_data		; Initialise the sec
d21c : 60               [ 6] 	rts
                             	; If got here then need to find another cluster
d21d :                       fs_next_fat_entry
                             	_incZPWord fh_handle+FH_CurrClust	; Increment th
                             
                             	; Only 256 FAT entries in a sector of 512 bytes
d223 : a568             [ 3] 	lda fh_handle+FH_CurrClust		; Check low byte of 
d225 : d0d5             [ 4] 	bne fs_check_curr_clust			; Else keep checking c
                             	; Every 256 FAT entries, need to get a new FAT s
d227 :                       fs_next_fat_sect
d227 : 202cd2           [ 6] 	jsr fs_inc_curr_sec				; Increment to the next F
d22a : 80cd             [ 4] 	bra fs_check_empty_sector		; Go an load the new 
                             	
                             
                             ;****************************************
                             ;* fs_inc_curr_sec
                             ;* Increment sector by 1
                             ;* Input : fh_handle has the sector
                             ;****************************************
d22c :                       fs_inc_curr_sec
                             	; add 1 to LSB as sector address is little endia
d22c : a200             [ 2] 	ldx #0x00
d22e : a004             [ 2] 	ldy #0x04
d230 : 38               [ 2] 	sec
d231 :                       fs_inc_sec_byte
d231 : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d233 : 6900             [ 2] 	adc #0x00
d235 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d237 : e8               [ 2] 	inx
d238 : 88               [ 2] 	dey
d239 : d0f6             [ 3] 	bne fs_inc_sec_byte
                             
d23b : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_get_FAT_clust_sect
                             ;* Given FH_CurrClust, set FH_CurrSec so that
                             ;* the sector contains the FAT entry
                             ;* Input : fh_handle has the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d23c :                       fs_get_FAT_clust_sect
                             	; Sector offset in to FAT = high byte
                             	; because a sector can hold 256 FAT entries
d23c : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d23e : 856b             [ 3] 	sta fh_handle+FH_CurrSec
d240 : 646c             [ 3] 	stz fh_handle+FH_CurrSec+1
d242 : 646d             [ 3] 	stz fh_handle+FH_CurrSec+2
d244 : 646e             [ 3] 	stz fh_handle+FH_CurrSec+3
                             	
                             	; Add the FAT offset
d246 : 18               [ 2] 	clc
d247 : a200             [ 2] 	ldx #0x00
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank2.s --------------------------------

d249 : a004             [ 2] 	ldy #0x04
d24b :                       fs_get_add_fat
d24b : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d24d : 7d350c           [ 4] 	adc fs_fatsect,x
d250 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d252 : e8               [ 2] 	inx
d253 : 88               [ 2] 	dey
d254 : d0f5             [ 3] 	bne fs_get_add_fat
                             
                             	; Now load the sector containing this cluster en
d256 : 20c3d1           [ 6] 	jsr fs_load_curr_sect
                             
d259 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_update_FAT_entry
                             ;* FH_LastClust updated with FH_CurrClust
                             ;* Input : fh_handle has the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d25a :                       fs_update_FAT_entry
d25a : 48               [ 3] 	pha
d25b : da               [ 3] 	phx
d25c : 5a               [ 3] 	phy
                             	
d25d : a568             [ 3] 	lda fh_handle+FH_CurrClust+0	; Save current clus
d25f : 48               [ 3] 	pha
d260 : a569             [ 3] 	lda fh_handle+FH_CurrClust+1	; Save current clus
d262 : 48               [ 3] 	pha
                             	; Move back to the last cluster entry
                             	_cpyZPWord fh_handle+FH_LastClust,fh_handle+FH_C
                             
                             
d26b : 203cd2           [ 6] 	jsr fs_get_FAT_clust_sect		; Get the FAT sector 
                             	; Index in to the FAT sector
d26e : a47b             [ 3] 	ldy fh_handle+FH_LastClust
                             	; Get current cluster hi,lo from stack
d270 : 68               [ 4] 	pla
d271 : fa               [ 4] 	plx
d272 : 8668             [ 3] 	stx fh_handle+FH_CurrClust		; Make it the curren
d274 : 8569             [ 3] 	sta fh_handle+FH_CurrClust+1	; Make it the curre
                             
                             	; Update FAT entry Y with current cluster X,A
d276 : 2046cf           [ 6] 	jsr fs_putword_sd_buf
                             
                             	; The appropriate FAT sector has been updated
                             	; Now flush that sector back	
d279 : 20d6d1           [ 6] 	jsr fs_flush_curr_sect
                             	
d27c : 7a               [ 4] 	ply
d27d : fa               [ 4] 	plx
d27e : 68               [ 4] 	pla
d27f : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_put_byte
                             ;* Put out a byte, incrementing size
                             ;* and committing clusters as necessary
                             ;* including reflecting this in the FAT table
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank2.s --------------------------------

                             ;* Input : fh_handle has the details, A = Byte to
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d280 :                       fs_put_byte
d280 : 48               [ 3] 	pha			; Save A until needed later
                             	; First check that file is open to write
d281 : a980             [ 2] 	lda #FS_FILEMODEW
d283 : 2582             [ 3] 	and fh_handle+FH_FileMode
d285 : d003             [ 3] 	bne fs_put_skip_err
                             	; C=1 means error
d287 : 68               [ 4] 	pla
d288 : 38               [ 2] 	sec
d289 : 60               [ 6] 	rts
d28a :                       fs_put_skip_err
                             	; Before writing a byte, need to check if the cu
                             	; sector is full.
                             	; Check low 9 bits of size and if zero size (i.e
d28a : a564             [ 3] 	lda fh_handle+FH_Size
d28c : d024             [ 3] 	bne fs_put_do_put
d28e : a565             [ 3] 	lda fh_handle+FH_Size+1
d290 : f020             [ 3] 	beq fs_put_do_put
d292 : 2901             [ 2] 	and #1
d294 : d01c             [ 3] 	bne fs_put_do_put
                             	; Got here then current sector is full
                             	; We need to flush this sector to disk
d296 : 20d6d1           [ 6] 	jsr fs_flush_curr_sect
                             	; Move to next sector in the cluster
d299 : 202cd2           [ 6] 	jsr fs_inc_curr_sec
                             	; Bump the sector counter
d29c : e66a             [ 5] 	inc fh_handle+FH_SectCounter
                             	; Check if counter at sectors per cluster limit
d29e : a56a             [ 3] 	lda fh_handle+FH_SectCounter
d2a0 : c920             [ 2] 	cmp #0x20
d2a2 : d00e             [ 3] 	bne fs_put_do_put
                             	; We need to find a new cluster now
                             	; But first update the FAT chain
                             	; so that the last cluster points to this
d2a4 : 205ad2           [ 6] 	jsr fs_update_FAT_entry
                             	; Before finding a new cluster
                             	; make the current the last
                             	_cpyZPWord fh_handle+FH_CurrClust,fh_handle+FH_L
                             
                             	; Go find a new empty clust
                             	; starts at sector 0
d2af : 20e9d1           [ 6] 	jsr fs_find_empty_clust
                             	; Finally, can write a byte to the
                             	; SD buffer in memory
d2b2 :                       fs_put_do_put	
d2b2 : a664             [ 3] 	ldx fh_handle+FH_Size			; Load size low as index
d2b4 : a465             [ 3] 	ldy fh_handle+FH_Size+1			; Check which half
d2b6 : 68               [ 4] 	pla								; Get A off stack
d2b7 : 2023cf           [ 6] 	jsr fs_putbyte_sd_buf
d2ba :                       fs_put_inc_size
d2ba : 38               [ 2] 	sec
d2bb : a200             [ 2] 	ldx #0x00
d2bd : a004             [ 2] 	ldy #0x04
d2bf :                       fs_put_inc_size_byte
d2bf : b564             [ 4] 	lda fh_handle+FH_Size,x
d2c1 : 6900             [ 2] 	adc #0
d2c3 : 9564             [ 4] 	sta fh_handle+FH_Size,x
d2c5 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank2.s --------------------------------

d2c6 : 88               [ 2] 	dey
d2c7 : d0f6             [ 3] 	bne fs_put_inc_size_byte
d2c9 :                       fs_put_fin
d2c9 : 18               [ 2] 	clc
d2ca : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper function to save A,X,Y
d2cb :                       fs_put_byte_w
d2cb : da               [ 3] 	phx
d2cc : 5a               [ 3] 	phy
d2cd : 48               [ 3] 	pha
                             
d2ce : 2080d2           [ 6] 	jsr fs_put_byte
                             	
d2d1 : 68               [ 4] 	pla
d2d2 : 7a               [ 4] 	ply
d2d3 : fa               [ 4] 	plx
d2d4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_save_entry
                             ;* Save dir entry back to disk
                             ;* Input : fh_handle has all the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d2d5 :                       fs_dir_save_entry
                             	; Retrieve the sector where the file entry goes
d2d5 : a203             [ 2] 	ldx #0x03
d2d7 :                       fs_dir_curr_sect
d2d7 : b573             [ 4] 	lda fh_handle+FH_DirSect,x
d2d9 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d2db : ca               [ 2] 	dex
d2dc : 10f9             [ 3] 	bpl fs_dir_curr_sect
                             	
d2de : 20c3d1           [ 6] 	jsr fs_load_curr_sect
                             
                             	; Restore index in to the correct entry
d2e1 : a577             [ 3] 	lda fh_handle+FH_DirOffset
d2e3 : 854c             [ 3] 	sta sd_slo
d2e5 : a578             [ 3] 	lda fh_handle+FH_DirOffset+1
d2e7 : 854d             [ 3] 	sta sd_shi
                             	
                             	; Copy FAT file desc cache to sd position
d2e9 : a01f             [ 2] 	ldy #FATFileDesc-1			; Cache the fs_direntry sd_
d2eb :                       fs_dir_copy_entry_sd_byte
d2eb : b9110c           [ 4] 	lda fs_direntry,y
d2ee : 914c             [ 5] 	sta (sd_slo),y
d2f0 : 88               [ 2] 	dey
d2f1 : 10f8             [ 3] 	bpl fs_dir_copy_entry_sd_byte
                             	
                             	; Now flush this back to disk
                             	
d2f3 : 20d6d1           [ 6] 	jsr fs_flush_curr_sect
                             	
                             	; Phew we are done
d2f6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_find_named
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank2.s --------------------------------

                             ;* Find named file in current directory
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d2f7 :                       fs_find_named
d2f7 : 18               [ 2] 	clc							; Find active file
d2f8 : 207ecf           [ 6] 	jsr fs_dir_find_entry		; Find entry from current
d2fb : b01c             [ 4] 	bcs	fs_name_not_found		; If C then no more entri
d2fd : a000             [ 2] 	ldy #0						; Index to filespec
d2ff : a200             [ 2] 	ldx #0						; Index to filename
d301 :                       fs_find_check_name
d301 : b183             [ 5] 	lda (fh_handle+FH_FSpecPtr),y	; File spec char
d303 : 207ed1           [ 6] 	jsr fs_to_upper					; Case insensitive
d306 : d556             [ 4] 	cmp fh_handle,x					; compare with this filehand
d308 : d008             [ 3] 	bne fs_find_next
d30a : c900             [ 2] 	cmp #0						; If no more bytes in name to check
d30c : f009             [ 3] 	beq fs_name_found
d30e : e8               [ 2] 	inx
d30f : c8               [ 2] 	iny
d310 : 80ef             [ 3] 	bra fs_find_check_name
d312 :                       fs_find_next
d312 : 20c3cf           [ 6] 	jsr fs_dir_next_entry		; Get next entry to check
d315 : 80e0             [ 4] 	bra fs_find_named
d317 :                       fs_name_found
d317 : 18               [ 2] 	clc							; C=0 file found
d318 : 60               [ 6] 	rts
d319 :                       fs_name_not_found				; If C already set then not 
d319 : 38               [ 2] 	sec
d31a : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_open_read
                             ;* Open a file for reading
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d31b :                       fs_open_read
d31b : 205ecf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
d31e : 20f7d2           [ 6] 	jsr fs_find_named			; Try to find the file
d321 : b01a             [ 3] 	bcs fs_open_not_found		; C=1 not found
d323 :                       fs_open_found
d323 : a920             [ 2] 	lda #0x20					; 32 sector per cluster countdown	
d325 : 856a             [ 3] 	sta fh_handle+FH_SectCounter
                             
d327 : a679             [ 3] 	ldx fh_handle+FH_FirstClust	; Load up first clus
d329 : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
                             
d32b : 2089d1           [ 6] 	jsr fs_get_start_sect_data	; Calc the first sect
d32e : 20c3d1           [ 6] 	jsr fs_load_curr_sect		; Load it in to sd_buf
                             
                             
d331 : a203             [ 2] 	ldx #0x03					; Initialise pointer to beginning
d333 :                       fs_open_init_pointer
d333 : 746f             [ 4] 	stz fh_handle+FH_Pointer,x
d335 : ca               [ 2] 	dex
d336 : 10fb             [ 3] 	bpl fs_open_init_pointer
                             
                             	; Set file mode to read
d338 : a901             [ 2] 	lda #FS_FILEMODER
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank2.s --------------------------------

d33a : 8582             [ 3] 	sta fh_handle+FH_FileMode
                             
d33c : 18               [ 2] 	clc
d33d :                       fs_open_not_found
d33d : 60               [ 6] 	rts
                             
                             ;* Wrapper function that saves A,X,Y *
                             ;* X,A = file spec ptr
d33e :                       fs_open_read_w
d33e : 48               [ 3] 	pha
d33f : da               [ 3] 	phx
d340 : 5a               [ 3] 	phy
                             
                             	; Save file name pointer
d341 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d343 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d345 : 201bd3           [ 6] 	jsr fs_open_read
                             	
d348 : 7a               [ 4] 	ply
d349 : fa               [ 4] 	plx
d34a : 68               [ 4] 	pla
d34b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_stamptimedate
                             ;* Stamp date and time to fhandle
                             ;* Input : None (reads RTC)
                             ;* Output : None
                             ;* Regs affected : all
                             ;****************************************
d34c :                       fs_stamptimedate
                             	; Point to temp space
d34c : a247             [ 2] 	ldx #lo(fs_scratch)
d34e : a90c             [ 2] 	lda #hi(fs_scratch)
                             	; Get the current time and date - 6 bytes
d350 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Now convert from hhmmssddmmyy format to FAT16
                             	; Byte bit and byte order as follows
                             	; byte 0 = milliseconds
                             	; byte 1 = mmmsssss
                             	; byte 2 = hhhhhmmm
                             	; byte 3 = MMMDDDDD
                             	; byte 4 = YYYYYYYM
                             	; First decide on milliseconds
d353 : a200             [ 2] 	ldx #0								; Assume 0 milliseconds
d355 : ad490c           [ 4] 	lda fs_scratch+2					; Seconds
d358 : 2901             [ 2] 	and #1
d35a : d002             [ 3] 	bne fs_stamptimedate_ms
d35c : a264             [ 2] 	ldx #100							; 10x100 milliseconds = 1 second
d35e :                       fs_stamptimedate_ms
d35e : 867d             [ 3] 	stx fh_handle+FH_TimeDate			; Save milliseconds
                             	
d360 : ad470c           [ 4] 	lda fs_scratch+0					; Get hours
d363 : 0a               [ 2] 	asl a								; Move to top 5 bits
d364 : 0a               [ 2] 	asl a
d365 : 0a               [ 2] 	asl a
d366 : 857f             [ 3] 	sta fh_handle+FH_TimeDate+2			; Put in time fiel
                             
d368 : ad480c           [ 4] 	lda fs_scratch+1					; Get minutes
d36b : 4a               [ 2] 	lsr a								; Put top 3 bits in to LSB
d36c : 4a               [ 2] 	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank2.s --------------------------------

d36d : 4a               [ 2] 	lsr a
d36e : 057f             [ 3] 	ora fh_handle+FH_TimeDate+2			; Combine with hou
d370 : 857f             [ 3] 	sta fh_handle+FH_TimeDate+2			; Put in time fiel
                             
d372 : ad480c           [ 4] 	lda fs_scratch+1					; Get minutes
d375 : 0a               [ 2] 	asl a								; Get bottom 3 bits of mins to top 
d376 : 0a               [ 2] 	asl a
d377 : 0a               [ 2] 	asl a
d378 : 0a               [ 2] 	asl a
d379 : 0a               [ 2] 	asl a
d37a : 857e             [ 3] 	sta fh_handle+FH_TimeDate+1			; Save in time fie
                             	
d37c : ad490c           [ 4] 	lda fs_scratch+2					; Get seconds again
d37f : 4a               [ 2] 	lsr a								; Divide by 2
d380 : 057e             [ 3] 	ora fh_handle+FH_TimeDate+1			; Combine with tim
d382 : 857e             [ 3] 	sta fh_handle+FH_TimeDate+1			; Save back to tim
                             	
d384 : ad4c0c           [ 4] 	lda fs_scratch+5					; Get year
d387 : 18               [ 2] 	clc									; Add 20 to get offset from 1980
d388 : 6914             [ 2] 	adc #20
d38a : 0a               [ 2] 	asl a								; Shift up
d38b : 8581             [ 3] 	sta fh_handle+FH_TimeDate+4			; Put in date fiel
                             
d38d : ad4b0c           [ 4] 	lda fs_scratch+4					; Get months
d390 : 4a               [ 2] 	lsr a								; Bit 3 in to bit 0
d391 : 4a               [ 2] 	lsr a
d392 : 4a               [ 2] 	lsr a
d393 : 0581             [ 3] 	ora fh_handle+FH_TimeDate+4			; Combine with dat
d395 : 8581             [ 3] 	sta fh_handle+FH_TimeDate+4			; Put in date fiel
                             
d397 : ad4b0c           [ 4] 	lda fs_scratch+4					; Get months
d39a : 0a               [ 2] 	asl a								; 3 LSBs in to MSB of A (discard MS
d39b : 0a               [ 2] 	asl a
d39c : 0a               [ 2] 	asl a
d39d : 0a               [ 2] 	asl a
d39e : 0a               [ 2] 	asl a
d39f : 0d4a0c           [ 4] 	ora fs_scratch+3					; Combine with day
d3a2 : 8580             [ 3] 	sta fh_handle+FH_TimeDate+3			; And save in date
                             
d3a4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* fs_unpack_string
                             ;* Open a file for reading
                             ;* Input : X,A points to 4 bytes of time/date in 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d3a5 :                       fs_unpack_string
                             
                             
                             ;****************************************
                             ;* fs_create_filedir
                             ;* Create a file or directory
                             ;* Input : fh_handle has the name and type attrib
                             ;*		 : new file / directory will be created.
                             ;*		 : Careful to check filename is *unique*
                             ;*		 : before calling this routine.
                             ;*		 : File will be in write mode, needs to be
                             ;*		 : closed to be properly saved
                             ;*		 : C=0 means file, C=1 meand directory
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank2.s --------------------------------

                             ;* Regs affected : None
                             ;****************************************
d3a5 :                       fs_create_filedir
d3a5 : 48               [ 3] 	pha
d3a6 : da               [ 3] 	phx
d3a7 : 5a               [ 3] 	phy
d3a8 : 08               [ 3] 	php							; Save file or dir request for later
                             
d3a9 : 205ecf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
d3ac : 38               [ 2] 	sec							; Find an empty file entry
d3ad : 207ecf           [ 6] 	jsr fs_dir_find_entry		; Find a valid entry
d3b0 : b036             [ 3] 	bcs	fs_create_fd_err		; Error, didn't find!
                             
d3b2 : a900             [ 2] 	lda #0						; Assume creating file
d3b4 : 28               [ 4] 	plp							; Unless C=1
d3b5 : 9002             [ 3] 	bcc fh_create_skip_dir
                             	; Set attribute for directory
d3b7 : a910             [ 2] 	lda #FAT_Attr_Dir
d3b9 :                       fh_create_skip_dir
d3b9 : 8563             [ 3] 	sta fh_handle+FH_Attr
                             
                             	; Copy filespec to file handle
d3bb : a000             [ 2] 	ldy #0
d3bd : a200             [ 2] 	ldx #FH_Name
d3bf :                       fs_create_copy_fspec
d3bf : b183             [ 5] 	lda (fh_handle+FH_FSpecPtr),y
d3c1 : 9556             [ 4] 	sta fh_handle,x
d3c3 : f004             [ 3] 	beq fs_create_copy_fspec_done
d3c5 : e8               [ 2] 	inx
d3c6 : c8               [ 2] 	iny
d3c7 : 80f6             [ 3] 	bra fs_create_copy_fspec
                             
d3c9 :                       fs_create_copy_fspec_done
d3c9 : 6464             [ 3] 	stz fh_handle+FH_Size+0		; Size is zero
d3cb : 6465             [ 3] 	stz fh_handle+FH_Size+1
d3cd : 6466             [ 3] 	stz fh_handle+FH_Size+2
d3cf : 6467             [ 3] 	stz fh_handle+FH_Size+3
                             
d3d1 : 204cd3           [ 6] 	jsr fs_stamptimedate		; Put date time stamp in t
                             	
d3d4 : 20e9d1           [ 6] 	jsr fs_find_empty_clust		; Find + record its fir
                             	
                             	; Set current, last and first cluster to the sam
d3d7 : a568             [ 3] 	lda fh_handle+FH_CurrClust
d3d9 : 8579             [ 3] 	sta fh_handle+FH_FirstClust
d3db : 857b             [ 3] 	sta fh_handle+FH_LastClust
d3dd : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d3df : 857a             [ 3] 	sta fh_handle+FH_FirstClust+1
d3e1 : 857c             [ 3] 	sta fh_handle+FH_LastClust+1
                             
                             	; Set file mode to write
d3e3 : a980             [ 2] 	lda #FS_FILEMODEW
d3e5 : 8582             [ 3] 	sta fh_handle+FH_FileMode
                             
d3e7 : 18               [ 2] 	clc
d3e8 :                       fs_create_fd_err
d3e8 : 7a               [ 4] 	ply
d3e9 : fa               [ 4] 	plx
d3ea : 68               [ 4] 	pla
d3eb : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank2.s --------------------------------

                             ;****************************************
                             ;* fs_create_dirptr
                             ;* Create a file that is a pointer to a directory
                             ;* Input : fh_handle has the name and type attrib
                             ;*		 : Entry will be created pointing tp the
                             ;*		 : cluster in FH_CurrClust.
                             ;*		 : Careful to check filename is *unique*
                             ;*		 : before calling this routine.
                             ;*		 : File will be in write mode, needs to be
                             ;*		 : closed to be properly saved
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d3ec :                       fs_create_dirptr
d3ec : a910             [ 2] 	lda #FAT_Attr_Dir
d3ee : 8563             [ 3] 	sta fh_handle+FH_Attr		; Make it a directory
                             
d3f0 : 6464             [ 3] 	stz fh_handle+FH_Size+0		; Size is zero
d3f2 : 6465             [ 3] 	stz fh_handle+FH_Size+1
d3f4 : 6466             [ 3] 	stz fh_handle+FH_Size+2
d3f6 : 6467             [ 3] 	stz fh_handle+FH_Size+3
                             
d3f8 : 18               [ 2] 	clc
d3f9 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_open_write
                             ;* Open a file for writing
                             ;* Input : fh_handle has the name
                             ;*		 : existing file will overwritten
                             ;*		 : new file will be created
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d3fa :                       fs_open_write
                             	; try and delete any file with the same name fir
d3fa : 205cd4           [ 6] 	jsr fs_delete
d3fd : 18               [ 2] 	clc
d3fe : 20a5d3           [ 6] 	jsr fs_create_filedir		; Ok go create this file 
                             
d401 : 60               [ 6] 	rts
                             
                             ;* Wrapper function that saves A,X,Y *
d402 :                       fs_open_write_w
d402 : 48               [ 3] 	pha
d403 : da               [ 3] 	phx
d404 : 5a               [ 3] 	phy
                             
d405 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d407 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d409 : 20fad3           [ 6] 	jsr fs_open_write
                             	
d40c : 7a               [ 4] 	ply
d40d : fa               [ 4] 	plx
d40e : 68               [ 4] 	pla
d40f : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_close_filedir
                             ;* Close a file/dir, important for new files
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank2.s --------------------------------

                             ;* Input : fh_handle details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d410 :                       fs_close_filedir
                             	; Only need to close down stuff in write mode
d410 : a582             [ 3] 	lda fh_handle+FH_FileMode
                             	; Zero out file mode
d412 : 6482             [ 3] 	stz fh_handle+FH_FileMode
                             	; If filemode N bit clear then done
d414 : 103b             [ 3] 	bpl fs_close_done
                             		
                             	; Flush the current sector
d416 : 20d6d1           [ 6] 	jsr fs_flush_curr_sect
                             
                             	; Update the chain from the last cluster
d419 : 205ad2           [ 6] 	jsr fs_update_FAT_entry
                             
                             	; Make current sector = last
d41c : a568             [ 3] 	lda fh_handle+FH_CurrClust
d41e : 857b             [ 3] 	sta fh_handle+FH_LastClust
d420 : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d422 : 857c             [ 3] 	sta fh_handle+FH_LastClust+1
                             	; Need to update the FAT entry
                             	; to show this cluster is last
d424 : a9ff             [ 2] 	lda #0xff
d426 : 8568             [ 3] 	sta fh_handle+FH_CurrClust
d428 : 8569             [ 3] 	sta fh_handle+FH_CurrClust+1
                             	; Now update the FAT entry to mark the last clus
d42a : 205ad2           [ 6] 	jsr fs_update_FAT_entry
                             	; Then finally save the directory entry
                             	; First fhandle to FATFileDesc
d42d : 2072d0           [ 6] 	jsr fs_dir_fhandle_to_entry
                             
                             	; Update modified date and time to be same as cr
d430 : ad210c           [ 4] 	lda fs_direntry+FAT_CreateDate
d433 : 8d290c           [ 4] 	sta fs_direntry+FAT_ModDate
d436 : 8d230c           [ 4] 	sta fs_direntry+FAT_AccessDate
d439 : ad220c           [ 4] 	lda fs_direntry+FAT_CreateDate+1
d43c : 8d2a0c           [ 4] 	sta fs_direntry+FAT_ModDate+1
d43f : 8d240c           [ 4] 	sta fs_direntry+FAT_AccessDate+1
d442 : ad1f0c           [ 4] 	lda fs_direntry+FAT_CreateTime
d445 : 8d270c           [ 4] 	sta fs_direntry+FAT_ModTime
d448 : ad200c           [ 4] 	lda fs_direntry+FAT_CreateTime+1
d44b : 8d280c           [ 4] 	sta fs_direntry+FAT_ModTime+1
                             	
d44e : 20d5d2           [ 6] 	jsr fs_dir_save_entry
                             
d451 :                       fs_close_done
d451 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper function preserving A,X,Y *
d452 :                       fs_close_w
d452 : 48               [ 3] 	pha
d453 : da               [ 3] 	phx
d454 : 5a               [ 3] 	phy
                             	
d455 : 2010d4           [ 6] 	jsr fs_close_filedir
                             	
d458 : 7a               [ 4] 	ply
d459 : fa               [ 4] 	plx
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank2.s --------------------------------

d45a : 68               [ 4] 	pla
d45b : 60               [ 6] 	rts
                             	
                             	
                             
                             
                             ;****************************************
                             ;* fs_delete
                             ;* Delete a file
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d45c :                       fs_delete
d45c : 201bd3           [ 6] 	jsr fs_open_read			; Try and open the file
d45f : b031             [ 3] 	bcs fs_delete_fin			; If not found then fin
                             	
                             	; Mark first char with deleted indicator
d461 : a9e5             [ 2] 	lda #0xe5
d463 : 8556             [ 3] 	sta fh_handle+FH_Name
                             
                             	; Save this back to directory table
                             	; First fhandle to FATFileDesc
d465 : 2072d0           [ 6] 	jsr fs_dir_fhandle_to_entry	
d468 : 20d5d2           [ 6] 	jsr fs_dir_save_entry
                             
                             	; Now mark all related clusters as free
d46b : a679             [ 3] 	ldx fh_handle+FH_FirstClust
d46d : 8668             [ 3] 	stx fh_handle+FH_CurrClust
d46f : a47a             [ 3] 	ldy fh_handle+FH_FirstClust+1
d471 : 8469             [ 3] 	sty fh_handle+FH_CurrClust+1
d473 :                       fs_delete_clust
                             	; X and Y always contain current cluster
                             	; Make last = current
d473 : 867b             [ 3] 	stx fh_handle+FH_LastClust
d475 : 847c             [ 3] 	sty fh_handle+FH_LastClust+1
                             
                             	; Given current cluster, find next
                             	; save in X,Y
d477 : 20f3d0           [ 6] 	jsr fs_get_next_cluster
                             	; load X,Y with the next cluster
d47a : a668             [ 3] 	ldx fh_handle+FH_CurrClust
d47c : a469             [ 3] 	ldy fh_handle+FH_CurrClust+1
                             	
                             	; Zero out the cluster number
d47e : 6468             [ 3] 	stz fh_handle+FH_CurrClust
d480 : 6469             [ 3] 	stz fh_handle+FH_CurrClust+1
                             
                             	; Update FAT entry of Last Cluster with zero
d482 : 205ad2           [ 6] 	jsr fs_update_FAT_entry
                             
                             	; Restore the next cluster found earlier
d485 : 8668             [ 3] 	stx fh_handle+FH_CurrClust
d487 : 8469             [ 3] 	sty fh_handle+FH_CurrClust+1
                             
                             	; If the next cluster is not 0xffff
                             	; then continue
d489 : e0ff             [ 2] 	cpx #0xff
d48b : d0e6             [ 3] 	bne fs_delete_clust
d48d : c0ff             [ 2] 	cpy #0xff
d48f : d0e2             [ 3] 	bne fs_delete_clust
d491 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank2.s --------------------------------

d492 :                       fs_delete_fin
d492 : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d493 :                       fs_delete_w
d493 : 48               [ 3] 	pha
d494 : da               [ 3] 	phx
d495 : 5a               [ 3] 	phy
                             
d496 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d498 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d49a : 205cd4           [ 6] 	jsr fs_delete
                             	
d49d : 7a               [ 4] 	ply
d49e : fa               [ 4] 	plx
d49f : 68               [ 4] 	pla
d4a0 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* fs_chdir_direct
                             ;* Change root directory directly using cluster
                             ;* Input : FH_FirstClust has cluster number of di
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d4a1 :                       fs_chdir_direct
                             	; Calculate sector from this directory cluster
d4a1 : a679             [ 3] 	ldx fh_handle+FH_FirstClust
d4a3 : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
                             	
                             	; Also record the directory cluster #
d4a5 : 8e450c           [ 4] 	stx fs_dirclust
d4a8 : 8d460c           [ 4] 	sta fs_dirclust+1
                             	
d4ab : 2089d1           [ 6] 	jsr fs_get_start_sect_data	; Calc the first sect
                             	
d4ae : a203             [ 2] 	ldx #3						; Copy sector to dirsect
d4b0 :                       fs_chdir_direct_sect
d4b0 : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d4b2 : 9d410c           [ 5] 	sta fs_dirsect,x
d4b5 : ca               [ 2] 	dex
d4b6 : 10f8             [ 3] 	bpl fs_chdir_direct_sect
d4b8 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_chdir
                             ;* Change root directory
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d4b9 :                       fs_chdir
d4b9 : b283             [ 5] 	lda (fh_handle+FH_FSpecPtr)	; First byte of name
d4bb : d006             [ 3] 	bne fs_chdir_find			; Then find the file
d4bd : 8579             [ 3] 	sta fh_handle+FH_FirstClust	; Else use zero to i
d4bf : 857a             [ 3] 	sta fh_handle+FH_FirstClust+1
d4c1 : f008             [ 3] 	beq fs_chdir_go				; To go to the root directory
                             
d4c3 :                       fs_chdir_find
d4c3 : 205ecf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
d4c6 : 20f7d2           [ 6] 	jsr fs_find_named			; Try to find the file
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank2.s --------------------------------

d4c9 : b004             [ 3] 	bcs fs_chdir_not_found		; C=1 not found
                             
d4cb :                       fs_chdir_go
                             	; Use populated cluster number to go directly
d4cb : 20a1d4           [ 6] 	jsr fs_chdir_direct
                             
d4ce :                       fs_chdir_fin
d4ce : 18               [ 2] 	clc
d4cf :                       fs_chdir_not_found
d4cf : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d4d0 :                       fs_chdir_w
d4d0 : 48               [ 3] 	pha
d4d1 : da               [ 3] 	phx
d4d2 : 5a               [ 3] 	phy
                             	
d4d3 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d4d5 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d4d7 : 20b9d4           [ 6] 	jsr fs_chdir
                             	
d4da : 7a               [ 4] 	ply
d4db : fa               [ 4] 	plx
d4dc : 68               [ 4] 	pla
d4dd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_mkdir
                             ;* Create a file
                             ;* Input : fh_handle has the name
                             ;*		 : checks if file already exists
                             ;*		 : new directory will be created
                             ;*       : including . and .. entries
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d4de :                       fs_mkdir
d4de : 205ecf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
                             
                             	; If file or directory with same name exists, th
d4e1 : 20f7d2           [ 6] 	jsr fs_find_named			; Try to find the file
d4e4 : b002             [ 3] 	bcs fs_mkdir_ok				; C=1 then no file found - ok
                             
d4e6 : 38               [ 2] 	sec							; Indicate fail
d4e7 : 60               [ 6] 	rts
                             
d4e8 :                       fs_mkdir_ok	
                             	; Remember parent directory ".." cluster #
d4e8 : ad450c           [ 4] 	lda fs_dirclust
d4eb : 48               [ 3] 	pha
d4ec : ad460c           [ 4] 	lda fs_dirclust+1
d4ef : 48               [ 3] 	pha
                             
d4f0 : 38               [ 2] 	sec
d4f1 : 20a5d3           [ 6] 	jsr fs_create_filedir		; Go create the directory
d4f4 : 2010d4           [ 6] 	jsr fs_close_filedir		; Commit
                             	
                             	; Remember this directory "." cluster #
d4f7 : a579             [ 3] 	lda fh_handle+FH_FirstClust
d4f9 : 48               [ 3] 	pha
d4fa : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
d4fc : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank2.s --------------------------------

                             	
                             	; Need to zero the directory cluster
                             	; First create a zero filled buffer 512 bytes
d4fd : a900             [ 2] 	lda #0
d4ff : aa               [ 2] 	tax
d500 : a000             [ 2] 	ldy #0
d502 :                       fs_mkdir_zero_sector
d502 : 2023cf           [ 6] 	jsr fs_putbyte_sd_buf
d505 : ca               [ 2] 	dex 
d506 : d0fa             [ 3] 	bne fs_mkdir_zero_sector
d508 : c8               [ 2] 	iny
d509 : c002             [ 2] 	cpy #2
d50b : d0f5             [ 3] 	bne fs_mkdir_zero_sector
                             	; Now fill a cluster's worth of sectors with zer
                             	; Cluster = 16k, buffer = 512 bytes => 32 sector
                             	
                             	; Get directory cluster # in to X,A and calculat
d50d : a679             [ 3] 	ldx fh_handle+FH_FirstClust
d50f : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
d511 : 2089d1           [ 6] 	jsr fs_get_start_sect_data
                             	
                             	; Now write cluster worth of sectors
d514 : a220             [ 2] 	ldx #32
d516 :                       fs_mkdir_zero_cluster
d516 : da               [ 3] 	phx
d517 : 20d6d1           [ 6] 	jsr fs_flush_curr_sect
d51a : 202cd2           [ 6] 	jsr fs_inc_curr_sec
d51d : fa               [ 4] 	plx
d51e : ca               [ 2] 	dex
d51f : d0f5             [ 3] 	bne fs_mkdir_zero_cluster
                             	
                             	; Goto newly created directory (it's empty)
                             	; Use cluster number
d521 : 20b9d4           [ 6] 	jsr fs_chdir
d524 : 205ecf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
                             	; Go and find first available slot in directory 
d527 : 38               [ 2] 	sec
d528 : 207ecf           [ 6] 	jsr fs_dir_find_entry
                             	; Restore current directory cluster - it's rever
d52b : 68               [ 4] 	pla
d52c : 857a             [ 3] 	sta fh_handle+FH_FirstClust+1
d52e : 68               [ 4] 	pla
d52f : 8579             [ 3] 	sta fh_handle+FH_FirstClust
d531 : 20ecd3           [ 6] 	jsr fs_create_dirptr		; Go create the '.' file e
                             	; Create name for entry "."
d534 : a92e             [ 2] 	lda #'.'
d536 : 8556             [ 3] 	sta fh_handle+0
d538 : 6457             [ 3] 	stz fh_handle+1
                             	; Convert fhandle to FATFileDesc
d53a : 2072d0           [ 6] 	jsr fs_dir_fhandle_to_entry	
d53d : 20d5d2           [ 6] 	jsr fs_dir_save_entry		; Save it to to the direc
                             
                             	; Go and find next available slot in directory C
d540 : 20c3cf           [ 6] 	jsr fs_dir_next_entry
d543 : 38               [ 2] 	sec
d544 : 207ecf           [ 6] 	jsr fs_dir_find_entry
                             	; Restore parent directory cluster - it's revers
d547 : 68               [ 4] 	pla
d548 : 857a             [ 3] 	sta fh_handle+FH_FirstClust+1
d54a : 68               [ 4] 	pla
d54b : 8579             [ 3] 	sta fh_handle+FH_FirstClust
d54d : 20ecd3           [ 6] 	jsr fs_create_dirptr		; Go create the '..' file 
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank2.s --------------------------------

                             	; Create name for entry ".."
d550 : a92e             [ 2] 	lda #'.'
d552 : 8556             [ 3] 	sta fh_handle+0
d554 : 8557             [ 3] 	sta fh_handle+1
d556 : 6458             [ 3] 	stz fh_handle+2
                             	; Convert fhandle to FATFileDesc
d558 : 2072d0           [ 6] 	jsr fs_dir_fhandle_to_entry	
d55b : 20d5d2           [ 6] 	jsr fs_dir_save_entry		; Save it to to the direc
                             
                             	; FH_FirstClust points to parent - go to it
d55e : 20a1d4           [ 6] 	jsr fs_chdir_direct
                             	
d561 : 18               [ 2] 	clc							; Indicate success
                             
d562 :                       fs_mkdir_fin
d562 : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d563 :                       fs_mkdir_w
d563 : 48               [ 3] 	pha
d564 : da               [ 3] 	phx
d565 : 5a               [ 3] 	phy
                             	
d566 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d568 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d56a : 20ded4           [ 6] 	jsr fs_mkdir
                             
d56d : 7a               [ 4] 	ply
d56e : fa               [ 4] 	plx
d56f : 68               [ 4] 	pla
d570 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_fhandle_to_str
                             ;* Unpack contents of fhandle to a string 
                             ;* Input : fs_fhandle, A,X=pointer to string
                             ;* Output : 43 bytes of string (inc, zero pointer
                             ;* Column	Len	Offset	Desc
                             ;*	name	12	0 		8.3 space padded to right
                             ;*	type	3	13		DIR if directory else FIL
                             ;*	date	8	19		DD/MM/YY
                             ;*	time	8	28		hh/mm/ss
                             ;*	size	5	37		right justified no leading zeros
                             ;* Regs affected : None
                             ;****************************************
d571 :                       fs_dir_str
d571 : 444952                	db "DIR"
d574 :                       fs_dir_fil
d574 : 202020                	db "   "
d577 :                       fs_dir_fhandle_str
d577 : 863f             [ 3] 	stx tmp_v1
d579 : 8540             [ 3] 	sta tmp_v1+1
                             	; Put zero terminator at pos 41
d57b : a028             [ 2] 	ldy #40
d57d : a900             [ 2] 	lda #0
d57f : 913f             [ 5] 	sta (tmp_v1),y
                             	; Pre-fill with spaces
d581 : 88               [ 2] 	dey
d582 : a920             [ 2] 	lda #' '
d584 :                       fs_dir_fhandle_pad_spc
d584 : 913f             [ 5] 	sta (tmp_v1),y
d586 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank2.s --------------------------------

d587 : 10fb             [ 3] 	bpl fs_dir_fhandle_pad_spc
                             	; Put '/' separator for date
d589 : a92f             [ 2] 	lda #'/'
d58b : a013             [ 2] 	ldy #19
d58d : 913f             [ 5] 	sta (tmp_v1),y
d58f : a016             [ 2] 	ldy #22
d591 : 913f             [ 5] 	sta (tmp_v1),y
                             	; Put ':' separator for time
d593 : a93a             [ 2] 	lda #':'
d595 : a01c             [ 2] 	ldy #28
d597 : 913f             [ 5] 	sta (tmp_v1),y
d599 : a01f             [ 2] 	ldy #31
d59b : 913f             [ 5] 	sta (tmp_v1),y
                             	;* Unpack name - copy 8.3 (12 chars) until zero
d59d : a200             [ 2] 	ldx #FH_Name				; Source
d59f : a000             [ 2] 	ldy #0						; Name offset
d5a1 :                       fs_dir_fhandle_name
d5a1 : b556             [ 4] 	lda fh_handle,x				; Get name char
d5a3 : f00b             [ 3] 	beq	fs_dir_fhandle_dotype	; Process attribute if
d5a5 : 207ed1           [ 6] 	jsr fs_to_upper				; Case insensitive
d5a8 : 913f             [ 5] 	sta (tmp_v1),y
d5aa : e8               [ 2] 	inx
d5ab : c8               [ 2] 	iny
d5ac : c00c             [ 2] 	cpy #12
d5ae : d0f1             [ 3] 	bne fs_dir_fhandle_name		; Max 12 chars for a fi
d5b0 :                       fs_dir_fhandle_dotype
d5b0 : a563             [ 3] 	lda fh_handle+FH_Attr		; Check the type
d5b2 : a00d             [ 2] 	ldy #13						; Point to column for type
d5b4 : a200             [ 2] 	ldx #0						; Point to DIR string
d5b6 : c910             [ 2] 	cmp #FAT_Attr_Dir			; Directory?
d5b8 : f002             [ 3] 	beq fs_dir_fhandle_type
d5ba : a203             [ 2] 	ldx #3						; Point to FIL string
d5bc :                       fs_dir_fhandle_type				; copy 3 chars
d5bc : bd71d5           [ 4] 	lda fs_dir_str,x
d5bf : 913f             [ 5] 	sta (tmp_v1),y
d5c1 : e8               [ 2] 	inx
d5c2 : c8               [ 2] 	iny
d5c3 : c010             [ 2] 	cpy #16
d5c5 : d0f5             [ 3] 	bne fs_dir_fhandle_type
                             
                             	;* Date
                             	; Extract year
d5c7 : a581             [ 3] 	lda fh_handle+FH_TimeDate+4 ; Top 7 bits is year
d5c9 : 4a               [ 2] 	lsr a
d5ca : 38               [ 2] 	sec							; Remove offset from 1980 (-20)
d5cb : e914             [ 2] 	sbc #20
d5cd : a017             [ 2] 	ldy #23						; Save to date field
d5cf : 2041d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract month
d5d2 : a581             [ 3] 	lda fh_handle+FH_TimeDate+4 ; Bottom bit is bit 
d5d4 : 4a               [ 2] 	lsr a						; Put in to C
d5d5 : a580             [ 3] 	lda fh_handle+FH_TimeDate+3	; Top 3 bits are mon
d5d7 : 6a               [ 2] 	ror a						; Rotate in C for bit 3 (now have 4 b
d5d8 : 4a               [ 2] 	lsr a						; Bring to low nibble
d5d9 : 4a               [ 2] 	lsr a
d5da : 4a               [ 2] 	lsr a
d5db : 4a               [ 2] 	lsr a
d5dc : a014             [ 2] 	ldy #20						; Month field position
d5de : 2041d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract days
d5e1 : a580             [ 3] 	lda fh_handle+FH_TimeDate+3 ; Bottom bottom 5 bi
d5e3 : 291f             [ 2] 	and #0x1f					; So mask that
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank2.s --------------------------------

d5e5 : a011             [ 2] 	ldy #17						; Day field position
d5e7 : 2041d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             
                             	;* Time
                             	; Extract hours
d5ea : a57f             [ 3] 	lda fh_handle+FH_TimeDate+2	; Ignore ms. Top5 bi
d5ec : 4a               [ 2] 	lsr a
d5ed : 4a               [ 2] 	lsr a
d5ee : 4a               [ 2] 	lsr a
d5ef : a01a             [ 2] 	ldy #26						; Hours field
d5f1 : 2041d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract minutes
d5f4 : a57e             [ 3] 	lda fh_handle+FH_TimeDate+1	; Top 3 bits is bit 
d5f6 : 4a               [ 2] 	lsr a						; Shift it to bottom
d5f7 : 4a               [ 2] 	lsr a
d5f8 : 4a               [ 2] 	lsr a
d5f9 : 4a               [ 2] 	lsr a
d5fa : 4a               [ 2] 	lsr a
d5fb : 8d470c           [ 4] 	sta fs_scratch				; Save partial result
d5fe : a57f             [ 3] 	lda fh_handle+FH_TimeDate+2	; Bottom 3 bits is b
d600 : 2907             [ 2] 	and #0x07					; Mask for those bits
d602 : 0a               [ 2] 	asl a						; Shift up in to position 3,4,5
d603 : 0a               [ 2] 	asl a
d604 : 0a               [ 2] 	asl a
d605 : 0d470c           [ 4] 	ora fs_scratch				; Combine with top 3 bits
d608 : a01d             [ 2] 	ldy #29						; Minutes field
d60a : 2041d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract seconds
d60d : a57e             [ 3] 	lda fh_handle+FH_TimeDate+1	; Bottom 5 bits is s
d60f : 291f             [ 2] 	and #0x1f					; Mask for those
d611 : 0a               [ 2] 	asl a						; x2
d612 : a020             [ 2] 	ldy #32						; Seconds field
d614 : 2041d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract size
d617 : a565             [ 3] 	lda fh_handle+FH_Size+1		; Only taking 16 bits o
d619 : a664             [ 3] 	ldx fh_handle+FH_Size+0		; X=Low
d61b : 2037ca           [ 6] 	jsr word_to_bcd				; X,A to BCD in num_a (3 byte
d61e : a587             [ 3] 	lda num_a+2					; 100k and 10k digits
d620 : a023             [ 2] 	ldy #35						; Position of size field
d622 : 2057d6           [ 6] 	jsr fs_util_num_bcd_a		; Put only 10k digit
d625 : a586             [ 3] 	lda num_a+1					; 1k and hundreds digits
d627 : 2049d6           [ 6] 	jsr fs_util_num_bcd_xa		; Put digits in AX
d62a : a585             [ 3] 	lda num_a+0					; tens and units digits
d62c : 2049d6           [ 6] 	jsr fs_util_num_bcd_xa		; Put digits in AX
d62f : a023             [ 2] 	ldy #35						; Check for leading zeros
d631 :                       fs_dir_fhandle_zeros
d631 : b13f             [ 5] 	lda (tmp_v1),y
d633 : c930             [ 2] 	cmp #'0'
d635 : d009             [ 3] 	bne fs_dir_fhandle_done
d637 : a920             [ 2] 	lda #' '
d639 : 913f             [ 5] 	sta (tmp_v1),y
d63b :                       fs_dir_fhandle_zskip
d63b : c8               [ 2] 	iny
d63c : c027             [ 2] 	cpy #39						; Last zero can stay
d63e : d0f1             [ 3] 	bne fs_dir_fhandle_zeros
                             	; byte 0 = milliseconds
                             	; byte 1 = mmmsssss
                             	; byte 2 = hhhhhmmm
                             	; byte 3 = MMMDDDDD
                             	; byte 4 = YYYYYYYM
d640 :                       fs_dir_fhandle_done
d640 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank2.s --------------------------------

                             
d641 :                       fs_util_num_bcd
d641 : aa               [ 2] 	tax							; Only can do 00-99
d642 : a900             [ 2] 	lda #0						; So high byte = 0
d644 : 2037ca           [ 6] 	jsr word_to_bcd				; X,A to BCD in num_a
d647 : a585             [ 3] 	lda num_a+0					; Two least significant BCD digi
d649 :                       fs_util_num_bcd_xa				; Enter here if bcd convers
d649 : 48               [ 3] 	pha
d64a : aa               [ 2] 	tax							; X contains this
d64b : 68               [ 4] 	pla							; Two least significant BCD digits (00
d64c : 4a               [ 2] 	lsr a						; Get tens digit 
d64d : 4a               [ 2] 	lsr a
d64e : 4a               [ 2] 	lsr a
d64f : 4a               [ 2] 	lsr a
d650 : 18               [ 2] 	clc
d651 : 6930             [ 2] 	adc #'0'					; Convert to ascii
d653 : 913f             [ 5] 	sta (tmp_v1),y				; Save in string position (2 c
d655 : c8               [ 2] 	iny
d656 : 8a               [ 2] 	txa
d657 :                       fs_util_num_bcd_a				; Enter here if only units n
d657 : 290f             [ 2] 	and #0x0f					; Get units digit
d659 : 18               [ 2] 	clc
d65a : 6930             [ 2] 	adc #'0'					; Convert to ascii
d65c : 913f             [ 5] 	sta (tmp_v1),y
d65e : c8               [ 2] 	iny
d65f : 60               [ 6] 	rts
                             
                             
                             	
d660 :                       msg_initialising_fs
d660 : 4d6f756e74696e..      	db "Mounting filesystem\r\r",0
d676 :                       msg_noinit_fs
d676 : 4e6f2066696c65..      	db "No filesystem available\r\r",0
d690 :                       mod_sz_sd_fs_e
                             
                             
                             	; End of Code
d690 :                       _code_end
d690 :                       _bank2_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
