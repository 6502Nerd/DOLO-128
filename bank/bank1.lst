AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank1.s --------------------------------

13400 lines read, no errors in pass 1.
c000 =                       _bank1_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank1.s --------------------------------

0002 =                       VDP_LONGDELAY 	= 2
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank1.s --------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank1.s --------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank1.s --------------------------------

0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
                             	phy
                             	pha
                             	jsr str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank1.s --------------------------------

                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank1.s --------------------------------

                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank1.s --------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank1.s --------------------------------

0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank1.s --------------------------------

0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank1.s --------------------------------

                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank1.s --------------------------------

0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank1.s --------------------------------

                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank1.s --------------------------------

0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank1.s --------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank1.s --------------------------------

                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank1.s --------------------------------

                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank1.s --------------------------------

009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank1.s --------------------------------

                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : dfc6                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : cfca                  	fcw init			; 0xfffc : Reset Vector
fffe : 1fc7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
c000 : 80                    	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c48c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c45c5           [ 3] 	jmp io_get_ch			; Vec 1
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank1.s --------------------------------

c007 : 4cd8c5           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c10c6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c1cc6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c7dc6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c25c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4ce5c5           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4cfcc5           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ; 
c02e :                       mod_sz_autogen_s 
c02e :                       _df_init 
                               _bankjsr $f19c, 1 
                             
c046 :                       _df_pg_dflat 
                               _bankjsr $d755, 1 
                             
c05e :                       _fs_chdir_w 
                               _bankjsr $d4d0, 2 
                             
c076 :                       _fs_mkdir_w 
                               _bankjsr $d563, 2 
                             
c08e :                       _fs_delete_w 
                               _bankjsr $d493, 2 
                             
c0a6 :                       _fs_close_w 
                               _bankjsr $d452, 2 
                             
c0be :                       _fs_get_byte_w 
                               _bankjsr $d176, 2 
                             
c0d6 :                       _fs_open_read_w 
                               _bankjsr $d33e, 2 
                             
c0ee :                       _fs_open_write_w 
                               _bankjsr $d402, 2 
                             
c106 :                       _fs_put_byte_w 
                               _bankjsr $d2cb, 2 
                             
c11e :                       _fs_dir_find_entry_w 
                               _bankjsr $cfb9, 2 
                             
c136 :                       _fs_dir_entry_next_w 
                               _bankjsr $cfef, 2 
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank1.s --------------------------------

                             
c14e :                       _fs_dir_root_start_w 
                               _bankjsr $cf74, 2 
                             
c166 :                       _get_byte 
                               _bankjsr $cecc, 0 
                             
c17e :                       _put_byte 
                               _bankjsr $cee1, 0 
                             
c196 :                       _gr_get_key 
                               _bankjsr $df8c, 0 
                             
c1ae :                       _gr_put_byte 
                               _bankjsr $df99, 0 
                             
c1c6 :                       _gr_init_screen 
                               _bankjsr $da59, 0 
                             
c1de :                       _init_acia 
                               _bankjsr $ceee, 0 
                             
c1f6 :                       _init_cia0 
                               _bankjsr $ce79, 0 
                             
c20e :                       _init_cia1 
                               _bankjsr $ceaa, 0 
                             
c226 :                       _init_fs 
                               _bankjsr $ce51, 2 
                             
c23e :                       _init_sdcard 
                               _bankjsr $cb4b, 2 
                             
c256 :                       _init_snd 
                               _bankjsr $d2ad, 0 
                             
c26e :                       _init_keyboard 
                               _bankjsr $cf00, 0 
                             
c286 :                       _kb_read_raw 
                               _bankjsr $cf0f, 0 
                             
c29e :                       _kb_read_dip 
                               _bankjsr $cf7a, 0 
                             
c2b6 :                       _command_line 
                               _bankjsr $cb4b, 0 
                             
c2ce :                       _gr_cls 
                               _bankjsr $da6c, 0 
                             
c2e6 :                       _gr_init_hires 
                               _bankjsr $da16, 0 
                             
c2fe :                       _gr_line 
                               _bankjsr $ddc6, 0 
                             
c316 :                       _gr_box 
                               _bankjsr $dc06, 0 
                             
c32e :                       _gr_circle 
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank1.s --------------------------------

                               _bankjsr $dd11, 0 
                             
c346 :                       _gr_plot 
                               _bankjsr $dad7, 0 
                             
c35e :                       _gr_hchar 
                               _bankjsr $db15, 0 
                             
c376 :                       _gr_point 
                               _bankjsr $dbbb, 0 
                             
c38e :                       _gr_get 
                               _bankjsr $daf2, 0 
                             
c3a6 :                       _gr_set_cur 
                               _bankjsr $dafa, 0 
                             
c3be :                       _snd_get_note 
                               _bankjsr $d2a6, 0 
                             
c3d6 :                       _snd_get_joy0 
                               _bankjsr $c67d, 0 
                             
c3ee :                       _snd_set 
                               _bankjsr $c625, 0 
                             
c406 :                       _vdp_peek 
                               _bankjsr $c61c, 0 
                             
c41e :                       _vdp_poke 
                               _bankjsr $c610, 0 
                             
c436 :                       _vdp_init 
                               _bankjsr $d800, 0 
                             
c44e :                       _rtc_init 
                               _bankjsr $d0d0, 0 
                             
c466 :                       _rtc_gettimedate 
                               _bankjsr $d237, 0 
                             
c47e :                       _rtc_setdatetime 
                               _bankjsr $d188, 0 
                             
c496 :                       _rtc_nvread 
                               _bankjsr $d29d, 0 
                             
c4ae :                       _rtc_nvwrite 
                               _bankjsr $d285, 0 
                             
c4c6 :                       _fs_dir_fhandle_str 
                               _bankjsr $d577, 2 
                             
c4de :                       _sd_sendcmd17 
                               _bankjsr $cd23, 2 
                             
c4f6 :                       _sd_sendcmd24 
                               _bankjsr $cd9c, 2 
                             
c50e :                       mod_sz_autogen_e 
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank1.s --------------------------------

c50e :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c50e :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c50e :                       io_init
c50e : a900             [ 2] 	lda #0				; Assume it's serial
c510 : 48               [ 3] 	pha
c511 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c514 : 2910             [ 2] 	and #0x10
c516 : d00b             [ 3] 	bne io_init_set_default
c518 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c51b : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c51d : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c51f : 68               [ 4] 	pla
c520 : a901             [ 2] 	lda #1
c522 : 48               [ 3] 	pha
c523 :                       io_init_set_default
c523 : 68               [ 4] 	pla
c524 : 8d000c           [ 4] 	sta io_default
c527 : 4c2ac5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank1.s --------------------------------

                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c52a :                       io_set_default			; Entry point for default
c52a : ad000c           [ 4] 	lda io_default
c52d :                       io_active_device		; Entry point for A set
c52d : 0a               [ 2] 	asl	a				; x16 the Block number
c52e : 0a               [ 2] 	asl a
c52f : 0a               [ 2] 	asl a
c530 : 0a               [ 2] 	asl a
c531 : a8               [ 2] 	tay
c532 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c534 :                       io_copy_data
c534 : b9a8c5           [ 4] 	lda io_devices,y
c537 : 9d010c           [ 5] 	sta io_block,x
c53a : c8               [ 2] 	iny
c53b : e8               [ 2] 	inx
c53c : e010             [ 2] 	cpx #io_struct
c53e : d0f4             [ 3] 	bne io_copy_data
                             	
c540 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c542 : 854a             [ 3] 	sta buf_ef
c544 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c545 :                       io_get_ch
c545 : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c548 :                       io_put_ch
c548 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c54b :                       io_open_read
c54b : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank1.s --------------------------------

                             ;* Regs affected : All
                             ;****************************************
c54e :                       io_open_write
c54e : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c551 :                       io_close
c551 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c554 :                       io_delete
c554 : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c557 :                       io_read_line
c557 : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c559 : 8548             [ 3] 	sta buf_adr+1
c55b : 8449             [ 3] 	sty buf_sz			; Max length
c55d : 08               [ 3] 	php					; Save echo state
c55e : a000             [ 2] 	ldy #0x00			; Starting at first byte
c560 :                       io_get_line_byte
c560 : 38               [ 2] 	sec					; Getting bytes synchronously
c561 : 2045c5           [ 6] 	jsr io_get_ch		; Get a byte
c564 : b026             [ 3] 	bcs io_get_line_done; Got nothing then finish
c566 : 28               [ 4] 	plp					; Get echo state
c567 : 08               [ 3] 	php					; Instantly save it back
c568 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c56a : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c56c : d005             [ 3] 	bne io_do_echo
c56e : c000             [ 2] 	cpy #0				; Already at beginning?
c570 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c572 : 88               [ 2] 	dey					; Else decrement length
c573 :                       io_do_echo
c573 : 2048c5           [ 6] 	jsr io_put_ch		; Echo it
c576 :                       io_skip_echo
c576 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c578 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c57a : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c57c : f003             [ 3] 	beq io_skip_special
c57e : 9147             [ 5] 	sta (buf_adr),y		; Save it
c580 : c8               [ 2] 	iny					; Increase length
c581 :                       io_skip_special
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank1.s --------------------------------

c581 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c583 : f007             [ 3] 	beq io_get_line_done	; If yes then done
c585 : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c587 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c589 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c58a : 38               [ 2] 	sec					; Yes, set carry flag
c58b : 60               [ 6] 	rts					; And done
c58c :                       io_get_line_done
c58c : a900             [ 2] 	lda #0
c58e : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c590 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c591 : 18               [ 2] 	clc					; Clear carry flag
c592 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c593 :                       io_print_line
c593 : 48               [ 3] 	pha
                             
c594 : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c596 : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c598 : a000             [ 2] 	ldy #0						; Start at the beginning!
c59a :                       io_print_line_byte
c59a : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c59c : f006             [ 3] 	beq io_print_done			; If zero then done - print
c59e : 2048c5           [ 6] 	jsr io_put_ch				; Transmit
c5a1 : c8               [ 2] 	iny
c5a2 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c5a4 :                       io_print_done
c5a4 : 68               [ 4] 	pla
c5a5 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c5a6 :                       io_null_op
c5a6 : 18               [ 2] 	clc
c5a7 : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c5a8 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c5a8 :                       io_device0					; Serial device, input = Ser, outp
c5a8 : 66c1                  	dw	_get_byte			; io_get_ch
c5aa : 7ec1                  	dw	_put_byte			; io_put_ch
c5ac : a6c5                  	dw	io_null_op			; io_open_r
c5ae : a6c5                  	dw	io_null_op			; io_open_w
c5b0 : a6c5                  	dw	io_null_op			; io_close_f
c5b2 : a6c5                  	dw	io_null_op			; io_del_f
c5b4 : a6c5                  	dw	io_null_op			; io_ext1
c5b6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c5b8 :                       io_device1					; Default device, input = screen e
c5b8 : 96c1                  	dw	_gr_get_key			; io_get_ch
c5ba : aec1                  	dw	_gr_put_byte		; io_put_ch
c5bc : a6c5                  	dw	io_null_op			; io_open_r
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank1.s --------------------------------

c5be : a6c5                  	dw	io_null_op			; io_open_w
c5c0 : a6c5                  	dw	io_null_op			; io_close_f
c5c2 : a6c5                  	dw	io_null_op			; io_del_f
c5c4 : a6c5                  	dw	io_null_op			; io_ext1
c5c6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c5c8 :                       io_device2					; SD device, input = SD, output = 
c5c8 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c5ca : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c5cc : d6c0                  	dw	_fs_open_read_w		; io_open_r
c5ce : eec0                  	dw	_fs_open_write_w	; io_open_w
c5d0 : a6c0                  	dw	_fs_close_w			; io_close_f
c5d2 : 8ec0                  	dw	_fs_delete_w		; io_del_f
c5d4 : a6c5                  	dw	io_null_op			; io_ext1
c5d6 : a6c5                  	dw	io_null_op			; io_ext2
                             
c5d8 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5d8 :                       vdp_wr_reg
c5d8 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5db : ea               [ 2] 	nop
c5dc : ea               [ 2] 	nop
c5dd : 0980             [ 2] 	ora #0x80
c5df : 8d0105           [ 4] 	sta VDP_MODE1
c5e2 : 4980             [ 2] 	eor #0x80
c5e4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5e5 :                       vdp_wr_addr
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank1.s --------------------------------

c5e5 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5e8 : ea               [ 2] 	nop
c5e9 : ea               [ 2] 	nop
c5ea : 0940             [ 2] 	ora #0x40		; Required by VDP
c5ec : 8d0105           [ 4] 	sta VDP_MODE1
c5ef : 4940             [ 2] 	eor #0x40		; Undo that bit
c5f1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5f2 :                       vdp_mem_wait
c5f2 : da               [ 3] 	phx								; 3
c5f3 : a616             [ 3] 	ldx vdp_delay					; 3
c5f5 : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c5f7 :                       vdp_mem_wait_loop
c5f7 : ca               [ 2] 	dex								; 2
c5f8 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c5fa :                       vdp_mem_wait_end
c5fa : fa               [ 4] 	plx								; 3
c5fb : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5fc :                       vdp_rd_addr
c5fc : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c5ff : ea               [ 2] 	nop
c600 : ea               [ 2] 	nop
c601 : 8d0105           [ 4] 	sta VDP_MODE1
c604 : 80ec             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c606 :                       vdp_rd_vram
c606 : ad0005           [ 4] 	lda VDP_VRAM
c609 : 80e7             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank1.s --------------------------------

                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c60b :                       vdp_wr_vram
c60b : 8d0005           [ 4] 	sta VDP_VRAM
c60e : 80e2             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c610 :                       vdp_poke
c610 : 48               [ 3] 	pha
c611 : 98               [ 2] 	tya
c612 : 78               [ 2] 	sei
c613 : 20e5c5           [ 6] 	jsr vdp_wr_addr
c616 : 68               [ 4] 	pla
c617 : 200bc6           [ 6] 	jsr vdp_wr_vram
c61a : 58               [ 2] 	cli
c61b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c61c :                       vdp_peek
c61c : 78               [ 2] 	sei
c61d : 20fcc5           [ 6] 	jsr vdp_rd_addr
c620 : 2006c6           [ 6] 	jsr vdp_rd_vram
c623 : 58               [ 2] 	cli
c624 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank1.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c625 :                       snd_set
c625 : 48               [ 3] 	pha
                             
c626 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c628 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c62b : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c62e : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c631 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c633 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c635 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c638 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c63a : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c63d : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c640 : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c642 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c645 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c647 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c64a : 68               [ 4] 	pla
                             	
c64b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c64c :                       snd_get
c64c : 48               [ 3] 	pha
                             
c64d : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c64f : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c652 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c655 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c658 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c65a : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c65c : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c65f : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c661 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c664 : a900             [ 2] 	lda #0x00				; Set Port A to input
c666 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c669 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c66c : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c66e : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c670 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c673 : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank1.s --------------------------------

                             	
c676 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c678 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c67b : 68               [ 4] 	pla
                             	
c67c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c67d :                       snd_get_joy0
c67d : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c67f : 204cc6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c682 : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c683 :                       main
                             
c683 :                       infinity
c683 : 2046c0           [ 6] 	jsr _df_pg_dflat
c686 : 4c83c6           [ 3] 	jmp infinity
                             
c689 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c689 : 4275696c64203a..       db "Build : 12/08/2023\r" 
c69c : 3132384b204272..       db "128K Breadboard Computer\r" 
c6b5 : 42792040363530..       db "By @6502Nerd\r" 
c6c2 : 436f7079726967..       db "Copyright (c) 2022\r",0 
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank1.s --------------------------------

                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c6d6 :                       init_nmi
                             	; Core IRQ handler
c6d6 : a9e2             [ 2] 	lda #lo(nmi)
c6d8 : 8502             [ 3] 	sta int_nmi
c6da : a9c6             [ 2] 	lda #hi(nmi)
c6dc : 8503             [ 3] 	sta int_nmi+1
c6de : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c6df :                       call_nmi_master
c6df : 6c0200           [ 6] 	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* Only the 6551 uses this - fills the receive bu
c6e2 :                       nmi
c6e2 : 48               [ 3] 	pha
                             
c6e3 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c6e6 : 100c             [ 3] 	bpl	nmi_fin					; If no interrupt don't do anyth
                             
c6e8 : 5a               [ 3] 	phy
c6e9 : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c6ec : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c6ee : 990008           [ 5] 	sta ser_buf,y
c6f1 : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c6f3 : 7a               [ 4] 	ply
c6f4 :                       nmi_fin
                             
c6f4 : 68               [ 4] 	pla
c6f5 : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c6f6 :                       init_irq
                             	; Core IRQ handler
c6f6 : a930             [ 2] 	lda #lo(irq)
c6f8 : 8504             [ 3] 	sta int_irq
c6fa : a9c7             [ 2] 	lda #hi(irq)
c6fc : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c6fe : a95e             [ 2] 	lda #lo(irq_brk)
c700 : 8506             [ 3] 	sta int_brk
c702 : a9c7             [ 2] 	lda #hi(irq_brk)
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank1.s --------------------------------

c704 : 8507             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c706 : a92f             [ 2] 	lda #lo(null_handler)
c708 : 8508             [ 3] 	sta int_uservdp
c70a : a9c7             [ 2] 	lda #hi(null_handler)
c70c : 8509             [ 3] 	sta int_uservdp+1
                             
c70e : a92f             [ 2] 	lda #lo(null_handler)
c710 : 850a             [ 3] 	sta int_usercia0
c712 : a9c7             [ 2] 	lda #hi(null_handler)
c714 : 850b             [ 3] 	sta int_usercia0+1
                             
c716 : a92f             [ 2] 	lda #lo(null_handler)
c718 : 850c             [ 3] 	sta int_usercia1
c71a : a9c7             [ 2] 	lda #hi(null_handler)
c71c : 850d             [ 3] 	sta int_usercia1+1
                             
c71e : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c71f :                       call_irq_master
c71f : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c722 :                       call_irq_brk
c722 : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c725 :                       call_irq_uservdp
c725 : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c728 :                       call_irq_usercia0
c728 : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c72b :                       call_irq_usercia1
c72b : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c72e :                       null_irq
c72e : 40               [ 6] 	rti
                             
                             ;* null handler
c72f :                       null_handler
c72f : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c730 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c733 : ba               [ 2] 	tsx
c734 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c737 : 2910             [ 2] 	and #0x10
c739 : d0e7             [ 3] 	bne call_irq_brk
                             	
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank1.s --------------------------------

c73b : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c73c : ad8d04           [ 4] 	lda IO_1 + IFR
c73f : 1003             [ 3] 	bpl irq_check_vdp
c741 : 202bc7           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c744 :                       irq_check_vdp	
c744 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c747 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c749 : 2025c7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c74c : 20abc7           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c74f : 2089c7           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c752 :                       irq_check_cia0
c752 : ad0d04           [ 4] 	lda IO_0 + IFR
c755 : 1003             [ 3] 	bpl irq_fin
c757 : 2028c7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c75a :                       irq_fin
                             	_pullAXY
                             
c75d : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c75e :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c75e : 38               [ 2] 	sec
c75f : bd0501           [ 4] 	lda 0x0105,x
c762 : e902             [ 2] 	sbc #2
c764 : 85a4             [ 3] 	sta df_brkpc
c766 : bd0601           [ 4] 	lda 0x0106,x
c769 : e900             [ 2] 	sbc #0
c76b : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c76d : a001             [ 2] 	ldy #1
c76f : b1a4             [ 5] 	lda (df_brkpc),y
c771 : 85a6             [ 3] 	sta df_brkval
c773 : 859f             [ 3] 	sta errno
                             	; now update the return address
c775 : a5a2             [ 3] 	lda df_pc
c777 : 9d0501           [ 5] 	sta 0x105,x
c77a : a5a3             [ 3] 	lda df_pc+1
c77c : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c782 : 8585             [ 3] 	sta num_a
c784 : 8686             [ 3] 	stx num_a+1
c786 : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c788 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank1.s --------------------------------

                             ;* Keyboard interrupt handler
                             ;****************************************
c789 :                       int_kb_handler	
c789 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c78b : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c78d : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c790 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c792 : f00c             [ 3] 	beq int_keys_up
c794 :                       int_do_read
c794 : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c796 : a53b             [ 3] 	lda kb_debounce			; Set debounce
c798 : 8537             [ 3] 	sta kb_deb
c79a :                       int_skip_scan
c79a : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c79c : 8d0d04           [ 4] 	sta IO_0 + IFR
c79f : 60               [ 6] 	rts
c7a0 :                       int_keys_up					; No key pressed
c7a0 : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c7a2 : 6434             [ 3] 	stz kb_last
c7a4 : 6435             [ 3] 	stz kb_code
c7a6 : 6437             [ 3] 	stz kb_deb
c7a8 : 6438             [ 3] 	stz kb_rep
c7aa : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c7ab :                       int_vdp_handler
c7ab : 20d7c7           [ 6] 	jsr update_timers	; If it is then update system 
                             
c7ae : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c7b0 : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c7b2 : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c7b4 : a513             [ 3] 	lda vdp_curstat		; Check it
c7b6 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c7b8 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c7ba : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c7bc : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c7be : 8513             [ 3] 	sta vdp_curstat		
                             
c7c0 : 18               [ 2] 	clc					; Add offset for cursor address in vram
c7c1 : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c7c3 : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c7c5 : aa               [ 2] 	tax
c7c6 : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c7c8 : 6900             [ 2] 	adc #0
                             
c7ca : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	
c7cd : a513             [ 3] 	lda vdp_curstat
c7cf : 2980             [ 2] 	and #0x80
c7d1 : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c7d3 : 200bc6           [ 6] 	jsr vdp_wr_vram
c7d6 :                       int_vdp_fin	
c7d6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
c7d7 :                       update_timers
c7d7 : e610             [ 5] 	inc vdp_int_cnt
c7d9 : d002             [ 3] 	bne inc_kb_timers
c7db : e611             [ 5] 	inc vdp_int_cnt+1
c7dd :                       inc_kb_timers
c7dd : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c7df : f002             [ 3] 	beq skip_kb_deb
c7e1 : c637             [ 5] 	dec kb_deb
c7e3 :                       skip_kb_deb
c7e3 : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c7e5 : f002             [ 3] 	beq skip_kb_rep
c7e7 : c638             [ 5] 	dec kb_rep
c7e9 :                       skip_kb_rep
c7e9 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c7ea :                       long_delay
c7ea : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c7ee : a000             [ 2] 	ldy #0x00
c7f0 :                       long_delay_1
c7f0 : ea               [ 2] 	nop
c7f1 : ea               [ 2] 	nop
c7f2 : ea               [ 2] 	nop
c7f3 : ea               [ 2] 	nop
c7f4 : 88               [ 2] 	dey
c7f5 : d0f9             [ 3] 	bne long_delay_1
c7f7 : ca               [ 2] 	dex
c7f8 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c7fd : 28               [ 4] 	plp
                             	
c7fe : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c7ff :                       utilPrintSPC
c7ff : 48               [ 3] 	pha
c800 : a920             [ 2] 	lda #' '
c802 : 2048c5           [ 6] 	jsr io_put_ch
c805 : 68               [ 4] 	pla
c806 : 60               [ 6] 	rts
                             
c807 :                       utilPrintCRLF
c807 : 48               [ 3] 	pha
c808 : a90d             [ 2] 	lda #UTF_CR
c80a : 2048c5           [ 6] 	jsr io_put_ch
c80d : 68               [ 4] 	pla
c80e : 60               [ 6] 	rts
                             
c80f :                       utilPrintA
c80f : 8545             [ 3] 	sta tmp_d
c811 : 48               [ 3] 	pha
c812 : 8a               [ 2] 	txa
c813 : 48               [ 3] 	pha
c814 : a545             [ 3] 	lda tmp_d
c816 : 2034c8           [ 6] 	jsr str_a_to_x
c819 : 2048c5           [ 6] 	jsr io_put_ch
c81c : 8a               [ 2] 	txa
c81d : 2048c5           [ 6] 	jsr io_put_ch
c820 : 68               [ 4] 	pla
c821 : aa               [ 2] 	tax
c822 : 68               [ 4] 	pla
c823 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c824 :                       util_clr_mem
c824 : 48               [ 3] 	pha
c825 : 5a               [ 3] 	phy
c826 : 863f             [ 3] 	stx tmp_v1
c828 : 8540             [ 3] 	sta tmp_v1+1
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank1.s --------------------------------

c82a : a900             [ 2] 	lda #0
c82c :                       mem_clr_byte
c82c : 88               [ 2] 	dey
c82d : 913f             [ 5] 	sta (tmp_v1),y
c82f : d0fb             [ 3] 	bne mem_clr_byte
c831 : 7a               [ 4] 	ply
c832 : 68               [ 4] 	pla
c833 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c834 :                       str_a_to_x
c834 : 48               [ 3] 	pha					; Save the byte using later on
c835 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c837 : 18               [ 2] 	clc
c838 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c83a : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c83c : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c83e : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c840 :                       skip_a_f_1
c840 : aa               [ 2] 	tax					; Low char is in X
c841 : 68               [ 4] 	pla					; Get byte back
c842 : 4a               [ 2] 	lsr a				; Make high nibble low
c843 : 4a               [ 2] 	lsr a
c844 : 4a               [ 2] 	lsr a
c845 : 4a               [ 2] 	lsr a
c846 : 18               [ 2] 	clc
c847 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c849 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c84b : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c84d : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c84f :                       skip_a_f_2
                             
c84f : 18               [ 2] 	clc					; No error
c850 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c851 :                       str_x_to_a
c851 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c853 : 38               [ 2] 	sec					; Process high char in A
c854 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c856 : c90a             [ 2] 	cmp #10				; If A < 10 then
c858 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c85a : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c85c :                       skip_x_f_1
c85c : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c85e : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c860 : 0a               [ 2] 	asl a				; This is the high nibble
c861 : 0a               [ 2] 	asl a
c862 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank1.s --------------------------------

c863 : 0a               [ 2] 	asl a
c864 : 48               [ 3] 	pha					; Save the high nibble
c865 : 8a               [ 2] 	txa					; Now process the low char in X
c866 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c868 : 38               [ 2] 	sec
c869 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c86b : c90a             [ 2] 	cmp #10				; If A < 10 then
c86d : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c86f : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c871 :                       skip_x_f_2
c871 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c873 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c875 : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c877 : 68               [ 4] 	pla					; Get high nibble
c878 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c87a : 18               [ 2] 	clc					; No error
c87b : 60               [ 6] 	rts					; A contains value
                             
c87c :                       str_x_to_a_errl
c87c : 68               [ 4] 	pla
c87d :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c87f :                       con_n_to_a
c87f : 8691             [ 3] 	stx num_tmp
c881 : 8592             [ 3] 	sta num_tmp+1
c883 : 6485             [ 3] 	stz num_a
c885 : 6486             [ 3] 	stz num_a+1
c887 : c000             [ 2] 	cpy #NUM_ANY
c889 : f014             [ 3] 	beq con_n_to_a_detect
c88b : 88               [ 2] 	dey
c88c : d003             [ 3] 	bne con_n_not_dec
c88e :                       con_dec_jmp
c88e : 4c22c9           [ 3] 	jmp con_dec_to_a_int
c891 :                       con_n_not_dec
c891 : 88               [ 2] 	dey
c892 : d003             [ 3] 	bne con_n_not_hex
c894 :                       con_hex_jmp
c894 : 4cb9c8           [ 3] 	jmp con_hex_to_a_int
c897 :                       con_n_not_hex
c897 : 88               [ 2] 	dey
c898 : d003             [ 3] 	bne con_n_err
c89a :                       con_bin_jmp
c89a : 4cf8c8           [ 3] 	jmp con_bin_to_a_int
c89d :                       con_n_err
c89d : 38               [ 2] 	sec
c89e : 60               [ 6] 	rts
c89f :                       con_n_to_a_detect
c89f : b291             [ 5] 	lda (num_tmp)
c8a1 : c930             [ 2] 	cmp #'0'
c8a3 : d0e9             [ 3] 	bne con_dec_jmp
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank1.s --------------------------------

c8a5 : a001             [ 2] 	ldy #1
c8a7 : b191             [ 5] 	lda (num_tmp),y
c8a9 : 0920             [ 2] 	ora #0x20
c8ab : c978             [ 2] 	cmp #'x'
c8ad : f0e5             [ 3] 	beq con_hex_jmp
c8af : c962             [ 2] 	cmp #'b'
c8b1 : f0e7             [ 3] 	beq con_bin_jmp
c8b3 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8b5 :                       con_hex_to_a
c8b5 : 8691             [ 3] 	stx num_tmp
c8b7 : 8592             [ 3] 	sta num_tmp+1
c8b9 :                       con_hex_to_a_int
c8b9 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c8bb : a002             [ 2] 	ldy #2			; start at first digit
c8bd :                       con_hex_digit
c8bd : b191             [ 5] 	lda (num_tmp),y
c8bf : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c8c1 : 38               [ 2] 	sec							; Process high char in A
c8c2 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c8c4 : c90a             [ 2] 	cmp #10						; If A < 10 then
c8c6 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c8c8 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c8ca :                       con_hex_skip_x_f_1
c8ca : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c8cc : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c8ce : 48               [ 3] 	pha
                             	; make room for lo nibble
c8cf : 0685             [ 5] 	asl num_a
c8d1 : 2686             [ 5] 	rol num_a+1
c8d3 : 0685             [ 5] 	asl num_a
c8d5 : 2686             [ 5] 	rol num_a+1
c8d7 : 0685             [ 5] 	asl num_a
c8d9 : 2686             [ 5] 	rol num_a+1
c8db : 0685             [ 5] 	asl num_a
c8dd : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c8df : 68               [ 4] 	pla
c8e0 : 0585             [ 3] 	ora num_a
c8e2 : 8585             [ 3] 	sta num_a
c8e4 : c8               [ 2] 	iny
c8e5 : ca               [ 2] 	dex
c8e6 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c8e8 :                       con_hex_err
c8e8 : 38               [ 2] 	sec
c8e9 : 60               [ 6] 	rts
                             	; found a non-hex digit
c8ea :                       con_hex_done
                             	; if no digits processed then error
c8ea : c002             [ 2] 	cpy #2
c8ec : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c8ee : 98               [ 2] 	tya
c8ef : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank1.s --------------------------------

c8f0 : a902             [ 2] 	lda #NUM_HEX
c8f2 : 18               [ 2] 	clc
c8f3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8f4 :                       con_bin_to_a
c8f4 : 8691             [ 3] 	stx num_tmp
c8f6 : 8592             [ 3] 	sta num_tmp+1
c8f8 :                       con_bin_to_a_int
c8f8 : a002             [ 2] 	ldy #2
c8fa : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c8fc :                       con_bin_digit
c8fc : b191             [ 5] 	lda (num_tmp),y
c8fe : c930             [ 2] 	cmp #'0'
c900 : 9010             [ 3] 	bcc con_bin_done
c902 : c932             [ 2] 	cmp #'1'+1
c904 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c906 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c908 : 2685             [ 5] 	rol num_a
c90a : 2686             [ 5] 	rol num_a+1
c90c : c8               [ 2] 	iny
c90d : ca               [ 2] 	dex
c90e : d0ec             [ 4] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c910 : 800a             [ 3] 	bra con_bin_err
c912 :                       con_bin_done
                             	; didn't process any digit = error
c912 : c002             [ 2] 	cpy #2
c914 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c916 : 98               [ 2] 	tya
c917 : aa               [ 2] 	tax
c918 : a903             [ 2] 	lda #NUM_BIN
c91a : 18               [ 2] 	clc
c91b : 60               [ 6] 	rts
c91c :                       con_bin_err
c91c : 38               [ 2] 	sec
c91d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c91e :                       con_dec_to_a
c91e : 8691             [ 3] 	stx num_tmp
c920 : 8592             [ 3] 	sta num_tmp+1
c922 :                       con_dec_to_a_int
c922 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c924 : b291             [ 5] 	lda (num_tmp)
c926 : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank1.s --------------------------------

c928 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c92a : c8               [ 2] 	iny
c92b :                       str_d_find_end
c92b : b191             [ 5] 	lda (num_tmp),y
c92d : c930             [ 2] 	cmp #'0'
c92f : 9007             [ 3] 	bcc str_d_found_end
c931 : c93a             [ 2] 	cmp #'9'+1
c933 : b003             [ 3] 	bcs str_d_found_end
c935 : c8               [ 2] 	iny
c936 : 80f3             [ 3] 	bra str_d_find_end
c938 :                       str_d_found_end
c938 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c93a : b052             [ 3] 	bcs str_d_error		; e.g. -32767 including minus
c93c : 8494             [ 3] 	sty num_tmp+3
c93e : 6493             [ 3] 	stz num_tmp+2
c940 : 6485             [ 3] 	stz num_a
c942 : 6486             [ 3] 	stz num_a+1
c944 :                       str_d_process_digit
c944 : 88               [ 2] 	dey
c945 : 3026             [ 3] 	bmi str_d_digits_done
                             
c947 : b191             [ 5] 	lda (num_tmp),y
                             
c949 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c94b : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c94d : 38               [ 2] 	sec
c94e : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c950 : 18               [ 2] 	clc
c951 : 0a               [ 2] 	asl a
c952 : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c954 : aa               [ 2] 	tax
c955 : a585             [ 3] 	lda num_a
c957 : 7d90c9           [ 4] 	adc str_d_powers,x
c95a : 8585             [ 3] 	sta num_a
c95c : a586             [ 3] 	lda num_a+1
c95e : 7d91c9           [ 4] 	adc str_d_powers+1,x
c961 : 8586             [ 3] 	sta num_a+1
c963 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c965 : a593             [ 3] 	lda num_tmp+2
c967 : 6914             [ 2] 	adc #20
c969 : 8593             [ 3] 	sta num_tmp+2
c96b : 80d7             [ 3] 	bra str_d_process_digit
c96d :                       str_d_digits_done
                             	; check if minus
c96d : b291             [ 5] 	lda (num_tmp)
c96f : c92d             [ 2] 	cmp #'-'
c971 : d011             [ 3] 	bne str_d_skip_neg
c973 : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c975 : e002             [ 2] 	cpx #2				; else it's an error
c977 : 9015             [ 3] 	bcc str_d_error
c979 : a685             [ 3] 	ldx num_a
c97b : a586             [ 3] 	lda num_a+1
c97d : 20f4c9           [ 6] 	jsr twos_complement
c980 : 8685             [ 3] 	stx num_a
c982 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank1.s --------------------------------

c984 :                       str_d_skip_neg
c984 : a694             [ 3] 	ldx num_tmp+3
c986 : e001             [ 2] 	cpx #1				; must be at least 1 char
c988 : 9004             [ 3] 	bcc str_d_error
c98a : a901             [ 2] 	lda #NUM_DEC
c98c : 18               [ 2] 	clc
c98d : 60               [ 6] 	rts
c98e :                       str_d_error
c98e : 38               [ 2] 	sec
c98f : 60               [ 6] 	rts
                             
c990 :                       str_d_powers
c990 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c9a4 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c9b8 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c9cc : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c9e0 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c9f4 :                       twos_complement
c9f4 : 49ff             [ 2] 	eor #0xff
c9f6 : 48               [ 3] 	pha
c9f7 : 8a               [ 2] 	txa
c9f8 : 49ff             [ 2] 	eor #0xff
c9fa : aa               [ 2] 	tax
c9fb : 68               [ 4] 	pla
c9fc : e8               [ 2] 	inx
c9fd : d001             [ 4] 	bne twos_complement_skip_X
c9ff : 1a               [ 2] 	inc a
ca00 :                       twos_complement_skip_X
ca00 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
ca01 :                       int_to_bcd
ca01 : 08               [ 3] 	php
ca02 : 48               [ 3] 	pha
ca03 : da               [ 3] 	phx
                             
ca04 : 8691             [ 3] 	stx num_tmp
ca06 : 8592             [ 3] 	sta num_tmp+1
ca08 : c980             [ 2] 	cmp #0x80			; Negative?
ca0a : 9003             [ 3] 	bcc int_to_bcd_skip_neg
ca0c : 20f4c9           [ 6] 	jsr twos_complement
ca0f :                       int_to_bcd_skip_neg
ca0f : 6485             [ 3] 	stz num_a
ca11 : 6486             [ 3] 	stz num_a+1
ca13 : 6487             [ 3] 	stz num_a+2
ca15 : 6488             [ 3] 	stz num_a+3
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank1.s --------------------------------

ca17 : a210             [ 2] 	ldx #16
ca19 : f8               [ 2] 	sed
ca1a :                       int_to_bcd_bit
ca1a : 0691             [ 5] 	asl num_tmp
ca1c : 2692             [ 5] 	rol num_tmp+1
ca1e : a585             [ 3] 	lda num_a
ca20 : 6585             [ 3] 	adc num_a
ca22 : 8585             [ 3] 	sta num_a
ca24 : a586             [ 3] 	lda num_a+1
ca26 : 6586             [ 3] 	adc num_a+1
ca28 : 8586             [ 3] 	sta num_a+1
ca2a : a587             [ 3] 	lda num_a+2
ca2c : 6587             [ 3] 	adc num_a+2
ca2e : 8587             [ 3] 	sta num_a+2
ca30 : ca               [ 2] 	dex
ca31 : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
ca33 : fa               [ 4] 	plx
ca34 : 68               [ 4] 	pla
ca35 : 28               [ 4] 	plp
ca36 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
ca37 :                       word_to_bcd
ca37 : 08               [ 3] 	php
ca38 : 48               [ 3] 	pha
ca39 : da               [ 3] 	phx
                             
ca3a : 8691             [ 3] 	stx num_tmp
ca3c : 8592             [ 3] 	sta num_tmp+1
ca3e : 6485             [ 3] 	stz num_a
ca40 : 6486             [ 3] 	stz num_a+1
ca42 : 6487             [ 3] 	stz num_a+2
ca44 : 6488             [ 3] 	stz num_a+3
ca46 : a210             [ 2] 	ldx #16			; 16 binary bits
ca48 : f8               [ 2] 	sed
ca49 :                       word_to_bcd_bit
ca49 : 0691             [ 5] 	asl num_tmp
ca4b : 2692             [ 5] 	rol num_tmp+1
ca4d : a585             [ 3] 	lda num_a
ca4f : 6585             [ 3] 	adc num_a
ca51 : 8585             [ 3] 	sta num_a
ca53 : a586             [ 3] 	lda num_a+1
ca55 : 6586             [ 3] 	adc num_a+1
ca57 : 8586             [ 3] 	sta num_a+1
ca59 : a587             [ 3] 	lda num_a+2
ca5b : 6587             [ 3] 	adc num_a+2
ca5d : 8587             [ 3] 	sta num_a+2
ca5f : ca               [ 2] 	dex
ca60 : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
ca62 : fa               [ 4] 	plx
ca63 : 68               [ 4] 	pla
ca64 : 28               [ 4] 	plp
ca65 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
ca66 :                       int_to_str_ch
ca66 : 290f             [ 2] 	and #0xf
ca68 : 0930             [ 2] 	ora #0x30					; Convert to ascii
ca6a : 4930             [ 2] 	eor #0x30					; Check if zero digit
ca6c : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
ca6e : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
ca70 : 4930             [ 2] 	eor #0x30					; Restore A
ca72 : 60               [ 6] 	rts							; Return without storing anything
ca73 :                       int_to_str_nz
ca73 : 4930             [ 2] 	eor #0x30					; Restore A
ca75 : 999500           [ 5] 	sta num_buf,y
ca78 : c8               [ 2] 	iny
ca79 : 38               [ 2] 	sec							; Set C as a non-zero encountered
ca7a :                       int_to_str_ch_fin
ca7a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
ca7b :                       int_to_str
                             	_pushAXY
                             
ca7e : a000             [ 2] 	ldy #0						; first pos of num_buf
ca80 : 0900             [ 2] 	ora #0						; Test A for sign bit
ca82 : 08               [ 3] 	php							; Remember C bit of P
ca83 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
ca85 : 20f4c9           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
ca88 : 48               [ 3] 	pha							; Remember A
ca89 : a92d             [ 2] 	lda #'-'					; Put in negative sign
ca8b : 8595             [ 3] 	sta num_buf
ca8d : c8               [ 2] 	iny							; Start at second buffer pos
ca8e : 68               [ 4] 	pla							; Restore A
ca8f :                       int_to_str_skip_neg
ca8f : 2037ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
ca92 : a202             [ 2] 	ldx #2						; Start at BCD high byte
ca94 :                       int_str
ca94 : 28               [ 4] 	plp							; Get C but immediately
ca95 : 08               [ 3] 	php							; Save C (due to loop check later)
ca96 : b585             [ 4] 	lda num_a,x					; Get BCD digit
ca98 : 859c             [ 3] 	sta num_buf+7				; Save A it for the units later
ca9a : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
ca9b : 4a               [ 2] 	lsr a
ca9c : 4a               [ 2] 	lsr a
ca9d : 4a               [ 2] 	lsr a
ca9e : 28               [ 4] 	plp							; Get C
ca9f : 2066ca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
caa2 : a59c             [ 3] 	lda num_buf+7				; Get A for the units
caa4 : 2066ca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
caa7 : 08               [ 3] 	php							; Save C
caa8 : ca               [ 2] 	dex
caa9 : 10e9             [ 3] 	bpl int_str
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank1.s --------------------------------

caab : 28               [ 4] 	plp							; Check C
caac : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
caae : a930             [ 2] 	lda #'0'					; Stuff a zero
cab0 : 8595             [ 3] 	sta num_buf					; Must be in first position..
cab2 : c8               [ 2] 	iny
cab3 :                       int_to_str_fin
cab3 : a900             [ 2] 	lda #0						; Terminator
cab5 : 999500           [ 5] 	sta num_buf,y
cab8 : c8               [ 2] 	iny
                             	_pullAXY
                             
cabc : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank1.s --------------------------------

                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cabd :                       str_a_to_d
cabd : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
cabe :                       print_a_to_d
cabe : 207bca           [ 6] 	jsr int_to_str
cac1 : a000             [ 2] 	ldy #0
cac3 :                       print_a_to_d_ch
cac3 : b99500           [ 4] 	lda num_buf,y
cac6 : f006             [ 3] 	beq print_a_to_d_fin
cac8 : 2048c5           [ 6] 	jsr io_put_ch
cacb : c8               [ 2] 	iny
cacc : d0f5             [ 3] 	bne print_a_to_d_ch
cace :                       print_a_to_d_fin
cace : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cacf :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
cacf : 4c2acb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cad2 :                       init_2					; init_ram will jump back to here
cad2 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cad4 : 9a               [ 2] 	txs
                             ;	cld					; No need as disabled on startup
                             	
cad5 : 20dbca           [ 6] 	jsr kernel_init
                             
cad8 : 4c83c6           [ 3] 	jmp main
                             
cadb :                       kernel_init
cadb : 20d6c6           [ 6] 	jsr init_nmi		; Initialise NMI handling
cade : 20f6c6           [ 6] 	jsr init_irq		; Initialise IRQ handling
cae1 : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cae4 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cae7 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
caea :                       kernel_test
caea : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
caed : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
caf0 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
caf3 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
caf5 : 48               [ 3] 	pha
caf6 : a20e             [ 2] 	ldx #0xe			; NV location for default text mode [
caf8 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cafb : b00b             [ 4] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cafd : aa               [ 2] 	tax					; Save the mode temporarily
cafe : 68               [ 4] 	pla					; Get the default mode from stack
caff : 8a               [ 2] 	txa					; And push the NV mode that was read
cb00 : 48               [ 3] 	pha
cb01 : a20f             [ 2] 	ldx #0xf			; NV location for the default colour
cb03 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cb06 : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cb08 :                       kernel_skip_nv	
cb08 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cb09 : 20c6c1           [ 6] 	jsr _gr_init_screen
cb0c : 200ec5           [ 6] 	jsr io_init			; Set default input/output device
cb0f : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank1.s --------------------------------

                             
                             
cb1d : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cb20 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cb23 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cb26 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cb29 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cb2a :                       init_ram
cb2a : 6400             [ 3] 	stz 0x00			; Start at page 0
cb2c : 6401             [ 3] 	stz 0x01
cb2e : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cb30 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cb32 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cb34 :                       init_ram_1
cb34 : e004             [ 2] 	cpx	#4				; Page <4 is ok
cb36 : 9006             [ 3] 	bcc init_ram_fill
cb38 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cb3a : b002             [ 3] 	bcs init_ram_fill
cb3c : 8002             [ 3] 	bra init_ram_skip
cb3e :                       init_ram_fill
cb3e : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cb40 :                       init_ram_skip
cb40 : c8               [ 2] 	iny
cb41 : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cb43 : e8               [ 2] 	inx					; Increment page counter
cb44 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cb46 : d0ec             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cb48 : 4cd2ca           [ 3] 	jmp init_2			; Carry on initialisation
                             
cb4b :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "utils\intmath.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
cb4b :                       int_add
cb4b : 18               [ 2] 	clc
cb4c : a585             [ 3] 	lda num_a
cb4e : 6589             [ 3] 	adc num_b
cb50 : 8585             [ 3] 	sta num_a
cb52 : a586             [ 3] 	lda num_a+1
cb54 : 658a             [ 3] 	adc num_b+1
cb56 : 8586             [ 3] 	sta num_a+1
cb58 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
cb59 :                       int_sub
cb59 : 38               [ 2] 	sec
cb5a : a585             [ 3] 	lda num_a
cb5c : e589             [ 3] 	sbc num_b
cb5e : 8585             [ 3] 	sta num_a
cb60 : a586             [ 3] 	lda num_a+1
cb62 : 658a             [ 3] 	adc num_b+1
cb64 : 8586             [ 3] 	sta num_a+1
cb66 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
cb67 :                       int_swp
cb67 : a585             [ 3] 	lda num_a
cb69 : a689             [ 3] 	ldx num_b
cb6b : 8589             [ 3] 	sta num_b
cb6d : 8685             [ 3] 	stx num_a
cb6f : a586             [ 3] 	lda num_a+1
cb71 : a68a             [ 3] 	ldx num_b+1
cb73 : 858a             [ 3] 	sta num_b+1
cb75 : 8686             [ 3] 	stx num_a+1
cb77 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
cb78 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
cb80 : 6485             [ 3] 	stz num_a
cb82 : 6486             [ 3] 	stz num_a+1
cb84 : a008             [ 2] 	ldy #8
cb86 :                       int_fast_mult_cycle
cb86 : 4689             [ 5] 	lsr num_b
cb88 : 900d             [ 3] 	bcc int_fast_mult_next
cb8a : 18               [ 2] 	clc
cb8b : a585             [ 3] 	lda num_a
cb8d : 6591             [ 3] 	adc num_tmp
cb8f : 8585             [ 3] 	sta num_a
cb91 : a586             [ 3] 	lda num_a+1
cb93 : 6592             [ 3] 	adc num_tmp+1
cb95 : 8586             [ 3] 	sta num_a+1
cb97 :                       int_fast_mult_next
cb97 : 0691             [ 5] 	asl num_tmp
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank1.s --------------------------------

cb99 : 2692             [ 5] 	rol num_tmp+1
cb9b : 88               [ 2] 	dey
cb9c : d0e8             [ 3] 	bne int_fast_mult_cycle
cb9e : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
cb9f :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
cba7 : 6485             [ 3] 	stz num_a
cba9 : 6486             [ 3] 	stz num_a+1
cbab : a010             [ 2] 	ldy #16
cbad :                       int_mult_cycle
cbad : 468a             [ 5] 	lsr num_b+1
cbaf : 6689             [ 5] 	ror num_b
cbb1 : 900d             [ 3] 	bcc int_mult_next
cbb3 : 18               [ 2] 	clc
cbb4 : a585             [ 3] 	lda num_a
cbb6 : 6591             [ 3] 	adc num_tmp
cbb8 : 8585             [ 3] 	sta num_a
cbba : a586             [ 3] 	lda num_a+1
cbbc : 6592             [ 3] 	adc num_tmp+1
cbbe : 8586             [ 3] 	sta num_a+1
cbc0 :                       int_mult_next
cbc0 : 0691             [ 5] 	asl num_tmp
cbc2 : 2692             [ 5] 	rol num_tmp+1
cbc4 : 88               [ 2] 	dey
cbc5 : d0e6             [ 3] 	bne int_mult_cycle
cbc7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
cbc8 :                       int_div
                             	; adjust signs
cbc8 : 6491             [ 3] 	stz num_tmp				; Assume all +ve
cbca : a586             [ 3] 	lda num_a+1				; Check A hi
cbcc : 100f             [ 3] 	bpl int_div_skip_negA
cbce : e691             [ 5] 	inc num_tmp				; Record sign flip
cbd0 : 38               [ 2] 	sec						; 2's complement A
cbd1 : a900             [ 2] 	lda #0					; by 0-A
cbd3 : e585             [ 3] 	sbc num_a				; A is now +ve
cbd5 : 8585             [ 3] 	sta num_a
cbd7 : a900             [ 2] 	lda #0
cbd9 : e586             [ 3] 	sbc num_a+1
cbdb : 8586             [ 3] 	sta num_a+1	
cbdd :                       int_div_skip_negA
cbdd : a58a             [ 3] 	lda num_b+1				; Check B hi
cbdf : 100f             [ 3] 	bpl int_div_skip_negB
cbe1 : e691             [ 5] 	inc num_tmp				; Record sign flip
cbe3 : 38               [ 2] 	sec						; 2's complement B
cbe4 : a900             [ 2] 	lda #0					; by 0-B
cbe6 : e589             [ 3] 	sbc num_b				; B is now +ve
cbe8 : 8589             [ 3] 	sta num_b
cbea : a900             [ 2] 	lda #0
cbec : e58a             [ 3] 	sbc num_b+1
cbee : 858a             [ 3] 	sta num_b+1
cbf0 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
cbf0 : 648d             [ 3] 	stz num_x
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank1.s --------------------------------

cbf2 : 648e             [ 3] 	stz num_x+1
                             	; 16 bit division
cbf4 : a010             [ 2] 	ldy #16
cbf6 :                       int_div_cycle
                             	; shift a left 1 bit
cbf6 : 0685             [ 5] 	asl num_a
cbf8 : 2686             [ 5] 	rol num_a+1
                             	; shift in to remainder
cbfa : 268d             [ 5] 	rol num_x
cbfc : 268e             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
cbfe : 38               [ 2] 	sec
cbff : a58d             [ 3] 	lda num_x
cc01 : e589             [ 3] 	sbc num_b
cc03 : aa               [ 2] 	tax
cc04 : a58e             [ 3] 	lda num_x+1
cc06 : e58a             [ 3] 	sbc num_b+1
cc08 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
cc0a : 868d             [ 3] 	stx num_x
cc0c : 858e             [ 3] 	sta num_x+1
cc0e : e685             [ 5] 	inc num_a
cc10 :                       int_div_skip
                             	; carry on for 16 bits
cc10 : 88               [ 2] 	dey
cc11 : d0e3             [ 4] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
cc13 : a591             [ 3] 	lda num_tmp
cc15 : 2901             [ 2] 	and #1
cc17 : f00d             [ 3] 	beq int_div_noflip
cc19 : 38               [ 2] 	sec						; 2's complement A
cc1a : a900             [ 2] 	lda #0					; by 0-A
cc1c : e585             [ 3] 	sbc num_a				; A is now +ve
cc1e : 8585             [ 3] 	sta num_a
cc20 : a900             [ 2] 	lda #0
cc22 : e586             [ 3] 	sbc num_a+1
cc24 : 8586             [ 3] 	sta num_a+1	
cc26 :                       int_div_noflip
cc26 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat\dflat.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank1.s --------------------------------

                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cc27 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
cc27 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
cc27 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank1.s --------------------------------

                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
cc37 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
cc37 : a5e3             [ 3] 	lda df_tmpptra
cc39 : c5af             [ 3] 	cmp df_vvtstrt
cc3b : d006             [ 3] 	bne df_var_match_vnt_do
cc3d : a5e4             [ 3] 	lda df_tmpptra+1
cc3f : c5b0             [ 3] 	cmp df_vvtstrt+1
cc41 : f042             [ 3] 	beq df_var_find_no_vnt
cc43 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
cc43 : a4be             [ 3] 	ldy df_linoff
cc45 : a200             [ 2] 	ldx #0
cc47 :                       df_var_match_vnt_sym
cc47 : b9000a           [ 4] 	lda df_linbuff,y
cc4a : c1e5             [ 6] 	cmp (df_tmpptrb,x)
cc4c : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
cc4e : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
cc55 : a1e5             [ 6] 	lda (df_tmpptrb,x)
cc57 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
cc59 : b9000a           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
cc5c : 2008ce           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
cc5f : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
cc61 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
cc61 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
cc63 : d025             [ 3] 	bne df_var_find_true
cc65 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
cc65 : a1e5             [ 6] 	lda (df_tmpptrb,x)
cc67 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
cc6f : 4c65cc           [ 3] 	jmp df_var_vnt_sym_nomatch
cc72 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
cc78 : 18               [ 2] 	clc
cc79 : a5e3             [ 3] 	lda df_tmpptra
cc7b : 6908             [ 2] 	adc #8
cc7d : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank1.s --------------------------------

                             
cc81 : e6e4             [ 5] 	inc df_tmpptra+1
cc83 : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
cc85 :                       df_var_find_no_vnt
cc85 : a900             [ 2] 	lda #0
cc87 : aa               [ 2] 	tax
cc88 : 38               [ 2] 	sec
cc89 : 60               [ 6] 	rts
                             
cc8a :                       df_var_find_true
                             	; Get slot address into x,a
cc8a : a6e3             [ 3] 	ldx df_tmpptra
cc8c : a5e4             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
cc8e : 84be             [ 3] 	sty df_linoff
cc90 : 18               [ 2] 	clc
cc91 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
cc92 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
cc92 : 38               [ 2] 	sec
cc93 : a5ab             [ 3] 	lda df_vntstrt
cc95 : e908             [ 2] 	sbc #DFVVT_SZ
cc97 : 85ab             [ 3] 	sta df_vntstrt
cc99 : a5ac             [ 3] 	lda df_vntstrt+1
cc9b : e900             [ 2] 	sbc #0
cc9d : 85ac             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
cc9f : 38               [ 2] 	sec
cca0 : a5ad             [ 3] 	lda df_vntend
cca2 : e908             [ 2] 	sbc #DFVVT_SZ
cca4 : 85ad             [ 3] 	sta df_vntend
cca6 : a5ae             [ 3] 	lda df_vntend+1
cca8 : e900             [ 2] 	sbc #0
ccaa : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
ccb4 :                       df_var_move_byte
                             	; When pointer = vntend then done
ccb4 : a5e3             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank1.s --------------------------------

ccb6 : c5ad             [ 3] 	cmp df_vntend
ccb8 : d006             [ 3] 	bne df_var_move_byte_do
ccba : a5e4             [ 3] 	lda df_tmpptra+1
ccbc : c5ae             [ 3] 	cmp df_vntend+1
ccbe : f011             [ 3] 	beq df_var_move_byte_fin
ccc0 :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
ccc0 : a008             [ 2] 	ldy #DFVVT_SZ
ccc2 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
ccc4 : a000             [ 2] 	ldy #0
ccc6 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
ccce : 4cb4cc           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
ccd1 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
ccd1 : 8645             [ 3] 	stx tmp_d
ccd3 : 38               [ 2] 	sec
ccd4 : a5ab             [ 3] 	lda df_vntstrt
ccd6 : e545             [ 3] 	sbc tmp_d
ccd8 : 85ab             [ 3] 	sta df_vntstrt
ccda : a5ac             [ 3] 	lda df_vntstrt+1
ccdc : e900             [ 2] 	sbc #0
ccde : 85ac             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
cce8 : e6b3             [ 5] 	inc df_varcnt
ccea : 18               [ 2] 	clc
cceb : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
ccec :                       df_var_analyse
                             	; Default type is INT
ccec : a901             [ 2] 	lda #DFVVT_INT
ccee : 85e3             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
ccf0 : a4be             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
ccf2 : b9000a           [ 4] 	lda df_linbuff,y
ccf5 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
ccf7 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
ccf9 : a940             [ 2] 	lda #DFVVT_PROC
ccfb : 85e3             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank1.s --------------------------------

                             	; skip over prefix
ccfd : c8               [ 2] 	iny
ccfe :                       df_var_not_proc
                             	; found the actual number of alpha nums
ccfe : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
cd00 : 88               [ 2] 	dey
cd01 :                       df_var_type_countlen
                             	; count alpha nums
cd01 : c8               [ 2] 	iny
cd02 : e8               [ 2] 	inx
cd03 : b9000a           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
cd06 : e000             [ 2] 	cpx #0
cd08 : d007             [ 3] 	bne df_var_type_countlen_alphanum
cd0a : 20fbcd           [ 6] 	jsr df_tk_isalpha
cd0d : b0f2             [ 3] 	bcs df_var_type_countlen
cd0f : 9005             [ 3] 	bcc df_var_type_countlen_done
cd11 :                       df_var_type_countlen_alphanum
cd11 : 2008ce           [ 6] 	jsr df_tk_isalphanum
cd14 : b0eb             [ 3] 	bcs df_var_type_countlen
cd16 :                       df_var_type_countlen_done
cd16 : e000             [ 2] 	cpx #0
cd18 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
cd1a :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
cd1a : a5e3             [ 3] 	lda df_tmpptra
cd1c : c940             [ 2] 	cmp #DFVVT_PROC
cd1e : f002             [ 3] 	beq df_var_analyse_fatal_err
cd20 : 38               [ 2] 	sec
cd21 : 60               [ 6] 	rts
cd22 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
cd24 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ;	ldx df_tmpptra
                             ;	cpx #DFVVT_PROC
                             ;	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
cd24 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
cd24 : c924             [ 2] 	cmp #'$'
cd26 : d00b             [ 3] 	bne df_var_analyse_chk_arry
cd28 : a6e3             [ 3] 	ldx df_tmpptra
cd2a : e040             [ 2] 	cpx #DFVVT_PROC
cd2c : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
cd2e : a904             [ 2] 	lda #DFVVT_STR
cd30 : 85e3             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
cd32 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank1.s --------------------------------

cd33 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
cd33 : b9000a           [ 4] 	lda df_linbuff,y
cd36 : c95b             [ 2] 	cmp #'['
cd38 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
cd3a : a5e3             [ 3] 	lda df_tmpptra
cd3c : c940             [ 2] 	cmp #DFVVT_PROC
cd3e : f0e2             [ 3] 	beq df_var_analyse_fatal_err
cd40 : 0980             [ 2] 	ora #DFVVT_ARRY
cd42 : 85e3             [ 3] 	sta df_tmpptra
cd44 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
cd44 : 98               [ 2] 	tya
cd45 : 38               [ 2] 	sec
cd46 : e5be             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
cd48 : aa               [ 2] 	tax
                             	; put type in A
cd49 : a5e3             [ 3] 	lda df_tmpptra
cd4b : 18               [ 2] 	clc
cd4c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
cd4d :                       df_var_findcreate
                             	; save mask
cd4d : 48               [ 3] 	pha
cd4e : 2027cc           [ 6] 	jsr df_var_find
cd51 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
cd53 : 68               [ 4] 	pla
cd54 : 48               [ 3] 	pha
                             	; don't check mask if zero
cd55 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
cd57 : 68               [ 4] 	pla
cd58 : a000             [ 2] 	ldy #DFVVT_TYPE
cd5a : 31e3             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
cd5c : f019             [ 3] 	beq df_var_findcreate_err
cd5e : 48               [ 3] 	pha		; Dummy push to match the pla
cd5f :                       df_var_findcreate_found
                             	; discard mask
cd5f : 68               [ 4] 	pla	
                             	; put slot address in x,a
cd60 : a6e3             [ 3] 	ldx df_tmpptra
cd62 : a5e4             [ 3] 	lda df_tmpptra+1
cd64 : 18               [ 2] 	clc
cd65 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
cd66 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
cd66 : 20eccc           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank1.s --------------------------------

cd69 : 85e3             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
cd6b : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
cd6d : 68               [ 4] 	pla
cd6e : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
cd70 : 25e3             [ 3] 	and df_tmpptra
                             	; mask match is ok
cd72 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
cd74 : f001             [ 3] 	beq df_var_findcreate_err
cd76 :                       df_var_findcreate_errp
cd76 : 68               [ 4] 	pla
cd77 :                       df_var_findcreate_err
cd77 : 38               [ 2] 	sec
cd78 : 60               [ 6] 	rts
                             
cd79 :                       df_var_analyse_ok
                             	; extra space for zero terminator
cd79 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
cd7a : a5e3             [ 3] 	lda df_tmpptra
cd7c : 48               [ 3] 	pha
cd7d : 8a               [ 2] 	txa
cd7e : 48               [ 3] 	pha
                             	
cd7f : 2092cc           [ 6] 	jsr df_var_insert_space
cd82 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
cd86 :                       df_var_initialise_var
cd86 : 68               [ 4] 	pla
cd87 : 85e7             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
cd89 : 68               [ 4] 	pla							; type
cd8a : a000             [ 2] 	ldy #DFVVT_TYPE
cd8c : 91b1             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
cd8e : a900             [ 2] 	lda #0						; zero the rest
cd90 : a007             [ 2] 	ldy #7
cd92 :                       df_var_zero_vnt
cd92 : 91b1             [ 5] 	sta (df_vvtend),y
cd94 : 88               [ 2] 	dey
cd95 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
cd97 : c6e7             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
cd99 : a6be             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
cd9b :                       df_var_findcreate_copy
cd9b : bd000a           [ 4] 	lda df_linbuff,x
cd9e : 91ab             [ 5] 	sta (df_vntstrt),y
cda0 : e8               [ 2] 	inx
cda1 : c8               [ 2] 	iny
cda2 : c6e7             [ 5] 	dec df_tmpptrc
cda4 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
cda6 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank1.s --------------------------------

cda8 : 91ab             [ 5] 	sta (df_vntstrt),y
                             
cdaa : 86be             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
cdac : a6b1             [ 3] 	ldx df_vvtend
cdae : a5b2             [ 3] 	lda df_vvtend+1
                             	
cdb0 : 18               [ 2] 	clc
cdb1 : 60               [ 6] 	rts
                             	
cdb2 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cdb2 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
cdb2 :                       df_tk_peek_buf
cdb2 : a4be             [ 3] 	ldy df_linoff
cdb4 : b9000a           [ 4] 	lda df_linbuff,y
cdb7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
cdb8 :                       df_tk_get_buf
cdb8 : a4be             [ 3] 	ldy df_linoff
cdba : b9000a           [ 4] 	lda df_linbuff,y
cdbd : f003             [ 3] 	beq df_tk_get_buf_null
cdbf : c8               [ 2] 	iny
cdc0 : 84be             [ 3] 	sty df_linoff
cdc2 :                       df_tk_get_buf_null
cdc2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
cdc3 :                       df_tk_put_tok
cdc3 : a4bf             [ 3] 	ldy df_tokoff
cdc5 : 99800a           [ 5] 	sta df_tokbuff,y
cdc8 : c8               [ 2] 	iny
cdc9 : 3004             [ 3] 	bmi df_tk_put_overflow
cdcb : 84bf             [ 3] 	sty df_tokoff
cdcd : 18               [ 2] 	clc
cdce : 60               [ 6] 	rts
cdcf :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdd1 :                       df_tk_isdigit
cdd1 : c93a             [ 2] 	cmp #'9'+1
cdd3 : b005             [ 3] 	bcs df_tk_isdigit_false
cdd5 : c930             [ 2] 	cmp #'0'
cdd7 : 9001             [ 3] 	bcc df_tk_isdigit_false
cdd9 : 60               [ 6] 	rts						; C must be 1
cdda :                       df_tk_isdigit_false
cdda : 18               [ 2] 	clc
cddb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
cddc :                       df_tk_isbin
cddc : c930             [ 2] 	cmp #'0'
cdde : f005             [ 3] 	beq df_tk_isbin_true	; C=1
cde0 : c931             [ 2] 	cmp #'1'
cde2 : f001             [ 3] 	beq df_tk_isbin_true	; C=1
cde4 : 18               [ 2] 	clc
cde5 :                       df_tk_isbin_true
cde5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
cde6 :                       df_tk_ishex
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank1.s --------------------------------

cde6 : 48               [ 3] 	pha
cde7 : 20d1cd           [ 6] 	jsr df_tk_isdigit
cdea : b00a             [ 3] 	bcs df_tk_ishex_truep
cdec : 0920             [ 2] 	ora #0x20
cdee : c967             [ 2] 	cmp #'f'+1
cdf0 : b006             [ 3] 	bcs df_tk_ishex_false
cdf2 : c961             [ 2] 	cmp #'a'
cdf4 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
cdf6 :                       df_tk_ishex_truep
cdf6 : 68               [ 4] 	pla
cdf7 : 60               [ 6] 	rts
cdf8 :                       df_tk_ishex_false
cdf8 :                       df_tk_isalpha_false
cdf8 : 18               [ 2] 	clc
cdf9 : 68               [ 4] 	pla
cdfa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdfb :                       df_tk_isalpha
cdfb : 48               [ 3] 	pha
cdfc : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
cdfe : c97b             [ 2] 	cmp #'z'+1
ce00 : b0f6             [ 4] 	bcs df_tk_isalpha_false
ce02 : c961             [ 2] 	cmp #'a'
ce04 : 90f2             [ 4] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
ce06 : 68               [ 4] 	pla
ce07 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce08 :                       df_tk_isalphanum
ce08 : 20fbcd           [ 6] 	jsr df_tk_isalpha
ce0b : 90c4             [ 4] 	bcc df_tk_isdigit
ce0d :                       df_tk_rts1				; branch to this RTS where possible
ce0d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce0e :                       df_tk_isproc
ce0e : c95f             [ 2] 	cmp #'_'
ce10 : f001             [ 3] 	beq df_tk_isproc_true	; C=1
ce12 : 18               [ 2] 	clc
ce13 :                       df_tk_isproc_true
ce13 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank1.s --------------------------------

ce14 :                       df_tk_skip_ws
ce14 :                       df_tk_ws_loop1
ce14 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
ce17 : 202fce           [ 6] 	jsr df_tk_isws
ce1a : 90f1             [ 3] 	bcc df_tk_rts1
ce1c : e6be             [ 5] 	inc df_linoff
ce1e : 20c3cd           [ 6] 	jsr df_tk_put_tok
ce21 : 90f1             [ 3] 	bcc df_tk_skip_ws		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_strip_ws
                             ;* Strip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ce23 :                       df_tk_strip_ws
ce23 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
ce26 : 202fce           [ 6] 	jsr df_tk_isws
ce29 : 90e2             [ 3] 	bcc df_tk_rts1
ce2b : e6be             [ 5] 	inc df_linoff
ce2d : d0f4             [ 3] 	bne df_tk_strip_ws		; Always as linoff is not ze
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce2f :                       df_tk_isws
ce2f : c920             [ 2] 	cmp #' '
ce31 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
ce33 : 60               [ 6] 	rts
ce34 :                       df_tk_isws_false
ce34 :                       df_tk_expectok
ce34 : 18               [ 2] 	clc
ce35 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
ce36 :                       df_tk_expect
ce36 : 48               [ 3] 	pha
                             	; skip ws
ce37 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
ce3a : 68               [ 4] 	pla
ce3b : a4be             [ 3] 	ldy df_linoff
ce3d : d9000a           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
ce40 : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
ce42 :                       df_tk_num_err
ce42 :                       df_tk_char_err
ce42 : 38               [ 2] 	sec
ce43 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
ce44 :                       df_tk_expect_tok
ce44 : 2036ce           [ 6] 	jsr df_tk_expect
ce47 : b0c4             [ 3] 	bcs df_tk_rts1
ce49 : 20b8cd           [ 6] 	jsr df_tk_get_buf
ce4c : 4cc3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
ce4f :                       df_tk_expect_tok_err
ce4f : 2044ce           [ 6] 	jsr df_tk_expect_tok
ce52 : 90b9             [ 3] 	bcc df_tk_rts1
ce54 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
ce56 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
ce56 : 18               [ 2] 	clc
ce57 : a900             [ 2] 	lda #lo(df_linbuff)
ce59 : 65be             [ 3] 	adc df_linoff
ce5b : aa               [ 2] 	tax
ce5c : a90a             [ 2] 	lda #hi(df_linbuff)
ce5e : 6900             [ 2] 	adc #0
ce60 : a000             [ 2] 	ldy #0				; any numeric format
ce62 : 207fc8           [ 6] 	jsr con_n_to_a
ce65 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
ce67 : a8               [ 2] 	tay
ce68 : 18               [ 2] 	clc
ce69 : 8a               [ 2] 	txa
ce6a : 65be             [ 3] 	adc df_linoff
ce6c : 85be             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
ce6e : 98               [ 2] 	tya
ce6f : c901             [ 2] 	cmp #NUM_DEC
ce71 : d004             [ 3] 	bne df_tk_num_hexbin
ce73 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
ce75 : d016             [ 3] 	bne df_tk_num_put
ce77 :                       df_tk_num_hexbin
ce77 : c902             [ 2] 	cmp #NUM_HEX
ce79 : d00a             [ 3] 	bne df_tk_num_bin
ce7b : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
ce7d : e005             [ 2] 	cpx #5				; If >4 chars then INT
ce7f : 900c             [ 3] 	bcc df_tk_num_put
ce81 : a90a             [ 2] 	lda #DFTK_INTHEX
ce83 : d008             [ 3] 	bne df_tk_num_put
ce85 :                       df_tk_num_bin
ce85 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
ce87 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
ce89 : 9002             [ 3] 	bcc df_tk_num_put
ce8b : a90b             [ 2] 	lda #DFTK_INTBIN
ce8d :                       df_tk_num_put
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank1.s --------------------------------

ce8d : 20c3cd           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
ce90 : a585             [ 3] 	lda num_a
ce92 : 20c3cd           [ 6] 	jsr df_tk_put_tok
ce95 : a586             [ 3] 	lda num_a+1
ce97 : 4cc3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
ce9a :                       df_tk_char
                             	; skip the first quote
ce9a : 20b8cd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
ce9d : a900             [ 2] 	lda #DFTK_CHR
ce9f : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
cea2 : 20b8cd           [ 6] 	jsr df_tk_get_buf
cea5 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
cea8 : a900             [ 2] 	lda #0
ceaa : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
cead : 20b8cd           [ 6] 	jsr df_tk_get_buf
ceb0 : c927             [ 2] 	cmp #0x27
ceb2 : d08e             [ 3] 	bne df_tk_char_err
ceb4 : 18               [ 2] 	clc
ceb5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
ceb6 :                       df_tk_str
                             	; skip the first quote
ceb6 : 20b8cd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
ceb9 : a910             [ 2] 	lda #DFTK_STRLIT
cebb : 20c3cd           [ 6] 	jsr df_tk_put_tok
cebe :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
cebe : 20b8cd           [ 6] 	jsr df_tk_get_buf
cec1 : c900             [ 2] 	cmp #0
cec3 : f011             [ 3] 	beq df_tk_str_err
cec5 : c922             [ 2] 	cmp #0x22
cec7 : f006             [ 3] 	beq df_tk_str_don
cec9 : 20c3cd           [ 6] 	jsr df_tk_put_tok
cecc : 4cbece           [ 3] 	jmp df_tk_str_ch
cecf :                       df_tk_str_don
                             	; zero terminated strings
cecf : a900             [ 2] 	lda #0
ced1 : 4cc3cd           [ 3] 	jmp df_tk_put_tok
ced4 :                       df_tk_var_noarry
ced4 : 18               [ 2] 	clc
ced5 : 60               [ 6] 	rts
ced6 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
ced8 :                       df_tk_const
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank1.s --------------------------------

ced8 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
cedb : 20b2cd           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
cede : c92d             [ 2] 	cmp #'-'
cee0 : f005             [ 3] 	beq df_tk_const_try_num
cee2 : 20d1cd           [ 6] 	jsr df_tk_isdigit
cee5 : 9003             [ 3] 	bcc df_tk_const_try_str
cee7 :                       df_tk_const_try_num
cee7 : 4c56ce           [ 3] 	jmp df_tk_num
ceea :                       df_tk_const_try_str
                             	; check for double quote
ceea : c922             [ 2] 	cmp #0x22
ceec : d003             [ 3] 	bne df_tk_const_try_char
ceee : 4cb6ce           [ 3] 	jmp df_tk_str
cef1 :                       df_tk_const_try_char
                             	; check for single apostrophe
cef1 : c927             [ 2] 	cmp #0x27
cef3 : d003             [ 3] 	bne df_tk_const_err
cef5 : 4c9ace           [ 3] 	jmp df_tk_char
cef8 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
cefa :                       df_tk_var
                             	; Find or create variable, address in X,A
cefa : 204dcd           [ 6] 	jsr df_var_findcreate
cefd : 9001             [ 4] 	bcc df_tk_var_cont
ceff : 60               [ 6] 	rts
cf00 :                       df_tk_var_cont
                             	; Save X,A for later
cf00 : 48               [ 3] 	pha
cf01 : 8a               [ 2] 	txa
cf02 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf03 : a911             [ 2] 	lda #DFTK_VAR
cf05 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf08 : 68               [ 4] 	pla
cf09 : 20c3cd           [ 6] 	jsr df_tk_put_tok
cf0c : 68               [ 4] 	pla
cf0d : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
cf10 :                       df_tk_var_ck
                             	; check if array procesing needed
cf10 : a95b             [ 2] 	lda #'['
cf12 : 2044ce           [ 6] 	jsr df_tk_expect_tok
cf15 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
cf17 : 4cc1cf           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
cf1a :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank1.s --------------------------------

cf1a : 20b2cd           [ 6] 	jsr df_tk_peek_buf
cf1d : c926             [ 2] 	cmp #DFTK_VARPARM
cf1f : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
cf21 : 20b8cd           [ 6] 	jsr df_tk_get_buf
cf24 : 20c3cd           [ 6] 	jsr df_tk_put_tok
cf27 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
cf27 : a900             [ 2] 	lda #0
cf29 : 4cface           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
cf2c :                       df_tk_localvar
                             	; Find or create variable, index in A
cf2c : 204dcd           [ 6] 	jsr df_var_findcreate
cf2f : 9001             [ 3] 	bcc df_tk_localvar_cont
cf31 : 60               [ 6] 	rts
cf32 :                       df_tk_localvar_cont
                             	; Save variable address for later
cf32 : 48               [ 3] 	pha
cf33 : 8a               [ 2] 	txa
cf34 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf35 : a911             [ 2] 	lda #DFTK_VAR
cf37 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
cf3a : 68               [ 4] 	pla
cf3b : 20c3cd           [ 6] 	jsr df_tk_put_tok
cf3e : 68               [ 4] 	pla
cf3f : 4cc3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
cf42 :                       df_tk_arrvar
                             	; Like a local var at first
cf42 : 202ccf           [ 6] 	jsr df_tk_localvar
                             	; but must be array
cf45 : a95b             [ 2] 	lda #'['
cf47 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
cf4a : 4cc1cf           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
cf4d :                       df_tk_proc
cf4d : 85cd             [ 3] 	sta df_procmode
cf4f : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
cf52 : a940             [ 2] 	lda #DFVVT_PROC
cf54 : 204dcd           [ 6] 	jsr df_var_findcreate
cf57 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
cf59 : 86d0             [ 3] 	stx df_procptr
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank1.s --------------------------------

cf5b : 85d1             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
cf5d : a912             [ 2] 	lda #DFTK_PROC
cf5f : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf62 : a5d0             [ 3] 	lda df_procptr
cf64 : 20c3cd           [ 6] 	jsr df_tk_put_tok
cf67 : a5d1             [ 3] 	lda df_procptr+1
cf69 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
cf6c : a900             [ 2] 	lda #0
cf6e : 85ce             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
cf70 : a928             [ 2] 	lda #'('
cf72 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
cf75 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
cf78 : c929             [ 2] 	cmp #')'
cf7a : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
cf7c :                       df_tk_proc_parms
cf7c : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
cf7f : a5cd             [ 3] 	lda df_procmode
cf81 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
cf83 : 201acf           [ 6] 	jsr df_tk_parm
cf86 : 4c92cf           [ 3] 	jmp df_tk_proc_skip_call
cf89 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
cf89 : a5ce             [ 3] 	lda df_procargs	; procargs could be impacted ins
cf8b : 48               [ 3] 	pha
cf8c : 2041d0           [ 6] 	jsr df_tk_expression
cf8f : 68               [ 4] 	pla
cf90 : 85ce             [ 3] 	sta df_procargs
cf92 :                       df_tk_proc_skip_call
cf92 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
cf94 : e6ce             [ 5] 	inc df_procargs
                             	; what is next non ws char
cf96 : 2014ce           [ 6] 	jsr df_tk_skip_ws
cf99 : c92c             [ 2] 	cmp #','
cf9b : f006             [ 3] 	beq df_tk_proc_comma
cf9d : c929             [ 2] 	cmp #')'
cf9f : d01d             [ 3] 	bne df_tk_proc_errp
cfa1 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
cfa3 :                       df_tk_proc_comma
cfa3 : 20b8cd           [ 6] 	jsr df_tk_get_buf
cfa6 : 20c3cd           [ 6] 	jsr df_tk_put_tok
cfa9 : 4c7ccf           [ 3] 	jmp df_tk_proc_parms
cfac :                       df_tk_proc_noparm
                             	; consume the close bracket
cfac : 20b8cd           [ 6] 	jsr df_tk_get_buf
cfaf : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
cfb2 : a6cd             [ 3] 	ldx df_procmode
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank1.s --------------------------------

cfb4 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
cfb6 : a004             [ 2] 	ldy #DFVVT_DIM2
cfb8 : a5ce             [ 3] 	lda df_procargs
cfba : 91d0             [ 5] 	sta (df_procptr),y
cfbc :                       df_tk_proc_skip_args
cfbc : 18               [ 2] 	clc
cfbd : 60               [ 6] 	rts
cfbe :                       df_tk_proc_errp
cfbe : 68               [ 4] 	pla
cfbf :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
cfc1 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
cfc1 : 2041d0           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
cfc4 : a92c             [ 2] 	lda #','
cfc6 : 2044ce           [ 6] 	jsr df_tk_expect_tok
cfc9 : b003             [ 3] 	bcs df_tk_narry_end
cfcb : 2041d0           [ 6] 	jsr df_tk_expression
cfce :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
cfce : a95d             [ 2] 	lda #']'
cfd0 : 4c4fce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
cfd3 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
cfd3 : 2041d0           [ 6] 	jsr df_tk_expression
cfd6 : a929             [ 2] 	lda #')'
cfd8 : 4c4fce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
cfdb :                       df_tk_nterm_proc
                             	; call mode
cfdb : a901             [ 2] 	lda #1
cfdd : 4c4dcf           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
cfe0 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
cfe0 : 2014ce           [ 6] 	jsr df_tk_skip_ws
cfe3 : c900             [ 2] 	cmp #0
cfe5 : f004             [ 3] 	beq df_tk_nterm_done
cfe7 : c93a             [ 2] 	cmp #':'
cfe9 : d002             [ 3] 	bne df_tk_nterm_cont
cfeb :                       df_tk_nterm_done
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank1.s --------------------------------

cfeb :                       df_tk_nop_false
cfeb : 38               [ 2] 	sec
cfec : 60               [ 6] 	rts
cfed :                       df_tk_nterm_cont
                             	; if open bracket then process it
cfed : c928             [ 2] 	cmp #'('
cfef : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
cff1 : 20b8cd           [ 6] 	jsr df_tk_get_buf
cff4 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
cff7 : 4cd3cf           [ 3] 	jmp df_tk_nbrkt
cffa :                       df_tk_nterm_tryfn
cffa : 48               [ 3] 	pha
                             	; try decoding a built-in function
cffb : a902             [ 2] 	lda #DFTK_FN
cffd : 202dd1           [ 6] 	jsr df_tk_matchtok
d000 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d002 : 68               [ 4] 	pla
d003 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d004 : 8a               [ 2] 	txa
d005 : 0980             [ 2] 	ora #0x80
d007 : 20c3cd           [ 6] 	jsr df_tk_put_tok
d00a : 20ffd0           [ 6] 	jsr df_tk_exec_parser
d00d : b01b             [ 3] 	bcs df_tk_nterm_err
d00f : 60               [ 6] 	rts
d010 :                       df_tk_nterm_try_proc
d010 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d011 : 200ece           [ 6] 	jsr df_tk_isproc
d014 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d016 : 20dbcf           [ 6] 	jsr df_tk_nterm_proc
d019 : b00f             [ 3] 	bcs df_tk_nterm_err
d01b : 60               [ 6] 	rts
d01c :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d01c : a900             [ 2] 	lda #0
d01e : 20face           [ 6] 	jsr df_tk_var
d021 : b001             [ 3] 	bcs df_tk_nterm_try_const
d023 : 60               [ 6] 	rts
d024 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d024 : 20d8ce           [ 6] 	jsr df_tk_const
d027 : b001             [ 3] 	bcs df_tk_nterm_err
d029 : 60               [ 6] 	rts
d02a :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d02c :                       df_tk_nop
d02c : 2014ce           [ 6] 	jsr df_tk_skip_ws
d02f : c900             [ 2] 	cmp #0
d031 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d033 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d035 : 202dd1           [ 6] 	jsr df_tk_matchtok
d038 : b0b1             [ 4] 	bcs df_tk_nop_false
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank1.s --------------------------------

                             	; got a token
d03a : 0980             [ 2] 	ora #DFTK_TOKEN
d03c : 20c3cd           [ 6] 	jsr df_tk_put_tok
d03f : 18               [ 2] 	clc
d040 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d041 :                       df_tk_expression
                             	; Tokenise a numeric term
d041 : 20e0cf           [ 6] 	jsr df_tk_nterm
d044 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d046 : 202cd0           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d049 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d04b :                       df_tk_not_eos
d04b : 18               [ 2] 	clc
d04c :                       df_tk_expre_err
d04c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d04d :                       df_tk_tok_expression
d04d : 204fce           [ 6] 	jsr df_tk_expect_tok_err
d050 : 4c41d0           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d053 :                       df_tk_isEOS
d053 : a93a             [ 2] 	lda #':'
d055 : 2044ce           [ 6] 	jsr df_tk_expect_tok
d058 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d05a : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d05c : a4c1             [ 3] 	ldy df_nxtstidx
d05e : 99800a           [ 5] 	sta df_tokbuff,y
d061 : 38               [ 2] 	sec
d062 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d063 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d063 : a981             [ 2] 	lda #0x81
d065 : 20c3cd           [ 6] 	jsr df_tk_put_tok
d068 : a901             [ 2] 	lda #1
d06a : 4c4dcf           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank1.s --------------------------------

                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d06d :                       df_tk_parse_command
                             	; only looking for keywords
d06d : a901             [ 2] 	lda #DFTK_KW
d06f : 202dd1           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d072 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d074 : 0980             [ 2] 	ora #0x80
d076 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d079 : a5c5             [ 3] 	lda df_symoff
d07b : 20ffd0           [ 6] 	jsr df_tk_exec_parser
d07e : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d080 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d083 :                       df_tk_parse_command_done
d083 : 18               [ 2] 	clc
d084 :                       df_tk_parse_command_err
d084 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d085 :                       df_lexer_line
d085 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d087 : 85be             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d089 : 85bf             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d08b : a980             [ 2] 	lda #lo(df_tokbuff)
d08d : 85c8             [ 3] 	sta df_currlin
d08f : a90a             [ 2] 	lda #hi(df_tokbuff)
d091 : 85c9             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d093 : a900             [ 2] 	lda #0
d095 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d098 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
d09b : 20d1cd           [ 6] 	jsr df_tk_isdigit
d09e : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d0a0 : 200ed1           [ 6] 	jsr df_tk_linenum
d0a3 : 4caed0           [ 3] 	jmp df_tk_body
d0a6 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d0a6 : a900             [ 2] 	lda #0
d0a8 : 20c3cd           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d0ab : 20c3cd           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d0ae :                       df_tk_body
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank1.s --------------------------------

                             	; Offset for next statement
d0ae : a5bf             [ 3] 	lda df_tokoff
d0b0 : 85c1             [ 3] 	sta df_nxtstidx
d0b2 : a900             [ 2] 	lda #0
d0b4 : 20c3cd           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d0b7 : 20b2cd           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d0ba : 202fce           [ 6] 	jsr df_tk_isws					; and first character
d0bd : 9002             [ 3] 	bcc df_tk_skip_1_spc
d0bf : e6be             [ 5] 	inc df_linoff					; Don't tokenise this single s
d0c1 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d0c1 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d0c4 : c900             [ 2] 	cmp #0
d0c6 : f033             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d0c8 : 200ece           [ 6] 	jsr df_tk_isproc
d0cb : 9006             [ 3] 	bcc df_tk_try_command
d0cd : 2063d0           [ 6] 	jsr df_tk_parse_user_proc
d0d0 : 4cddd0           [ 3] 	jmp df_tk_done
d0d3 :                       df_tk_try_command
                             	; try  a keyword
d0d3 : 206dd0           [ 6] 	jsr df_tk_parse_command
                             ;	bcs	df_tk_try_assign
d0d6 : 9005             [ 3] 	bcc df_tk_done
d0d8 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d0d8 : 203cd5           [ 6] 	jsr df_tk_assign
d0db : b020             [ 3] 	bcs	df_tk_parseerror
d0dd :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d0dd : 2053d0           [ 6] 	jsr df_tk_isEOS
d0e0 : b0cc             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d0e2 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
d0e5 : c900             [ 2] 	cmp #0
d0e7 : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
d0e9 : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d0eb : a4c1             [ 3] 	ldy df_nxtstidx
d0ed : 99800a           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d0f0 : a4bf             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d0f2 : a900             [ 2] 	lda #0
d0f4 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d0f7 : 98               [ 2] 	tya
d0f8 : 8d800a           [ 4] 	sta df_tokbuff
d0fb :                       df_tk_line_empty
d0fb : 18               [ 2] 	clc
d0fc : 60               [ 6] 	rts
d0fd :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d0ff :                       df_tk_exec_parser
d0ff : 0a               [ 2] 	asl a
d100 : aa               [ 2] 	tax
d101 : bdb3d3           [ 4] 	lda df_tk_tokenjmp,x
d104 : 85e3             [ 3] 	sta df_tmpptra
d106 : bdb4d3           [ 4] 	lda df_tk_tokenjmp+1,x
d109 : 85e4             [ 3] 	sta df_tmpptra+1
d10b : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d10e :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d10e : 18               [ 2] 	clc
d10f : a900             [ 2] 	lda #lo(df_linbuff)
d111 : 65be             [ 3] 	adc df_linoff
d113 : aa               [ 2] 	tax
d114 : a90a             [ 2] 	lda #hi(df_linbuff)
d116 : 6900             [ 2] 	adc #0
d118 : a001             [ 2] 	ldy #1			; Decimal format only
d11a : 207fc8           [ 6] 	jsr con_n_to_a
d11d : 18               [ 2] 	clc
d11e : 8a               [ 2] 	txa
d11f : 65be             [ 3] 	adc df_linoff
d121 : 85be             [ 3] 	sta df_linoff
                             	; Now save line number
d123 : a585             [ 3] 	lda num_a
d125 : 20c3cd           [ 6] 	jsr df_tk_put_tok
d128 : a586             [ 3] 	lda num_a+1
d12a : 4cc3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d12d :                       df_tk_matchtok
                             	; save the mask to check types against
d12d : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d12e : a9af             [ 2] 	lda #lo(df_tokensyms)
d130 : 85c3             [ 3] 	sta df_symtab
d132 : a9d1             [ 2] 	lda #hi(df_tokensyms)
d134 : 85c4             [ 3] 	sta df_symtab+1
d136 : a900             [ 2] 	lda #0
d138 : 85c5             [ 3] 	sta df_symoff
d13a :                       df_tk_checknexttok
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank1.s --------------------------------

                             	; check this token type first
d13a : 68               [ 4] 	pla
d13b : 48               [ 3] 	pha
d13c : a6c5             [ 3] 	ldx df_symoff
d13e : 3d9dd4           [ 4] 	and df_tk_tokentype,x
d141 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
d143 : bd9dd4           [ 4] 	lda df_tk_tokentype,x
d146 : 2908             [ 2] 	and #DFTK_OP
d148 : f009             [ 3] 	beq df_tk_matchtok_skip_op
d14a : 68               [ 4] 	pla
d14b : 48               [ 3] 	pha
d14c : 2908             [ 2] 	and #DFTK_OP
d14e : 3d9dd4           [ 4] 	and df_tk_tokentype,x
d151 : f022             [ 3] 	beq df_tk_symnomatch
d153 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
d153 : a4be             [ 3] 	ldy df_linoff
d155 : a200             [ 2] 	ldx #0
d157 :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
d157 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
d159 : 48               [ 3] 	pha
d15a : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
d15c : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
d15f : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
d161 : 68               [ 4] 	pla
d162 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
d16a : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
d16b : b9000a           [ 4] 	lda df_linbuff,y
d16e : c92e             [ 2] 	cmp #'.'
d170 : f025             [ 3] 	beq df_tk_symfound
d172 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
d174 :                       df_tk_symnomatchp
d174 : 68               [ 4] 	pla
d175 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
d175 : e6c5             [ 5] 	inc df_symoff
d177 :                       df_tk_symnextentry
d177 : a200             [ 2] 	ldx #0
d179 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
d17b : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
d183 : 4c77d1           [ 3] 	jmp df_tk_symnextentry
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank1.s --------------------------------

d186 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
d18c : a1c3             [ 6] 	lda (df_symtab,x)
d18e : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
d190 : 68               [ 4] 	pla
                             	; Zero symbol counter
d191 : a900             [ 2] 	lda #0
d193 : 85c5             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
d195 : 38               [ 2] 	sec
d196 : 60               [ 6] 	rts
d197 :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
d197 : c8               [ 2] 	iny
                             	; First mask off MSB
d198 : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
d19a : 20fbcd           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
d19d : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
d19f : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
d1a2 : 2008ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
d1a5 : b0ce             [ 3] 	bcs df_tk_symnomatch
d1a7 :                       df_tk_symfound_final
                             	; pop mask off stack
d1a7 : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
d1a8 : 84be             [ 3] 	sty df_linoff
d1aa : a5c5             [ 3] 	lda df_symoff
d1ac : aa               [ 2] 	tax
d1ad : 18               [ 2] 	clc
d1ae : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank1.s --------------------------------

                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
d1af :                       df_tokensyms
d1af : 80                    	db	0x80						; Implicit numeric assign
d1b0 : 80                    	db	0x80						; Implicit call procedure
d1b1 : bb                    	db	";"+0x80					; Comment
d1b2 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
d1b9 : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
d1c0 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
d1c5 : 6465e6                	db	"de",'f'+0x80				; def_subname
d1c8 : 656e646465e6          	db	"endde",'f'+0x80			; enddef
d1ce : 7265747572ee          	db	"retur",'n'+0x80			; return
d1d4 : 61626f72f4            	db	"abor",'t'+0x80				; abort
d1d9 : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
d1de : 6469ed                	db	"di",'m'+0x80				; dim varlist
d1e1 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
d1e7 : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
d1ec : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
d1ef : 6e6578f4              	db	"nex",'t'+0x80				; next
d1f3 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
d1f8 : 77656ee4              	db	"wen",'d'+0x80				; wend
d1fc : 69e6                  	db	"i",'f'+0x80				; if condition
d1fe : 656c73e5              	db	"els",'e'+0x80				; else
d202 : 656e6469e6            	db	"endi",'f'+0x80				; endif
d207 : 656c69e6              	db	"eli",'f'+0x80				; elif condition
d20b : 646174e1              	db	"dat",'a'+0x80				; data
d20f : ae                    	db	'.'+0x80					; assembler command
d210 : 7275ee                	db	"ru",'n'+0x80				; run
d213 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
d217 : 696e7075f4            	db	"inpu",'t'+0x80				; input var
d21c : 6d6f64e5              	db	"mod",'e'+0x80				; mode n
d220 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
d224 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
d22a : 636cf3                	db	"cl",'s'+0x80				; cls
d22d : 76706f6be5            	db	"vpok",'e'+0x80				; vpoke addr,val
d232 : 7365747664f0          	db	"setvd",'p'+0x80			; setvdp reg,val
d238 : 636f6c6f75f2          	db	"colou",'r'+0x80			; colour reg,val
d23e : 73707269746570..      	db	"spritepa",'t'+0x80			; spritepat patnum,arra
d247 : 73707269746570..      	db	"spritepo",'s'+0x80			; spritepos sprnum,x,y
d250 : 73707269746563..      	db	"spriteco",'l'+0x80			; spritecol sprnum,col
d259 : 7370726974656e..      	db	"spritenm",'e'+0x80			; spritenme sprnum,patn
d262 : 7370726974e5          	db	"sprit",'e'+0x80			; sprite n,x,y,p,c
d268 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
d26c : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
d270 : 736f756ee4            	db	"soun",'d'+0x80				; sound
d275 : 6d757369e3            	db	"musi",'c'+0x80				; music
d27a : 706c61f9              	db	"pla",'y'+0x80				; play
d27e : 736176e5              	db	"sav",'e'+0x80				; save
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank1.s --------------------------------

d282 : 6c6f61e4              	db	"loa",'d'+0x80				; load
d286 : 6469f2                	db	"di",'r'+0x80				; dir (compact listing)
d289 : 646972ec              	db	"dir",'l'+0x80				; dirl (long listing)
d28d : 6465ec                	db 	"de",'l'+0x80				; del
d290 : 726561e4              	db	"rea",'d'+0x80				; read
d294 : 6e65f7                	db	"ne",'w'+0x80				; new
d297 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
d29c : 776169f4              	db	"wai",'t'+0x80				; wait delay
d2a0 : 72657365f4            	db	"rese",'t'+0x80				; reset var
d2a5 : 68697265f3            	db	"hire",'s'+0x80				; hires col
d2aa : 706f696ef4            	db	"poin",'t'+0x80				; point x,y,mode
d2af : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
d2b3 : 68706c6ff4            	db	"hplo",'t'+0x80				; hplot x,y,char|string
d2b8 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
d2bf : 7069786d6173eb        	db	"pixmas",'k'+0x80			; pixmask n
d2c6 : 706978636fec          	db	"pixco",'l'+0x80			; pixcol n
d2cc : 626ff8                	db	"bo",'x'+0x80				; box x0,y0,x1,y1
d2cf : 636972636ce5          	db	"circl",'e'+0x80			; circle x0,y0,r
d2d5 : 73686170e5            	db	"shap",'e'+0x80				; shape x,y,coords[]
d2da : 766c6f61e4            	db	"vloa",'d'+0x80				; vload addr,filename
d2df : 626c6f61e4            	db	"bloa",'d'+0x80				; bload mem,hrd,addr,filen
d2e4 : 62736176e5            	db	"bsav",'e'+0x80				; bsave mem,hdr,addr,len,f
d2e9 : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
d2ee : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
d2f5 : 63686469f2            	db	"chdi",'r'+0x80				; chdir fname
d2fa : 6d6b6469f2            	db	"mkdi",'r'+0x80				; mkdir fname
d2ff : 6461746574696de5      	db	"datetim",'e'+0x80			; datetime string output
d307 : 6e76706f6be5          	db	"nvpok",'e'+0x80			; NV poke addr,val
d30d : 666f6ef4              	db	"fon",'t'+0x80				; font <font file>
d311 : 6465766963e5          	db	"devic",'e'+0x80			; device <devnum>
d317 : 66636c6f73e5          	db	"fclos",'e'+0x80			; fclose
                             ; Functions
d31d : 767065656ba8          	db	"vpeek",'('+0x80			; vpeek(x)
d323 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
d328 : 6465656ba8            	db	"deek",'('+0x80				; deek(x)
d32d : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
d333 : 6b6579a8              	db	"key",'('+0x80				; key(x)
d337 : 636872a8              	db	"chr",'('+0x80				; chr(x)
d33b : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
d340 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
d346 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
d34a : 6c656ea8              	db	"len",'('+0x80				; len(x$)
d34e : 6d656da8              	db	"mem",'('+0x80				; mem(x)
d352 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
d357 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
d35b : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
d363 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
d368 : 686578a8              	db	"hex",'('+0x80				; hex(x)
d36c : 646563a8              	db	"dec","("+0x80				; dec(x)
d370 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
d374 : 76616ca8              	db	"val",'('+0x80				; val(x$)
d378 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
d37e : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
d382 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
d387 : 6e767065656ba8        	db  "nvpeek",'('+0x80			; nvpeek(addr)
d38e : 66637265617465a8      	db	"fcreate",'('+0x80			; success=fcreate(filena
d396 : 666f70656ea8          	db	"fopen",'('+0x80			; success=fopen(filename)
                             ; Numeric operators, in priority
d39c : aa                    	db	'*'+0x80					; Multiply
d39d : af                    	db 	'/'+0x80					; Divide
d39e : dc                    	db 	'\\'+0x80					; Modulus
d39f : 3cbc                  	db	'<','<'+0x80				; Shift left
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank1.s --------------------------------

d3a1 : 3ebe                  	db	'>','>'+0x80				; Shift right
d3a3 : ab                    	db 	'+'+0x80					; Add
d3a4 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
d3a5 : a6                    	db '&'+0x80						; AND
d3a6 : fc                    	db '|'+0x80						; OR
d3a7 : de                    	db '^'+0x80						; EOR
d3a8 : 3cbd                  	db "<",'='+0x80					; Less than or equal
d3aa : 3ebd                  	db ">",'='+0x80					; Greater than or equal
d3ac : 3cbe                  	db "<",'>'+0x80					; Not equal
d3ae : bc                    	db '<'+0x80						; Less than
d3af : be                    	db '>'+0x80						; Greater than
d3b0 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
d3b2 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
d3b3 :                       df_tk_tokenjmp
d3b3 : 3cd5                  	dw	df_tk_assign
d3b5 : 11d6                  	dw	df_tk_callproc
d3b7 : 44d5                  	dw	df_tk_comment
d3b9 : a1d5                  	dw	df_tk_println
d3bb : 95d5                  	dw	df_tk_printat
d3bd : a1d5                  	dw	df_tk_print
d3bf : e9d5                  	dw	df_tk_def
d3c1 : 51d6                  	dw	df_tk_enddef
d3c3 : 53d6                  	dw	df_tk_return
d3c5 : 51d6                  	dw	df_tk_abort
d3c7 : d7d5                  	dw	df_tk_local
d3c9 : c8d5                  	dw	df_tk_dim
d3cb : 51d6                  	dw	df_tk_repeat
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank1.s --------------------------------

d3cd : 56d6                  	dw	df_tk_until
d3cf : efd5                  	dw	df_tk_for
d3d1 : 51d6                  	dw	df_tk_next
d3d3 : 56d6                  	dw	df_tk_while
d3d5 : 51d6                  	dw	df_tk_wend
d3d7 : 56d6                  	dw	df_tk_if
d3d9 : 51d6                  	dw	df_tk_else
d3db : 51d6                  	dw	df_tk_endif
d3dd : 56d6                  	dw	df_tk_elseif
d3df : a1d5                  	dw	df_tk_data
d3e1 : 78f3                  	dw	df_tk_asm_parse_command
d3e3 : 51d6                  	dw	df_tk_run
d3e5 : 73d5                  	dw	df_tk_list
d3e7 : afd5                  	dw	df_tk_input
d3e9 : 56d6                  	dw	df_tk_mode
d3eb : 66d6                  	dw	df_tk_plot
d3ed : 56d6                  	dw	df_tk_cursor
d3ef : 51d6                  	dw	df_tk_cls
d3f1 : 5ad6                  	dw	df_tk_vpoke
d3f3 : 5ad6                  	dw	df_tk_setvdp
d3f5 : 66d6                  	dw	df_tk_colour
d3f7 : 5ad6                  	dw	df_tk_spritepat
d3f9 : 66d6                  	dw	df_tk_spritepos
d3fb : 5ad6                  	dw	df_tk_spritecol
d3fd : 5ad6                  	dw	df_tk_spritenme
d3ff : 7ed6                  	dw	df_tk_sprite
d401 : 5ad6                  	dw	df_tk_poke
d403 : 5ad6                  	dw	df_tk_doke
d405 : 66d6                  	dw	df_tk_sound
d407 : 72d6                  	dw	df_tk_music
d409 : 72d6                  	dw	df_tk_play
d40b : 56d6                  	dw	df_tk_save
d40d : 56d6                  	dw	df_tk_load
d40f : 51d6                  	dw	df_tk_dir
d411 : 51d6                  	dw	df_tk_dirl
d413 : 56d6                  	dw	df_tk_del
d415 : b9d5                  	dw	df_tk_read
d417 : 51d6                  	dw	df_tk_new
d419 : 66d6                  	dw	df_tk_renum
d41b : 56d6                  	dw	df_tk_wait
d41d : 13d6                  	dw	df_tk_reset
d41f : 56d6                  	dw	df_tk_hires
d421 : 5ad6                  	dw	df_tk_point
d423 : 72d6                  	dw	df_tk_line
d425 : 66d6                  	dw	df_tk_hplot
d427 : 56d6                  	dw	df_tk_pixmode
d429 : 56d6                  	dw	df_tk_pixmask
d42b : 56d6                  	dw	df_tk_pixcol
d42d : 72d6                  	dw	df_tk_box
d42f : 66d6                  	dw	df_tk_circle
d431 : 66d6                  	dw	df_tk_shape
d433 : 5ad6                  	dw	df_tk_vload
d435 : 72d6                  	dw	df_tk_bload
d437 : 7ed6                  	dw	df_tk_bsave
d439 : 56d6                  	dw	df_tk_himem
d43b : 51d6                  	dw	df_tk_monitor
d43d : 56d6                  	dw	df_tk_chdir
d43f : 56d6                  	dw	df_tk_mkdir
d441 : 1cd6                  	dw	df_tk_datetime
d443 : 5ad6                  	dw	df_tk_nvpoke
d445 : 56d6                  	dw	df_tk_font
d447 : 56d6                  	dw	df_tk_device
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank1.s --------------------------------

d449 : 51d6                  	dw	df_tk_fclose
                             
d44b : 25d6                  	dw	df_tk_vpeek
d44d : 25d6                  	dw	df_tk_peek
d44f : 25d6                  	dw	df_tk_deek
d451 : 25d6                  	dw	df_tk_stick
d453 : 25d6                  	dw	df_tk_key
d455 : 25d6                  	dw	df_tk_chr
d457 : 37d6                  	dw	df_tk_left
d459 : 37d6                  	dw	df_tk_right
d45b : 3dd6                  	dw	df_tk_mid
d45d : 25d6                  	dw	df_tk_len
d45f : 25d6                  	dw	df_tk_mem
d461 : 37d6                  	dw	df_tk_scrn
d463 : 25d6                  	dw	df_tk_rnd
d465 : 2ed6                  	dw	df_tk_elapsed
d467 : 43d6                  	dw	df_tk_call
d469 : 25d6                  	dw	df_tk_hex
d46b : 25d6                  	dw	df_tk_dec
d46d : 25d6                  	dw	df_tk_asc
d46f : 25d6                  	dw	df_tk_val
d471 : 37d6                  	dw	df_tk_pixel
d473 : 25d6                  	dw	df_tk_sgn
d475 : 2ed6                  	dw	df_tk_addr
d477 : 25d6                  	dw	df_tk_nvpeek
d479 : 25d6                  	dw	df_tk_fcreate
d47b : 25d6                  	dw	df_tk_fopen
                             	
d47d : 51d6                  	dw	df_tk_mult
d47f : 51d6                  	dw	df_tk_div
d481 : 51d6                  	dw	df_tk_mod
d483 : 51d6                  	dw	df_tk_asl
d485 : 51d6                  	dw	df_tk_lsr
d487 : 51d6                  	dw	df_tk_add
d489 : 51d6                  	dw	df_tk_sub
                             	
d48b : 51d6                  	dw	df_tk_and
d48d : 51d6                  	dw	df_tk_or
d48f : 51d6                  	dw	df_tk_eor
d491 : 51d6                  	dw	df_tk_lte
d493 : 51d6                  	dw	df_tk_gte
d495 : 51d6                  	dw	df_tk_ne
d497 : 51d6                  	dw	df_tk_lt
d499 : 51d6                  	dw	df_tk_gt
d49b : 51d6                  	dw	df_tk_eq
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank1.s --------------------------------

                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
d49d :                       df_tk_tokentype
d49d : 01                    	db	DFTK_KW
d49e : 01                    	db	DFTK_KW
d49f : 01                    	db	DFTK_KW
d4a0 : 01                    	db	DFTK_KW
d4a1 : 01                    	db	DFTK_KW
d4a2 : 01                    	db	DFTK_KW
d4a3 : 01                    	db	DFTK_KW
d4a4 : 01                    	db	DFTK_KW
d4a5 : 01                    	db	DFTK_KW
d4a6 : 01                    	db	DFTK_KW
d4a7 : 01                    	db	DFTK_KW
d4a8 : 01                    	db	DFTK_KW
d4a9 : 01                    	db	DFTK_KW
d4aa : 01                    	db	DFTK_KW
d4ab : 01                    	db	DFTK_KW
d4ac : 01                    	db	DFTK_KW
d4ad : 01                    	db	DFTK_KW
d4ae : 01                    	db	DFTK_KW
d4af : 01                    	db	DFTK_KW
d4b0 : 01                    	db	DFTK_KW
d4b1 : 01                    	db	DFTK_KW
d4b2 : 01                    	db	DFTK_KW
d4b3 : 01                    	db	DFTK_KW
d4b4 : 01                    	db	DFTK_KW
d4b5 : 01                    	db	DFTK_KW
d4b6 : 01                    	db	DFTK_KW
d4b7 : 01                    	db	DFTK_KW
d4b8 : 01                    	db	DFTK_KW
d4b9 : 01                    	db	DFTK_KW
d4ba : 01                    	db	DFTK_KW
d4bb : 01                    	db	DFTK_KW
d4bc : 01                    	db	DFTK_KW
d4bd : 01                    	db	DFTK_KW
d4be : 01                    	db	DFTK_KW
d4bf : 01                    	db	DFTK_KW
d4c0 : 01                    	db	DFTK_KW
d4c1 : 01                    	db	DFTK_KW
d4c2 : 01                    	db	DFTK_KW
d4c3 : 01                    	db	DFTK_KW
d4c4 : 01                    	db	DFTK_KW
d4c5 : 01                    	db	DFTK_KW
d4c6 : 01                    	db	DFTK_KW
d4c7 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank1.s --------------------------------

d4c8 : 01                    	db	DFTK_KW
d4c9 : 01                    	db	DFTK_KW
d4ca : 01                    	db	DFTK_KW
d4cb : 01                    	db	DFTK_KW
d4cc : 01                    	db	DFTK_KW
d4cd : 01                    	db	DFTK_KW
d4ce : 01                    	db	DFTK_KW
d4cf : 01                    	db	DFTK_KW
d4d0 : 01                    	db	DFTK_KW
d4d1 : 01                    	db	DFTK_KW
d4d2 : 01                    	db	DFTK_KW
d4d3 : 01                    	db	DFTK_KW
d4d4 : 01                    	db	DFTK_KW
d4d5 : 01                    	db	DFTK_KW
d4d6 : 01                    	db	DFTK_KW
d4d7 : 01                    	db	DFTK_KW
d4d8 : 01                    	db	DFTK_KW
d4d9 : 01                    	db	DFTK_KW
d4da : 01                    	db	DFTK_KW
d4db : 01                    	db	DFTK_KW
d4dc : 01                    	db	DFTK_KW
d4dd : 01                    	db	DFTK_KW
d4de : 01                    	db	DFTK_KW
d4df : 01                    	db	DFTK_KW
d4e0 : 01                    	db	DFTK_KW
d4e1 : 01                    	db	DFTK_KW
d4e2 : 01                    	db	DFTK_KW
d4e3 : 01                    	db	DFTK_KW
d4e4 : 01                    	db	DFTK_KW
d4e5 : 01                    	db	DFTK_KW
d4e6 : 01                    	db	DFTK_KW
d4e7 : 01                    	db	DFTK_KW
d4e8 : 01                    	db	DFTK_KW
                             
d4e9 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4ea : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4eb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4ec : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4ed : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4ee : 42                    	db 	DFTK_FN | DFTK_STR
d4ef : 42                    	db 	DFTK_FN | DFTK_STR
d4f0 : 42                    	db 	DFTK_FN | DFTK_STR
d4f1 : 42                    	db 	DFTK_FN | DFTK_STR
d4f2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4f3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4f4 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4f5 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4f6 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4f7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4f8 : 42                    	db 	DFTK_FN | DFTK_STR
d4f9 : 42                    	db 	DFTK_FN | DFTK_STR
d4fa : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fc : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fd : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fe : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4ff : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d500 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d501 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
d502 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d503 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank1.s --------------------------------

d504 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d505 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d506 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d507 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
d508 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
d509 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d50a : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d50b : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d50c : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d50d : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d50e : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d50f : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d510 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d511 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-1 HOMEBREW COMPUTER
                             ;*	Hardware and software design by Dolo Miah
                             ;*	Copyright 2014-18
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;* General routine to tokenise a mandatory variab
d512 :                       df_tk_variable
d512 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d515 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
d518 : 20fbcd           [ 6] 	jsr df_tk_isalpha
d51b : 901d             [ 3] 	bcc df_tk_error
d51d : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank1.s --------------------------------

d51f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
d520 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
d520 : a980             [ 2] 	lda #0x80
d522 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
d525 : 2012d5           [ 6] 	jsr df_tk_variable
d528 : 20face           [ 6] 	jsr df_tk_var
                             	; next char sound be =
d52b : a93d             [ 2] 	lda #'='
d52d : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; skip more ws
d530 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; should not be at end of line
d533 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
d536 : f002             [ 3] 	beq df_tk_parse_ass_err
d538 : 18               [ 2] 	clc
d539 : 60               [ 6] 	rts
d53a :                       df_tk_parse_ass_err
d53a :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
d53c :                       df_tk_assign
d53c : 2020d5           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
d53f : 2041d0           [ 6] 	jsr df_tk_expression
d542 : 18               [ 2] 	clc
d543 : 60               [ 6] 	rts
                             
                             
d544 :                       df_tk_comment
                             	; copy all subsequent chars to token
d544 : 20b8cd           [ 6] 	jsr df_tk_get_buf
d547 : f005             [ 3] 	beq df_tk_comment_done
d549 : 20c3cd           [ 6] 	jsr df_tk_put_tok
d54c : 80f6             [ 3] 	bra df_tk_comment
d54e :                       df_tk_comment_done
d54e : 18               [ 2] 	clc
d54f : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
d550 :                       df_tk_listp_procname
                             	; try and find the first proc
d550 : a95f             [ 2] 	lda #'_'
d552 : 2044ce           [ 6] 	jsr df_tk_expect_tok
d555 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
d557 : 20b2cd           [ 6] 	jsr df_tk_peek_buf
d55a : 20fbcd           [ 6] 	jsr df_tk_isalpha
d55d : 9012             [ 3] 	bcc df_tk_listp_procname_err
d55f :                       df_tk_listp_procname_ch
d55f : 20b2cd           [ 6] 	jsr df_tk_peek_buf
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank1.s --------------------------------

d562 : 2008ce           [ 6] 	jsr df_tk_isalphanum
d565 : 9008             [ 3] 	bcc df_tk_listp_procname_ok
d567 : 20b8cd           [ 6] 	jsr df_tk_get_buf
d56a : 20c3cd           [ 6] 	jsr df_tk_put_tok
d56d : 80f0             [ 3] 	bra df_tk_listp_procname_ch
d56f :                       df_tk_listp_procname_ok
d56f : 18               [ 2] 	clc
d570 : 60               [ 6] 	rts
d571 :                       df_tk_listp_procname_err
d571 : 38               [ 2] 	sec
d572 : 60               [ 6] 	rts
                             
d573 :                       df_tk_list
d573 : 2050d5           [ 6] 	jsr df_tk_listp_procname
                             	; if not found try '*' or normal list
d576 : b007             [ 3] 	bcs df_tk_list_procs
                             	; the '-' allows to list to end
d578 : a92d             [ 2] 	lda #'-'
                             	; find and add if it exists
d57a : 2044ce           [ 6] 	jsr df_tk_expect_tok
d57d : 8014             [ 3] 	bra df_tk_list_done
                             	; '*' means list procs
d57f :                       df_tk_list_procs
                             	; try and find the first proc
d57f : a92a             [ 2] 	lda #'*'
d581 : 2044ce           [ 6] 	jsr df_tk_expect_tok
d584 : 900d             [ 3] 	bcc df_tk_list_done
                             	; else normal line number
d586 :                       df_tk_list_line
                             	; tokenise an expression
d586 : 2041d0           [ 6] 	jsr df_tk_expression
                             	; if not at the end then keep going
d589 : a92c             [ 2] 	lda #','
d58b : 2044ce           [ 6] 	jsr df_tk_expect_tok
d58e : b003             [ 3] 	bcs df_tk_list_done
                             	; else get the next expression
d590 : 2041d0           [ 6] 	jsr df_tk_expression	
d593 :                       df_tk_list_done
d593 : 18               [ 2] 	clc
d594 : 60               [ 6] 	rts
                             
d595 :                       df_tk_printat
                             	; Must get 2 parms for x,y
d595 : 205ad6           [ 6] 	jsr df_tk_2parms
                             	; if not at the end then keep going
d598 : a92c             [ 2] 	lda #','
d59a : 2044ce           [ 6] 	jsr df_tk_expect_tok
d59d : 9002             [ 3] 	bcc df_tk_print
                             	; else done
d59f : 18               [ 2] 	clc
d5a0 : 60               [ 6] 	rts
d5a1 :                       df_tk_data
d5a1 :                       df_tk_println
d5a1 :                       df_tk_print
d5a1 :                       df_tk_asm_db
d5a1 :                       df_tk_asm_dw
                             	; tokenise an expression
d5a1 : 2041d0           [ 6] 	jsr df_tk_expression
                             	; is there more to come?
d5a4 : a92c             [ 2] 	lda #','
d5a6 : 2044ce           [ 6] 	jsr df_tk_expect_tok
d5a9 : b002             [ 3] 	bcs df_tk_print_done
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank1.s --------------------------------

d5ab : 80f4             [ 3] 	bra df_tk_print
d5ad :                       df_tk_print_done
d5ad : 18               [ 2] 	clc
d5ae : 60               [ 6] 	rts
                             
d5af :                       df_tk_input
d5af : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d5b2 : 2012d5           [ 6] 	jsr df_tk_variable
d5b5 : 20face           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
d5b8 : 60               [ 6] 	rts
                             	
d5b9 :                       df_tk_read
                             	; tokenise a variable
d5b9 : 2012d5           [ 6] 	jsr df_tk_variable
d5bc : 20face           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
d5bf : a92c             [ 2] 	lda #','
d5c1 : 2044ce           [ 6] 	jsr df_tk_expect_tok
d5c4 : 90f3             [ 3] 	bcc df_tk_read
d5c6 : 18               [ 2] 	clc
d5c7 : 60               [ 6] 	rts
                             
d5c8 :                       df_tk_dim
                             	; tokenise a variable
d5c8 : 2012d5           [ 6] 	jsr df_tk_variable
d5cb : 2042cf           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
d5ce : a92c             [ 2] 	lda #','
d5d0 : 2044ce           [ 6] 	jsr df_tk_expect_tok
d5d3 : 90f3             [ 3] 	bcc df_tk_dim
d5d5 : 18               [ 2] 	clc
d5d6 : 60               [ 6] 	rts
                             
d5d7 :                       df_tk_local
d5d7 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d5da : 2012d5           [ 6] 	jsr df_tk_variable
d5dd : 202ccf           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
d5e0 : a92c             [ 2] 	lda #','
d5e2 : 2044ce           [ 6] 	jsr df_tk_expect_tok
d5e5 : 90f0             [ 3] 	bcc df_tk_local
d5e7 : 18               [ 2] 	clc
d5e8 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
d5e9 :                       df_tk_def
d5e9 : a900             [ 2] 	lda #0
d5eb : 204dcf           [ 6] 	jsr df_tk_proc
d5ee : 60               [ 6] 	rts
                             
                             
                             ; syntax : for %a=1,10,1
d5ef :                       df_tk_for
d5ef : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
d5f2 : a901             [ 2] 	lda #DFVVT_INT
d5f4 : 20face           [ 6] 	jsr df_tk_var
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank1.s --------------------------------

                             
                             	; always expect '='
d5f7 : a93d             [ 2] 	lda #'='
d5f9 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; starting value
d5fc : 2041d0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d5ff : a92c             [ 2] 	lda #','
d601 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; ending value
d604 : 2041d0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d607 : a92c             [ 2] 	lda #','
d609 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             	
                             	; step value
d60c : 2041d0           [ 6] 	jsr df_tk_expression
d60f :                       df_tk_for_done
d60f : 18               [ 2] 	clc
d610 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
d611 :                       df_tk_callproc
d611 : 38               [ 2] 	sec
d612 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
d613 :                       df_tk_reset
d613 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d616 : a901             [ 2] 	lda #DFVVT_INT
d618 : 20face           [ 6] 	jsr df_tk_var
d61b : 60               [ 6] 	rts
                             
                             ; date time expects a string variable only
d61c :                       df_tk_datetime
d61c : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d61f : a904             [ 2] 	lda #DFVVT_STR
d621 : 20face           [ 6] 	jsr df_tk_var
d624 : 60               [ 6] 	rts
                             
                             ; These functions expect 1 parmeter
d625 :                       df_tk_len
d625 :                       df_tk_chr
d625 :                       df_tk_key
d625 :                       df_tk_stick
d625 :                       df_tk_deek
d625 :                       df_tk_vpeek
d625 :                       df_tk_peek
d625 :                       df_tk_nvpeek
d625 :                       df_tk_mem
d625 :                       df_tk_rnd
d625 :                       df_tk_hex
d625 :                       df_tk_dec
d625 :                       df_tk_asc
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank1.s --------------------------------

d625 :                       df_tk_val
d625 :                       df_tk_sgn
d625 :                       df_tk_fcreate
d625 :                       df_tk_fopen
d625 : 2041d0           [ 6] 	jsr df_tk_expression
d628 :                       df_tk_closebrkt
d628 : a929             [ 2] 	lda #')'
d62a : 204fce           [ 6] 	jsr df_tk_expect_tok_err
d62d : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
d62e :                       df_tk_addr
d62e :                       df_tk_elapsed
d62e : 2012d5           [ 6] 	jsr df_tk_variable
d631 : 20face           [ 6] 	jsr df_tk_var
                             	; must have close braket
d634 : 4c28d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
d637 :                       df_tk_left
d637 :                       df_tk_right
d637 :                       df_tk_scrn
d637 :                       df_tk_pixel
d637 : 205ad6           [ 6] 	jsr df_tk_2parms
d63a : 4c28d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
d63d :                       df_tk_mid
d63d : 2066d6           [ 6] 	jsr df_tk_3parms
d640 : 4c28d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
d643 :                       df_tk_call
d643 : 205ad6           [ 6] 	jsr df_tk_2parms
d646 : a92c             [ 2] 	lda #','
d648 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
d64b : 205ad6           [ 6] 	jsr df_tk_2parms
d64e : 4c28d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
d651 :                       df_tk_else
d651 :                       df_tk_endif
d651 :                       df_tk_enddef
d651 :                       df_tk_abort
d651 :                       df_tk_repeat
d651 :                       df_tk_next
d651 :                       df_tk_wend
d651 :                       df_tk_run
d651 :                       df_tk_add
d651 :                       df_tk_sadd
d651 :                       df_tk_dir
d651 :                       df_tk_dirl
d651 :                       df_tk_cls
d651 :                       df_tk_new
d651 :                       df_tk_mult
d651 :                       df_tk_div
d651 :                       df_tk_mod
d651 :                       df_tk_asl
d651 :                       df_tk_lsr
d651 :                       df_tk_sub
d651 :                       df_tk_and
d651 :                       df_tk_or
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank1.s --------------------------------

d651 :                       df_tk_eor
d651 :                       df_tk_lte
d651 :                       df_tk_lt
d651 :                       df_tk_gte
d651 :                       df_tk_gt
d651 :                       df_tk_ne
d651 :                       df_tk_eq
d651 :                       df_tk_monitor
d651 :                       df_tk_fclose
                             ;df_tk_retsub
d651 : 18               [ 2] 	clc
d652 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
d653 :                       df_tk_return
d653 : 4c41d0           [ 3] 	jmp df_tk_expression
                             
                             ; These commands expect 1 parameter	
d656 :                       df_tk_while
d656 :                       df_tk_until
d656 :                       df_tk_if
d656 :                       df_tk_elseif
d656 :                       df_tk_wait
d656 :                       df_tk_cursor
d656 :                       df_tk_mode
d656 :                       df_tk_del
d656 :                       df_tk_chdir
d656 :                       df_tk_mkdir
d656 :                       df_tk_hires
d656 :                       df_tk_load
d656 :                       df_tk_save
d656 :                       df_tk_pixmode
d656 :                       df_tk_pixmask
d656 :                       df_tk_pixcol
d656 :                       df_tk_himem
d656 :                       df_tk_font
d656 :                       df_tk_device
                             ;df_tk_goto
                             ;df_tk_gosub
                             
d656 :                       df_tk_asm_org
d656 :                       df_tk_asm_opt
d656 :                       df_tk_asm_ds
                             
                             	; first parm
d656 : 2041d0           [ 6] 	jsr df_tk_expression
d659 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
d65a :                       df_tk_setvdp
d65a :                       df_tk_spritepat
d65a :                       df_tk_spritecol
d65a :                       df_tk_spritenme
d65a :                       df_tk_vpoke
d65a :                       df_tk_poke
d65a :                       df_tk_doke
d65a :                       df_tk_nvpoke
d65a :                       df_tk_point
d65a :                       df_tk_vload
d65a :                       df_tk_2parms
                             	; first parm
d65a : 2041d0           [ 6] 	jsr df_tk_expression
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank1.s --------------------------------

d65d : a92c             [ 2] 	lda #','
d65f : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise second parm
d662 : 2041d0           [ 6] 	jsr df_tk_expression
d665 : 60               [ 6] 	rts
                             
                             ; these commands expect 3 numeric parameters
d666 :                       df_tk_hplot
d666 :                       df_tk_plot
d666 :                       df_tk_circle
d666 :                       df_tk_sound
d666 :                       df_tk_colour
d666 :                       df_tk_spritepos
d666 :                       df_tk_shape
d666 :                       df_tk_renum
d666 :                       df_tk_3parms
d666 : 205ad6           [ 6] 	jsr df_tk_2parms
d669 : a92c             [ 2] 	lda #','
d66b : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise third parm
d66e : 2041d0           [ 6] 	jsr df_tk_expression
d671 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
d672 :                       df_tk_play
d672 :                       df_tk_music
d672 :                       df_tk_line
d672 :                       df_tk_box
d672 :                       df_tk_bload
d672 :                       df_tk_4parms
d672 : 205ad6           [ 6] 	jsr df_tk_2parms
d675 : a92c             [ 2] 	lda #','
d677 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
d67a : 205ad6           [ 6] 	jsr df_tk_2parms
d67d : 60               [ 6] 	rts
                             
                             ; these commands expect 5 numeric parameters
d67e :                       df_tk_sprite
d67e :                       df_tk_bsave
d67e :                       df_tk_5parms
d67e : 2072d6           [ 6] 	jsr df_tk_4parms
d681 : a92c             [ 2] 	lda #','
d683 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
d686 : 2041d0           [ 6] 	jsr df_tk_expression
d689 : 60               [ 6] 	rts
                             
                             
                             
d68a :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank1.s --------------------------------

                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
d68a :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
d68a :                       df_pg_find_line
d68a : a4a7             [ 3] 	ldy df_prgstrt		; num_tmp contains starting poin
d68c : 8491             [ 3] 	sty num_tmp
d68e : a4a8             [ 3] 	ldy df_prgstrt+1
d690 : 8492             [ 3] 	sty num_tmp+1
d692 : 8685             [ 3] 	stx num_a			; num_a contains the line number to 
d694 : 8586             [ 3] 	sta num_a+1
d696 :                       df_pg_check_next_line	; Also used during runtime 
d696 : a591             [ 3] 	lda num_tmp
d698 : c5a9             [ 3] 	cmp df_prgend
d69a : d011             [ 3] 	bne df_pg_check_line
d69c : a592             [ 3] 	lda num_tmp+1
d69e : c5aa             [ 3] 	cmp df_prgend+1
d6a0 : d00b             [ 3] 	bne df_pg_check_line
d6a2 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
d6a2 : a200             [ 2] 	ldx #0
d6a4 : a191             [ 6] 	lda (num_tmp,x)
d6a6 : a8               [ 2] 	tay
d6a7 : a691             [ 3] 	ldx num_tmp
d6a9 : a592             [ 3] 	lda num_tmp+1
d6ab : 38               [ 2] 	sec
d6ac : 60               [ 6] 	rts
d6ad :                       df_pg_check_line
d6ad : 38               [ 2] 	sec					; Do a trial subtract of
d6ae : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
d6b0 : a585             [ 3] 	lda num_a
d6b2 : f191             [ 5] 	sbc (num_tmp),y
d6b4 : 8593             [ 3] 	sta num_tmp+2		; Partial result of sbc
d6b6 : c8               [ 2] 	iny
d6b7 : a586             [ 3] 	lda num_a+1
d6b9 : f191             [ 5] 	sbc (num_tmp),y
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank1.s --------------------------------

d6bb : 0593             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
d6bd : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
d6bf : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
d6c1 : a200             [ 2] 	ldx #0
d6c3 : 18               [ 2] 	clc
d6c4 : a591             [ 3] 	lda num_tmp
d6c6 : 6191             [ 6] 	adc (num_tmp,x)
d6c8 : 8591             [ 3] 	sta num_tmp
d6ca : 90ca             [ 3] 	bcc df_pg_check_next_line
d6cc : e692             [ 5] 	inc num_tmp+1
d6ce : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
d6d0 :                       df_pr_line_match
d6d0 : a200             [ 2] 	ldx #0
d6d2 : a191             [ 6] 	lda (num_tmp,x)
d6d4 : a8               [ 2] 	tay
d6d5 : a691             [ 3] 	ldx num_tmp
d6d7 : a592             [ 3] 	lda num_tmp+1
d6d9 : 18               [ 2] 	clc
d6da : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d6db :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
d6db : 8685             [ 3] 	stx num_a
d6dd : 8586             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
d6df : a5a9             [ 3] 	lda df_prgend
d6e1 : 858d             [ 3] 	sta num_x
d6e3 : a5aa             [ 3] 	lda df_prgend+1
d6e5 : 858e             [ 3] 	sta num_x+1	
d6e7 :                       df_pg_insert_byte
                             	; Move a byte from the current top
d6e7 : a200             [ 2] 	ldx #0
d6e9 : a18d             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
d6eb : 918d             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
d6ed : a58d             [ 3] 	lda num_x
d6ef : c585             [ 3] 	cmp num_a
d6f1 : d012             [ 4] 	bne df_pg_insert_next_byte
d6f3 : a58e             [ 3] 	lda num_x+1
d6f5 : c586             [ 3] 	cmp num_a+1
d6f7 : d00c             [ 4] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
d6f9 : 18               [ 2] 	clc
d6fa : 98               [ 2] 	tya
d6fb : 65a9             [ 3] 	adc df_prgend
d6fd : 85a9             [ 3] 	sta df_prgend
                             	_bcc 2
                             
d701 : e6aa             [ 5] 	inc df_prgend+1
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank1.s --------------------------------

d703 : 18               [ 2] 	clc
d704 : 60               [ 6] 	rts	; C=0
d705 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
d712 : 4ce7d6           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d715 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
d715 : 8685             [ 3] 	stx num_a
d717 : 8586             [ 3] 	sta num_a+1
d719 : a200             [ 2] 	ldx #0	; No indirect indexing
d71b :                       df_pg_delete_byte
                             	; Move a byte from current+Y
d71b : b185             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
d71d : 8185             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
d71f : a585             [ 3] 	lda num_a
d721 : c5a9             [ 3] 	cmp df_prgend
d723 : d017             [ 3] 	bne df_pg_delete_next_byte
d725 : a586             [ 3] 	lda num_a+1
d727 : c5aa             [ 3] 	cmp df_prgend+1
d729 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
d72b : 8485             [ 3] 	sty num_a
d72d : 38               [ 2] 	sec
d72e : a5a9             [ 3] 	lda df_prgend
d730 : e585             [ 3] 	sbc num_a
d732 : 85a9             [ 3] 	sta df_prgend
d734 : a5aa             [ 3] 	lda df_prgend+1
d736 : e900             [ 2] 	sbc #0
d738 : 85aa             [ 3] 	sta df_prgend+1
d73a : 18               [ 2] 	clc
d73b : 60               [ 6] 	rts
d73c :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
d742 : 4c1bd7           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
d745 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input into df_linbuff
d745 : a200             [ 2] 	ldx #lo(df_linbuff)
d747 : a90a             [ 2] 	lda #hi(df_linbuff)
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank1.s --------------------------------

d749 : a078             [ 2] 	ldy #120
d74b : 2057c5           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
d74e : 98               [ 2] 	tya
d74f : d002             [ 3] 	bne df_pg_inputline_ok
d751 : 38               [ 2] 	sec
d752 : 60               [ 6] 	rts
d753 :                       df_pg_inputline_ok
d753 : 18               [ 2] 	clc
d754 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
d755 :                       df_pg_dflat
                             	; reset stack pointer
d755 : a2ff             [ 2] 	ldx #255
d757 : 9a               [ 2] 	txs
                             
                             	; error handler address
d758 : a993             [ 2] 	lda #lo(df_trap_error)
d75a : 85a2             [ 3] 	sta df_pc
d75c : a9f2             [ 2] 	lda #hi(df_trap_error)
d75e : 85a3             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
d760 :                       df_pg_prompt
d760 : a2f2             [ 2] 	ldx #lo(df_pg_prompt_msg)
d762 : a9d7             [ 2] 	lda #hi(df_pg_prompt_msg)
d764 : 2093c5           [ 6] 	jsr io_print_line
d767 : a900             [ 2] 	lda #0
d769 : 85a0             [ 3] 	sta df_immed
d76b :                       df_pg_getcommand
                             	; current line is the token buffer when editing
d76b : a980             [ 2] 	lda #lo(df_tokbuff)
d76d : 85c8             [ 3] 	sta df_currlin
d76f : a90a             [ 2] 	lda #hi(df_tokbuff)
d771 : 85c9             [ 3] 	sta df_currlin+1
d773 : 38               [ 2] 	sec
d774 : 2045d7           [ 6] 	jsr df_pg_inputline
d777 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
d779 : 2092d7           [ 6] 	jsr df_pg_tokenise
d77c : a5a0             [ 3] 	lda df_immed
d77e : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
d780 : 20f9d7           [ 6] 	jsr df_initrun
                             	; run from tokbuff
d783 : a280             [ 2] 	ldx #lo(df_tokbuff)
d785 : a90a             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
d787 : a003             [ 2] 	ldy #3
                             ;	sty df_exeoff
                             	; init currlin
d789 : 207fdb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
d78c : 2090db           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
d78f : 4c60d7           [ 3] 	jmp df_pg_prompt
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank1.s --------------------------------

                             
                             	; tokenise the line
d792 :                       df_pg_tokenise
d792 : a900             [ 2] 	lda #0
d794 : 859f             [ 3] 	sta errno
d796 : 2085d0           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
d799 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d79c : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
d79f : d00f             [ 3] 	bne df_pg_line_number
                             	; check if line empty
d7a1 : ad800a           [ 4] 	lda df_tokbuff
d7a4 : f009             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
d7a6 : a901             [ 2] 	lda #1
d7a8 : 85a0             [ 3] 	sta df_immed
                             	; Zero out text line buffer
d7aa : a900             [ 2] 	lda #0
d7ac : 8d000a           [ 4] 	sta df_linbuff
d7af :                       df_pg_nothing
d7af : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
d7b0 :                       df_pg_line_number
                             	; Check if this line exists
d7b0 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d7b3 : aa               [ 2] 	tax
d7b4 : ad820a           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
d7b7 : 208ad6           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
d7ba : 8545             [ 3] 	sta tmp_d
d7bc : 8a               [ 2] 	txa
d7bd : 48               [ 3] 	pha
d7be : a545             [ 3] 	lda tmp_d
d7c0 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
d7c1 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
d7c3 : 2015d7           [ 6] 	jsr df_pg_delete_block
d7c6 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
d7c6 : ad800a           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
d7c9 : 48               [ 3] 	pha
d7ca : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
d7cc : 68               [ 4] 	pla
d7cd : 68               [ 4] 	pla
d7ce : 68               [ 4] 	pla
d7cf : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
d7d0 :                       df_pg_insertline
                             	; Restore previously saved length
d7d0 : 68               [ 4] 	pla
d7d1 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank1.s --------------------------------

d7d2 : 68               [ 4] 	pla
d7d3 : 8545             [ 3] 	sta tmp_d
d7d5 : 68               [ 4] 	pla
d7d6 : aa               [ 2] 	tax
d7d7 : a545             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
d7dc : 20dbd6           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
d7df : 68               [ 4] 	pla
d7e0 : a8               [ 2] 	tay
d7e1 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
d7e2 : 68               [ 4] 	pla
d7e3 : aa               [ 2] 	tax
d7e4 : 8685             [ 3] 	stx num_a
d7e6 : 68               [ 4] 	pla
d7e7 : 8586             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
d7e9 :                       df_pg_insertlinbyte
d7e9 : b9800a           [ 4] 	lda df_tokbuff,y
d7ec : 9185             [ 5] 	sta (num_a),y
d7ee : 88               [ 2] 	dey
d7ef : 10f8             [ 3] 	bpl df_pg_insertlinbyte
d7f1 : 60               [ 6] 	rts
                             	
d7f2 :                       df_pg_prompt_msg
d7f2 : 52656164790d00        	db "Ready",UTF_CR,0
                             
d7f9 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d7f9 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
d7f9 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
d7f9 : a910             [ 2] 	lda #0x10
d7fb : 859e             [ 3] 	sta df_checkmsk
d7fd : 859d             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
d815 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
d817 : 86b8             [ 3] 	stx df_rtstop
                             	; make X=0
d819 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
d81a : 86b9             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
d81c : 86d7             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
d81e : 86d5             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
d820 : 2024d8           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
d823 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
d824 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d82c : a200             [ 2] 	ldx #0
d82e :                       df_rt_init_vvt_slot
d82e : a5e3             [ 3] 	lda df_tmpptra
d830 : c5af             [ 3] 	cmp df_vvtstrt
d832 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
d834 : a5e4             [ 3] 	lda df_tmpptra+1
d836 : c5b0             [ 3] 	cmp df_vvtstrt+1
d838 : f02b             [ 3] 	beq df_rt_init_done
d83a :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
d83a : a000             [ 2] 	ldy #0
d83c : b1e3             [ 5] 	lda (df_tmpptra),y
d83e : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
d840 : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
d842 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
d843 : a900             [ 2] 	lda #0
d845 : 91e3             [ 5] 	sta (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank1.s --------------------------------

d847 : c8               [ 2] 	iny
d848 : 91e3             [ 5] 	sta (df_tmpptra),y
d84a : c8               [ 2] 	iny
d84b : 91e3             [ 5] 	sta (df_tmpptra),y
d84d : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
                             ;	lda (df_tmpptra,x)
d84e : b2e3             [ 5] 	lda (df_tmpptra)
d850 : 2940             [ 2] 	and #DFVVT_PROC
d852 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
d854 : a900             [ 2] 	lda #0
d856 : 91e3             [ 5] 	sta (df_tmpptra),y
d858 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
                             ;	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
d863 : 80c9             [ 3] 	bra df_rt_init_vvt_slot 	; Don't rely on bcc
d865 :                       df_rt_init_done
d865 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
d866 :                       df_rt_getnval
                             	; evaluate the expression
d866 : 206cd8           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
d869 : 4c67f1           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
d86c :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
d86c : a900             [ 2] 	lda #0
d86e : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
d86f :                       df_rt_neval_optk
d86f : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
d871 : c4c1             [ 3] 	cpy df_nxtstidx
d873 : f03a             [ 3] 	beq df_rt_neval_process
d875 : b1c8             [ 5] 	lda (df_currlin),y		; Get the byte which could b
d877 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
d879 : c920             [ 2] 	cmp #DFTK_ESCVAL		; >=32 means it's an normal ch
d87b : b007             [ 3] 	bcs df_rt_neval_chr
d87d :                       df_rt_neval_esc
d87d : 20f1d8           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank1.s --------------------------------

d880 : e6ca             [ 5] 	inc df_exeoff
d882 : d0eb             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
d884 :                       df_rt_neval_chr
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
d884 : c92c             [ 2] 	cmp #','
d886 : f027             [ 3] 	beq df_rt_neval_process
d888 : c95d             [ 2] 	cmp #']'
d88a : f023             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
d88c : c929             [ 2] 	cmp #')'
d88e : f01f             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
d890 : e6ca             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
d892 : c928             [ 2] 	cmp #'('
d894 : d0d9             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
d896 : 206cd8           [ 6] 	jsr df_rt_neval
                             	; move to next byte
d899 : e6ca             [ 5] 	inc df_exeoff
d89b : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
d89d :                       df_rt_neval_tk
d89d : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
d89f : aa               [ 2] 	tax
d8a0 : bd9dd4           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
d8a3 : 48               [ 3] 	pha
d8a4 : 2908             [ 2] 	and #DFTK_OP
d8a6 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
d8a8 : 68               [ 4] 	pla
d8a9 : 2902             [ 2] 	and #DFTK_FN
d8ab : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
d8af :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
d8af : 68               [ 4] 	pla
d8b0 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
d8b2 : 20f6db           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
d8b5 : 4cafd8           [ 3] 	jmp df_rt_neval_process
d8b8 :                       df_rt_neval_done
d8b8 : 60               [ 6] 	rts
                             
d8b9 :                       df_rt_neval_tk_fn
d8b9 : 18               [ 2] 	clc
d8ba : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
d8bb : e6ca             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank1.s --------------------------------

d8bd : 20f6db           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
d8c0 :                       df_rt_neval_nextbyte
d8c0 : e6ca             [ 5] 	inc df_exeoff
d8c2 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
d8c4 :                       df_rt_neval_tk_opp
d8c4 : 68               [ 4] 	pla				; Get A off stack which is the type
d8c5 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
d8c5 : 86e3             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
d8c7 : 2907             [ 2] 	and #DFTK_OPMSK
d8c9 : 85e5             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
d8cb : 68               [ 4] 	pla
d8cc : 48               [ 3] 	pha
d8cd : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
d8ce : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
d8d0 : bd9dd4           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
d8d3 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
d8d5 : c5e5             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
d8d7 : f002             [ 3] 	beq df_rt_neval_donow
d8d9 : b011             [ 3] 	bcs df_rt_neval_pushOp
d8db :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
d8db : 68               [ 4] 	pla
d8dc : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
d8dd : a5e3             [ 3] 	lda df_tmpptra
d8df : 48               [ 3] 	pha
d8e0 : aa               [ 2] 	tax		; X = current op
d8e1 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
d8e2 : 20f6db           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
d8e5 : 68               [ 4] 	pla
d8e6 : aa               [ 2] 	tax
                             	; get the token type in to A
d8e7 : bd9dd4           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
d8ea : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
d8ec :                       df_rt_neval_pushOp
                             	; push the operator
d8ec : a5e3             [ 3] 	lda df_tmpptra
d8ee : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank1.s --------------------------------

                             	; move to next byte
d8ef : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
d8f1 :                       df_rt_eval_esc
d8f1 : 0a               [ 2] 	asl a
d8f2 : aa               [ 2] 	tax
d8f3 : 7cf6d8           [ 6] 	jmp (df_rt_eval_esc_tab,x)
                             ;	lda df_rt_eval_esc_tab,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_eval_esc_tab+1,x
                             ;	sta df_tmpptra+1
                             ;	jmp (df_tmpptra)
                             
d8f6 :                       df_rt_eval_esc_tab
d8f6 : b3d9                  	dw df_rt_eval_chr
d8f8 : bfd9                  	dw df_rt_eval_reserved
d8fa : bfd9                  	dw df_rt_eval_reserved
d8fc : bfd9                  	dw df_rt_eval_reserved
d8fe : bfd9                  	dw df_rt_eval_reserved
d900 : bfd9                  	dw df_rt_eval_reserved	; no such thing as bytdec
d902 : b3d9                  	dw df_rt_eval_bythex
d904 : b3d9                  	dw df_rt_eval_bytbin
d906 : bfd9                  	dw df_rt_eval_reserved
d908 : b3d9                  	dw df_rt_eval_intdec
d90a : b3d9                  	dw df_rt_eval_inthex
d90c : b3d9                  	dw df_rt_eval_intbin
d90e : bfd9                  	dw df_rt_eval_reserved
d910 : bfd9                  	dw df_rt_eval_reserved
d912 : bfd9                  	dw df_rt_eval_reserved
d914 : bfd9                  	dw df_rt_eval_reserved
d916 : c1d9                  	dw df_rt_eval_strlit
d918 : 06da                  	dw df_rt_eval_var
d91a : f3da                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
d91c :                       df_rt_seval
d91c : a6bc             [ 3] 	ldx df_sevalptr
d91e : a5bd             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
d920 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
d920 : 8545             [ 3] 	sta tmp_d
d922 : 48               [ 3] 	pha
d923 : 8a               [ 2] 	txa
d924 : 48               [ 3] 	pha
d925 : a545             [ 3] 	lda tmp_d
                             	; push original destination
d927 : 203cf1           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank1.s --------------------------------

                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_ost_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
d92a :                       df_rt_seval_optk
d92a : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
d92c : c4c1             [ 3] 	cpy df_nxtstidx
d92e : f069             [ 3] 	beq df_rt_seval_done
                             
d930 : b1c8             [ 5] 	lda (df_currlin),y
d932 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
d934 : c920             [ 2] 	cmp #DFTK_ESCVAL
d936 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
d938 : c92c             [ 2] 	cmp #','
d93a : f05d             [ 3] 	beq df_rt_seval_done
d93c : c929             [ 2] 	cmp #')'
d93e : f059             [ 3] 	beq df_rt_seval_done
d940 : d04a             [ 3] 	bne df_rt_seval_nextbyte
d942 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
d942 : c910             [ 2] 	cmp #DFTK_STRLIT
d944 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
d946 : c911             [ 2] 	cmp #DFTK_VAR
d948 : f028             [ 3] 	beq	df_rt_seval_esc_var
d94a : c912             [ 2] 	cmp #DFTK_PROC
d94c : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
d950 :                       df_rt_seval_tk
d950 : 84ca             [ 3] 	sty df_exeoff
d952 : 297f             [ 2] 	and #0x7f
                             	; check if op
d954 : aa               [ 2] 	tax
d955 : bd9dd4           [ 4] 	lda df_tk_tokentype,x
d958 : 2904             [ 2] 	and #DFTK_STROP
d95a : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
d95c : bd9dd4           [ 4] 	lda df_tk_tokentype,x
d95f : 2902             [ 2] 	and #DFTK_FN
d961 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
d965 :                       df_rt_seval_tk_op
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank1.s --------------------------------

                             	; the only op is $+
                             	; so just ignore!
d965 : 8a               [ 2] 	txa
d966 : 4c8cd9           [ 3] 	jmp df_rt_seval_nextbyte
                             
d969 :                       df_rt_seval_tk_fn
d969 : 8a               [ 2] 	txa
d96a : e6ca             [ 5] 	inc df_exeoff
d96c : 20f6db           [ 6] 	jsr df_rt_run_token
d96f : 4c76d9           [ 3] 	jmp df_rt_seval_copy
                             
d972 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
d972 : 18               [ 2] 	clc
d973 : 2006da           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
d976 :                       df_rt_seval_copy
                             	; pull destination pointer
d976 : 68               [ 4] 	pla
d977 : 85e3             [ 3] 	sta df_tmpptra
d979 : 68               [ 4] 	pla
d97a : 85e4             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
d97c : 205ff1           [ 6] 	jsr df_ost_popStr
d97f : 86e5             [ 3] 	stx df_tmpptrb
d981 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
d983 : 209dd9           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
d986 : a5e4             [ 3] 	lda df_tmpptra+1
d988 : 48               [ 3] 	pha
d989 : a5e3             [ 3] 	lda df_tmpptra
d98b : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
d98c :                       df_rt_seval_nextbyte
d98c : e6ca             [ 5] 	inc df_exeoff
d98e : 4c2ad9           [ 3] 	jmp df_rt_seval_optk
                             
d991 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
d991 : 20c1d9           [ 6] 	jsr df_rt_eval_strlit
d994 : 4c76d9           [ 3] 	jmp df_rt_seval_copy
                             
d997 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
d999 :                       df_rt_seval_done
                             	;
d999 : 68               [ 4] 	pla
d99a : 68               [ 4] 	pla
                             
d99b : 18               [ 2] 	clc
d99c : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
d99d :                       df_rt_copyStr
d99d : a000             [ 2] 	ldy #0
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank1.s --------------------------------

d99f :                       df_rt_copyStr_ch
d99f : b1e5             [ 5] 	lda (df_tmpptrb),y
d9a1 : 91e3             [ 5] 	sta (df_tmpptra),y
d9a3 : f003             [ 3] 	beq df_rt_copyStr_done
d9a5 : c8               [ 2] 	iny
d9a6 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
d9a8 :                       df_rt_copyStr_done
d9a8 : 98               [ 2] 	tya
d9a9 : 18               [ 2] 	clc
d9aa : 65e3             [ 3] 	adc df_tmpptra
d9ac : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d9b0 : e6e4             [ 5] 	inc df_tmpptra+1
d9b2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
d9b3 :                       df_rt_eval_intdec
d9b3 :                       df_rt_eval_bytdec
d9b3 :                       df_rt_eval_inthex
d9b3 :                       df_rt_eval_bythex
d9b3 :                       df_rt_eval_intbin
d9b3 :                       df_rt_eval_bytbin
d9b3 :                       df_rt_eval_chr
                             	; numeric constant
d9b3 : c8               [ 2] 	iny
d9b4 : b1c8             [ 5] 	lda (df_currlin),y
d9b6 : aa               [ 2] 	tax
d9b7 : c8               [ 2] 	iny
d9b8 : b1c8             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
d9ba : 84ca             [ 3] 	sty df_exeoff
                             	; push number on to stack
d9bc : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
d9bf :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
d9c1 :                       df_rt_eval_strlit
d9c1 : 84ca             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
d9c3 : 98               [ 2] 	tya
                             	; set carry to add one extra
d9c4 : 38               [ 2] 	sec
d9c5 : 65c8             [ 3] 	adc df_currlin
d9c7 : aa               [ 2] 	tax
d9c8 : a5c9             [ 3] 	lda df_currlin+1
d9ca : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
d9cc : 203cf1           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
d9cf : a4ca             [ 3] 	ldy df_exeoff
d9d1 :                       df_rt_eval_strlit_ch
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank1.s --------------------------------

d9d1 : b1c8             [ 5] 	lda (df_currlin),y
d9d3 : f003             [ 3] 	beq df_rt_eval_strlit_done
d9d5 : c8               [ 2] 	iny
d9d6 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
d9d8 :                       df_rt_eval_strlit_done	; Always relying on Y neve
d9d8 : 84ca             [ 3] 	sty df_exeoff
d9da : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
d9db :                       df_rt_arry_parm
                             	; move past open bracket or comma
d9db : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
d9dd : 2066d8           [ 6] 	jsr df_rt_getnval
d9e0 : 8a               [ 2] 	txa
                             ;	clc
d9e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
d9e2 :                       df_rt_arry_parm2
                             	; go get array parm 1
d9e2 : 20dbd9           [ 6] 	jsr df_rt_arry_parm
d9e5 : 48               [ 3] 	pha
d9e6 : a200             [ 2] 	ldx #0
d9e8 : a4ca             [ 3] 	ldy df_exeoff
d9ea :                       df_rt_arry_parm2_term
d9ea : b1c8             [ 5] 	lda (df_currlin),y
d9ec : c95d             [ 2] 	cmp #']'
d9ee : f011             [ 4] 	beq df_rt_arry_parm2_skiparry2
d9f0 : c92c             [ 2] 	cmp #','
d9f2 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
d9f4 : 84ca             [ 3] 	sty df_exeoff
d9f6 : c8               [ 2] 	iny
d9f7 : 4cead9           [ 3] 	jmp df_rt_arry_parm2_term
d9fa :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
d9fa : 20dbd9           [ 6] 	jsr df_rt_arry_parm
d9fd : a8               [ 2] 	tay
d9fe : 68               [ 4] 	pla
d9ff : aa               [ 2] 	tax
                             ;	clc
da00 : 60               [ 6] 	rts
da01 :                       df_rt_arry_parm2_skiparry2
da01 : a000             [ 2] 	ldy #0
da03 : 68               [ 4] 	pla
da04 : aa               [ 2] 	tax
                             ;	clc
da05 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
da06 :                       df_rt_eval_var
                             	; save carry bit
                             ;	php
                             	; if lvar mode then already passed escape token
da06 : b00c             [ 3] 	bcs df_rt_eval_skip_init
                             	; move past var escape token
da08 : c8               [ 2] 	iny
                             	; get var vvt address
da09 : b1c8             [ 5] 	lda (df_currlin),y
da0b : 85e3             [ 3] 	sta df_tmpptra
da0d : c8               [ 2] 	iny
da0e : 84ca             [ 3] 	sty df_exeoff
da10 : b1c8             [ 5] 	lda (df_currlin),y
da12 : 85e4             [ 3] 	sta df_tmpptra+1
da14 :                       df_rt_eval_skip_init
                             	; push vvt type first as this is the last thing 
                             ;	ldx #0
                             ;	lda (df_tmpptra,x)
da14 : b2e3             [ 5] 	lda (df_tmpptra)
da16 : 1010             [ 3] 	bpl df_rt_eval_simple_var
da18 : aa               [ 2] 	tax					; Keep A (type) in X for later
                             ;	pha
                             ;	; Test A
                             ;	tax
                             ;	; simple variable
                             ;	bpl df_rt_eval_simple_var
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
                             ;	cpy df_eolidx
                             ;	beq df_rt_eval_var_simple
da19 : 08               [ 3] 	php			; Save lvar pref for later
da1a : c4c1             [ 3] 	cpy df_nxtstidx
da1c : f024             [ 3] 	beq df_rt_eval_var_ptr
                             	; if next ch is not [ then simple copy
da1e : c8               [ 2] 	iny
da1f : b1c8             [ 5] 	lda (df_currlin),y
da21 : 88               [ 2] 	dey
da22 : c95b             [ 2] 	cmp #'['
da24 : d01c             [ 3] 	bne df_rt_eval_var_ptr
                             	; go do array handling
da26 : f027             [ 3] 	beq df_rt_eval_var_do_arry
da28 :                       df_rt_eval_simple_var
                             	; pull C and check if lvar wanted rather than rv
                             ;	plp
da28 : b00c             [ 3] 	bcs df_rt_eval_simple_lvar
                             	; just push the vvt lo,hi value
da2a : a001             [ 2] 	ldy #DFVVT_LO
da2c : b1e3             [ 5] 	lda (df_tmpptra),y
da2e : aa               [ 2] 	tax
da2f : a002             [ 2] 	ldy #DFVVT_HI
da31 : b1e3             [ 5] 	lda (df_tmpptra),y
                             
da33 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
da36 :                       df_rt_eval_simple_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
                             	; C=1
                             ;	clc
da36 : a900             [ 2] 	lda #DFVVT_LO-1
da38 : 65e3             [ 3] 	adc df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank1.s --------------------------------

da3a : aa               [ 2] 	tax
da3b : a5e4             [ 3] 	lda df_tmpptra+1
da3d : 6900             [ 2] 	adc #0
                             	; push pointer to lo,hi
da3f : 4c40f1           [ 3] 	jmp df_ost_pushPtr
                             
da42 :                       df_rt_eval_var_ptr
                             	; clean up stack
da42 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
da43 : a001             [ 2] 	ldy #DFVVT_LO
da45 : b1e3             [ 5] 	lda (df_tmpptra),y
da47 : aa               [ 2] 	tax
da48 : a002             [ 2] 	ldy #DFVVT_HI
da4a : b1e3             [ 5] 	lda (df_tmpptra),y
da4c : 4c40f1           [ 3] 	jmp df_ost_pushPtr
                             
da4f :                       df_rt_eval_var_do_arry
                             	; X on stack = type
da4f : da               [ 3] 	phx
                             	; move past var index
da50 : e6ca             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
da52 : a200             [ 2] 	ldx #0
da54 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; save vvt address
da56 : a5e4             [ 3] 	lda df_tmpptra+1
da58 : 48               [ 3] 	pha
da59 : a5e3             [ 3] 	lda df_tmpptra
da5b : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
da5c : 20e2d9           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
da5f : 68               [ 4] 	pla
da60 : 85e3             [ 3] 	sta df_tmpptra
da62 : 68               [ 4] 	pla
da63 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
da65 : 86e5             [ 3] 	stx df_tmpptrb
da67 : 84e6             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
da69 : c000             [ 2] 	cpy #0
da6b : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
da6d : a004             [ 2] 	ldy #DFVVT_DIM2
da6f : b1e3             [ 5] 	lda (df_tmpptra),y
da71 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
da73 : a6e5             [ 3] 	ldx df_tmpptrb
da75 : a4e6             [ 3] 	ldy df_tmpptrb+1
da77 : 86e6             [ 3] 	stx df_tmpptrb+1
da79 : 84e5             [ 3] 	sty df_tmpptrb
                             
da7b :                       df_rt_eval_var_dim2adj
da7b : a6e5             [ 3] 	ldx df_tmpptrb
da7d : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
da7f : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
da81 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank1.s --------------------------------

da82 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
da82 : e000             [ 2] 	cpx #0
da84 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
da86 : e8               [ 2] 	inx
da87 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
da87 : ca               [ 2] 	dex
da88 : a900             [ 2] 	lda #0
da8a : 8586             [ 3] 	sta num_a+1
da8c : 88               [ 2] 	dey
                             	; (y-1)
da8d : 8485             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
da8f : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
da91 : a003             [ 2] 	ldy #DFVVT_DIM1
da93 : a900             [ 2] 	lda #0
da95 : 858a             [ 3] 	sta num_b+1
da97 : b1e3             [ 5] 	lda (df_tmpptra),y
da99 : 8589             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
da9b : 2078cb           [ 6] 	jsr int_fast_mult
da9e :                       df_rt_eval_var_nomult
                             	; move x to a
da9e : 8a               [ 2] 	txa
                             	; add x to num_a
da9f : 18               [ 2] 	clc
daa0 : 6585             [ 3] 	adc num_a
daa2 : 8585             [ 3] 	sta num_a
                             	_bcc 2
                             
daa6 : e686             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
daa8 : a6e5             [ 3] 	ldx df_tmpptrb
daaa : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
daac : 68               [ 4] 	pla
daad : 48               [ 3] 	pha
daae : 2901             [ 2] 	and #DFVVT_INT
dab0 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
dab2 : 0685             [ 5] 	asl num_a
dab4 : 2686             [ 5] 	rol num_a+1
dab6 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
dab6 : 18               [ 2] 	clc
dab7 : a001             [ 2] 	ldy #DFVVT_LO
dab9 : b1e3             [ 5] 	lda (df_tmpptra),y
dabb : 6585             [ 3] 	adc num_a
dabd : 8585             [ 3] 	sta num_a
dabf : a002             [ 2] 	ldy #DFVVT_HI
dac1 : b1e3             [ 5] 	lda (df_tmpptra),y
dac3 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
dac7 :                       df_rt_array_exists
dac7 : 6586             [ 3] 	adc num_a+1
dac9 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank1.s --------------------------------

                             	; get the type
dacb : 68               [ 4] 	pla
                             	; if not int or byte then push string
dacc : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
dace : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
dad0 : 28               [ 4] 	plp
dad1 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
dad3 : 2901             [ 2] 	and #DFVVT_INT
dad5 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
dad7 : a000             [ 2] 	ldy #0
dad9 : b185             [ 5] 	lda (num_a),y
dadb : aa               [ 2] 	tax
dadc : c8               [ 2] 	iny
dadd : b185             [ 5] 	lda (num_a),y
dadf : 4c47f1           [ 3] 	jmp df_ost_pushInt
dae2 :                       df_rt_eval_byt
dae2 : a000             [ 2] 	ldy #0
dae4 : b185             [ 5] 	lda (num_a),y
dae6 : aa               [ 2] 	tax
dae7 : 98               [ 2] 	tya			; Make A=0
dae8 : 4c47f1           [ 3] 	jmp df_ost_pushInt
daeb :                       df_rt_eval_var_str
daeb : 28               [ 4] 	plp
daec :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
daec : a685             [ 3] 	ldx num_a
daee : a586             [ 3] 	lda num_a+1
daf0 : 4c40f1           [ 3] 	jmp df_ost_pushPtr
                             
daf3 :                       df_rt_eval_proc
daf3 : a5b9             [ 3] 	lda df_parmtop				; Save current position of par
daf5 : 48               [ 3] 	pha
daf6 : 20a8ef           [ 6] 	jsr df_rt_proc				; Go and call the user functio
daf9 : 68               [ 4] 	pla							; Get back the original parameter stac
dafa : c5b9             [ 3] 	cmp df_parmtop				; if it is the same, then no r
dafc : f002             [ 4] 	beq df_rt_eval_proc_err
dafe : 18               [ 2] 	clc
daff : 60               [ 6] 	rts
db00 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
db02 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
db02 : 2067f1           [ 6] 	jsr df_ost_popInt
db05 : 86e5             [ 3] 	stx df_tmpptrb
db07 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db09 : 2067f1           [ 6] 	jsr df_ost_popInt
db0c : 86e3             [ 3] 	stx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank1.s --------------------------------

db0e : 85e4             [ 3] 	sta df_tmpptra+1
db10 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
db11 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
db11 : 205ff1           [ 6] 	jsr df_ost_popStr
db14 : 86e5             [ 3] 	stx df_tmpptrb
db16 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db18 : 205ff1           [ 6] 	jsr df_ost_popStr
db1b : 86e3             [ 3] 	stx df_tmpptra
db1d : 85e4             [ 3] 	sta df_tmpptra+1
db1f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
db20 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
db20 : 206cd8           [ 6] 	jsr df_rt_neval
                             	; jump over comma
db23 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db25 : 206cd8           [ 6] 	jsr df_rt_neval
                             	
db28 : 4c02db           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
db2b :                       df_rt_parm_3ints
                             	; evaluate 1st parm
db2b : 206cd8           [ 6] 	jsr df_rt_neval
db2e : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db30 : 206cd8           [ 6] 	jsr df_rt_neval
db33 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db35 : 206cd8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
db38 :                       df_rt_parm_pop3
db38 : 2067f1           [ 6] 	jsr df_ost_popInt
db3b : 86e7             [ 3] 	stx df_tmpptrc
db3d : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
db3f : 4c02db           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank1.s --------------------------------

                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
db42 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
db42 : 206cd8           [ 6] 	jsr df_rt_neval
db45 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db47 : 206cd8           [ 6] 	jsr df_rt_neval
db4a : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db4c : 206cd8           [ 6] 	jsr df_rt_neval
db4f : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
db51 : 206cd8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
db54 :                       df_rt_parm_pop4
db54 : 2067f1           [ 6] 	jsr df_ost_popInt
db57 : 86e9             [ 3] 	stx df_tmpptrd
db59 : 85ea             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
db5b : 4c38db           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
db5e :                       df_rt_parm_5ints
                             	; evaluate 1st parm
db5e : 206cd8           [ 6] 	jsr df_rt_neval
db61 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db63 : 206cd8           [ 6] 	jsr df_rt_neval
db66 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db68 : 206cd8           [ 6] 	jsr df_rt_neval
db6b : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
db6d : 206cd8           [ 6] 	jsr df_rt_neval
db70 : e6ca             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank1.s --------------------------------

                             	; evaluate the 5th parm
db72 : 206cd8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
db75 : 2067f1           [ 6] 	jsr df_ost_popInt
db78 : 86eb             [ 3] 	stx df_tmpptre
db7a : 85ec             [ 3] 	sta df_tmpptre+1
                             
                             	; pop 4,3,2,1 parms
db7c : 4c54db           [ 3] 	jmp df_rt_parm_pop4
                             
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
db7f :                       df_rt_init_stat_ptr
                             	; save current line
db7f : 86c8             [ 3] 	stx df_currlin
db81 : 85c9             [ 3] 	sta df_currlin+1
db83 : 84ca             [ 3] 	sty df_exeoff
db85 : 84c2             [ 3] 	sty df_curstidx
db87 : b1c8             [ 5] 	lda (df_currlin),y
db89 : 85c1             [ 3] 	sta df_nxtstidx
                             ;	ldx #0
                             ;	lda (df_currlin,x)
db8b : b2c8             [ 5] 	lda (df_currlin)
db8d : 85c0             [ 3] 	sta df_eolidx
db8f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
db90 :                       df_rt_exec_stat
db90 : a6c8             [ 3] 	ldx df_currlin
db92 : a5c9             [ 3] 	lda df_currlin+1
db94 : a4ca             [ 3] 	ldy df_exeoff
db96 :                       df_rt_exec_init_ptr
db96 : 207fdb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
                             ;	lda #0
                             ;	sta df_nextlin+1
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank1.s --------------------------------

db99 : 64cc             [ 3] 	stz df_nextlin+1
                             
                             	; find first token in statement
db9b :                       df_rt_exec_find_tok
db9b : c8               [ 2] 	iny
db9c : b1c8             [ 5] 	lda (df_currlin),y
db9e : 10fb             [ 3] 	bpl df_rt_exec_find_tok
dba0 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
dba0 : c8               [ 2] 	iny
dba1 : 84ca             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
dba3 : 20f6db           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
dba6 : a59e             [ 3] 	lda df_checkmsk
dba8 : 300e             [ 3] 	bmi df_rt_exec_no_key
dbaa : c69d             [ 5] 	dec df_checkkey
dbac : d00a             [ 3] 	bne df_rt_exec_no_key
dbae : a59e             [ 3] 	lda df_checkmsk
dbb0 : 859d             [ 3] 	sta df_checkkey
dbb2 : 18               [ 2] 	clc
dbb3 : 2045c5           [ 6] 	jsr io_get_ch
dbb6 : 9027             [ 3] 	bcc df_rt_exec_check_key
dbb8 :                       df_rt_exec_no_key
                             	; check if normal flow of control
dbb8 : a5cc             [ 3] 	lda df_nextlin+1
dbba : d031             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
dbbc : a4c1             [ 3] 	ldy df_nxtstidx
dbbe : c4c0             [ 3] 	cpy df_eolidx
dbc0 : 84ca             [ 3] 	sty df_exeoff
dbc2 : d0cc             [ 3] 	bne df_rt_exec_stat
                             	
                             
                             	; reached end of line, move to next
dbc4 : 18               [ 2] 	clc
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dbc5 : b2c8             [ 5] 	lda (df_currlin)
dbc7 : 65c8             [ 3] 	adc df_currlin
dbc9 : 85c8             [ 3] 	sta df_currlin
                             	_bcc 2
                             
dbcd : e6c9             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
dbcf : a003             [ 2] 	ldy #3
dbd1 : 84ca             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
                             ;	lda (df_currlin,x)
dbd3 : b2c8             [ 5] 	lda (df_currlin)
dbd5 : 85c0             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
dbd7 : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
dbd9 : a5a0             [ 3] 	lda df_immed
dbdb : f00e             [ 3] 	beq df_rt_unexpected_end
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank1.s --------------------------------

dbdd :                       df_rt_exec_end
dbdd : 18               [ 2] 	clc
dbde : 60               [ 6] 	rts
dbdf :                       df_rt_exec_check_key
dbdf : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
dbe1 : f006             [ 3] 	beq df_rt_exec_ctrl_z
dbe3 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
dbe5 : d0d1             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
dbe7 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
dbe9 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
dbeb :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
dbed :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
dbed : a6cb             [ 3] 	ldx df_nextlin
dbef : a5cc             [ 3] 	lda df_nextlin+1
dbf1 : a4c1             [ 3] 	ldy df_nxtstidx
dbf3 : 4c96db           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
dbf6 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
dbf6 : 0a               [ 2] 	asl a
dbf7 : aa               [ 2] 	tax
dbf8 : 7cd3dc           [ 6] 	jmp (df_rt_tokenjmp,x)
                             ;	lda df_rt_tokenjmp,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_tokenjmp+1,x
                             ;	sta df_tmpptra+1
                             ;	; execution code finishes with rts
                             ;	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
dbfb :                       df_rt_nextstat
                             	; save pointer
dbfb : 86d2             [ 3] 	stx df_lineptr
dbfd : 85d3             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dbff : b2d2             [ 5] 	lda (df_lineptr)
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank1.s --------------------------------

dc01 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
dc03 : b1d2             [ 5] 	lda (df_lineptr),y
                             ;	cmp (df_lineptr,x)
dc05 : d2d2             [ 5] 	cmp (df_lineptr)
dc07 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
dc09 : a8               [ 2] 	tay
                             	; X = line low
dc0a : a6d2             [ 3] 	ldx df_lineptr
                             	; A = line high
dc0c : a5d3             [ 3] 	lda df_lineptr+1
dc0e : 18               [ 2] 	clc
dc0f : 60               [ 6] 	rts
dc10 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
dc10 : 18               [ 2] 	clc
dc11 : 65d2             [ 3] 	adc df_lineptr
dc13 : 85d2             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
dc17 : e6d3             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
                             ;	lda (df_lineptr,x)
dc19 : b2d2             [ 5] 	lda (df_lineptr)
dc1b : f008             [ 3] 	beq df_rt_nextstat_err
dc1d : a6d2             [ 3] 	ldx df_lineptr
dc1f : a5d3             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
dc21 : a003             [ 2] 	ldy #3
dc23 : 18               [ 2] 	clc
dc24 : 60               [ 6] 	rts
dc25 :                       df_rt_nextstat_err
dc25 : a000             [ 2] 	ldy #0
dc27 : 38               [ 2] 	sec
dc28 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
dc29 :                       df_rt_push_stat
dc29 : a5c2             [ 3] 	lda df_curstidx
dc2b : 2009f1           [ 6] 	jsr df_rst_pushByte
dc2e : a5c9             [ 3] 	lda df_currlin+1
dc30 : a6c8             [ 3] 	ldx df_currlin
dc32 : 4c21f1           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
dc35 :                       df_rt_pop_stat
dc35 : 202ff1           [ 6] 	jsr df_rst_popWord
dc38 : 86cb             [ 3] 	stx	df_nextlin
dc3a : 85cc             [ 3] 	sta df_nextlin+1
dc3c : 2012f1           [ 6] 	jsr df_rst_popByte
dc3f : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank1.s --------------------------------

dc40 : a6cb             [ 3] 	ldx df_nextlin
dc42 : a5cc             [ 3] 	lda df_nextlin+1
dc44 : 20fbdb           [ 6] 	jsr df_rt_nextstat
dc47 : 86cb             [ 3] 	stx df_nextlin
dc49 : 85cc             [ 3] 	sta df_nextlin+1
dc4b : 84c1             [ 3] 	sty df_nxtstidx
                             ;	clc
dc4d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
dc4e :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
dc56 : a003             [ 2] 	ldy #3
dc58 : 84d4             [ 3] 	sty df_lineidx
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dc5a : b2d2             [ 5] 	lda (df_lineptr)
dc5c : f034             [ 3] 	beq df_rt_findproc_err
dc5e :                       df_rt_findproc_cmd
dc5e : c8               [ 2] 	iny
dc5f : b1d2             [ 5] 	lda (df_lineptr),y
dc61 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
dc63 : c986             [ 2] 	cmp #DFRT_DEF
dc65 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
dc67 : c8               [ 2] 	iny
                             	; skip proc escape token
dc68 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
dc69 : b1d2             [ 5] 	lda (df_lineptr),y
dc6b : c5d0             [ 3] 	cmp df_procptr
dc6d : d00f             [ 3] 	bne df_rt_findproc_nextstat
dc6f : c8               [ 2] 	iny
dc70 : b1d2             [ 5] 	lda (df_lineptr),y
dc72 : c5d1             [ 3] 	cmp df_procptr+1
dc74 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
dc76 : a6d2             [ 3] 	ldx df_lineptr
dc78 : a5d3             [ 3] 	lda df_lineptr+1
dc7a : a4d4             [ 3] 	ldy df_lineidx
dc7c : 18               [ 2] 	clc
dc7d : 60               [ 6] 	rts
dc7e :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
dc7e : a6d2             [ 3] 	ldx df_lineptr
dc80 : a5d3             [ 3] 	lda df_lineptr+1
dc82 : a4d4             [ 3] 	ldy df_lineidx
dc84 : 20fbdb           [ 6] 	jsr df_rt_nextstat
dc87 : b009             [ 3] 	bcs df_rt_findproc_err
dc89 : 86d2             [ 3] 	stx df_lineptr
dc8b : 85d3             [ 3] 	sta df_lineptr+1
dc8d : 84d4             [ 3] 	sty df_lineidx
dc8f : 4c5edc           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
dc92 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
dc94 :                       df_rt_findescval
dc94 : a4ca             [ 3] 	ldy df_exeoff
dc96 : 88               [ 2] 	dey
dc97 :                       df_rt_findescval_loop
dc97 : c8               [ 2] 	iny
dc98 : b1c8             [ 5] 	lda (df_currlin),y
dc9a : c920             [ 2] 	cmp #DFTK_ESCVAL
dc9c : b0f9             [ 3] 	bcs df_rt_findescval_loop
dc9e : 84ca             [ 3] 	sty df_exeoff
dca0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
dca1 :                       df_rt_skip_ws
dca1 : a4ca             [ 3] 	ldy df_exeoff
dca3 : 88               [ 2] 	dey
dca4 :                       df_rt_skip_ws_loop
dca4 : c8               [ 2] 	iny
dca5 : b1c8             [ 5] 	lda (df_currlin),y
dca7 : c920             [ 2] 	cmp #' '
dca9 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
dcab : 84ca             [ 3] 	sty df_exeoff
dcad : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
dcae :                       df_rt_getlvar
dcae : 2094dc           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
dcb1 : c8               [ 2] 	iny
                             
                             	; get variable address
dcb2 : b1c8             [ 5] 	lda (df_currlin),y
dcb4 : 85e3             [ 3] 	sta df_tmpptra
dcb6 : c8               [ 2] 	iny
dcb7 : b1c8             [ 5] 	lda (df_currlin),y
dcb9 : 85e4             [ 3] 	sta df_tmpptra+1
                             
dcbb : 84ca             [ 3] 	sty df_exeoff
                             	; get the type
dcbd : a000             [ 2] 	ldy #0
dcbf : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
dcc1 : 38               [ 2] 	sec
dcc2 : a4ca             [ 3] 	ldy df_exeoff
dcc4 : 2006da           [ 6] 	jsr df_rt_eval_var
dcc7 : 4c63f1           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
dcca :                       df_rt_pop_stat_go
dcca : 2035dc           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
dccd : 68               [ 4] 	pla
dcce : a8               [ 2] 	tay
dccf : 84b8             [ 3] 	sty df_rtstop
dcd1 : 18               [ 2] 	clc
dcd2 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dcd3 :                       df_rt_tokenjmp
dcd3 : 3ae5                  	dw	df_rt_assign
dcd5 : a8ef                  	dw	df_rt_proc
dcd7 : 40e5                  	dw	df_rt_comment
dcd9 : eee4                  	dw	df_rt_println
dcdb : a8e4                  	dw	df_rt_printat
dcdd : b2e4                  	dw	df_rt_print
dcdf : 48f0                  	dw	df_rt_def			; 0x86
dce1 : cbf0                  	dw	df_rt_enddef		; 0x87
dce3 : c8f0                  	dw	df_rt_return		; 0x88
dce5 : 65ef                  	dw	df_rt_abort			; 0x89
dce7 : a1e2                  	dw	df_rt_local
dce9 : cae2                  	dw	df_rt_dim
dceb : 76e1                  	dw	df_rt_repeat		; 0x8c
dced : 7ee1                  	dw	df_rt_until
dcef : e1e0                  	dw	df_rt_for			; 0x8e
dcf1 : 1be1                  	dw	df_rt_next			; 0x8f
dcf3 : c3df                  	dw	df_rt_while			; 0x90
dcf5 : 28e0                  	dw	df_rt_wend			; 0x81
dcf7 : a2e0                  	dw	df_rt_if			; 0x92
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank1.s --------------------------------

dcf9 : 90e0                  	dw	df_rt_else			; 0x93
dcfb : 8be0                  	dw	df_rt_endif			; 0x94
dcfd : 90e0                  	dw	df_rt_elseif		; 0x95
dcff : 40e5                  	dw	df_rt_data			; 0x96
dd01 : 64f4                  	dw	df_rt_asm_assemble	; 0x97
dd03 : 41e5                  	dw	df_rt_run
dd05 : 36e6                  	dw	df_rt_list
dd07 : 6ce2                  	dw	df_rt_input
dd09 : c7e3                  	dw	df_rt_mode
dd0b : 4de3                  	dw	df_rt_plot
dd0d : b4e3                  	dw	df_rt_cursor
dd0f : 43e3                  	dw	df_rt_cls
dd11 : a5e8                  	dw	df_rt_vpoke
dd13 : bce8                  	dw	df_rt_setvdp
dd15 : c6e8                  	dw	df_rt_colour
dd17 : 15e9                  	dw	df_rt_spritepat
dd19 : 43e9                  	dw	df_rt_spritepos
dd1b : 81e9                  	dw	df_rt_spritecol
dd1d : 86e9                  	dw	df_rt_spritenme
dd1f : ece8                  	dw	df_rt_sprite
dd21 : 9de8                  	dw	df_rt_poke
dd23 : 8fe8                  	dw	df_rt_doke
dd25 : b4e9                  	dw	df_rt_sound
dd27 : c8e9                  	dw	df_rt_music
dd29 : e6e9                  	dw	df_rt_play
dd2b : bfea                  	dw	df_rt_save
dd2d : daea                  	dw	df_rt_load
dd2f : e1eb                  	dw	df_rt_dir
dd31 : 61ec                  	dw	df_rt_dirl
dd33 : 2ceb                  	dw	df_rt_del
dd35 : 54e2                  	dw	df_rt_read
dd37 : c0df                  	dw	df_rt_new
dd39 : 52e5                  	dw	df_rt_renum
dd3b : 8fe4                  	dw	df_rt_wait
dd3d : 97ec                  	dw	df_rt_reset
dd3f : c7e3                  	dw	df_rt_hires
dd41 : e0e3                  	dw	df_rt_point
dd43 : 08e4                  	dw	df_rt_line
dd45 : eae3                  	dw	df_rt_hplot
dd47 : cee3                  	dw	df_rt_pixmode
dd49 : d4e3                  	dw	df_rt_pixmask
dd4b : dae3                  	dw	df_rt_pixcol
dd4d : 1ee4                  	dw	df_rt_box
dd4f : f6e3                  	dw	df_rt_circle
dd51 : 34e4                  	dw	df_rt_shape
dd53 : 74eb                  	dw	df_rt_vload
dd55 : 45eb                  	dw	df_rt_bload
dd57 : 17ea                  	dw	df_rt_bsave
dd59 : bae3                  	dw	df_rt_himem
dd5b : bcdf                  	dw	df_rt_monitor
dd5d : 33eb                  	dw	df_rt_chdir
dd5f : 3ceb                  	dw	df_rt_mkdir
dd61 : b0ec                  	dw	df_rt_datetime
dd63 : b1e8                  	dw	df_rt_nvpoke
dd65 : 67eb                  	dw	df_rt_font
dd67 : 8def                  	dw	df_rt_device
dd69 : 82ef                  	dw	df_rt_fclose
                             
dd6b : 28ed                  	dw	df_rt_vpeek
dd6d : 0fed                  	dw	df_rt_peek
dd6f : 0ced                  	dw	df_rt_deek
dd71 : 65ed                  	dw	df_rt_stick
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank1.s --------------------------------

dd73 : d5ed                  	dw	df_rt_key
dd75 : 95ee                  	dw	df_rt_chr
dd77 : e8ee                  	dw	df_rt_left
dd79 : f9ee                  	dw	df_rt_right
dd7b : 14ef                  	dw	df_rt_mid
dd7d : 32ef                  	dw	df_rt_len
dd7f : 89ed                  	dw	df_rt_mem
dd81 : e8ed                  	dw	df_rt_scrn
dd83 : 40ed                  	dw	df_rt_rnd
dd85 : 04ee                  	dw	df_rt_elapsed
dd87 : 1eee                  	dw	df_rt_call
dd89 : a9ee                  	dw	df_rt_hex
dd8b : daee                  	dw	df_rt_dec
dd8d : 3eef                  	dw	df_rt_asc
dd8f : 4fef                  	dw	df_rt_val
dd91 : f8ed                  	dw	df_rt_pixel
dd93 : 30ee                  	dw	df_rt_sgn
dd95 : 4dee                  	dw	df_rt_addr
dd97 : 34ed                  	dw	df_rt_nvpeek
dd99 : 67ef                  	dw	df_rt_fcreate
dd9b : 7aef                  	dw	df_rt_fopen
                             	
dd9d : 10de                  	dw	df_rt_mult
dd9f : 31de                  	dw	df_rt_div
dda1 : 52de                  	dw	df_rt_mod
dda3 : 73de                  	dw	df_rt_asl
dda5 : 86de                  	dw	df_rt_lsr
dda7 : eadd                  	dw	df_rt_add
dda9 : fddd                  	dw	df_rt_sub
                             	
ddab : 99de                  	dw	df_rt_and
ddad : a8de                  	dw	df_rt_or
ddaf : b7de                  	dw	df_rt_eor
ddb1 : 56df                  	dw	df_rt_comlte
ddb3 : 61df                  	dw	df_rt_comgte
ddb5 : 6cdf                  	dw	df_rt_comne
ddb7 : 35df                  	dw	df_rt_comlt
ddb9 : 40df                  	dw	df_rt_comgt
ddbb : 4bdf                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
ddbd :                       df_rt_escjmp
ddbd : 0ae7                  	dw df_rt_lst_chr
ddbf : 09e7                  	dw df_rt_lst_reserved
ddc1 : 09e7                  	dw df_rt_lst_reserved
ddc3 : 09e7                  	dw df_rt_lst_reserved
ddc5 : 09e7                  	dw df_rt_lst_reserved	
ddc7 : 09e7                  	dw df_rt_lst_reserved	; no such thing as bytdec
ddc9 : 27e7                  	dw df_rt_lst_bythex
ddcb : 4ce7                  	dw df_rt_lst_bytbin
ddcd : 09e7                  	dw df_rt_lst_reserved	
ddcf : 70e7                  	dw df_rt_lst_intdec
ddd1 : 3ae7                  	dw df_rt_lst_inthex
ddd3 : 54e7                  	dw df_rt_lst_intbin
ddd5 : 09e7                  	dw df_rt_lst_reserved
ddd7 : 09e7                  	dw df_rt_lst_reserved
ddd9 : 09e7                  	dw df_rt_lst_reserved
dddb : 09e7                  	dw df_rt_lst_reserved	
dddd : cde7                  	dw df_rt_lst_strlit
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank1.s --------------------------------

dddf : 7be7                  	dw df_rt_lst_var
dde1 : 7be7                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
dde3 :                       mod_sz_rtsubs_s
                             
                             	include "dflat\numop.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
dde3 :                       df_rt_putintres
dde3 : a6e3             [ 3] 	ldx df_tmpptra
dde5 : a5e4             [ 3] 	lda df_tmpptra+1
dde7 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
ddea :                       df_rt_add
ddea : 2002db           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
ddfa : 4ce3dd           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank1.s --------------------------------

ddfd :                       df_rt_sub
ddfd : 2002db           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
de0d : 4ce3dd           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
de10 :                       df_rt_mult
de10 : 2002db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de23 : 209fcb           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
de2e : 4ce3dd           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
de31 :                       df_rt_div
de31 : 2002db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de44 : 20c8cb           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
de4f : 4ce3dd           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
de52 :                       df_rt_mod
de52 : 2002db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de65 : 20c8cb           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
de70 : 4ce3dd           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
de73 :                       df_rt_asl
de73 : 2002db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
de76 : a6e5             [ 3] 	ldx df_tmpptrb
de78 : e8               [ 2] 	inx
de79 :                       df_rt_aslbit
de79 : ca               [ 2] 	dex
de7a : f007             [ 3] 	beq df_rt_asldone
de7c : 06e3             [ 5] 	asl df_tmpptra
de7e : 26e4             [ 5] 	rol df_tmpptra+1
de80 : 4c79de           [ 3] 	jmp df_rt_aslbit
de83 :                       df_rt_asldone
de83 : 4ce3dd           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
de86 :                       df_rt_lsr
de86 : 2002db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
de89 : a6e5             [ 3] 	ldx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank1.s --------------------------------

de8b : e8               [ 2] 	inx
de8c :                       df_rt_lsrbit
de8c : ca               [ 2] 	dex
de8d : f007             [ 3] 	beq df_rt_lsrdone
de8f : 46e4             [ 5] 	lsr df_tmpptra+1
de91 : 66e3             [ 5] 	ror df_tmpptra
de93 : 4c8cde           [ 3] 	jmp df_rt_lsrbit
de96 :                       df_rt_lsrdone
de96 : 4ce3dd           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
de99 :                       df_rt_and
de99 : 2002db           [ 6] 	jsr df_rt_get2Ints
de9c : a5e3             [ 3] 	lda df_tmpptra
de9e : 25e5             [ 3] 	and df_tmpptrb
dea0 : aa               [ 2] 	tax
dea1 : a5e4             [ 3] 	lda df_tmpptra+1
dea3 : 25e6             [ 3] 	and df_tmpptrb+1
dea5 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
dea8 :                       df_rt_or
dea8 : 2002db           [ 6] 	jsr df_rt_get2Ints
deab : a5e3             [ 3] 	lda df_tmpptra
dead : 05e5             [ 3] 	ora df_tmpptrb
deaf : aa               [ 2] 	tax
deb0 : a5e4             [ 3] 	lda df_tmpptra+1
deb2 : 05e6             [ 3] 	ora df_tmpptrb+1
deb4 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
deb7 :                       df_rt_eor
deb7 : 2002db           [ 6] 	jsr df_rt_get2Ints
deba : a5e3             [ 3] 	lda df_tmpptra
debc : 45e5             [ 3] 	eor df_tmpptrb
debe : aa               [ 2] 	tax
debf : a5e4             [ 3] 	lda df_tmpptra+1
dec1 : 45e6             [ 3] 	eor df_tmpptrb+1
dec3 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
dec6 :                       df_rt_aequb
dec6 : a5e3             [ 3] 	lda df_tmpptra
dec8 : c5e5             [ 3] 	cmp df_tmpptrb
deca : d004             [ 3] 	bne df_rt_aequbFin
decc : a5e4             [ 3] 	lda df_tmpptra+1
dece : c5e6             [ 3] 	cmp df_tmpptrb+1
ded0 :                       df_rt_aequbFin
ded0 : 60               [ 6] 	rts
                             
                             ; a-b common function
ded1 :                       df_rt_asubb
ded1 : 38               [ 2] 	sec
ded2 : a5e3             [ 3] 	lda df_tmpptra
ded4 : e5e5             [ 3] 	sbc df_tmpptrb
ded6 : a5e4             [ 3] 	lda df_tmpptra+1
ded8 : e5e6             [ 3] 	sbc df_tmpptrb+1
deda : 5002             [ 3] 	bvc df_rt_asubbFin
dedc : 4980             [ 2] 	eor #0x80
dede :                       df_rt_asubbFin
dede : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank1.s --------------------------------

                             ; b-a common function
dedf :                       df_rt_bsuba
dedf : 38               [ 2] 	sec
dee0 : a5e5             [ 3] 	lda df_tmpptrb
dee2 : e5e3             [ 3] 	sbc df_tmpptra
dee4 : a5e6             [ 3] 	lda df_tmpptrb+1
dee6 : e5e4             [ 3] 	sbc df_tmpptra+1
dee8 : 5002             [ 3] 	bvc df_rt_bsubaFin
deea : 4980             [ 2] 	eor #0x80
deec :                       df_rt_bsubaFin
deec : 60               [ 6] 	rts
                             
                             ; common routine push true
deed :                       df_rt_true
deed : a2ff             [ 2] 	ldx #0xff
deef : 8a               [ 2] 	txa
def0 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
def3 :                       df_rt_false
def3 : a200             [ 2] 	ldx #0x00
def5 : 8a               [ 2] 	txa
def6 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
def9 :                       df_rt_lt
def9 : 2002db           [ 6] 	jsr df_rt_get2Ints
defc : 20d1de           [ 6] 	jsr df_rt_asubb
deff : 30ec             [ 3] 	bmi df_rt_true
df01 : 10f0             [ 4] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
df03 :                       df_rt_lte
df03 : 2002db           [ 6] 	jsr df_rt_get2Ints
df06 :                       df_rt_lte_calc
df06 : 20dfde           [ 6] 	jsr df_rt_bsuba
df09 : 30e8             [ 4] 	bmi df_rt_false
df0b : 10e0             [ 4] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
df0d :                       df_rt_gt
df0d : 2002db           [ 6] 	jsr df_rt_get2Ints
df10 : 20dfde           [ 6] 	jsr df_rt_bsuba
df13 : 30d8             [ 4] 	bmi df_rt_true
df15 : 10dc             [ 4] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
df17 :                       df_rt_gte
df17 : 2002db           [ 6] 	jsr df_rt_get2Ints
df1a :                       df_rt_gte_calc
df1a : 20d1de           [ 6] 	jsr df_rt_asubb
df1d : 10ce             [ 4] 	bpl df_rt_true
df1f : 30d2             [ 4] 	bmi df_rt_false
                             
                             ; a == b
df21 :                       df_rt_eq
df21 : 2002db           [ 6] 	jsr df_rt_get2Ints
df24 : 20c6de           [ 6] 	jsr df_rt_aequb
df27 : d0ca             [ 4] 	bne df_rt_false
df29 : f0c2             [ 4] 	beq df_rt_true
                             
                             ; a <> b
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank1.s --------------------------------

df2b :                       df_rt_ne
df2b : 2002db           [ 6] 	jsr df_rt_get2Ints
df2e : 20c6de           [ 6] 	jsr df_rt_aequb
df31 : f0c0             [ 4] 	beq df_rt_false
df33 : d0b8             [ 4] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
df35 :                       df_rt_comlt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df3a : 2980             [ 2] 	and #DFST_STR
df3c : d054             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
df3e : f0b9             [ 4] 	beq df_rt_lt
                             
df40 :                       df_rt_comgt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df45 : 2980             [ 2] 	and #DFST_STR
df47 : d050             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
df49 : f0c2             [ 3] 	beq df_rt_gt
                             
df4b :                       df_rt_comeq
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df50 : 2980             [ 2] 	and #DFST_STR
df52 : d04e             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
df54 : f0cb             [ 3] 	beq df_rt_eq
                             
df56 :                       df_rt_comlte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df5b : 2980             [ 2] 	and #DFST_STR
df5d : d018             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
df5f : f0a2             [ 3] 	beq df_rt_lte
                             	
df61 :                       df_rt_comgte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df66 : 2980             [ 2] 	and #DFST_STR
df68 : d01a             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
df6a : f0ab             [ 3] 	beq df_rt_gte
                             
df6c :                       df_rt_comne
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df71 : 2980             [ 2] 	and #DFST_STR
df73 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
df75 : f0b4             [ 3] 	beq df_rt_ne
                             
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
df77 :                       df_rt_slte
df77 : 20a9df           [ 6] 	jsr df_rt_str_comp
df7a : 9005             [ 3] 	bcc df_rt_str_comp_true
df7c : f003             [ 3] 	beq df_rt_str_comp_true
df7e :                       df_rt_str_comp_false
df7e : 4cf3de           [ 3] 	jmp df_rt_false
df81 :                       df_rt_str_comp_true
df81 : 4cedde           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
df84 :                       df_rt_sgte
df84 : 20a9df           [ 6] 	jsr df_rt_str_comp
df87 : b0f8             [ 3] 	bcs df_rt_str_comp_true
df89 : 90f3             [ 3] 	bcc df_rt_str_comp_false
                             
                             ; string not equal
df8b :                       df_rt_sne
df8b : 20a9df           [ 6] 	jsr df_rt_str_comp
df8e : d0f1             [ 3] 	bne df_rt_str_comp_true
df90 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
df92 :                       df_rt_slt
df92 : 20a9df           [ 6] 	jsr df_rt_str_comp
df95 : 90ea             [ 3] 	bcc df_rt_str_comp_true
df97 : b0e5             [ 3] 	bcs df_rt_str_comp_false
                             
                             ; string greater than
df99 :                       df_rt_sgt
df99 : 20a9df           [ 6] 	jsr df_rt_str_comp
df9c : f0e0             [ 3] 	beq df_rt_str_comp_false
df9e : 90de             [ 3] 	bcc df_rt_str_comp_false
dfa0 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
dfa2 :                       df_rt_seq
dfa2 : 20a9df           [ 6] 	jsr df_rt_str_comp
dfa5 : f0da             [ 3] 	beq df_rt_str_comp_true
dfa7 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; C=0 means <
                             ; C=1,Z=0 means >
                             ; C=1,Z=1 means ==
dfa9 :                       df_rt_str_comp
dfa9 : 2011db           [ 6] 	jsr df_rt_get2Strs
dfac : a000             [ 2] 	ldy #0
dfae :                       df_rt_str_comp_byte
dfae : b1e3             [ 5] 	lda (df_tmpptra),y
dfb0 : d1e5             [ 5] 	cmp (df_tmpptrb),y
dfb2 : d007             [ 3] 	bne df_rt_str_comp_done
                             	; if here then both strings still the same
dfb4 : c900             [ 2] 	cmp #0				; What was op1 char
                             	; if char is zero then end
dfb6 : f003             [ 3] 	beq df_rt_str_comp_done
                             	; else do next char
dfb8 : c8               [ 2] 	iny
dfb9 : d0f3             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank1.s --------------------------------

dfbb :                       df_rt_str_comp_done
dfbb : 60               [ 6] 	rts
                             
                             
                             
                             
dfbc :                       df_rt_monitor
dfbc : 20b6c2           [ 6] 	jsr _command_line
dfbf : 60               [ 6] 	rts
                             	
dfc0 :                       df_rt_new
dfc0 : 4ca9f1           [ 3] 	jmp df_clear
                             
                             ; df_rt_gotosub_common
                             ; 	; get line number in A,X and put in num_a
                             ; 	jsr df_rt_getnval
                             ; 	stx num_a
                             ; 	sta num_a+1
                             ; 	; For the moment start from the beginning
                             ; 	ldy df_prgstrt		; num_tmp contains starting po
                             ; 	sty num_tmp
                             ; 	ldy df_prgstrt+1
                             ; 	sty num_tmp+1
                             ; 	; if current line number > target then start f
                             ; 	; else start from this line number
                             ; 	; do a trial substract of current - target
                             ; 	sec
                             ; 	ldy #DFTK_LINNUM
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a
                             ; 	iny
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a+1
                             ; 	; if C=1 then current >= target so start from 
                             ; 	bcs df_rt_goto_find_line
                             ; 	; else use current line address
                             ; 	lda df_currlin
                             ; 	sta num_tmp
                             ; 	lda df_currlin+1
                             ; 	sta num_tmp+1
                             ; df_rt_goto_find_line
                             ; 	jsr df_pg_check_next_line	; Reuses the line fi
                             ; 	bcs df_rt_goto_not_found	; If no exact match t
                             ; 	rts							; X,A contains address of target lin
                             ; df_rt_goto_not_found
                             ; 	SWBRK DFERR_NOLINE
                             
                             ; df_rt_gosub
                             ; 	; push statement address for return
                             ; 	jsr df_rt_push_stat
                             ; 	; DFRT_WHILE token
                             ; 	lda #DFRT_GOSUB
                             ; 	jsr df_rst_pushByte
                             ; 	; *IMPORTANT* : falls through to the goto code
                             ; df_rt_goto
                             ; 	; Find the line number to goto
                             ; 	jsr df_rt_gotosub_common
                             ; 	; Save it in the next line property
                             ; 	stx df_nextlin
                             ; 	sta df_nextlin+1
                             ; 	; GOTO is from the beginning of a line only
                             ; 	ldy #3
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank1.s --------------------------------

                             ; 	sty df_nxtstidx
                             ; 	; Runtime will change flow to use next line pr
                             ; 	rts
                             
                             ; df_rt_retsub
                             ; 	; The top of stack needs to be a gosub return 
                             ; 	jsr df_rst_popByte
                             ; 	cmp #DFRT_GOSUB
                             ; 	bne df_rt_retsub_err
                             ; 	; pop the stat and continue
                             ; 	jmp df_rt_pop_stat
                             ; df_rt_retsub_err
                             ; 	SWBRK DFERR_RETURN
                             
                             
dfc3 :                       df_rt_while
                             	; push statement address
dfc3 : 2029dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
dfc6 : a990             [ 2] 	lda #DFRT_WHILE
dfc8 : 2009f1           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
dfcb : 2066d8           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
dfce : e000             [ 2] 	cpx #0
dfd0 : f001             [ 3] 	beq df_rt_while_done
dfd2 : 60               [ 6] 	rts
dfd3 :                       df_rt_while_done
                             	; pop while data off stack as not needed
dfd3 : 2012f1           [ 6] 	jsr df_rst_popByte
dfd6 : 2012f1           [ 6] 	jsr df_rst_popByte
dfd9 : 202ff1           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
dfdc : a5d5             [ 3] 	lda df_ifnest
dfde : 48               [ 3] 	pha
dfdf : a901             [ 2] 	lda #1
dfe1 : 85d5             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
dfeb :                       df_rt_findwend
dfeb : a6cb             [ 3] 	ldx df_nextlin
dfed : a5cc             [ 3] 	lda df_nextlin+1
dfef : a4c2             [ 3] 	ldy df_curstidx
dff1 : 20fbdb           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
dff4 : b030             [ 4] 	bcs df_rt_wend_end
dff6 : 86cb             [ 3] 	stx df_nextlin
dff8 : 85cc             [ 3] 	sta df_nextlin+1
dffa : 84c2             [ 3] 	sty df_curstidx
                             	; find the command token
dffc :                       df_rt_while_cmd
dffc : c8               [ 2] 	iny
dffd : b1cb             [ 5] 	lda (df_nextlin),y
dfff : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e001 : c991             [ 2] 	cmp #DFRT_WEND
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank1.s --------------------------------

e003 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e005 : c6d5             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e007 : d0e2             [ 4] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e009 : 68               [ 4] 	pla
e00a : 85d5             [ 3] 	sta df_ifnest
e00c : a6cb             [ 3] 	ldx df_nextlin
e00e : a5cc             [ 3] 	lda df_nextlin+1
e010 : a4c2             [ 3] 	ldy df_curstidx
e012 : 20fbdb           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e015 : b00f             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e017 : 86cb             [ 3] 	stx df_nextlin
e019 : 85cc             [ 3] 	sta df_nextlin+1
e01b : 84c1             [ 3] 	sty df_nxtstidx	
e01d : 60               [ 6] 	rts
e01e :                       df_rt_check_while
                             	; check for while
e01e : c990             [ 2] 	cmp #DFRT_WHILE
e020 : d0c9             [ 4] 	bne df_rt_findwend
                             	; if while found then increment nest
e022 : e6d5             [ 5] 	inc df_ifnest
e024 : 80c5             [ 4] 	bra df_rt_findwend
e026 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e028 :                       df_rt_wend
e028 : 2012f1           [ 6] 	jsr df_rst_popByte
e02b : c990             [ 2] 	cmp #DFRT_WHILE
e02d : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e02f : 202ff1           [ 6] 	jsr df_rst_popWord
e032 : 86cb             [ 3] 	stx	df_nextlin
e034 : 85cc             [ 3] 	sta df_nextlin+1
e036 : 2012f1           [ 6] 	jsr df_rst_popByte
e039 : 85c1             [ 3] 	sta df_nxtstidx
e03b : 60               [ 6] 	rts
e03c :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e03e :                       df_rt_if_stat
e03e : a6cb             [ 3] 	ldx df_nextlin
e040 : a5cc             [ 3] 	lda df_nextlin+1
e042 : a4c2             [ 3] 	ldy df_curstidx
e044 : 20fbdb           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e047 : b009             [ 3] 	bcs df_rt_if_stat_err
e049 : 86cb             [ 3] 	stx df_nextlin
e04b : 85cc             [ 3] 	sta df_nextlin+1
e04d : 84c2             [ 3] 	sty df_curstidx
e04f : 84c1             [ 3] 	sty df_nxtstidx
e051 : 60               [ 6] 	rts
                             ; program ended with no match
e052 :                       df_rt_if_stat_err
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank1.s --------------------------------

                             	SWBRK DFERR_UNCLOSEDIF
                             
                             	
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e054 :                       df_rt_if_match
                             	; save the current if nest level
e054 : a5d5             [ 3] 	lda df_ifnest
e056 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e057 : 64d5             [ 3] 	stz df_ifnest	
                             	; save match pref
e059 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e05a :                       df_rt_findelseendif
e05a : 203ee0           [ 6] 	jsr df_rt_if_stat
                             	; find command
e05d :                       df_rt_ifcmd
e05d : c8               [ 2] 	iny
e05e : b1cb             [ 5] 	lda (df_nextlin),y
e060 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e062 : c994             [ 2] 	cmp #DFRT_ENDIF
e064 : f014             [ 3] 	beq df_rt_ifelse
                             
e066 : 28               [ 4] 	plp
e067 : 08               [ 3] 	php
                             	
e068 : b008             [ 3] 	bcs df_rt_ifskipelseif
e06a : c993             [ 2] 	cmp #DFRT_ELSE
e06c : f00c             [ 3] 	beq df_rt_ifelse
e06e : c995             [ 2] 	cmp #DFRT_ELSEIF
e070 : f008             [ 3] 	beq df_rt_ifelse
e072 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e072 : c992             [ 2] 	cmp #DFRT_IF
e074 : d002             [ 3] 	bne df_rt_skipnestif
e076 : e6d5             [ 5] 	inc df_ifnest
e078 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e078 : 80e0             [ 3] 	bra df_rt_findelseendif
                             	
                             	; found else/elseif/endif
                             	; but check if this is nested
e07a :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e07a : a6d5             [ 3] 	ldx df_ifnest
e07c : f008             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e07e : c994             [ 2] 	cmp #DFRT_ENDIF
e080 : d002             [ 3] 	bne df_rt_skipnestendif
e082 : c6d5             [ 5] 	dec df_ifnest
e084 :                       df_rt_skipnestendif	
                             	; continue to search for else/endif
e084 : 80d4             [ 3] 	bra df_rt_findelseendif
                             	; ok got a match
e086 :                       df_rt_if_found
                             	; remove pref
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank1.s --------------------------------

e086 : 28               [ 4] 	plp
                             	; restore global if nest
e087 : fa               [ 4] 	plx
e088 : 86d5             [ 3] 	stx df_ifnest
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e08a : 60               [ 6] 	rts
                             
e08b :                       df_rt_endif
                             	; decrement if next level
e08b : c6d5             [ 5] 	dec df_ifnest
e08d : 3011             [ 3] 	bmi df_rt_noif_err
                             ;	clc
e08f : 60               [ 6] 	rts
                             	
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e090 :                       df_rt_elseif
e090 :                       df_rt_else
                             	; not in if mode then error
e090 : a5d5             [ 3] 	lda df_ifnest
e092 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e09c : 38               [ 2] 	sec
e09d : 4c54e0           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if	
e0a0 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             	
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e0a2 :                       df_rt_if
                             	; increment global if nest counter
e0a2 : e6d5             [ 5] 	inc df_ifnest
e0a4 :                       df_rt_ifeval
                             	; get value
e0a4 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e0a7 : c900             [ 2] 	cmp #0
e0a9 : d035             [ 3] 	bne df_rt_if_done
e0ab : e000             [ 2] 	cpx #0
e0ad : d031             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e0b7 : 18               [ 2] 	clc						
e0b8 : 2054e0           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e0bb : c993             [ 2] 	cmp #DFRT_ELSE
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank1.s --------------------------------

                             	; else: df_nextlin and df_nxtstidx points to the
e0bd : f01e             [ 3] 	beq df_rt_do_else
                             
e0bf : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e0c1 : f01d             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e0cb : c8               [ 2] 	iny
e0cc : 5a               [ 3] 	phy
                             	; initialise statement pointer
e0cd : a4c2             [ 3] 	ldy df_curstidx
e0cf : a6c8             [ 3] 	ldx df_currlin
e0d1 : a5c9             [ 3] 	lda df_currlin+1
e0d3 : 207fdb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e0d6 : 7a               [ 4] 	ply
e0d7 : 84ca             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e0d9 : 64cc             [ 3] 	stz df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e0db : 80c7             [ 3] 	bra df_rt_ifeval
                             	
e0dd :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e0dd : 203ee0           [ 6] 	jsr df_rt_if_stat
e0e0 :                       df_rt_if_done
                             ;	clc
e0e0 : 60               [ 6] 	rts
                             	
e0e1 :                       df_rt_for
                             	; push statement address to rt stack
e0e1 : 2029dc           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e0e4 : 20aedc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e0e7 : 48               [ 3] 	pha
e0e8 : da               [ 3] 	phx
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e0e9 : e6ca             [ 5] 	inc df_exeoff
e0eb : 206cd8           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter
e0ee : fa               [ 4] 	plx
e0ef : 86e3             [ 3] 	stx df_tmpptra
e0f1 : 68               [ 4] 	pla
e0f2 : 85e4             [ 3] 	sta df_tmpptra+1
e0f4 : 48               [ 3] 	pha
e0f5 : da               [ 3] 	phx
                             	; get the starting value from op stack
e0f6 : 2067f1           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e0f9 : a001             [ 2] 	ldy #1
e0fb : 91e3             [ 5] 	sta (df_tmpptra),y
e0fd : 8a               [ 2] 	txa
e0fe : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank1.s --------------------------------

e0ff : 92e3             [ 5] 	sta (df_tmpptra)
                             
                             	; find end value
                             	; evaluate the end value
e101 : e6ca             [ 5] 	inc df_exeoff
e103 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e106 : 2021f1           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e109 : e6ca             [ 5] 	inc df_exeoff
e10b : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e10e : 2021f1           [ 6] 	jsr df_rst_pushWord
                             	; save the counter slot address
e111 : fa               [ 4] 	plx
e112 : 68               [ 4] 	pla
e113 : 2021f1           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e116 : a98e             [ 2] 	lda #DFRT_FOR
e118 : 4c09f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             
e11b :                       df_rt_next
                             	; remember stack position
e11b : a4b8             [ 3] 	ldy df_rtstop
e11d : 5a               [ 3] 	phy
e11e : 2012f1           [ 6] 	jsr df_rst_popByte
e121 : c98e             [ 2] 	cmp #DFRT_FOR
e123 : d04f             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e125 : 202ff1           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e128 : 86e9             [ 3] 	stx df_tmpptrd
e12a : 85ea             [ 3] 	sta df_tmpptrd+1
e12c : b2e9             [ 5] 	lda (df_tmpptrd)
e12e : 85e3             [ 3] 	sta df_tmpptra
e130 : a001             [ 2] 	ldy #1
e132 : b1e9             [ 5] 	lda (df_tmpptrd),y
e134 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; get step value, save in ptrb
e136 : 202ff1           [ 6] 	jsr df_rst_popWord
e139 : 86e5             [ 3] 	stx df_tmpptrb
e13b : 85e6             [ 3] 	sta df_tmpptrb+1
e13d : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e14b : a5e3             [ 3] 	lda df_tmpptra
e14d : 92e9             [ 5] 	sta (df_tmpptrd)
e14f : a001             [ 2] 	ldy #1
e151 : a5e4             [ 3] 	lda df_tmpptra+1
e153 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	
                             	; get end value, save in ptrb
e155 : 202ff1           [ 6] 	jsr df_rst_popWord
e158 : 86e5             [ 3] 	stx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank1.s --------------------------------

e15a : 85e6             [ 3] 	sta df_tmpptrb+1
e15c : 68               [ 4] 	pla					; check if if +ve or -ve step
e15d : 1005             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e15f : 201adf           [ 6] 	jsr df_rt_gte_calc
e162 : 8003             [ 3] 	bra df_rt_next_check
e164 :                       df_rt_check_pos	
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e164 : 2006df           [ 6] 	jsr df_rt_lte_calc
e167 :                       df_rt_next_check
                             	; check if true or false
e167 : 2067f1           [ 6] 	jsr df_ost_popInt
e16a : e000             [ 2] 	cpx #0
                             	; if false then next is done
e16c : f003             [ 3] 	beq df_next_done
                             	; else we continue
e16e : 4ccadc           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e171 :                       df_next_done
e171 : 4c92e1           [ 3] 	jmp df_rt_untilnext_done
                             	
e174 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             	
e176 :                       df_rt_repeat
                             	; push statement address
e176 : 2029dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e179 : a98c             [ 2] 	lda #DFRT_REPEAT
e17b : 4c09f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             	
e17e :                       df_rt_until
                             	; remember stack position
e17e : a4b8             [ 3] 	ldy df_rtstop
e180 : 5a               [ 3] 	phy
e181 : 2012f1           [ 6] 	jsr df_rst_popByte
e184 : c98c             [ 2] 	cmp #DFRT_REPEAT
e186 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e188 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e18b : e000             [ 2] 	cpx #0
e18d : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e18f : 4ccadc           [ 3] 	jmp df_rt_pop_stat_go
                             
e192 :                       df_rt_untilnext_done
e192 : 7a               [ 4] 	ply
                             	; pop 2 items off stack (line address, index)
e193 : 202ff1           [ 6] 	jsr df_rst_popWord
e196 : 4c12f1           [ 3] 	jmp df_rst_popByte
                             	; and continue
                             ;	clc
                             ;	rts
                             
e199 :                       df_rt_until_err
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank1.s --------------------------------

                             	SWBRK DFERR_UNTIL
                             
                             	
e19b :                       df_rt_sadd
                             ;	clc
e19b : 60               [ 6] 	rts
                             	
e19c :                       df_rt_print_num
e19c : 2067f1           [ 6] 	jsr df_ost_popInt
e19f : 18               [ 2] 	clc
e1a0 : 4cbeca           [ 3] 	jmp print_a_to_d
                             ;	rts
                             	
e1a3 :                       df_rt_print_str
e1a3 : 205ff1           [ 6] 	jsr df_ost_popStr
e1a6 : 86e3             [ 3] 	stx df_tmpptra
e1a8 : 85e4             [ 3] 	sta df_tmpptra+1
e1aa : a000             [ 2] 	ldy #0
e1ac :                       df_rt_print_str_ch
e1ac : b1e3             [ 5] 	lda (df_tmpptra),y
e1ae : f006             [ 3] 	beq df_rt_print_str_done
e1b0 : 2048c5           [ 6] 	jsr io_put_ch
e1b3 : c8               [ 2] 	iny
e1b4 : 80f6             [ 3] 	bra df_rt_print_str_ch
e1b6 :                       df_rt_print_str_done
                             ;	clc
e1b6 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e1b7 :                       df_rt_nextdatum
e1b7 : a200             [ 2] 	ldx #0
                             	; load data line offset
e1b9 : a4d8             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e1bb : a5d7             [ 3] 	lda df_currdat+1
e1bd : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e1c7 :                       df_rt_datlinstart
                             	; if end of program then error
e1c7 : a1d6             [ 6] 	lda (df_currdat,x)
e1c9 : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
e1cb : a003             [ 2] 	ldy #3
e1cd : 84d8             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e1cf :                       df_rt_datastatement
e1cf : c8               [ 2] 	iny
e1d0 : 98               [ 2] 	tya
                             	; end of line reached?
e1d1 : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e1d3 : d00e             [ 3] 	bne df_rt_getdatatk
e1d5 :                       df_rt_datnextlin
                             	; if so then go to next line
e1d5 : 18               [ 2] 	clc
e1d6 : a5d6             [ 3] 	lda df_currdat
e1d8 : 61d6             [ 6] 	adc (df_currdat,x)
e1da : 85d6             [ 3] 	sta df_currdat
                             	_bcc 2
                             
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank1.s --------------------------------

e1de : e6d7             [ 5] 	inc df_currdat+1
e1e0 : 4cc7e1           [ 3] 	jmp df_rt_datlinstart
e1e3 :                       df_rt_getdatatk
e1e3 : b1d6             [ 5] 	lda (df_currdat),y
e1e5 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e1e7 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e1e9 : d0ea             [ 3] 	bne df_rt_datnextlin
e1eb : 84d8             [ 3] 	sty df_datoff
e1ed :                       df_rt_skipinitdataptr
e1ed : 98               [ 2] 	tya
                             	; end of line reached?
e1ee : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e1f0 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e1f2 : b1d6             [ 5] 	lda (df_currdat),y
e1f4 : c920             [ 2] 	cmp #DFTK_ESCVAL
e1f6 : c8               [ 2] 	iny
e1f7 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e1f9 : 88               [ 2] 	dey
e1fa : 84d8             [ 3] 	sty df_datoff
e1fc : 60               [ 6] 	rts
e1fd :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e1ff :                       df_rt_readdatum
                             	; update data pointer to next data item
e1ff : 20b7e1           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e202 : 20aedc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e205 : 86e5             [ 3] 	stx df_tmpptrb
e207 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e209 : a5c8             [ 3] 	lda df_currlin
e20b : 48               [ 3] 	pha
e20c : a5c9             [ 3] 	lda df_currlin+1
e20e : 48               [ 3] 	pha
e20f : a5ca             [ 3] 	lda df_exeoff
e211 : 48               [ 3] 	pha
e212 : a5c0             [ 3] 	lda df_eolidx
e214 : 48               [ 3] 	pha
e215 : a5c1             [ 3] 	lda df_nxtstidx
e217 : 48               [ 3] 	pha
e218 : a5c2             [ 3] 	lda df_curstidx
e21a : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
e223 : a5d8             [ 3] 	lda df_datoff
e225 : 85ca             [ 3] 	sta df_exeoff
e227 : a200             [ 2] 	ldx #0
e229 : a1d6             [ 6] 	lda (df_currdat,x)
e22b : 85c0             [ 3] 	sta df_eolidx
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank1.s --------------------------------

e22d : 85c1             [ 3] 	sta df_nxtstidx
e22f : a903             [ 2] 	lda #3
e231 : 85c2             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
e233 : a1e3             [ 6] 	lda (df_tmpptra,x)
e235 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
e236 : a6e5             [ 3] 	ldx df_tmpptrb
e238 : a5e6             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
e23a : 202ce5           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
e23d : a5ca             [ 3] 	lda df_exeoff
e23f : 85d8             [ 3] 	sta df_datoff
                             	; restore line settings
e241 : 68               [ 4] 	pla
e242 : 85c2             [ 3] 	sta df_curstidx
e244 : 68               [ 4] 	pla
e245 : 85c1             [ 3] 	sta df_nxtstidx
e247 : 68               [ 4] 	pla
e248 : 85c0             [ 3] 	sta df_eolidx
e24a : 68               [ 4] 	pla
e24b : 85ca             [ 3] 	sta df_exeoff
e24d : 68               [ 4] 	pla
e24e : 85c9             [ 3] 	sta df_currlin+1
e250 : 68               [ 4] 	pla
e251 : 85c8             [ 3] 	sta df_currlin
e253 : 60               [ 6] 	rts
                             
                             
e254 :                       df_rt_read
                             	; find variable to read in to from current posit
e254 : a4ca             [ 3] 	ldy df_exeoff
e256 :                       df_rt_read_find_var
e256 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
e257 : c4c1             [ 3] 	cpy df_nxtstidx
e259 : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
e25b : b1c8             [ 5] 	lda (df_currlin),y
e25d : c920             [ 2] 	cmp #DFTK_ESCVAL
e25f : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
e261 : 84ca             [ 3] 	sty df_exeoff
                             	; go and read in the value
e263 : 20ffe1           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
e266 : 4c54e2           [ 3] 	jmp df_rt_read
                             
e269 :                       df_rt_read_done
                             	; save position
e269 : 84ca             [ 3] 	sty df_exeoff
e26b : 60               [ 6] 	rts
                             
                             
e26c :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank1.s --------------------------------

e26c : 20aedc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e26f : 86e5             [ 3] 	stx df_tmpptrb
e271 : 85e6             [ 3] 	sta df_tmpptrb+1
e273 : a078             [ 2] 	ldy #120
                             	; go read a line of input
                             	; X,A is ptr has the input, Y is size
e275 : 38               [ 2] 	sec
e276 : 2057c5           [ 6] 	jsr io_read_line
                             	; check the type
e279 : b2e3             [ 5] 	lda (df_tmpptra)
e27b : 2904             [ 2] 	and #DFVVT_STR
e27d : d008             [ 3] 	bne df_rt_input_str
e27f : b2e3             [ 5] 	lda (df_tmpptra)
e281 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e283 : d003             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
e285 : 8018             [ 3] 	bra df_rt_input_err
e287 :                       df_rt_input_str
                             	; If string then done!
                             ;	clc
e287 : 60               [ 6] 	rts
                             
e288 :                       df_rt_input_num
                             	; X,A = address from tmpb, linbuff must be on pa
e288 : a6e5             [ 3] 	ldx df_tmpptrb
e28a : a5e6             [ 3] 	lda df_tmpptrb+1
e28c : a000             [ 2] 	ldy #0				; any numeric format
e28e : 207fc8           [ 6] 	jsr con_n_to_a
e291 : b00c             [ 3] 	bcs df_rt_input_err
e293 : a000             [ 2] 	ldy #0
e295 : a585             [ 3] 	lda num_a
e297 : 91e5             [ 5] 	sta (df_tmpptrb),y
e299 : c8               [ 2] 	iny
e29a : a586             [ 3] 	lda num_a+1
e29c : 91e5             [ 5] 	sta (df_tmpptrb),y
                             ;	clc
e29e : 60               [ 6] 	rts
e29f :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             	
e2a1 :                       df_rt_local
                             	; get current local count off rt stack
e2a1 : 2012f1           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
e2a4 : 48               [ 3] 	pha
e2a5 : a4ca             [ 3] 	ldy df_exeoff
e2a7 : 88               [ 2] 	dey
e2a8 :                       df_rt_local_findesc
e2a8 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
e2a9 : c4c1             [ 3] 	cpy df_nxtstidx
e2ab : f019             [ 3] 	beq df_rt_local_done
                             	; find a var
e2ad : b1c8             [ 5] 	lda (df_currlin),y
e2af : c911             [ 2] 	cmp #DFTK_VAR
e2b1 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
e2b3 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank1.s --------------------------------

                             	; get var slot in A,X
e2b4 : b1c8             [ 5] 	lda (df_currlin),y
e2b6 : aa               [ 2] 	tax
e2b7 : c8               [ 2] 	iny
e2b8 : b1c8             [ 5] 	lda (df_currlin),y
e2ba : 84ca             [ 3] 	sty df_exeoff
                             	; localise this variable
e2bc : 20f5f0           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
e2bf : 68               [ 4] 	pla
e2c0 : 1a               [ 2] 	inc a
e2c1 : 48               [ 3] 	pha
e2c2 : a4ca             [ 3] 	ldy df_exeoff
e2c4 : 80e2             [ 3] 	bra df_rt_local_findesc
e2c6 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
e2c6 : 68               [ 4] 	pla
e2c7 : 4c09f1           [ 3] 	jmp df_rst_pushByte
                             ;	clc
                             ;	rts
                             	
e2ca :                       df_rt_dim
e2ca : a4ca             [ 3] 	ldy df_exeoff
e2cc : 88               [ 2] 	dey
e2cd :                       df_rt_dim_findesc
                             	; check end of line
e2cd : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
e2ce : c4c1             [ 3] 	cpy df_nxtstidx
e2d0 : f06e             [ 4] 	beq df_rt_dim_done
                             	; find a var
e2d2 : b1c8             [ 5] 	lda (df_currlin),y
e2d4 : c911             [ 2] 	cmp #DFTK_VAR
e2d6 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
e2d8 : c8               [ 2] 	iny
                             	; get var address
e2d9 : b1c8             [ 5] 	lda (df_currlin),y
e2db : 85e3             [ 3] 	sta df_tmpptra
e2dd : c8               [ 2] 	iny
e2de : b1c8             [ 5] 	lda (df_currlin),y
e2e0 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
e2e2 : c8               [ 2] 	iny
e2e3 : 84ca             [ 3] 	sty df_exeoff
                             	; check if already dim'd
e2e5 : a003             [ 2] 	ldy #DFVVT_DIM1
e2e7 : b1e3             [ 5] 	lda (df_tmpptra),y
e2e9 : d056             [ 4] 	bne df_rt_dim_err
                             	; Save slot address found earlier
e2eb : a5e3             [ 3] 	lda df_tmpptra
e2ed : 48               [ 3] 	pha
e2ee : a5e4             [ 3] 	lda df_tmpptra+1
e2f0 : 48               [ 3] 	pha
e2f1 : 20e2d9           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
e2f4 : 68               [ 4] 	pla
e2f5 : 85e4             [ 3] 	sta df_tmpptra+1
e2f7 : 68               [ 4] 	pla
e2f8 : 85e3             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank1.s --------------------------------

                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
e2fa : 5a               [ 3] 	phy
e2fb : da               [ 3] 	phx
e2fc : a003             [ 2] 	ldy #DFVVT_DIM1
e2fe : 68               [ 4] 	pla
e2ff : 91e3             [ 5] 	sta (df_tmpptra),y
e301 : c8               [ 2] 	iny
e302 : 68               [ 4] 	pla
e303 : 91e3             [ 5] 	sta (df_tmpptra),y	
e305 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
e305 : a003             [ 2] 	ldy #DFVVT_DIM1
e307 : b1e3             [ 5] 	lda (df_tmpptra),y
e309 : 8585             [ 3] 	sta num_a
e30b : 6486             [ 3] 	stz num_a+1
e30d : c8               [ 2] 	iny
e30e : b1e3             [ 5] 	lda (df_tmpptra),y
e310 : d002             [ 3] 	bne df_rt_dim2_nz
e312 : a901             [ 2] 	lda #1
e314 :                       df_rt_dim2_nz
e314 : 8589             [ 3] 	sta num_b
e316 : 648a             [ 3] 	stz num_b+1
e318 : 2078cb           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
e31b : b2e3             [ 5] 	lda (df_tmpptra)
e31d : 2901             [ 2] 	and #DFVVT_INT
e31f : f004             [ 3] 	beq df_rt_dim2_mul2
e321 : 0685             [ 5] 	asl num_a
e323 : 2686             [ 5] 	rol num_a+1
e325 :                       df_rt_dim2_mul2	
                             	; finally, we have a size of array
e325 : a685             [ 3] 	ldx num_a
e327 : a586             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
e329 : 2084f1           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
e32c : a002             [ 2] 	ldy #DFVVT_HI
e32e : 91e3             [ 5] 	sta (df_tmpptra),y
e330 : 8a               [ 2] 	txa
e331 : 88               [ 2] 	dey
e332 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
e334 : b2e3             [ 5] 	lda (df_tmpptra)
e336 : 0980             [ 2] 	ora #DFVVT_ARRY
e338 : 92e3             [ 5] 	sta (df_tmpptra)
                             	; don't increment byte again - go check for more
e33a : 808e             [ 4] 	bra df_rt_dim	
e33c :                       df_rt_dim_next_byte
e33c : e6ca             [ 5] 	inc df_exeoff
e33e : 808a             [ 4] 	bra df_rt_dim
e340 :                       df_rt_dim_done
                             ;	clc
e340 : 60               [ 6] 	rts
e341 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
e343 :                       df_rt_cls
                             	; set cursror position to top left first
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank1.s --------------------------------

e343 : a200             [ 2] 	ldx #0
e345 : a000             [ 2] 	ldy #0
e347 : 20a6c3           [ 6] 	jsr _gr_set_cur
e34a : 4ccec2           [ 3] 	jmp _gr_cls
                             ;	clc
                             ;	rts
                             	
e34d :                       df_rt_plot
                             	; evaluate the expression
e34d : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e350 : da               [ 3] 	phx
                             	; jump over comma
e351 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e353 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e356 : da               [ 3] 	phx
                             	; jump over comma
e357 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e359 : 206cd8           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
                             	_df_ost_peekType
                             
                             	; if >=0x80 then a pointer / string
e361 : 3014             [ 3] 	bmi df_rt_plotstr
                             	; else it is int
e363 : 2067f1           [ 6] 	jsr df_ost_popInt
                             	; put low byte of pop result in a
e366 : 8a               [ 2] 	txa
e367 : a622             [ 3] 	ldx vdp_base+vdp_gmode	; Check if in hires mode
e369 : e010             [ 2] 	cpx #0x10
e36b : b005             [ 3] 	bcs df_rt_hchar
                             	; get y and x in that order
e36d : 7a               [ 4] 	ply
e36e : fa               [ 4] 	plx
e36f : 4c46c3           [ 3] 	jmp _gr_plot
e372 :                       df_rt_hchar
                             	; get y and x in that order
e372 : 7a               [ 4] 	ply
e373 : fa               [ 4] 	plx
e374 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e377 :                       df_rt_plotstr
                             	; pop string pointer
e377 : 2063f1           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
e37a : 86e3             [ 3] 	stx df_tmpptra
e37c : 85e4             [ 3] 	sta df_tmpptra+1
e37e : a422             [ 3] 	ldy vdp_base+vdp_gmode	; Check if in hires mode
e380 : c010             [ 2] 	cpy #0x10
e382 : b017             [ 3] 	bcs df_rt_hplotstr
                             	; get y and x in that order
e384 : 7a               [ 4] 	ply
e385 : fa               [ 4] 	plx
                             	; set cursror position
e386 :                       df_rt_plotstrch
e386 : b2e3             [ 5] 	lda (df_tmpptra)
e388 : f010             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank1.s --------------------------------

e390 : da               [ 3] 	phx
e391 : 5a               [ 3] 	phy
e392 : 2046c3           [ 6] 	jsr _gr_plot
e395 : 7a               [ 4] 	ply
e396 : fa               [ 4] 	plx
e397 : e8               [ 2] 	inx
e398 : 80ec             [ 3] 	bra df_rt_plotstrch
e39a :                       df_rt_plotstrdone
e39a : 60               [ 6] 	rts
e39b :                       df_rt_hplotstr
                             	; get y and x in that order
e39b : 7a               [ 4] 	ply
e39c : fa               [ 4] 	plx
                             	; set cursror position
e39d :                       df_rt_hplotstrch
e39d : b2e3             [ 5] 	lda (df_tmpptra)
e39f : f0f9             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e3a7 : da               [ 3] 	phx
e3a8 : 5a               [ 3] 	phy
e3a9 : 205ec3           [ 6] 	jsr _gr_hchar
e3ac : 7a               [ 4] 	ply
e3ad : 68               [ 4] 	pla
e3ae : 18               [ 2] 	clc			; Assume pitch 8 for now
e3af : 6908             [ 2] 	adc #8
e3b1 : aa               [ 2] 	tax
e3b2 : 80e9             [ 3] 	bra df_rt_hplotstrch
                             
e3b4 :                       df_rt_cursor
                             	; evaluate the expression
e3b4 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
e3b7 : 8612             [ 3] 	stx vdp_curoff
                             ;	clc
e3b9 : 60               [ 6] 	rts
                             		
e3ba :                       df_rt_himem
                             	; evaluate the expression
e3ba : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
e3bd : 8e670c           [ 4] 	stx df_memtop
e3c0 : 8d680c           [ 4] 	sta df_memtop+1
                             	; now clear everything down
e3c3 : 4ca9f1           [ 3] 	jmp df_clear
e3c6 : 60               [ 6] 	rts
                             
e3c7 :                       df_rt_mode
e3c7 :                       df_rt_hires
                             	; evaluate the expression
e3c7 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; only interested in low byte
e3ca : 8a               [ 2] 	txa
e3cb : 4cc6c1           [ 3] 	jmp _gr_init_screen
                             	
e3ce :                       df_rt_pixmode
                             	; evaluate the expression X = mode
e3ce : 2066d8           [ 6] 	jsr df_rt_getnval
e3d1 : 862e             [ 3] 	stx gr_scrngeom+gr_pixmode
                             ;	clc
e3d3 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank1.s --------------------------------

                             
e3d4 :                       df_rt_pixmask
                             	; evaluate the expression X = mask
e3d4 : 2066d8           [ 6] 	jsr df_rt_getnval
e3d7 : 862f             [ 3] 	stx gr_scrngeom+gr_pixmask
                             ;	clc
e3d9 : 60               [ 6] 	rts
                             
e3da :                       df_rt_pixcol
                             	; evaluate the expression X = col
e3da : 2066d8           [ 6] 	jsr df_rt_getnval
e3dd : 8630             [ 3] 	stx gr_scrngeom+gr_pixcol
                             ;	clc
e3df : 60               [ 6] 	rts
                             
e3e0 :                       df_rt_point
e3e0 : 2020db           [ 6] 	jsr df_rt_parm_2ints
e3e3 : a6e3             [ 3] 	ldx df_tmpptra
e3e5 : a4e5             [ 3] 	ldy df_tmpptrb
e3e7 : 4c76c3           [ 3] 	jmp _gr_point
                             ;	clc
                             ;	rts
                             
e3ea :                       df_rt_hplot
e3ea : 202bdb           [ 6] 	jsr df_rt_parm_3ints
e3ed : a6e3             [ 3] 	ldx df_tmpptra				; load x
e3ef : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e3f1 : a5e7             [ 3] 	lda df_tmpptrc				; load char
e3f3 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e3f6 :                       df_rt_circle
e3f6 : 202bdb           [ 6] 	jsr df_rt_parm_3ints
e3f9 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e3fb : 8585             [ 3] 	sta num_a
e3fd : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e3ff : 8586             [ 3] 	sta num_a+1
e401 : a5e7             [ 3] 	lda df_tmpptrc				; load r
e403 : 8587             [ 3] 	sta num_a+2
e405 : 4c2ec3           [ 3] 	jmp _gr_circle
                             
e408 :                       df_rt_line
e408 : 2042db           [ 6] 	jsr df_rt_parm_4ints
e40b : a5e3             [ 3] 	lda df_tmpptra				; load x0
e40d : 8585             [ 3] 	sta num_a
e40f : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e411 : 8586             [ 3] 	sta num_a+1
e413 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e415 : 8587             [ 3] 	sta num_a+2
e417 : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e419 : 8588             [ 3] 	sta num_a+3
e41b : 4cfec2           [ 3] 	jmp _gr_line
                             
e41e :                       df_rt_box
e41e : 2042db           [ 6] 	jsr df_rt_parm_4ints
e421 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e423 : 8585             [ 3] 	sta num_a
e425 : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e427 : 8586             [ 3] 	sta num_a+1
e429 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e42b : 8587             [ 3] 	sta num_a+2
e42d : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e42f : 8588             [ 3] 	sta num_a+3
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank1.s --------------------------------

e431 : 4c16c3           [ 3] 	jmp _gr_box
                             
e434 :                       df_rt_shape
e434 : 202bdb           [ 6] 	jsr df_rt_parm_3ints
e437 : a6e3             [ 3] 	ldx df_tmpptra				; load x
e439 : da               [ 3] 	phx
e43a : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e43c : 5a               [ 3] 	phy
e43d : a6e7             [ 3] 	ldx df_tmpptrc				; load coords[]
e43f : a5e8             [ 3] 	lda df_tmpptrc+1			; load coords[]
e441 : 2021f1           [ 6] 	jsr df_rst_pushWord
e444 :                       df_rt_shapeLoop
e444 : 202ff1           [ 6] 	jsr df_rst_popWord			; Get pointer
e447 : 86e3             [ 3] 	stx df_tmpptra
e449 : 85e4             [ 3] 	sta df_tmpptra+1
e44b : b2e3             [ 5] 	lda (df_tmpptra)			; Get X coord as int
e44d : 853f             [ 3] 	sta tmp_v1
e44f : a001             [ 2] 	ldy #1
e451 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get X hi byte
e453 : 8540             [ 3] 	sta tmp_v1+1
e455 : c8               [ 2] 	iny
e456 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y coord as int
e458 : 8543             [ 3] 	sta tmp_b
e45a : c8               [ 2] 	iny
e45b : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y hi byte
e45d : 8544             [ 3] 	sta tmp_b+1
e45f : a53f             [ 3] 	lda tmp_v1					; If X and Y low are zero then en
e461 : d007             [ 3] 	bne df_rt_shapeCalc
e463 : a543             [ 3] 	lda tmp_b
e465 : d003             [ 3] 	bne df_rt_shapeCalc
                             	; Got here then must be finished
e467 : 68               [ 4] 	pla							; Pop bytes off 6502 stack
e468 : 68               [ 4] 	pla
e469 : 60               [ 6] 	rts
e46a :                       df_rt_shapeCalc
e46a : 18               [ 2] 	clc
e46b : a5e3             [ 3] 	lda df_tmpptra				; Increment coord pointer 
e46d : 6904             [ 2] 	adc #4						; 2 ints is 4 bytes per coord
e46f : aa               [ 2] 	tax
e470 : a5e4             [ 3] 	lda df_tmpptra+1
e472 : 6900             [ 2] 	adc #0
e474 : 2021f1           [ 6] 	jsr df_rst_pushWord			; Put pointer on runtime s
                             	; previous cursor is starting position
                             	; plus delta is new position
e477 : 68               [ 4] 	pla							; get y0 off stack
e478 : 18               [ 2] 	clc
e479 : 8586             [ 3] 	sta num_a+1
e47b : 6543             [ 3] 	adc tmp_b
e47d : 8588             [ 3] 	sta num_a+3					; y1 = y0+dy
e47f : aa               [ 2] 	tax							; save y1 in X reg
e480 : 68               [ 4] 	pla							; get x0 off stack
e481 : 18               [ 2] 	clc
e482 : 8585             [ 3] 	sta num_a					; x0
e484 : 653f             [ 3] 	adc tmp_v1
e486 : 8587             [ 3] 	sta num_a+2					; x1
e488 : 48               [ 3] 	pha							; save x1
e489 : da               [ 3] 	phx							; save y1
e48a : 20fec2           [ 6] 	jsr _gr_line				; line x0,y0,x1,y1
e48d : 80b5             [ 3] 	bra df_rt_shapeLoop			; go back to next coord
                             	
e48f :                       df_rt_wait
                             	; evaluate the expression
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank1.s --------------------------------

e48f : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
e492 : a8               [ 2] 	tay
e493 :                       df_rt_wait_loop
                             	; check X,Y==0
e493 : 8a               [ 2] 	txa
e494 : d004             [ 3] 	bne df_rt_wait_countdown
e496 : 98               [ 2] 	tya
e497 : d001             [ 3] 	bne df_rt_wait_countdown
                             	; Done (wait 0 returns immediately)
e499 : 60               [ 6] 	rts
e49a :                       df_rt_wait_countdown
                             	; get vdp low byte timer val in A for tick wait
e49a : a510             [ 3] 	lda vdp_int_cnt
e49c : ca               [ 2] 	dex
e49d : e0ff             [ 2] 	cpx #0xff
e49f : d001             [ 3] 	bne df_rt_wait_tick
e4a1 : 88               [ 2] 	dey
e4a2 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
e4a2 : c510             [ 3] 	cmp vdp_int_cnt
e4a4 : f0fc             [ 3] 	beq df_rt_wait_tick
e4a6 : d0eb             [ 3] 	bne df_rt_wait_loop		; Always
                             	
e4a8 :                       df_rt_printat
                             	; Get x,y
e4a8 : 2020db           [ 6] 	jsr df_rt_parm_2ints
e4ab : a6e3             [ 3] 	ldx df_tmpptra
e4ad : a4e5             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
e4af : 20a6c3           [ 6] 	jsr _gr_set_cur
                             	; and continue to normal print command
e4b2 :                       df_rt_print
e4b2 : a4ca             [ 3] 	ldy df_exeoff
e4b4 : 88               [ 2] 	dey
e4b5 :                       df_rt_print_ws
e4b5 : c8               [ 2] 	iny
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
e4b6 : c4c1             [ 3] 	cpy df_nxtstidx
e4b8 : f031             [ 3] 	beq df_rt_print_done
e4ba : b1c8             [ 5] 	lda (df_currlin),y
e4bc : c93a             [ 2] 	cmp #':'
e4be : f02b             [ 3] 	beq df_rt_print_done
e4c0 : c920             [ 2] 	cmp #' '
e4c2 : f0f1             [ 3] 	beq df_rt_print_ws
e4c4 : c92c             [ 2] 	cmp #','
e4c6 : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
e4c8 : 84ca             [ 3] 	sty df_exeoff
                             	
                             	; if starts with string literal then process sev
e4ca : c910             [ 2] 	cmp #DFTK_STRLIT
e4cc : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
e4ce : 206cd8           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
                             	_df_ost_peekType
                             
e4d6 : 3005             [ 3] 	bmi df_rt_print_gotstr
e4d8 : 209ce1           [ 6] 	jsr df_rt_print_num
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank1.s --------------------------------

e4db : 80d5             [ 3] 	bra df_rt_print
e4dd :                       df_rt_print_gotstr
e4dd : 20a3e1           [ 6] 	jsr df_rt_print_str
e4e0 : 80d0             [ 3] 	bra df_rt_print
e4e2 :                       df_rt_print_string
                             	; point to string accumulator
e4e2 : a6bc             [ 3] 	ldx df_sevalptr
e4e4 : a5bd             [ 3] 	lda df_sevalptr+1
e4e6 : 201cd9           [ 6] 	jsr df_rt_seval
e4e9 : 80f2             [ 3] 	bra df_rt_print_gotstr
e4eb :                       df_rt_print_done
e4eb : 84ca             [ 3] 	sty df_exeoff
e4ed : 60               [ 6] 	rts
                             	
e4ee :                       df_rt_println
e4ee : 20b2e4           [ 6] 	jsr df_rt_print
e4f1 : a90d             [ 2] 	lda #UTF_CR
e4f3 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
e4f6 :                       df_rt_nassign
e4f6 : 48               [ 3] 	pha
e4f7 : da               [ 3] 	phx
                             	; now go evaluate expression in to A,X
e4f8 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to
e4fb : 7a               [ 4] 	ply
e4fc : 84e3             [ 3] 	sty df_tmpptra
e4fe : 7a               [ 4] 	ply
e4ff : 84e4             [ 3] 	sty df_tmpptra+1
                             	; save X,A int in contents section
e501 : a001             [ 2] 	ldy #1
e503 : 91e3             [ 5] 	sta (df_tmpptra),y
e505 : 8a               [ 2] 	txa
e506 : 88               [ 2] 	dey
e507 : 91e3             [ 5] 	sta (df_tmpptra),y
                             
e509 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
e50a :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being X,A
e50a : 2020d9           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
e50d : 4c5ff1           [ 3] 	jmp df_ost_popStr
                             	
                             ;	clc
                             ;	rts
                             
                             ; generate lvar from a var token ready for assign
e510 :                       df_rt_generate_lvar
                             	; move past escape val
e510 : a4ca             [ 3] 	ldy df_exeoff
e512 : c8               [ 2] 	iny
                             	; pointing to variable index
e513 : b1c8             [ 5] 	lda (df_currlin),y
e515 : 85e3             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank1.s --------------------------------

e517 : c8               [ 2] 	iny
e518 : b1c8             [ 5] 	lda (df_currlin),y
e51a : 84ca             [ 3] 	sty df_exeoff
e51c : 85e4             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
e51e : b2e3             [ 5] 	lda (df_tmpptra)
e520 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
e521 : 38               [ 2] 	sec
e522 : 2006da           [ 6] 	jsr df_rt_eval_var
e525 : 2063f1           [ 6] 	jsr df_ost_popPtr
                             	; pull the type previously saved into Y
e528 : 7a               [ 4] 	ply
                             	; move past the lvar variable index
e529 : e6ca             [ 5] 	inc df_exeoff
                             ;	clc
e52b : 60               [ 6] 	rts
                             
                             ; assign
                             ; X,A,Y contain lvar pointer and type
e52c :                       df_rt_doassign
                             	; save A and put type Y in to A
e52c : 48               [ 3] 	pha
e52d : 98               [ 2] 	tya
e52e : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
e530 : f004             [ 3] 	beq df_rt_assign_num
                             	; remember to restore A
                             	; jump to string expression evaluator
e532 : 68               [ 4] 	pla
e533 : 4c0ae5           [ 3] 	jmp df_rt_sassign
e536 :                       df_rt_assign_num
                             	; else jump to numeric expression evaluator
                             	; remember to restore A
e536 : 68               [ 4] 	pla
e537 : 4cf6e4           [ 3] 	jmp df_rt_nassign
                             
                             ; general assignment execution
e53a :                       df_rt_assign
e53a : 2010e5           [ 6] 	jsr df_rt_generate_lvar
                             	; go and do the assignment
e53d : 4c2ce5           [ 3] 	jmp df_rt_doassign
                             	
                             ; comment or data token is ignored by runtime
e540 :                       df_rt_comment
e540 :                       df_rt_data
                             ;	clc
e540 : 60               [ 6] 	rts
                             
                             	
                             ; run token	
e541 :                       df_rt_run
                             ;	sec
e541 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
e542 :                       df_rt_eos
e542 : a4ca             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank1.s --------------------------------

                             ;	beq df_rt_eos_true
e544 : c4c1             [ 3] 	cpy df_nxtstidx
e546 : f008             [ 3] 	beq df_rt_eos_true
e548 : b1c8             [ 5] 	lda (df_currlin),y
e54a : c93a             [ 2] 	cmp #':'
e54c : f002             [ 3] 	beq df_rt_eos_true
e54e : 18               [ 2] 	clc
e54f : 60               [ 6] 	rts
e550 :                       df_rt_eos_true
e550 : 38               [ 2] 	sec
e551 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
e552 :                       df_rt_renum
e552 : e6ca             [ 5] 	inc df_exeoff
e554 : 202bdb           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
e557 : a6e3             [ 3] 	ldx df_tmpptra
e559 : a5e4             [ 3] 	lda df_tmpptra+1
e55b : 208ad6           [ 6] 	jsr df_pg_find_line
e55e : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
e562 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
e562 : 86e9             [ 3] 	stx df_tmpptrd
e564 : 85ea             [ 3] 	sta df_tmpptrd+1
e566 :                       df_rt_renum_do
                             	; if not end of program
e566 : a000             [ 2] 	ldy #0
e568 : b1e9             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
e56a : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
e56c : 60               [ 6] 	rts
e56d :                       df_rt_renum_update
                             	; so set this line number to new line number
e56d : a001             [ 2] 	ldy #DFTK_LINNUM
e56f : a5e5             [ 3] 	lda df_tmpptrb
e571 : 91e9             [ 5] 	sta (df_tmpptrd),y
e573 : c8               [ 2] 	iny
e574 : a5e6             [ 3] 	lda df_tmpptrb+1
e576 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
e585 :                       df_rt_renum_next
                             	; point ptrd to the next line
e585 : 18               [ 2] 	clc
e586 : a5e9             [ 3] 	lda df_tmpptrd
e588 : a200             [ 2] 	ldx #0
e58a : 61e9             [ 6] 	adc (df_tmpptrd,x)
e58c : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e590 : e6ea             [ 5] 	inc df_tmpptrd+1
e592 : 4c66e5           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
e595 :                       df_rt_listprocnames
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank1.s --------------------------------

                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
e59d : a5b3             [ 3] 	lda df_varcnt
e59f : 85e5             [ 3] 	sta df_tmpptrb
e5a1 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
e5a1 : a5e5             [ 3] 	lda df_tmpptrb
e5a3 : f03a             [ 3] 	beq df_rt_listpn_done
e5a5 : a000             [ 2] 	ldy #0
e5a7 : b1e3             [ 5] 	lda (df_tmpptra),y
e5a9 : c95f             [ 2] 	cmp #'_'
e5ab : d01b             [ 3] 	bne df_rt_listnextvnt
e5ad :                       df_rt_listprocch
e5ad : b1e3             [ 5] 	lda (df_tmpptra),y
e5af : 2048c5           [ 6] 	jsr io_put_ch
e5b2 : aa               [ 2] 	tax
e5b3 : f003             [ 3] 	beq df_rt_listproccr
e5b5 : c8               [ 2] 	iny
e5b6 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
e5b8 :                       df_rt_listproccr
e5b8 : a90d             [ 2] 	lda #UTF_CR
e5ba : 2048c5           [ 6] 	jsr io_put_ch
e5bd : 18               [ 2] 	clc
e5be :                       df_rt_listprocpause
e5be : 2045c5           [ 6] 	jsr io_get_ch
e5c1 : c920             [ 2] 	cmp #' '
e5c3 : d003             [ 3] 	bne df_rt_listnextvnt
e5c5 :                       df_rt_listwait
e5c5 : 38               [ 2] 	sec
e5c6 : b0f6             [ 3] 	bcs df_rt_listprocpause
e5c8 :                       df_rt_listnextvnt
e5c8 : b1e3             [ 5] 	lda (df_tmpptra),y
e5ca : f003             [ 3] 	beq df_rt_listgotnext
e5cc : c8               [ 2] 	iny
e5cd : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
e5cf :                       df_rt_listgotnext
                             	; dec vnt #
e5cf : c6e5             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
e5d1 : c8               [ 2] 	iny
                             	; add this to vnt pointer
e5d2 : 18               [ 2] 	clc
e5d3 : 98               [ 2] 	tya
e5d4 : 65e3             [ 3] 	adc df_tmpptra
e5d6 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e5da : e6e4             [ 5] 	inc df_tmpptra+1
e5dc : 4ca1e5           [ 3] 	jmp df_rt_listcheckvnt
e5df :                       df_rt_listpn_done
e5df : 60               [ 6] 	rts
                             
e5e0 :                       df_rt_listproc
                             	; A already contains '_'
e5e0 : 8d000a           [ 4] 	sta df_linbuff
e5e3 : a200             [ 2] 	ldx #0
e5e5 : a4ca             [ 3] 	ldy df_exeoff
e5e7 :                       df_rt_listp_copy
e5e7 : c8               [ 2] 	iny
e5e8 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank1.s --------------------------------

e5e9 : b1c8             [ 5] 	lda (df_currlin),y
e5eb : 9d000a           [ 5] 	sta df_linbuff,x
e5ee : 2008ce           [ 6] 	jsr df_tk_isalphanum
e5f1 : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
e5f3 : a200             [ 2] 	ldx #0
e5f5 : 86be             [ 3] 	stx df_linoff
                             	; save runtime pos
e5f7 : 84ca             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
e5f9 : 2027cc           [ 6] 	jsr df_var_find
e5fc : b036             [ 4] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
e5fe : 86d0             [ 3] 	stx df_procptr
e600 : 85d1             [ 3] 	sta df_procptr+1
e602 : 204edc           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
e605 : 86e3             [ 3] 	stx df_tmpptra
e607 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
e609 :                       df_rt_listp_findend
                             	; Go to next stat
e609 : 20fbdb           [ 6] 	jsr df_rt_nextstat
e60c : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
e60e : 98               [ 2] 	tya
e60f : 48               [ 3] 	pha
                             	; find the command
e610 :                       df_rt_listp_findcmd
e610 : c8               [ 2] 	iny
e611 : b1d2             [ 5] 	lda (df_lineptr),y
e613 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
e615 : 8545             [ 3] 	sta tmp_d
e617 : 68               [ 4] 	pla
e618 : a8               [ 2] 	tay
e619 : a545             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
e61b : c987             [ 2] 	cmp #DFRT_ENDDEF
e61d : f00b             [ 3] 	beq df_rt_listp_done
e61f : c986             [ 2] 	cmp #DFRT_DEF
e621 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
e623 : a6d2             [ 3] 	ldx df_lineptr
e625 : a5d3             [ 3] 	lda df_lineptr+1
e627 : 4c09e6           [ 3] 	jmp df_rt_listp_findend
e62a :                       df_rt_listp_done
                             	; Push end line on to stack
e62a : a5d3             [ 3] 	lda df_lineptr+1
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank1.s --------------------------------

e62c : 48               [ 3] 	pha
e62d : 8a               [ 2] 	txa
e62e : 48               [ 3] 	pha
e62f : a5d3             [ 3] 	lda df_lineptr+1
e631 : 4c6be6           [ 3] 	jmp df_rt_list_line
e634 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
e636 :                       df_rt_list
e636 : a900             [ 2] 	lda #0
e638 : 85eb             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
e63a : 20a1dc           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
e63d : 2042e5           [ 6] 	jsr df_rt_eos
                             	; so list whole program
e640 : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
e642 : c95f             [ 2] 	cmp #'_'
e644 : d003             [ 3] 	bne df_rt_list_all
e646 : 4ce0e5           [ 3] 	jmp df_rt_listproc
e649 :                       df_rt_list_all
                             	;if '*' then display all procnames
e649 : c92a             [ 2] 	cmp #'*'
e64b : d003             [ 3] 	bne df_rt_list_linno
e64d : 4c95e5           [ 3] 	jmp df_rt_listprocnames
e650 :                       df_rt_list_linno
                             	; else get 1st parameter
e650 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
e653 : 208ad6           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
e656 : 86e3             [ 3] 	stx df_tmpptra
e658 : 85e4             [ 3] 	sta df_tmpptra+1
e65a : 4c65e6           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
e65d :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
e665 :                       df_rt_listprgend
e665 : a5aa             [ 3] 	lda df_prgend+1
e667 : 48               [ 3] 	pha						; df_prgend hi at 102,x
e668 : a5a9             [ 3] 	lda df_prgend
e66a : 48               [ 3] 	pha						; df_prgend lo at 101,x
e66b :                       df_rt_list_line
                             	; if line length = 0 then end of program
e66b : a000             [ 2] 	ldy #0
e66d : b1e3             [ 5] 	lda (df_tmpptra),y
e66f : f039             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
e671 : a5eb             [ 3] 	lda df_tmpptre
e673 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank1.s --------------------------------

e675 : 18               [ 2] 	clc
e676 :                       df_rt_list_synckey
e676 : a5eb             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
e678 : d00b             [ 3] 	bne df_rt_list_line_cont
e67a :                       df_rt_list_pause
e67a : 2045c5           [ 6] 	jsr io_get_ch
e67d : c920             [ 2] 	cmp #' '						; Space = PAUSE
e67f : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
e681 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e683 : f025             [ 3] 	beq df_rt_list_line_fin
e685 :                       df_rt_list_line_cont
e685 : a000             [ 2] 	ldy #0
e687 : 84be             [ 3] 	sty df_linoff
e689 : 20ade6           [ 6] 	jsr df_rt_list_all_line
e68c :                       df_rt_list_next_line
                             	; new line
e68c : 2007c8           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
e68f : 18               [ 2] 	clc
e690 : a5e3             [ 3] 	lda df_tmpptra
e692 : a000             [ 2] 	ldy #0
e694 : 71e3             [ 5] 	adc (df_tmpptra),y
e696 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e69a : e6e4             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
e69c : ba               [ 2] 	tsx
e69d : 38               [ 2] 	sec
e69e : bd0101           [ 4] 	lda 0x101,x						; get prend lo from stack frame
e6a1 : e5e3             [ 3] 	sbc df_tmpptra
e6a3 : bd0201           [ 4] 	lda 0x102,x						; get prend hi from stack frame
e6a6 : e5e4             [ 3] 	sbc df_tmpptra+1
e6a8 : b0c1             [ 3] 	bcs df_rt_list_line
e6aa :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
e6aa : 68               [ 4] 	pla
e6ab : 68               [ 4] 	pla
e6ac :                       df_rt_list_line_only_fin
e6ac : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
e6ad :                       df_rt_list_all_line				; Start here to include nu
e6ad : 20e7e7           [ 6] 	jsr df_rt_list_linnum
e6b0 :                       df_rt_list_line_only			; Start here for just the 
e6b0 : a003             [ 2] 	ldy #3
e6b2 : b1e3             [ 5] 	lda (df_tmpptra),y
e6b4 : 85d4             [ 3] 	sta df_lineidx
e6b6 : c8               [ 2] 	iny
e6b7 : 84be             [ 3] 	sty df_linoff
e6b9 :                       df_rt_list_decode
e6b9 : a4be             [ 3] 	ldy df_linoff
e6bb : b1e3             [ 5] 	lda (df_tmpptra),y
e6bd : 3010             [ 3] 	bmi df_rt_list_token
e6bf : c920             [ 2] 	cmp #DFTK_ESCVAL
e6c1 : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
e6c3 : 2048c5           [ 6] 	jsr io_put_ch
e6c6 : 4cd2e6           [ 3] 	jmp df_rt_list_nexttok
e6c9 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank1.s --------------------------------

e6c9 : 20ebe6           [ 6] 	jsr df_rt_list_decode_esc
e6cc : 4cd2e6           [ 3] 	jmp df_rt_list_nexttok
e6cf :                       df_rt_list_token
e6cf : 20f8e7           [ 6] 	jsr df_rt_list_decode_token
e6d2 :                       df_rt_list_nexttok
                             	; advance the line offset
e6d2 : e6be             [ 5] 	inc df_linoff
e6d4 : a5be             [ 3] 	lda df_linoff
                             	; check if at end of line
e6d6 : a200             [ 2] 	ldx #0
e6d8 : c1e3             [ 6] 	cmp (df_tmpptra,x)
e6da : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
e6dc : c5d4             [ 3] 	cmp df_lineidx
e6de : d0d9             [ 3] 	bne df_rt_list_decode
e6e0 : a8               [ 2] 	tay
                             	; save the next statement offset
e6e1 : b1e3             [ 5] 	lda (df_tmpptra),y
e6e3 : 85d4             [ 3] 	sta df_lineidx
e6e5 : c8               [ 2] 	iny
e6e6 : 84be             [ 3] 	sty df_linoff
e6e8 : 4cb9e6           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
e6eb :                       df_rt_list_decode_esc
                             	; jump over esc byte
e6eb : c8               [ 2] 	iny
e6ec : 84be             [ 3] 	sty df_linoff
e6ee : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
e6ef : b1e3             [ 5] 	lda (df_tmpptra),y
e6f1 : 85e5             [ 3] 	sta df_tmpptrb
e6f3 : c8               [ 2] 	iny
e6f4 : b1e3             [ 5] 	lda (df_tmpptra),y
e6f6 : 85e6             [ 3] 	sta df_tmpptrb+1
e6f8 : 88               [ 2] 	dey				; Y is on byte after esc byte
e6f9 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
e6fa : 0a               [ 2] 	asl a
e6fb : aa               [ 2] 	tax
e6fc : bdbddd           [ 4] 	lda df_rt_escjmp,x
e6ff : 85e7             [ 3] 	sta df_tmpptrc
e701 : bdbedd           [ 4] 	lda df_rt_escjmp+1,x
e704 : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
e706 : 6ce700           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
e709 :                       df_rt_lst_reserved
e709 : 60               [ 6] 	rts
                             
                             ; decode a byte char
e70a :                       df_rt_lst_chr
e70a : a927             [ 2] 	lda #0x27			; Single quote
e70c : 2048c5           [ 6] 	jsr io_put_ch
e70f : a5e5             [ 3] 	lda df_tmpptrb
e711 : 2048c5           [ 6] 	jsr io_put_ch
e714 : a927             [ 2] 	lda #0x27			; Single quote
e716 : 2048c5           [ 6] 	jsr io_put_ch
e719 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank1.s --------------------------------

e71a : 84be             [ 3] 	sty df_linoff
e71c : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
e71d :                       df_rt_lst_hex_pre
e71d : a930             [ 2] 	lda #'0'
e71f : 2048c5           [ 6] 	jsr io_put_ch
e722 : a978             [ 2] 	lda #'x'
e724 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
e727 :                       df_rt_lst_bythex
e727 : 201de7           [ 6] 	jsr df_rt_lst_hex_pre
e72a :                       df_rt_lst_lo_hex
e72a : a5e5             [ 3] 	lda df_tmpptrb
e72c : 2034c8           [ 6] 	jsr str_a_to_x
e72f : 2048c5           [ 6] 	jsr io_put_ch
e732 : 8a               [ 2] 	txa
e733 : 2048c5           [ 6] 	jsr io_put_ch
e736 :                       df_rt_lst_const_done
e736 : c8               [ 2] 	iny
e737 : 84be             [ 3] 	sty df_linoff
e739 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
e73a :                       df_rt_lst_inthex
e73a : 201de7           [ 6] 	jsr df_rt_lst_hex_pre
e73d : a5e6             [ 3] 	lda df_tmpptrb+1
e73f : 2034c8           [ 6] 	jsr str_a_to_x
e742 : 2048c5           [ 6] 	jsr io_put_ch
e745 : 8a               [ 2] 	txa
e746 : 2048c5           [ 6] 	jsr io_put_ch
e749 : 4c2ae7           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
e74c :                       df_rt_lst_bytbin
e74c : a5e5             [ 3] 	lda df_tmpptrb
e74e : 85e6             [ 3] 	sta df_tmpptrb+1
e750 : a208             [ 2] 	ldx #8
e752 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
e754 :                       df_rt_lst_intbin
e754 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
e756 :                       df_rt_lst_bin
e756 : a930             [ 2] 	lda #'0'
e758 : 2048c5           [ 6] 	jsr io_put_ch
e75b : a962             [ 2] 	lda #'b'
e75d : 2048c5           [ 6] 	jsr io_put_ch
e760 :                       df_rt_lst_bit
e760 : a930             [ 2] 	lda #'0'
e762 : 06e5             [ 5] 	asl df_tmpptrb
e764 : 26e6             [ 5] 	rol df_tmpptrb+1
e766 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
e768 :                       df_rt_lst_bit_skip0
e768 : 2048c5           [ 6] 	jsr io_put_ch
e76b : ca               [ 2] 	dex
e76c : d0f2             [ 3] 	bne df_rt_lst_bit
e76e : f0c6             [ 3] 	beq df_rt_lst_const_done
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank1.s --------------------------------

                             
                             ; Decode a decimal integer
e770 :                       df_rt_lst_intdec
e770 : a6e5             [ 3] 	ldx df_tmpptrb
e772 : a5e6             [ 3] 	lda df_tmpptrb+1
e774 : c8               [ 2] 	iny
e775 : 84be             [ 3] 	sty df_linoff
e777 : 18               [ 2] 	clc
e778 : 4cbeca           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
e77b :                       df_rt_lst_var
e77b :                       df_rt_lst_proc
                             	; jump over the address bytes
e77b : c8               [ 2] 	iny
e77c : 84be             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
e78e : a000             [ 2] 	ldy #0
e790 :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
e790 : a5e9             [ 3] 	lda df_tmpptrd
e792 : c5e5             [ 3] 	cmp df_tmpptrb
e794 : d006             [ 3] 	bne df_rt_list_vvtend
e796 : a5ea             [ 3] 	lda df_tmpptrd+1
e798 : c5e6             [ 3] 	cmp df_tmpptrb+1
e79a : f021             [ 3] 	beq df_rt_list_gotvvt
e79c :                       df_rt_list_vvtend
e79c : b1e7             [ 5] 	lda (df_tmpptrc),y
e79e : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
e7a6 : 4c9ce7           [ 3] 	jmp df_rt_list_vvtend
e7a9 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
e7af : 18               [ 2] 	clc
e7b0 : a5e9             [ 3] 	lda df_tmpptrd
e7b2 : 6908             [ 2] 	adc #DFVVT_SZ
e7b4 : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e7b8 : e6ea             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
e7ba : 4c90e7           [ 3] 	jmp df_rt_list_findvvt
e7bd :                       df_rt_list_gotvvt
e7bd : b1e7             [ 5] 	lda (df_tmpptrc),y
e7bf : f025             [ 3] 	beq df_rt_list_donvvt
e7c1 : 2048c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
e7ca : 4cbde7           [ 3] 	jmp df_rt_list_gotvvt
                             
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank1.s --------------------------------

e7cd :                       df_rt_lst_strlit
e7cd : a922             [ 2] 	lda #0x22
e7cf : 2048c5           [ 6] 	jsr io_put_ch
e7d2 : a4be             [ 3] 	ldy df_linoff
e7d4 :                       df_rt_lst_strlitch
e7d4 : b1e3             [ 5] 	lda (df_tmpptra),y
e7d6 : f007             [ 3] 	beq df_rt_lst_strlitdon
e7d8 : 2048c5           [ 6] 	jsr io_put_ch
e7db : c8               [ 2] 	iny
e7dc : 4cd4e7           [ 3] 	jmp df_rt_lst_strlitch
e7df :                       df_rt_lst_strlitdon
e7df : a922             [ 2] 	lda #0x22
e7e1 : 2048c5           [ 6] 	jsr io_put_ch
e7e4 : 84be             [ 3] 	sty df_linoff
e7e6 :                       df_rt_list_donvvt
e7e6 : 60               [ 6] 	rts
                             
e7e7 :                       df_rt_list_linnum
e7e7 : a001             [ 2] 	ldy #1
e7e9 : b1e3             [ 5] 	lda (df_tmpptra),y
e7eb : aa               [ 2] 	tax
e7ec : c8               [ 2] 	iny
e7ed : b1e3             [ 5] 	lda (df_tmpptra),y
e7ef : 18               [ 2] 	clc
e7f0 : 20beca           [ 6] 	jsr print_a_to_d
e7f3 : a920             [ 2] 	lda #0x20			; Always add a space after line num
e7f5 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
e7f8 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
e7f8 : c997             [ 2] 	cmp #DFRT_ASM
e7fa : d003             [ 3] 	bne df_rt_list_decode_token_normal
e7fc : 4c36e8           [ 3] 	jmp df_rt_asm_decode_token
e7ff :                       df_rt_list_decode_token_normal
e7ff : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
e801 : c902             [ 2] 	cmp #2
e803 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
e805 : 60               [ 6] 	rts
e806 :                       df_rt_list_do_decode_tkn
e806 : aa               [ 2] 	tax
e807 : a9af             [ 2] 	lda #lo(df_tokensyms)
e809 : 85e5             [ 3] 	sta df_tmpptrb
e80b : a9d1             [ 2] 	lda #hi(df_tokensyms)
e80d : 85e6             [ 3] 	sta df_tmpptrb+1
e80f :                       df_rt_list_find_sym
e80f : 8a               [ 2] 	txa
e810 : f012             [ 3] 	beq df_rt_list_got_sym
e812 : a000             [ 2] 	ldy #0
e814 :                       df_rt_list_next_ch
e814 : b1e5             [ 5] 	lda (df_tmpptrb),y
e816 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
e81d : 68               [ 4] 	pla
e81e : 10f4             [ 3] 	bpl df_rt_list_next_ch
e820 :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
e820 : ca               [ 2] 	dex
e821 : 4c0fe8           [ 3] 	jmp df_rt_list_find_sym
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank1.s --------------------------------

e824 :                       df_rt_list_got_sym
e824 : a1e5             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
e826 : 08               [ 3] 	php
e827 : 297f             [ 2] 	and #0x7f
e829 : 2048c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e832 : 28               [ 4] 	plp
e833 : 10ef             [ 3] 	bpl df_rt_list_got_sym
e835 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
e836 :                       df_rt_asm_decode_token
e836 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
e838 : 2048c5           [ 6] 	jsr io_put_ch
e83b : a4be             [ 3] 	ldy df_linoff		;Print out any whitespace
e83d :                       df_rt_asm_decode_token_ws
e83d : c8               [ 2] 	iny					;Point to char after the asm token
e83e : 84be             [ 3] 	sty df_linoff
e840 : b1e3             [ 5] 	lda (df_tmpptra),y	;What is the char?
e842 : 202fce           [ 6] 	jsr df_tk_isws		;If not then found the keyword
e845 : 9005             [ 3] 	bcc df_rt_asm_decode_token_found
e847 : 2048c5           [ 6] 	jsr io_put_ch		;Print the space
e84a : 80f1             [ 3] 	bra df_rt_asm_decode_token_ws
e84c :                       df_rt_asm_decode_token_found
e84c : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
e84e : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
e850 : 4cebe6           [ 3] 	jmp df_rt_list_decode_esc
e853 :                       df_rt_asm_decode_token_keyword
e853 : 297f             [ 2] 	and #0x7f			; Mask off MSB
e855 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
e856 : a989             [ 2] 	lda #lo(df_asm_tokensyms)
e858 : 85e5             [ 3] 	sta df_tmpptrb
e85a : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
e85c : 85e6             [ 3] 	sta df_tmpptrb+1
e85e :                       df_rt_list_find_asm_sym
e85e : 8a               [ 2] 	txa
e85f : f01b             [ 3] 	beq df_rt_list_got_asm_sym
e861 : a000             [ 2] 	ldy #0
e863 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
e869 : b1e5             [ 5] 	lda (df_tmpptrb),y
e86b : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
e86d : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
e86f : 38               [ 2] 	sec					; Skip offset and mode bytes
e870 : 65e5             [ 3] 	adc df_tmpptrb
e872 : 85e5             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
e876 : e6e6             [ 5] 	inc df_tmpptrb+1
e878 : ca               [ 2] 	dex					; One less symbol to skip over
e879 : 4c5ee8           [ 3] 	jmp df_rt_list_find_asm_sym
e87c :                       df_rt_list_got_asm_sym
e87c : a1e5             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
e87e : c920             [ 2] 	cmp #' '
e880 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
e882 : 2048c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank1.s --------------------------------

e88b : 4c7ce8           [ 3] 	jmp df_rt_list_got_asm_sym
e88e :                       df_rt_asm_decode_token_done
e88e : 60               [ 6] 	rts
                             
                             
e88f :                       df_rt_doke
e88f : 2020db           [ 6] 	jsr df_rt_parm_2ints
e892 : a5e5             [ 3] 	lda df_tmpptrb
e894 : 92e3             [ 5] 	sta (df_tmpptra)
                             	; get high byte to doke
e896 : a5e6             [ 3] 	lda df_tmpptrb+1
e898 : a001             [ 2] 	ldy #1
                             	; poke hi byte
e89a : 91e3             [ 5] 	sta (df_tmpptra),y
e89c : 60               [ 6] 	rts
                             	
e89d :                       df_rt_poke
e89d : 2020db           [ 6] 	jsr df_rt_parm_2ints
e8a0 : a5e5             [ 3] 	lda df_tmpptrb
e8a2 : 92e3             [ 5] 	sta (df_tmpptra)
                             ;	clc
e8a4 : 60               [ 6] 	rts
                             
e8a5 :                       df_rt_vpoke
e8a5 : 2020db           [ 6] 	jsr df_rt_parm_2ints
e8a8 : a6e3             [ 3] 	ldx df_tmpptra
e8aa : a4e4             [ 3] 	ldy df_tmpptra+1
e8ac : a5e5             [ 3] 	lda df_tmpptrb
e8ae : 4c1ec4           [ 3] 	jmp _vdp_poke
                             ;	clc
                             ;	rts
                             
e8b1 :                       df_rt_nvpoke
e8b1 : 2020db           [ 6] 	jsr df_rt_parm_2ints
e8b4 : a6e3             [ 3] 	ldx df_tmpptra
e8b6 : a5e5             [ 3] 	lda df_tmpptrb
e8b8 : 4caec4           [ 3] 	jmp _rtc_nvwrite
                             ;	clc
e8bb : 60               [ 6] 	rts
                             
e8bc :                       df_rt_setvdp
e8bc : 2020db           [ 6] 	jsr df_rt_parm_2ints
e8bf : a5e3             [ 3] 	lda df_tmpptra
e8c1 : a6e5             [ 3] 	ldx df_tmpptrb
e8c3 : 4cd8c5           [ 3] 	jmp vdp_wr_reg
                             ;	clc
                             ;	rts
                             
e8c6 :                       df_rt_colour
e8c6 : 202bdb           [ 6] 	jsr df_rt_parm_3ints
                             	; colour is a combination of b and c parms
e8c9 : a5e5             [ 3] 	lda df_tmpptrb
e8cb : 0a               [ 2] 	asl a
e8cc : 0a               [ 2] 	asl a
e8cd : 0a               [ 2] 	asl a
e8ce : 0a               [ 2] 	asl a
e8cf : 05e7             [ 3] 	ora df_tmpptrc
e8d1 : 48               [ 3] 	pha
e8d2 : a5e3             [ 3] 	lda df_tmpptra
e8d4 : c920             [ 2] 	cmp #32					; 32 = border colour
e8d6 : f00e             [ 3] 	beq df_rt_colour_border
                             	; else write to the colour table
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank1.s --------------------------------

                             	; first calculate the colour table address
e8d8 : 18               [ 2] 	clc
e8d9 : 6519             [ 3] 	adc vdp_base+vdp_addr_col
e8db : aa               [ 2] 	tax
e8dc : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
e8de : 6900             [ 2] 	adc #0
e8e0 : a8               [ 2] 	tay
e8e1 : 68               [ 4] 	pla
                             	; A = colour, YX = address
e8e2 : 2010c6           [ 6] 	jsr vdp_poke
e8e5 : 60               [ 6] 	rts
e8e6 :                       df_rt_colour_border
e8e6 : a907             [ 2] 	lda #7
e8e8 : fa               [ 4] 	plx
e8e9 : 4cd8c5           [ 3] 	jmp vdp_wr_reg
                             
e8ec :                       df_rt_sprite
e8ec : 205edb           [ 6] 	jsr df_rt_parm_5ints
                             	; calculate the sprite number in vram
e8ef : a5e3             [ 3] 	lda df_tmpptra
e8f1 : 0a               [ 2] 	asl a
e8f2 : 0a               [ 2] 	asl a
e8f3 : 18               [ 2] 	clc
e8f4 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e8f6 : aa               [ 2] 	tax
e8f7 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e8f9 : 6900             [ 2] 	adc #0
e8fb : 78               [ 2] 	sei				; Disable interrupts
e8fc : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e8ff : a5e7             [ 3] 	lda df_tmpptrc
e901 : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e904 : a5e5             [ 3] 	lda df_tmpptrb
e906 : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the pattern name (tmpd)
e909 : a5e9             [ 3] 	lda df_tmpptrd
e90b : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the colour / ec byte (tmpe)
e90e : a5eb             [ 3] 	lda df_tmpptre
e910 : 200bc6           [ 6] 	jsr vdp_wr_vram
e913 : 58               [ 2] 	cli				; Enable interrupts
e914 : 60               [ 6] 	rts
                             
                             
                             ; copy pattern array to sprite pattern vram
                             ; pattern array is a mim 4 element int
e915 :                       df_rt_spritepat
e915 : 2020db           [ 6] 	jsr df_rt_parm_2ints
                             	; save sprite number
e918 : 86e3             [ 3] 	stx df_tmpptra
e91a : 64e4             [ 3] 	stz df_tmpptra+1
                             	; multiply by 8 to get pattern offset
e91c : 06e3             [ 5] 	asl df_tmpptra
e91e : 26e4             [ 5] 	rol df_tmpptra+1
e920 : 06e3             [ 5] 	asl df_tmpptra
e922 : 26e4             [ 5] 	rol df_tmpptra+1
e924 : 06e3             [ 5] 	asl df_tmpptra
e926 : 26e4             [ 5] 	rol df_tmpptra+1
                             	; add offset to sprite pattern base
                             	; and put in X,A
e928 : a5e3             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank1.s --------------------------------

e92a : 651f             [ 3] 	adc vdp_base+vdp_addr_spp
e92c : aa               [ 2] 	tax
e92d : a5e4             [ 3] 	lda df_tmpptra+1
e92f : 6520             [ 3] 	adc vdp_base+vdp_addr_spp+1
e931 : 78               [ 2] 	sei			; Disable interrupts
                             	; set vdp address
e932 : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	; start from beginning of array
e935 : a000             [ 2] 	ldy #0
e937 :                       df_rt_spritepat_line
                             	; get the sprite patten from array
e937 : b1e5             [ 5] 	lda (df_tmpptrb),y
                             	; and write to vdp
e939 : 200bc6           [ 6] 	jsr vdp_wr_vram
e93c : c8               [ 2] 	iny
                             	; do this for 8 bytes (4 elements)
e93d : c008             [ 2] 	cpy #8
e93f : d0f6             [ 3] 	bne df_rt_spritepat_line
e941 : 58               [ 2] 	cli			; Enable interrupts
e942 : 60               [ 6] 	rts
                             
e943 :                       df_rt_spritepos
e943 : 202bdb           [ 6] 	jsr df_rt_parm_3ints
                             	; calculate the sprite number in vram
e946 : a5e3             [ 3] 	lda df_tmpptra
e948 : 0a               [ 2] 	asl a
e949 : 0a               [ 2] 	asl a
e94a : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e94c : aa               [ 2] 	tax
e94d : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e94f : 6900             [ 2] 	adc #0
e951 : 78               [ 2] 	sei
e952 : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e955 : a5e7             [ 3] 	lda df_tmpptrc
e957 : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e95a : a5e5             [ 3] 	lda df_tmpptrb
e95c : 200bc6           [ 6] 	jsr vdp_wr_vram
e95f : 58               [ 2] 	cli
e960 : 60               [ 6] 	rts
                             
                             ; common routine for col and nme variations
                             ; A contains offset in to sprite table to update
e961 :                       df_rt_spriteattr
                             	; save A which contains the offset
e961 : 48               [ 3] 	pha
e962 : 2020db           [ 6] 	jsr df_rt_parm_2ints
                             	; calculate the sprite number in vram
e965 : a5e3             [ 3] 	lda df_tmpptra
e967 : 0a               [ 2] 	asl a
e968 : 0a               [ 2] 	asl a
e969 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e96b : 85e3             [ 3] 	sta df_tmpptra
e96d : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e96f : 6900             [ 2] 	adc #0
e971 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; add offset and put in X,A to set VRAM address
e973 : 68               [ 4] 	pla							; get offset from stack
e974 : 65e3             [ 3] 	adc df_tmpptra
e976 : aa               [ 2] 	tax
e977 : a5e4             [ 3] 	lda df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank1.s --------------------------------

e979 : 6900             [ 2] 	adc #0
e97b : a8               [ 2] 	tay
e97c : a5e5             [ 3] 	lda df_tmpptrb
e97e : 4c10c6           [ 3] 	jmp vdp_poke
                             
e981 :                       df_rt_spritecol
                             	; offset is 3 for colour byte
e981 : a903             [ 2] 	lda #3
e983 : 4c61e9           [ 3] 	jmp df_rt_spriteattr
                             
e986 :                       df_rt_spritenme
                             	; offset is 2 for name byte
e986 : a902             [ 2] 	lda #2
e988 : 4c61e9           [ 3] 	jmp df_rt_spriteattr
                             
e98b :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
e98b : a5e3             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
e98d : 3a               [ 2] 	dec a
e98e : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
e990 : 0a               [ 2] 	asl a
e991 : aa               [ 2] 	tax
                             	; get low byte of period
e992 : a4e5             [ 3] 	ldy df_tmpptrb
e994 : 20eec3           [ 6] 	jsr _snd_set
                             	; increment reg number to high byte
e997 : e8               [ 2] 	inx
                             	; get high byte of period
e998 : a5e6             [ 3] 	lda df_tmpptrb+1
e99a : 290f             [ 2] 	and #0x0f
e99c : a8               [ 2] 	tay
                             	; set period
e99d : 20eec3           [ 6] 	jsr _snd_set
                             	; get volume register index (8 = channel 1)
e9a0 : 18               [ 2] 	clc
e9a1 : a5e3             [ 3] 	lda df_tmpptra
e9a3 : 2903             [ 2] 	and #3
e9a5 : 6907             [ 2] 	adc #7
e9a7 : aa               [ 2] 	tax
                             	; get volume
e9a8 : a5e7             [ 3] 	lda df_tmpptrc
e9aa : 290f             [ 2] 	and #0x0f
e9ac : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
e9ae : 0910             [ 2] 	ora #0x10
e9b0 :                       df_rt_sound_env_skip
e9b0 : a8               [ 2] 	tay
e9b1 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	rts
                             
                             ; sound chan,period,volume	
e9b4 :                       df_rt_sound
e9b4 : 202bdb           [ 6] 	jsr df_rt_parm_3ints
e9b7 :                       df_rt_dosound
                             	; check which channel (0 = noise)
e9b7 : a5e3             [ 3] 	lda df_tmpptra
e9b9 : f003             [ 3] 	beq df_rt_sound_noise
e9bb : 4c8be9           [ 3] 	jmp df_rt_snd_common
e9be :                       df_rt_sound_noise
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank1.s --------------------------------

                             	; ok update the noise channel, volume is irrelev
e9be : a206             [ 2] 	ldx #6
e9c0 : a5e5             [ 3] 	lda df_tmpptrb
e9c2 : 291f             [ 2] 	and #0x1f
e9c4 : a8               [ 2] 	tay
e9c5 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             ; music chan,octave,note,volume
e9c8 :                       df_rt_music
e9c8 : 2042db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
e9cb : 18               [ 2] 	clc
e9cc : a5e5             [ 3] 	lda df_tmpptrb
e9ce : 65e5             [ 3] 	adc df_tmpptrb
e9d0 : 65e5             [ 3] 	adc df_tmpptrb
e9d2 : 0a               [ 2] 	asl a
e9d3 : 0a               [ 2] 	asl a
                             	; we have x12, now add note to get index
e9d4 : 65e7             [ 3] 	adc df_tmpptrc
e9d6 : 0a               [ 2] 	asl a
e9d7 : a8               [ 2] 	tay
                             	; get period A,X (hi/lo)
e9d8 : 20bec3           [ 6] 	jsr _snd_get_note
e9db : 86e5             [ 3] 	stx df_tmpptrb
e9dd : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
e9df : a5e9             [ 3] 	lda df_tmpptrd
e9e1 : 85e7             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
e9e3 : 4cb7e9           [ 3] 	jmp df_rt_dosound
                             	
                             	
                             ; play tonemask,noisemask,envelope,period
e9e6 :                       df_rt_play
e9e6 : 2042db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
e9e9 : a5e3             [ 3] 	lda df_tmpptra
e9eb : 2907             [ 2] 	and #7
e9ed : 85e3             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
e9ef : a5e5             [ 3] 	lda df_tmpptrb
e9f1 : 2907             [ 2] 	and #7
e9f3 : 0a               [ 2] 	asl a
e9f4 : 0a               [ 2] 	asl a
e9f5 : 0a               [ 2] 	asl a
e9f6 : 05e3             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; keep top 2 bits 0 as these are port a and b in
e9f8 : 493f             [ 2] 	eor #0x3f
e9fa : a8               [ 2] 	tay
                             	; reg 7 is control register
e9fb : a207             [ 2] 	ldx #7
e9fd : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 3 = envelope mode
ea00 : a5e7             [ 3] 	lda df_tmpptrc
ea02 : 290f             [ 2] 	and #0xf
ea04 : a8               [ 2] 	tay
                             	; 13 is envelope shape register
ea05 : a20d             [ 2] 	ldx #13
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank1.s --------------------------------

ea07 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
ea0a : a20b             [ 2] 	ldx #11
                             	; get low
ea0c : a4e9             [ 3] 	ldy df_tmpptrd
ea0e : 20eec3           [ 6] 	jsr _snd_set
                             	; get high
ea11 : e8               [ 2] 	inx
ea12 : a4ea             [ 3] 	ldy df_tmpptrd+1
ea14 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             
                             ;* Binary save mem,hdr,addr,len,filename
ea17 :                       df_rt_bsave
                             	; Get mem type, 0=RAM, else VRAM
ea17 : 206cd8           [ 6] 	jsr df_rt_neval				; Get mem type
ea1a : 2067f1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
ea1d : e076             [ 2] 	cpx #'v'
ea1f : d003             [ 3] 	bne df_rt_bsave_tryr
ea21 : 18               [ 2] 	clc							; Clear C for vram
ea22 : 8007             [ 3] 	bra df_rt_bsave_savep
ea24 :                       df_rt_bsave_tryr
ea24 : e072             [ 2] 	cpx #'r'
ea26 : f002             [ 3] 	beq	 df_rt_bsave_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
ea2a :                       df_rt_bsave_setR
ea2a : 38               [ 2] 	sec							; Set C for ram
ea2b :                       df_rt_bsave_savep
                             	; save C, clear=VRAM, set=RAM
ea2b : 08               [ 3] 	php
                             
                             	; jump over comma
ea2c : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
ea2e : 206cd8           [ 6] 	jsr df_rt_neval				; Get header length
ea31 : 2067f1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
ea34 : da               [ 3] 	phx
                             
                             	; jump over comma
ea35 : e6ca             [ 5] 	inc df_exeoff
ea37 : 206cd8           [ 6] 	jsr df_rt_neval				; Get address
ea3a : 2067f1           [ 6] 	jsr df_ost_popInt			; X,A = Address
ea3d : 48               [ 3] 	pha
ea3e : da               [ 3] 	phx
                             
                             	; jump over comma
ea3f : e6ca             [ 5] 	inc df_exeoff
ea41 : 206cd8           [ 6] 	jsr df_rt_neval				; Get length
ea44 : 2067f1           [ 6] 	jsr df_ost_popInt			; X,A = Length
ea47 : 48               [ 3] 	pha
ea48 : da               [ 3] 	phx
                             
                             	; jump over comma
ea49 : e6ca             [ 5] 	inc df_exeoff
                             	; Process filename
ea4b : 20b6ea           [ 6] 	jsr df_rt_parse_file
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank1.s --------------------------------

ea4e : 204ec5           [ 6] 	jsr io_open_write
ea51 : b05a             [ 3] 	bcs df_rt_file_errc3		; Error condition resets t
                             
                             	; On the stack, we have lenlo,lenhi,adlo,adhi,he
ea53 : ba               [ 2] 	tsx
ea54 : bc0501           [ 4] 	ldy 0x105,x					; Get header len
ea57 : f008             [ 3] 	beq df_rt_bsave_byte
ea59 : a900             [ 2] 	lda #0						; Zero filler
ea5b :                       df_rt_bsave_header
ea5b : 2048c5           [ 6] 	jsr io_put_ch				; Write a byte to disk
ea5e : 88               [ 2] 	dey
ea5f : d0fa             [ 3] 	bne df_rt_bsave_header
ea61 :                       df_rt_bsave_byte
ea61 : ba               [ 2] 	tsx							; Restore SP to X
ea62 : bd0101           [ 4] 	lda 0x101,x					; low<>0 carry on
ea65 : d005             [ 3] 	bne df_rt_bsave_byte_do
ea67 : bd0201           [ 4] 	lda 0x102,x					; hi<>0 carry on
ea6a : f038             [ 3] 	beq df_rt_bsave_done		; else done
ea6c :                       df_rt_bsave_byte_do
ea6c : bd0601           [ 4] 	lda 0x106,x					; Get the C status
ea6f : 48               [ 3] 	pha
ea70 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
ea71 : bd0301           [ 4] 	lda 0x103,x					; Get low address
ea74 : bc0401           [ 4] 	ldy 0x104,x					; Get high address
ea77 : aa               [ 2] 	tax							; X,Y contain address
                             
ea78 : b006             [ 3] 	bcs df_rt_bsave_ram			; RAM or VRAM?
                             	; Read from VRAM
ea7a : 98               [ 2] 	tya							; A needs to contain high byte
ea7b : 2006c4           [ 6] 	jsr _vdp_peek				; Peek VRAM
ea7e : 8006             [ 3] 	bra df_rt_bsave_write
ea80 :                       df_rt_bsave_ram
                             	; Read from RAM
ea80 : 86e3             [ 3] 	stx df_tmpptra				; Save address
ea82 : 84e4             [ 3] 	sty df_tmpptra+1
ea84 : b2e3             [ 5] 	lda (df_tmpptra)			; Peek RAM
ea86 :                       df_rt_bsave_write
ea86 : 2048c5           [ 6] 	jsr io_put_ch				; Write to disk
ea89 : ba               [ 2] 	tsx							; Get SP to X
ea8a : fe0301           [ 6] 	inc 0x103,x					; Increment low address
ea8d : d003             [ 3] 	bne df_rt_bsave_skiph
ea8f : fe0401           [ 6] 	inc 0x104,x					; Increment high address
ea92 :                       df_rt_bsave_skiph
ea92 : bc0101           [ 4] 	ldy 0x101,x					; Get low len byte
ea95 : f005             [ 3] 	beq df_rt_bsave_dech
ea97 : de0101           [ 6] 	dec 0x101,x					; A simple decrement
ea9a : 80c5             [ 3] 	bra df_rt_bsave_byte		; Process next byte
ea9c :                       df_rt_bsave_dech
ea9c : de0101           [ 6] 	dec 0x101,x					; Decrement low in readiness
ea9f : de0201           [ 6] 	dec 0x102,x					; Decrement high
eaa2 : 80bd             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eaa4 :                       df_rt_bsave_done
                             	; Tidy the stack
eaa4 : 68               [ 4] 	pla
eaa5 : 68               [ 4] 	pla
eaa6 : 68               [ 4] 	pla
eaa7 : 68               [ 4] 	pla
eaa8 : 68               [ 4] 	pla
eaa9 : 68               [ 4] 	pla
eaaa : 4cd3ea           [ 3] 	jmp df_rt_file_cleanup		; Clean up FS
                             
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank1.s --------------------------------

eaad :                       df_rt_file_errc3				; Stepping stone!!!
eaad : b0fe             [ 3] 	bcs df_rt_file_errc3
                             
                             ;* common filename procesing routine
                             ;* 
eaaf :                       df_rt_init_filename
                             	; evaluate string X,A has the string pointer
eaaf : 206cd8           [ 6] 	jsr df_rt_neval
eab2 : 205ff1           [ 6] 	jsr df_ost_popStr
                             
eab5 : 60               [ 6] 	rts
                             	
                             ;* common file parsing routine
eab6 :                       df_rt_parse_file
eab6 : a902             [ 2] 	lda #2					; Only works for SD card now
eab8 : 202dc5           [ 6] 	jsr io_active_device
                             
                             	; now process filename, XA has pointer
eabb : 20afea           [ 6] 	jsr df_rt_init_filename
eabe : 60               [ 6] 	rts
                             ; save "file"
eabf :                       df_rt_save
eabf : 20b6ea           [ 6] 	jsr df_rt_parse_file
eac2 : 204ec5           [ 6] 	jsr io_open_write
eac5 : b063             [ 4] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
eac7 : a901             [ 2] 	lda #1
eac9 : 85eb             [ 3] 	sta df_tmpptre
eacb : 205de6           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
eace : a90d             [ 2] 	lda #UTF_CR
ead0 : 2048c5           [ 6] 	jsr io_put_ch
ead3 :                       df_rt_file_cleanup
                             	; close the file
ead3 : 2051c5           [ 6] 	jsr io_close
ead6 : 18               [ 2] 	clc
                             	; restore to default device io
ead7 : 4c2ac5           [ 3] 	jmp io_set_default
                             ;	clc
                             ;	rts
                             
                             ; load 'x',"file" where 0=serial, 1=SDCard
eada :                       df_rt_load
eada : 20b6ea           [ 6] 	jsr df_rt_parse_file
eadd : 204bc5           [ 6] 	jsr io_open_read
eae0 : b048             [ 4] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
                             
                             	; Initialise to line 10 in scratch, scratch+1
eae2 : a90a             [ 2] 	lda #10
eae4 : 8d0009           [ 4] 	sta scratch
eae7 : 9c0109           [ 4] 	stz scratch+1
eaea :                       df_rt_loadline
eaea : 18               [ 2] 	clc
eaeb : 2045d7           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
eaee : 9013             [ 4] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank1.s --------------------------------

                             	; the last tokenised line!
eaf0 : 9c800a           [ 4] 	stz df_tokbuff			; Offset to next line
eaf3 : 9c810a           [ 4] 	stz df_tokbuff+1		; Clear line low
eaf6 : 9c820a           [ 4] 	stz df_tokbuff+2		; Clear line high
eaf9 : 64c1             [ 3] 	stz df_nxtstidx			; Clear next statement
eafb : 64c0             [ 3] 	stz df_eolidx			; Clear end of line too
eafd : a901             [ 2] 	lda #1					; Set immediate mode to get a 'Ready'
eaff : 85a0             [ 3] 	sta df_immed			; But nothing to run
eb01 : 80d0             [ 4] 	bra df_rt_file_cleanup	; Ok now can close and do
eb03 :                       df_rt_ldtokenise
eb03 : 2085d0           [ 6] 	jsr df_lexer_line		; Tokenise loaded string - ju
                             	; check if line number == 0
eb06 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
eb09 : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
eb0c : d017             [ 3] 	bne df_rt_storeline		; No, then store the line
                             	; Else insert current line number to buffer posi
                             	; also add 10 to the current line number
eb0e : 18               [ 2] 	clc
eb0f : ad0009           [ 4] 	lda scratch				; Get line number lo
eb12 : 8d810a           [ 4] 	sta df_tokbuff+1		; Use current line number
eb15 : 690a             [ 2] 	adc #10					; But increment for next by 10
eb17 : 8d0009           [ 4] 	sta scratch
eb1a : ad0109           [ 4] 	lda scratch+1			; Get line number hi
eb1d : 8d820a           [ 4] 	sta df_tokbuff+2
eb20 : 6900             [ 2] 	adc #0
eb22 : 8d0109           [ 4] 	sta scratch+1
eb25 :                       df_rt_storeline
eb25 : 20b0d7           [ 6] 	jsr df_pg_line_number	; Save the line in the rig
eb28 : 80c0             [ 4] 	bra df_rt_loadline		; Continue with next until b
                             
                             ; Somwehere to go to raise a file error!
eb2a :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
eb2c :                       df_rt_del
eb2c : 20afea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb2f : 208ec0           [ 6] 	jsr _fs_delete_w			; Delete file
eb32 : 60               [ 6] 	rts
                             
eb33 :                       df_rt_chdir
eb33 : 20afea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb36 : 205ec0           [ 6] 	jsr _fs_chdir_w				; Try and change directory
eb39 : b0ef             [ 3] 	bcs df_rt_file_errc
eb3b : 60               [ 6] 	rts
                             
eb3c :                       df_rt_mkdir
eb3c : 20afea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb3f : 2076c0           [ 6] 	jsr _fs_mkdir_w				; Try and make directory
eb42 : b0e6             [ 3] 	bcs df_rt_file_errc
eb44 : 60               [ 6] 	rts
                             
                             ; bload MEM,HEAD,ADDR,FNAME
eb45 :                       df_rt_bload
                             	; Get mem type, 0=RAM, else VRAM
eb45 : 206cd8           [ 6] 	jsr df_rt_neval				; Get mem type
eb48 : 2067f1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
eb4b : e076             [ 2] 	cpx #'v'
eb4d : d003             [ 3] 	bne df_rt_bload_tryr
eb4f : 18               [ 2] 	clc							; Clear C for vram
eb50 : 8007             [ 3] 	bra df_rt_bload_savep
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank1.s --------------------------------

eb52 :                       df_rt_bload_tryr
eb52 : e072             [ 2] 	cpx #'r'
eb54 : f002             [ 3] 	beq	 df_rt_bload_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
eb58 :                       df_rt_bload_setR
eb58 : 38               [ 2] 	sec							; Set C for ram
eb59 :                       df_rt_bload_savep
                             	; save C, clear=VRAM, set=RAM
eb59 : 08               [ 3] 	php
                             	; jump over comma
eb5a : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
eb5c : 206cd8           [ 6] 	jsr df_rt_neval				; Get header length
eb5f : 2067f1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
eb62 : da               [ 3] 	phx
                             	; jump over comma
eb63 : e6ca             [ 5] 	inc df_exeoff
eb65 : 8012             [ 3] 	bra df_rt_bvload
eb67 :                       df_rt_font
eb67 : 18               [ 2] 	clc							; Set to video
eb68 : 08               [ 3] 	php
eb69 : a900             [ 2] 	lda #0						; No header
eb6b : 48               [ 3] 	pha
eb6c : a901             [ 2] 	lda #1						; 0x100 address - hi
eb6e : 48               [ 3] 	pha
eb6f : a900             [ 2] 	lda #0						; 0x100 address - lo
eb71 : 48               [ 3] 	pha
eb72 : 800d             [ 3] 	bra df_rt_bload_file
eb74 :                       df_rt_vload
eb74 : 18               [ 2] 	clc							; Hardcode for VRAM
eb75 : 08               [ 3] 	php
eb76 : a207             [ 2] 	ldx #7						; Hardcode header length
eb78 : da               [ 3] 	phx
eb79 :                       df_rt_bvload
eb79 : 206cd8           [ 6] 	jsr df_rt_neval				; Get address
eb7c : 2067f1           [ 6] 	jsr df_ost_popInt			; X,A = Address
eb7f : 48               [ 3] 	pha
eb80 : da               [ 3] 	phx
eb81 :                       df_rt_bload_file
                             	; jump over comma
eb81 : e6ca             [ 5] 	inc df_exeoff
eb83 : 20b6ea           [ 6] 	jsr df_rt_parse_file
eb86 : 204bc5           [ 6] 	jsr io_open_read
eb89 : b09f             [ 3] 	bcs df_rt_file_errc		; Error condition resets th
                             	; On the stack:
                             	; 101+x = adlo
                             	; 102+x = adhi
                             	; 103+x = header length
                             	; 104+x = mem type (c=0 means video)
eb8b : ba               [ 2] 	tsx
eb8c : bc0301           [ 4] 	ldy 0x103,x					; Get header
eb8f : f008             [ 3] 	beq df_rt_vload_byte
eb91 :                       df_rt_vload_header
eb91 : 2045c5           [ 6] 	jsr io_get_ch				; Get a character
eb94 : b03c             [ 3] 	bcs df_rt_vload_done		; If EOF then done
eb96 : 88               [ 2] 	dey
eb97 : d0f8             [ 3] 	bne df_rt_vload_header
eb99 :                       df_rt_vload_byte
eb99 : ba               [ 2] 	tsx							; Restore SP to X
eb9a : bd0401           [ 4] 	lda 0x104,x					; Get the C status
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank1.s --------------------------------

eb9d : 48               [ 3] 	pha
eb9e : 28               [ 4] 	plp							; C unaffected by next ops
                             	
eb9f : bd0101           [ 4] 	lda 0x101,x					; Get low address
eba2 : bc0201           [ 4] 	ldy 0x102,x					; Get high address
eba5 : aa               [ 2] 	tax							; X,Y contain address
                             
eba6 : b014             [ 3] 	bcs df_rt_vload_ram			; RAM or VRAM?
                             	; Poke to VRAM but skip 0x1800-0x1fff
eba8 : 2045c5           [ 6] 	jsr io_get_ch				; Get a character
ebab : b025             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ebad : c018             [ 2] 	cpy #0x18					; If page # <= 0x17
ebaf : 9006             [ 3] 	bcc df_rt_vload_do_vpoke	; then vpoke
ebb1 : c020             [ 2] 	cpy #0x20					; Or page >= 0x20
ebb3 : b002             [ 3] 	bcs df_rt_vload_do_vpoke	; then vpoke
ebb5 : 8010             [ 3] 	bra df_rt_vload_next
ebb7 :                       df_rt_vload_do_vpoke
ebb7 : 201ec4           [ 6] 	jsr _vdp_poke				; Write to VRAM
ebba : 800b             [ 3] 	bra df_rt_vload_next
ebbc :                       df_rt_vload_ram
                             	; Poke to RAM
ebbc : 2045c5           [ 6] 	jsr io_get_ch				; Get a character
ebbf : b011             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ebc1 : 86e3             [ 3] 	stx df_tmpptra				; Save address
ebc3 : 84e4             [ 3] 	sty df_tmpptra+1
ebc5 : 92e3             [ 5] 	sta (df_tmpptra)			; Poke byte to RAM
ebc7 :                       df_rt_vload_next
ebc7 : ba               [ 2] 	tsx							; Get SP to X
ebc8 : fe0101           [ 6] 	inc 0x101,x					; Increment low address
ebcb : d003             [ 3] 	bne df_rt_vload_byte_skip
ebcd : fe0201           [ 6] 	inc 0x102,x					; Increment high address
ebd0 :                       df_rt_vload_byte_skip
ebd0 : 80c7             [ 3] 	bra df_rt_vload_byte		; Back for next video byte
ebd2 :                       df_rt_vload_done
                             	; Tidy the stack
ebd2 : 68               [ 4] 	pla
ebd3 : 68               [ 4] 	pla
ebd4 : 68               [ 4] 	pla
ebd5 : 68               [ 4] 	pla
ebd6 : 4cd3ea           [ 3] 	jmp df_rt_file_cleanup
                             
ebd9 :                       df_rt_dir_string				; Name of a directory
ebd9 : 3c4449523e202000      	db "<DIR>  ",0				; 7 chars + terminator
ebe1 :                       df_rt_dir
ebe1 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ebe4 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ebe6 : da               [ 3] 	phx
ebe7 :                       df_rt_dir_show_entry
ebe7 : 18               [ 2] 	clc							; Only looking for valid files
ebe8 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ebeb : b052             [ 4] 	bcs df_rt_dir_done			; If C then no more entries
ebed : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ebef : a909             [ 2] 	lda #hi(scratch)
ebf1 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ebf4 : a20c             [ 2] 	ldx #12						; Put a zero terminator after filen
ebf6 : 9e0009           [ 5] 	stz scratch,x
ebf9 : a200             [ 2] 	ldx #lo(scratch)			; Print filename
ebfb : a909             [ 2] 	lda #hi(scratch)
ebfd : 2093c5           [ 6] 	jsr io_print_line			; Print name
ec00 : 20ffc7           [ 6] 	jsr utilPrintSPC			; Gap
ec03 : a563             [ 3] 	lda fh_handle+FH_Attr		; Is it a directory?
ec05 : c910             [ 2] 	cmp #0x10
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank1.s --------------------------------

ec07 : d009             [ 3] 	bne df_rt_dir_size
ec09 : a2d9             [ 2] 	ldx #lo(df_rt_dir_string)	; Set up pointer to na
ec0b : a9eb             [ 2] 	lda #hi(df_rt_dir_string)
ec0d : 2093c5           [ 6] 	jsr io_print_line			; Print directory indicator
ec10 : 800d             [ 3] 	bra df_rt_dir_line
ec12 :                       df_rt_dir_size
ec12 : a223             [ 2] 	ldx #lo(scratch+35)			; Print size (already term
ec14 : a909             [ 2] 	lda #hi(scratch+35)
ec16 : 2093c5           [ 6] 	jsr io_print_line			; Print size - 5 chars left 
ec19 : 20ffc7           [ 6] 	jsr utilPrintSPC			; Gap
ec1c : 20ffc7           [ 6] 	jsr utilPrintSPC			; Gap
                             	; Printed exactly 20 chars per size
ec1f :                       df_rt_dir_line
ec1f : a527             [ 3] 	lda gr_scrngeom+gr_screen_w	; If 32 col screen t
ec21 : c920             [ 2] 	cmp #32
ec23 : d003             [ 3] 	bne df_rt_dir_skip_crlf
ec25 : 2007c8           [ 6] 	jsr utilPrintCRLF
ec28 :                       df_rt_dir_skip_crlf
ec28 : fa               [ 4] 	plx							; Decrement file line counter
ec29 : ca               [ 2] 	dex
ec2a : d00d             [ 3] 	bne df_rt_dir_skip_pause
ec2c : a246             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ec2e : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ec30 : 2093c5           [ 6] 	jsr io_print_line
ec33 : 38               [ 2] 	sec
ec34 : 2045c5           [ 6] 	jsr io_get_ch				; Wait for any key
ec37 : a214             [ 2] 	ldx #20						; Reset line counter
ec39 :                       df_rt_dir_skip_pause	
ec39 : da               [ 3] 	phx							; Save line counter
ec3a : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ec3d : 80a8             [ 4] 	bra df_rt_dir_show_entry	; Find another entry
ec3f :                       df_rt_dir_done
ec3f : fa               [ 4] 	plx							; Pop line counter
ec40 : a90d             [ 2] 	lda #UTF_CR					; Final CR
ec42 : 2048c5           [ 6] 	jsr io_put_ch
ec45 : 60               [ 6] 	rts
ec46 :                       df_rt_pausemsg
ec46 : 0d507265737320..      	db UTF_CR,"Press any key for more..",UTF_CR,0
                             
ec61 :                       df_rt_dirl						; Long listing format
ec61 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ec64 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ec66 : da               [ 3] 	phx
ec67 :                       df_rt_dirl_show_entry
ec67 : 18               [ 2] 	clc							; Only looking for valid files
ec68 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ec6b : b025             [ 3] 	bcs df_rt_dirl_done			; If C then no more entrie
ec6d : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ec6f : a909             [ 2] 	lda #hi(scratch)
ec71 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ec74 : a200             [ 2] 	ldx #lo(scratch)			; Print the whole entry
ec76 : a909             [ 2] 	lda #hi(scratch)
ec78 : 2093c5           [ 6] 	jsr io_print_line
ec7b :                       df_rt_dirl_line
ec7b : fa               [ 4] 	plx							; Decrement file line counter
ec7c : ca               [ 2] 	dex
ec7d : d00d             [ 3] 	bne df_rt_dirl_skip_pause
ec7f : a246             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ec81 : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ec83 : 2093c5           [ 6] 	jsr io_print_line
ec86 : 38               [ 2] 	sec
ec87 : 2045c5           [ 6] 	jsr io_get_ch				; Wait for any key
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank1.s --------------------------------

ec8a : a214             [ 2] 	ldx #20						; Reset line counter
ec8c :                       df_rt_dirl_skip_pause	
ec8c : da               [ 3] 	phx							; Save line counter
ec8d : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ec90 : 80d5             [ 3] 	bra df_rt_dirl_show_entry	; Find another entry
ec92 :                       df_rt_dirl_done
ec92 : fa               [ 4] 	plx							; Pop line counter
ec93 : 2007c8           [ 6] 	jsr utilPrintCRLF			; Final CR
ec96 : 60               [ 6] 	rts
                             	
                             ; reset %var
ec97 :                       df_rt_reset
                             	; now get lvar X,A from current statement
ec97 : 20aedc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ec9a : 86e5             [ 3] 	stx df_tmpptrb
ec9c : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
ec9e : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
eca0 : 78               [ 2] 	sei
eca1 : a510             [ 3] 	lda vdp_int_cnt
eca3 : 92e5             [ 5] 	sta (df_tmpptrb)
eca5 : a511             [ 3] 	lda vdp_int_cnt+1
eca7 : 91e5             [ 5] 	sta (df_tmpptrb),y
eca9 : a512             [ 3] 	lda vdp_int_cnt+2
ecab : c8               [ 2] 	iny
ecac : 91e5             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
ecae : 58               [ 2] 	cli
ecaf : 60               [ 6] 	rts
                             
                             ; timedate var$
                             ; output to string as dd/mm/yy hh:mm:ss
ecb0 :                       df_rt_datetime
                             	; now get lvar X,A from current statement
ecb0 : 20aedc           [ 6] 	jsr df_rt_getlvar
                             	; and save it
ecb3 : da               [ 3] 	phx
ecb4 : 48               [ 3] 	pha
                             	; Point to 6 bytes of scratch
ecb5 : a200             [ 2] 	ldx #lo(scratch)
ecb7 : a909             [ 2] 	lda #hi(scratch)
                             	; Populate timedate as hmsdmy
ecb9 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Get destination pointer back
ecbc : 68               [ 4] 	pla
ecbd : 85e4             [ 3] 	sta df_tmpptra+1
ecbf : 68               [ 4] 	pla
ecc0 : 85e3             [ 3] 	sta df_tmpptra
                             	; Start at first char of destination
ecc2 : a000             [ 2] 	ldy #0
                             	; Get days binary and convert to BCD
ecc4 : ae0309           [ 4] 	ldx scratch+3
                             	; Separator character
ecc7 : a92f             [ 2] 	lda #'/'
ecc9 : 20f5ec           [ 6] 	jsr df_rt_datetime_conv
                             	; Get months binary and convert to BCD
eccc : ae0409           [ 4] 	ldx scratch+4
                             	; Separator character
eccf : a92f             [ 2] 	lda #'/'
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank1.s --------------------------------

ecd1 : 20f5ec           [ 6] 	jsr df_rt_datetime_conv
                             	; Get years binary and convert to BCD
ecd4 : ae0509           [ 4] 	ldx scratch+5
                             	; Separator character is space between date and 
ecd7 : a920             [ 2] 	lda #' '
ecd9 : 20f5ec           [ 6] 	jsr df_rt_datetime_conv
                             	; Get hours binary and convert to BCD
ecdc : ae0009           [ 4] 	ldx scratch+0
                             	; Separator character
ecdf : a93a             [ 2] 	lda #':'
ece1 : 20f5ec           [ 6] 	jsr df_rt_datetime_conv
                             	; Get minutes binary and convert to BCD
ece4 : ae0109           [ 4] 	ldx scratch+1
                             	; Separator character
ece7 : a93a             [ 2] 	lda #':'
ece9 : 20f5ec           [ 6] 	jsr df_rt_datetime_conv
                             	; Get seconds binary and convert to BCD
ecec : ae0209           [ 4] 	ldx scratch+2
                             	; Separator character is null to terminate strin
ecef : a900             [ 2] 	lda #0
ecf1 : 20f5ec           [ 6] 	jsr df_rt_datetime_conv
ecf4 : 60               [ 6] 	rts
ecf5 :                       df_rt_datetime_conv
ecf5 : 48               [ 3] 	pha
ecf6 : a900             [ 2] 	lda #0
ecf8 : 2037ca           [ 6] 	jsr word_to_bcd
                             	; We only need least 2 BCD digits
ecfb : a585             [ 3] 	lda num_a+0
                             	; put nibbles in A,X
ecfd : 2034c8           [ 6] 	jsr str_a_to_x
                             	; And save to destination
ed00 : 91e3             [ 5] 	sta (df_tmpptra),y
ed02 : c8               [ 2] 	iny
ed03 : 8a               [ 2] 	txa
ed04 : 91e3             [ 5] 	sta (df_tmpptra),y
ed06 : c8               [ 2] 	iny
ed07 : 68               [ 4] 	pla
ed08 : 91e3             [ 5] 	sta (df_tmpptra),y
ed0a : c8               [ 2] 	iny
ed0b : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
ed0c :                       df_rt_deek
ed0c : 38               [ 2] 	sec
ed0d : 8001             [ 3] 	bra df_rt_readbyte
ed0f :                       df_rt_peek
ed0f : 18               [ 2] 	clc
ed10 :                       df_rt_readbyte
ed10 : 08               [ 3] 	php
                             ;	inc df_exeoff
ed11 : 2066d8           [ 6] 	jsr df_rt_getnval
ed14 : 86e3             [ 3] 	stx df_tmpptra
ed16 : 85e4             [ 3] 	sta df_tmpptra+1
ed18 : b2e3             [ 5] 	lda (df_tmpptra)
ed1a : aa               [ 2] 	tax
ed1b : a900             [ 2] 	lda #0
ed1d : 28               [ 4] 	plp
ed1e : 9005             [ 3] 	bcc df_rt_readbyte_skip
ed20 : 18               [ 2] 	clc
ed21 : a001             [ 2] 	ldy #1
ed23 : b1e3             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank1.s --------------------------------

ed25 :                       df_rt_readbyte_skip
ed25 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
ed28 :                       df_rt_vpeek
                             ;	inc df_exeoff
ed28 : 2066d8           [ 6] 	jsr df_rt_getnval
ed2b : 2006c4           [ 6] 	jsr _vdp_peek
ed2e : aa               [ 2] 	tax
ed2f : a900             [ 2] 	lda #0
ed31 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
ed34 :                       df_rt_nvpeek
                             ;	inc df_exeoff
ed34 : 2066d8           [ 6] 	jsr df_rt_getnval
ed37 : 2096c4           [ 6] 	jsr _rtc_nvread
ed3a : aa               [ 2] 	tax
ed3b : a900             [ 2] 	lda #0
ed3d : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
ed40 :                       df_rt_rnd
                             ;	inc df_exeoff
ed40 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
ed43 : e000             [ 2] 	cpx #0
ed45 : d017             [ 3] 	bne df_rt_rnd_set
ed47 : c900             [ 2] 	cmp #0
ed49 : d013             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
ed4b : a5da             [ 3] 	lda df_rnd+1
ed4d : 4a               [ 2] 	lsr a
ed4e : 26d9             [ 5] 	rol df_rnd
ed50 : 9002             [ 3] 	bcc df_rt_rnd_noeor
ed52 : 49b4             [ 2] 	eor #0xb4
ed54 :                       df_rt_rnd_noeor
ed54 : 85da             [ 3] 	sta df_rnd+1
ed56 : 45d9             [ 3] 	eor df_rnd
ed58 : aa               [ 2] 	tax
ed59 : a900             [ 2] 	lda #0
ed5b : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             	; else set the seed to that number and done
ed5e :                       df_rt_rnd_set
ed5e : 86d9             [ 3] 	stx df_rnd
ed60 : 85da             [ 3] 	sta df_rnd+1
ed62 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; Get joystick status	
ed65 :                       df_rt_stick
                             ;	inc df_exeoff
ed65 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ed68 : 86e3             [ 3] 	stx df_tmpptra
ed6a : 20d6c3           [ 6] 	jsr _snd_get_joy0
ed6d : 98               [ 2] 	tya
                             	; invert the bits so that 1=switch on
ed6e : 49ff             [ 2] 	eor #0xff
ed70 : 25e3             [ 3] 	and df_tmpptra
ed72 : aa               [ 2] 	tax
ed73 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank1.s --------------------------------

ed75 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; l = msbyte(x)
ed78 :                       df_rt_msbyte
                             ;	inc df_exeoff
ed78 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; only high byte is used
ed7b : aa               [ 2] 	tax
ed7c : a900             [ 2] 	lda #0
ed7e : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; l = lsbyte(x)
ed81 :                       df_rt_lsbyte
                             ;	inc df_exeoff
ed81 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ed84 : a900             [ 2] 	lda #0
ed86 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
ed89 :                       df_rt_mem
                             ;	inc df_exeoff
ed89 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ed8c : e001             [ 2] 	cpx #1
ed8e : f016             [ 3] 	beq df_rt_mem_prg
ed90 : e002             [ 2] 	cpx #2
ed92 : f024             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
ed94 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
eda4 : 8022             [ 3] 	bra df_rt_mem_calc
eda6 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
edb6 : 8010             [ 3] 	bra df_rt_mem_calc
edb8 :                       df_rt_mem_var
                             	_cpyZPWord df_vntend,df_tmpptra
                             
                             	_cpyZPWord df_vvtstrt,df_tmpptrb
                             
edc8 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
edc8 : 38               [ 2] 	sec
edc9 : a5e3             [ 3] 	lda df_tmpptra
edcb : e5e5             [ 3] 	sbc df_tmpptrb
edcd : aa               [ 2] 	tax
edce : a5e4             [ 3] 	lda df_tmpptra+1
edd0 : e5e6             [ 3] 	sbc df_tmpptrb+1
edd2 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; %k=key(%sync) %sync>=1 means sync
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank1.s --------------------------------

edd5 :                       df_rt_key
                             ;	inc df_exeoff
edd5 : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=1 if x==0 else x>0 makes c=0
edd8 : e001             [ 2] 	cpx #1
edda : 2045c5           [ 6] 	jsr io_get_ch
eddd : 9003             [ 3] 	bcc df_rt_key_valid
                             	; zero out A
eddf : a900             [ 2] 	lda #0
ede1 : 18               [ 2] 	clc
ede2 :                       df_rt_key_valid
ede2 : aa               [ 2] 	tax
ede3 : a900             [ 2] 	lda #0
ede5 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             	
                             ; s = scrn(x,y)
ede8 :                       df_rt_scrn
                             ;	inc df_exeoff
ede8 : 2020db           [ 6] 	jsr df_rt_parm_2ints
edeb : a6e3             [ 3] 	ldx df_tmpptra
eded : a4e5             [ 3] 	ldy df_tmpptrb
edef : 208ec3           [ 6] 	jsr _gr_get
edf2 : aa               [ 2] 	tax
edf3 : a900             [ 2] 	lda #0
edf5 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; p = pixel(x,y)
edf8 :                       df_rt_pixel
                             ;	inc df_exeoff
edf8 : 2020db           [ 6] 	jsr df_rt_parm_2ints
edfb : a6e3             [ 3] 	ldx df_tmpptra
edfd : a4e5             [ 3] 	ldy df_tmpptrb
edff : a900             [ 2] 	lda #0
ee01 : 4c44f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %e=elapsed(%var)
ee04 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
ee04 : 20aedc           [ 6] 	jsr df_rt_getlvar
ee07 : e6ca             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
ee09 : 86e5             [ 3] 	stx df_tmpptrb
ee0b : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
ee0d : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
ee0f : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
ee10 : 78               [ 2] 	sei
ee11 : a510             [ 3] 	lda vdp_int_cnt
ee13 : f2e5             [ 5] 	sbc (df_tmpptrb)
ee15 : aa               [ 2] 	tax
ee16 : a511             [ 3] 	lda vdp_int_cnt+1
                             	; restore interrupts asap
ee18 : 58               [ 2] 	cli
ee19 : f1e5             [ 5] 	sbc (df_tmpptrb),y
ee1b : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
ee1e :                       df_rt_call
                             ;	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank1.s --------------------------------

ee1e : 2042db           [ 6] 	jsr df_rt_parm_4ints
ee21 : a5e5             [ 3] 	lda df_tmpptrb				; load A
ee23 : a6e7             [ 3] 	ldx	df_tmpptrc				; load X
ee25 : a4e9             [ 3] 	ldy df_tmpptrd				; load Y
ee27 : 202dee           [ 6] 	jsr df_rt_calljsr
ee2a :                       df_rt_push_int1
ee2a : 4c47f1           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value	
ee2d :                       df_rt_calljsr
ee2d : 6ce300           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
                             
ee30 :                       df_rt_sgn
                             ;	inc df_exeoff
ee30 : 2066d8           [ 6] 	jsr df_rt_getnval
ee33 : 86e3             [ 3] 	stx df_tmpptra
ee35 : 05e3             [ 3] 	ora df_tmpptra
ee37 : f00f             [ 3] 	beq df_rt_sgn_z
ee39 : 2980             [ 2] 	and #0x80
ee3b : d006             [ 3] 	bne df_rt_sgn_n
ee3d : a201             [ 2] 	ldx #1
ee3f : a900             [ 2] 	lda #0
ee41 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
ee43 :                       df_rt_sgn_n
ee43 : a2ff             [ 2] 	ldx #0xff
ee45 : 8a               [ 2] 	txa
ee46 : d0e2             [ 3] 	bne df_rt_push_int1			; Always
ee48 :                       df_rt_sgn_z
ee48 : a200             [ 2] 	ldx #0
ee4a : 8a               [ 2] 	txa
ee4b : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
ee4d :                       df_rt_addr
                             	; get lvar X,A from current statement
ee4d : 20aedc           [ 6] 	jsr df_rt_getlvar
ee50 : e6ca             [ 5] 	inc df_exeoff
ee52 : 4c47f1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
ee55 :                       df_rt_strlen_common
ee55 : 86e3             [ 3] 	stx df_tmpptra
ee57 : 85e4             [ 3] 	sta df_tmpptra+1
ee59 : a0ff             [ 2] 	ldy #0xff
ee5b :                       df_rt_strlen_count
ee5b : c8               [ 2] 	iny
ee5c : b1e3             [ 5] 	lda (df_tmpptra),y
ee5e : d0fb             [ 3] 	bne df_rt_strlen_count
ee60 : 98               [ 2] 	tya
ee61 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
ee62 :                       df_rt_str_extract
                             	; source string
ee62 : 205ff1           [ 6] 	jsr df_ost_popStr
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank1.s --------------------------------

ee65 : 86e3             [ 3] 	stx df_tmpptra
ee67 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
ee69 : a5bc             [ 3] 	lda df_sevalptr
ee6b : 85e5             [ 3] 	sta df_tmpptrb
ee6d : a5bd             [ 3] 	lda df_sevalptr+1
ee6f : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; start pos
ee71 : a4e7             [ 3] 	ldy df_tmpptrc
ee73 : a200             [ 2] 	ldx #0
ee75 :                       df_rt_str_cpy_ch
ee75 : c4e9             [ 3] 	cpy df_tmpptrd
ee77 : f011             [ 3] 	beq df_str_src_end
ee79 : b1e3             [ 5] 	lda (df_tmpptra),y
ee7b : f00d             [ 3] 	beq df_str_src_end
ee7d : 81e5             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
ee85 : c8               [ 2] 	iny
ee86 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
ee8a :                       df_str_src_end
ee8a : a900             [ 2] 	lda #0
ee8c : 81e5             [ 6] 	sta (df_tmpptrb,x)
ee8e : a6bc             [ 3] 	ldx df_sevalptr
ee90 : a5bd             [ 3] 	lda df_sevalptr+1
ee92 : 4c3cf1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
ee95 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
ee95 : 2066d8           [ 6] 	jsr df_rt_getnval
ee98 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
ee9a : 8a               [ 2] 	txa
ee9b : 91bc             [ 5] 	sta (df_sevalptr),y
ee9d : c8               [ 2] 	iny
                             	; zero terminator
ee9e : a900             [ 2] 	lda #0
eea0 : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
eea2 : a6bc             [ 3] 	ldx df_sevalptr
eea4 : a5bd             [ 3] 	lda df_sevalptr+1
eea6 : 4c3cf1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
eea9 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
eea9 : 2066d8           [ 6] 	jsr df_rt_getnval
eeac : 85e3             [ 3] 	sta df_tmpptra	; Save the high byte
eeae : 8a               [ 2] 	txa				; Convert low byte first
eeaf : 2034c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
eeb2 : 85e5             [ 3] 	sta df_tmpptrb
eeb4 : 8a               [ 2] 	txa				; Push low digit of low byte from X
eeb5 : 48               [ 3] 	pha
eeb6 : a5e5             [ 3] 	lda df_tmpptrb	; Get A back from temp
eeb8 : 48               [ 3] 	pha				; Push high digit of low byte
eeb9 : a5e3             [ 3] 	lda df_tmpptra	; Get the high byte
eebb : 2034c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank1.s --------------------------------

                             	; create string
eebe : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
eec0 : 91bc             [ 5] 	sta (df_sevalptr),y
eec2 : c8               [ 2] 	iny
                             	; hi/lo
eec3 : 8a               [ 2] 	txa
eec4 : 91bc             [ 5] 	sta (df_sevalptr),y
eec6 : c8               [ 2] 	iny
                             	; lo/hi
eec7 : 68               [ 4] 	pla
eec8 : 91bc             [ 5] 	sta (df_sevalptr),y
eeca : c8               [ 2] 	iny
                             	; lo/lo
eecb : 68               [ 4] 	pla
eecc : 91bc             [ 5] 	sta (df_sevalptr),y
eece : c8               [ 2] 	iny
                             	; zero terminator
eecf : a900             [ 2] 	lda #0
eed1 : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
eed3 : a6bc             [ 3] 	ldx df_sevalptr
eed5 : a5bd             [ 3] 	lda df_sevalptr+1
eed7 : 4c3cf1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
eeda :                       df_rt_dec
eeda : 2066d8           [ 6] 	jsr df_rt_getnval
eedd : 18               [ 2] 	clc						; No leading zeros
eede : 207bca           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
eee1 : a295             [ 2] 	ldx #lo(num_buf)
eee3 : a900             [ 2] 	lda #hi(num_buf)
eee5 : 4c3cf1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
eee8 :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
eee8 : 201cd9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
eeeb : e6ca             [ 5] 	inc df_exeoff
eeed : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
eef0 : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
eef2 : a000             [ 2] 	ldy #0
eef4 : 84e7             [ 3] 	sty df_tmpptrc
eef6 : 4c62ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
eef9 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
eef9 : 201cd9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
eefc : e6ca             [ 5] 	inc df_exeoff
eefe : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank1.s --------------------------------

ef01 : 86e7             [ 3] 	stx df_tmpptrc
                             	; end pos = len
ef03 : a6bc             [ 3] 	ldx df_sevalptr
ef05 : a5bd             [ 3] 	lda df_sevalptr+1
ef07 : 2055ee           [ 6] 	jsr df_rt_strlen_common
ef0a : 85e9             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
ef0c : 38               [ 2] 	sec
ef0d : e5e7             [ 3] 	sbc df_tmpptrc
ef0f : 85e7             [ 3] 	sta df_tmpptrc
ef11 : 4c62ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
ef14 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
ef14 : 201cd9           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
ef17 : e6ca             [ 5] 	inc df_exeoff
ef19 : 206cd8           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
ef1c : e6ca             [ 5] 	inc df_exeoff
ef1e : 2066d8           [ 6] 	jsr df_rt_getnval
ef21 : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
ef23 : 2067f1           [ 6] 	jsr df_ost_popInt
ef26 : ca               [ 2] 	dex					; zero offset rather than 1
ef27 : 86e7             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
ef29 : 8a               [ 2] 	txa
ef2a : 18               [ 2] 	clc
ef2b : 65e9             [ 3] 	adc df_tmpptrd
ef2d : 85e9             [ 3] 	sta df_tmpptrd
ef2f : 4c62ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
ef32 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
ef32 : 201cd9           [ 6] 	jsr df_rt_seval
ef35 : 205ff1           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
ef38 : 2055ee           [ 6] 	jsr df_rt_strlen_common
ef3b : 4c44f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
ef3e :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
ef3e : 201cd9           [ 6] 	jsr df_rt_seval
ef41 : 205ff1           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
ef44 : 86e3             [ 3] 	stx df_tmpptra
ef46 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
ef48 : a200             [ 2] 	ldx #0
ef4a : a1e3             [ 6] 	lda (df_tmpptra,x)
ef4c : 4c44f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
ef4f :                       df_rt_val
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank1.s --------------------------------

                             ;	inc df_exeoff
                             	; evaluate the string
ef4f : 201cd9           [ 6] 	jsr df_rt_seval
ef52 : 205ff1           [ 6] 	jsr df_ost_popStr
ef55 : a000             [ 2] 	ldy #0				; any numeric format
ef57 : 207fc8           [ 6] 	jsr con_n_to_a		; result in num_a
ef5a : b007             [ 3] 	bcs df_rt_val_err
ef5c : a685             [ 3] 	ldx num_a
ef5e : a586             [ 3] 	lda num_a+1
                             	; Save as an int
ef60 : 4c47f1           [ 3] 	jmp df_ost_pushInt
ef63 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
ef65 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
                             ;* ok=fcreate(filename)
ef67 :                       df_rt_fcreate
ef67 : 20b6ea           [ 6] 	jsr df_rt_parse_file
ef6a : 204ec5           [ 6] 	jsr io_open_write
ef6d :                       df_rt_fcreate_check
                             	; Assume -1 which is OK
ef6d : a2ff             [ 2] 	ldx #-1
ef6f : 9002             [ 3] 	bcc df_rt_fcreate_ok
                             	; Else 0 which is error
ef71 : a200             [ 2] 	ldx #0
ef73 :                       df_rt_fcreate_ok
ef73 : 8a               [ 2] 	txa				; make A=X
                             	; Save as an int
ef74 : 2047f1           [ 6] 	jsr df_ost_pushInt
                             	; Ensure we're back to the normal IO device
ef77 : 4c2ac5           [ 3] 	jmp io_set_default
                             	
                             ;* ok=fopen(filename)
ef7a :                       df_rt_fopen
ef7a : 20b6ea           [ 6] 	jsr df_rt_parse_file
ef7d : 204bc5           [ 6] 	jsr io_open_read
ef80 : 80eb             [ 3] 	bra df_rt_fcreate_check
                             
                             ;* ok=fclose()
ef82 :                       df_rt_fclose
ef82 : a902             [ 2] 	lda #2					; Only works for SD card now
ef84 : 202dc5           [ 6] 	jsr io_active_device
ef87 : 2051c5           [ 6] 	jsr io_close
                             	; Ensure we're back to the normal IO device
ef8a : 4c2ac5           [ 3] 	jmp io_set_default
                             
                             ;* device <num>
ef8d :                       df_rt_device
ef8d : 2066d8           [ 6] 	jsr df_rt_getnval
                             	; Force update of status register
ef90 : 8a               [ 2] 	txa
ef91 : 300a             [ 3] 	bmi df_rt_device_default
                             	; Stop dflat from trying to read inputs for Ctrl
ef93 : a59e             [ 3] 	lda df_checkmsk
ef95 : 0980             [ 2] 	ora #0x80
ef97 : 859e             [ 3] 	sta df_checkmsk
ef99 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank1.s --------------------------------

                             	; A contains the device to activate
ef9a : 4c2dc5           [ 3] 	jmp io_active_device
ef9d :                       df_rt_device_default
                             	; Allow dflat to read inputs for Ctrl-C
ef9d : a59e             [ 3] 	lda df_checkmsk
ef9f : 297f             [ 2] 	and #0x7f
efa1 : 859e             [ 3] 	sta df_checkmsk
efa3 : 4c2ac5           [ 3] 	jmp io_set_default
                             
efa6 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
efa6 :                       mod_sz_proc_s
                             
efa6 :                       df_rt_proc_parmerr
efa6 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
efa8 :                       df_rt_proc
                             	; move past escape token
efa8 : a4ca             [ 3] 	ldy df_exeoff
efaa : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
efab : b1c8             [ 5] 	lda (df_currlin),y
efad : aa               [ 2] 	tax
efae : c8               [ 2] 	iny
efaf : b1c8             [ 5] 	lda (df_currlin),y
efb1 : c8               [ 2] 	iny
efb2 : 84ca             [ 3] 	sty df_exeoff
efb4 : 86d0             [ 3] 	stx df_procptr
efb6 : 85d1             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
efb8 : a003             [ 2] 	ldy #DFVVT_DIM1
efba : b1d0             [ 5] 	lda (df_procptr),y
efbc : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank1.s --------------------------------

efbe : 204edc           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
efc1 : 8445             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
efc3 : a002             [ 2] 	ldy #DFVVT_HI
efc5 : 91d0             [ 5] 	sta (df_procptr),y
efc7 : a001             [ 2] 	ldy #DFVVT_LO
efc9 : 8a               [ 2] 	txa
efca : 91d0             [ 5] 	sta (df_procptr),y
efcc : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
efce : a545             [ 3] 	lda tmp_d
efd0 : 91d0             [ 5] 	sta (df_procptr),y
efd2 :                       df_rt_proc_addr
                             	; move past first open bracket
efd2 : e6ca             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
efd4 : a004             [ 2] 	ldy #DFVVT_DIM2
efd6 : b1d0             [ 5] 	lda (df_procptr),y	
efd8 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
efda : 48               [ 3] 	pha
                             
efdb : c6ca             [ 5] 	dec df_exeoff		; Pre-adjust
efdd :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
efdd : e6ca             [ 5] 	inc df_exeoff
                             	; if at end then error!
efdf : a4ca             [ 3] 	ldy df_exeoff
efe1 : b1c8             [ 5] 	lda (df_currlin),y
efe3 : c929             [ 2] 	cmp #')'
efe5 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
efe7 : 206cd8           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
efea : 68               [ 4] 	pla
                             	; decrement
efeb : 38               [ 2] 	sec
efec : e901             [ 2] 	sbc #1
                             	; and put back on stack
efee : 48               [ 3] 	pha
                             	; go back and do all required parms
efef : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
eff1 :                       df_rt_proc_parm_done
eff1 : 68               [ 4] 	pla
eff2 :                       df_rt_proc_parm_none
                             	; should be at close bracket
eff2 : a4ca             [ 3] 	ldy df_exeoff
eff4 : b1c8             [ 5] 	lda (df_currlin),y
eff6 : c929             [ 2] 	cmp #')'
eff8 : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
effa : a6d0             [ 3] 	ldx df_procptr
effc : a5d1             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank1.s --------------------------------

effe :                       df_rt_exec_proc
                             	; save slot address
effe : 86e3             [ 3] 	stx df_tmpptra
f000 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f002 : a5c8             [ 3] 	lda df_currlin
f004 : 48               [ 3] 	pha
f005 : a5c9             [ 3] 	lda df_currlin+1
f007 : 48               [ 3] 	pha
f008 : a5ca             [ 3] 	lda df_exeoff
f00a : 48               [ 3] 	pha
f00b : a5c1             [ 3] 	lda df_nxtstidx
f00d : 48               [ 3] 	pha
f00e : a5c2             [ 3] 	lda df_curstidx
f010 : 48               [ 3] 	pha
f011 : a5c0             [ 3] 	lda df_eolidx
f013 : 48               [ 3] 	pha
f014 : a5d5             [ 3] 	lda df_ifnest
f016 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f017 : a001             [ 2] 	ldy #DFVVT_LO
f019 : b1e3             [ 5] 	lda (df_tmpptra),y
f01b : 85c8             [ 3] 	sta df_currlin
f01d : c8               [ 2] 	iny
f01e : b1e3             [ 5] 	lda (df_tmpptra),y
f020 : 85c9             [ 3] 	sta df_currlin+1
f022 : c8               [ 2] 	iny
f023 : b1e3             [ 5] 	lda (df_tmpptra),y
f025 : 85ca             [ 3] 	sta df_exeoff
f027 : 85c2             [ 3] 	sta df_curstidx
f029 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f02b : b1c8             [ 5] 	lda (df_currlin),y
f02d : 85c1             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f02f : 2090db           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f032 : 68               [ 4] 	pla
f033 : 85d5             [ 3] 	sta df_ifnest
f035 : 68               [ 4] 	pla
f036 : 85c0             [ 3] 	sta df_eolidx
f038 : 68               [ 4] 	pla
f039 : 85c2             [ 3] 	sta df_curstidx
f03b : 68               [ 4] 	pla
f03c : 85c1             [ 3] 	sta df_nxtstidx
f03e : 68               [ 4] 	pla
f03f : 85ca             [ 3] 	sta df_exeoff
f041 : 68               [ 4] 	pla
f042 : 85c9             [ 3] 	sta df_currlin+1
f044 : 68               [ 4] 	pla
f045 : 85c8             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f047 : 60               [ 6] 	rts
                             
                             
f048 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f048 : a6ca             [ 3] 	ldx df_exeoff
f04a : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank1.s --------------------------------

f04b : e8               [ 2] 	inx
f04c : e8               [ 2] 	inx
f04d : 86ca             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f04f : a201             [ 2] 	ldx #1									; index in to scratch
f051 : 86ce             [ 3] 	stx df_procargs							; Proc args is the #args-1
f053 : a4ca             [ 3] 	ldy df_exeoff
f055 :                       df_rt_def_find_var
f055 : c8               [ 2] 	iny
f056 : b1c8             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f058 : c929             [ 2] 	cmp #')'
f05a : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f05c : c911             [ 2] 	cmp #DFTK_VAR
f05e : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f060 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f062 : d0f1             [ 3] 	bne df_rt_def_find_var
f064 :                       df_rt_def_got_varparm
                             	; set high bit
f064 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f066 : c8               [ 2] 	iny
f067 :                       df_rt_def_got_var
f067 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f069 : 9d0009           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f06c : c8               [ 2] 	iny
f06d : b1c8             [ 5] 	lda (df_currlin),y
f06f : 9d2009           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f072 : c8               [ 2] 	iny
f073 : b1c8             [ 5] 	lda (df_currlin),y
f075 : 9d4009           [ 5] 	sta scratch+64,x
f078 : e8               [ 2] 	inx
f079 : e6ce             [ 5] 	inc df_procargs
f07b : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f07d :                       df_rt_def_parm_done
                             	; save index that we got to
f07d : 84ca             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f07f : 86cd             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f081 : a900             [ 2] 	lda #0
f083 : 85cf             [ 3] 	sta df_procloc
f085 :                       df_rt_def_load_var
f085 : c6ce             [ 5] 	dec df_procargs
f087 : f038             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f089 : c6cd             [ 5] 	dec df_procmode
f08b : a6cd             [ 3] 	ldx df_procmode
f08d : bd2009           [ 4] 	lda scratch+32,x
f090 : 85e3             [ 3] 	sta df_tmpptra
f092 : bd4009           [ 4] 	lda scratch+64,x
f095 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
f097 : bd0009           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank1.s --------------------------------

f09a : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f09c : a6e3             [ 3] 	ldx df_tmpptra
f09e : a5e4             [ 3] 	lda df_tmpptra+1
f0a0 : 20f5f0           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f0a3 : e6cf             [ 5] 	inc df_procloc
f0a5 :                       df_rt_def_initialise_parm
                             	; load type
f0a5 : a000             [ 2] 	ldy #DFVVT_TYPE
f0a7 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f0a9 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f0ab : f006             [ 3] 	beq df_rt_def_load_var_int
f0ad : 2063f1           [ 6] 	jsr df_ost_popPtr
f0b0 : 4cb6f0           [ 3] 	jmp df_rt_def_load_var_int_skip
f0b3 :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f0b3 : 2067f1           [ 6] 	jsr df_ost_popInt
f0b6 :                       df_rt_def_load_var_int_skip
                             	; update the variable
f0b6 : a002             [ 2] 	ldy #DFVVT_HI
f0b8 : 91e3             [ 5] 	sta (df_tmpptra),y
f0ba : 88               [ 2] 	dey
f0bb : 8a               [ 2] 	txa
f0bc : 91e3             [ 5] 	sta (df_tmpptra),y
                             	
f0be : 4c85f0           [ 3] 	jmp df_rt_def_load_var
f0c1 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f0c1 : a5cf             [ 3] 	lda df_procloc
f0c3 : 2009f1           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f0c6 : 18               [ 2] 	clc
f0c7 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f0c8 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f0c8 : 206cd8           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f0cb :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f0cb : 2012f1           [ 6] 	jsr df_rst_popByte
f0ce : aa               [ 2] 	tax
f0cf : f020             [ 3] 	beq df_rt_proc_unload_done
f0d1 :                       df_rt_proc_unloadvar
f0d1 : 8a               [ 2] 	txa
f0d2 : 48               [ 3] 	pha
                             	; var value is popped first then index
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank1.s --------------------------------

                             	; get a word and put in tmpb
f0d3 : 202ff1           [ 6] 	jsr df_rst_popWord
f0d6 : 86e5             [ 3] 	stx df_tmpptrb
f0d8 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f0da : 202ff1           [ 6] 	jsr df_rst_popWord
f0dd : 86e3             [ 3] 	stx df_tmpptra
f0df : 85e4             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f0e1 : a001             [ 2] 	ldy #DFVVT_LO
f0e3 : a5e5             [ 3] 	lda df_tmpptrb
f0e5 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f0e7 : c8               [ 2] 	iny
f0e8 : a5e6             [ 3] 	lda df_tmpptrb+1
f0ea : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f0ec : 68               [ 4] 	pla
f0ed : aa               [ 2] 	tax
f0ee : ca               [ 2] 	dex
f0ef : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f0f1 :                       df_rt_proc_unload_done
f0f1 : 68               [ 4] 	pla					; Pull the return address off stack
f0f2 : 68               [ 4] 	pla					; to get to the previous level
f0f3 : 18               [ 2] 	clc
f0f4 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f0f5 :                       df_rt_proc_local
                             	; save address
f0f5 : 86e3             [ 3] 	stx df_tmpptra
f0f7 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f0f9 : 2021f1           [ 6] 	jsr df_rst_pushWord
f0fc :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f0fc : a001             [ 2] 	ldy #DFVVT_LO
f0fe : b1e3             [ 5] 	lda (df_tmpptra),y
f100 : aa               [ 2] 	tax
f101 : c8               [ 2] 	iny
f102 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f104 : 2021f1           [ 6] 	jsr df_rst_pushWord
f107 : 18               [ 2] 	clc
f108 : 60               [ 6] 	rts
                             		
f109 :                       mod_sz_proc_e
                             
                             
f109 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank1.s --------------------------------

                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f109 :                       df_rst_pushByte
f109 : a4b8             [ 3] 	ldy df_rtstop
f10b : 99000b           [ 5] 	sta df_rtstck,y
f10e : 88               [ 2] 	dey
f10f : 84b8             [ 3] 	sty df_rtstop
f111 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f112 :                       df_rst_popByte
f112 : a4b8             [ 3] 	ldy df_rtstop
f114 : c8               [ 2] 	iny
f115 : b9000b           [ 4] 	lda df_rtstck,y
f118 : 84b8             [ 3] 	sty df_rtstop
f11a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f11b :                       df_rst_peekByte
f11b : a4b8             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f11d : b9010b           [ 4] 	lda df_rtstck+1,y
f120 : 60               [ 6] 	rts
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank1.s --------------------------------

                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f121 :                       df_rst_pushWord
f121 : a4b8             [ 3] 	ldy df_rtstop
f123 : 99000b           [ 5] 	sta df_rtstck,y
f126 : 88               [ 2] 	dey
f127 : 8a               [ 2] 	txa
f128 : 99000b           [ 5] 	sta df_rtstck,y
f12b : 88               [ 2] 	dey
f12c : 84b8             [ 3] 	sty df_rtstop
f12e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f12f :                       df_rst_popWord
f12f : a4b8             [ 3] 	ldy df_rtstop
f131 : c8               [ 2] 	iny
f132 : be000b           [ 4] 	ldx df_rtstck,y
f135 : c8               [ 2] 	iny
f136 : b9000b           [ 4] 	lda df_rtstck,y
f139 : 84b8             [ 3] 	sty df_rtstop
f13b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f13c :                       df_ost_pushStr
f13c : a080             [ 2] 	ldy #DFST_STR
f13e : d009             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f140 :                       df_ost_pushPtr
f140 : a0ff             [ 2] 	ldy #0xff
f142 : d005             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f144 :                       df_ost_pushIntA
f144 : aa               [ 2] 	tax
f145 : a900             [ 2] 	lda #0
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f147 :                       df_ost_pushInt
f147 : a001             [ 2] 	ldy #DFST_INT
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank1.s --------------------------------

                             ;* Y - type
                             ;****************************************
f149 :                       df_ost_pushParmX
f149 : 8445             [ 3] 	sty tmp_d		; Save Type
f14b : a4b9             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f14d : 99000b           [ 5] 	sta df_rtstck,y
f150 : c8               [ 2] 	iny
                             	; push low byte next (X)
f151 : 8a               [ 2] 	txa
f152 : 99000b           [ 5] 	sta df_rtstck,y
f155 : c8               [ 2] 	iny
f156 : a545             [ 3] 	lda tmp_d		; get Type
f158 : 99000b           [ 5] 	sta df_rtstck,y
f15b : c8               [ 2] 	iny
                             	; save new top of stack
f15c : 84b9             [ 3] 	sty df_parmtop
f15e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f15f :                       df_ost_popStr
f15f : a980             [ 2] 	lda #DFST_STR
f161 : d006             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f163 :                       df_ost_popPtr
f163 : a9ff             [ 2] 	lda #0xff
f165 : d002             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             		
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f167 :                       df_ost_popInt
f167 : a901             [ 2] 	lda #DFST_INT
                             	; ***FALL THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* A - type expected
                             ;****************************************
f169 :                       df_ost_popParmX
f169 : a4b9             [ 3] 	ldy df_parmtop
                             	; pull type first
f16b : 88               [ 2] 	dey
f16c : 39000b           [ 4] 	and df_rtstck,y
f16f : f00b             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f171 : 88               [ 2] 	dey
f172 : be000b           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f175 : 88               [ 2] 	dey
f176 : b9000b           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f179 : 84b9             [ 3] 	sty df_parmtop
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank1.s --------------------------------

f17b : 60               [ 6] 	rts
f17c :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f17e :                       df_ost_peekType
f17e : a4b9             [ 3] 	ldy df_parmtop
f180 : b9ff0a           [ 4] 	lda df_rtstck-1,y
f183 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f184 :                       df_st_malloc
                             	; save A in Y
f184 : a8               [ 2] 	tay
                             	; save old starend
f185 : a5b7             [ 3] 	lda df_starend+1
f187 : 48               [ 3] 	pha
f188 : a5b6             [ 3] 	lda df_starend
f18a : 48               [ 3] 	pha
                             	; restore A from Y
f18b : 98               [ 2] 	tya
                             	; add X,A to starend
f18c : 48               [ 3] 	pha
f18d : 8a               [ 2] 	txa
f18e : 18               [ 2] 	clc
f18f : 65b6             [ 3] 	adc df_starend
f191 : 85b6             [ 3] 	sta df_starend
f193 : 68               [ 4] 	pla
f194 : 65b7             [ 3] 	adc df_starend+1
f196 : 85b7             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f198 : 68               [ 4] 	pla
f199 : aa               [ 2] 	tax
f19a : 68               [ 4] 	pla
f19b : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f19c :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f19c : a900             [ 2] 	lda #lo(DF_MEMTOP)
f19e : 8d670c           [ 4] 	sta df_memtop
f1a1 : a9c0             [ 2] 	lda #hi(DF_MEMTOP)
f1a3 : 8d680c           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f1a6 : 20a9f1           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f1a9 :                       df_clear
                             	; Start of program space
f1a9 : a969             [ 2] 	lda #lo(DF_PROGSTART)
f1ab : 85a7             [ 3] 	sta df_prgstrt
f1ad : 85a9             [ 3] 	sta df_prgend
f1af : a90c             [ 2] 	lda #hi(DF_PROGSTART)
f1b1 : 85a8             [ 3] 	sta df_prgstrt+1
f1b3 : 85aa             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f1b5 : a900             [ 2] 	lda #0
f1b7 : a8               [ 2] 	tay
f1b8 : 91a7             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f1ba : 85b3             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f1bc : ad670c           [ 4] 	lda df_memtop
f1bf : 85af             [ 3] 	sta df_vvtstrt
f1c1 : 85b1             [ 3] 	sta df_vvtend
f1c3 : ad680c           [ 4] 	lda df_memtop+1
f1c6 : 85b0             [ 3] 	sta df_vvtstrt+1
f1c8 : 85b2             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f1ca : a5af             [ 3] 	lda df_vvtstrt
f1cc : 85ab             [ 3] 	sta df_vntstrt
f1ce : 85ad             [ 3] 	sta df_vntend
f1d0 : a5b0             [ 3] 	lda df_vvtstrt+1
f1d2 : 85ac             [ 3] 	sta df_vntstrt+1
f1d4 : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f1d6 : a900             [ 2] 	lda #lo(scratch)
f1d8 : 85bc             [ 3] 	sta df_sevalptr
f1da : a909             [ 2] 	lda #hi(scratch)
f1dc : 85bd             [ 3] 	sta df_sevalptr+1
                             
f1de : 60               [ 6] 	rts
                             
f1df :                       mod_sz_dflat_e
                             
                             	include "dflat\error.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank1.s --------------------------------

                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank1.s --------------------------------

f1df :                       df_tk_errortab
f1df : 4f6b00                	db	"Ok", 0
f1e2 : 53796e74617800        	db	"Syntax", 0
f1e9 : 5479706500            	db	"Type", 0
f1ee : 52652d64696d00        	db	"Re-dim", 0
f1f5 : 4e6f2072657065..      	db	"No repeat", 0
f1ff : 4e6f206465666e00      	db	"No defn", 0
f207 : 5061726d00            	db	"Parm", 0
f20c : 456e64656400          	db	"Ended", 0
f212 : 4e6f20656e6469..      	db	"No endif", 0
f21b : 4e6f20696600          	db	"No if", 0
f221 : 4e6f20666f7200        	db	"No for", 0
f228 : 4e6f7420666f75..      	db	"Not found", 0
f232 : 546f6f206c6f6e..      	db	"Too long", 0
f23b : 427265616b00          	db	"Break", 0
f241 : 4e6f206461746100      	db	"No data", 0
f249 : 4e6f207768696c..      	db	"No while", 0
f252 : 4e6f206c696e6500      	db	"No line", 0
f25a : 4e6f2072657475..      	db	"No return ", 0
f265 : 41626f7274656400      	db	"Aborted", 0
f26d : 426f756e647300        	db	"Bounds", 0
f274 : 4e6f206f726700        	db	"No org", 0
f27b : 00                    	db	0
                             
f27c :                       df_tk_error_inline
f27c : 20696e206c696e..      	db	" in line ", 0
f286 :                       df_tk_error_atpos
f286 : 20706f732000          	db	" pos ", 0
f28c :                       df_tk_error_error
f28c : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f293 :                       df_trap_error
                             	; set IO back to normal
f293 : 202ac5           [ 6] 	jsr io_set_default
f296 : 58               [ 2] 	cli
                             
f297 : a9df             [ 2] 	lda #lo(df_tk_errortab)
f299 : 85e3             [ 3] 	sta df_tmpptra
f29b : a9f1             [ 2] 	lda #hi(df_tk_errortab)
f29d : 85e4             [ 3] 	sta df_tmpptra+1
f29f : a69f             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f2a1 : f002             [ 3] 	beq df_trap_go_monitor
f2a3 : 1003             [ 3] 	bpl df_trap_normal
f2a5 :                       df_trap_go_monitor
f2a5 : 4c24f3           [ 3] 	jmp df_trap_monitor
f2a8 :                       df_trap_normal
f2a8 : a000             [ 2] 	ldy #0
f2aa :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f2aa : b1e3             [ 5] 	lda (df_tmpptra),y
f2ac : f076             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f2ae :                       df_show_err_skip
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank1.s --------------------------------

                             	_incZPWord df_tmpptra
                             
f2b4 : b1e3             [ 5] 	lda (df_tmpptra),y
f2b6 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f2be : ca               [ 2] 	dex
f2bf : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f2c1 : a6e3             [ 3] 	ldx df_tmpptra
f2c3 : a5e4             [ 3] 	lda df_tmpptra+1
f2c5 : 2093c5           [ 6] 	jsr io_print_line
f2c8 : a28c             [ 2] 	ldx #lo(df_tk_error_error)
f2ca : a9f2             [ 2] 	lda #hi(df_tk_error_error)
f2cc : 2093c5           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f2cf : a001             [ 2] 	ldy #DFTK_LINNUM
f2d1 : b1c8             [ 5] 	lda (df_currlin),y
f2d3 : aa               [ 2] 	tax
f2d4 : c8               [ 2] 	iny
f2d5 : b1c8             [ 5] 	lda (df_currlin),y
f2d7 : d004             [ 3] 	bne df_show_err_linnum
f2d9 : e000             [ 2] 	cpx #0x00
f2db : f011             [ 3] 	beq df_show_err_fin
f2dd :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f2ea : 18               [ 2] 	clc
f2eb : 20beca           [ 6] 	jsr print_a_to_d
f2ee :                       df_show_err_fin
f2ee : a4be             [ 3] 	ldy df_linoff
f2f0 : f02b             [ 4] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f2ff : 98               [ 2] 	tya
f300 : aa               [ 2] 	tax
f301 : a900             [ 2] 	lda #0
f303 : 18               [ 2] 	clc
f304 : 20beca           [ 6] 	jsr print_a_to_d
f307 : 2007c8           [ 6] 	jsr utilPrintCRLF
f30a : a000             [ 2] 	ldy #0
                             	; Show the error line with error pos inverse
f30c :                       def_show_err_line
f30c : b9000a           [ 4] 	lda df_linbuff,y
f30f : f00c             [ 3] 	beq df_show_err_done
f311 : c4be             [ 3] 	cpy df_linoff
f313 : d002             [ 3] 	bne def_show_err_line_skip
f315 : 0980             [ 2] 	ora #0x80
f317 :                       def_show_err_line_skip
f317 : 2048c5           [ 6] 	jsr io_put_ch
f31a : c8               [ 2] 	iny
f31b : d0ef             [ 3] 	bne def_show_err_line	; Always
f31d :                       df_show_err_done
f31d : 2007c8           [ 6] 	jsr utilPrintCRLF
f320 : 18               [ 2] 	clc
                             	; back to editor
f321 : 4c55d7           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f324 :                       df_trap_monitor
                             	; Print PC
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank1.s --------------------------------

                             	_println_low df_msg_pc
                             
f32b : a5a5             [ 3] 	lda df_brkpc+1
f32d : 200fc8           [ 6] 	jsr utilPrintA
f330 : a5a4             [ 3] 	lda df_brkpc
f332 : 200fc8           [ 6] 	jsr utilPrintA
f335 : 20ffc7           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f33f : a585             [ 3] 	lda num_a
f341 : 200fc8           [ 6] 	jsr utilPrintA
f344 : 20ffc7           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f34e : a586             [ 3] 	lda num_a+1
f350 : 200fc8           [ 6] 	jsr utilPrintA
f353 : 20ffc7           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f35d : a587             [ 3] 	lda num_a+2
f35f : 200fc8           [ 6] 	jsr utilPrintA
f362 : 2007c8           [ 6] 	jsr utilPrintCRLF
                             
f365 : 20bcdf           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f368 : 4c55d7           [ 3] 	jmp df_pg_dflat
                             
f36b :                       df_msg_pc
f36b : 50433a00              	db "PC:\x0"
f36f :                       df_msg_acc
f36f : 413a00                	db "A:\x0"
f372 :                       df_msg_xreg
f372 : 583a00                	db "X:\x0"
f375 :                       df_msg_yreg
f375 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat\asm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f378 :                       mod_sz_asm_s
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank1.s --------------------------------

                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat\asm.i"
                             ;*	BBC-128 BREADBOARD COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat\tkasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank1.s --------------------------------

                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f378 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f378 :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f378 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f37b : 20a7f3           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f37e : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f380 : a5c5             [ 3] 	lda df_symoff
                             	; Set the MSB
f382 : 0980             [ 2] 	ora #0x80
f384 : 20c3cd           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f387 : a001             [ 2] 	ldy #1
f389 : b1c3             [ 5] 	lda (df_symtab),y
                             	; Directive?
f38b : c910             [ 2] 	cmp #AM_DIR
f38d : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f38f : a5c5             [ 3] 	lda df_symoff
f391 : 20f8f3           [ 6] 	jsr df_tk_asm_exec_parser
f394 : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f396 : 2014ce           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f399 : 18               [ 2] 	clc
f39a :                       df_tk_asm_parse_command_err
f39a : 60               [ 6] 	rts
f39b :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f39b : 20fdf3           [ 6] 	jsr df_tk_asm_addr_mode
f39e : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f3a0 : 60               [ 6] 	rts
f3a1 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f3a1 : a900             [ 2] 	lda #0
f3a3 : 20face           [ 6] 	jsr df_tk_var
f3a6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
f3a7 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f3a7 : a989             [ 2] 	lda #lo(df_asm_tokensyms)
f3a9 : 85c3             [ 3] 	sta df_symtab
f3ab : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f3ad : 85c4             [ 3] 	sta df_symtab+1
f3af : 64c5             [ 3] 	stz df_symoff
f3b1 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f3b1 : a4be             [ 3] 	ldy df_linoff
f3b3 :                       df_tk_asm_checktokch
                             	; Get symtable char
f3b3 : b2c3             [ 5] 	lda (df_symtab)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f3b5 : c920             [ 2] 	cmp #' '
f3b7 : 9031             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f3b9 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f3bc : d009             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f3c4 : c8               [ 2] 	iny
f3c5 : 80ec             [ 3] 	bra df_tk_asm_checktokch
f3c7 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f3c7 : e6c5             [ 5] 	inc df_symoff
f3c9 :                       df_tk_asm_symnextentry
f3c9 : b2c3             [ 5] 	lda (df_symtab)
                             	; End of symbol is < ' '
f3cb : c920             [ 2] 	cmp #' '
f3cd : 9008             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f3d5 : 80f2             [ 3] 	bra df_tk_asm_symnextentry
f3d7 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f3d7 : 38               [ 2] 	sec
f3d8 : 65c3             [ 3] 	adc df_symtab
f3da : 85c3             [ 3] 	sta df_symtab
f3dc : a5c4             [ 3] 	lda df_symtab+1
f3de : 6900             [ 2] 	adc #0
f3e0 : 85c4             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f3e2 : b2c3             [ 5] 	lda (df_symtab)
f3e4 : d0cb             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f3e6 : 64c5             [ 3] 	stz df_symoff
                             	; Set C to indicate error (no match)
f3e8 : 38               [ 2] 	sec
f3e9 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank1.s --------------------------------

f3ea :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f3ea : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f3ed : 2008ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f3f0 : b0d5             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f3f2 : 84be             [ 3] 	sty df_linoff
f3f4 : a5c5             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f3f6 : 18               [ 2] 	clc
f3f7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f3f8 :                       df_tk_asm_exec_parser
f3f8 : 0a               [ 2] 	asl a
f3f9 : aa               [ 2] 	tax
f3fa : 7cf5fa           [ 6] 	jmp (df_tk_asm_tokenjmp,x)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f3fd :                       df_tk_asm_addr_mode
f3fd : 2014ce           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f400 : c900             [ 2] 	cmp #0					;End of line?
f402 : f02e             [ 3] 	beq df_tk_asm_addr_mode_ok
f404 : c93a             [ 2] 	cmp #':'				;End of statement?
f406 : f02a             [ 3] 	beq df_tk_asm_addr_mode_ok
f408 : a923             [ 2] 	lda #'#'				; Check for immediate
f40a : 2044ce           [ 6] 	jsr df_tk_expect_tok
f40d : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f40f : 4c34f4           [ 3] 	jmp df_tk_imm		; Process immediate
f412 :                       df_tk_asm_addr_mode_1
f412 : a928             [ 2] 	lda #'('				; One of indirect modes?
f414 : 2044ce           [ 6] 	jsr df_tk_expect_tok
f417 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f419 : 4c39f4           [ 3] 	jmp df_tk_indirect
f41c :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f41c : 2041d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f41f : a92c             [ 2] 	lda #','
f421 : 2044ce           [ 6] 	jsr df_tk_expect_tok
f424 : b00c             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f426 : a978             [ 2] 	lda #'x'
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank1.s --------------------------------

f428 : 2044ce           [ 6] 	jsr df_tk_expect_tok
f42b : 9005             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f42d : a979             [ 2] 	lda #'y'
f42f : 204fce           [ 6] 	jsr df_tk_expect_tok_err
f432 :                       df_tk_asm_addr_mode_ok
f432 : 18               [ 2] 	clc
f433 : 60               [ 6] 	rts
                             	
                             	
                             ;* Toeknise immediate addressing mode	
f434 :                       df_tk_imm
                             	; Just one expression expected
f434 : 2041d0           [ 6] 	jsr df_tk_expression
f437 : 18               [ 2] 	clc
f438 : 60               [ 6] 	rts
                             	
                             ;* Tokenise indirect
f439 :                       df_tk_indirect
                             	; Just one expression expected
f439 : 2041d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f43c : a92c             [ 2] 	lda #','
f43e : 2044ce           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f441 : b00c             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f443 : a978             [ 2] 	lda #'x'
f445 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
f448 : a929             [ 2] 	lda #')'
f44a : 204fce           [ 6] 	jsr df_tk_expect_tok_err
f44d : 18               [ 2] 	clc
f44e : 60               [ 6] 	rts
                             	
f44f :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f44f : a929             [ 2] 	lda #')'
f451 : 204fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f454 : a92c             [ 2] 	lda #','
f456 : 2044ce           [ 6] 	jsr df_tk_expect_tok
f459 : b007             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f45b : a979             [ 2] 	lda #'y'
f45d : 204fce           [ 6] 	jsr df_tk_expect_tok_err
f460 : 18               [ 2] 	clc
f461 : 60               [ 6] 	rts
                             
f462 :                       df_tk_indirect_done
f462 : 18               [ 2] 	clc
f463 : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f464 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat\rtasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f464 :                       mod_sz_rtasm_s
                             
f464 :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f464 : a4ca             [ 3] 	ldy df_exeoff
f466 : b1c8             [ 5] 	lda (df_currlin),y
f468 : 1009             [ 3] 	bpl df_rt_asm_do_label
f46a : 2077f4           [ 6] 	jsr df_rt_asm_command
f46d : 206df6           [ 6] 	jsr df_rt_asm_printCR
f470 : 4c76f4           [ 3] 	jmp df_rt_asm_assemble_done
f473 :                       df_rt_asm_do_label
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank1.s --------------------------------

f473 : 209bf4           [ 6] 	jsr df_rt_asm_label
f476 :                       df_rt_asm_assemble_done
                             	; any clean up here
f476 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f477 :                       df_rt_asm_command
f477 : 297f             [ 2] 	and #0x7f
f479 : 48               [ 3] 	pha
f47a : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f47b : 203bf7           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f47e : a001             [ 2] 	ldy #1
f480 : b1c3             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f482 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f484 : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f486 : 4c61f5           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f489 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f489 : 68               [ 4] 	pla
f48a : 0a               [ 2] 	asl a
f48b : aa               [ 2] 	tax
                             	; jump over directive code
f48c : e6ca             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f48e : bdfffa           [ 4] 	lda df_rt_asm_tokenjmp,x
f491 : 85e3             [ 3] 	sta df_tmpptra
f493 : bd00fb           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f496 : 85e4             [ 3] 	sta df_tmpptra+1
f498 : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f49b :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f49b : 2010e5           [ 6] 	jsr df_rt_generate_lvar
f49e : 86e0             [ 3] 	stx df_asmoprnd
f4a0 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f4a2 : a000             [ 2] 	ldy #0
f4a4 : a5db             [ 3] 	lda df_asmpc
f4a6 : 91e0             [ 5] 	sta (df_asmoprnd),y
f4a8 : a5dc             [ 3] 	lda df_asmpc+1
f4aa : c8               [ 2] 	iny
f4ab : 91e0             [ 5] 	sta (df_asmoprnd),y
f4ad : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f4ae :                       df_rt_asm_org
                             	; Get the address from expression
f4ae : 2018f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f4b1 : a5e0             [ 3] 	lda df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank1.s --------------------------------

f4b3 : 85db             [ 3] 	sta df_asmpc
f4b5 : a5e1             [ 3] 	lda df_asmoprnd+1
f4b7 : 85dc             [ 3] 	sta df_asmpc+1
f4b9 : a903             [ 2] 	lda #3
f4bb : 85e2             [ 3] 	sta df_asmlen
f4bd : 4c2ff6           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f4c0 :                       df_rt_asm_opt
                             	; Get the value from expression
f4c0 : 2018f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f4c3 : a5e0             [ 3] 	lda df_asmoprnd
f4c5 : 85dd             [ 3] 	sta df_asmopt
f4c7 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
f4c8 :                       df_rt_asm_db
f4c8 : a902             [ 2] 	lda #2
f4ca : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f4cb :                       df_rt_asm_dw
f4cb : a903             [ 2] 	lda #3
f4cd :                       df_rt_asm_db_start
f4cd : 85e2             [ 3] 	sta df_asmlen
f4cf : 202ff6           [ 6] 	jsr df_rt_asm_printPC
f4d2 : 204af6           [ 6] 	jsr df_rt_asm_printSPC
f4d5 :                       df_rt_asm_data
f4d5 : 206cd8           [ 6] 	jsr df_rt_neval		; Evaluate expression
                             	_df_ost_peekType	; What is the type
                             
f4dd : 300d             [ 3] 	bmi df_rt_asm_string; If string
f4df : 2067f1           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f4e2 : 86e0             [ 3] 	stx df_asmoprnd		; store low value
f4e4 : 85e1             [ 3] 	sta df_asmoprnd+1	; store high value
f4e6 : 2014f5           [ 6] 	jsr df_rt_asm_data_write
f4e9 : 4c09f5           [ 3] 	jmp df_rt_asm_data_next
f4ec :                       df_rt_asm_string
f4ec : 2063f1           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f4ef : 86e3             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f4f1 : 85e4             [ 3] 	sta df_tmpptra+1
f4f3 :                       df_rt_asm_string_ch
f4f3 : a000             [ 2] 	ldy #0
f4f5 : b1e3             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f4f7 : f010             [ 4] 	beq df_rt_asm_data_next
f4f9 : 85e0             [ 3] 	sta df_asmoprnd		; Save as operand
f4fb : 84e1             [ 3] 	sty df_asmoprnd+1	; High is always zero
f4fd : 2014f5           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
f506 : 4cf3f4           [ 3] 	jmp df_rt_asm_string_ch
f509 :                       df_rt_asm_data_next
f509 : 2042e5           [ 6] 	jsr df_rt_eos		; End?
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank1.s --------------------------------

f50c : b005             [ 3] 	bcs df_rt_asm_data_done
f50e : e6ca             [ 5] 	inc df_exeoff		; Jump over ','
f510 : 4cd5f4           [ 3] 	jmp df_rt_asm_data
f513 :                       df_rt_asm_data_done
f513 : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
f514 :                       df_rt_asm_data_write
f514 : 2053f6           [ 6] 	jsr df_rt_asm_printOPR
f517 :                       df_rt_asm_data_write_skip1
f517 : a902             [ 2] 	lda #2
f519 : 25dd             [ 3] 	and df_asmopt
f51b : f017             [ 3] 	beq df_rt_asm_data_write_skip2
f51d : a5e0             [ 3] 	lda df_asmoprnd
f51f : a000             [ 2] 	ldy #0
f521 : 91db             [ 5] 	sta (df_asmpc),y
f523 : c8               [ 2] 	iny
f524 : a902             [ 2] 	lda #2
f526 : c5e2             [ 3] 	cmp df_asmlen
f528 : d006             [ 3] 	bne df_rt_asm_data_write_hi
f52a : a5e1             [ 3] 	lda df_asmoprnd+1
f52c : d014             [ 3] 	bne df_rt_asm_data_write_err
f52e : f004             [ 3] 	beq df_rt_asm_data_write_skip2
f530 :                       df_rt_asm_data_write_hi
f530 : a5e1             [ 3] 	lda df_asmoprnd+1
f532 : 91db             [ 5] 	sta (df_asmpc),y
f534 :                       df_rt_asm_data_write_skip2
f534 : a4e2             [ 3] 	ldy df_asmlen
f536 : 88               [ 2] 	dey					; Add 1 less!
f537 : 98               [ 2] 	tya
f538 : 18               [ 2] 	clc
f539 : 65db             [ 3] 	adc df_asmpc
f53b : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f53f : e6dc             [ 5] 	inc df_asmpc+1
f541 : 60               [ 6] 	rts
f542 :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
f544 :                       df_rt_asm_ds
f544 : 202ff6           [ 6] 	jsr df_rt_asm_printPC
f547 : 204af6           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
f54a : 2018f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
f54d : 18               [ 2] 	clc
f54e : a5e0             [ 3] 	lda df_asmoprnd
f550 : 65db             [ 3] 	adc df_asmpc
f552 : 85db             [ 3] 	sta df_asmpc
f554 : a5e1             [ 3] 	lda df_asmoprnd+1
f556 : 65dc             [ 3] 	adc df_asmpc+1
f558 : 85dc             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
f55a : a903             [ 2] 	lda #3
f55c : 85e2             [ 3] 	sta df_asmlen
f55e : 4c53f6           [ 3] 	jmp df_rt_asm_printOPR
                             
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank1.s --------------------------------

                             
                             ; Process a normal assembler mnemonic
f561 :                       df_rt_asm_mnem
f561 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
f562 : e6ca             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
f564 : 209bf6           [ 6] 	jsr df_rt_asm_addrmode
                             
f567 :                       df_rt_asm_mnem_try
f567 : a5de             [ 3] 	lda df_asmadmd					; With the addressing mode
f569 : 2023f7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
f56c : c900             [ 2] 	cmp #AM_NONE					; Exists?
f56e : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
f570 :                       df_rt_asm_check_alt
f570 : a6de             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
f572 : bd78f7           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
f575 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
f577 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
f579 : 2023f7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
f57c : c900             [ 2] 	cmp #AM_NONE					; this instruction
f57e : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
f580 : c5de             [ 3] 	cmp df_asmadmd					; Same as the original?
f582 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
f584 :                       df_rt_asm_mnem_chk
f584 : 85de             [ 3] 	sta df_asmadmd					; This is the final mode
f586 : aa               [ 2] 	tax								; Get the length
f587 : bd67f7           [ 4] 	lda df_asm_length,x
f58a : a6e1             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
f58c : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
f58e : c903             [ 2] 	cmp #3							; Else must be len 3?
f590 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
f592 :                       df_rt_asm_mnem_done
f592 : a6de             [ 3] 	ldx df_asmadmd					; Get the final mode index
f594 : bd67f7           [ 4] 	lda df_asm_length,x				; Get the length
f597 : 85e2             [ 3] 	sta df_asmlen
f599 : a5de             [ 3] 	lda df_asmadmd					; Get the final mode
f59b : 2023f7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
f59e : c8               [ 2] 	iny
f59f : b1c3             [ 5] 	lda (df_symtab),y
f5a1 : 85df             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
f5a3 : 4ca8f5           [ 3] 	jmp df_rt_asm_encode
                             	
f5a6 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
f5a8 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
f5a8 : a5de             [ 3] 	lda df_asmadmd
f5aa : c90f             [ 2] 	cmp #AM_REL
f5ac : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
f5ae : a5e1             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank1.s --------------------------------

f5b0 : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
f5b2 : 38               [ 2] 	sec
f5b3 : a5e0             [ 3] 	lda df_asmoprnd
f5b5 : e902             [ 2] 	sbc #2
f5b7 : 85e0             [ 3] 	sta df_asmoprnd
f5b9 : a5e1             [ 3] 	lda df_asmoprnd+1
f5bb : e900             [ 2] 	sbc #0
f5bd : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
f5bf : 38               [ 2] 	sec
f5c0 : a5e0             [ 3] 	lda df_asmoprnd
f5c2 : e5db             [ 3] 	sbc df_asmpc
f5c4 : 85e0             [ 3] 	sta df_asmoprnd
f5c6 : a5e1             [ 3] 	lda df_asmoprnd+1
f5c8 : e5dc             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
f5ca : a000             [ 2] 	ldy #0
f5cc : 84e1             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
f5ce : a8               [ 2] 	tay
f5cf : f00a             [ 3] 	beq df_rt_asm_encode_relpos
f5d1 : c9ff             [ 2] 	cmp #0xff
f5d3 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
f5d5 : a5e0             [ 3] 	lda df_asmoprnd
f5d7 : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
f5d9 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
f5db :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
f5db : a5e0             [ 3] 	lda df_asmoprnd
f5dd : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
f5df :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
f5df : c6e1             [ 5] 	dec df_asmoprnd+1
f5e1 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
f5e1 : a902             [ 2] 	lda #0x02
f5e3 : 25dd             [ 3] 	and df_asmopt
f5e5 : f028             [ 4] 	beq df_rt_asm_encode_print
f5e7 : a000             [ 2] 	ldy #0
f5e9 : a5df             [ 3] 	lda df_asmopcde
f5eb : 91db             [ 5] 	sta (df_asmpc),y
f5ed : a5e2             [ 3] 	lda df_asmlen
f5ef : c901             [ 2] 	cmp #1						; No operand
f5f1 : f01c             [ 4] 	beq df_rt_asm_encode_print
f5f3 : c903             [ 2] 	cmp #3						; Word operand
f5f5 : f00e             [ 4] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
f5f7 : a5e1             [ 3] 	lda df_asmoprnd+1
f5f9 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
f5fd :                       df_rt_asm_encode_writebyte
f5fd : c8               [ 2] 	iny 
f5fe : a5e0             [ 3] 	lda df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank1.s --------------------------------

f600 : 91db             [ 5] 	sta (df_asmpc),y
f602 : 4c0ff6           [ 3] 	jmp df_rt_asm_encode_print
f605 :                       df_rt_asm_encode_writeword
f605 : c8               [ 2] 	iny 
f606 : a5e0             [ 3] 	lda df_asmoprnd
f608 : 91db             [ 5] 	sta (df_asmpc),y
f60a : c8               [ 2] 	iny 
f60b : a5e1             [ 3] 	lda df_asmoprnd+1
f60d : 91db             [ 5] 	sta (df_asmpc),y	
f60f :                       df_rt_asm_encode_print
f60f : 201ff6           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
f612 : 18               [ 2] 	clc
f613 : a5db             [ 3] 	lda df_asmpc
f615 : 65e2             [ 3] 	adc df_asmlen
f617 : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f61b : e6dc             [ 5] 	inc df_asmpc+1
f61d : 18               [ 2] 	clc
f61e : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
f61f :                       df_rt_asm_print_mmen
f61f : 202ff6           [ 6] 	jsr df_rt_asm_printPC
f622 : 204af6           [ 6] 	jsr df_rt_asm_printSPC
f625 : 203ff6           [ 6] 	jsr df_rt_asm_printOPC
f628 : 204af6           [ 6] 	jsr df_rt_asm_printSPC
f62b : 2053f6           [ 6] 	jsr df_rt_asm_printOPR
f62e :                       df_rt_asm_print_rts			; Hopefully subs can get he
f62e : 60               [ 6] 	rts
                             
f62f :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
f62f : a901             [ 2] 	lda #0x01
f631 : 25dd             [ 3] 	and df_asmopt
f633 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
f635 : a5dc             [ 3] 	lda df_asmpc+1
f637 : 200fc8           [ 6] 	jsr utilPrintA
f63a : a5db             [ 3] 	lda df_asmpc
f63c : 4c0fc8           [ 3] 	jmp utilPrintA
                             
f63f :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
f63f : a901             [ 2] 	lda #0x01
f641 : 25dd             [ 3] 	and df_asmopt
f643 : f0e9             [ 3] 	beq df_rt_asm_print_rts
f645 : a5df             [ 3] 	lda df_asmopcde
f647 : 4c0fc8           [ 3] 	jmp utilPrintA
                             
f64a :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
f64a : a901             [ 2] 	lda #0x01
f64c : 25dd             [ 3] 	and df_asmopt
f64e : f0de             [ 3] 	beq df_rt_asm_print_rts
f650 : 4cffc7           [ 3] 	jmp utilPrintSPC
                             	
f653 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank1.s --------------------------------

f653 : a901             [ 2] 	lda #0x01
f655 : 25dd             [ 3] 	and df_asmopt
f657 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
f659 : a5e2             [ 3] 	lda df_asmlen				; check how may operand bytes
f65b : c901             [ 2] 	cmp #1						; if only opcode, done
f65d : f0cf             [ 3] 	beq df_rt_asm_print_rts	
f65f : c902             [ 2] 	cmp #2
f661 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
f663 : a5e1             [ 3] 	lda df_asmoprnd+1
f665 : 200fc8           [ 6] 	jsr utilPrintA
f668 :                       df_rt_asm_printOPR_1
f668 : a5e0             [ 3] 	lda df_asmoprnd
f66a : 4c0fc8           [ 3] 	jmp utilPrintA
                             
f66d :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
f66d : a901             [ 2] 	lda #0x01
f66f : 25dd             [ 3] 	and df_asmopt
f671 : f0bb             [ 3] 	beq df_rt_asm_print_rts
f673 : 4c07c8           [ 3] 	jmp utilPrintCRLF
                             
f676 :                       df_rt_asm_printCH
f676 : 8545             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
f678 : a901             [ 2] 	lda #0x01
f67a : 25dd             [ 3] 	and df_asmopt
f67c : f0b0             [ 3] 	beq df_rt_asm_print_rts
f67e : a545             [ 3] 	lda tmp_d
f680 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
f683 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
f683 : a901             [ 2] 	lda #0x01
f685 : 25dd             [ 3] 	and df_asmopt
f687 : f0a5             [ 3] 	beq df_rt_asm_print_rts
f689 : a5ca             [ 3] 	lda df_exeoff
f68b : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
f694 : 20b0e6           [ 6] 	jsr df_rt_list_line_only
f697 : 68               [ 4] 	pla
f698 : 85ca             [ 3] 	sta df_exeoff
f69a : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
f69b :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
f69b : a900             [ 2] 	lda #AM_NONE
f69d : 85de             [ 3] 	sta df_asmadmd
                             	; zero out the operand
f69f : a900             [ 2] 	lda #0
f6a1 : 85e0             [ 3] 	sta df_asmoprnd
f6a3 : 85e1             [ 3] 	sta df_asmoprnd+1
f6a5 : 2042e5           [ 6] 	jsr df_rt_eos			; End of statement?
f6a8 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
f6aa : 20a1dc           [ 6] 	jsr df_rt_skip_ws
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank1.s --------------------------------

                             	; Check what it is
f6ad : c923             [ 2] 	cmp #'#'				; Immediate?
f6af : f034             [ 3] 	beq df_rt_asm_AM_IMM
f6b1 : c928             [ 2] 	cmp #'('				; Indirect something?
f6b3 : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
f6b5 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
f6b7 :                       df_rt_asm_AM_IMP
f6b7 : a90d             [ 2] 	lda #AM_IMP
f6b9 : 85de             [ 3] 	sta df_asmadmd
f6bb : 60               [ 6] 	rts
                             ; Process ABS or REL
f6bc :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
f6bc : 2018f7           [ 6] 	jsr df_rt_asm_get_operand
                             
f6bf : 2042e5           [ 6] 	jsr df_rt_eos			; End of statement?
f6c2 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
f6c4 : c8               [ 2] 	iny						; Jump over ","
f6c5 : b1c8             [ 5] 	lda (df_currlin),y		; Load X or Y
f6c7 : c8               [ 2] 	iny						; Jump over index reg
f6c8 : 85ca             [ 3] 	sta df_exeoff			; Save exe offset
f6ca : c978             [ 2] 	cmp #'x'				; Indirect X?
f6cc : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
f6ce :                       df_rt_asm_AM_ABSY
f6ce : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
f6d0 : 85de             [ 3] 	sta df_asmadmd
f6d2 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
f6d3 :                       df_rt_asm_AM_ABS
f6d3 : a001             [ 2] 	ldy #1					; Check first addressing mode
f6d5 : b1c3             [ 5] 	lda (df_symtab),y
f6d7 : c90f             [ 2] 	cmp #AM_REL
f6d9 : f002             [ 3] 	beq df_rt_asm_AM_REL
f6db : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
f6dd :                       df_rt_asm_AM_REL
f6dd : 85de             [ 3] 	sta df_asmadmd
f6df : 60               [ 6] 	rts
                             ; Process ABSX
f6e0 :                       df_rt_asm_AM_ABSX
f6e0 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
f6e2 : 85de             [ 3] 	sta df_asmadmd
f6e4 : 60               [ 6] 	rts
                             ; Process Immediate
f6e5 :                       df_rt_asm_AM_IMM
                             	; skip over #
f6e5 : e6ca             [ 5] 	inc df_exeoff
                             	; Get operand
f6e7 : 2018f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
f6ea : a90c             [ 2] 	lda #AM_IMM
f6ec : 85de             [ 3] 	sta df_asmadmd
f6ee : 60               [ 6] 	rts
                             ; Process indirect
f6ef :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
f6ef : e6ca             [ 5] 	inc df_exeoff
                             	; Calculate the operand
f6f1 : 2018f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank1.s --------------------------------

f6f4 : a4ca             [ 3] 	ldy df_exeoff
f6f6 : b1c8             [ 5] 	lda (df_currlin),y
f6f8 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
f6fa : f009             [ 4] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
f6fc : c8               [ 2] 	iny
f6fd : c8               [ 2] 	iny
f6fe : 84ca             [ 3] 	sty df_exeoff
f700 : a908             [ 2] 	lda #AM_ZPINDX
f702 : 85de             [ 3] 	sta df_asmadmd
f704 : 60               [ 6] 	rts
                             ; Pure indirect mode found
f705 :                       df_rt_asm_AM_ZPINDORY
f705 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
f707 : c8               [ 2] 	iny
f708 : 84ca             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
f70a : 2042e5           [ 6] 	jsr df_rt_eos			; End of statement?
f70d : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
f70f : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
f711 : c8               [ 2] 	iny
f712 : c8               [ 2] 	iny
f713 : 84ca             [ 3] 	sty df_exeoff
f715 :                       df_rt_asm_AM_ZPIND
f715 : 85de             [ 3] 	sta df_asmadmd
f717 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
f718 :                       df_rt_asm_get_operand
                             	; evaluate
f718 : 206cd8           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
f71b : 2067f1           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
f71e : 86e0             [ 3] 	stx df_asmoprnd
f720 : 85e1             [ 3] 	sta df_asmoprnd+1
f722 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
f723 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
f723 : 8545             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
f725 : a0ff             [ 2] 	ldy #0xff
f727 : a200             [ 2] 	ldx #0
f729 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
f729 : c8               [ 2] 	iny
f72a : c8               [ 2] 	iny
                             	; if current index > num entries then error
f72b : 98               [ 2] 	tya
f72c : 38               [ 2] 	sec
f72d : e1c3             [ 6] 	sbc (df_symtab,x)
f72f : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
f731 : b1c3             [ 5] 	lda (df_symtab),y
f733 : c545             [ 3] 	cmp tmp_d
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank1.s --------------------------------

f735 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
f737 : 60               [ 6] 	rts
f738 :                       df_rt_asm_find_addr_mode_err
f738 : a900             [ 2] 	lda #AM_NONE
f73a :                       df_rt_asm_skip_to_sym_done; Used by function belo
f73a : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
f73b :                       df_rt_asm_skip_to_sym
f73b : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
f73c : a989             [ 2] 	lda #lo(df_asm_tokensyms)
f73e : 85c3             [ 3] 	sta df_symtab
f740 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f742 : 85c4             [ 3] 	sta df_symtab+1
f744 : a900             [ 2] 	lda #0
f746 : 85c5             [ 3] 	sta df_symoff
f748 : a8               [ 2] 	tay
f749 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
f749 : b1c3             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
f74b : c920             [ 2] 	cmp #' '
f74d : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
f755 : 4c49f7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
f758 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
f758 : ca               [ 2] 	dex
f759 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
f75b : 38               [ 2] 	sec
f75c : 65c3             [ 3] 	adc df_symtab
f75e : 85c3             [ 3] 	sta df_symtab
                             	_bcc 2
                             
f762 : e6c4             [ 5] 	inc df_symtab+1
f764 : 4c49f7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
f767 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat\asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank1.s --------------------------------

                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
f767 :                       df_asm_length
f767 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
f778 :                       df_asm_altaddrmode
f778 : 00                    	db AM_NONE		;AM_NONE	= 0
f779 : 00                    	db AM_NONE		;AM_ABS	 	= 1
f77a : 00                    	db AM_NONE		;AM_ABSX	= 2
f77b : 00                    	db AM_NONE		;AM_ABSY	= 3
f77c : 01                    	db AM_ABS		;AM_ZP		= 4
f77d : 02                    	db AM_ABSX		;AM_ZPX		= 5
f77e : 03                    	db AM_ABSY		;AM_ZPY		= 6
f77f : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
f780 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
f781 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
f782 : 00                    	db AM_NONE		;AM_ABSIND	= 10
f783 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
f784 : 00                    	db AM_NONE		;AM_IMM		= 12
f785 : 00                    	db AM_NONE		;AM_ACC		= 13
f786 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
f787 : 0f                    	db AM_REL		;AM_REL		= 15
f788 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
f789 :                       df_asm_tokensyms
                             	;* Start with directives
f789 : 6f726702              	db	"org",		1*2
f78d : 1000                  	db	AM_DIR,		0x00
f78f : 6f707402              	db	"opt",		1*2
f793 : 1000                  	db	AM_DIR,		0x00
f795 : 646202                	db	"db",		1*2
f798 : 1000                  	db	AM_DIR,		0x00
f79a : 647702                	db	"dw",		1*2
f79d : 1000                  	db	AM_DIR,		0x00
f79f : 647302                	db	"ds",		1*2
f7a2 : 1000                  	db	AM_DIR,		0x00	
                             
f7a4 : 61646312              	db	"adc",		9*2
f7a8 : 0c69                  	db	AM_IMM,		0x69
f7aa : 0465                  	db	AM_ZP,		0x65
f7ac : 0575                  	db	AM_ZPX,		0x75
f7ae : 016d                  	db	AM_ABS,		0x6d
f7b0 : 027d                  	db	AM_ABSX,	0x7d
f7b2 : 0379                  	db	AM_ABSY,	0x79
f7b4 : 0861                  	db	AM_ZPINDX,	0x61
f7b6 : 0971                  	db	AM_ZPINDY,	0x71
f7b8 : 0772                  	db	AM_ZPIND,	0x72
                             	
f7ba : 616e6412              	db	"and",		9*2
f7be : 0c29                  	db	AM_IMM,		0x29
f7c0 : 0425                  	db	AM_ZP,		0x25
f7c2 : 0535                  	db	AM_ZPX,		0x35
f7c4 : 012d                  	db	AM_ABS,		0x2d
f7c6 : 023d                  	db	AM_ABSX,	0x3d
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank1.s --------------------------------

f7c8 : 0339                  	db	AM_ABSY,	0x39
f7ca : 0821                  	db	AM_ZPINDX,	0x21
f7cc : 0931                  	db	AM_ZPINDY,	0x31
f7ce : 0732                  	db	AM_ZPIND,	0x32
                             
f7d0 : 636d7012              	db	"cmp",		9*2
f7d4 : 0cc9                  	db	AM_IMM,		0xc9
f7d6 : 04c5                  	db	AM_ZP,		0xc5
f7d8 : 05d5                  	db	AM_ZPX,		0xd5
f7da : 01cd                  	db	AM_ABS,		0xcd
f7dc : 02dd                  	db	AM_ABSX,	0xdd
f7de : 03d9                  	db	AM_ABSY,	0xd9
f7e0 : 08c1                  	db	AM_ZPINDX,	0xc1
f7e2 : 09d1                  	db	AM_ZPINDY,	0xd1
f7e4 : 07d2                  	db	AM_ZPIND,	0xd2
                             
f7e6 : 656f7212              	db	"eor",		9*2
f7ea : 0c49                  	db	AM_IMM,		0x49
f7ec : 0445                  	db	AM_ZP,		0x45
f7ee : 0555                  	db	AM_ZPX,		0x55
f7f0 : 014d                  	db	AM_ABS,		0x4d
f7f2 : 025d                  	db	AM_ABSX,	0x5d
f7f4 : 0359                  	db	AM_ABSY,	0x59
f7f6 : 0841                  	db	AM_ZPINDX,	0x41
f7f8 : 0951                  	db	AM_ZPINDY,	0x51
f7fa : 0752                  	db	AM_ZPIND,	0x52
                             
f7fc : 6c646112              	db	"lda",		9*2
f800 : 0ca9                  	db	AM_IMM,		0xa9
f802 : 04a5                  	db	AM_ZP,		0xa5
f804 : 05b5                  	db	AM_ZPX,		0xb5
f806 : 01ad                  	db	AM_ABS,		0xad
f808 : 02bd                  	db	AM_ABSX,	0xbd
f80a : 03b9                  	db	AM_ABSY,	0xb9
f80c : 08a1                  	db	AM_ZPINDX,	0xa1
f80e : 09b1                  	db	AM_ZPINDY,	0xb1
f810 : 07b2                  	db	AM_ZPIND,	0xb2
                             
f812 : 6f726112              	db	"ora",		9*2
f816 : 0c09                  	db	AM_IMM,		0x09
f818 : 0405                  	db	AM_ZP,		0x05
f81a : 0515                  	db	AM_ZPX,		0x15
f81c : 010d                  	db	AM_ABS,		0x0d
f81e : 021d                  	db	AM_ABSX,	0x1d
f820 : 0319                  	db	AM_ABSY,	0x19
f822 : 0801                  	db	AM_ZPINDX,	0x01
f824 : 0911                  	db	AM_ZPINDY,	0x11
f826 : 0712                  	db	AM_ZPIND,	0x12
                             
f828 : 73626312              	db	"sbc",		9*2
f82c : 0ce9                  	db	AM_IMM,		0xe9
f82e : 04e5                  	db	AM_ZP,		0xe5
f830 : 05f5                  	db	AM_ZPX,		0xf5
f832 : 01ed                  	db	AM_ABS,		0xed
f834 : 02fd                  	db	AM_ABSX,	0xfd
f836 : 03f9                  	db	AM_ABSY,	0xf9
f838 : 08e1                  	db	AM_ZPINDX,	0xe1
f83a : 09f1                  	db	AM_ZPINDY,	0xf1
f83c : 07f2                  	db	AM_ZPIND,	0xf2
                             
f83e : 73746110              	db	"sta",		8*2
f842 : 0485                  	db	AM_ZP,		0x85
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank1.s --------------------------------

f844 : 0595                  	db	AM_ZPX,		0x95
f846 : 018d                  	db	AM_ABS,		0x8d
f848 : 029d                  	db	AM_ABSX,	0x9d
f84a : 0399                  	db	AM_ABSY,	0x99
f84c : 0881                  	db	AM_ZPINDX,	0x81
f84e : 0991                  	db	AM_ZPINDY,	0x91
f850 : 0792                  	db	AM_ZPIND,	0x92
                             
f852 : 61736c0a              	db	"asl",		5*2
f856 : 0d0a                  	db	AM_IMP,		0x0a
f858 : 0406                  	db	AM_ZP,		0x06
f85a : 0516                  	db	AM_ZPX,		0x16
f85c : 010e                  	db	AM_ABS,		0x0e
f85e : 021e                  	db	AM_ABSX,	0x1e
f860 : 6465630a              	db	"dec",		5*2
f864 : 0d3a                  	db	AM_IMP,		0x3a
f866 : 04c6                  	db	AM_ZP,		0xc6
f868 : 05d6                  	db	AM_ZPX,		0xd6
f86a : 01ce                  	db	AM_ABS,		0xce
f86c : 02de                  	db	AM_ABSX,	0xde
f86e : 696e630a              	db	"inc",		5*2
f872 : 0d1a                  	db	AM_IMP,		0x1a
f874 : 04e6                  	db	AM_ZP,		0xe6
f876 : 05f6                  	db	AM_ZPX,		0xf6
f878 : 01ee                  	db	AM_ABS,		0xee
f87a : 02fe                  	db	AM_ABSX,	0xfe
f87c : 6c73720a              	db	"lsr",		5*2
f880 : 0d4a                  	db	AM_IMP,		0x4a
f882 : 0446                  	db	AM_ZP,		0x46
f884 : 0556                  	db	AM_ZPX,		0x56
f886 : 014e                  	db	AM_ABS,		0x4e
f888 : 025e                  	db	AM_ABSX,	0x5e
f88a : 726f6c0a              	db	"rol",		5*2
f88e : 0d2a                  	db	AM_IMP,		0x2a
f890 : 0426                  	db	AM_ZP,		0x26
f892 : 0536                  	db	AM_ZPX,		0x36
f894 : 012e                  	db	AM_ABS,		0x2e
f896 : 023e                  	db	AM_ABSX,	0x3e
f898 : 726f720a              	db	"ror",		5*2
f89c : 0d6a                  	db	AM_IMP,		0x6a
f89e : 0466                  	db	AM_ZP,		0x66
f8a0 : 0576                  	db	AM_ZPX,		0x76
f8a2 : 016e                  	db	AM_ABS,		0x6e
f8a4 : 027e                  	db	AM_ABSX,	0x7e
                             
f8a6 : 6269740a              	db	"bit",		5*2
f8aa : 0c89                  	db	AM_IMM,		0x89
f8ac : 0424                  	db	AM_ZP,		0x24
f8ae : 0534                  	db	AM_ZPX,		0x34
f8b0 : 012c                  	db	AM_ABS,		0x2c
f8b2 : 023c                  	db	AM_ABSX,	0x3c
                             	
f8b4 : 62726b02              	db	"brk",		1*2
f8b8 : 0d00                  	db	AM_IMP,		0x00
f8ba : 73747002              	db	"stp",		1*2
f8be : 0ddb                  	db	AM_IMP,		0xdb
f8c0 : 77616902              	db	"wai",		1*2
f8c4 : 0dcb                  	db	AM_IMP,		0xcb
                             	
f8c6 : 636c6302              	db	"clc",		1*2
f8ca : 0d18                  	db	AM_IMP,		0x18
f8cc : 636c6402              	db	"cld",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank1.s --------------------------------

f8d0 : 0dd8                  	db	AM_IMP,		0xd8
f8d2 : 636c6902              	db	"cli",		1*2
f8d6 : 0d58                  	db	AM_IMP,		0x58
f8d8 : 636c7602              	db	"clv",		1*2
f8dc : 0db8                  	db	AM_IMP,		0xb8
f8de : 73656302              	db	"sec",		1*2
f8e2 : 0d38                  	db	AM_IMP,		0x38
f8e4 : 73656402              	db	"sed",		1*2
f8e8 : 0df8                  	db	AM_IMP,		0xf8
f8ea : 73656902              	db	"sei",		1*2
f8ee : 0d78                  	db	AM_IMP,		0x78
                             	
f8f0 : 63707806              	db	"cpx",		3*2
f8f4 : 0ce0                  	db	AM_IMM,		0xe0
f8f6 : 04e4                  	db	AM_ZP,		0xe4
f8f8 : 01ec                  	db	AM_ABS,		0xec
f8fa : 63707906              	db	"cpy",		3*2
f8fe : 0cc0                  	db	AM_IMM,		0xc0
f900 : 04c4                  	db	AM_ZP,		0xc4
f902 : 01cc                  	db	AM_ABS,		0xcc
f904 : 64657802              	db	"dex",		1*2
f908 : 0dca                  	db	AM_IMP,		0xca
f90a : 64657902              	db	"dey",		1*2
f90e : 0d88                  	db	AM_IMP,		0x88
f910 : 696e7802              	db	"inx",		1*2
f914 : 0de8                  	db	AM_IMP,		0xe8
f916 : 696e7902              	db	"iny",		1*2
f91a : 0dc8                  	db	AM_IMP,		0xc8
f91c : 6c64780a              	db	"ldx",		5*2
f920 : 0ca2                  	db	AM_IMM,		0xa2
f922 : 04a6                  	db	AM_ZP,		0xa6
f924 : 06b6                  	db	AM_ZPY,		0xb6
f926 : 01ae                  	db	AM_ABS,		0xae
f928 : 03be                  	db	AM_ABSY,	0xbe
f92a : 6c64790a              	db	"ldy",		5*2
f92e : 0ca0                  	db	AM_IMM,		0xa0
f930 : 04a4                  	db	AM_ZP,		0xa4
f932 : 05b4                  	db	AM_ZPX,		0xb4
f934 : 01ac                  	db	AM_ABS,		0xac
f936 : 02bc                  	db	AM_ABSX,	0xbc
f938 : 73747806              	db	"stx",		3*2
f93c : 0486                  	db	AM_ZP,		0x86
f93e : 0696                  	db	AM_ZPY,		0x96
f940 : 018e                  	db	AM_ABS,		0x8e
f942 : 73747906              	db	"sty",		3*2
f946 : 0484                  	db	AM_ZP,		0x84
f948 : 0594                  	db	AM_ZPX,		0x94
f94a : 018c                  	db	AM_ABS,		0x8c
f94c : 73747a08              	db	"stz",		4*2
f950 : 0464                  	db	AM_ZP,		0x64
f952 : 0574                  	db	AM_ZPX,		0x74
f954 : 019c                  	db	AM_ABS,		0x9c
f956 : 029e                  	db	AM_ABSX,	0x9e
                             	
                             
f958 : 62636302              	db	"bcc",		1*2
f95c : 0f90                  	db	AM_REL,		0x90
f95e : 62637302              	db	"bcs",		1*2
f962 : 0fb0                  	db	AM_REL,		0xb0
f964 : 62657102              	db	"beq",		1*2
f968 : 0ff0                  	db	AM_REL,		0xf0
f96a : 626d6902              	db	"bmi",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank1.s --------------------------------

f96e : 0f30                  	db	AM_REL,		0x30
f970 : 626e6502              	db	"bne",		1*2
f974 : 0fd0                  	db	AM_REL,		0xd0
f976 : 62706c02              	db	"bpl",		1*2
f97a : 0f10                  	db	AM_REL,		0x10
f97c : 62726102              	db	"bra",		1*2
f980 : 0f80                  	db	AM_REL,		0x80
f982 : 62766302              	db	"bvc",		1*2
f986 : 0f50                  	db	AM_REL,		0x50
f988 : 62767302              	db	"bvs",		1*2
f98c : 0f70                  	db	AM_REL,		0x70
f98e : 6a6d7006              	db	"jmp",		3*2
f992 : 014c                  	db	AM_ABS,		0x4c
f994 : 0a6c                  	db	AM_ABSIND,	0x6c
f996 : 0b7c                  	db	AM_ABSINDX,	0x7c
f998 : 6a737202              	db	"jsr",		1*2
f99c : 0120                  	db	AM_ABS,		0x20
                             	
f99e : 6e6f7002              	db	"nop",		1*2
f9a2 : 0dea                  	db	AM_IMP,		0xea
f9a4 : 70686102              	db	"pha",		1*2
f9a8 : 0d48                  	db	AM_IMP,		0x48
f9aa : 70687002              	db	"php",		1*2
f9ae : 0d08                  	db	AM_IMP,		0x08
f9b0 : 70687802              	db	"phx",		1*2
f9b4 : 0dda                  	db	AM_IMP,		0xda
f9b6 : 70687902              	db	"phy",		1*2
f9ba : 0d5a                  	db	AM_IMP,		0x5a
f9bc : 706c6102              	db	"pla",		1*2
f9c0 : 0d68                  	db	AM_IMP,		0x68
f9c2 : 706c7002              	db	"plp",		1*2
f9c6 : 0d28                  	db	AM_IMP,		0x28
f9c8 : 706c7802              	db	"plx",		1*2
f9cc : 0dfa                  	db	AM_IMP,		0xfa
f9ce : 706c7902              	db	"ply",		1*2
f9d2 : 0d7a                  	db	AM_IMP,		0x7a
f9d4 : 72746902              	db	"rti",		1*2
f9d8 : 0d40                  	db	AM_IMP,		0x40
f9da : 72747302              	db	"rts",		1*2
f9de : 0d60                  	db	AM_IMP,		0x60
f9e0 : 74617802              	db	"tax",		1*2
f9e4 : 0daa                  	db	AM_IMP,		0xaa
f9e6 : 74617902              	db	"tay",		1*2
f9ea : 0da8                  	db	AM_IMP,		0xa8
f9ec : 74737802              	db	"tsx",		1*2
f9f0 : 0dba                  	db	AM_IMP,		0xba
f9f2 : 74786102              	db	"txa",		1*2
f9f6 : 0d8a                  	db	AM_IMP,		0x8a
f9f8 : 74787302              	db	"txs",		1*2
f9fc : 0d9a                  	db	AM_IMP,		0x9a
f9fe : 74796102              	db	"tya",		1*2
fa02 : 0d98                  	db	AM_IMP,		0x98
                             	
fa04 : 74726204              	db	"trb",		2*2
fa08 : 0414                  	db	AM_ZP,		0x14
fa0a : 011c                  	db	AM_ABS,		0x1c
fa0c : 74736204              	db	"tsb",		2*2
fa10 : 0404                  	db	AM_ZP,		0x04
fa12 : 010c                  	db	AM_ABS,		0x0c
                             	
fa14 : 6262723002            	db	"bbr0",		1*2
fa19 : 0f0f                  	db	AM_REL,		0x0f
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank1.s --------------------------------

fa1b : 6262723102            	db	"bbr1",		1*2
fa20 : 0f1f                  	db	AM_REL,		0x1f
fa22 : 6262723202            	db	"bbr2",		1*2
fa27 : 0f2f                  	db	AM_REL,		0x2f
fa29 : 6262723302            	db	"bbr3",		1*2
fa2e : 0f3f                  	db	AM_REL,		0x3f
fa30 : 6262723402            	db	"bbr4",		1*2
fa35 : 0f4f                  	db	AM_REL,		0x4f
fa37 : 6262723502            	db	"bbr5",		1*2
fa3c : 0f5f                  	db	AM_REL,		0x5f
fa3e : 6262723602            	db	"bbr6",		1*2
fa43 : 0f6f                  	db	AM_REL,		0x6f
fa45 : 6262723702            	db	"bbr7",		1*2
fa4a : 0f7f                  	db	AM_REL,		0x7f
fa4c : 6262733002            	db	"bbs0",		1*2
fa51 : 0f8f                  	db	AM_REL,		0x8f
fa53 : 6262733102            	db	"bbs1",		1*2
fa58 : 0f9f                  	db	AM_REL,		0x9f
fa5a : 6262733202            	db	"bbs2",		1*2
fa5f : 0faf                  	db	AM_REL,		0xaf
fa61 : 6262733302            	db	"bbs3",		1*2
fa66 : 0fbf                  	db	AM_REL,		0xbf
fa68 : 6262733402            	db	"bbs4",		1*2
fa6d : 0fcf                  	db	AM_REL,		0xcf
fa6f : 6262733502            	db	"bbs5",		1*2
fa74 : 0fdf                  	db	AM_REL,		0xdf
fa76 : 6262733602            	db	"bbs6",		1*2
fa7b : 0fef                  	db	AM_REL,		0xef
fa7d : 6262733702            	db	"bbs7",		1*2
fa82 : 0fff                  	db	AM_REL,		0xff
fa84 : 726d623002            	db	"rmb0",		1*2
fa89 : 0f07                  	db	AM_REL,		0x07
fa8b : 726d623102            	db	"rmb1",		1*2
fa90 : 0f17                  	db	AM_REL,		0x17
fa92 : 726d623202            	db	"rmb2",		1*2
fa97 : 0f27                  	db	AM_REL,		0x27
fa99 : 726d623302            	db	"rmb3",		1*2
fa9e : 0f37                  	db	AM_REL,		0x37
faa0 : 726d623402            	db	"rmb4",		1*2
faa5 : 0f47                  	db	AM_REL,		0x47
faa7 : 726d623502            	db	"rmb5",		1*2
faac : 0f57                  	db	AM_REL,		0x57
faae : 726d623602            	db	"rmb6",		1*2
fab3 : 0f67                  	db	AM_REL,		0x67
fab5 : 726d623702            	db	"rmb7",		1*2
faba : 0f77                  	db	AM_REL,		0x77
fabc : 736d623002            	db	"smb0",		1*2
fac1 : 0f87                  	db	AM_REL,		0x87
fac3 : 736d623102            	db	"smb1",		1*2
fac8 : 0f97                  	db	AM_REL,		0x97
faca : 736d623202            	db	"smb2",		1*2
facf : 0fa7                  	db	AM_REL,		0xa7
fad1 : 736d623302            	db	"smb3",		1*2
fad6 : 0fb7                  	db	AM_REL,		0xb7
fad8 : 736d623402            	db	"smb4",		1*2
fadd : 0fc7                  	db	AM_REL,		0xc7
fadf : 736d623502            	db	"smb5",		1*2
fae4 : 0fd7                  	db	AM_REL,		0xd7
fae6 : 736d623602            	db	"smb6",		1*2
faeb : 0fe7                  	db	AM_REL,		0xe7
faed : 736d623702            	db	"smb7",		1*2
faf2 : 0ff7                  	db	AM_REL,		0xf7
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank1.s --------------------------------

                             	
                             	;* Terminates with a zero
faf4 : 00                    	db	0
                             
                             	include	"dflat\asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
faf5 :                       df_tk_asm_tokenjmp
faf5 : 56d6                  	dw	df_tk_asm_org
faf7 : 56d6                  	dw	df_tk_asm_opt
faf9 : a1d5                  	dw	df_tk_asm_db
fafb : a1d5                  	dw	df_tk_asm_dw
fafd : 56d6                  	dw	df_tk_asm_ds
                             
faff :                       df_rt_asm_tokenjmp
faff : aef4                  	dw	df_rt_asm_org
fb01 : c0f4                  	dw	df_rt_asm_opt
fb03 : c8f4                  	dw	df_rt_asm_db
fb05 : cbf4                  	dw	df_rt_asm_dw
fb07 : 44f5                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fb09 :                       asm_init
                             	; Zero the PC
fb09 : 64db             [ 3] 	stz df_asmpc
fb0b : 64dc             [ 3] 	stz df_asmpc+1
                             	; Zero the option
fb0d : 64dd             [ 3] 	stz df_asmopt
fb0f : 60               [ 6] 	rts
                             	
fb10 :                       mod_sz_asm_e
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             	; End of Code
fb10 :                       _code_end
fb10 :                       _bank1_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
