AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank1.s --------------------------------

13456 lines read, no errors in pass 1.
c000 =                       _bank1_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank1.s --------------------------------

0002 =                       VDP_LONGDELAY 	= 2
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank1.s --------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank1.s --------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank1.s --------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank1.s --------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank1.s --------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank1.s --------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank1.s --------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank1.s --------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank1.s --------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank1.s --------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank1.s --------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank1.s --------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank1.s --------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank1.s --------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank1.s --------------------------------

                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank1.s --------------------------------

008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank1.s --------------------------------

                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank1.s --------------------------------

0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : f7c6                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : e4ca                  	fcw init			; 0xfffc : Reset Vector
fffe : 34c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
c000 : 80                    	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank1.s --------------------------------

                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c60c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c5dc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4cf0c5           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c28c6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c34c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c95c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c3dc6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4cfdc5           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c14c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ; 
c02e :                       mod_sz_autogen_s 
c02e :                       _df_init 
                               _bankjsr $f1da, 1 
                             
c046 :                       _df_pg_dflat 
                               _bankjsr $d781, 1 
                             
c05e :                       _fs_chdir_w 
                               _bankjsr $d511, 2 
                             
c076 :                       _fs_mkdir_w 
                               _bankjsr $d5a4, 2 
                             
c08e :                       _fs_delete_w 
                               _bankjsr $d4ad, 2 
                             
c0a6 :                       _fs_close_w 
                               _bankjsr $d46c, 2 
                             
c0be :                       _fs_get_byte_w 
                               _bankjsr $d189, 2 
                             
c0d6 :                       _fs_open_read_w 
                               _bankjsr $d358, 2 
                             
c0ee :                       _fs_open_write_w 
                               _bankjsr $d41c, 2 
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank1.s --------------------------------

c106 :                       _fs_put_byte_w 
                               _bankjsr $d2e5, 2 
                             
c11e :                       _fs_dir_find_entry_w 
                               _bankjsr $cfcc, 2 
                             
c136 :                       _fs_dir_entry_next_w 
                               _bankjsr $d002, 2 
                             
c14e :                       _fs_dir_root_start_w 
                               _bankjsr $cf87, 2 
                             
c166 :                       _get_byte 
                               _bankjsr $d1d1, 0 
                             
c17e :                       _put_byte 
                               _bankjsr $d1e6, 0 
                             
c196 :                       _gr_get_key 
                               _bankjsr $e28c, 0 
                             
c1ae :                       _gr_put_byte 
                               _bankjsr $e299, 0 
                             
c1c6 :                       _gr_init_screen 
                               _bankjsr $dd59, 0 
                             
c1de :                       _init_acia 
                               _bankjsr $d1f3, 0 
                             
c1f6 :                       _init_cia0 
                               _bankjsr $d17e, 0 
                             
c20e :                       _init_cia1 
                               _bankjsr $d1af, 0 
                             
c226 :                       _init_fs 
                               _bankjsr $ce64, 2 
                             
c23e :                       _init_sdcard 
                               _bankjsr $cb5e, 2 
                             
c256 :                       _init_snd 
                               _bankjsr $d5bc, 0 
                             
c26e :                       _init_keyboard 
                               _bankjsr $d205, 0 
                             
c286 :                       _kb_read_raw 
                               _bankjsr $d214, 0 
                             
c29e :                       _kb_read_dip 
                               _bankjsr $d27f, 0 
                             
c2b6 :                       _command_line 
                               _bankjsr $cb5e, 0 
                             
c2ce :                       _gr_cls 
                               _bankjsr $dd6c, 0 
                             
c2e6 :                       _gr_init_hires 
                               _bankjsr $dd16, 0 
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank1.s --------------------------------

                             
c2fe :                       _gr_line 
                               _bankjsr $e0c6, 0 
                             
c316 :                       _gr_box 
                               _bankjsr $df06, 0 
                             
c32e :                       _gr_circle 
                               _bankjsr $e011, 0 
                             
c346 :                       _gr_plot 
                               _bankjsr $ddd7, 0 
                             
c35e :                       _gr_hchar 
                               _bankjsr $de15, 0 
                             
c376 :                       _gr_point 
                               _bankjsr $debb, 0 
                             
c38e :                       _gr_get 
                               _bankjsr $ddf2, 0 
                             
c3a6 :                       _gr_set_cur 
                               _bankjsr $ddfa, 0 
                             
c3be :                       _snd_get_note 
                               _bankjsr $d5b5, 0 
                             
c3d6 :                       _snd_get_joy0 
                               _bankjsr $c695, 0 
                             
c3ee :                       _snd_set 
                               _bankjsr $c63d, 0 
                             
c406 :                       _vdp_peek 
                               _bankjsr $c634, 0 
                             
c41e :                       _vdp_poke 
                               _bankjsr $c628, 0 
                             
c436 :                       _vdp_init 
                               _bankjsr $db00, 0 
                             
c44e :                       _rtc_init 
                               _bankjsr $d3db, 0 
                             
c466 :                       _rtc_gettimedate 
                               _bankjsr $d541, 0 
                             
c47e :                       _rtc_setdatetime 
                               _bankjsr $d492, 0 
                             
c496 :                       _rtc_nvread 
                               _bankjsr $d5ac, 0 
                             
c4ae :                       _rtc_nvwrite 
                               _bankjsr $d594, 0 
                             
c4c6 :                       _fs_dir_fhandle_str 
                               _bankjsr $d5b8, 2 
                             
c4de :                       _sd_sendcmd17 
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank1.s --------------------------------

                               _bankjsr $cd36, 2 
                             
c4f6 :                       _sd_sendcmd24 
                               _bankjsr $cdaf, 2 
                             
c50e :                       _cmd_immediate 
                               _bankjsr $cb6a, 0 
                             
c526 :                       mod_sz_autogen_e 
                             
                             	
c526 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c526 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c526 :                       io_init
c526 : a900             [ 2] 	lda #0				; Assume it's serial
c528 : 48               [ 3] 	pha
c529 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c52c : 2910             [ 2] 	and #0x10
c52e : d00b             [ 3] 	bne io_init_set_default
c530 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c533 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c535 : f004             [ 3] 	beq io_init_set_default
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank1.s --------------------------------

                             	; Else set to KB/screen for IO
c537 : 68               [ 4] 	pla
c538 : a901             [ 2] 	lda #1
c53a : 48               [ 3] 	pha
c53b :                       io_init_set_default
c53b : 68               [ 4] 	pla
c53c : 8d000c           [ 4] 	sta io_default
c53f : 4c42c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c542 :                       io_set_default			; Entry point for default
c542 : ad000c           [ 4] 	lda io_default
c545 :                       io_active_device		; Entry point for A set
c545 : 0a               [ 2] 	asl	a				; x16 the Block number
c546 : 0a               [ 2] 	asl a
c547 : 0a               [ 2] 	asl a
c548 : 0a               [ 2] 	asl a
c549 : a8               [ 2] 	tay
c54a : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c54c :                       io_copy_data
c54c : b9c0c5           [ 4] 	lda io_devices,y
c54f : 9d010c           [ 5] 	sta io_block,x
c552 : c8               [ 2] 	iny
c553 : e8               [ 2] 	inx
c554 : e010             [ 2] 	cpx #io_struct
c556 : d0f4             [ 3] 	bne io_copy_data
                             	
c558 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c55a : 854a             [ 3] 	sta buf_ef
c55c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c55d :                       io_get_ch
c55d : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c560 :                       io_put_ch
c560 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank1.s --------------------------------

                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c563 :                       io_open_read
c563 : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c566 :                       io_open_write
c566 : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c569 :                       io_close
c569 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c56c :                       io_delete
c56c : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c56f :                       io_read_line
c56f : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c571 : 8548             [ 3] 	sta buf_adr+1
c573 : 8449             [ 3] 	sty buf_sz			; Max length
c575 : 08               [ 3] 	php					; Save echo state
c576 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c578 :                       io_get_line_byte
c578 : 38               [ 2] 	sec					; Getting bytes synchronously
c579 : 205dc5           [ 6] 	jsr io_get_ch		; Get a byte
c57c : b026             [ 3] 	bcs io_get_line_done; Got nothing then finish
c57e : 28               [ 4] 	plp					; Get echo state
c57f : 08               [ 3] 	php					; Instantly save it back
c580 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c582 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c584 : d005             [ 3] 	bne io_do_echo
c586 : c000             [ 2] 	cpy #0				; Already at beginning?
c588 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank1.s --------------------------------

c58a : 88               [ 2] 	dey					; Else decrement length
c58b :                       io_do_echo
c58b : 2060c5           [ 6] 	jsr io_put_ch		; Echo it
c58e :                       io_skip_echo
c58e : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c590 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c592 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c594 : f003             [ 3] 	beq io_skip_special
c596 : 9147             [ 5] 	sta (buf_adr),y		; Save it
c598 : c8               [ 2] 	iny					; Increase length
c599 :                       io_skip_special
c599 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c59b : f007             [ 3] 	beq io_get_line_done	; If yes then done
c59d : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c59f : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c5a1 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c5a2 : 38               [ 2] 	sec					; Yes, set carry flag
c5a3 : 60               [ 6] 	rts					; And done
c5a4 :                       io_get_line_done
c5a4 : a900             [ 2] 	lda #0
c5a6 : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c5a8 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c5a9 : 18               [ 2] 	clc					; Clear carry flag
c5aa : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c5ab :                       io_print_line
c5ab : 48               [ 3] 	pha
                             
c5ac : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c5ae : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c5b0 : a000             [ 2] 	ldy #0						; Start at the beginning!
c5b2 :                       io_print_line_byte
c5b2 : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c5b4 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c5b6 : 2060c5           [ 6] 	jsr io_put_ch				; Transmit
c5b9 : c8               [ 2] 	iny
c5ba : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c5bc :                       io_print_done
c5bc : 68               [ 4] 	pla
c5bd : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c5be :                       io_null_op
c5be : 18               [ 2] 	clc
c5bf : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c5c0 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c5c0 :                       io_device0					; Serial device, input = Ser, outp
c5c0 : 66c1                  	dw	_get_byte			; io_get_ch
c5c2 : 7ec1                  	dw	_put_byte			; io_put_ch
c5c4 : bec5                  	dw	io_null_op			; io_open_r
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank1.s --------------------------------

c5c6 : bec5                  	dw	io_null_op			; io_open_w
c5c8 : bec5                  	dw	io_null_op			; io_close_f
c5ca : bec5                  	dw	io_null_op			; io_del_f
c5cc : bec5                  	dw	io_null_op			; io_ext1
c5ce : bec5                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c5d0 :                       io_device1					; Default device, input = screen e
c5d0 : 96c1                  	dw	_gr_get_key			; io_get_ch
c5d2 : aec1                  	dw	_gr_put_byte		; io_put_ch
c5d4 : bec5                  	dw	io_null_op			; io_open_r
c5d6 : bec5                  	dw	io_null_op			; io_open_w
c5d8 : bec5                  	dw	io_null_op			; io_close_f
c5da : bec5                  	dw	io_null_op			; io_del_f
c5dc : bec5                  	dw	io_null_op			; io_ext1
c5de : bec5                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c5e0 :                       io_device2					; SD device, input = SD, output = 
c5e0 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c5e2 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c5e4 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c5e6 : eec0                  	dw	_fs_open_write_w	; io_open_w
c5e8 : a6c0                  	dw	_fs_close_w			; io_close_f
c5ea : 8ec0                  	dw	_fs_delete_w		; io_del_f
c5ec : bec5                  	dw	io_null_op			; io_ext1
c5ee : bec5                  	dw	io_null_op			; io_ext2
                             
c5f0 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5f0 :                       vdp_wr_reg
c5f0 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5f3 : ea               [ 2] 	nop
c5f4 : ea               [ 2] 	nop
c5f5 : 0980             [ 2] 	ora #0x80
c5f7 : 8d0105           [ 4] 	sta VDP_MODE1
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank1.s --------------------------------

c5fa : 4980             [ 2] 	eor #0x80
c5fc : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5fd :                       vdp_wr_addr
c5fd : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c600 : ea               [ 2] 	nop
c601 : ea               [ 2] 	nop
c602 : 0940             [ 2] 	ora #0x40		; Required by VDP
c604 : 8d0105           [ 4] 	sta VDP_MODE1
c607 : 4940             [ 2] 	eor #0x40		; Undo that bit
c609 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c60a :                       vdp_mem_wait
c60a : da               [ 3] 	phx								; 3
c60b : a616             [ 3] 	ldx vdp_delay					; 3
c60d : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c60f :                       vdp_mem_wait_loop
c60f : ca               [ 2] 	dex								; 2
c610 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c612 :                       vdp_mem_wait_end
c612 : fa               [ 4] 	plx								; 3
c613 : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c614 :                       vdp_rd_addr
c614 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c617 : ea               [ 2] 	nop
c618 : ea               [ 2] 	nop
c619 : 8d0105           [ 4] 	sta VDP_MODE1
c61c : 80ec             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank1.s --------------------------------

                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c61e :                       vdp_rd_vram
c61e : ad0005           [ 4] 	lda VDP_VRAM
c621 : 80e7             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c623 :                       vdp_wr_vram
c623 : 8d0005           [ 4] 	sta VDP_VRAM
c626 : 80e2             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c628 :                       vdp_poke
c628 : 48               [ 3] 	pha
c629 : 98               [ 2] 	tya
c62a : 78               [ 2] 	sei
c62b : 20fdc5           [ 6] 	jsr vdp_wr_addr
c62e : 68               [ 4] 	pla
c62f : 2023c6           [ 6] 	jsr vdp_wr_vram
c632 : 58               [ 2] 	cli
c633 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c634 :                       vdp_peek
c634 : 78               [ 2] 	sei
c635 : 2014c6           [ 6] 	jsr vdp_rd_addr
c638 : 201ec6           [ 6] 	jsr vdp_rd_vram
c63b : 58               [ 2] 	cli
c63c : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank1.s --------------------------------

                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c63d :                       snd_set
c63d : 48               [ 3] 	pha
                             
c63e : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c640 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c643 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c646 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c649 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c64b : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c64d : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c650 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c652 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c655 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c658 : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c65a : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c65d : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c65f : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c662 : 68               [ 4] 	pla
                             	
c663 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c664 :                       snd_get
c664 : 48               [ 3] 	pha
                             
c665 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c667 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c66a : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c66d : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c670 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c672 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c674 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c677 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank1.s --------------------------------

c679 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c67c : a900             [ 2] 	lda #0x00				; Set Port A to input
c67e : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c681 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c684 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c686 : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c688 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c68b : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c68e : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c690 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c693 : 68               [ 4] 	pla
                             	
c694 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c695 :                       snd_get_joy0
c695 : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c697 : 2064c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c69a : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c69b :                       main
                             
c69b :                       infinity
c69b : 2046c0           [ 6] 	jsr _df_pg_dflat
c69e : 4c9bc6           [ 3] 	jmp infinity
                             
c6a1 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank1.s --------------------------------

c6a1 : 4275696c64203a..       db "Build : 26/09/2024\r" 
c6b4 : 3132384b204272..       db "128K Breadboard Computer\r" 
c6cd : 42792040363530..       db "By @6502Nerd\r" 
c6da : 436f7079726967..       db "Copyright (c) 2024\r",0 
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c6ee :                       init_nmi
                             	; Core IRQ handler
c6ee : a9f7             [ 2] 	lda #lo(nmi)
c6f0 : 8502             [ 3] 	sta int_nmi
c6f2 : a9c6             [ 2] 	lda #hi(nmi)
c6f4 : 8503             [ 3] 	sta int_nmi+1
c6f6 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c6f7 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* Only the 6551 uses this - fills the receive bu
c6f7 :                       nmi
c6f7 : 48               [ 3] 	pha
                             
c6f8 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c6fb : 100c             [ 4] 	bpl	nmi_fin					; If no interrupt don't do anyth
                             
c6fd : 5a               [ 3] 	phy
c6fe : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c701 : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c703 : 990008           [ 5] 	sta ser_buf,y
c706 : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c708 : 7a               [ 4] 	ply
c709 :                       nmi_fin
                             
c709 : 68               [ 4] 	pla
c70a : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank1.s --------------------------------

c70b :                       init_irq
                             	; Core IRQ handler
c70b : a945             [ 2] 	lda #lo(irq)
c70d : 8504             [ 3] 	sta int_irq
c70f : a9c7             [ 2] 	lda #hi(irq)
c711 : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c713 : a973             [ 2] 	lda #lo(irq_brk)
c715 : 8506             [ 3] 	sta int_brk
c717 : a9c7             [ 2] 	lda #hi(irq_brk)
c719 : 8507             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c71b : a944             [ 2] 	lda #lo(null_handler)
c71d : 8508             [ 3] 	sta int_uservdp
c71f : a9c7             [ 2] 	lda #hi(null_handler)
c721 : 8509             [ 3] 	sta int_uservdp+1
                             
c723 : a944             [ 2] 	lda #lo(null_handler)
c725 : 850a             [ 3] 	sta int_usercia0
c727 : a9c7             [ 2] 	lda #hi(null_handler)
c729 : 850b             [ 3] 	sta int_usercia0+1
                             
c72b : a944             [ 2] 	lda #lo(null_handler)
c72d : 850c             [ 3] 	sta int_usercia1
c72f : a9c7             [ 2] 	lda #hi(null_handler)
c731 : 850d             [ 3] 	sta int_usercia1+1
                             
c733 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c734 :                       call_irq_master
c734 : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c737 :                       call_irq_brk
c737 : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c73a :                       call_irq_uservdp
c73a : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c73d :                       call_irq_usercia0
c73d : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c740 :                       call_irq_usercia1
c740 : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c743 :                       null_irq
c743 : 40               [ 6] 	rti
                             
                             ;* null handler
c744 :                       null_handler
c744 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c745 :                       irq
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank1.s --------------------------------

                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c748 : ba               [ 2] 	tsx
c749 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c74c : 2910             [ 2] 	and #0x10
c74e : d0e7             [ 3] 	bne call_irq_brk
                             	
c750 : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c751 : ad8d04           [ 4] 	lda IO_1 + IFR
c754 : 1003             [ 3] 	bpl irq_check_vdp
c756 : 2040c7           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c759 :                       irq_check_vdp	
c759 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c75c : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c75e : 203ac7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c761 : 20c0c7           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c764 : 209ec7           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c767 :                       irq_check_cia0
c767 : ad0d04           [ 4] 	lda IO_0 + IFR
c76a : 1003             [ 3] 	bpl irq_fin
c76c : 203dc7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c76f :                       irq_fin
                             	_pullAXY
                             
c772 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c773 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c773 : 38               [ 2] 	sec
c774 : bd0501           [ 4] 	lda 0x0105,x
c777 : e902             [ 2] 	sbc #2
c779 : 85a4             [ 3] 	sta df_brkpc
c77b : bd0601           [ 4] 	lda 0x0106,x
c77e : e900             [ 2] 	sbc #0
c780 : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c782 : a001             [ 2] 	ldy #1
c784 : b1a4             [ 5] 	lda (df_brkpc),y
c786 : 85a6             [ 3] 	sta df_brkval
c788 : 859f             [ 3] 	sta errno
                             	; now update the return address
c78a : a5a2             [ 3] 	lda df_pc
c78c : 9d0501           [ 5] 	sta 0x105,x
c78f : a5a3             [ 3] 	lda df_pc+1
c791 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank1.s --------------------------------

                             	; Save the registers in temp area
c797 : 8585             [ 3] 	sta num_a
c799 : 8686             [ 3] 	stx num_a+1
c79b : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c79d : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c79e :                       int_kb_handler	
c79e : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c7a0 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c7a2 : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c7a5 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c7a7 : f00c             [ 3] 	beq int_keys_up
c7a9 :                       int_do_read
c7a9 : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c7ab : a53b             [ 3] 	lda kb_debounce			; Set debounce
c7ad : 8537             [ 3] 	sta kb_deb
c7af :                       int_skip_scan
c7af : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c7b1 : 8d0d04           [ 4] 	sta IO_0 + IFR
c7b4 : 60               [ 6] 	rts
c7b5 :                       int_keys_up					; No key pressed
c7b5 : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c7b7 : 6434             [ 3] 	stz kb_last
c7b9 : 6435             [ 3] 	stz kb_code
c7bb : 6437             [ 3] 	stz kb_deb
c7bd : 6438             [ 3] 	stz kb_rep
c7bf : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c7c0 :                       int_vdp_handler
c7c0 : 20ecc7           [ 6] 	jsr update_timers	; If it is then update system 
                             
c7c3 : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c7c5 : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c7c7 : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c7c9 : a513             [ 3] 	lda vdp_curstat		; Check it
c7cb : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c7cd : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c7cf : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c7d1 : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c7d3 : 8513             [ 3] 	sta vdp_curstat		
                             
c7d5 : 18               [ 2] 	clc					; Add offset for cursor address in vram
c7d6 : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c7d8 : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c7da : aa               [ 2] 	tax
c7db : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c7dd : 6900             [ 2] 	adc #0
                             
c7df : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank1.s --------------------------------

c7e2 : a513             [ 3] 	lda vdp_curstat
c7e4 : 2980             [ 2] 	and #0x80
c7e6 : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c7e8 : 2023c6           [ 6] 	jsr vdp_wr_vram
c7eb :                       int_vdp_fin	
c7eb : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c7ec :                       update_timers
c7ec : e610             [ 5] 	inc vdp_int_cnt
c7ee : d002             [ 3] 	bne inc_kb_timers
c7f0 : e611             [ 5] 	inc vdp_int_cnt+1
c7f2 :                       inc_kb_timers
c7f2 : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c7f4 : f002             [ 3] 	beq skip_kb_deb
c7f6 : c637             [ 5] 	dec kb_deb
c7f8 :                       skip_kb_deb
c7f8 : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c7fa : f002             [ 3] 	beq skip_kb_rep
c7fc : c638             [ 5] 	dec kb_rep
c7fe :                       skip_kb_rep
c7fe : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c7ff :                       long_delay
c7ff : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c803 : a000             [ 2] 	ldy #0x00
c805 :                       long_delay_1
c805 : ea               [ 2] 	nop
c806 : ea               [ 2] 	nop
c807 : ea               [ 2] 	nop
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank1.s --------------------------------

c808 : ea               [ 2] 	nop
c809 : 88               [ 2] 	dey
c80a : d0f9             [ 3] 	bne long_delay_1
c80c : ca               [ 2] 	dex
c80d : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c812 : 28               [ 4] 	plp
                             	
c813 : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c814 :                       utilPrintSPC
c814 : 48               [ 3] 	pha
c815 : a920             [ 2] 	lda #' '
c817 : 2060c5           [ 6] 	jsr io_put_ch
c81a : 68               [ 4] 	pla
c81b : 60               [ 6] 	rts
                             
c81c :                       utilPrintCRLF
c81c : 48               [ 3] 	pha
c81d : a90d             [ 2] 	lda #UTF_CR
c81f : 2060c5           [ 6] 	jsr io_put_ch
c822 : 68               [ 4] 	pla
c823 : 60               [ 6] 	rts
                             
c824 :                       utilPrintA
c824 : 8545             [ 3] 	sta tmp_d
c826 : 48               [ 3] 	pha
c827 : 8a               [ 2] 	txa
c828 : 48               [ 3] 	pha
c829 : a545             [ 3] 	lda tmp_d
c82b : 2049c8           [ 6] 	jsr str_a_to_x
c82e : 2060c5           [ 6] 	jsr io_put_ch
c831 : 8a               [ 2] 	txa
c832 : 2060c5           [ 6] 	jsr io_put_ch
c835 : 68               [ 4] 	pla
c836 : aa               [ 2] 	tax
c837 : 68               [ 4] 	pla
c838 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c839 :                       util_clr_mem
c839 : 48               [ 3] 	pha
c83a : 5a               [ 3] 	phy
c83b : 863f             [ 3] 	stx tmp_v1
c83d : 8540             [ 3] 	sta tmp_v1+1
c83f : a900             [ 2] 	lda #0
c841 :                       mem_clr_byte
c841 : 88               [ 2] 	dey
c842 : 913f             [ 5] 	sta (tmp_v1),y
c844 : d0fb             [ 3] 	bne mem_clr_byte
c846 : 7a               [ 4] 	ply
c847 : 68               [ 4] 	pla
c848 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c849 :                       str_a_to_x
c849 : 48               [ 3] 	pha					; Save the byte using later on
c84a : 290f             [ 2] 	and #0x0f			; Mask low nibble
c84c : 18               [ 2] 	clc
c84d : 6930             [ 2] 	adc #'0'			; Convert to UTF
c84f : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c851 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c853 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c855 :                       skip_a_f_1
c855 : aa               [ 2] 	tax					; Low char is in X
c856 : 68               [ 4] 	pla					; Get byte back
c857 : 4a               [ 2] 	lsr a				; Make high nibble low
c858 : 4a               [ 2] 	lsr a
c859 : 4a               [ 2] 	lsr a
c85a : 4a               [ 2] 	lsr a
c85b : 18               [ 2] 	clc
c85c : 6930             [ 2] 	adc #'0'			; Convert to UTF
c85e : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c860 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c862 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c864 :                       skip_a_f_2
                             
c864 : 18               [ 2] 	clc					; No error
c865 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c866 :                       str_x_to_a
c866 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c868 : 38               [ 2] 	sec					; Process high char in A
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank1.s --------------------------------

c869 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c86b : c90a             [ 2] 	cmp #10				; If A < 10 then
c86d : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c86f : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c871 :                       skip_x_f_1
c871 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c873 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c875 : 0a               [ 2] 	asl a				; This is the high nibble
c876 : 0a               [ 2] 	asl a
c877 : 0a               [ 2] 	asl a
c878 : 0a               [ 2] 	asl a
c879 : 48               [ 3] 	pha					; Save the high nibble
c87a : 8a               [ 2] 	txa					; Now process the low char in X
c87b : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c87d : 38               [ 2] 	sec
c87e : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c880 : c90a             [ 2] 	cmp #10				; If A < 10 then
c882 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c884 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c886 :                       skip_x_f_2
c886 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c888 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c88a : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c88c : 68               [ 4] 	pla					; Get high nibble
c88d : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c88f : 18               [ 2] 	clc					; No error
c890 : 60               [ 6] 	rts					; A contains value
                             
c891 :                       str_x_to_a_errl
c891 : 68               [ 4] 	pla
c892 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c894 :                       con_n_to_a
c894 : 8691             [ 3] 	stx num_tmp
c896 : 8592             [ 3] 	sta num_tmp+1
c898 : 6485             [ 3] 	stz num_a
c89a : 6486             [ 3] 	stz num_a+1
c89c : c000             [ 2] 	cpy #NUM_ANY
c89e : f014             [ 3] 	beq con_n_to_a_detect
c8a0 : 88               [ 2] 	dey
c8a1 : d003             [ 3] 	bne con_n_not_dec
c8a3 :                       con_dec_jmp
c8a3 : 4c37c9           [ 3] 	jmp con_dec_to_a_int
c8a6 :                       con_n_not_dec
c8a6 : 88               [ 2] 	dey
c8a7 : d003             [ 3] 	bne con_n_not_hex
c8a9 :                       con_hex_jmp
c8a9 : 4ccec8           [ 3] 	jmp con_hex_to_a_int
c8ac :                       con_n_not_hex
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank1.s --------------------------------

c8ac : 88               [ 2] 	dey
c8ad : d003             [ 3] 	bne con_n_err
c8af :                       con_bin_jmp
c8af : 4c0dc9           [ 3] 	jmp con_bin_to_a_int
c8b2 :                       con_n_err
c8b2 : 38               [ 2] 	sec
c8b3 : 60               [ 6] 	rts
c8b4 :                       con_n_to_a_detect
c8b4 : b291             [ 5] 	lda (num_tmp)
c8b6 : c930             [ 2] 	cmp #'0'
c8b8 : d0e9             [ 3] 	bne con_dec_jmp
c8ba : a001             [ 2] 	ldy #1
c8bc : b191             [ 5] 	lda (num_tmp),y
c8be : 0920             [ 2] 	ora #0x20
c8c0 : c978             [ 2] 	cmp #'x'
c8c2 : f0e5             [ 3] 	beq con_hex_jmp
c8c4 : c962             [ 2] 	cmp #'b'
c8c6 : f0e7             [ 3] 	beq con_bin_jmp
c8c8 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8ca :                       con_hex_to_a
c8ca : 8691             [ 3] 	stx num_tmp
c8cc : 8592             [ 3] 	sta num_tmp+1
c8ce :                       con_hex_to_a_int
c8ce : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c8d0 : a002             [ 2] 	ldy #2			; start at first digit
c8d2 :                       con_hex_digit
c8d2 : b191             [ 5] 	lda (num_tmp),y
c8d4 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c8d6 : 38               [ 2] 	sec							; Process high char in A
c8d7 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c8d9 : c90a             [ 2] 	cmp #10						; If A < 10 then
c8db : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c8dd : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c8df :                       con_hex_skip_x_f_1
c8df : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c8e1 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c8e3 : 48               [ 3] 	pha
                             	; make room for lo nibble
c8e4 : 0685             [ 5] 	asl num_a
c8e6 : 2686             [ 5] 	rol num_a+1
c8e8 : 0685             [ 5] 	asl num_a
c8ea : 2686             [ 5] 	rol num_a+1
c8ec : 0685             [ 5] 	asl num_a
c8ee : 2686             [ 5] 	rol num_a+1
c8f0 : 0685             [ 5] 	asl num_a
c8f2 : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c8f4 : 68               [ 4] 	pla
c8f5 : 0585             [ 3] 	ora num_a
c8f7 : 8585             [ 3] 	sta num_a
c8f9 : c8               [ 2] 	iny
c8fa : ca               [ 2] 	dex
c8fb : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank1.s --------------------------------

c8fd :                       con_hex_err
c8fd : 38               [ 2] 	sec
c8fe : 60               [ 6] 	rts
                             	; found a non-hex digit
c8ff :                       con_hex_done
                             	; if no digits processed then error
c8ff : c002             [ 2] 	cpy #2
c901 : f0fa             [ 4] 	beq con_hex_err
                             	; move y to x for digits processed
c903 : 98               [ 2] 	tya
c904 : aa               [ 2] 	tax
c905 : a902             [ 2] 	lda #NUM_HEX
c907 : 18               [ 2] 	clc
c908 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c909 :                       con_bin_to_a
c909 : 8691             [ 3] 	stx num_tmp
c90b : 8592             [ 3] 	sta num_tmp+1
c90d :                       con_bin_to_a_int
c90d : a002             [ 2] 	ldy #2
c90f : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c911 :                       con_bin_digit
c911 : b191             [ 5] 	lda (num_tmp),y
c913 : c930             [ 2] 	cmp #'0'
c915 : 9010             [ 3] 	bcc con_bin_done
c917 : c932             [ 2] 	cmp #'1'+1
c919 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c91b : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c91d : 2685             [ 5] 	rol num_a
c91f : 2686             [ 5] 	rol num_a+1
c921 : c8               [ 2] 	iny
c922 : ca               [ 2] 	dex
c923 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c925 : 800a             [ 3] 	bra con_bin_err
c927 :                       con_bin_done
                             	; didn't process any digit = error
c927 : c002             [ 2] 	cpy #2
c929 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c92b : 98               [ 2] 	tya
c92c : aa               [ 2] 	tax
c92d : a903             [ 2] 	lda #NUM_BIN
c92f : 18               [ 2] 	clc
c930 : 60               [ 6] 	rts
c931 :                       con_bin_err
c931 : 38               [ 2] 	sec
c932 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank1.s --------------------------------

                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c933 :                       con_dec_to_a
c933 : 8691             [ 3] 	stx num_tmp
c935 : 8592             [ 3] 	sta num_tmp+1
c937 :                       con_dec_to_a_int
c937 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c939 : b291             [ 5] 	lda (num_tmp)
c93b : c92d             [ 2] 	cmp #'-'
c93d : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c93f : c8               [ 2] 	iny
c940 :                       str_d_find_end
c940 : b191             [ 5] 	lda (num_tmp),y
c942 : c930             [ 2] 	cmp #'0'
c944 : 9007             [ 3] 	bcc str_d_found_end
c946 : c93a             [ 2] 	cmp #'9'+1
c948 : b003             [ 3] 	bcs str_d_found_end
c94a : c8               [ 2] 	iny
c94b : 80f3             [ 3] 	bra str_d_find_end
c94d :                       str_d_found_end
c94d : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c94f : b052             [ 3] 	bcs str_d_error		; e.g. -32767 including minus
c951 : 8494             [ 3] 	sty num_tmp+3
c953 : 6493             [ 3] 	stz num_tmp+2
c955 : 6485             [ 3] 	stz num_a
c957 : 6486             [ 3] 	stz num_a+1
c959 :                       str_d_process_digit
c959 : 88               [ 2] 	dey
c95a : 3026             [ 3] 	bmi str_d_digits_done
                             
c95c : b191             [ 5] 	lda (num_tmp),y
                             
c95e : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c960 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c962 : 38               [ 2] 	sec
c963 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c965 : 18               [ 2] 	clc
c966 : 0a               [ 2] 	asl a
c967 : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c969 : aa               [ 2] 	tax
c96a : a585             [ 3] 	lda num_a
c96c : 7da5c9           [ 4] 	adc str_d_powers,x
c96f : 8585             [ 3] 	sta num_a
c971 : a586             [ 3] 	lda num_a+1
c973 : 7da6c9           [ 4] 	adc str_d_powers+1,x
c976 : 8586             [ 3] 	sta num_a+1
c978 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c97a : a593             [ 3] 	lda num_tmp+2
c97c : 6914             [ 2] 	adc #20
c97e : 8593             [ 3] 	sta num_tmp+2
c980 : 80d7             [ 3] 	bra str_d_process_digit
c982 :                       str_d_digits_done
                             	; check if minus
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank1.s --------------------------------

c982 : b291             [ 5] 	lda (num_tmp)
c984 : c92d             [ 2] 	cmp #'-'
c986 : d011             [ 3] 	bne str_d_skip_neg
c988 : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c98a : e002             [ 2] 	cpx #2				; else it's an error
c98c : 9015             [ 3] 	bcc str_d_error
c98e : a685             [ 3] 	ldx num_a
c990 : a586             [ 3] 	lda num_a+1
c992 : 2009ca           [ 6] 	jsr twos_complement
c995 : 8685             [ 3] 	stx num_a
c997 : 8586             [ 3] 	sta num_a+1
c999 :                       str_d_skip_neg
c999 : a694             [ 3] 	ldx num_tmp+3
c99b : e001             [ 2] 	cpx #1				; must be at least 1 char
c99d : 9004             [ 3] 	bcc str_d_error
c99f : a901             [ 2] 	lda #NUM_DEC
c9a1 : 18               [ 2] 	clc
c9a2 : 60               [ 6] 	rts
c9a3 :                       str_d_error
c9a3 : 38               [ 2] 	sec
c9a4 : 60               [ 6] 	rts
                             
c9a5 :                       str_d_powers
c9a5 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c9b9 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c9cd : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c9e1 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c9f5 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
ca09 :                       twos_complement
ca09 : 49ff             [ 2] 	eor #0xff
ca0b : 48               [ 3] 	pha
ca0c : 8a               [ 2] 	txa
ca0d : 49ff             [ 2] 	eor #0xff
ca0f : aa               [ 2] 	tax
ca10 : 68               [ 4] 	pla
ca11 : e8               [ 2] 	inx
ca12 : d001             [ 3] 	bne twos_complement_skip_X
ca14 : 1a               [ 2] 	inc a
ca15 :                       twos_complement_skip_X
ca15 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
ca16 :                       int_to_bcd
ca16 : 08               [ 3] 	php
ca17 : 48               [ 3] 	pha
ca18 : da               [ 3] 	phx
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank1.s --------------------------------

                             
ca19 : 8691             [ 3] 	stx num_tmp
ca1b : 8592             [ 3] 	sta num_tmp+1
ca1d : c980             [ 2] 	cmp #0x80			; Negative?
ca1f : 9003             [ 3] 	bcc int_to_bcd_skip_neg
ca21 : 2009ca           [ 6] 	jsr twos_complement
ca24 :                       int_to_bcd_skip_neg
ca24 : 6485             [ 3] 	stz num_a
ca26 : 6486             [ 3] 	stz num_a+1
ca28 : 6487             [ 3] 	stz num_a+2
ca2a : 6488             [ 3] 	stz num_a+3
ca2c : a210             [ 2] 	ldx #16
ca2e : f8               [ 2] 	sed
ca2f :                       int_to_bcd_bit
ca2f : 0691             [ 5] 	asl num_tmp
ca31 : 2692             [ 5] 	rol num_tmp+1
ca33 : a585             [ 3] 	lda num_a
ca35 : 6585             [ 3] 	adc num_a
ca37 : 8585             [ 3] 	sta num_a
ca39 : a586             [ 3] 	lda num_a+1
ca3b : 6586             [ 3] 	adc num_a+1
ca3d : 8586             [ 3] 	sta num_a+1
ca3f : a587             [ 3] 	lda num_a+2
ca41 : 6587             [ 3] 	adc num_a+2
ca43 : 8587             [ 3] 	sta num_a+2
ca45 : ca               [ 2] 	dex
ca46 : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
ca48 : fa               [ 4] 	plx
ca49 : 68               [ 4] 	pla
ca4a : 28               [ 4] 	plp
ca4b : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
ca4c :                       word_to_bcd
ca4c : 08               [ 3] 	php
ca4d : 48               [ 3] 	pha
ca4e : da               [ 3] 	phx
                             
ca4f : 8691             [ 3] 	stx num_tmp
ca51 : 8592             [ 3] 	sta num_tmp+1
ca53 : 6485             [ 3] 	stz num_a
ca55 : 6486             [ 3] 	stz num_a+1
ca57 : 6487             [ 3] 	stz num_a+2
ca59 : 6488             [ 3] 	stz num_a+3
ca5b : a210             [ 2] 	ldx #16			; 16 binary bits
ca5d : f8               [ 2] 	sed
ca5e :                       word_to_bcd_bit
ca5e : 0691             [ 5] 	asl num_tmp
ca60 : 2692             [ 5] 	rol num_tmp+1
ca62 : a585             [ 3] 	lda num_a
ca64 : 6585             [ 3] 	adc num_a
ca66 : 8585             [ 3] 	sta num_a
ca68 : a586             [ 3] 	lda num_a+1
ca6a : 6586             [ 3] 	adc num_a+1
ca6c : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank1.s --------------------------------

ca6e : a587             [ 3] 	lda num_a+2
ca70 : 6587             [ 3] 	adc num_a+2
ca72 : 8587             [ 3] 	sta num_a+2
ca74 : ca               [ 2] 	dex
ca75 : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
ca77 : fa               [ 4] 	plx
ca78 : 68               [ 4] 	pla
ca79 : 28               [ 4] 	plp
ca7a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
ca7b :                       int_to_str_ch
ca7b : 290f             [ 2] 	and #0xf
ca7d : 0930             [ 2] 	ora #0x30					; Convert to ascii
ca7f : 4930             [ 2] 	eor #0x30					; Check if zero digit
ca81 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
ca83 : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
ca85 : 4930             [ 2] 	eor #0x30					; Restore A
ca87 : 60               [ 6] 	rts							; Return without storing anything
ca88 :                       int_to_str_nz
ca88 : 4930             [ 2] 	eor #0x30					; Restore A
ca8a : 999500           [ 5] 	sta num_buf,y
ca8d : c8               [ 2] 	iny
ca8e : 38               [ 2] 	sec							; Set C as a non-zero encountered
ca8f :                       int_to_str_ch_fin
ca8f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
ca90 :                       int_to_str
                             	_pushAXY
                             
ca93 : a000             [ 2] 	ldy #0						; first pos of num_buf
ca95 : 0900             [ 2] 	ora #0						; Test A for sign bit
ca97 : 08               [ 3] 	php							; Remember C bit of P
ca98 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
ca9a : 2009ca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
ca9d : 48               [ 3] 	pha							; Remember A
ca9e : a92d             [ 2] 	lda #'-'					; Put in negative sign
caa0 : 8595             [ 3] 	sta num_buf
caa2 : c8               [ 2] 	iny							; Start at second buffer pos
caa3 : 68               [ 4] 	pla							; Restore A
caa4 :                       int_to_str_skip_neg
caa4 : 204cca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
caa7 : a202             [ 2] 	ldx #2						; Start at BCD high byte
caa9 :                       int_str
caa9 : 28               [ 4] 	plp							; Get C but immediately
caaa : 08               [ 3] 	php							; Save C (due to loop check later)
caab : b585             [ 4] 	lda num_a,x					; Get BCD digit
caad : 859c             [ 3] 	sta num_buf+7				; Save A it for the units later
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank1.s --------------------------------

caaf : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cab0 : 4a               [ 2] 	lsr a
cab1 : 4a               [ 2] 	lsr a
cab2 : 4a               [ 2] 	lsr a
cab3 : 28               [ 4] 	plp							; Get C
cab4 : 207bca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cab7 : a59c             [ 3] 	lda num_buf+7				; Get A for the units
cab9 : 207bca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cabc : 08               [ 3] 	php							; Save C
cabd : ca               [ 2] 	dex
cabe : 10e9             [ 3] 	bpl int_str
cac0 : 28               [ 4] 	plp							; Check C
cac1 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cac3 : a930             [ 2] 	lda #'0'					; Stuff a zero
cac5 : 8595             [ 3] 	sta num_buf					; Must be in first position..
cac7 : c8               [ 2] 	iny
cac8 :                       int_to_str_fin
cac8 : a900             [ 2] 	lda #0						; Terminator
caca : 999500           [ 5] 	sta num_buf,y
cacd : c8               [ 2] 	iny
                             	_pullAXY
                             
cad1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank1.s --------------------------------

                             ;
                             ;	ply
                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cad2 :                       str_a_to_d
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank1.s --------------------------------

cad2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cad3 :                       print_a_to_d
cad3 : 2090ca           [ 6] 	jsr int_to_str
cad6 : a000             [ 2] 	ldy #0
cad8 :                       print_a_to_d_ch
cad8 : b99500           [ 4] 	lda num_buf,y
cadb : f006             [ 3] 	beq print_a_to_d_fin
cadd : 2060c5           [ 6] 	jsr io_put_ch
cae0 : c8               [ 2] 	iny
cae1 : d0f5             [ 3] 	bne print_a_to_d_ch
cae3 :                       print_a_to_d_fin
cae3 : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cae4 :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cae4 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cae6 : 9a               [ 2] 	txs
cae7 : 4c3fcb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
caea :                       init_2					; init_ram will jump back to here
                             	
caea : 20f0ca           [ 6] 	jsr kernel_init
                             
caed : 4c9bc6           [ 3] 	jmp main
                             
caf0 :                       kernel_init
caf0 : 20eec6           [ 6] 	jsr init_nmi		; Initialise NMI handling
caf3 : 200bc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
caf6 : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
caf9 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cafc : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
caff :                       kernel_test
caff : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cb02 : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cb05 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cb08 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cb0a : 48               [ 3] 	pha
cb0b : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cb0d : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cb10 : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cb12 : aa               [ 2] 	tax					; Save the mode temporarily
cb13 : 68               [ 4] 	pla					; Get the default mode from stack
cb14 : 8a               [ 2] 	txa					; And push the NV mode that was read
cb15 : 48               [ 3] 	pha
cb16 : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank1.s --------------------------------

cb18 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cb1b : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cb1d :                       kernel_skip_nv	
cb1d : 68               [ 4] 	pla					; Get the mode (either default or the NV
cb1e : 20c6c1           [ 6] 	jsr _gr_init_screen
cb21 : 2026c5           [ 6] 	jsr io_init			; Set default input/output device
cb24 : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cb32 : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cb35 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cb38 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cb3b : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cb3e : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cb3f :                       init_ram
cb3f : 6400             [ 3] 	stz 0x00			; Start at page 0
cb41 : 6401             [ 3] 	stz 0x01
cb43 : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cb45 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cb47 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cb49 :                       init_ram_1
cb49 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cb4b : 9004             [ 3] 	bcc init_ram_fill
cb4d : e008             [ 2] 	cpx #8				; Page >=8 is ok
cb4f : 9005             [ 3] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cb51 :                       init_ram_fill
cb51 : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cb53 : c8               [ 2] 	iny
cb54 : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cb56 :                       init_ram_skip
cb56 : e8               [ 2] 	inx					; Increment page counter
cb57 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cb59 : d0ee             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cb5b : 4ceaca           [ 3] 	jmp init_2			; Carry on initialisation
                             
cb5e :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "utils\intmath.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank1.s --------------------------------

                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
cb5e :                       int_add
cb5e : 18               [ 2] 	clc
cb5f : a585             [ 3] 	lda num_a
cb61 : 6589             [ 3] 	adc num_b
cb63 : 8585             [ 3] 	sta num_a
cb65 : a586             [ 3] 	lda num_a+1
cb67 : 658a             [ 3] 	adc num_b+1
cb69 : 8586             [ 3] 	sta num_a+1
cb6b : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
cb6c :                       int_sub
cb6c : 38               [ 2] 	sec
cb6d : a585             [ 3] 	lda num_a
cb6f : e589             [ 3] 	sbc num_b
cb71 : 8585             [ 3] 	sta num_a
cb73 : a586             [ 3] 	lda num_a+1
cb75 : 658a             [ 3] 	adc num_b+1
cb77 : 8586             [ 3] 	sta num_a+1
cb79 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
cb7a :                       int_swp
cb7a : a585             [ 3] 	lda num_a
cb7c : a689             [ 3] 	ldx num_b
cb7e : 8589             [ 3] 	sta num_b
cb80 : 8685             [ 3] 	stx num_a
cb82 : a586             [ 3] 	lda num_a+1
cb84 : a68a             [ 3] 	ldx num_b+1
cb86 : 858a             [ 3] 	sta num_b+1
cb88 : 8686             [ 3] 	stx num_a+1
cb8a : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
cb8b :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
cb93 : 6485             [ 3] 	stz num_a
cb95 : 6486             [ 3] 	stz num_a+1
cb97 : a008             [ 2] 	ldy #8
cb99 :                       int_fast_mult_cycle
cb99 : 4689             [ 5] 	lsr num_b
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank1.s --------------------------------

cb9b : 900d             [ 3] 	bcc int_fast_mult_next
cb9d : 18               [ 2] 	clc
cb9e : a585             [ 3] 	lda num_a
cba0 : 6591             [ 3] 	adc num_tmp
cba2 : 8585             [ 3] 	sta num_a
cba4 : a586             [ 3] 	lda num_a+1
cba6 : 6592             [ 3] 	adc num_tmp+1
cba8 : 8586             [ 3] 	sta num_a+1
cbaa :                       int_fast_mult_next
cbaa : 0691             [ 5] 	asl num_tmp
cbac : 2692             [ 5] 	rol num_tmp+1
cbae : 88               [ 2] 	dey
cbaf : d0e8             [ 3] 	bne int_fast_mult_cycle
cbb1 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
cbb2 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
cbba : 6485             [ 3] 	stz num_a
cbbc : 6486             [ 3] 	stz num_a+1
cbbe : a010             [ 2] 	ldy #16
cbc0 :                       int_mult_cycle
cbc0 : 468a             [ 5] 	lsr num_b+1
cbc2 : 6689             [ 5] 	ror num_b
cbc4 : 900d             [ 3] 	bcc int_mult_next
cbc6 : 18               [ 2] 	clc
cbc7 : a585             [ 3] 	lda num_a
cbc9 : 6591             [ 3] 	adc num_tmp
cbcb : 8585             [ 3] 	sta num_a
cbcd : a586             [ 3] 	lda num_a+1
cbcf : 6592             [ 3] 	adc num_tmp+1
cbd1 : 8586             [ 3] 	sta num_a+1
cbd3 :                       int_mult_next
cbd3 : 0691             [ 5] 	asl num_tmp
cbd5 : 2692             [ 5] 	rol num_tmp+1
cbd7 : 88               [ 2] 	dey
cbd8 : d0e6             [ 3] 	bne int_mult_cycle
cbda : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
cbdb :                       int_div
                             	; adjust signs
cbdb : 6491             [ 3] 	stz num_tmp				; Assume all +ve
cbdd : a586             [ 3] 	lda num_a+1				; Check A hi
cbdf : 100f             [ 3] 	bpl int_div_skip_negA
cbe1 : e691             [ 5] 	inc num_tmp				; Record sign flip
cbe3 : 38               [ 2] 	sec						; 2's complement A
cbe4 : a900             [ 2] 	lda #0					; by 0-A
cbe6 : e585             [ 3] 	sbc num_a				; A is now +ve
cbe8 : 8585             [ 3] 	sta num_a
cbea : a900             [ 2] 	lda #0
cbec : e586             [ 3] 	sbc num_a+1
cbee : 8586             [ 3] 	sta num_a+1	
cbf0 :                       int_div_skip_negA
cbf0 : a58a             [ 3] 	lda num_b+1				; Check B hi
cbf2 : 100f             [ 4] 	bpl int_div_skip_negB
cbf4 : e691             [ 5] 	inc num_tmp				; Record sign flip
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank1.s --------------------------------

cbf6 : 38               [ 2] 	sec						; 2's complement B
cbf7 : a900             [ 2] 	lda #0					; by 0-B
cbf9 : e589             [ 3] 	sbc num_b				; B is now +ve
cbfb : 8589             [ 3] 	sta num_b
cbfd : a900             [ 2] 	lda #0
cbff : e58a             [ 3] 	sbc num_b+1
cc01 : 858a             [ 3] 	sta num_b+1
cc03 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
cc03 : 648d             [ 3] 	stz num_x
cc05 : 648e             [ 3] 	stz num_x+1
                             	; 16 bit division
cc07 : a010             [ 2] 	ldy #16
cc09 :                       int_div_cycle
                             	; shift a left 1 bit
cc09 : 0685             [ 5] 	asl num_a
cc0b : 2686             [ 5] 	rol num_a+1
                             	; shift in to remainder
cc0d : 268d             [ 5] 	rol num_x
cc0f : 268e             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
cc11 : 38               [ 2] 	sec
cc12 : a58d             [ 3] 	lda num_x
cc14 : e589             [ 3] 	sbc num_b
cc16 : aa               [ 2] 	tax
cc17 : a58e             [ 3] 	lda num_x+1
cc19 : e58a             [ 3] 	sbc num_b+1
cc1b : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
cc1d : 868d             [ 3] 	stx num_x
cc1f : 858e             [ 3] 	sta num_x+1
cc21 : e685             [ 5] 	inc num_a
cc23 :                       int_div_skip
                             	; carry on for 16 bits
cc23 : 88               [ 2] 	dey
cc24 : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
cc26 : a591             [ 3] 	lda num_tmp
cc28 : 2901             [ 2] 	and #1
cc2a : f00d             [ 3] 	beq int_div_noflip
cc2c : 38               [ 2] 	sec						; 2's complement A
cc2d : a900             [ 2] 	lda #0					; by 0-A
cc2f : e585             [ 3] 	sbc num_a				; A is now +ve
cc31 : 8585             [ 3] 	sta num_a
cc33 : a900             [ 2] 	lda #0
cc35 : e586             [ 3] 	sbc num_a+1
cc37 : 8586             [ 3] 	sta num_a+1	
cc39 :                       int_div_noflip
cc39 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat\dflat.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank1.s --------------------------------

                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cc3a :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank1.s --------------------------------

cc3a :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
cc3a :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
cc4a :                       df_var_match_vnt
                             	; If reached top of VVT then not found
cc4a : a5e3             [ 3] 	lda df_tmpptra
cc4c : c5af             [ 3] 	cmp df_vvtstrt
cc4e : d006             [ 3] 	bne df_var_match_vnt_do
cc50 : a5e4             [ 3] 	lda df_tmpptra+1
cc52 : c5b0             [ 3] 	cmp df_vvtstrt+1
cc54 : f042             [ 3] 	beq df_var_find_no_vnt
cc56 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
cc56 : a4be             [ 3] 	ldy df_linoff
cc58 : a200             [ 2] 	ldx #0
cc5a :                       df_var_match_vnt_sym
cc5a : b9000a           [ 4] 	lda df_linbuff,y
cc5d : c1e5             [ 6] 	cmp (df_tmpptrb,x)
cc5f : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
cc61 : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
cc68 : a1e5             [ 6] 	lda (df_tmpptrb,x)
cc6a : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
cc6c : b9000a           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
cc6f : 2018ce           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
cc72 : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
cc74 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
cc74 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
cc76 : d025             [ 3] 	bne df_var_find_true
cc78 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
cc78 : a1e5             [ 6] 	lda (df_tmpptrb,x)
cc7a : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
cc82 : 4c78cc           [ 3] 	jmp df_var_vnt_sym_nomatch
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank1.s --------------------------------

cc85 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
cc8b : 18               [ 2] 	clc
cc8c : a5e3             [ 3] 	lda df_tmpptra
cc8e : 6908             [ 2] 	adc #8
cc90 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
cc94 : e6e4             [ 5] 	inc df_tmpptra+1
cc96 : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
cc98 :                       df_var_find_no_vnt
cc98 : a900             [ 2] 	lda #0
cc9a : aa               [ 2] 	tax
cc9b : 38               [ 2] 	sec
cc9c : 60               [ 6] 	rts
                             
cc9d :                       df_var_find_true
                             	; Get slot address into x,a
cc9d : a6e3             [ 3] 	ldx df_tmpptra
cc9f : a5e4             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
cca1 : 84be             [ 3] 	sty df_linoff
cca3 : 18               [ 2] 	clc
cca4 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
cca5 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
cca5 : 38               [ 2] 	sec
cca6 : a5ab             [ 3] 	lda df_vntstrt
cca8 : e908             [ 2] 	sbc #DFVVT_SZ
ccaa : 85ab             [ 3] 	sta df_vntstrt
ccac : a5ac             [ 3] 	lda df_vntstrt+1
ccae : e900             [ 2] 	sbc #0
ccb0 : 85ac             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
ccb2 : 38               [ 2] 	sec
ccb3 : a5ad             [ 3] 	lda df_vntend
ccb5 : e908             [ 2] 	sbc #DFVVT_SZ
ccb7 : 85ad             [ 3] 	sta df_vntend
ccb9 : a5ae             [ 3] 	lda df_vntend+1
ccbb : e900             [ 2] 	sbc #0
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank1.s --------------------------------

ccbd : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
ccc7 :                       df_var_move_byte
                             	; When pointer = vntend then done
ccc7 : a5e3             [ 3] 	lda df_tmpptra
ccc9 : c5ad             [ 3] 	cmp df_vntend
cccb : d006             [ 3] 	bne df_var_move_byte_do
cccd : a5e4             [ 3] 	lda df_tmpptra+1
cccf : c5ae             [ 3] 	cmp df_vntend+1
ccd1 : f011             [ 3] 	beq df_var_move_byte_fin
ccd3 :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
ccd3 : a008             [ 2] 	ldy #DFVVT_SZ
ccd5 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
ccd7 : a000             [ 2] 	ldy #0
ccd9 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
cce1 : 4cc7cc           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
cce4 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
cce4 : 8645             [ 3] 	stx tmp_d
cce6 : 38               [ 2] 	sec
cce7 : a5ab             [ 3] 	lda df_vntstrt
cce9 : e545             [ 3] 	sbc tmp_d
cceb : 85ab             [ 3] 	sta df_vntstrt
cced : a5ac             [ 3] 	lda df_vntstrt+1
ccef : e900             [ 2] 	sbc #0
ccf1 : 85ac             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
ccfb : e6b3             [ 5] 	inc df_varcnt
ccfd : 18               [ 2] 	clc
ccfe : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Iterate through a valid variable name
                             ;* starts with alpha, then any number of
                             ;* alphanums.
                             ;****************************************
ccff :                       df_var_countlen
                             	; count alpha nums
ccff : c8               [ 2] 	iny
cd00 : e8               [ 2] 	inx
cd01 : b9000a           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
cd04 : e000             [ 2] 	cpx #0
cd06 : d006             [ 3] 	bne df_var_countlen_alphanum
cd08 : 200bce           [ 6] 	jsr df_tk_isalpha
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank1.s --------------------------------

cd0b : 4c11cd           [ 3] 	jmp df_var_countlen_loop
cd0e :                       df_var_countlen_alphanum
cd0e : 2018ce           [ 6] 	jsr df_tk_isalphanum
cd11 :                       df_var_countlen_loop
cd11 : b0ec             [ 4] 	bcs df_var_countlen
cd13 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
cd14 :                       df_var_analyse
                             	; start at the current buffer position
cd14 : a4be             [ 3] 	ldy df_linoff
                             	
                             	; actual number of alpha nums = -1 to start
cd16 : a2ff             [ 2] 	ldx #-1
                             
                             	; Default type is INT
cd18 : a901             [ 2] 	lda #DFVVT_INT
cd1a : 85e3             [ 3] 	sta df_tmpptra
                             	
                             	; check for PROC prefix
cd1c : b9000a           [ 4] 	lda df_linbuff,y
cd1f : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
cd21 : d011             [ 3] 	bne df_var_not_proc
                             	; analyse for proc variable names
                             	; else set type to PROC
cd23 : a940             [ 2] 	lda #DFVVT_PROC
cd25 : 85e3             [ 3] 	sta df_tmpptra
cd27 : 20ffcc           [ 6] 	jsr df_var_countlen
                             	; Length must be >=1
cd2a : e001             [ 2] 	cpx #1
cd2c : 9004             [ 3] 	bcc df_var_analyse_fatal_err
                             	; Next char has to be '('
cd2e : c928             [ 2] 	cmp #'('
cd30 : f022             [ 3] 	beq df_var_finalise_len
cd32 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
                             	; Analyse for non-proc variable names
cd34 :                       df_var_not_proc
                             	; go back on pos on index as loop always does in
cd34 : 88               [ 2] 	dey
cd35 : 20ffcc           [ 6] 	jsr df_var_countlen
cd38 : e000             [ 2] 	cpx #0
cd3a : d002             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
cd3c : 38               [ 2] 	sec
cd3d : 60               [ 6] 	rts
                             	; check for post qualifiers e.g. $
cd3e :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank1.s --------------------------------

                             ; Set to INT type although it is the default alre
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
cd3e :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
cd3e : c924             [ 2] 	cmp #'$'
cd40 : d005             [ 3] 	bne df_var_analyse_chk_arry
                             	; Set to STRING type
cd42 : a904             [ 2] 	lda #DFVVT_STR
cd44 : 85e3             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
cd46 : c8               [ 2] 	iny
cd47 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
cd47 : b9000a           [ 4] 	lda df_linbuff,y
cd4a : c95b             [ 2] 	cmp #'['
cd4c : d006             [ 3] 	bne df_var_finalise_len
cd4e : a5e3             [ 3] 	lda df_tmpptra
cd50 : 0980             [ 2] 	ora #DFVVT_PTR
cd52 : 85e3             [ 3] 	sta df_tmpptra
cd54 :                       df_var_finalise_len
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
cd54 : 98               [ 2] 	tya
cd55 : 38               [ 2] 	sec
cd56 : e5be             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
cd58 : aa               [ 2] 	tax
                             	; put type in A
cd59 : a5e3             [ 3] 	lda df_tmpptra
cd5b : 18               [ 2] 	clc
cd5c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
cd5d :                       df_var_findcreate
                             	; save mask
cd5d : 48               [ 3] 	pha
cd5e : 203acc           [ 6] 	jsr df_var_find
cd61 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
cd63 : 68               [ 4] 	pla
cd64 : 48               [ 3] 	pha
                             	; don't check mask if zero
cd65 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
cd67 : 68               [ 4] 	pla
cd68 : a000             [ 2] 	ldy #DFVVT_TYPE
cd6a : 31e3             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
cd6c : f019             [ 3] 	beq df_var_findcreate_err
cd6e : 48               [ 3] 	pha		; Dummy push to match the pla
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank1.s --------------------------------

cd6f :                       df_var_findcreate_found
                             	; discard mask
cd6f : 68               [ 4] 	pla	
                             	; put slot address in x,a
cd70 : a6e3             [ 3] 	ldx df_tmpptra
cd72 : a5e4             [ 3] 	lda df_tmpptra+1
cd74 : 18               [ 2] 	clc
cd75 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
cd76 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
cd76 : 2014cd           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
cd79 : 85e3             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
cd7b : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
cd7d : 68               [ 4] 	pla
cd7e : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
cd80 : 25e3             [ 3] 	and df_tmpptra
                             	; mask match is ok
cd82 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
cd84 : f001             [ 3] 	beq df_var_findcreate_err
cd86 :                       df_var_findcreate_errp
cd86 : 68               [ 4] 	pla
cd87 :                       df_var_findcreate_err
cd87 : 38               [ 2] 	sec
cd88 : 60               [ 6] 	rts
                             
cd89 :                       df_var_analyse_ok
                             	; extra space for zero terminator
cd89 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
cd8a : a5e3             [ 3] 	lda df_tmpptra
cd8c : 48               [ 3] 	pha
cd8d : 8a               [ 2] 	txa
cd8e : 48               [ 3] 	pha
                             	
cd8f : 20a5cc           [ 6] 	jsr df_var_insert_space
cd92 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
cd96 :                       df_var_initialise_var
cd96 : 68               [ 4] 	pla
cd97 : 85e7             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
cd99 : 68               [ 4] 	pla							; type
cd9a : a000             [ 2] 	ldy #DFVVT_TYPE
cd9c : 91b1             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
cd9e : a900             [ 2] 	lda #0						; zero the rest
cda0 : a007             [ 2] 	ldy #7
cda2 :                       df_var_zero_vnt
cda2 : 91b1             [ 5] 	sta (df_vvtend),y
cda4 : 88               [ 2] 	dey
cda5 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank1.s --------------------------------

                             
cda7 : c6e7             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
cda9 : a6be             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
cdab :                       df_var_findcreate_copy
cdab : bd000a           [ 4] 	lda df_linbuff,x
cdae : 91ab             [ 5] 	sta (df_vntstrt),y
cdb0 : e8               [ 2] 	inx
cdb1 : c8               [ 2] 	iny
cdb2 : c6e7             [ 5] 	dec df_tmpptrc
cdb4 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
cdb6 : a900             [ 2] 	lda #0
cdb8 : 91ab             [ 5] 	sta (df_vntstrt),y
                             
cdba : 86be             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
cdbc : a6b1             [ 3] 	ldx df_vvtend
cdbe : a5b2             [ 3] 	lda df_vvtend+1
                             	
cdc0 : 18               [ 2] 	clc
cdc1 : 60               [ 6] 	rts
                             	
cdc2 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cdc2 :                       mod_sz_tokenise_s
                             
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
cdc2 :                       df_tk_peek_buf
cdc2 : a4be             [ 3] 	ldy df_linoff
cdc4 : b9000a           [ 4] 	lda df_linbuff,y
cdc7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
cdc8 :                       df_tk_get_buf
cdc8 : a4be             [ 3] 	ldy df_linoff
cdca : b9000a           [ 4] 	lda df_linbuff,y
cdcd : f003             [ 3] 	beq df_tk_get_buf_null
cdcf : c8               [ 2] 	iny
cdd0 : 84be             [ 3] 	sty df_linoff
cdd2 :                       df_tk_get_buf_null
cdd2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
cdd3 :                       df_tk_put_tok
cdd3 : a4bf             [ 3] 	ldy df_tokoff
cdd5 : 99800a           [ 5] 	sta df_tokbuff,y
cdd8 : c8               [ 2] 	iny
cdd9 : 3004             [ 3] 	bmi df_tk_put_overflow
cddb : 84bf             [ 3] 	sty df_tokoff
cddd : 18               [ 2] 	clc
cdde : 60               [ 6] 	rts
cddf :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cde1 :                       df_tk_isdigit
cde1 : c93a             [ 2] 	cmp #'9'+1
cde3 : b005             [ 3] 	bcs df_tk_isdigit_false
cde5 : c930             [ 2] 	cmp #'0'
cde7 : 9001             [ 3] 	bcc df_tk_isdigit_false
cde9 : 60               [ 6] 	rts						; C must be 1
cdea :                       df_tk_isdigit_false
cdea : 18               [ 2] 	clc
cdeb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdec :                       df_tk_isbin
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank1.s --------------------------------

cdec : c930             [ 2] 	cmp #'0'
cdee : f005             [ 3] 	beq df_tk_isbin_true	; C=1
cdf0 : c931             [ 2] 	cmp #'1'
cdf2 : f001             [ 3] 	beq df_tk_isbin_true	; C=1
cdf4 : 18               [ 2] 	clc
cdf5 :                       df_tk_isbin_true
cdf5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdf6 :                       df_tk_ishex
cdf6 : 48               [ 3] 	pha
cdf7 : 20e1cd           [ 6] 	jsr df_tk_isdigit
cdfa : b00a             [ 4] 	bcs df_tk_ishex_truep
cdfc : 0920             [ 2] 	ora #0x20
cdfe : c967             [ 2] 	cmp #'f'+1
ce00 : b006             [ 3] 	bcs df_tk_ishex_false
ce02 : c961             [ 2] 	cmp #'a'
ce04 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
ce06 :                       df_tk_ishex_truep
ce06 : 68               [ 4] 	pla
ce07 : 60               [ 6] 	rts
ce08 :                       df_tk_ishex_false
ce08 :                       df_tk_isalpha_false
ce08 : 18               [ 2] 	clc
ce09 : 68               [ 4] 	pla
ce0a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce0b :                       df_tk_isalpha
ce0b : 48               [ 3] 	pha
ce0c : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
ce0e : c97b             [ 2] 	cmp #'z'+1
ce10 : b0f6             [ 3] 	bcs df_tk_isalpha_false
ce12 : c961             [ 2] 	cmp #'a'
ce14 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
ce16 : 68               [ 4] 	pla
ce17 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce18 :                       df_tk_isalphanum
ce18 : 200bce           [ 6] 	jsr df_tk_isalpha
ce1b : 90c4             [ 4] 	bcc df_tk_isdigit
ce1d :                       df_tk_rts1				; branch to this RTS where possible
ce1d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank1.s --------------------------------

                             ;* Return: CC = False, CS = True
                             ;****************************************
ce1e :                       df_tk_isproc
ce1e : c95f             [ 2] 	cmp #'_'
ce20 : f001             [ 3] 	beq df_tk_isproc_true	; C=1
ce22 : 18               [ 2] 	clc
ce23 :                       df_tk_isproc_true
ce23 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ce24 :                       df_tk_skip_ws
ce24 :                       df_tk_ws_loop1
ce24 : 20c2cd           [ 6] 	jsr df_tk_peek_buf
ce27 : 203fce           [ 6] 	jsr df_tk_isws
ce2a : 90f1             [ 3] 	bcc df_tk_rts1
ce2c : e6be             [ 5] 	inc df_linoff
ce2e : 20d3cd           [ 6] 	jsr df_tk_put_tok
ce31 : 90f1             [ 3] 	bcc df_tk_skip_ws		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_strip_ws
                             ;* Strip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ce33 :                       df_tk_strip_ws
ce33 : 20c2cd           [ 6] 	jsr df_tk_peek_buf
ce36 : 203fce           [ 6] 	jsr df_tk_isws
ce39 : 90e2             [ 3] 	bcc df_tk_rts1
ce3b : e6be             [ 5] 	inc df_linoff
ce3d : d0f4             [ 3] 	bne df_tk_strip_ws		; Always as linoff is not ze
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce3f :                       df_tk_isws
ce3f : c920             [ 2] 	cmp #' '
ce41 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
ce43 : 60               [ 6] 	rts
ce44 :                       df_tk_isws_false
ce44 :                       df_tk_expectok
ce44 : 18               [ 2] 	clc
ce45 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
ce46 :                       df_tk_expect
ce46 : 48               [ 3] 	pha
                             	; skip ws
ce47 : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
ce4a : 68               [ 4] 	pla
ce4b : a4be             [ 3] 	ldy df_linoff
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank1.s --------------------------------

ce4d : d9000a           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
ce50 : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
ce52 :                       df_tk_num_err
ce52 :                       df_tk_char_err
ce52 : 38               [ 2] 	sec
ce53 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
ce54 :                       df_tk_expect_tok
ce54 : 2046ce           [ 6] 	jsr df_tk_expect
ce57 : b0c4             [ 3] 	bcs df_tk_rts1
ce59 : 20c8cd           [ 6] 	jsr df_tk_get_buf
ce5c : 4cd3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
ce5f :                       df_tk_expect_tok_err
ce5f : 2054ce           [ 6] 	jsr df_tk_expect_tok
ce62 : 90b9             [ 3] 	bcc df_tk_rts1
ce64 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
ce66 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
ce66 : 18               [ 2] 	clc
ce67 : a900             [ 2] 	lda #lo(df_linbuff)
ce69 : 65be             [ 3] 	adc df_linoff
ce6b : aa               [ 2] 	tax
ce6c : a90a             [ 2] 	lda #hi(df_linbuff)
ce6e : 6900             [ 2] 	adc #0
ce70 : a000             [ 2] 	ldy #0				; any numeric format
ce72 : 2094c8           [ 6] 	jsr con_n_to_a
ce75 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
ce77 : a8               [ 2] 	tay
ce78 : 18               [ 2] 	clc
ce79 : 8a               [ 2] 	txa
ce7a : 65be             [ 3] 	adc df_linoff
ce7c : 85be             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
ce7e : 98               [ 2] 	tya
ce7f : c901             [ 2] 	cmp #NUM_DEC
ce81 : d004             [ 3] 	bne df_tk_num_hexbin
ce83 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
ce85 : d016             [ 3] 	bne df_tk_num_put
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank1.s --------------------------------

ce87 :                       df_tk_num_hexbin
ce87 : c902             [ 2] 	cmp #NUM_HEX
ce89 : d00a             [ 3] 	bne df_tk_num_bin
ce8b : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
ce8d : e005             [ 2] 	cpx #5				; If >4 chars then INT
ce8f : 900c             [ 3] 	bcc df_tk_num_put
ce91 : a90a             [ 2] 	lda #DFTK_INTHEX
ce93 : d008             [ 3] 	bne df_tk_num_put
ce95 :                       df_tk_num_bin
ce95 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
ce97 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
ce99 : 9002             [ 3] 	bcc df_tk_num_put
ce9b : a90b             [ 2] 	lda #DFTK_INTBIN
ce9d :                       df_tk_num_put
ce9d : 20d3cd           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
cea0 : a585             [ 3] 	lda num_a
cea2 : 20d3cd           [ 6] 	jsr df_tk_put_tok
cea5 : a586             [ 3] 	lda num_a+1
cea7 : 4cd3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
ceaa :                       df_tk_char
                             	; skip the first quote
ceaa : 20c8cd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cead : a900             [ 2] 	lda #DFTK_CHR
ceaf : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
ceb2 : 20c8cd           [ 6] 	jsr df_tk_get_buf
ceb5 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
ceb8 : a900             [ 2] 	lda #0
ceba : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
cebd : 20c8cd           [ 6] 	jsr df_tk_get_buf
cec0 : c927             [ 2] 	cmp #0x27
cec2 : d08e             [ 3] 	bne df_tk_char_err
cec4 : 18               [ 2] 	clc
cec5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
cec6 :                       df_tk_str
                             	; skip the first quote
cec6 : 20c8cd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cec9 : a910             [ 2] 	lda #DFTK_STRLIT
cecb : 20d3cd           [ 6] 	jsr df_tk_put_tok
cece :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
cece : 20c8cd           [ 6] 	jsr df_tk_get_buf
ced1 : c900             [ 2] 	cmp #0
ced3 : f011             [ 3] 	beq df_tk_str_err
ced5 : c922             [ 2] 	cmp #0x22
ced7 : f006             [ 3] 	beq df_tk_str_don
ced9 : 20d3cd           [ 6] 	jsr df_tk_put_tok
cedc : 4ccece           [ 3] 	jmp df_tk_str_ch
cedf :                       df_tk_str_don
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank1.s --------------------------------

                             	; zero terminated strings
cedf : a900             [ 2] 	lda #0
cee1 : 4cd3cd           [ 3] 	jmp df_tk_put_tok
cee4 :                       df_tk_var_noarry
cee4 : 18               [ 2] 	clc
cee5 : 60               [ 6] 	rts
cee6 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
cee8 :                       df_tk_const
cee8 : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
ceeb : 20c2cd           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
ceee : c92d             [ 2] 	cmp #'-'
cef0 : f005             [ 3] 	beq df_tk_const_try_num
cef2 : 20e1cd           [ 6] 	jsr df_tk_isdigit
cef5 : 9003             [ 3] 	bcc df_tk_const_try_str
cef7 :                       df_tk_const_try_num
cef7 : 4c66ce           [ 3] 	jmp df_tk_num
cefa :                       df_tk_const_try_str
                             	; check for double quote
cefa : c922             [ 2] 	cmp #0x22
cefc : d003             [ 4] 	bne df_tk_const_try_char
cefe : 4cc6ce           [ 3] 	jmp df_tk_str
cf01 :                       df_tk_const_try_char
                             	; check for single apostrophe
cf01 : c927             [ 2] 	cmp #0x27
cf03 : d003             [ 3] 	bne df_tk_const_err
cf05 : 4caace           [ 3] 	jmp df_tk_char
cf08 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
cf0a :                       df_tk_var
                             	; Find or create variable, address in X,A
cf0a : 205dcd           [ 6] 	jsr df_var_findcreate
cf0d : 9001             [ 3] 	bcc df_tk_var_cont
cf0f : 60               [ 6] 	rts
cf10 :                       df_tk_var_cont
                             	; Save X,A for later
cf10 : 48               [ 3] 	pha
cf11 : 8a               [ 2] 	txa
cf12 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf13 : a911             [ 2] 	lda #DFTK_VAR
cf15 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf18 : 68               [ 4] 	pla
cf19 : 20d3cd           [ 6] 	jsr df_tk_put_tok
cf1c : 68               [ 4] 	pla
cf1d : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
cf20 :                       df_tk_var_ck
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank1.s --------------------------------

                             	; check if array procesing needed
cf20 : a95b             [ 2] 	lda #'['
cf22 : 2054ce           [ 6] 	jsr df_tk_expect_tok
cf25 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
cf27 : 4cd1cf           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
cf2a :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
cf2a : 20c2cd           [ 6] 	jsr df_tk_peek_buf
cf2d : c926             [ 2] 	cmp #DFTK_VARPARM
cf2f : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
cf31 : 20c8cd           [ 6] 	jsr df_tk_get_buf
cf34 : 20d3cd           [ 6] 	jsr df_tk_put_tok
cf37 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
cf37 : a900             [ 2] 	lda #0
cf39 : 4c0acf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
cf3c :                       df_tk_localvar
                             	; Find or create variable, index in A
cf3c : 205dcd           [ 6] 	jsr df_var_findcreate
cf3f : 9001             [ 3] 	bcc df_tk_localvar_cont
cf41 : 60               [ 6] 	rts
cf42 :                       df_tk_localvar_cont
                             	; Save variable address for later
cf42 : 48               [ 3] 	pha
cf43 : 8a               [ 2] 	txa
cf44 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf45 : a911             [ 2] 	lda #DFTK_VAR
cf47 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
cf4a : 68               [ 4] 	pla
cf4b : 20d3cd           [ 6] 	jsr df_tk_put_tok
cf4e : 68               [ 4] 	pla
cf4f : 4cd3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
cf52 :                       df_tk_arrvar
                             	; Like a local var at first
cf52 : 203ccf           [ 6] 	jsr df_tk_localvar
                             	; but must be array
cf55 : a95b             [ 2] 	lda #'['
cf57 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
cf5a : 4cd1cf           [ 3] 	jmp df_tk_narry
                             
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
cf5d :                       df_tk_proc
cf5d : 85cd             [ 3] 	sta df_procmode
cf5f : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
cf62 : a940             [ 2] 	lda #DFVVT_PROC
cf64 : 205dcd           [ 6] 	jsr df_var_findcreate
cf67 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
cf69 : 86d0             [ 3] 	stx df_procptr
cf6b : 85d1             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
cf6d : a912             [ 2] 	lda #DFTK_PROC
cf6f : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf72 : a5d0             [ 3] 	lda df_procptr
cf74 : 20d3cd           [ 6] 	jsr df_tk_put_tok
cf77 : a5d1             [ 3] 	lda df_procptr+1
cf79 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
cf7c : a900             [ 2] 	lda #0
cf7e : 85ce             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
cf80 : a928             [ 2] 	lda #'('
cf82 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
cf85 : 20c2cd           [ 6] 	jsr df_tk_peek_buf
cf88 : c929             [ 2] 	cmp #')'
cf8a : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
cf8c :                       df_tk_proc_parms
cf8c : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
cf8f : a5cd             [ 3] 	lda df_procmode
cf91 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
cf93 : 202acf           [ 6] 	jsr df_tk_parm
cf96 : 4ca2cf           [ 3] 	jmp df_tk_proc_skip_call
cf99 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
cf99 : a5ce             [ 3] 	lda df_procargs	; procargs could be impacted ins
cf9b : 48               [ 3] 	pha
cf9c : 2051d0           [ 6] 	jsr df_tk_expression
cf9f : 68               [ 4] 	pla
cfa0 : 85ce             [ 3] 	sta df_procargs
cfa2 :                       df_tk_proc_skip_call
cfa2 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
cfa4 : e6ce             [ 5] 	inc df_procargs
                             	; what is next non ws char
cfa6 : 2024ce           [ 6] 	jsr df_tk_skip_ws
cfa9 : c92c             [ 2] 	cmp #','
cfab : f006             [ 3] 	beq df_tk_proc_comma
cfad : c929             [ 2] 	cmp #')'
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank1.s --------------------------------

cfaf : d01d             [ 3] 	bne df_tk_proc_errp
cfb1 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
cfb3 :                       df_tk_proc_comma
cfb3 : 20c8cd           [ 6] 	jsr df_tk_get_buf
cfb6 : 20d3cd           [ 6] 	jsr df_tk_put_tok
cfb9 : 4c8ccf           [ 3] 	jmp df_tk_proc_parms
cfbc :                       df_tk_proc_noparm
                             	; consume the close bracket
cfbc : 20c8cd           [ 6] 	jsr df_tk_get_buf
cfbf : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
cfc2 : a6cd             [ 3] 	ldx df_procmode
cfc4 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
cfc6 : a004             [ 2] 	ldy #DFVVT_DIM2
cfc8 : a5ce             [ 3] 	lda df_procargs
cfca : 91d0             [ 5] 	sta (df_procptr),y
cfcc :                       df_tk_proc_skip_args
cfcc : 18               [ 2] 	clc
cfcd : 60               [ 6] 	rts
cfce :                       df_tk_proc_errp
cfce : 68               [ 4] 	pla
cfcf :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
cfd1 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
cfd1 : 2051d0           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
cfd4 : a92c             [ 2] 	lda #','
cfd6 : 2054ce           [ 6] 	jsr df_tk_expect_tok
cfd9 : b003             [ 3] 	bcs df_tk_narry_end
cfdb : 2051d0           [ 6] 	jsr df_tk_expression
cfde :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
cfde : a95d             [ 2] 	lda #']'
cfe0 : 4c5fce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
cfe3 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
cfe3 : 2051d0           [ 6] 	jsr df_tk_expression
cfe6 : a929             [ 2] 	lda #')'
cfe8 : 4c5fce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
cfeb :                       df_tk_nterm_proc
                             	; call mode
cfeb : a901             [ 2] 	lda #1
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank1.s --------------------------------

cfed : 4c5dcf           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
cff0 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
cff0 : 2024ce           [ 6] 	jsr df_tk_skip_ws
cff3 : c900             [ 2] 	cmp #0
cff5 : f004             [ 3] 	beq df_tk_nterm_done
cff7 : c93a             [ 2] 	cmp #':'
cff9 : d002             [ 3] 	bne df_tk_nterm_cont
cffb :                       df_tk_nterm_done
cffb :                       df_tk_nop_false
cffb : 38               [ 2] 	sec
cffc : 60               [ 6] 	rts
cffd :                       df_tk_nterm_cont
                             	; if open bracket then process it
cffd : c928             [ 2] 	cmp #'('
cfff : d009             [ 4] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d001 : 20c8cd           [ 6] 	jsr df_tk_get_buf
d004 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d007 : 4ce3cf           [ 3] 	jmp df_tk_nbrkt
d00a :                       df_tk_nterm_tryfn
d00a : 48               [ 3] 	pha
                             	; try decoding a built-in function
d00b : a902             [ 2] 	lda #DFTK_FN
d00d : 2044d1           [ 6] 	jsr df_tk_matchtok
d010 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d012 : 68               [ 4] 	pla
d013 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d014 : 8a               [ 2] 	txa
d015 : 0980             [ 2] 	ora #0x80
d017 : 20d3cd           [ 6] 	jsr df_tk_put_tok
d01a : 2016d1           [ 6] 	jsr df_tk_exec_parser
d01d : b01b             [ 3] 	bcs df_tk_nterm_err
d01f : 60               [ 6] 	rts
d020 :                       df_tk_nterm_try_proc
d020 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d021 : 201ece           [ 6] 	jsr df_tk_isproc
d024 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d026 : 20ebcf           [ 6] 	jsr df_tk_nterm_proc
d029 : b00f             [ 3] 	bcs df_tk_nterm_err
d02b : 60               [ 6] 	rts
d02c :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d02c : a900             [ 2] 	lda #0
d02e : 200acf           [ 6] 	jsr df_tk_var
d031 : b001             [ 3] 	bcs df_tk_nterm_try_const
d033 : 60               [ 6] 	rts
d034 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d034 : 20e8ce           [ 6] 	jsr df_tk_const
d037 : b001             [ 3] 	bcs df_tk_nterm_err
d039 : 60               [ 6] 	rts
d03a :                       df_tk_nterm_err
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank1.s --------------------------------

                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d03c :                       df_tk_nop
d03c : 2024ce           [ 6] 	jsr df_tk_skip_ws
d03f : c900             [ 2] 	cmp #0
d041 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d043 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d045 : 2044d1           [ 6] 	jsr df_tk_matchtok
d048 : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d04a : 0980             [ 2] 	ora #DFTK_TOKEN
d04c : 20d3cd           [ 6] 	jsr df_tk_put_tok
d04f : 18               [ 2] 	clc
d050 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d051 :                       df_tk_expression
                             	; Tokenise a numeric term
d051 : 20f0cf           [ 6] 	jsr df_tk_nterm
d054 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d056 : 203cd0           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d059 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d05b :                       df_tk_not_eos
d05b : 18               [ 2] 	clc
d05c :                       df_tk_expre_err
d05c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d05d :                       df_tk_tok_expression
d05d : 205fce           [ 6] 	jsr df_tk_expect_tok_err
d060 : 4c51d0           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d063 :                       df_tk_isEOS
d063 : a93a             [ 2] 	lda #':'
d065 : 2054ce           [ 6] 	jsr df_tk_expect_tok
d068 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d06a : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d06c : a4c1             [ 3] 	ldy df_nxtstidx
d06e : 99800a           [ 5] 	sta df_tokbuff,y
d071 : 38               [ 2] 	sec
d072 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d073 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d073 : a981             [ 2] 	lda #0x81
d075 : 20d3cd           [ 6] 	jsr df_tk_put_tok
d078 : a901             [ 2] 	lda #1
d07a : 4c5dcf           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d07d :                       df_tk_parse_command
                             	; only looking for keywords
d07d : a901             [ 2] 	lda #DFTK_KW
d07f : 2044d1           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d082 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d084 : 0980             [ 2] 	ora #0x80
d086 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d089 : a5c5             [ 3] 	lda df_symoff
d08b : 2016d1           [ 6] 	jsr df_tk_exec_parser
d08e : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d090 : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d093 :                       df_tk_parse_command_done
d093 : 18               [ 2] 	clc
d094 :                       df_tk_parse_command_err
d094 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d095 :                       df_lexer_line
d095 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d097 : 85be             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d099 : 85bf             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d09b : a980             [ 2] 	lda #lo(df_tokbuff)
d09d : 85c8             [ 3] 	sta df_currlin
d09f : a90a             [ 2] 	lda #hi(df_tokbuff)
d0a1 : 85c9             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d0a3 : a900             [ 2] 	lda #0
d0a5 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank1.s --------------------------------

                             	; else assume a statement
d0a8 : 20c2cd           [ 6] 	jsr df_tk_peek_buf
d0ab : 20e1cd           [ 6] 	jsr df_tk_isdigit
d0ae : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d0b0 : 2025d1           [ 6] 	jsr df_tk_linenum
d0b3 : 4cbed0           [ 3] 	jmp df_tk_body
d0b6 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d0b6 : a900             [ 2] 	lda #0
d0b8 : 20d3cd           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d0bb : 20d3cd           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d0be :                       df_tk_body
                             	; Offset for next statement
d0be : a5bf             [ 3] 	lda df_tokoff
d0c0 : 85c1             [ 3] 	sta df_nxtstidx
d0c2 : a900             [ 2] 	lda #0
d0c4 : 20d3cd           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d0c7 : 20c2cd           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d0ca : 203fce           [ 6] 	jsr df_tk_isws					; and first character
d0cd : 9002             [ 3] 	bcc df_tk_skip_1_spc
d0cf : e6be             [ 5] 	inc df_linoff					; Don't tokenise this single s
d0d1 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d0d1 : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d0d4 : c900             [ 2] 	cmp #0
d0d6 : f03a             [ 4] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d0d8 : 201ece           [ 6] 	jsr df_tk_isproc
d0db : 9006             [ 3] 	bcc df_tk_try_command
d0dd : 2073d0           [ 6] 	jsr df_tk_parse_user_proc
d0e0 : 4cf4d0           [ 3] 	jmp df_tk_done
d0e3 :                       df_tk_try_command
                             	; try  a keyword
d0e3 : 207dd0           [ 6] 	jsr df_tk_parse_command
d0e6 : b002             [ 3] 	bcs	df_tk_try_asm
d0e8 : 900a             [ 3] 	bcc df_tk_done
d0ea :                       df_tk_try_asm
                             	; try an asm keyword
d0ea : 20b6f3           [ 6] 	jsr df_tk_asm_parse_command
d0ed : 9005             [ 3] 	bcc df_tk_done
d0ef :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d0ef : 2068d5           [ 6] 	jsr df_tk_assign
d0f2 : b020             [ 4] 	bcs	df_tk_parseerror
d0f4 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d0f4 : 2063d0           [ 6] 	jsr df_tk_isEOS
d0f7 : b0c5             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d0f9 : 20c2cd           [ 6] 	jsr df_tk_peek_buf
d0fc : c900             [ 2] 	cmp #0
d0fe : d014             [ 4] 	bne df_tk_parseerror
                             	; this is the position of the next line
d100 : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank1.s --------------------------------

d102 : a4c1             [ 3] 	ldy df_nxtstidx
d104 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d107 : a4bf             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d109 : a900             [ 2] 	lda #0
d10b : 99800a           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d10e : 98               [ 2] 	tya
d10f : 8d800a           [ 4] 	sta df_tokbuff
d112 :                       df_tk_line_empty
d112 : 18               [ 2] 	clc
d113 : 60               [ 6] 	rts
d114 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d116 :                       df_tk_exec_parser
d116 : 0a               [ 2] 	asl a
d117 : aa               [ 2] 	tax
d118 : bdd6d3           [ 4] 	lda df_tk_tokenjmp,x
d11b : 85e3             [ 3] 	sta df_tmpptra
d11d : bdd7d3           [ 4] 	lda df_tk_tokenjmp+1,x
d120 : 85e4             [ 3] 	sta df_tmpptra+1
d122 : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d125 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d125 : 18               [ 2] 	clc
d126 : a900             [ 2] 	lda #lo(df_linbuff)
d128 : 65be             [ 3] 	adc df_linoff
d12a : aa               [ 2] 	tax
d12b : a90a             [ 2] 	lda #hi(df_linbuff)
d12d : 6900             [ 2] 	adc #0
d12f : a001             [ 2] 	ldy #1			; Decimal format only
d131 : 2094c8           [ 6] 	jsr con_n_to_a
d134 : 18               [ 2] 	clc
d135 : 8a               [ 2] 	txa
d136 : 65be             [ 3] 	adc df_linoff
d138 : 85be             [ 3] 	sta df_linoff
                             	; Now save line number
d13a : a585             [ 3] 	lda num_a
d13c : 20d3cd           [ 6] 	jsr df_tk_put_tok
d13f : a586             [ 3] 	lda num_a+1
d141 : 4cd3cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank1.s --------------------------------

                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d144 :                       df_tk_matchtok
                             	; save the mask to check types against
d144 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d145 : a9c6             [ 2] 	lda #lo(df_tokensyms)
d147 : 85c3             [ 3] 	sta df_symtab
d149 : a9d1             [ 2] 	lda #hi(df_tokensyms)
d14b : 85c4             [ 3] 	sta df_symtab+1
d14d : a900             [ 2] 	lda #0
d14f : 85c5             [ 3] 	sta df_symoff
d151 :                       df_tk_checknexttok
                             	; check this token type first
d151 : 68               [ 4] 	pla
d152 : 48               [ 3] 	pha
d153 : a6c5             [ 3] 	ldx df_symoff
d155 : 3dc6d4           [ 4] 	and df_tk_tokentype,x
d158 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
d15a : bdc6d4           [ 4] 	lda df_tk_tokentype,x
d15d : 2908             [ 2] 	and #DFTK_OP
d15f : f009             [ 3] 	beq df_tk_matchtok_skip_op
d161 : 68               [ 4] 	pla
d162 : 48               [ 3] 	pha
d163 : 2908             [ 2] 	and #DFTK_OP
d165 : 3dc6d4           [ 4] 	and df_tk_tokentype,x
d168 : f022             [ 3] 	beq df_tk_symnomatch
d16a :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
d16a : a4be             [ 3] 	ldy df_linoff
d16c : a200             [ 2] 	ldx #0
d16e :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
d16e : a1c3             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
d170 : 48               [ 3] 	pha
d171 : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
d173 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
d176 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
d178 : 68               [ 4] 	pla
d179 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
d181 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank1.s --------------------------------

                             	; If buffer is '.' then let this be a match
d182 : b9000a           [ 4] 	lda df_linbuff,y
d185 : c92e             [ 2] 	cmp #'.'
d187 : f025             [ 3] 	beq df_tk_symfound
d189 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
d18b :                       df_tk_symnomatchp
d18b : 68               [ 4] 	pla
d18c :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
d18c : e6c5             [ 5] 	inc df_symoff
d18e :                       df_tk_symnextentry
d18e : a200             [ 2] 	ldx #0
d190 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
d192 : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
d19a : 4c8ed1           [ 3] 	jmp df_tk_symnextentry
d19d :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
d1a3 : a1c3             [ 6] 	lda (df_symtab,x)
d1a5 : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
d1a7 : 68               [ 4] 	pla
                             	; Zero symbol counter
d1a8 : a900             [ 2] 	lda #0
d1aa : 85c5             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
d1ac : 38               [ 2] 	sec
d1ad : 60               [ 6] 	rts
d1ae :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
d1ae : c8               [ 2] 	iny
                             	; First mask off MSB
d1af : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
d1b1 : 200bce           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
d1b4 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
d1b6 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
d1b9 : 2018ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
d1bc : b0ce             [ 3] 	bcs df_tk_symnomatch
d1be :                       df_tk_symfound_final
                             	; pop mask off stack
d1be : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
d1bf : 84be             [ 3] 	sty df_linoff
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank1.s --------------------------------

d1c1 : a5c5             [ 3] 	lda df_symoff
d1c3 : aa               [ 2] 	tax
d1c4 : 18               [ 2] 	clc
d1c5 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
d1c6 :                       df_tokensyms
d1c6 : 80                    	db	0x80						; Implicit numeric assign
d1c7 : 80                    	db	0x80						; Implicit call procedure
d1c8 : bb                    	db	";"+0x80					; Comment
d1c9 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
d1d0 : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
d1d7 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
d1dc : 6465e6                	db	"de",'f'+0x80				; def_subname
d1df : 656e646465e6          	db	"endde",'f'+0x80			; enddef
d1e5 : 7265747572ee          	db	"retur",'n'+0x80			; return
d1eb : 61626f72f4            	db	"abor",'t'+0x80				; abort
d1f0 : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
d1f5 : 6469ed                	db	"di",'m'+0x80				; dim varlist
d1f8 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
d1fe : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
d203 : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
d206 : 6e6578f4              	db	"nex",'t'+0x80				; next
d20a : 7768696ce5            	db	"whil",'e'+0x80				; while condition
d20f : 77656ee4              	db	"wen",'d'+0x80				; wend
d213 : 69e6                  	db	"i",'f'+0x80				; if condition
d215 : 656c73e5              	db	"els",'e'+0x80				; else
d219 : 656e6469e6            	db	"endi",'f'+0x80				; endif
d21e : 656c69e6              	db	"eli",'f'+0x80				; elif condition
d222 : 646174e1              	db	"dat",'a'+0x80				; data
d226 : ff                    	db	0xff						; assembler command (non standard p
d227 : 7275ee                	db	"ru",'n'+0x80				; run
d22a : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
d22e : 696e7075f4            	db	"inpu",'t'+0x80				; input var
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank1.s --------------------------------

d233 : 6d6f64e5              	db	"mod",'e'+0x80				; mode n
d237 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
d23b : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
d241 : 636cf3                	db	"cl",'s'+0x80				; cls
d244 : 76706f6be5            	db	"vpok",'e'+0x80				; vpoke addr,val
d249 : 7365747664f0          	db	"setvd",'p'+0x80			; setvdp reg,val
d24f : 636f6c6f75f2          	db	"colou",'r'+0x80			; colour reg,val
d255 : 73707269746570..      	db	"spritepa",'t'+0x80			; spritepat patnum,arra
d25e : 73707269746570..      	db	"spritepo",'s'+0x80			; spritepos sprnum,x,y
d267 : 73707269746563..      	db	"spriteco",'l'+0x80			; spritecol sprnum,col
d270 : 7370726974656e..      	db	"spritenm",'e'+0x80			; spritenme sprnum,patn
d279 : 7370726974e5          	db	"sprit",'e'+0x80			; sprite n,x,y,p,c
d27f : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
d283 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
d287 : 736f756ee4            	db	"soun",'d'+0x80				; sound
d28c : 6d757369e3            	db	"musi",'c'+0x80				; music
d291 : 706c61f9              	db	"pla",'y'+0x80				; play
d295 : 736176e5              	db	"sav",'e'+0x80				; save
d299 : 6c6f61e4              	db	"loa",'d'+0x80				; load
d29d : 6469f2                	db	"di",'r'+0x80				; dir (compact listing)
d2a0 : 646972ec              	db	"dir",'l'+0x80				; dirl (long listing)
d2a4 : 6465ec                	db 	"de",'l'+0x80				; del
d2a7 : 726561e4              	db	"rea",'d'+0x80				; read
d2ab : 6e65f7                	db	"ne",'w'+0x80				; new
d2ae : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
d2b3 : 776169f4              	db	"wai",'t'+0x80				; wait delay
d2b7 : 72657365f4            	db	"rese",'t'+0x80				; reset var
d2bc : 68697265f3            	db	"hire",'s'+0x80				; hires col
d2c1 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y,mode
d2c6 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
d2ca : 68706c6ff4            	db	"hplo",'t'+0x80				; hplot x,y,char|string
d2cf : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
d2d6 : 7069786d6173eb        	db	"pixmas",'k'+0x80			; pixmask n
d2dd : 706978636fec          	db	"pixco",'l'+0x80			; pixcol n
d2e3 : 626ff8                	db	"bo",'x'+0x80				; box x0,y0,x1,y1
d2e6 : 636972636ce5          	db	"circl",'e'+0x80			; circle x0,y0,r
d2ec : 73686170e5            	db	"shap",'e'+0x80				; shape x,y,coords[]
d2f1 : 766c6f61e4            	db	"vloa",'d'+0x80				; vload addr,filename
d2f6 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload mem,hrd,addr,filen
d2fb : 62736176e5            	db	"bsav",'e'+0x80				; bsave mem,hdr,addr,len,f
d300 : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
d305 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
d30c : 63686469f2            	db	"chdi",'r'+0x80				; chdir fname
d311 : 6d6b6469f2            	db	"mkdi",'r'+0x80				; mkdir fname
d316 : 6461746574696de5      	db	"datetim",'e'+0x80			; datetime string output
d31e : 6e76706f6be5          	db	"nvpok",'e'+0x80			; NV poke addr,val
d324 : 666f6ef4              	db	"fon",'t'+0x80				; font <font file>
d328 : 6465766963e5          	db	"devic",'e'+0x80			; device <devnum>
d32e : 66636c6f73e5          	db	"fclos",'e'+0x80			; fclose
d334 : 72656469ed            	db	"redi",'m'+0x80				; redim varlist
d339 : 7075f4                	db  "pu",'t'+0x80				; put(byte)
                             ; Functions
d33c : 767065656ba8          	db	"vpeek",'('+0x80			; vpeek(x)
d342 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
d347 : 6465656ba8            	db	"deek",'('+0x80				; deek(x)
d34c : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
d352 : 6b6579a8              	db	"key",'('+0x80				; key(x)
d356 : 636872a8              	db	"chr",'('+0x80				; chr(x)
d35a : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
d35f : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
d365 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
d369 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank1.s --------------------------------

d36d : 6d656da8              	db	"mem",'('+0x80				; mem(x)
d371 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
d376 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
d37a : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
d382 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
d387 : 686578a8              	db	"hex",'('+0x80				; hex(x)
d38b : 646563a8              	db	"dec","("+0x80				; dec(x)
d38f : 617363a8              	db	"asc",'('+0x80				; asc(x$)
d393 : 76616ca8              	db	"val",'('+0x80				; val(x$)
d397 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
d39d : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
d3a1 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
d3a6 : 6e767065656ba8        	db  "nvpeek",'('+0x80			; nvpeek(addr)
d3ad : 66637265617465a8      	db	"fcreate",'('+0x80			; success=fcreate(filena
d3b5 : 666f70656ea8          	db	"fopen",'('+0x80			; success=fopen(filename)
d3bb : 676574a8              	db	"get",'('+0x80				; alias for key()
                             ; Numeric operators, in priority
d3bf : aa                    	db	'*'+0x80					; Multiply
d3c0 : af                    	db 	'/'+0x80					; Divide
d3c1 : dc                    	db 	'\\'+0x80					; Modulus
d3c2 : 3cbc                  	db	'<','<'+0x80				; Shift left
d3c4 : 3ebe                  	db	'>','>'+0x80				; Shift right
d3c6 : ab                    	db 	'+'+0x80					; Add
d3c7 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
d3c8 : a6                    	db '&'+0x80						; AND
d3c9 : fc                    	db '|'+0x80						; OR
d3ca : de                    	db '^'+0x80						; EOR
d3cb : 3cbd                  	db "<",'='+0x80					; Less than or equal
d3cd : 3ebd                  	db ">",'='+0x80					; Greater than or equal
d3cf : 3cbe                  	db "<",'>'+0x80					; Not equal
d3d1 : bc                    	db '<'+0x80						; Less than
d3d2 : be                    	db '>'+0x80						; Greater than
d3d3 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
d3d5 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank1.s --------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
d3d6 :                       df_tk_tokenjmp
d3d6 : 68d5                  	dw	df_tk_assign
d3d8 : 3dd6                  	dw	df_tk_callproc
d3da : 70d5                  	dw	df_tk_comment
d3dc : cdd5                  	dw	df_tk_println
d3de : c1d5                  	dw	df_tk_printat
d3e0 : cdd5                  	dw	df_tk_print
d3e2 : 15d6                  	dw	df_tk_def
d3e4 : 7dd6                  	dw	df_tk_enddef
d3e6 : 7fd6                  	dw	df_tk_return
d3e8 : 7dd6                  	dw	df_tk_abort
d3ea : 03d6                  	dw	df_tk_local
d3ec : f4d5                  	dw	df_tk_dim
d3ee : 7dd6                  	dw	df_tk_repeat
d3f0 : 82d6                  	dw	df_tk_until
d3f2 : 1bd6                  	dw	df_tk_for
d3f4 : 7dd6                  	dw	df_tk_next
d3f6 : 82d6                  	dw	df_tk_while
d3f8 : 7dd6                  	dw	df_tk_wend
d3fa : 82d6                  	dw	df_tk_if
d3fc : 7dd6                  	dw	df_tk_else
d3fe : 7dd6                  	dw	df_tk_endif
d400 : 82d6                  	dw	df_tk_elseif
d402 : cdd5                  	dw	df_tk_data
d404 : 62f3                  	dw	df_trap_monitor
d406 : 7dd6                  	dw	df_tk_run
d408 : 9fd5                  	dw	df_tk_list
d40a : dbd5                  	dw	df_tk_input
d40c : 82d6                  	dw	df_tk_mode
d40e : 92d6                  	dw	df_tk_plot
d410 : 82d6                  	dw	df_tk_cursor
d412 : 7dd6                  	dw	df_tk_cls
d414 : 86d6                  	dw	df_tk_vpoke
d416 : 86d6                  	dw	df_tk_setvdp
d418 : 92d6                  	dw	df_tk_colour
d41a : 86d6                  	dw	df_tk_spritepat
d41c : 92d6                  	dw	df_tk_spritepos
d41e : 86d6                  	dw	df_tk_spritecol
d420 : 86d6                  	dw	df_tk_spritenme
d422 : aad6                  	dw	df_tk_sprite
d424 : 86d6                  	dw	df_tk_poke
d426 : 86d6                  	dw	df_tk_doke
d428 : 92d6                  	dw	df_tk_sound
d42a : 9ed6                  	dw	df_tk_music
d42c : 9ed6                  	dw	df_tk_play
d42e : 82d6                  	dw	df_tk_save
d430 : 82d6                  	dw	df_tk_load
d432 : 7dd6                  	dw	df_tk_dir
d434 : 7dd6                  	dw	df_tk_dirl
d436 : 82d6                  	dw	df_tk_del
d438 : e5d5                  	dw	df_tk_read
d43a : 7dd6                  	dw	df_tk_new
d43c : 92d6                  	dw	df_tk_renum
d43e : 82d6                  	dw	df_tk_wait
d440 : 3fd6                  	dw	df_tk_reset
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank1.s --------------------------------

d442 : 82d6                  	dw	df_tk_hires
d444 : 86d6                  	dw	df_tk_point
d446 : 9ed6                  	dw	df_tk_line
d448 : 92d6                  	dw	df_tk_hplot
d44a : 82d6                  	dw	df_tk_pixmode
d44c : 82d6                  	dw	df_tk_pixmask
d44e : 82d6                  	dw	df_tk_pixcol
d450 : 9ed6                  	dw	df_tk_box
d452 : 92d6                  	dw	df_tk_circle
d454 : 92d6                  	dw	df_tk_shape
d456 : 86d6                  	dw	df_tk_vload
d458 : 9ed6                  	dw	df_tk_bload
d45a : aad6                  	dw	df_tk_bsave
d45c : 82d6                  	dw	df_tk_himem
d45e : 7dd6                  	dw	df_tk_monitor
d460 : 82d6                  	dw	df_tk_chdir
d462 : 82d6                  	dw	df_tk_mkdir
d464 : 48d6                  	dw	df_tk_datetime
d466 : 86d6                  	dw	df_tk_nvpoke
d468 : 82d6                  	dw	df_tk_font
d46a : 82d6                  	dw	df_tk_device
d46c : 7dd6                  	dw	df_tk_fclose
d46e : f4d5                  	dw	df_tk_redim
d470 : 82d6                  	dw  df_tk_put
                             
d472 : 51d6                  	dw	df_tk_vpeek
d474 : 51d6                  	dw	df_tk_peek
d476 : 51d6                  	dw	df_tk_deek
d478 : 51d6                  	dw	df_tk_stick
d47a : 51d6                  	dw	df_tk_key
d47c : 51d6                  	dw	df_tk_chr
d47e : 63d6                  	dw	df_tk_left
d480 : 63d6                  	dw	df_tk_right
d482 : 69d6                  	dw	df_tk_mid
d484 : 51d6                  	dw	df_tk_len
d486 : 51d6                  	dw	df_tk_mem
d488 : 63d6                  	dw	df_tk_scrn
d48a : 51d6                  	dw	df_tk_rnd
d48c : 5ad6                  	dw	df_tk_elapsed
d48e : 6fd6                  	dw	df_tk_call
d490 : 51d6                  	dw	df_tk_hex
d492 : 51d6                  	dw	df_tk_dec
d494 : 51d6                  	dw	df_tk_asc
d496 : 51d6                  	dw	df_tk_val
d498 : 63d6                  	dw	df_tk_pixel
d49a : 51d6                  	dw	df_tk_sgn
d49c : 5ad6                  	dw	df_tk_addr
d49e : 51d6                  	dw	df_tk_nvpeek
d4a0 : 51d6                  	dw	df_tk_fcreate
d4a2 : 51d6                  	dw	df_tk_fopen
d4a4 : 51d6                  	dw  df_tk_get
                             	
d4a6 : 7dd6                  	dw	df_tk_mult
d4a8 : 7dd6                  	dw	df_tk_div
d4aa : 7dd6                  	dw	df_tk_mod
d4ac : 7dd6                  	dw	df_tk_asl
d4ae : 7dd6                  	dw	df_tk_lsr
d4b0 : 7dd6                  	dw	df_tk_add
d4b2 : 7dd6                  	dw	df_tk_sub
                             	
d4b4 : 7dd6                  	dw	df_tk_and
d4b6 : 7dd6                  	dw	df_tk_or
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank1.s --------------------------------

d4b8 : 7dd6                  	dw	df_tk_eor
d4ba : 7dd6                  	dw	df_tk_lte
d4bc : 7dd6                  	dw	df_tk_gte
d4be : 7dd6                  	dw	df_tk_ne
d4c0 : 7dd6                  	dw	df_tk_lt
d4c2 : 7dd6                  	dw	df_tk_gt
d4c4 : 7dd6                  	dw	df_tk_eq
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
d4c6 :                       df_tk_tokentype
d4c6 : 01                    	db	DFTK_KW
d4c7 : 01                    	db	DFTK_KW
d4c8 : 01                    	db	DFTK_KW
d4c9 : 01                    	db	DFTK_KW
d4ca : 01                    	db	DFTK_KW
d4cb : 01                    	db	DFTK_KW
d4cc : 01                    	db	DFTK_KW
d4cd : 01                    	db	DFTK_KW
d4ce : 01                    	db	DFTK_KW
d4cf : 01                    	db	DFTK_KW
d4d0 : 01                    	db	DFTK_KW
d4d1 : 01                    	db	DFTK_KW
d4d2 : 01                    	db	DFTK_KW
d4d3 : 01                    	db	DFTK_KW
d4d4 : 01                    	db	DFTK_KW
d4d5 : 01                    	db	DFTK_KW
d4d6 : 01                    	db	DFTK_KW
d4d7 : 01                    	db	DFTK_KW
d4d8 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank1.s --------------------------------

d4d9 : 01                    	db	DFTK_KW
d4da : 01                    	db	DFTK_KW
d4db : 01                    	db	DFTK_KW
d4dc : 01                    	db	DFTK_KW
d4dd : 01                    	db	DFTK_KW
d4de : 01                    	db	DFTK_KW
d4df : 01                    	db	DFTK_KW
d4e0 : 01                    	db	DFTK_KW
d4e1 : 01                    	db	DFTK_KW
d4e2 : 01                    	db	DFTK_KW
d4e3 : 01                    	db	DFTK_KW
d4e4 : 01                    	db	DFTK_KW
d4e5 : 01                    	db	DFTK_KW
d4e6 : 01                    	db	DFTK_KW
d4e7 : 01                    	db	DFTK_KW
d4e8 : 01                    	db	DFTK_KW
d4e9 : 01                    	db	DFTK_KW
d4ea : 01                    	db	DFTK_KW
d4eb : 01                    	db	DFTK_KW
d4ec : 01                    	db	DFTK_KW
d4ed : 01                    	db	DFTK_KW
d4ee : 01                    	db	DFTK_KW
d4ef : 01                    	db	DFTK_KW
d4f0 : 01                    	db	DFTK_KW
d4f1 : 01                    	db	DFTK_KW
d4f2 : 01                    	db	DFTK_KW
d4f3 : 01                    	db	DFTK_KW
d4f4 : 01                    	db	DFTK_KW
d4f5 : 01                    	db	DFTK_KW
d4f6 : 01                    	db	DFTK_KW
d4f7 : 01                    	db	DFTK_KW
d4f8 : 01                    	db	DFTK_KW
d4f9 : 01                    	db	DFTK_KW
d4fa : 01                    	db	DFTK_KW
d4fb : 01                    	db	DFTK_KW
d4fc : 01                    	db	DFTK_KW
d4fd : 01                    	db	DFTK_KW
d4fe : 01                    	db	DFTK_KW
d4ff : 01                    	db	DFTK_KW
d500 : 01                    	db	DFTK_KW
d501 : 01                    	db	DFTK_KW
d502 : 01                    	db	DFTK_KW
d503 : 01                    	db	DFTK_KW
d504 : 01                    	db	DFTK_KW
d505 : 01                    	db	DFTK_KW
d506 : 01                    	db	DFTK_KW
d507 : 01                    	db	DFTK_KW
d508 : 01                    	db	DFTK_KW
d509 : 01                    	db	DFTK_KW
d50a : 01                    	db	DFTK_KW
d50b : 01                    	db	DFTK_KW
d50c : 01                    	db	DFTK_KW
d50d : 01                    	db	DFTK_KW
d50e : 01                    	db	DFTK_KW
d50f : 01                    	db	DFTK_KW
d510 : 01                    	db	DFTK_KW
d511 : 01                    	db	DFTK_KW
d512 : 01                    	db	DFTK_KW
d513 : 01                    	db	DFTK_KW
                             
d514 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d515 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank1.s --------------------------------

d516 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d517 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d518 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d519 : 42                    	db 	DFTK_FN | DFTK_STR
d51a : 42                    	db 	DFTK_FN | DFTK_STR
d51b : 42                    	db 	DFTK_FN | DFTK_STR
d51c : 42                    	db 	DFTK_FN | DFTK_STR
d51d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d51e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d51f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d520 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d521 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d522 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d523 : 42                    	db 	DFTK_FN | DFTK_STR
d524 : 42                    	db 	DFTK_FN | DFTK_STR
d525 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d526 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d527 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d528 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d529 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
d52e : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d52f : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d530 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d531 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d532 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d533 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
d534 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
d535 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d536 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d537 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d538 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d539 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d53a : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d53b : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d53c : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d53d : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-1 HOMEBREW COMPUTER
                             ;*	Hardware and software design by Dolo Miah
                             ;*	Copyright 2014-18
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank1.s --------------------------------

                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;* General routine to tokenise a mandatory variab
d53e :                       df_tk_variable
d53e : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d541 : 20c2cd           [ 6] 	jsr df_tk_peek_buf
d544 : 200bce           [ 6] 	jsr df_tk_isalpha
d547 : 901d             [ 3] 	bcc df_tk_error
d549 : a900             [ 2] 	lda #0
d54b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
d54c :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
d54c : a980             [ 2] 	lda #0x80
d54e : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
d551 : 203ed5           [ 6] 	jsr df_tk_variable
d554 : 200acf           [ 6] 	jsr df_tk_var
                             	; next char sound be =
d557 : a93d             [ 2] 	lda #'='
d559 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; skip more ws
d55c : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; should not be at end of line
d55f : 20c2cd           [ 6] 	jsr df_tk_peek_buf
d562 : f002             [ 3] 	beq df_tk_parse_ass_err
d564 : 18               [ 2] 	clc
d565 : 60               [ 6] 	rts
d566 :                       df_tk_parse_ass_err
d566 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
d568 :                       df_tk_assign
d568 : 204cd5           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank1.s --------------------------------

d56b : 2051d0           [ 6] 	jsr df_tk_expression
d56e : 18               [ 2] 	clc
d56f : 60               [ 6] 	rts
                             
                             
d570 :                       df_tk_comment
                             	; copy all subsequent chars to token
d570 : 20c8cd           [ 6] 	jsr df_tk_get_buf
d573 : f005             [ 3] 	beq df_tk_comment_done
d575 : 20d3cd           [ 6] 	jsr df_tk_put_tok
d578 : 80f6             [ 3] 	bra df_tk_comment
d57a :                       df_tk_comment_done
d57a : 18               [ 2] 	clc
d57b : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
d57c :                       df_tk_listp_procname
                             	; try and find the first proc
d57c : a95f             [ 2] 	lda #'_'
d57e : 2054ce           [ 6] 	jsr df_tk_expect_tok
d581 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
d583 : 20c2cd           [ 6] 	jsr df_tk_peek_buf
d586 : 200bce           [ 6] 	jsr df_tk_isalpha
d589 : 9012             [ 3] 	bcc df_tk_listp_procname_err
d58b :                       df_tk_listp_procname_ch
d58b : 20c2cd           [ 6] 	jsr df_tk_peek_buf
d58e : 2018ce           [ 6] 	jsr df_tk_isalphanum
d591 : 9008             [ 3] 	bcc df_tk_listp_procname_ok
d593 : 20c8cd           [ 6] 	jsr df_tk_get_buf
d596 : 20d3cd           [ 6] 	jsr df_tk_put_tok
d599 : 80f0             [ 3] 	bra df_tk_listp_procname_ch
d59b :                       df_tk_listp_procname_ok
d59b : 18               [ 2] 	clc
d59c : 60               [ 6] 	rts
d59d :                       df_tk_listp_procname_err
d59d : 38               [ 2] 	sec
d59e : 60               [ 6] 	rts
                             
d59f :                       df_tk_list
d59f : 207cd5           [ 6] 	jsr df_tk_listp_procname
                             	; if not found try '*' or normal list
d5a2 : b007             [ 3] 	bcs df_tk_list_procs
                             	; the '-' allows to list to end
d5a4 : a92d             [ 2] 	lda #'-'
                             	; find and add if it exists
d5a6 : 2054ce           [ 6] 	jsr df_tk_expect_tok
d5a9 : 8014             [ 3] 	bra df_tk_list_done
                             	; '*' means list procs
d5ab :                       df_tk_list_procs
                             	; try and find the first proc
d5ab : a92a             [ 2] 	lda #'*'
d5ad : 2054ce           [ 6] 	jsr df_tk_expect_tok
d5b0 : 900d             [ 3] 	bcc df_tk_list_done
                             	; else normal line number
d5b2 :                       df_tk_list_line
                             	; tokenise an expression
d5b2 : 2051d0           [ 6] 	jsr df_tk_expression
                             	; if not at the end then keep going
d5b5 : a92c             [ 2] 	lda #','
d5b7 : 2054ce           [ 6] 	jsr df_tk_expect_tok
d5ba : b003             [ 3] 	bcs df_tk_list_done
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank1.s --------------------------------

                             	; else get the next expression
d5bc : 2051d0           [ 6] 	jsr df_tk_expression	
d5bf :                       df_tk_list_done
d5bf : 18               [ 2] 	clc
d5c0 : 60               [ 6] 	rts
                             
d5c1 :                       df_tk_printat
                             	; Must get 2 parms for x,y
d5c1 : 2086d6           [ 6] 	jsr df_tk_2parms
                             	; if not at the end then keep going
d5c4 : a92c             [ 2] 	lda #','
d5c6 : 2054ce           [ 6] 	jsr df_tk_expect_tok
d5c9 : 9002             [ 3] 	bcc df_tk_print
                             	; else done
d5cb : 18               [ 2] 	clc
d5cc : 60               [ 6] 	rts
d5cd :                       df_tk_data
d5cd :                       df_tk_println
d5cd :                       df_tk_print
d5cd :                       df_tk_asm_db
d5cd :                       df_tk_asm_dw
                             	; tokenise an expression
d5cd : 2051d0           [ 6] 	jsr df_tk_expression
                             	; is there more to come?
d5d0 : a92c             [ 2] 	lda #','
d5d2 : 2054ce           [ 6] 	jsr df_tk_expect_tok
d5d5 : b002             [ 3] 	bcs df_tk_print_done
d5d7 : 80f4             [ 3] 	bra df_tk_print
d5d9 :                       df_tk_print_done
d5d9 : 18               [ 2] 	clc
d5da : 60               [ 6] 	rts
                             
d5db :                       df_tk_input
d5db : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d5de : 203ed5           [ 6] 	jsr df_tk_variable
d5e1 : 200acf           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
d5e4 : 60               [ 6] 	rts
                             	
d5e5 :                       df_tk_read
                             	; tokenise a variable
d5e5 : 203ed5           [ 6] 	jsr df_tk_variable
d5e8 : 200acf           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
d5eb : a92c             [ 2] 	lda #','
d5ed : 2054ce           [ 6] 	jsr df_tk_expect_tok
d5f0 : 90f3             [ 3] 	bcc df_tk_read
d5f2 : 18               [ 2] 	clc
d5f3 : 60               [ 6] 	rts
                             
d5f4 :                       df_tk_dim
d5f4 :                       df_tk_redim
                             	; tokenise a variable
d5f4 : 203ed5           [ 6] 	jsr df_tk_variable
d5f7 : 2052cf           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
d5fa : a92c             [ 2] 	lda #','
d5fc : 2054ce           [ 6] 	jsr df_tk_expect_tok
d5ff : 90f3             [ 3] 	bcc df_tk_dim
d601 : 18               [ 2] 	clc
d602 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank1.s --------------------------------

                             
d603 :                       df_tk_local
d603 : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d606 : 203ed5           [ 6] 	jsr df_tk_variable
d609 : 203ccf           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
d60c : a92c             [ 2] 	lda #','
d60e : 2054ce           [ 6] 	jsr df_tk_expect_tok
d611 : 90f0             [ 3] 	bcc df_tk_local
d613 : 18               [ 2] 	clc
d614 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
d615 :                       df_tk_def
d615 : a900             [ 2] 	lda #0
d617 : 205dcf           [ 6] 	jsr df_tk_proc
d61a : 60               [ 6] 	rts
                             
                             
                             ; syntax : for %a=1,10,1
d61b :                       df_tk_for
d61b : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
d61e : a901             [ 2] 	lda #DFVVT_INT
d620 : 200acf           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
d623 : a93d             [ 2] 	lda #'='
d625 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; starting value
d628 : 2051d0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d62b : a92c             [ 2] 	lda #','
d62d : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; ending value
d630 : 2051d0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d633 : a92c             [ 2] 	lda #','
d635 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             	
                             	; step value
d638 : 2051d0           [ 6] 	jsr df_tk_expression
d63b :                       df_tk_for_done
d63b : 18               [ 2] 	clc
d63c : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
d63d :                       df_tk_callproc
d63d : 38               [ 2] 	sec
d63e : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
d63f :                       df_tk_reset
d63f : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank1.s --------------------------------

                             	; tokenise a variable
d642 : a901             [ 2] 	lda #DFVVT_INT
d644 : 200acf           [ 6] 	jsr df_tk_var
d647 : 60               [ 6] 	rts
                             
                             ; date time expects a string variable only
d648 :                       df_tk_datetime
d648 : 2024ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d64b : a904             [ 2] 	lda #DFVVT_STR
d64d : 200acf           [ 6] 	jsr df_tk_var
d650 : 60               [ 6] 	rts
                             
                             ; These functions expect 1 parmeter
d651 :                       df_tk_len
d651 :                       df_tk_chr
d651 :                       df_tk_key
d651 :                       df_tk_get
d651 :                       df_tk_stick
d651 :                       df_tk_deek
d651 :                       df_tk_vpeek
d651 :                       df_tk_peek
d651 :                       df_tk_nvpeek
d651 :                       df_tk_mem
d651 :                       df_tk_rnd
d651 :                       df_tk_hex
d651 :                       df_tk_dec
d651 :                       df_tk_asc
d651 :                       df_tk_val
d651 :                       df_tk_sgn
d651 :                       df_tk_fcreate
d651 :                       df_tk_fopen
d651 : 2051d0           [ 6] 	jsr df_tk_expression
d654 :                       df_tk_closebrkt
d654 : a929             [ 2] 	lda #')'
d656 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
d659 : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
d65a :                       df_tk_addr
d65a :                       df_tk_elapsed
d65a : 203ed5           [ 6] 	jsr df_tk_variable
d65d : 200acf           [ 6] 	jsr df_tk_var
                             	; must have close braket
d660 : 4c54d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
d663 :                       df_tk_left
d663 :                       df_tk_right
d663 :                       df_tk_scrn
d663 :                       df_tk_pixel
d663 : 2086d6           [ 6] 	jsr df_tk_2parms
d666 : 4c54d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
d669 :                       df_tk_mid
d669 : 2092d6           [ 6] 	jsr df_tk_3parms
d66c : 4c54d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
d66f :                       df_tk_call
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank1.s --------------------------------

d66f : 2086d6           [ 6] 	jsr df_tk_2parms
d672 : a92c             [ 2] 	lda #','
d674 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
d677 : 2086d6           [ 6] 	jsr df_tk_2parms
d67a : 4c54d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
d67d :                       df_tk_else
d67d :                       df_tk_endif
d67d :                       df_tk_enddef
d67d :                       df_tk_abort
d67d :                       df_tk_repeat
d67d :                       df_tk_next
d67d :                       df_tk_wend
d67d :                       df_tk_run
d67d :                       df_tk_add
d67d :                       df_tk_sadd
d67d :                       df_tk_dir
d67d :                       df_tk_dirl
d67d :                       df_tk_cls
d67d :                       df_tk_new
d67d :                       df_tk_mult
d67d :                       df_tk_div
d67d :                       df_tk_mod
d67d :                       df_tk_asl
d67d :                       df_tk_lsr
d67d :                       df_tk_sub
d67d :                       df_tk_and
d67d :                       df_tk_or
d67d :                       df_tk_eor
d67d :                       df_tk_lte
d67d :                       df_tk_lt
d67d :                       df_tk_gte
d67d :                       df_tk_gt
d67d :                       df_tk_ne
d67d :                       df_tk_eq
d67d :                       df_tk_monitor
d67d :                       df_tk_fclose
                             ;df_tk_retsub
d67d : 18               [ 2] 	clc
d67e : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
d67f :                       df_tk_return
d67f : 4c51d0           [ 3] 	jmp df_tk_expression
                             
                             ; These commands expect 1 parameter	
d682 :                       df_tk_while
d682 :                       df_tk_until
d682 :                       df_tk_if
d682 :                       df_tk_elseif
d682 :                       df_tk_wait
d682 :                       df_tk_cursor
d682 :                       df_tk_mode
d682 :                       df_tk_del
d682 :                       df_tk_chdir
d682 :                       df_tk_mkdir
d682 :                       df_tk_hires
d682 :                       df_tk_load
d682 :                       df_tk_save
d682 :                       df_tk_pixmode
d682 :                       df_tk_pixmask
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank1.s --------------------------------

d682 :                       df_tk_pixcol
d682 :                       df_tk_put
d682 :                       df_tk_himem
d682 :                       df_tk_font
d682 :                       df_tk_device
                             ;df_tk_goto
                             ;df_tk_gosub
                             
d682 :                       df_tk_asm_org
d682 :                       df_tk_asm_opt
d682 :                       df_tk_asm_ds
                             
                             	; first parm
d682 : 2051d0           [ 6] 	jsr df_tk_expression
d685 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
d686 :                       df_tk_setvdp
d686 :                       df_tk_spritepat
d686 :                       df_tk_spritecol
d686 :                       df_tk_spritenme
d686 :                       df_tk_vpoke
d686 :                       df_tk_poke
d686 :                       df_tk_doke
d686 :                       df_tk_nvpoke
d686 :                       df_tk_point
d686 :                       df_tk_vload
d686 :                       df_tk_2parms
                             	; first parm
d686 : 2051d0           [ 6] 	jsr df_tk_expression
d689 : a92c             [ 2] 	lda #','
d68b : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise second parm
d68e : 2051d0           [ 6] 	jsr df_tk_expression
d691 : 60               [ 6] 	rts
                             
                             ; these commands expect 3 numeric parameters
d692 :                       df_tk_hplot
d692 :                       df_tk_plot
d692 :                       df_tk_circle
d692 :                       df_tk_sound
d692 :                       df_tk_colour
d692 :                       df_tk_spritepos
d692 :                       df_tk_shape
d692 :                       df_tk_renum
d692 :                       df_tk_3parms
d692 : 2086d6           [ 6] 	jsr df_tk_2parms
d695 : a92c             [ 2] 	lda #','
d697 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise third parm
d69a : 2051d0           [ 6] 	jsr df_tk_expression
d69d : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
d69e :                       df_tk_play
d69e :                       df_tk_music
d69e :                       df_tk_line
d69e :                       df_tk_box
d69e :                       df_tk_bload
d69e :                       df_tk_4parms
d69e : 2086d6           [ 6] 	jsr df_tk_2parms
d6a1 : a92c             [ 2] 	lda #','
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank1.s --------------------------------

d6a3 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
d6a6 : 2086d6           [ 6] 	jsr df_tk_2parms
d6a9 : 60               [ 6] 	rts
                             
                             ; these commands expect 5 numeric parameters
d6aa :                       df_tk_sprite
d6aa :                       df_tk_bsave
d6aa :                       df_tk_5parms
d6aa : 209ed6           [ 6] 	jsr df_tk_4parms
d6ad : a92c             [ 2] 	lda #','
d6af : 205fce           [ 6] 	jsr df_tk_expect_tok_err
d6b2 : 2051d0           [ 6] 	jsr df_tk_expression
d6b5 : 60               [ 6] 	rts
                             
                             
                             
d6b6 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
d6b6 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
d6b6 :                       df_pg_find_line
d6b6 : a4a7             [ 3] 	ldy df_prgstrt		; num_tmp contains starting poin
d6b8 : 8491             [ 3] 	sty num_tmp
d6ba : a4a8             [ 3] 	ldy df_prgstrt+1
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank1.s --------------------------------

d6bc : 8492             [ 3] 	sty num_tmp+1
d6be : 8685             [ 3] 	stx num_a			; num_a contains the line number to 
d6c0 : 8586             [ 3] 	sta num_a+1
d6c2 :                       df_pg_check_next_line	; Also used during runtime 
d6c2 : a591             [ 3] 	lda num_tmp
d6c4 : c5a9             [ 3] 	cmp df_prgend
d6c6 : d011             [ 3] 	bne df_pg_check_line
d6c8 : a592             [ 3] 	lda num_tmp+1
d6ca : c5aa             [ 3] 	cmp df_prgend+1
d6cc : d00b             [ 3] 	bne df_pg_check_line
d6ce :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
d6ce : a200             [ 2] 	ldx #0
d6d0 : a191             [ 6] 	lda (num_tmp,x)
d6d2 : a8               [ 2] 	tay
d6d3 : a691             [ 3] 	ldx num_tmp
d6d5 : a592             [ 3] 	lda num_tmp+1
d6d7 : 38               [ 2] 	sec
d6d8 : 60               [ 6] 	rts
d6d9 :                       df_pg_check_line
d6d9 : 38               [ 2] 	sec					; Do a trial subtract of
d6da : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
d6dc : a585             [ 3] 	lda num_a
d6de : f191             [ 5] 	sbc (num_tmp),y
d6e0 : 8593             [ 3] 	sta num_tmp+2		; Partial result of sbc
d6e2 : c8               [ 2] 	iny
d6e3 : a586             [ 3] 	lda num_a+1
d6e5 : f191             [ 5] 	sbc (num_tmp),y
d6e7 : 0593             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
d6e9 : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
d6eb : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
d6ed : a200             [ 2] 	ldx #0
d6ef : 18               [ 2] 	clc
d6f0 : a591             [ 3] 	lda num_tmp
d6f2 : 6191             [ 6] 	adc (num_tmp,x)
d6f4 : 8591             [ 3] 	sta num_tmp
d6f6 : 90ca             [ 3] 	bcc df_pg_check_next_line
d6f8 : e692             [ 5] 	inc num_tmp+1
d6fa : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
d6fc :                       df_pr_line_match
d6fc : a200             [ 2] 	ldx #0
d6fe : a191             [ 6] 	lda (num_tmp,x)
d700 : a8               [ 2] 	tay
d701 : a691             [ 3] 	ldx num_tmp
d703 : a592             [ 3] 	lda num_tmp+1
d705 : 18               [ 2] 	clc
d706 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d707 :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank1.s --------------------------------

                             	
                             	; Save address as this is the lowest address
d707 : 8685             [ 3] 	stx num_a
d709 : 8586             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
d70b : a5a9             [ 3] 	lda df_prgend
d70d : 858d             [ 3] 	sta num_x
d70f : a5aa             [ 3] 	lda df_prgend+1
d711 : 858e             [ 3] 	sta num_x+1	
d713 :                       df_pg_insert_byte
                             	; Move a byte from the current top
d713 : a200             [ 2] 	ldx #0
d715 : a18d             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
d717 : 918d             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
d719 : a58d             [ 3] 	lda num_x
d71b : c585             [ 3] 	cmp num_a
d71d : d012             [ 3] 	bne df_pg_insert_next_byte
d71f : a58e             [ 3] 	lda num_x+1
d721 : c586             [ 3] 	cmp num_a+1
d723 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
d725 : 18               [ 2] 	clc
d726 : 98               [ 2] 	tya
d727 : 65a9             [ 3] 	adc df_prgend
d729 : 85a9             [ 3] 	sta df_prgend
                             	_bcc 2
                             
d72d : e6aa             [ 5] 	inc df_prgend+1
d72f : 18               [ 2] 	clc
d730 : 60               [ 6] 	rts	; C=0
d731 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
d73e : 4c13d7           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d741 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
d741 : 8685             [ 3] 	stx num_a
d743 : 8586             [ 3] 	sta num_a+1
d745 : a200             [ 2] 	ldx #0	; No indirect indexing
d747 :                       df_pg_delete_byte
                             	; Move a byte from current+Y
d747 : b185             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
d749 : 8185             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
d74b : a585             [ 3] 	lda num_a
d74d : c5a9             [ 3] 	cmp df_prgend
d74f : d017             [ 3] 	bne df_pg_delete_next_byte
d751 : a586             [ 3] 	lda num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank1.s --------------------------------

d753 : c5aa             [ 3] 	cmp df_prgend+1
d755 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
d757 : 8485             [ 3] 	sty num_a
d759 : 38               [ 2] 	sec
d75a : a5a9             [ 3] 	lda df_prgend
d75c : e585             [ 3] 	sbc num_a
d75e : 85a9             [ 3] 	sta df_prgend
d760 : a5aa             [ 3] 	lda df_prgend+1
d762 : e900             [ 2] 	sbc #0
d764 : 85aa             [ 3] 	sta df_prgend+1
d766 : 18               [ 2] 	clc
d767 : 60               [ 6] 	rts
d768 :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
d76e : 4c47d7           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
d771 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input into df_linbuff
d771 : a200             [ 2] 	ldx #lo(df_linbuff)
d773 : a90a             [ 2] 	lda #hi(df_linbuff)
d775 : a078             [ 2] 	ldy #120
d777 : 206fc5           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
d77a : 98               [ 2] 	tya
d77b : d002             [ 3] 	bne df_pg_inputline_ok
d77d : 38               [ 2] 	sec
d77e : 60               [ 6] 	rts
d77f :                       df_pg_inputline_ok
d77f : 18               [ 2] 	clc
d780 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
d781 :                       df_pg_dflat
                             	; reset stack pointer
d781 : a2ff             [ 2] 	ldx #255
d783 : 9a               [ 2] 	txs
                             
                             	; error handler address
d784 : a9d1             [ 2] 	lda #lo(df_trap_error)
d786 : 85a2             [ 3] 	sta df_pc
d788 : a9f2             [ 2] 	lda #hi(df_trap_error)
d78a : 85a3             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
d78c :                       df_pg_prompt
d78c : a22a             [ 2] 	ldx #lo(df_pg_prompt_msg)
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank1.s --------------------------------

d78e : a9d8             [ 2] 	lda #hi(df_pg_prompt_msg)
d790 : 20abc5           [ 6] 	jsr io_print_line
d793 : a900             [ 2] 	lda #0
d795 : 85a0             [ 3] 	sta df_immed
d797 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
d797 : a980             [ 2] 	lda #lo(df_tokbuff)
d799 : 85c8             [ 3] 	sta df_currlin
d79b : a90a             [ 2] 	lda #hi(df_tokbuff)
d79d : 85c9             [ 3] 	sta df_currlin+1
d79f : 38               [ 2] 	sec
d7a0 : 2071d7           [ 6] 	jsr df_pg_inputline
d7a3 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
d7a5 : ad000a           [ 4] 	lda df_linbuff		; Check if first char is ! to es
d7a8 : c921             [ 2] 	cmp #'!'
d7aa : d005             [ 3] 	bne df_pg_skip_mon
d7ac : 200ec5           [ 6] 	jsr _cmd_immediate	; If so call monitor immediat
d7af : 80db             [ 3] 	bra df_pg_prompt
d7b1 :                       df_pg_skip_mon
d7b1 : 20cad7           [ 6] 	jsr df_pg_tokenise
d7b4 : a5a0             [ 3] 	lda df_immed
d7b6 : f0df             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
d7b8 : 2031d8           [ 6] 	jsr df_initrun
                             	; run from tokbuff
d7bb : a280             [ 2] 	ldx #lo(df_tokbuff)
d7bd : a90a             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
d7bf : a003             [ 2] 	ldy #3
                             ;	sty df_exeoff
                             	; init currlin
d7c1 : 20bedb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
d7c4 : 20cfdb           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
d7c7 : 4c8cd7           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
d7ca :                       df_pg_tokenise
d7ca : a900             [ 2] 	lda #0
d7cc : 859f             [ 3] 	sta errno
d7ce : 2095d0           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
d7d1 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d7d4 : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
d7d7 : d00f             [ 3] 	bne df_pg_line_number
                             	; check if line empty
d7d9 : ad800a           [ 4] 	lda df_tokbuff
d7dc : f009             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
d7de : a901             [ 2] 	lda #1
d7e0 : 85a0             [ 3] 	sta df_immed
                             	; Zero out text line buffer
d7e2 : a900             [ 2] 	lda #0
d7e4 : 8d000a           [ 4] 	sta df_linbuff
d7e7 :                       df_pg_nothing
d7e7 : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank1.s --------------------------------

d7e8 :                       df_pg_line_number
                             	; Check if this line exists
d7e8 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d7eb : aa               [ 2] 	tax
d7ec : ad820a           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
d7ef : 20b6d6           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
d7f2 : 8545             [ 3] 	sta tmp_d
d7f4 : 8a               [ 2] 	txa
d7f5 : 48               [ 3] 	pha
d7f6 : a545             [ 3] 	lda tmp_d
d7f8 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
d7f9 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
d7fb : 2041d7           [ 6] 	jsr df_pg_delete_block
d7fe :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
d7fe : ad800a           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
d801 : 48               [ 3] 	pha
d802 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
d804 : 68               [ 4] 	pla
d805 : 68               [ 4] 	pla
d806 : 68               [ 4] 	pla
d807 : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
d808 :                       df_pg_insertline
                             	; Restore previously saved length
d808 : 68               [ 4] 	pla
d809 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
d80a : 68               [ 4] 	pla
d80b : 8545             [ 3] 	sta tmp_d
d80d : 68               [ 4] 	pla
d80e : aa               [ 2] 	tax
d80f : a545             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
d814 : 2007d7           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
d817 : 68               [ 4] 	pla
d818 : a8               [ 2] 	tay
d819 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
d81a : 68               [ 4] 	pla
d81b : aa               [ 2] 	tax
d81c : 8685             [ 3] 	stx num_a
d81e : 68               [ 4] 	pla
d81f : 8586             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
d821 :                       df_pg_insertlinbyte
d821 : b9800a           [ 4] 	lda df_tokbuff,y
d824 : 9185             [ 5] 	sta (num_a),y
d826 : 88               [ 2] 	dey
d827 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank1.s --------------------------------

d829 : 60               [ 6] 	rts
                             	
d82a :                       df_pg_prompt_msg
d82a : 52656164790d00        	db "Ready",UTF_CR,0
                             
d831 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d831 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
d831 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
d831 : a910             [ 2] 	lda #0x10
d833 : 859e             [ 3] 	sta df_checkmsk
d835 : 859d             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
d84d : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
d84f : 86b8             [ 3] 	stx df_rtstop
                             	; make X=0
d851 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
d852 : 86b9             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
d854 : 86d7             [ 3] 	stx df_currdat+1
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank1.s --------------------------------

                             	; if nest counter zeroed
d856 : 86d5             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
d858 : 205cd8           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
d85b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
d85c :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d864 : a200             [ 2] 	ldx #0
d866 :                       df_rt_init_vvt_slot
d866 : a5e3             [ 3] 	lda df_tmpptra
d868 : c5af             [ 3] 	cmp df_vvtstrt
d86a : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
d86c : a5e4             [ 3] 	lda df_tmpptra+1
d86e : c5b0             [ 3] 	cmp df_vvtstrt+1
d870 : f02b             [ 3] 	beq df_rt_init_done
d872 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
d872 : a000             [ 2] 	ldy #0
d874 : b1e3             [ 5] 	lda (df_tmpptra),y
d876 : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_PTR
d878 : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
d87a : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
d87b : a900             [ 2] 	lda #0
d87d : 91e3             [ 5] 	sta (df_tmpptra),y
d87f : c8               [ 2] 	iny
d880 : 91e3             [ 5] 	sta (df_tmpptra),y
d882 : c8               [ 2] 	iny
d883 : 91e3             [ 5] 	sta (df_tmpptra),y
d885 : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
                             ;	lda (df_tmpptra,x)
d886 : b2e3             [ 5] 	lda (df_tmpptra)
d888 : 2940             [ 2] 	and #DFVVT_PROC
d88a : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
d88c : a900             [ 2] 	lda #0
d88e : 91e3             [ 5] 	sta (df_tmpptra),y
d890 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
                             ;	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
d89b : 80c9             [ 3] 	bra df_rt_init_vvt_slot 	; Don't rely on bcc
d89d :                       df_rt_init_done
d89d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
d89e :                       df_rt_getnval
                             	; evaluate the expression
d89e : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
d8a1 : 4ca5f1           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
d8a4 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
d8a4 : a900             [ 2] 	lda #0
d8a6 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
d8a7 :                       df_rt_neval_optk
d8a7 : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
d8a9 : c4c1             [ 3] 	cpy df_nxtstidx
d8ab : f03a             [ 3] 	beq df_rt_neval_process
d8ad : b1c8             [ 5] 	lda (df_currlin),y		; Get the byte which could b
d8af : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
d8b1 : c920             [ 2] 	cmp #DFTK_ESCVAL		; >=32 means it's an normal ch
d8b3 : b007             [ 3] 	bcs df_rt_neval_chr
d8b5 :                       df_rt_neval_esc
d8b5 : 2029d9           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
d8b8 : e6ca             [ 5] 	inc df_exeoff
d8ba : d0eb             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
d8bc :                       df_rt_neval_chr
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
d8bc : c92c             [ 2] 	cmp #','
d8be : f027             [ 3] 	beq df_rt_neval_process
d8c0 : c95d             [ 2] 	cmp #']'
d8c2 : f023             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
d8c4 : c929             [ 2] 	cmp #')'
d8c6 : f01f             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
d8c8 : e6ca             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
d8ca : c928             [ 2] 	cmp #'('
d8cc : d0d9             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
d8ce : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; move to next byte
d8d1 : e6ca             [ 5] 	inc df_exeoff
d8d3 : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
d8d5 :                       df_rt_neval_tk
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank1.s --------------------------------

d8d5 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
d8d7 : aa               [ 2] 	tax
d8d8 : bdc6d4           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
d8db : 48               [ 3] 	pha
d8dc : 2908             [ 2] 	and #DFTK_OP
d8de : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
d8e0 : 68               [ 4] 	pla
d8e1 : 2902             [ 2] 	and #DFTK_FN
d8e3 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
d8e7 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
d8e7 : 68               [ 4] 	pla
d8e8 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
d8ea : 2035dc           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
d8ed : 4ce7d8           [ 3] 	jmp df_rt_neval_process
d8f0 :                       df_rt_neval_done
d8f0 : 60               [ 6] 	rts
                             
d8f1 :                       df_rt_neval_tk_fn
d8f1 : 18               [ 2] 	clc
d8f2 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
d8f3 : e6ca             [ 5] 	inc df_exeoff
d8f5 : 2035dc           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
d8f8 :                       df_rt_neval_nextbyte
d8f8 : e6ca             [ 5] 	inc df_exeoff
d8fa : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
d8fc :                       df_rt_neval_tk_opp
d8fc : 68               [ 4] 	pla				; Get A off stack which is the type
d8fd :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
d8fd : 86e3             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
d8ff : 2907             [ 2] 	and #DFTK_OPMSK
d901 : 85e5             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
d903 : 68               [ 4] 	pla
d904 : 48               [ 3] 	pha
d905 : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank1.s --------------------------------

d906 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
d908 : bdc6d4           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
d90b : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
d90d : c5e5             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
d90f : f002             [ 3] 	beq df_rt_neval_donow
d911 : b011             [ 3] 	bcs df_rt_neval_pushOp
d913 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
d913 : 68               [ 4] 	pla
d914 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
d915 : a5e3             [ 3] 	lda df_tmpptra
d917 : 48               [ 3] 	pha
d918 : aa               [ 2] 	tax		; X = current op
d919 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
d91a : 2035dc           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
d91d : 68               [ 4] 	pla
d91e : aa               [ 2] 	tax
                             	; get the token type in to A
d91f : bdc6d4           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
d922 : d0d9             [ 4] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
d924 :                       df_rt_neval_pushOp
                             	; push the operator
d924 : a5e3             [ 3] 	lda df_tmpptra
d926 : 48               [ 3] 	pha
                             	; move to next byte
d927 : d0cf             [ 4] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
d929 :                       df_rt_eval_esc
d929 : 0a               [ 2] 	asl a
d92a : aa               [ 2] 	tax
d92b : 7c2ed9           [ 6] 	jmp (df_rt_eval_esc_tab,x)
                             ;	lda df_rt_eval_esc_tab,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_eval_esc_tab+1,x
                             ;	sta df_tmpptra+1
                             ;	jmp (df_tmpptra)
                             
d92e :                       df_rt_eval_esc_tab
d92e : ebd9                  	dw df_rt_eval_chr
d930 : f7d9                  	dw df_rt_eval_reserved
d932 : f7d9                  	dw df_rt_eval_reserved
d934 : f7d9                  	dw df_rt_eval_reserved
d936 : f7d9                  	dw df_rt_eval_reserved
d938 : f7d9                  	dw df_rt_eval_reserved	; no such thing as bytdec
d93a : ebd9                  	dw df_rt_eval_bythex
d93c : ebd9                  	dw df_rt_eval_bytbin
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank1.s --------------------------------

d93e : f7d9                  	dw df_rt_eval_reserved
d940 : ebd9                  	dw df_rt_eval_intdec
d942 : ebd9                  	dw df_rt_eval_inthex
d944 : ebd9                  	dw df_rt_eval_intbin
d946 : f7d9                  	dw df_rt_eval_reserved
d948 : f7d9                  	dw df_rt_eval_reserved
d94a : f7d9                  	dw df_rt_eval_reserved
d94c : f7d9                  	dw df_rt_eval_reserved
d94e : f9d9                  	dw df_rt_eval_strlit
d950 : 3eda                  	dw df_rt_eval_var
d952 : 32db                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
d954 :                       df_rt_seval
d954 : a6bc             [ 3] 	ldx df_sevalptr
d956 : a5bd             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
d958 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
d958 : 8545             [ 3] 	sta tmp_d
d95a : 48               [ 3] 	pha
d95b : 8a               [ 2] 	txa
d95c : 48               [ 3] 	pha
d95d : a545             [ 3] 	lda tmp_d
                             	; push original destination
d95f : 207af1           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_ost_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
d962 :                       df_rt_seval_optk
d962 : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
d964 : c4c1             [ 3] 	cpy df_nxtstidx
d966 : f069             [ 3] 	beq df_rt_seval_done
                             
d968 : b1c8             [ 5] 	lda (df_currlin),y
d96a : 301c             [ 3] 	bmi df_rt_seval_tk
                             
d96c : c920             [ 2] 	cmp #DFTK_ESCVAL
d96e : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
d970 : c92c             [ 2] 	cmp #','
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank1.s --------------------------------

d972 : f05d             [ 3] 	beq df_rt_seval_done
d974 : c929             [ 2] 	cmp #')'
d976 : f059             [ 3] 	beq df_rt_seval_done
d978 : d04a             [ 3] 	bne df_rt_seval_nextbyte
d97a :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
d97a : c910             [ 2] 	cmp #DFTK_STRLIT
d97c : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
d97e : c911             [ 2] 	cmp #DFTK_VAR
d980 : f028             [ 3] 	beq	df_rt_seval_esc_var
d982 : c912             [ 2] 	cmp #DFTK_PROC
d984 : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
d988 :                       df_rt_seval_tk
d988 : 84ca             [ 3] 	sty df_exeoff
d98a : 297f             [ 2] 	and #0x7f
                             	; check if op
d98c : aa               [ 2] 	tax
d98d : bdc6d4           [ 4] 	lda df_tk_tokentype,x
d990 : 2904             [ 2] 	and #DFTK_STROP
d992 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
d994 : bdc6d4           [ 4] 	lda df_tk_tokentype,x
d997 : 2902             [ 2] 	and #DFTK_FN
d999 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
d99d :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
d99d : 8a               [ 2] 	txa
d99e : 4cc4d9           [ 3] 	jmp df_rt_seval_nextbyte
                             
d9a1 :                       df_rt_seval_tk_fn
d9a1 : 8a               [ 2] 	txa
d9a2 : e6ca             [ 5] 	inc df_exeoff
d9a4 : 2035dc           [ 6] 	jsr df_rt_run_token
d9a7 : 4caed9           [ 3] 	jmp df_rt_seval_copy
                             
d9aa :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
d9aa : 18               [ 2] 	clc
d9ab : 203eda           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
d9ae :                       df_rt_seval_copy
                             	; pull destination pointer
d9ae : 68               [ 4] 	pla
d9af : 85e3             [ 3] 	sta df_tmpptra
d9b1 : 68               [ 4] 	pla
d9b2 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
d9b4 : 209df1           [ 6] 	jsr df_ost_popStr
d9b7 : 86e5             [ 3] 	stx df_tmpptrb
d9b9 : 85e6             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank1.s --------------------------------

                             	; go and copy the string
d9bb : 20d5d9           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
d9be : a5e4             [ 3] 	lda df_tmpptra+1
d9c0 : 48               [ 3] 	pha
d9c1 : a5e3             [ 3] 	lda df_tmpptra
d9c3 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
d9c4 :                       df_rt_seval_nextbyte
d9c4 : e6ca             [ 5] 	inc df_exeoff
d9c6 : 4c62d9           [ 3] 	jmp df_rt_seval_optk
                             
d9c9 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
d9c9 : 20f9d9           [ 6] 	jsr df_rt_eval_strlit
d9cc : 4caed9           [ 3] 	jmp df_rt_seval_copy
                             
d9cf :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
d9d1 :                       df_rt_seval_done
                             	;
d9d1 : 68               [ 4] 	pla
d9d2 : 68               [ 4] 	pla
                             
d9d3 : 18               [ 2] 	clc
d9d4 : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
d9d5 :                       df_rt_copyStr
d9d5 : a000             [ 2] 	ldy #0
d9d7 :                       df_rt_copyStr_ch
d9d7 : b1e5             [ 5] 	lda (df_tmpptrb),y
d9d9 : 91e3             [ 5] 	sta (df_tmpptra),y
d9db : f003             [ 3] 	beq df_rt_copyStr_done
d9dd : c8               [ 2] 	iny
d9de : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
d9e0 :                       df_rt_copyStr_done
d9e0 : 98               [ 2] 	tya
d9e1 : 18               [ 2] 	clc
d9e2 : 65e3             [ 3] 	adc df_tmpptra
d9e4 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d9e8 : e6e4             [ 5] 	inc df_tmpptra+1
d9ea : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
d9eb :                       df_rt_eval_intdec
d9eb :                       df_rt_eval_bytdec
d9eb :                       df_rt_eval_inthex
d9eb :                       df_rt_eval_bythex
d9eb :                       df_rt_eval_intbin
d9eb :                       df_rt_eval_bytbin
d9eb :                       df_rt_eval_chr
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank1.s --------------------------------

                             	; numeric constant
d9eb : c8               [ 2] 	iny
d9ec : b1c8             [ 5] 	lda (df_currlin),y
d9ee : aa               [ 2] 	tax
d9ef : c8               [ 2] 	iny
d9f0 : b1c8             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
d9f2 : 84ca             [ 3] 	sty df_exeoff
                             	; push number on to stack
d9f4 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
d9f7 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
d9f9 :                       df_rt_eval_strlit
d9f9 : 84ca             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
d9fb : 98               [ 2] 	tya
                             	; set carry to add one extra
d9fc : 38               [ 2] 	sec
d9fd : 65c8             [ 3] 	adc df_currlin
d9ff : aa               [ 2] 	tax
da00 : a5c9             [ 3] 	lda df_currlin+1
da02 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
da04 : 207af1           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
da07 : a4ca             [ 3] 	ldy df_exeoff
da09 :                       df_rt_eval_strlit_ch
da09 : b1c8             [ 5] 	lda (df_currlin),y
da0b : f003             [ 3] 	beq df_rt_eval_strlit_done
da0d : c8               [ 2] 	iny
da0e : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
da10 :                       df_rt_eval_strlit_done	; Always relying on Y neve
da10 : 84ca             [ 3] 	sty df_exeoff
da12 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
da13 :                       df_rt_arry_parm
                             	; move past open bracket or comma
da13 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
da15 : 209ed8           [ 6] 	jsr df_rt_getnval
da18 : 8a               [ 2] 	txa
                             ;	clc
da19 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
da1a :                       df_rt_arry_parm2
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank1.s --------------------------------

                             	; go get array parm 1
da1a : 2013da           [ 6] 	jsr df_rt_arry_parm
da1d : 48               [ 3] 	pha
da1e : a200             [ 2] 	ldx #0
da20 : a4ca             [ 3] 	ldy df_exeoff
da22 :                       df_rt_arry_parm2_term
da22 : b1c8             [ 5] 	lda (df_currlin),y
da24 : c95d             [ 2] 	cmp #']'
da26 : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
da28 : c92c             [ 2] 	cmp #','
da2a : f006             [ 3] 	beq df_rt_arry_parm2_arry2
da2c : 84ca             [ 3] 	sty df_exeoff
da2e : c8               [ 2] 	iny
da2f : 4c22da           [ 3] 	jmp df_rt_arry_parm2_term
da32 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
da32 : 2013da           [ 6] 	jsr df_rt_arry_parm
da35 : a8               [ 2] 	tay
da36 : 68               [ 4] 	pla
da37 : aa               [ 2] 	tax
                             ;	clc
da38 : 60               [ 6] 	rts
da39 :                       df_rt_arry_parm2_skiparry2
da39 : a000             [ 2] 	ldy #0
da3b : 68               [ 4] 	pla
da3c : aa               [ 2] 	tax
                             ;	clc
da3d : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
da3e :                       df_rt_eval_var
                             	; save carry bit
da3e : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
da3f : b00e             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
da41 : c8               [ 2] 	iny
                             	; get var vvt address
da42 : b1c8             [ 5] 	lda (df_currlin),y
da44 : 85e3             [ 3] 	sta df_tmpptra
da46 : c8               [ 2] 	iny
da47 : 84ca             [ 3] 	sty df_exeoff
da49 : b1c8             [ 5] 	lda (df_currlin),y
da4b : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
da4d : b2e3             [ 5] 	lda (df_tmpptra)
da4f :                       df_rt_eval_lvskip
da4f : 48               [ 3] 	pha
                             	; Test A for array or string
da50 : 2984             [ 2] 	and #DFVVT_PTR|DFVVT_STR
                             	; simple variable
da52 : f00e             [ 3] 	beq df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
da54 : c4c1             [ 3] 	cpy df_nxtstidx
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank1.s --------------------------------

da56 : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
da58 : c8               [ 2] 	iny
da59 : b1c8             [ 5] 	lda (df_currlin),y
da5b : 88               [ 2] 	dey
da5c : c95b             [ 2] 	cmp #'['
da5e : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
da60 : f02d             [ 3] 	beq df_rt_eval_var_do_arry
da62 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
da62 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
da63 : 28               [ 4] 	plp
da64 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
da66 : a001             [ 2] 	ldy #DFVVT_LO
da68 : b1e3             [ 5] 	lda (df_tmpptra),y
da6a : aa               [ 2] 	tax
da6b : a002             [ 2] 	ldy #DFVVT_HI
da6d : b1e3             [ 5] 	lda (df_tmpptra),y
                             
da6f : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
da72 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
da72 : 18               [ 2] 	clc
da73 : a901             [ 2] 	lda #DFVVT_LO
da75 : 65e3             [ 3] 	adc df_tmpptra
da77 : aa               [ 2] 	tax
da78 : a5e4             [ 3] 	lda df_tmpptra+1
da7a : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
da7c : 4c7ef1           [ 3] 	jmp df_ost_pushPtr
                             
                             	; Simple push of pointer, needs to be valid
da7f :                       df_rt_eval_var_simple
                             	; clean up stack
da7f : 68               [ 4] 	pla
da80 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
da81 : a001             [ 2] 	ldy #DFVVT_LO
da83 : b1e3             [ 5] 	lda (df_tmpptra),y
da85 : aa               [ 2] 	tax
da86 : a002             [ 2] 	ldy #DFVVT_HI
da88 : b1e3             [ 5] 	lda (df_tmpptra),y
da8a : f078             [ 4] 	beq df_rt_not_dimed
da8c : 4c7ef1           [ 3] 	jmp df_ost_pushPtr
                             
da8f :                       df_rt_eval_var_do_arry
                             	; move past var index
da8f : e6ca             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
da91 : a200             [ 2] 	ldx #0
da93 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
da95 : a5e4             [ 3] 	lda df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank1.s --------------------------------

da97 : 48               [ 3] 	pha
da98 : a5e3             [ 3] 	lda df_tmpptra
da9a : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
da9b : 201ada           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
da9e : 68               [ 4] 	pla
da9f : 85e3             [ 3] 	sta df_tmpptra
daa1 : 68               [ 4] 	pla
daa2 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
daa4 : 86e5             [ 3] 	stx df_tmpptrb
daa6 : 84e6             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
daa8 : c000             [ 2] 	cpy #0
daaa : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
daac : a004             [ 2] 	ldy #DFVVT_DIM2
daae : b1e3             [ 5] 	lda (df_tmpptra),y
dab0 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
dab2 : a6e5             [ 3] 	ldx df_tmpptrb
dab4 : a4e6             [ 3] 	ldy df_tmpptrb+1
dab6 : 86e6             [ 3] 	stx df_tmpptrb+1
dab8 : 84e5             [ 3] 	sty df_tmpptrb
                             
daba :                       df_rt_eval_var_dim2adj
daba : a6e5             [ 3] 	ldx df_tmpptrb
dabc : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
dabe : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
dac0 : c8               [ 2] 	iny
dac1 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
dac1 : e000             [ 2] 	cpx #0
dac3 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
dac5 : e8               [ 2] 	inx
dac6 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
dac6 : ca               [ 2] 	dex
dac7 : a900             [ 2] 	lda #0
dac9 : 8586             [ 3] 	sta num_a+1
dacb : 88               [ 2] 	dey
                             	; (y-1)
dacc : 8485             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
dace : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
dad0 : a003             [ 2] 	ldy #DFVVT_DIM1
dad2 : a900             [ 2] 	lda #0
dad4 : 858a             [ 3] 	sta num_b+1
dad6 : b1e3             [ 5] 	lda (df_tmpptra),y
dad8 : 8589             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
dada : 208bcb           [ 6] 	jsr int_fast_mult
dadd :                       df_rt_eval_var_nomult
                             	; move x to a
dadd : 8a               [ 2] 	txa
                             	; add x to num_a
dade : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank1.s --------------------------------

dadf : 6585             [ 3] 	adc num_a
dae1 : 8585             [ 3] 	sta num_a
                             	_bcc 2
                             
dae5 : e686             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
dae7 : a6e5             [ 3] 	ldx df_tmpptrb
dae9 : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
daeb : 68               [ 4] 	pla
daec : 48               [ 3] 	pha
daed : 2901             [ 2] 	and #DFVVT_INT
daef : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
daf1 : 0685             [ 5] 	asl num_a
daf3 : 2686             [ 5] 	rol num_a+1
daf5 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
daf5 : 18               [ 2] 	clc
daf6 : a001             [ 2] 	ldy #DFVVT_LO
daf8 : b1e3             [ 5] 	lda (df_tmpptra),y
dafa : 6585             [ 3] 	adc num_a
dafc : 8585             [ 3] 	sta num_a
dafe : a002             [ 2] 	ldy #DFVVT_HI
db00 : b1e3             [ 5] 	lda (df_tmpptra),y
db02 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
db04 :                       df_rt_not_dimed
                             	SWBRK DFERR_DIM
                             
db06 :                       df_rt_array_exists
db06 : 6586             [ 3] 	adc num_a+1
db08 : 8586             [ 3] 	sta num_a+1
                             	; get the type
db0a : 68               [ 4] 	pla
                             	; if not int or byte then push string
db0b : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
db0d : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
db0f : 28               [ 4] 	plp
db10 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
db12 : 2901             [ 2] 	and #DFVVT_INT
db14 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
db16 : a000             [ 2] 	ldy #0
db18 : b185             [ 5] 	lda (num_a),y
db1a : aa               [ 2] 	tax
db1b : c8               [ 2] 	iny
db1c : b185             [ 5] 	lda (num_a),y
db1e : 4c85f1           [ 3] 	jmp df_ost_pushInt
db21 :                       df_rt_eval_byt
db21 : a000             [ 2] 	ldy #0
db23 : b185             [ 5] 	lda (num_a),y
db25 : aa               [ 2] 	tax
db26 : 98               [ 2] 	tya			; Make A=0
db27 : 4c85f1           [ 3] 	jmp df_ost_pushInt
db2a :                       df_rt_eval_var_str
db2a : 28               [ 4] 	plp
db2b :                       df_rt_eval_ptr
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank1.s --------------------------------

                             ;	clc
                             	; put num_a not contents
db2b : a685             [ 3] 	ldx num_a
db2d : a586             [ 3] 	lda num_a+1
db2f : 4c7ef1           [ 3] 	jmp df_ost_pushPtr
                             
db32 :                       df_rt_eval_proc
db32 : a5b9             [ 3] 	lda df_parmtop				; Save current position of par
db34 : 48               [ 3] 	pha
db35 : 20efef           [ 6] 	jsr df_rt_proc				; Go and call the user functio
db38 : 68               [ 4] 	pla							; Get back the original parameter stac
db39 : c5b9             [ 3] 	cmp df_parmtop				; if it is the same, then no r
db3b : f002             [ 3] 	beq df_rt_eval_proc_err
db3d : 18               [ 2] 	clc
db3e : 60               [ 6] 	rts
db3f :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
db41 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
db41 : 20a5f1           [ 6] 	jsr df_ost_popInt
db44 : 86e5             [ 3] 	stx df_tmpptrb
db46 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db48 : 20a5f1           [ 6] 	jsr df_ost_popInt
db4b : 86e3             [ 3] 	stx df_tmpptra
db4d : 85e4             [ 3] 	sta df_tmpptra+1
db4f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
db50 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
db50 : 209df1           [ 6] 	jsr df_ost_popStr
db53 : 86e5             [ 3] 	stx df_tmpptrb
db55 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db57 : 209df1           [ 6] 	jsr df_ost_popStr
db5a : 86e3             [ 3] 	stx df_tmpptra
db5c : 85e4             [ 3] 	sta df_tmpptra+1
db5e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
db5f :                       df_rt_parm_2ints
                             	; evaluate 1st parm
db5f : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; jump over comma
db62 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db64 : 20a4d8           [ 6] 	jsr df_rt_neval
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank1.s --------------------------------

                             	
db67 : 4c41db           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
db6a :                       df_rt_parm_3ints
                             	; evaluate 1st parm
db6a : 20a4d8           [ 6] 	jsr df_rt_neval
db6d : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db6f : 20a4d8           [ 6] 	jsr df_rt_neval
db72 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db74 : 20a4d8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
db77 :                       df_rt_parm_pop3
db77 : 20a5f1           [ 6] 	jsr df_ost_popInt
db7a : 86e7             [ 3] 	stx df_tmpptrc
db7c : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
db7e : 4c41db           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
db81 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
db81 : 20a4d8           [ 6] 	jsr df_rt_neval
db84 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db86 : 20a4d8           [ 6] 	jsr df_rt_neval
db89 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db8b : 20a4d8           [ 6] 	jsr df_rt_neval
db8e : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
db90 : 20a4d8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
db93 :                       df_rt_parm_pop4
db93 : 20a5f1           [ 6] 	jsr df_ost_popInt
db96 : 86e9             [ 3] 	stx df_tmpptrd
db98 : 85ea             [ 3] 	sta df_tmpptrd+1
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank1.s --------------------------------

                             
                             	; pop 3,2,1 parms
db9a : 4c77db           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
db9d :                       df_rt_parm_5ints
                             	; evaluate 1st parm
db9d : 20a4d8           [ 6] 	jsr df_rt_neval
dba0 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dba2 : 20a4d8           [ 6] 	jsr df_rt_neval
dba5 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dba7 : 20a4d8           [ 6] 	jsr df_rt_neval
dbaa : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dbac : 20a4d8           [ 6] 	jsr df_rt_neval
dbaf : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
dbb1 : 20a4d8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
dbb4 : 20a5f1           [ 6] 	jsr df_ost_popInt
dbb7 : 86eb             [ 3] 	stx df_tmpptre
dbb9 : 85ec             [ 3] 	sta df_tmpptre+1
                             
                             	; pop 4,3,2,1 parms
dbbb : 4c93db           [ 3] 	jmp df_rt_parm_pop4
                             
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank1.s --------------------------------

                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
dbbe :                       df_rt_init_stat_ptr
                             	; save current line
dbbe : 86c8             [ 3] 	stx df_currlin
dbc0 : 85c9             [ 3] 	sta df_currlin+1
dbc2 : 84ca             [ 3] 	sty df_exeoff
dbc4 : 84c2             [ 3] 	sty df_curstidx
dbc6 : b1c8             [ 5] 	lda (df_currlin),y
dbc8 : 85c1             [ 3] 	sta df_nxtstidx
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dbca : b2c8             [ 5] 	lda (df_currlin)
dbcc : 85c0             [ 3] 	sta df_eolidx
dbce : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
dbcf :                       df_rt_exec_stat
dbcf : a6c8             [ 3] 	ldx df_currlin
dbd1 : a5c9             [ 3] 	lda df_currlin+1
dbd3 : a4ca             [ 3] 	ldy df_exeoff
dbd5 :                       df_rt_exec_init_ptr
dbd5 : 20bedb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
                             ;	lda #0
                             ;	sta df_nextlin+1
dbd8 : 64cc             [ 3] 	stz df_nextlin+1
                             
                             	; find first token in statement
dbda :                       df_rt_exec_find_tok
dbda : c8               [ 2] 	iny
dbdb : b1c8             [ 5] 	lda (df_currlin),y
dbdd : 10fb             [ 3] 	bpl df_rt_exec_find_tok
dbdf :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
dbdf : c8               [ 2] 	iny
dbe0 : 84ca             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
dbe2 : 2035dc           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
dbe5 : a59e             [ 3] 	lda df_checkmsk
dbe7 : 300e             [ 3] 	bmi df_rt_exec_no_key
dbe9 : c69d             [ 5] 	dec df_checkkey
dbeb : d00a             [ 3] 	bne df_rt_exec_no_key
dbed : a59e             [ 3] 	lda df_checkmsk
dbef : 859d             [ 3] 	sta df_checkkey
dbf1 : 18               [ 2] 	clc
dbf2 : 205dc5           [ 6] 	jsr io_get_ch
dbf5 : 9027             [ 4] 	bcc df_rt_exec_check_key
dbf7 :                       df_rt_exec_no_key
                             	; check if normal flow of control
dbf7 : a5cc             [ 3] 	lda df_nextlin+1
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank1.s --------------------------------

dbf9 : d031             [ 4] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
dbfb : a4c1             [ 3] 	ldy df_nxtstidx
dbfd : c4c0             [ 3] 	cpy df_eolidx
dbff : 84ca             [ 3] 	sty df_exeoff
dc01 : d0cc             [ 4] 	bne df_rt_exec_stat
                             	
                             
                             	; reached end of line, move to next
dc03 : 18               [ 2] 	clc
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dc04 : b2c8             [ 5] 	lda (df_currlin)
dc06 : 65c8             [ 3] 	adc df_currlin
dc08 : 85c8             [ 3] 	sta df_currlin
                             	_bcc 2
                             
dc0c : e6c9             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
dc0e : a003             [ 2] 	ldy #3
dc10 : 84ca             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
                             ;	lda (df_currlin,x)
dc12 : b2c8             [ 5] 	lda (df_currlin)
dc14 : 85c0             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
dc16 : d0b7             [ 4] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
dc18 : a5a0             [ 3] 	lda df_immed
dc1a : f00e             [ 3] 	beq df_rt_unexpected_end
dc1c :                       df_rt_exec_end
dc1c : 18               [ 2] 	clc
dc1d : 60               [ 6] 	rts
dc1e :                       df_rt_exec_check_key
dc1e : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
dc20 : f006             [ 3] 	beq df_rt_exec_ctrl_z
dc22 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
dc24 : d0d1             [ 4] 	bne df_rt_exec_no_key			; None relevant keys, go
dc26 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
dc28 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
dc2a :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
dc2c :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
dc2c : a6cb             [ 3] 	ldx df_nextlin
dc2e : a5cc             [ 3] 	lda df_nextlin+1
dc30 : a4c1             [ 3] 	ldy df_nxtstidx
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank1.s --------------------------------

dc32 : 4cd5db           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
dc35 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
dc35 : 0a               [ 2] 	asl a
dc36 : aa               [ 2] 	tax
dc37 : 7c12dd           [ 6] 	jmp (df_rt_tokenjmp,x)
                             ;	lda df_rt_tokenjmp,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_tokenjmp+1,x
                             ;	sta df_tmpptra+1
                             ;	; execution code finishes with rts
                             ;	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
dc3a :                       df_rt_nextstat
                             	; save pointer
dc3a : 86d2             [ 3] 	stx df_lineptr
dc3c : 85d3             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dc3e : b2d2             [ 5] 	lda (df_lineptr)
dc40 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
dc42 : b1d2             [ 5] 	lda (df_lineptr),y
                             ;	cmp (df_lineptr,x)
dc44 : d2d2             [ 5] 	cmp (df_lineptr)
dc46 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
dc48 : a8               [ 2] 	tay
                             	; X = line low
dc49 : a6d2             [ 3] 	ldx df_lineptr
                             	; A = line high
dc4b : a5d3             [ 3] 	lda df_lineptr+1
dc4d : 18               [ 2] 	clc
dc4e : 60               [ 6] 	rts
dc4f :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
dc4f : 18               [ 2] 	clc
dc50 : 65d2             [ 3] 	adc df_lineptr
dc52 : 85d2             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
dc56 : e6d3             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
                             ;	lda (df_lineptr,x)
dc58 : b2d2             [ 5] 	lda (df_lineptr)
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank1.s --------------------------------

dc5a : f008             [ 3] 	beq df_rt_nextstat_err
dc5c : a6d2             [ 3] 	ldx df_lineptr
dc5e : a5d3             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
dc60 : a003             [ 2] 	ldy #3
dc62 : 18               [ 2] 	clc
dc63 : 60               [ 6] 	rts
dc64 :                       df_rt_nextstat_err
dc64 : a000             [ 2] 	ldy #0
dc66 : 38               [ 2] 	sec
dc67 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
dc68 :                       df_rt_push_stat
dc68 : a5c2             [ 3] 	lda df_curstidx
dc6a : 2047f1           [ 6] 	jsr df_rst_pushByte
dc6d : a5c9             [ 3] 	lda df_currlin+1
dc6f : a6c8             [ 3] 	ldx df_currlin
dc71 : 4c5ff1           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
dc74 :                       df_rt_pop_stat
dc74 : 206df1           [ 6] 	jsr df_rst_popWord
dc77 : 86cb             [ 3] 	stx	df_nextlin
dc79 : 85cc             [ 3] 	sta df_nextlin+1
dc7b : 2050f1           [ 6] 	jsr df_rst_popByte
dc7e : a8               [ 2] 	tay
dc7f : a6cb             [ 3] 	ldx df_nextlin
dc81 : a5cc             [ 3] 	lda df_nextlin+1
dc83 : 203adc           [ 6] 	jsr df_rt_nextstat
dc86 : 86cb             [ 3] 	stx df_nextlin
dc88 : 85cc             [ 3] 	sta df_nextlin+1
dc8a : 84c1             [ 3] 	sty df_nxtstidx
                             ;	clc
dc8c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
dc8d :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
dc95 : a003             [ 2] 	ldy #3
dc97 : 84d4             [ 3] 	sty df_lineidx
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dc99 : b2d2             [ 5] 	lda (df_lineptr)
dc9b : f034             [ 3] 	beq df_rt_findproc_err
dc9d :                       df_rt_findproc_cmd
dc9d : c8               [ 2] 	iny
dc9e : b1d2             [ 5] 	lda (df_lineptr),y
dca0 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
dca2 : c986             [ 2] 	cmp #DFRT_DEF
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank1.s --------------------------------

dca4 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
dca6 : c8               [ 2] 	iny
                             	; skip proc escape token
dca7 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
dca8 : b1d2             [ 5] 	lda (df_lineptr),y
dcaa : c5d0             [ 3] 	cmp df_procptr
dcac : d00f             [ 3] 	bne df_rt_findproc_nextstat
dcae : c8               [ 2] 	iny
dcaf : b1d2             [ 5] 	lda (df_lineptr),y
dcb1 : c5d1             [ 3] 	cmp df_procptr+1
dcb3 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
dcb5 : a6d2             [ 3] 	ldx df_lineptr
dcb7 : a5d3             [ 3] 	lda df_lineptr+1
dcb9 : a4d4             [ 3] 	ldy df_lineidx
dcbb : 18               [ 2] 	clc
dcbc : 60               [ 6] 	rts
dcbd :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
dcbd : a6d2             [ 3] 	ldx df_lineptr
dcbf : a5d3             [ 3] 	lda df_lineptr+1
dcc1 : a4d4             [ 3] 	ldy df_lineidx
dcc3 : 203adc           [ 6] 	jsr df_rt_nextstat
dcc6 : b009             [ 3] 	bcs df_rt_findproc_err
dcc8 : 86d2             [ 3] 	stx df_lineptr
dcca : 85d3             [ 3] 	sta df_lineptr+1
dccc : 84d4             [ 3] 	sty df_lineidx
dcce : 4c9ddc           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
dcd1 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
dcd3 :                       df_rt_findescval
dcd3 : a4ca             [ 3] 	ldy df_exeoff
dcd5 : 88               [ 2] 	dey
dcd6 :                       df_rt_findescval_loop
dcd6 : c8               [ 2] 	iny
dcd7 : b1c8             [ 5] 	lda (df_currlin),y
dcd9 : c920             [ 2] 	cmp #DFTK_ESCVAL
dcdb : b0f9             [ 3] 	bcs df_rt_findescval_loop
dcdd : 84ca             [ 3] 	sty df_exeoff
dcdf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
dce0 :                       df_rt_skip_ws
dce0 : a4ca             [ 3] 	ldy df_exeoff
dce2 : 88               [ 2] 	dey
dce3 :                       df_rt_skip_ws_loop
dce3 : c8               [ 2] 	iny
dce4 : b1c8             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank1.s --------------------------------

dce6 : c920             [ 2] 	cmp #' '
dce8 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
dcea : 84ca             [ 3] 	sty df_exeoff
dcec : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
dced :                       df_rt_getlvar
dced : 20d3dc           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
dcf0 : c8               [ 2] 	iny
                             
                             	; get variable address
dcf1 : b1c8             [ 5] 	lda (df_currlin),y
dcf3 : 85e3             [ 3] 	sta df_tmpptra
dcf5 : c8               [ 2] 	iny
dcf6 : b1c8             [ 5] 	lda (df_currlin),y
dcf8 : 85e4             [ 3] 	sta df_tmpptra+1
                             
dcfa : 84ca             [ 3] 	sty df_exeoff
                             	; get the type
dcfc : a000             [ 2] 	ldy #0
dcfe : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
dd00 : 38               [ 2] 	sec
dd01 : a4ca             [ 3] 	ldy df_exeoff
dd03 : 203eda           [ 6] 	jsr df_rt_eval_var
dd06 : 4ca1f1           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
dd09 :                       df_rt_pop_stat_go
dd09 : 2074dc           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
dd0c : 68               [ 4] 	pla
dd0d : a8               [ 2] 	tay
dd0e : 84b8             [ 3] 	sty df_rtstop
dd10 : 18               [ 2] 	clc
dd11 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank1.s --------------------------------

                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dd12 :                       df_rt_tokenjmp
dd12 : 8ce5                  	dw	df_rt_assign
dd14 : efef                  	dw	df_rt_proc
dd16 : 92e5                  	dw	df_rt_comment
dd18 : 40e5                  	dw	df_rt_println
dd1a : 05e5                  	dw	df_rt_printat
dd1c : 0fe5                  	dw	df_rt_print
dd1e : 8ff0                  	dw	df_rt_def			; 0x86
dd20 : 09f1                  	dw	df_rt_enddef		; 0x87
dd22 : 06f1                  	dw	df_rt_return		; 0x88
dd24 : acef                  	dw	df_rt_abort			; 0x89
dd26 : e6e2                  	dw	df_rt_local
dd28 : 12e3                  	dw	df_rt_dim
dd2a : bbe1                  	dw	df_rt_repeat		; 0x8c
dd2c : c3e1                  	dw	df_rt_until
dd2e : 26e1                  	dw	df_rt_for			; 0x8e
dd30 : 60e1                  	dw	df_rt_next			; 0x8f
dd32 : 08e0                  	dw	df_rt_while			; 0x90
dd34 : 6de0                  	dw	df_rt_wend			; 0x81
dd36 : e7e0                  	dw	df_rt_if			; 0x92
dd38 : d5e0                  	dw	df_rt_else			; 0x93
dd3a : d0e0                  	dw	df_rt_endif			; 0x94
dd3c : d5e0                  	dw	df_rt_elseif		; 0x95
dd3e : 92e5                  	dw	df_rt_data			; 0x96
dd40 : aef4                  	dw	df_rt_asm_assemble	; 0x97
dd42 : 93e5                  	dw	df_rt_run
dd44 : 88e6                  	dw	df_rt_list
dd46 : b1e2                  	dw	df_rt_input
dd48 : 1ce4                  	dw	df_rt_mode
dd4a : a0e3                  	dw	df_rt_plot
dd4c : 09e4                  	dw	df_rt_cursor
dd4e : 96e3                  	dw	df_rt_cls
dd50 : ece8                  	dw	df_rt_vpoke
dd52 : 03e9                  	dw	df_rt_setvdp
dd54 : 0de9                  	dw	df_rt_colour
dd56 : 5ce9                  	dw	df_rt_spritepat
dd58 : 8ae9                  	dw	df_rt_spritepos
dd5a : c8e9                  	dw	df_rt_spritecol
dd5c : cde9                  	dw	df_rt_spritenme
dd5e : 33e9                  	dw	df_rt_sprite
dd60 : e4e8                  	dw	df_rt_poke
dd62 : d6e8                  	dw	df_rt_doke
dd64 : fbe9                  	dw	df_rt_sound
dd66 : 0fea                  	dw	df_rt_music
dd68 : 2dea                  	dw	df_rt_play
dd6a : 06eb                  	dw	df_rt_save
dd6c : 21eb                  	dw	df_rt_load
dd6e : 28ec                  	dw	df_rt_dir
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank1.s --------------------------------

dd70 : a8ec                  	dw	df_rt_dirl
dd72 : 73eb                  	dw	df_rt_del
dd74 : 99e2                  	dw	df_rt_read
dd76 : 05e0                  	dw	df_rt_new
dd78 : a4e5                  	dw	df_rt_renum
dd7a : ece4                  	dw	df_rt_wait
dd7c : deec                  	dw	df_rt_reset
dd7e : 1ce4                  	dw	df_rt_hires
dd80 : 3de4                  	dw	df_rt_point
dd82 : 65e4                  	dw	df_rt_line
dd84 : 47e4                  	dw	df_rt_hplot
dd86 : 23e4                  	dw	df_rt_pixmode
dd88 : 29e4                  	dw	df_rt_pixmask
dd8a : 2fe4                  	dw	df_rt_pixcol
dd8c : 7be4                  	dw	df_rt_box
dd8e : 53e4                  	dw	df_rt_circle
dd90 : 91e4                  	dw	df_rt_shape
dd92 : bbeb                  	dw	df_rt_vload
dd94 : 8ceb                  	dw	df_rt_bload
dd96 : 5eea                  	dw	df_rt_bsave
dd98 : 0fe4                  	dw	df_rt_himem
dd9a : 01e0                  	dw	df_rt_monitor
dd9c : 7aeb                  	dw	df_rt_chdir
dd9e : 83eb                  	dw	df_rt_mkdir
dda0 : f7ec                  	dw	df_rt_datetime
dda2 : f8e8                  	dw	df_rt_nvpoke
dda4 : aeeb                  	dw	df_rt_font
dda6 : d4ef                  	dw	df_rt_device
dda8 : c9ef                  	dw	df_rt_fclose
ddaa : 0fe3                  	dw	df_rt_redim
ddac : 35e4                  	dw  df_rt_put
                             
ddae : 6fed                  	dw	df_rt_vpeek
ddb0 : 56ed                  	dw	df_rt_peek
ddb2 : 53ed                  	dw	df_rt_deek
ddb4 : aced                  	dw	df_rt_stick
ddb6 : 1cee                  	dw	df_rt_key
ddb8 : dcee                  	dw	df_rt_chr
ddba : 2fef                  	dw	df_rt_left
ddbc : 40ef                  	dw	df_rt_right
ddbe : 5bef                  	dw	df_rt_mid
ddc0 : 79ef                  	dw	df_rt_len
ddc2 : d0ed                  	dw	df_rt_mem
ddc4 : 2fee                  	dw	df_rt_scrn
ddc6 : 87ed                  	dw	df_rt_rnd
ddc8 : 4bee                  	dw	df_rt_elapsed
ddca : 65ee                  	dw	df_rt_call
ddcc : f0ee                  	dw	df_rt_hex
ddce : 21ef                  	dw	df_rt_dec
ddd0 : 85ef                  	dw	df_rt_asc
ddd2 : 96ef                  	dw	df_rt_val
ddd4 : 3fee                  	dw	df_rt_pixel
ddd6 : 77ee                  	dw	df_rt_sgn
ddd8 : 94ee                  	dw	df_rt_addr
ddda : 7bed                  	dw	df_rt_nvpeek
dddc : aeef                  	dw	df_rt_fcreate
ddde : c1ef                  	dw	df_rt_fopen
dde0 : 1cee                  	dw  df_rt_get
                             	
dde2 : 55de                  	dw	df_rt_mult
dde4 : 76de                  	dw	df_rt_div
dde6 : 97de                  	dw	df_rt_mod
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank1.s --------------------------------

dde8 : b8de                  	dw	df_rt_asl
ddea : cbde                  	dw	df_rt_lsr
ddec : 2fde                  	dw	df_rt_add
ddee : 42de                  	dw	df_rt_sub
                             	
ddf0 : dede                  	dw	df_rt_and
ddf2 : edde                  	dw	df_rt_or
ddf4 : fcde                  	dw	df_rt_eor
ddf6 : 9bdf                  	dw	df_rt_comlte
ddf8 : a6df                  	dw	df_rt_comgte
ddfa : b1df                  	dw	df_rt_comne
ddfc : 7adf                  	dw	df_rt_comlt
ddfe : 85df                  	dw	df_rt_comgt
de00 : 90df                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
de02 :                       df_rt_escjmp
de02 : 5ce7                  	dw df_rt_lst_chr
de04 : 5be7                  	dw df_rt_lst_reserved
de06 : 5be7                  	dw df_rt_lst_reserved
de08 : 5be7                  	dw df_rt_lst_reserved
de0a : 5be7                  	dw df_rt_lst_reserved	
de0c : 5be7                  	dw df_rt_lst_reserved	; no such thing as bytdec
de0e : 79e7                  	dw df_rt_lst_bythex
de10 : 9ee7                  	dw df_rt_lst_bytbin
de12 : 5be7                  	dw df_rt_lst_reserved	
de14 : c2e7                  	dw df_rt_lst_intdec
de16 : 8ce7                  	dw df_rt_lst_inthex
de18 : a6e7                  	dw df_rt_lst_intbin
de1a : 5be7                  	dw df_rt_lst_reserved
de1c : 5be7                  	dw df_rt_lst_reserved
de1e : 5be7                  	dw df_rt_lst_reserved
de20 : 5be7                  	dw df_rt_lst_reserved	
de22 : 1fe8                  	dw df_rt_lst_strlit
de24 : cde7                  	dw df_rt_lst_var
de26 : cde7                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank1.s --------------------------------

                             	code  
                             
de28 :                       mod_sz_rtsubs_s
                             
                             	include "dflat\numop.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
de28 :                       df_rt_putintres
de28 : a6e3             [ 3] 	ldx df_tmpptra
de2a : a5e4             [ 3] 	lda df_tmpptra+1
de2c : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
de2f :                       df_rt_add
de2f : 2041db           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
de3f : 4c28de           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
de42 :                       df_rt_sub
de42 : 2041db           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
de52 : 4c28de           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
de55 :                       df_rt_mult
de55 : 2041db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de68 : 20b2cb           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
de73 : 4c28de           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
de76 :                       df_rt_div
de76 : 2041db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank1.s --------------------------------

de89 : 20dbcb           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
de94 : 4c28de           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
de97 :                       df_rt_mod
de97 : 2041db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
deaa : 20dbcb           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
deb5 : 4c28de           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
deb8 :                       df_rt_asl
deb8 : 2041db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
debb : a6e5             [ 3] 	ldx df_tmpptrb
debd : e8               [ 2] 	inx
debe :                       df_rt_aslbit
debe : ca               [ 2] 	dex
debf : f007             [ 3] 	beq df_rt_asldone
dec1 : 06e3             [ 5] 	asl df_tmpptra
dec3 : 26e4             [ 5] 	rol df_tmpptra+1
dec5 : 4cbede           [ 3] 	jmp df_rt_aslbit
dec8 :                       df_rt_asldone
dec8 : 4c28de           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
decb :                       df_rt_lsr
decb : 2041db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
dece : a6e5             [ 3] 	ldx df_tmpptrb
ded0 : e8               [ 2] 	inx
ded1 :                       df_rt_lsrbit
ded1 : ca               [ 2] 	dex
ded2 : f007             [ 3] 	beq df_rt_lsrdone
ded4 : 46e4             [ 5] 	lsr df_tmpptra+1
ded6 : 66e3             [ 5] 	ror df_tmpptra
ded8 : 4cd1de           [ 3] 	jmp df_rt_lsrbit
dedb :                       df_rt_lsrdone
dedb : 4c28de           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
dede :                       df_rt_and
dede : 2041db           [ 6] 	jsr df_rt_get2Ints
dee1 : a5e3             [ 3] 	lda df_tmpptra
dee3 : 25e5             [ 3] 	and df_tmpptrb
dee5 : aa               [ 2] 	tax
dee6 : a5e4             [ 3] 	lda df_tmpptra+1
dee8 : 25e6             [ 3] 	and df_tmpptrb+1
deea : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
deed :                       df_rt_or
deed : 2041db           [ 6] 	jsr df_rt_get2Ints
def0 : a5e3             [ 3] 	lda df_tmpptra
def2 : 05e5             [ 3] 	ora df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank1.s --------------------------------

def4 : aa               [ 2] 	tax
def5 : a5e4             [ 3] 	lda df_tmpptra+1
def7 : 05e6             [ 3] 	ora df_tmpptrb+1
def9 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
defc :                       df_rt_eor
defc : 2041db           [ 6] 	jsr df_rt_get2Ints
deff : a5e3             [ 3] 	lda df_tmpptra
df01 : 45e5             [ 3] 	eor df_tmpptrb
df03 : aa               [ 2] 	tax
df04 : a5e4             [ 3] 	lda df_tmpptra+1
df06 : 45e6             [ 3] 	eor df_tmpptrb+1
df08 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
df0b :                       df_rt_aequb
df0b : a5e3             [ 3] 	lda df_tmpptra
df0d : c5e5             [ 3] 	cmp df_tmpptrb
df0f : d004             [ 3] 	bne df_rt_aequbFin
df11 : a5e4             [ 3] 	lda df_tmpptra+1
df13 : c5e6             [ 3] 	cmp df_tmpptrb+1
df15 :                       df_rt_aequbFin
df15 : 60               [ 6] 	rts
                             
                             ; a-b common function
df16 :                       df_rt_asubb
df16 : 38               [ 2] 	sec
df17 : a5e3             [ 3] 	lda df_tmpptra
df19 : e5e5             [ 3] 	sbc df_tmpptrb
df1b : a5e4             [ 3] 	lda df_tmpptra+1
df1d : e5e6             [ 3] 	sbc df_tmpptrb+1
df1f : 5002             [ 3] 	bvc df_rt_asubbFin
df21 : 4980             [ 2] 	eor #0x80
df23 :                       df_rt_asubbFin
df23 : 60               [ 6] 	rts
                             
                             ; b-a common function
df24 :                       df_rt_bsuba
df24 : 38               [ 2] 	sec
df25 : a5e5             [ 3] 	lda df_tmpptrb
df27 : e5e3             [ 3] 	sbc df_tmpptra
df29 : a5e6             [ 3] 	lda df_tmpptrb+1
df2b : e5e4             [ 3] 	sbc df_tmpptra+1
df2d : 5002             [ 3] 	bvc df_rt_bsubaFin
df2f : 4980             [ 2] 	eor #0x80
df31 :                       df_rt_bsubaFin
df31 : 60               [ 6] 	rts
                             
                             ; common routine push true
df32 :                       df_rt_true
df32 : a2ff             [ 2] 	ldx #0xff
df34 : 8a               [ 2] 	txa
df35 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
df38 :                       df_rt_false
df38 : a200             [ 2] 	ldx #0x00
df3a : 8a               [ 2] 	txa
df3b : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank1.s --------------------------------

df3e :                       df_rt_lt
df3e : 2041db           [ 6] 	jsr df_rt_get2Ints
df41 : 2016df           [ 6] 	jsr df_rt_asubb
df44 : 30ec             [ 3] 	bmi df_rt_true
df46 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
df48 :                       df_rt_lte
df48 : 2041db           [ 6] 	jsr df_rt_get2Ints
df4b :                       df_rt_lte_calc
df4b : 2024df           [ 6] 	jsr df_rt_bsuba
df4e : 30e8             [ 3] 	bmi df_rt_false
df50 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
df52 :                       df_rt_gt
df52 : 2041db           [ 6] 	jsr df_rt_get2Ints
df55 : 2024df           [ 6] 	jsr df_rt_bsuba
df58 : 30d8             [ 3] 	bmi df_rt_true
df5a : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
df5c :                       df_rt_gte
df5c : 2041db           [ 6] 	jsr df_rt_get2Ints
df5f :                       df_rt_gte_calc
df5f : 2016df           [ 6] 	jsr df_rt_asubb
df62 : 10ce             [ 3] 	bpl df_rt_true
df64 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
df66 :                       df_rt_eq
df66 : 2041db           [ 6] 	jsr df_rt_get2Ints
df69 : 200bdf           [ 6] 	jsr df_rt_aequb
df6c : d0ca             [ 3] 	bne df_rt_false
df6e : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
df70 :                       df_rt_ne
df70 : 2041db           [ 6] 	jsr df_rt_get2Ints
df73 : 200bdf           [ 6] 	jsr df_rt_aequb
df76 : f0c0             [ 3] 	beq df_rt_false
df78 : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
df7a :                       df_rt_comlt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df7f : 2904             [ 2] 	and #DFST_STR
df81 : d054             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
df83 : f0b9             [ 3] 	beq df_rt_lt
                             
df85 :                       df_rt_comgt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df8a : 2904             [ 2] 	and #DFST_STR
df8c : d050             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
df8e : f0c2             [ 3] 	beq df_rt_gt
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank1.s --------------------------------

                             
df90 :                       df_rt_comeq
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df95 : 2904             [ 2] 	and #DFST_STR
df97 : d04e             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
df99 : f0cb             [ 3] 	beq df_rt_eq
                             
df9b :                       df_rt_comlte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
dfa0 : 2904             [ 2] 	and #DFST_STR
dfa2 : d018             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
dfa4 : f0a2             [ 3] 	beq df_rt_lte
                             	
dfa6 :                       df_rt_comgte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
dfab : 2904             [ 2] 	and #DFST_STR
dfad : d01a             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
dfaf : f0ab             [ 3] 	beq df_rt_gte
                             
dfb1 :                       df_rt_comne
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
dfb6 : 2904             [ 2] 	and #DFST_STR
dfb8 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
dfba : f0b4             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
dfbc :                       df_rt_slte
dfbc : 20eedf           [ 6] 	jsr df_rt_str_comp
dfbf : 9005             [ 3] 	bcc df_rt_str_comp_true
dfc1 : f003             [ 3] 	beq df_rt_str_comp_true
dfc3 :                       df_rt_str_comp_false
dfc3 : 4c38df           [ 3] 	jmp df_rt_false
dfc6 :                       df_rt_str_comp_true
dfc6 : 4c32df           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
dfc9 :                       df_rt_sgte
dfc9 : 20eedf           [ 6] 	jsr df_rt_str_comp
dfcc : b0f8             [ 3] 	bcs df_rt_str_comp_true
dfce : 90f3             [ 3] 	bcc df_rt_str_comp_false
                             
                             ; string not equal
dfd0 :                       df_rt_sne
dfd0 : 20eedf           [ 6] 	jsr df_rt_str_comp
dfd3 : d0f1             [ 3] 	bne df_rt_str_comp_true
dfd5 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank1.s --------------------------------

                             ; string less than
dfd7 :                       df_rt_slt
dfd7 : 20eedf           [ 6] 	jsr df_rt_str_comp
dfda : 90ea             [ 3] 	bcc df_rt_str_comp_true
dfdc : b0e5             [ 3] 	bcs df_rt_str_comp_false
                             
                             ; string greater than
dfde :                       df_rt_sgt
dfde : 20eedf           [ 6] 	jsr df_rt_str_comp
dfe1 : f0e0             [ 3] 	beq df_rt_str_comp_false
dfe3 : 90de             [ 3] 	bcc df_rt_str_comp_false
dfe5 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
dfe7 :                       df_rt_seq
dfe7 : 20eedf           [ 6] 	jsr df_rt_str_comp
dfea : f0da             [ 3] 	beq df_rt_str_comp_true
dfec : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; C=0 means <
                             ; C=1,Z=0 means >
                             ; C=1,Z=1 means ==
dfee :                       df_rt_str_comp
dfee : 2050db           [ 6] 	jsr df_rt_get2Strs
dff1 : a000             [ 2] 	ldy #0
dff3 :                       df_rt_str_comp_byte
dff3 : b1e3             [ 5] 	lda (df_tmpptra),y
dff5 : d1e5             [ 5] 	cmp (df_tmpptrb),y
dff7 : d007             [ 4] 	bne df_rt_str_comp_done
                             	; if here then both strings still the same
dff9 : c900             [ 2] 	cmp #0				; What was op1 char
                             	; if char is zero then end
dffb : f003             [ 4] 	beq df_rt_str_comp_done
                             	; else do next char
dffd : c8               [ 2] 	iny
dffe : d0f3             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e000 :                       df_rt_str_comp_done
e000 : 60               [ 6] 	rts
                             
                             
                             
                             
e001 :                       df_rt_monitor
e001 : 20b6c2           [ 6] 	jsr _command_line
e004 : 60               [ 6] 	rts
                             	
e005 :                       df_rt_new
e005 : 4ce7f1           [ 3] 	jmp df_clear
                             
                             ; df_rt_gotosub_common
                             ; 	; get line number in A,X and put in num_a
                             ; 	jsr df_rt_getnval
                             ; 	stx num_a
                             ; 	sta num_a+1
                             ; 	; For the moment start from the beginning
                             ; 	ldy df_prgstrt		; num_tmp contains starting po
                             ; 	sty num_tmp
                             ; 	ldy df_prgstrt+1
                             ; 	sty num_tmp+1
                             ; 	; if current line number > target then start f
                             ; 	; else start from this line number
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank1.s --------------------------------

                             ; 	; do a trial substract of current - target
                             ; 	sec
                             ; 	ldy #DFTK_LINNUM
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a
                             ; 	iny
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a+1
                             ; 	; if C=1 then current >= target so start from 
                             ; 	bcs df_rt_goto_find_line
                             ; 	; else use current line address
                             ; 	lda df_currlin
                             ; 	sta num_tmp
                             ; 	lda df_currlin+1
                             ; 	sta num_tmp+1
                             ; df_rt_goto_find_line
                             ; 	jsr df_pg_check_next_line	; Reuses the line fi
                             ; 	bcs df_rt_goto_not_found	; If no exact match t
                             ; 	rts							; X,A contains address of target lin
                             ; df_rt_goto_not_found
                             ; 	SWBRK DFERR_NOLINE
                             
                             ; df_rt_gosub
                             ; 	; push statement address for return
                             ; 	jsr df_rt_push_stat
                             ; 	; DFRT_WHILE token
                             ; 	lda #DFRT_GOSUB
                             ; 	jsr df_rst_pushByte
                             ; 	; *IMPORTANT* : falls through to the goto code
                             ; df_rt_goto
                             ; 	; Find the line number to goto
                             ; 	jsr df_rt_gotosub_common
                             ; 	; Save it in the next line property
                             ; 	stx df_nextlin
                             ; 	sta df_nextlin+1
                             ; 	; GOTO is from the beginning of a line only
                             ; 	ldy #3
                             ; 	sty df_nxtstidx
                             ; 	; Runtime will change flow to use next line pr
                             ; 	rts
                             
                             ; df_rt_retsub
                             ; 	; The top of stack needs to be a gosub return 
                             ; 	jsr df_rst_popByte
                             ; 	cmp #DFRT_GOSUB
                             ; 	bne df_rt_retsub_err
                             ; 	; pop the stat and continue
                             ; 	jmp df_rt_pop_stat
                             ; df_rt_retsub_err
                             ; 	SWBRK DFERR_RETURN
                             
                             
e008 :                       df_rt_while
                             	; push statement address
e008 : 2068dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e00b : a990             [ 2] 	lda #DFRT_WHILE
e00d : 2047f1           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e010 : 209ed8           [ 6] 	jsr df_rt_getnval
                             
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank1.s --------------------------------

                             	; if value<>0 then continue
e013 : e000             [ 2] 	cpx #0
e015 : f001             [ 3] 	beq df_rt_while_done
e017 : 60               [ 6] 	rts
e018 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e018 : 2050f1           [ 6] 	jsr df_rst_popByte
e01b : 2050f1           [ 6] 	jsr df_rst_popByte
e01e : 206df1           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e021 : a5d5             [ 3] 	lda df_ifnest
e023 : 48               [ 3] 	pha
e024 : a901             [ 2] 	lda #1
e026 : 85d5             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e030 :                       df_rt_findwend
e030 : a6cb             [ 3] 	ldx df_nextlin
e032 : a5cc             [ 3] 	lda df_nextlin+1
e034 : a4c2             [ 3] 	ldy df_curstidx
e036 : 203adc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e039 : b030             [ 3] 	bcs df_rt_wend_end
e03b : 86cb             [ 3] 	stx df_nextlin
e03d : 85cc             [ 3] 	sta df_nextlin+1
e03f : 84c2             [ 3] 	sty df_curstidx
                             	; find the command token
e041 :                       df_rt_while_cmd
e041 : c8               [ 2] 	iny
e042 : b1cb             [ 5] 	lda (df_nextlin),y
e044 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e046 : c991             [ 2] 	cmp #DFRT_WEND
e048 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e04a : c6d5             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e04c : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e04e : 68               [ 4] 	pla
e04f : 85d5             [ 3] 	sta df_ifnest
e051 : a6cb             [ 3] 	ldx df_nextlin
e053 : a5cc             [ 3] 	lda df_nextlin+1
e055 : a4c2             [ 3] 	ldy df_curstidx
e057 : 203adc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e05a : b00f             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e05c : 86cb             [ 3] 	stx df_nextlin
e05e : 85cc             [ 3] 	sta df_nextlin+1
e060 : 84c1             [ 3] 	sty df_nxtstidx	
e062 : 60               [ 6] 	rts
e063 :                       df_rt_check_while
                             	; check for while
e063 : c990             [ 2] 	cmp #DFRT_WHILE
e065 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank1.s --------------------------------

e067 : e6d5             [ 5] 	inc df_ifnest
e069 : 80c5             [ 3] 	bra df_rt_findwend
e06b :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e06d :                       df_rt_wend
e06d : 2050f1           [ 6] 	jsr df_rst_popByte
e070 : c990             [ 2] 	cmp #DFRT_WHILE
e072 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e074 : 206df1           [ 6] 	jsr df_rst_popWord
e077 : 86cb             [ 3] 	stx	df_nextlin
e079 : 85cc             [ 3] 	sta df_nextlin+1
e07b : 2050f1           [ 6] 	jsr df_rst_popByte
e07e : 85c1             [ 3] 	sta df_nxtstidx
e080 : 60               [ 6] 	rts
e081 :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e083 :                       df_rt_if_stat
e083 : a6cb             [ 3] 	ldx df_nextlin
e085 : a5cc             [ 3] 	lda df_nextlin+1
e087 : a4c2             [ 3] 	ldy df_curstidx
e089 : 203adc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e08c : b009             [ 3] 	bcs df_rt_if_stat_err
e08e : 86cb             [ 3] 	stx df_nextlin
e090 : 85cc             [ 3] 	sta df_nextlin+1
e092 : 84c2             [ 3] 	sty df_curstidx
e094 : 84c1             [ 3] 	sty df_nxtstidx
e096 : 60               [ 6] 	rts
                             ; program ended with no match
e097 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             	
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e099 :                       df_rt_if_match
                             	; save the current if nest level
e099 : a5d5             [ 3] 	lda df_ifnest
e09b : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e09c : 64d5             [ 3] 	stz df_ifnest	
                             	; save match pref
e09e : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e09f :                       df_rt_findelseendif
e09f : 2083e0           [ 6] 	jsr df_rt_if_stat
                             	; find command
e0a2 :                       df_rt_ifcmd
e0a2 : c8               [ 2] 	iny
e0a3 : b1cb             [ 5] 	lda (df_nextlin),y
e0a5 : 10fb             [ 3] 	bpl df_rt_ifcmd
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank1.s --------------------------------

                             	; check for endif
e0a7 : c994             [ 2] 	cmp #DFRT_ENDIF
e0a9 : f014             [ 3] 	beq df_rt_ifelse
                             
e0ab : 28               [ 4] 	plp
e0ac : 08               [ 3] 	php
                             	
e0ad : b008             [ 3] 	bcs df_rt_ifskipelseif
e0af : c993             [ 2] 	cmp #DFRT_ELSE
e0b1 : f00c             [ 3] 	beq df_rt_ifelse
e0b3 : c995             [ 2] 	cmp #DFRT_ELSEIF
e0b5 : f008             [ 3] 	beq df_rt_ifelse
e0b7 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e0b7 : c992             [ 2] 	cmp #DFRT_IF
e0b9 : d002             [ 3] 	bne df_rt_skipnestif
e0bb : e6d5             [ 5] 	inc df_ifnest
e0bd :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e0bd : 80e0             [ 3] 	bra df_rt_findelseendif
                             	
                             	; found else/elseif/endif
                             	; but check if this is nested
e0bf :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e0bf : a6d5             [ 3] 	ldx df_ifnest
e0c1 : f008             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e0c3 : c994             [ 2] 	cmp #DFRT_ENDIF
e0c5 : d002             [ 3] 	bne df_rt_skipnestendif
e0c7 : c6d5             [ 5] 	dec df_ifnest
e0c9 :                       df_rt_skipnestendif	
                             	; continue to search for else/endif
e0c9 : 80d4             [ 3] 	bra df_rt_findelseendif
                             	; ok got a match
e0cb :                       df_rt_if_found
                             	; remove pref
e0cb : 28               [ 4] 	plp
                             	; restore global if nest
e0cc : fa               [ 4] 	plx
e0cd : 86d5             [ 3] 	stx df_ifnest
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e0cf : 60               [ 6] 	rts
                             
e0d0 :                       df_rt_endif
                             	; decrement if next level
e0d0 : c6d5             [ 5] 	dec df_ifnest
e0d2 : 3011             [ 3] 	bmi df_rt_noif_err
                             ;	clc
e0d4 : 60               [ 6] 	rts
                             	
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e0d5 :                       df_rt_elseif
e0d5 :                       df_rt_else
                             	; not in if mode then error
e0d5 : a5d5             [ 3] 	lda df_ifnest
e0d7 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank1.s --------------------------------

                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e0e1 : 38               [ 2] 	sec
e0e2 : 4c99e0           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if	
e0e5 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             	
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e0e7 :                       df_rt_if
                             	; increment global if nest counter
e0e7 : e6d5             [ 5] 	inc df_ifnest
e0e9 :                       df_rt_ifeval
                             	; get value
e0e9 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e0ec : c900             [ 2] 	cmp #0
e0ee : d035             [ 4] 	bne df_rt_if_done
e0f0 : e000             [ 2] 	cpx #0
e0f2 : d031             [ 4] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e0fc : 18               [ 2] 	clc						
e0fd : 2099e0           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e100 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e102 : f01e             [ 3] 	beq df_rt_do_else
                             
e104 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e106 : f01d             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e110 : c8               [ 2] 	iny
e111 : 5a               [ 3] 	phy
                             	; initialise statement pointer
e112 : a4c2             [ 3] 	ldy df_curstidx
e114 : a6c8             [ 3] 	ldx df_currlin
e116 : a5c9             [ 3] 	lda df_currlin+1
e118 : 20bedb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e11b : 7a               [ 4] 	ply
e11c : 84ca             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e11e : 64cc             [ 3] 	stz df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank1.s --------------------------------

e120 : 80c7             [ 4] 	bra df_rt_ifeval
                             	
e122 :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e122 : 2083e0           [ 6] 	jsr df_rt_if_stat
e125 :                       df_rt_if_done
                             ;	clc
e125 : 60               [ 6] 	rts
                             	
e126 :                       df_rt_for
                             	; push statement address to rt stack
e126 : 2068dc           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e129 : 20eddc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e12c : 48               [ 3] 	pha
e12d : da               [ 3] 	phx
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e12e : e6ca             [ 5] 	inc df_exeoff
e130 : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter
e133 : fa               [ 4] 	plx
e134 : 86e3             [ 3] 	stx df_tmpptra
e136 : 68               [ 4] 	pla
e137 : 85e4             [ 3] 	sta df_tmpptra+1
e139 : 48               [ 3] 	pha
e13a : da               [ 3] 	phx
                             	; get the starting value from op stack
e13b : 20a5f1           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e13e : a001             [ 2] 	ldy #1
e140 : 91e3             [ 5] 	sta (df_tmpptra),y
e142 : 8a               [ 2] 	txa
e143 : 88               [ 2] 	dey
e144 : 92e3             [ 5] 	sta (df_tmpptra)
                             
                             	; find end value
                             	; evaluate the end value
e146 : e6ca             [ 5] 	inc df_exeoff
e148 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e14b : 205ff1           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e14e : e6ca             [ 5] 	inc df_exeoff
e150 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e153 : 205ff1           [ 6] 	jsr df_rst_pushWord
                             	; save the counter slot address
e156 : fa               [ 4] 	plx
e157 : 68               [ 4] 	pla
e158 : 205ff1           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e15b : a98e             [ 2] 	lda #DFRT_FOR
e15d : 4c47f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank1.s --------------------------------

                             
e160 :                       df_rt_next
                             	; remember stack position
e160 : a4b8             [ 3] 	ldy df_rtstop
e162 : 5a               [ 3] 	phy
e163 : 2050f1           [ 6] 	jsr df_rst_popByte
e166 : c98e             [ 2] 	cmp #DFRT_FOR
e168 : d04f             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e16a : 206df1           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e16d : 86e9             [ 3] 	stx df_tmpptrd
e16f : 85ea             [ 3] 	sta df_tmpptrd+1
e171 : b2e9             [ 5] 	lda (df_tmpptrd)
e173 : 85e3             [ 3] 	sta df_tmpptra
e175 : a001             [ 2] 	ldy #1
e177 : b1e9             [ 5] 	lda (df_tmpptrd),y
e179 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; get step value, save in ptrb
e17b : 206df1           [ 6] 	jsr df_rst_popWord
e17e : 86e5             [ 3] 	stx df_tmpptrb
e180 : 85e6             [ 3] 	sta df_tmpptrb+1
e182 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e190 : a5e3             [ 3] 	lda df_tmpptra
e192 : 92e9             [ 5] 	sta (df_tmpptrd)
e194 : a001             [ 2] 	ldy #1
e196 : a5e4             [ 3] 	lda df_tmpptra+1
e198 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	
                             	; get end value, save in ptrb
e19a : 206df1           [ 6] 	jsr df_rst_popWord
e19d : 86e5             [ 3] 	stx df_tmpptrb
e19f : 85e6             [ 3] 	sta df_tmpptrb+1
e1a1 : 68               [ 4] 	pla					; check if if +ve or -ve step
e1a2 : 1005             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e1a4 : 205fdf           [ 6] 	jsr df_rt_gte_calc
e1a7 : 8003             [ 3] 	bra df_rt_next_check
e1a9 :                       df_rt_check_pos	
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e1a9 : 204bdf           [ 6] 	jsr df_rt_lte_calc
e1ac :                       df_rt_next_check
                             	; check if true or false
e1ac : 20a5f1           [ 6] 	jsr df_ost_popInt
e1af : e000             [ 2] 	cpx #0
                             	; if false then next is done
e1b1 : f003             [ 3] 	beq df_next_done
                             	; else we continue
e1b3 : 4c09dd           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e1b6 :                       df_next_done
e1b6 : 4cd7e1           [ 3] 	jmp df_rt_untilnext_done
                             	
e1b9 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             	
e1bb :                       df_rt_repeat
                             	; push statement address
e1bb : 2068dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e1be : a98c             [ 2] 	lda #DFRT_REPEAT
e1c0 : 4c47f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             	
e1c3 :                       df_rt_until
                             	; remember stack position
e1c3 : a4b8             [ 3] 	ldy df_rtstop
e1c5 : 5a               [ 3] 	phy
e1c6 : 2050f1           [ 6] 	jsr df_rst_popByte
e1c9 : c98c             [ 2] 	cmp #DFRT_REPEAT
e1cb : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e1cd : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e1d0 : e000             [ 2] 	cpx #0
e1d2 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e1d4 : 4c09dd           [ 3] 	jmp df_rt_pop_stat_go
                             
e1d7 :                       df_rt_untilnext_done
e1d7 : 7a               [ 4] 	ply
                             	; pop 2 items off stack (line address, index)
e1d8 : 206df1           [ 6] 	jsr df_rst_popWord
e1db : 4c50f1           [ 3] 	jmp df_rst_popByte
                             	; and continue
                             ;	clc
                             ;	rts
                             
e1de :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             	
e1e0 :                       df_rt_sadd
                             ;	clc
e1e0 : 60               [ 6] 	rts
                             	
e1e1 :                       df_rt_print_num
e1e1 : 20a5f1           [ 6] 	jsr df_ost_popInt
e1e4 : 18               [ 2] 	clc
e1e5 : 4cd3ca           [ 3] 	jmp print_a_to_d
                             ;	rts
                             	
e1e8 :                       df_rt_print_str
e1e8 : 209df1           [ 6] 	jsr df_ost_popStr
e1eb : 86e3             [ 3] 	stx df_tmpptra
e1ed : 85e4             [ 3] 	sta df_tmpptra+1
e1ef : a000             [ 2] 	ldy #0
e1f1 :                       df_rt_print_str_ch
e1f1 : b1e3             [ 5] 	lda (df_tmpptra),y
e1f3 : f006             [ 3] 	beq df_rt_print_str_done
e1f5 : 2060c5           [ 6] 	jsr io_put_ch
e1f8 : c8               [ 2] 	iny
e1f9 : 80f6             [ 3] 	bra df_rt_print_str_ch
e1fb :                       df_rt_print_str_done
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank1.s --------------------------------

                             ;	clc
e1fb : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e1fc :                       df_rt_nextdatum
e1fc : a200             [ 2] 	ldx #0
                             	; load data line offset
e1fe : a4d8             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e200 : a5d7             [ 3] 	lda df_currdat+1
e202 : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e20c :                       df_rt_datlinstart
                             	; if end of program then error
e20c : a1d6             [ 6] 	lda (df_currdat,x)
e20e : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
e210 : a003             [ 2] 	ldy #3
e212 : 84d8             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e214 :                       df_rt_datastatement
e214 : c8               [ 2] 	iny
e215 : 98               [ 2] 	tya
                             	; end of line reached?
e216 : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e218 : d00e             [ 3] 	bne df_rt_getdatatk
e21a :                       df_rt_datnextlin
                             	; if so then go to next line
e21a : 18               [ 2] 	clc
e21b : a5d6             [ 3] 	lda df_currdat
e21d : 61d6             [ 6] 	adc (df_currdat,x)
e21f : 85d6             [ 3] 	sta df_currdat
                             	_bcc 2
                             
e223 : e6d7             [ 5] 	inc df_currdat+1
e225 : 4c0ce2           [ 3] 	jmp df_rt_datlinstart
e228 :                       df_rt_getdatatk
e228 : b1d6             [ 5] 	lda (df_currdat),y
e22a : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e22c : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e22e : d0ea             [ 3] 	bne df_rt_datnextlin
e230 : 84d8             [ 3] 	sty df_datoff
e232 :                       df_rt_skipinitdataptr
e232 : 98               [ 2] 	tya
                             	; end of line reached?
e233 : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e235 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e237 : b1d6             [ 5] 	lda (df_currdat),y
e239 : c920             [ 2] 	cmp #DFTK_ESCVAL
e23b : c8               [ 2] 	iny
e23c : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e23e : 88               [ 2] 	dey
e23f : 84d8             [ 3] 	sty df_datoff
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank1.s --------------------------------

e241 : 60               [ 6] 	rts
e242 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e244 :                       df_rt_readdatum
                             	; update data pointer to next data item
e244 : 20fce1           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e247 : 20eddc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e24a : 86e5             [ 3] 	stx df_tmpptrb
e24c : 85e6             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e24e : a5c8             [ 3] 	lda df_currlin
e250 : 48               [ 3] 	pha
e251 : a5c9             [ 3] 	lda df_currlin+1
e253 : 48               [ 3] 	pha
e254 : a5ca             [ 3] 	lda df_exeoff
e256 : 48               [ 3] 	pha
e257 : a5c0             [ 3] 	lda df_eolidx
e259 : 48               [ 3] 	pha
e25a : a5c1             [ 3] 	lda df_nxtstidx
e25c : 48               [ 3] 	pha
e25d : a5c2             [ 3] 	lda df_curstidx
e25f : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
e268 : a5d8             [ 3] 	lda df_datoff
e26a : 85ca             [ 3] 	sta df_exeoff
e26c : a200             [ 2] 	ldx #0
e26e : a1d6             [ 6] 	lda (df_currdat,x)
e270 : 85c0             [ 3] 	sta df_eolidx
e272 : 85c1             [ 3] 	sta df_nxtstidx
e274 : a903             [ 2] 	lda #3
e276 : 85c2             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
e278 : a1e3             [ 6] 	lda (df_tmpptra,x)
e27a : a8               [ 2] 	tay
                             	; get lvar point from tmpb
e27b : a6e5             [ 3] 	ldx df_tmpptrb
e27d : a5e6             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
e27f : 207ee5           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
e282 : a5ca             [ 3] 	lda df_exeoff
e284 : 85d8             [ 3] 	sta df_datoff
                             	; restore line settings
e286 : 68               [ 4] 	pla
e287 : 85c2             [ 3] 	sta df_curstidx
e289 : 68               [ 4] 	pla
e28a : 85c1             [ 3] 	sta df_nxtstidx
e28c : 68               [ 4] 	pla
e28d : 85c0             [ 3] 	sta df_eolidx
e28f : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank1.s --------------------------------

e290 : 85ca             [ 3] 	sta df_exeoff
e292 : 68               [ 4] 	pla
e293 : 85c9             [ 3] 	sta df_currlin+1
e295 : 68               [ 4] 	pla
e296 : 85c8             [ 3] 	sta df_currlin
e298 : 60               [ 6] 	rts
                             
                             
e299 :                       df_rt_read
                             	; find variable to read in to from current posit
e299 : a4ca             [ 3] 	ldy df_exeoff
e29b :                       df_rt_read_find_var
e29b : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
e29c : c4c1             [ 3] 	cpy df_nxtstidx
e29e : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
e2a0 : b1c8             [ 5] 	lda (df_currlin),y
e2a2 : c920             [ 2] 	cmp #DFTK_ESCVAL
e2a4 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
e2a6 : 84ca             [ 3] 	sty df_exeoff
                             	; go and read in the value
e2a8 : 2044e2           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
e2ab : 4c99e2           [ 3] 	jmp df_rt_read
                             
e2ae :                       df_rt_read_done
                             	; save position
e2ae : 84ca             [ 3] 	sty df_exeoff
e2b0 : 60               [ 6] 	rts
                             
                             
e2b1 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
e2b1 : 20eddc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e2b4 : 86e5             [ 3] 	stx df_tmpptrb
e2b6 : 85e6             [ 3] 	sta df_tmpptrb+1
e2b8 : a078             [ 2] 	ldy #120
                             	; go read a line of input
                             	; X,A is ptr has the input, Y is size
e2ba : 38               [ 2] 	sec
e2bb : 206fc5           [ 6] 	jsr io_read_line
                             	; check the type
e2be : b2e3             [ 5] 	lda (df_tmpptra)
e2c0 : 2904             [ 2] 	and #DFVVT_STR
e2c2 : d008             [ 3] 	bne df_rt_input_str
e2c4 : b2e3             [ 5] 	lda (df_tmpptra)
e2c6 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e2c8 : d003             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
e2ca : 8018             [ 3] 	bra df_rt_input_err
e2cc :                       df_rt_input_str
                             	; If string then done!
                             ;	clc
e2cc : 60               [ 6] 	rts
                             
e2cd :                       df_rt_input_num
                             	; X,A = address from tmpb, linbuff must be on pa
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank1.s --------------------------------

e2cd : a6e5             [ 3] 	ldx df_tmpptrb
e2cf : a5e6             [ 3] 	lda df_tmpptrb+1
e2d1 : a000             [ 2] 	ldy #0				; any numeric format
e2d3 : 2094c8           [ 6] 	jsr con_n_to_a
e2d6 : b00c             [ 3] 	bcs df_rt_input_err
e2d8 : a000             [ 2] 	ldy #0
e2da : a585             [ 3] 	lda num_a
e2dc : 91e5             [ 5] 	sta (df_tmpptrb),y
e2de : c8               [ 2] 	iny
e2df : a586             [ 3] 	lda num_a+1
e2e1 : 91e5             [ 5] 	sta (df_tmpptrb),y
                             ;	clc
e2e3 : 60               [ 6] 	rts
e2e4 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             	
e2e6 :                       df_rt_local
                             	; get current local count off rt stack
e2e6 : 2050f1           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
e2e9 : 48               [ 3] 	pha
e2ea : a4ca             [ 3] 	ldy df_exeoff
e2ec : 88               [ 2] 	dey
e2ed :                       df_rt_local_findesc
e2ed : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
e2ee : c4c1             [ 3] 	cpy df_nxtstidx
e2f0 : f019             [ 4] 	beq df_rt_local_done
                             	; find a var
e2f2 : b1c8             [ 5] 	lda (df_currlin),y
e2f4 : c911             [ 2] 	cmp #DFTK_VAR
e2f6 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
e2f8 : c8               [ 2] 	iny
                             	; get var slot in A,X
e2f9 : b1c8             [ 5] 	lda (df_currlin),y
e2fb : aa               [ 2] 	tax
e2fc : c8               [ 2] 	iny
e2fd : b1c8             [ 5] 	lda (df_currlin),y
e2ff : 84ca             [ 3] 	sty df_exeoff
                             	; localise this variable
e301 : 2033f1           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
e304 : 68               [ 4] 	pla
e305 : 1a               [ 2] 	inc a
e306 : 48               [ 3] 	pha
e307 : a4ca             [ 3] 	ldy df_exeoff
e309 : 80e2             [ 4] 	bra df_rt_local_findesc
e30b :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
e30b : 68               [ 4] 	pla
e30c : 4c47f1           [ 3] 	jmp df_rst_pushByte
                             ;	clc
                             ;	rts
                             	
e30f :                       df_rt_redim
e30f : 38               [ 2] 	sec
e310 : b001             [ 3] 	bcs df_rt_dim_main
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank1.s --------------------------------

e312 :                       df_rt_dim
e312 : 18               [ 2] 	clc
e313 :                       df_rt_dim_main
e313 : 08               [ 3] 	php
e314 :                       df_rt_dim_loop
e314 : a4ca             [ 3] 	ldy df_exeoff
e316 : 88               [ 2] 	dey
e317 :                       df_rt_dim_findesc
                             	; check end of line
e317 : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
e318 : c4c1             [ 3] 	cpy df_nxtstidx
e31a : f076             [ 3] 	beq df_rt_dim_done
                             	; find a var
e31c : b1c8             [ 5] 	lda (df_currlin),y
e31e : c911             [ 2] 	cmp #DFTK_VAR
e320 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
e322 : c8               [ 2] 	iny
                             	; get var address
e323 : b1c8             [ 5] 	lda (df_currlin),y
e325 : 85e3             [ 3] 	sta df_tmpptra
e327 : c8               [ 2] 	iny
e328 : b1c8             [ 5] 	lda (df_currlin),y
e32a : 85e4             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
e32c : c8               [ 2] 	iny
e32d : 84ca             [ 3] 	sty df_exeoff
                             	; If re-dim, don't check for existing dimensions
e32f : 28               [ 4] 	plp
e330 : 08               [ 3] 	php
e331 : b006             [ 3] 	bcs df_rt_skip_dim_chk
                             	; check if already dim'd
e333 : a003             [ 2] 	ldy #DFVVT_DIM1
e335 : b1e3             [ 5] 	lda (df_tmpptra),y
e337 : d05b             [ 3] 	bne df_rt_dim_err
e339 :                       df_rt_skip_dim_chk
                             	; Save slot address found earlier
e339 : a5e3             [ 3] 	lda df_tmpptra
e33b : 48               [ 3] 	pha
e33c : a5e4             [ 3] 	lda df_tmpptra+1
e33e : 48               [ 3] 	pha
e33f : 201ada           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
e342 : 68               [ 4] 	pla
e343 : 85e4             [ 3] 	sta df_tmpptra+1
e345 : 68               [ 4] 	pla
e346 : 85e3             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
e348 : 5a               [ 3] 	phy
e349 : da               [ 3] 	phx
e34a : a003             [ 2] 	ldy #DFVVT_DIM1
e34c : 68               [ 4] 	pla
e34d : 91e3             [ 5] 	sta (df_tmpptra),y
e34f : c8               [ 2] 	iny
e350 : 68               [ 4] 	pla
e351 : 91e3             [ 5] 	sta (df_tmpptra),y	
e353 : 28               [ 4] 	plp
e354 : 08               [ 3] 	php
e355 : b02f             [ 3] 	bcs df_rt_dim_set_type
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank1.s --------------------------------

e357 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
e357 : a003             [ 2] 	ldy #DFVVT_DIM1
e359 : b1e3             [ 5] 	lda (df_tmpptra),y
e35b : 8585             [ 3] 	sta num_a
e35d : 6486             [ 3] 	stz num_a+1
e35f : c8               [ 2] 	iny
e360 : b1e3             [ 5] 	lda (df_tmpptra),y
e362 : d002             [ 3] 	bne df_rt_dim2_nz
e364 : a901             [ 2] 	lda #1
e366 :                       df_rt_dim2_nz
e366 : 8589             [ 3] 	sta num_b
e368 : 648a             [ 3] 	stz num_b+1
e36a : 208bcb           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
e36d : b2e3             [ 5] 	lda (df_tmpptra)
e36f : 2901             [ 2] 	and #DFVVT_INT
e371 : f004             [ 3] 	beq df_rt_dim2_mul2
e373 : 0685             [ 5] 	asl num_a
e375 : 2686             [ 5] 	rol num_a+1
e377 :                       df_rt_dim2_mul2	
                             	; finally, we have a size of array
e377 : a685             [ 3] 	ldx num_a
e379 : a586             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
e37b : 20c2f1           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
e37e : a002             [ 2] 	ldy #DFVVT_HI
e380 : 91e3             [ 5] 	sta (df_tmpptra),y
e382 : 8a               [ 2] 	txa
e383 : 88               [ 2] 	dey
e384 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
e386 :                       df_rt_dim_set_type
e386 : b2e3             [ 5] 	lda (df_tmpptra)
e388 : 0980             [ 2] 	ora #DFVVT_PTR
e38a : 92e3             [ 5] 	sta (df_tmpptra)
                             	; don't increment byte again - go check for more
e38c : 8086             [ 3] 	bra df_rt_dim_loop	
e38e :                       df_rt_dim_next_byte
e38e : e6ca             [ 5] 	inc df_exeoff
e390 : 8080             [ 3] 	bra df_rt_dim
e392 :                       df_rt_dim_done
                             ;	clc
e392 : 28               [ 4] 	plp
e393 : 60               [ 6] 	rts
e394 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
e396 :                       df_rt_cls
                             	; set cursror position to top left first
e396 : a200             [ 2] 	ldx #0
e398 : a000             [ 2] 	ldy #0
e39a : 20a6c3           [ 6] 	jsr _gr_set_cur
e39d : 4ccec2           [ 3] 	jmp _gr_cls
                             ;	clc
                             ;	rts
                             	
e3a0 :                       df_rt_plot
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank1.s --------------------------------

                             	; evaluate the expression
e3a0 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e3a3 : da               [ 3] 	phx
                             	; jump over comma
e3a4 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e3a6 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e3a9 : da               [ 3] 	phx
                             	; jump over comma
e3aa : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e3ac : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
                             	_df_ost_peekType
                             
                             	; if >=0x80 then a pointer / string
e3b4 : 2904             [ 2] 	and #DFST_STR
e3b6 : d014             [ 3] 	bne df_rt_plotstr
                             	; else it is int
e3b8 : 20a5f1           [ 6] 	jsr df_ost_popInt
                             	; put low byte of pop result in a
e3bb : 8a               [ 2] 	txa
e3bc : a622             [ 3] 	ldx vdp_base+vdp_gmode	; Check if in hires mode
e3be : e010             [ 2] 	cpx #0x10
e3c0 : b005             [ 3] 	bcs df_rt_hchar
                             	; get y and x in that order
e3c2 : 7a               [ 4] 	ply
e3c3 : fa               [ 4] 	plx
e3c4 : 4c46c3           [ 3] 	jmp _gr_plot
e3c7 :                       df_rt_hchar
                             	; get y and x in that order
e3c7 : 7a               [ 4] 	ply
e3c8 : fa               [ 4] 	plx
e3c9 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e3cc :                       df_rt_plotstr
                             	; pop string pointer
e3cc : 20a1f1           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
e3cf : 86e3             [ 3] 	stx df_tmpptra
e3d1 : 85e4             [ 3] 	sta df_tmpptra+1
e3d3 : a422             [ 3] 	ldy vdp_base+vdp_gmode	; Check if in hires mode
e3d5 : c010             [ 2] 	cpy #0x10
e3d7 : b017             [ 3] 	bcs df_rt_hplotstr
                             	; get y and x in that order
e3d9 : 7a               [ 4] 	ply
e3da : fa               [ 4] 	plx
                             	; set cursror position
e3db :                       df_rt_plotstrch
e3db : b2e3             [ 5] 	lda (df_tmpptra)
e3dd : f010             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e3e5 : da               [ 3] 	phx
e3e6 : 5a               [ 3] 	phy
e3e7 : 2046c3           [ 6] 	jsr _gr_plot
e3ea : 7a               [ 4] 	ply
e3eb : fa               [ 4] 	plx
e3ec : e8               [ 2] 	inx
e3ed : 80ec             [ 3] 	bra df_rt_plotstrch
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank1.s --------------------------------

e3ef :                       df_rt_plotstrdone
e3ef : 60               [ 6] 	rts
e3f0 :                       df_rt_hplotstr
                             	; get y and x in that order
e3f0 : 7a               [ 4] 	ply
e3f1 : fa               [ 4] 	plx
                             	; set cursror position
e3f2 :                       df_rt_hplotstrch
e3f2 : b2e3             [ 5] 	lda (df_tmpptra)
e3f4 : f0f9             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e3fc : da               [ 3] 	phx
e3fd : 5a               [ 3] 	phy
e3fe : 205ec3           [ 6] 	jsr _gr_hchar
e401 : 7a               [ 4] 	ply
e402 : 68               [ 4] 	pla
e403 : 18               [ 2] 	clc			; Assume pitch 8 for now
e404 : 6908             [ 2] 	adc #8
e406 : aa               [ 2] 	tax
e407 : 80e9             [ 4] 	bra df_rt_hplotstrch
                             
e409 :                       df_rt_cursor
                             	; evaluate the expression
e409 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
e40c : 8612             [ 3] 	stx vdp_curoff
                             ;	clc
e40e : 60               [ 6] 	rts
                             		
e40f :                       df_rt_himem
                             	; evaluate the expression
e40f : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
e412 : 8e670c           [ 4] 	stx df_memtop
e415 : 8d680c           [ 4] 	sta df_memtop+1
                             	; now clear everything down
e418 : 4ce7f1           [ 3] 	jmp df_clear
e41b : 60               [ 6] 	rts
                             
e41c :                       df_rt_mode
e41c :                       df_rt_hires
                             	; evaluate the expression
e41c : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; only interested in low byte
e41f : 8a               [ 2] 	txa
e420 : 4cc6c1           [ 3] 	jmp _gr_init_screen
                             	
e423 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
e423 : 209ed8           [ 6] 	jsr df_rt_getnval
e426 : 862e             [ 3] 	stx gr_scrngeom+gr_pixmode
                             ;	clc
e428 : 60               [ 6] 	rts
                             
e429 :                       df_rt_pixmask
                             	; evaluate the expression X = mask
e429 : 209ed8           [ 6] 	jsr df_rt_getnval
e42c : 862f             [ 3] 	stx gr_scrngeom+gr_pixmask
                             ;	clc
e42e : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank1.s --------------------------------

                             
e42f :                       df_rt_pixcol
                             	; evaluate the expression X = col
e42f : 209ed8           [ 6] 	jsr df_rt_getnval
e432 : 8630             [ 3] 	stx gr_scrngeom+gr_pixcol
                             ;	clc
e434 : 60               [ 6] 	rts
                             
e435 :                       df_rt_put
                             	; evaluate the byte to put
e435 : 209ed8           [ 6] 	jsr df_rt_getnval
e438 : 8a               [ 2] 	txa
e439 : 2060c5           [ 6] 	jsr io_put_ch
e43c : 60               [ 6] 	rts
                             
e43d :                       df_rt_point
e43d : 205fdb           [ 6] 	jsr df_rt_parm_2ints
e440 : a6e3             [ 3] 	ldx df_tmpptra
e442 : a4e5             [ 3] 	ldy df_tmpptrb
e444 : 4c76c3           [ 3] 	jmp _gr_point
                             ;	clc
                             ;	rts
                             
e447 :                       df_rt_hplot
e447 : 206adb           [ 6] 	jsr df_rt_parm_3ints
e44a : a6e3             [ 3] 	ldx df_tmpptra				; load x
e44c : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e44e : a5e7             [ 3] 	lda df_tmpptrc				; load char
e450 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e453 :                       df_rt_circle
e453 : 206adb           [ 6] 	jsr df_rt_parm_3ints
e456 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e458 : 8585             [ 3] 	sta num_a
e45a : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e45c : 8586             [ 3] 	sta num_a+1
e45e : a5e7             [ 3] 	lda df_tmpptrc				; load r
e460 : 8587             [ 3] 	sta num_a+2
e462 : 4c2ec3           [ 3] 	jmp _gr_circle
                             
e465 :                       df_rt_line
e465 : 2081db           [ 6] 	jsr df_rt_parm_4ints
e468 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e46a : 8585             [ 3] 	sta num_a
e46c : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e46e : 8586             [ 3] 	sta num_a+1
e470 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e472 : 8587             [ 3] 	sta num_a+2
e474 : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e476 : 8588             [ 3] 	sta num_a+3
e478 : 4cfec2           [ 3] 	jmp _gr_line
                             
e47b :                       df_rt_box
e47b : 2081db           [ 6] 	jsr df_rt_parm_4ints
e47e : a5e3             [ 3] 	lda df_tmpptra				; load x0
e480 : 8585             [ 3] 	sta num_a
e482 : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e484 : 8586             [ 3] 	sta num_a+1
e486 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e488 : 8587             [ 3] 	sta num_a+2
e48a : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e48c : 8588             [ 3] 	sta num_a+3
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank1.s --------------------------------

e48e : 4c16c3           [ 3] 	jmp _gr_box
                             
e491 :                       df_rt_shape
e491 : 206adb           [ 6] 	jsr df_rt_parm_3ints
e494 : a6e3             [ 3] 	ldx df_tmpptra				; load x
e496 : da               [ 3] 	phx
e497 : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e499 : 5a               [ 3] 	phy
e49a : a6e7             [ 3] 	ldx df_tmpptrc				; load coords[]
e49c : a5e8             [ 3] 	lda df_tmpptrc+1			; load coords[]
e49e : 205ff1           [ 6] 	jsr df_rst_pushWord
e4a1 :                       df_rt_shapeLoop
e4a1 : 206df1           [ 6] 	jsr df_rst_popWord			; Get pointer
e4a4 : 86e3             [ 3] 	stx df_tmpptra
e4a6 : 85e4             [ 3] 	sta df_tmpptra+1
e4a8 : b2e3             [ 5] 	lda (df_tmpptra)			; Get X coord as int
e4aa : 853f             [ 3] 	sta tmp_v1
e4ac : a001             [ 2] 	ldy #1
e4ae : b1e3             [ 5] 	lda (df_tmpptra),y			; Get X hi byte
e4b0 : 8540             [ 3] 	sta tmp_v1+1
e4b2 : c8               [ 2] 	iny
e4b3 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y coord as int
e4b5 : 8543             [ 3] 	sta tmp_b
e4b7 : c8               [ 2] 	iny
e4b8 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y hi byte
e4ba : 8544             [ 3] 	sta tmp_b+1
e4bc : a53f             [ 3] 	lda tmp_v1					; If X and Y low are zero then en
e4be : d007             [ 3] 	bne df_rt_shapeCalc
e4c0 : a543             [ 3] 	lda tmp_b
e4c2 : d003             [ 3] 	bne df_rt_shapeCalc
                             	; Got here then must be finished
e4c4 : 68               [ 4] 	pla							; Pop bytes off 6502 stack
e4c5 : 68               [ 4] 	pla
e4c6 : 60               [ 6] 	rts
e4c7 :                       df_rt_shapeCalc
e4c7 : 18               [ 2] 	clc
e4c8 : a5e3             [ 3] 	lda df_tmpptra				; Increment coord pointer 
e4ca : 6904             [ 2] 	adc #4						; 2 ints is 4 bytes per coord
e4cc : aa               [ 2] 	tax
e4cd : a5e4             [ 3] 	lda df_tmpptra+1
e4cf : 6900             [ 2] 	adc #0
e4d1 : 205ff1           [ 6] 	jsr df_rst_pushWord			; Put pointer on runtime s
                             	; previous cursor is starting position
                             	; plus delta is new position
e4d4 : 68               [ 4] 	pla							; get y0 off stack
e4d5 : 18               [ 2] 	clc
e4d6 : 8586             [ 3] 	sta num_a+1
e4d8 : 6543             [ 3] 	adc tmp_b
e4da : 8588             [ 3] 	sta num_a+3					; y1 = y0+dy
e4dc : aa               [ 2] 	tax							; save y1 in X reg
e4dd : 68               [ 4] 	pla							; get x0 off stack
e4de : 18               [ 2] 	clc
e4df : 8585             [ 3] 	sta num_a					; x0
e4e1 : 653f             [ 3] 	adc tmp_v1
e4e3 : 8587             [ 3] 	sta num_a+2					; x1
e4e5 : 48               [ 3] 	pha							; save x1
e4e6 : da               [ 3] 	phx							; save y1
e4e7 : 20fec2           [ 6] 	jsr _gr_line				; line x0,y0,x1,y1
e4ea : 80b5             [ 3] 	bra df_rt_shapeLoop			; go back to next coord
                             	
e4ec :                       df_rt_wait
                             	; evaluate the expression
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank1.s --------------------------------

e4ec : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
e4ef : a8               [ 2] 	tay
e4f0 :                       df_rt_wait_loop
                             	; check X,Y==0
e4f0 : 8a               [ 2] 	txa
e4f1 : d004             [ 3] 	bne df_rt_wait_countdown
e4f3 : 98               [ 2] 	tya
e4f4 : d001             [ 3] 	bne df_rt_wait_countdown
                             	; Done (wait 0 returns immediately)
e4f6 : 60               [ 6] 	rts
e4f7 :                       df_rt_wait_countdown
                             	; get vdp low byte timer val in A for tick wait
e4f7 : a510             [ 3] 	lda vdp_int_cnt
e4f9 : ca               [ 2] 	dex
e4fa : e0ff             [ 2] 	cpx #0xff
e4fc : d001             [ 3] 	bne df_rt_wait_tick
e4fe : 88               [ 2] 	dey
e4ff :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
e4ff : c510             [ 3] 	cmp vdp_int_cnt
e501 : f0fc             [ 4] 	beq df_rt_wait_tick
e503 : d0eb             [ 4] 	bne df_rt_wait_loop		; Always
                             	
e505 :                       df_rt_printat
                             	; Get x,y
e505 : 205fdb           [ 6] 	jsr df_rt_parm_2ints
e508 : a6e3             [ 3] 	ldx df_tmpptra
e50a : a4e5             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
e50c : 20a6c3           [ 6] 	jsr _gr_set_cur
                             	; and continue to normal print command
e50f :                       df_rt_print
e50f : a4ca             [ 3] 	ldy df_exeoff
e511 : 88               [ 2] 	dey
e512 :                       df_rt_print_ws
e512 : c8               [ 2] 	iny
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
e513 : c4c1             [ 3] 	cpy df_nxtstidx
e515 : f026             [ 3] 	beq df_rt_print_done
e517 : b1c8             [ 5] 	lda (df_currlin),y
e519 : c93a             [ 2] 	cmp #':'
e51b : f020             [ 3] 	beq df_rt_print_done
e51d : c920             [ 2] 	cmp #' '
e51f : f0f1             [ 3] 	beq df_rt_print_ws
e521 : c92c             [ 2] 	cmp #','
e523 : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
e525 : 84ca             [ 3] 	sty df_exeoff
                             	
                             	; if starts with string literal then process sev
                             ;	cmp #DFTK_STRLIT
                             ;	beq df_rt_print_string
                             	; else evaluate a numeric
e527 : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
                             	_df_ost_peekType
                             
e52f : 2904             [ 2] 	and #DFST_STR
e531 : d005             [ 3] 	bne df_rt_print_gotstr
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank1.s --------------------------------

e533 : 20e1e1           [ 6] 	jsr df_rt_print_num
e536 : 80d7             [ 3] 	bra df_rt_print
e538 :                       df_rt_print_gotstr
e538 : 20e8e1           [ 6] 	jsr df_rt_print_str
e53b : 80d2             [ 3] 	bra df_rt_print
                             ;df_rt_print_string
                             ;	; point to string accumulator
                             ;	ldx df_sevalptr
                             ;	lda df_sevalptr+1
                             ;	jsr df_rt_seval
                             ;	bra df_rt_print_gotstr
e53d :                       df_rt_print_done
e53d : 84ca             [ 3] 	sty df_exeoff
e53f : 60               [ 6] 	rts
                             	
e540 :                       df_rt_println
e540 : 200fe5           [ 6] 	jsr df_rt_print
e543 : a90d             [ 2] 	lda #UTF_CR
e545 : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
e548 :                       df_rt_nassign
e548 : 48               [ 3] 	pha
e549 : da               [ 3] 	phx
                             	; now go evaluate expression in to A,X
e54a : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to
e54d : 7a               [ 4] 	ply
e54e : 84e3             [ 3] 	sty df_tmpptra
e550 : 7a               [ 4] 	ply
e551 : 84e4             [ 3] 	sty df_tmpptra+1
                             	; save X,A int in contents section
e553 : a001             [ 2] 	ldy #1
e555 : 91e3             [ 5] 	sta (df_tmpptra),y
e557 : 8a               [ 2] 	txa
e558 : 88               [ 2] 	dey
e559 : 91e3             [ 5] 	sta (df_tmpptra),y
                             
e55b : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
e55c :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being X,A
e55c : 2058d9           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
e55f : 4c9df1           [ 3] 	jmp df_ost_popStr
                             	
                             ;	clc
                             ;	rts
                             
                             ; generate lvar from a var token ready for assign
e562 :                       df_rt_generate_lvar
                             	; move past escape val
e562 : a4ca             [ 3] 	ldy df_exeoff
e564 : c8               [ 2] 	iny
                             	; pointing to variable index
e565 : b1c8             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank1.s --------------------------------

e567 : 85e3             [ 3] 	sta df_tmpptra
e569 : c8               [ 2] 	iny
e56a : b1c8             [ 5] 	lda (df_currlin),y
e56c : 84ca             [ 3] 	sty df_exeoff
e56e : 85e4             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
e570 : b2e3             [ 5] 	lda (df_tmpptra)
e572 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
e573 : 38               [ 2] 	sec
e574 : 203eda           [ 6] 	jsr df_rt_eval_var
e577 : 20a1f1           [ 6] 	jsr df_ost_popPtr
                             	; pull the type previously saved into Y
e57a : 7a               [ 4] 	ply
                             	; move past the lvar variable index
e57b : e6ca             [ 5] 	inc df_exeoff
                             ;	clc
e57d : 60               [ 6] 	rts
                             
                             ; assign
                             ; X,A,Y contain lvar pointer and type
e57e :                       df_rt_doassign
                             	; save A and put type Y in to A
e57e : 48               [ 3] 	pha
e57f : 98               [ 2] 	tya
e580 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
e582 : f004             [ 3] 	beq df_rt_assign_num
                             	; remember to restore A
                             	; jump to string expression evaluator
e584 : 68               [ 4] 	pla
e585 : 4c5ce5           [ 3] 	jmp df_rt_sassign
e588 :                       df_rt_assign_num
                             	; else jump to numeric expression evaluator
                             	; remember to restore A
e588 : 68               [ 4] 	pla
e589 : 4c48e5           [ 3] 	jmp df_rt_nassign
                             
                             ; general assignment execution
e58c :                       df_rt_assign
e58c : 2062e5           [ 6] 	jsr df_rt_generate_lvar
                             	; go and do the assignment
e58f : 4c7ee5           [ 3] 	jmp df_rt_doassign
                             	
                             ; comment or data token is ignored by runtime
e592 :                       df_rt_comment
e592 :                       df_rt_data
                             ;	clc
e592 : 60               [ 6] 	rts
                             
                             	
                             ; run token	
e593 :                       df_rt_run
                             ;	sec
e593 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
e594 :                       df_rt_eos
e594 : a4ca             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank1.s --------------------------------

                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
e596 : c4c1             [ 3] 	cpy df_nxtstidx
e598 : f008             [ 3] 	beq df_rt_eos_true
e59a : b1c8             [ 5] 	lda (df_currlin),y
e59c : c93a             [ 2] 	cmp #':'
e59e : f002             [ 3] 	beq df_rt_eos_true
e5a0 : 18               [ 2] 	clc
e5a1 : 60               [ 6] 	rts
e5a2 :                       df_rt_eos_true
e5a2 : 38               [ 2] 	sec
e5a3 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
e5a4 :                       df_rt_renum
e5a4 : e6ca             [ 5] 	inc df_exeoff
e5a6 : 206adb           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
e5a9 : a6e3             [ 3] 	ldx df_tmpptra
e5ab : a5e4             [ 3] 	lda df_tmpptra+1
e5ad : 20b6d6           [ 6] 	jsr df_pg_find_line
e5b0 : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
e5b4 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
e5b4 : 86e9             [ 3] 	stx df_tmpptrd
e5b6 : 85ea             [ 3] 	sta df_tmpptrd+1
e5b8 :                       df_rt_renum_do
                             	; if not end of program
e5b8 : a000             [ 2] 	ldy #0
e5ba : b1e9             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
e5bc : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
e5be : 60               [ 6] 	rts
e5bf :                       df_rt_renum_update
                             	; so set this line number to new line number
e5bf : a001             [ 2] 	ldy #DFTK_LINNUM
e5c1 : a5e5             [ 3] 	lda df_tmpptrb
e5c3 : 91e9             [ 5] 	sta (df_tmpptrd),y
e5c5 : c8               [ 2] 	iny
e5c6 : a5e6             [ 3] 	lda df_tmpptrb+1
e5c8 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
e5d7 :                       df_rt_renum_next
                             	; point ptrd to the next line
e5d7 : 18               [ 2] 	clc
e5d8 : a5e9             [ 3] 	lda df_tmpptrd
e5da : a200             [ 2] 	ldx #0
e5dc : 61e9             [ 6] 	adc (df_tmpptrd,x)
e5de : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e5e2 : e6ea             [ 5] 	inc df_tmpptrd+1
e5e4 : 4cb8e5           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank1.s --------------------------------

e5e7 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
e5ef : a5b3             [ 3] 	lda df_varcnt
e5f1 : 85e5             [ 3] 	sta df_tmpptrb
e5f3 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
e5f3 : a5e5             [ 3] 	lda df_tmpptrb
e5f5 : f03a             [ 4] 	beq df_rt_listpn_done
e5f7 : a000             [ 2] 	ldy #0
e5f9 : b1e3             [ 5] 	lda (df_tmpptra),y
e5fb : c95f             [ 2] 	cmp #'_'
e5fd : d01b             [ 4] 	bne df_rt_listnextvnt
e5ff :                       df_rt_listprocch
e5ff : b1e3             [ 5] 	lda (df_tmpptra),y
e601 : 2060c5           [ 6] 	jsr io_put_ch
e604 : aa               [ 2] 	tax
e605 : f003             [ 3] 	beq df_rt_listproccr
e607 : c8               [ 2] 	iny
e608 : d0f5             [ 4] 	bne df_rt_listprocch		; Always
e60a :                       df_rt_listproccr
e60a : a90d             [ 2] 	lda #UTF_CR
e60c : 2060c5           [ 6] 	jsr io_put_ch
e60f : 18               [ 2] 	clc
e610 :                       df_rt_listprocpause
e610 : 205dc5           [ 6] 	jsr io_get_ch
e613 : c920             [ 2] 	cmp #' '
e615 : d003             [ 3] 	bne df_rt_listnextvnt
e617 :                       df_rt_listwait
e617 : 38               [ 2] 	sec
e618 : b0f6             [ 3] 	bcs df_rt_listprocpause
e61a :                       df_rt_listnextvnt
e61a : b1e3             [ 5] 	lda (df_tmpptra),y
e61c : f003             [ 3] 	beq df_rt_listgotnext
e61e : c8               [ 2] 	iny
e61f : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
e621 :                       df_rt_listgotnext
                             	; dec vnt #
e621 : c6e5             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
e623 : c8               [ 2] 	iny
                             	; add this to vnt pointer
e624 : 18               [ 2] 	clc
e625 : 98               [ 2] 	tya
e626 : 65e3             [ 3] 	adc df_tmpptra
e628 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e62c : e6e4             [ 5] 	inc df_tmpptra+1
e62e : 4cf3e5           [ 3] 	jmp df_rt_listcheckvnt
e631 :                       df_rt_listpn_done
e631 : 60               [ 6] 	rts
                             
e632 :                       df_rt_listproc
                             	; A already contains '_'
e632 : 8d000a           [ 4] 	sta df_linbuff
e635 : a200             [ 2] 	ldx #0
e637 : a4ca             [ 3] 	ldy df_exeoff
e639 :                       df_rt_listp_copy
e639 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank1.s --------------------------------

e63a : e8               [ 2] 	inx
e63b : b1c8             [ 5] 	lda (df_currlin),y
e63d : 9d000a           [ 5] 	sta df_linbuff,x
e640 : 2018ce           [ 6] 	jsr df_tk_isalphanum
e643 : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
e645 : a200             [ 2] 	ldx #0
e647 : 86be             [ 3] 	stx df_linoff
                             	; save runtime pos
e649 : 84ca             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
e64b : 203acc           [ 6] 	jsr df_var_find
e64e : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
e650 : 86d0             [ 3] 	stx df_procptr
e652 : 85d1             [ 3] 	sta df_procptr+1
e654 : 208ddc           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
e657 : 86e3             [ 3] 	stx df_tmpptra
e659 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
e65b :                       df_rt_listp_findend
                             	; Go to next stat
e65b : 203adc           [ 6] 	jsr df_rt_nextstat
e65e : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
e660 : 98               [ 2] 	tya
e661 : 48               [ 3] 	pha
                             	; find the command
e662 :                       df_rt_listp_findcmd
e662 : c8               [ 2] 	iny
e663 : b1d2             [ 5] 	lda (df_lineptr),y
e665 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
e667 : 8545             [ 3] 	sta tmp_d
e669 : 68               [ 4] 	pla
e66a : a8               [ 2] 	tay
e66b : a545             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
e66d : c987             [ 2] 	cmp #DFRT_ENDDEF
e66f : f00b             [ 3] 	beq df_rt_listp_done
e671 : c986             [ 2] 	cmp #DFRT_DEF
e673 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
e675 : a6d2             [ 3] 	ldx df_lineptr
e677 : a5d3             [ 3] 	lda df_lineptr+1
e679 : 4c5be6           [ 3] 	jmp df_rt_listp_findend
e67c :                       df_rt_listp_done
                             	; Push end line on to stack
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank1.s --------------------------------

e67c : a5d3             [ 3] 	lda df_lineptr+1
e67e : 48               [ 3] 	pha
e67f : 8a               [ 2] 	txa
e680 : 48               [ 3] 	pha
e681 : a5d3             [ 3] 	lda df_lineptr+1
e683 : 4cbde6           [ 3] 	jmp df_rt_list_line
e686 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
e688 :                       df_rt_list
e688 : a900             [ 2] 	lda #0
e68a : 85eb             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
e68c : 20e0dc           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
e68f : 2094e5           [ 6] 	jsr df_rt_eos
                             	; so list whole program
e692 : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
e694 : c95f             [ 2] 	cmp #'_'
e696 : d003             [ 3] 	bne df_rt_list_all
e698 : 4c32e6           [ 3] 	jmp df_rt_listproc
e69b :                       df_rt_list_all
                             	;if '*' then display all procnames
e69b : c92a             [ 2] 	cmp #'*'
e69d : d003             [ 3] 	bne df_rt_list_linno
e69f : 4ce7e5           [ 3] 	jmp df_rt_listprocnames
e6a2 :                       df_rt_list_linno
                             	; else get 1st parameter
e6a2 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
e6a5 : 20b6d6           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
e6a8 : 86e3             [ 3] 	stx df_tmpptra
e6aa : 85e4             [ 3] 	sta df_tmpptra+1
e6ac : 4cb7e6           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
e6af :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
e6b7 :                       df_rt_listprgend
e6b7 : a5aa             [ 3] 	lda df_prgend+1
e6b9 : 48               [ 3] 	pha						; df_prgend hi at 102,x
e6ba : a5a9             [ 3] 	lda df_prgend
e6bc : 48               [ 3] 	pha						; df_prgend lo at 101,x
e6bd :                       df_rt_list_line
                             	; if line length = 0 then end of program
e6bd : a000             [ 2] 	ldy #0
e6bf : b1e3             [ 5] 	lda (df_tmpptra),y
e6c1 : f039             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
e6c3 : a5eb             [ 3] 	lda df_tmpptre
e6c5 : d010             [ 3] 	bne df_rt_list_line_cont
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank1.s --------------------------------

                             	; check for break, asynch get
e6c7 : 18               [ 2] 	clc
e6c8 :                       df_rt_list_synckey
e6c8 : a5eb             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
e6ca : d00b             [ 3] 	bne df_rt_list_line_cont
e6cc :                       df_rt_list_pause
e6cc : 205dc5           [ 6] 	jsr io_get_ch
e6cf : c920             [ 2] 	cmp #' '						; Space = PAUSE
e6d1 : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
e6d3 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e6d5 : f025             [ 3] 	beq df_rt_list_line_fin
e6d7 :                       df_rt_list_line_cont
e6d7 : a000             [ 2] 	ldy #0
e6d9 : 84be             [ 3] 	sty df_linoff
e6db : 20ffe6           [ 6] 	jsr df_rt_list_all_line
e6de :                       df_rt_list_next_line
                             	; new line
e6de : 201cc8           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
e6e1 : 18               [ 2] 	clc
e6e2 : a5e3             [ 3] 	lda df_tmpptra
e6e4 : a000             [ 2] 	ldy #0
e6e6 : 71e3             [ 5] 	adc (df_tmpptra),y
e6e8 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e6ec : e6e4             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
e6ee : ba               [ 2] 	tsx
e6ef : 38               [ 2] 	sec
e6f0 : bd0101           [ 4] 	lda 0x101,x						; get prend lo from stack frame
e6f3 : e5e3             [ 3] 	sbc df_tmpptra
e6f5 : bd0201           [ 4] 	lda 0x102,x						; get prend hi from stack frame
e6f8 : e5e4             [ 3] 	sbc df_tmpptra+1
e6fa : b0c1             [ 3] 	bcs df_rt_list_line
e6fc :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
e6fc : 68               [ 4] 	pla
e6fd : 68               [ 4] 	pla
e6fe :                       df_rt_list_line_only_fin
e6fe : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
e6ff :                       df_rt_list_all_line				; Start here to include nu
e6ff : 2039e8           [ 6] 	jsr df_rt_list_linnum
e702 :                       df_rt_list_line_only			; Start here for just the 
e702 : a003             [ 2] 	ldy #3
e704 : b1e3             [ 5] 	lda (df_tmpptra),y
e706 : 85d4             [ 3] 	sta df_lineidx
e708 : c8               [ 2] 	iny
e709 : 84be             [ 3] 	sty df_linoff
e70b :                       df_rt_list_decode
e70b : a4be             [ 3] 	ldy df_linoff
e70d : b1e3             [ 5] 	lda (df_tmpptra),y
e70f : 3010             [ 3] 	bmi df_rt_list_token
e711 : c920             [ 2] 	cmp #DFTK_ESCVAL
e713 : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
e715 : 2060c5           [ 6] 	jsr io_put_ch
e718 : 4c24e7           [ 3] 	jmp df_rt_list_nexttok
e71b :                       df_rt_list_escval
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank1.s --------------------------------

                             	; A and Y need to be valid on entry
e71b : 203de7           [ 6] 	jsr df_rt_list_decode_esc
e71e : 4c24e7           [ 3] 	jmp df_rt_list_nexttok
e721 :                       df_rt_list_token
e721 : 204ae8           [ 6] 	jsr df_rt_list_decode_token
e724 :                       df_rt_list_nexttok
                             	; advance the line offset
e724 : e6be             [ 5] 	inc df_linoff
e726 : a5be             [ 3] 	lda df_linoff
                             	; check if at end of line
e728 : a200             [ 2] 	ldx #0
e72a : c1e3             [ 6] 	cmp (df_tmpptra,x)
e72c : f0d0             [ 4] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
e72e : c5d4             [ 3] 	cmp df_lineidx
e730 : d0d9             [ 3] 	bne df_rt_list_decode
e732 : a8               [ 2] 	tay
                             	; save the next statement offset
e733 : b1e3             [ 5] 	lda (df_tmpptra),y
e735 : 85d4             [ 3] 	sta df_lineidx
e737 : c8               [ 2] 	iny
e738 : 84be             [ 3] 	sty df_linoff
e73a : 4c0be7           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
e73d :                       df_rt_list_decode_esc
                             	; jump over esc byte
e73d : c8               [ 2] 	iny
e73e : 84be             [ 3] 	sty df_linoff
e740 : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
e741 : b1e3             [ 5] 	lda (df_tmpptra),y
e743 : 85e5             [ 3] 	sta df_tmpptrb
e745 : c8               [ 2] 	iny
e746 : b1e3             [ 5] 	lda (df_tmpptra),y
e748 : 85e6             [ 3] 	sta df_tmpptrb+1
e74a : 88               [ 2] 	dey				; Y is on byte after esc byte
e74b : 68               [ 4] 	pla
                             	; x2 to get jmp offset
e74c : 0a               [ 2] 	asl a
e74d : aa               [ 2] 	tax
e74e : bd02de           [ 4] 	lda df_rt_escjmp,x
e751 : 85e7             [ 3] 	sta df_tmpptrc
e753 : bd03de           [ 4] 	lda df_rt_escjmp+1,x
e756 : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
e758 : 6ce700           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
e75b :                       df_rt_lst_reserved
e75b : 60               [ 6] 	rts
                             
                             ; decode a byte char
e75c :                       df_rt_lst_chr
e75c : a927             [ 2] 	lda #0x27			; Single quote
e75e : 2060c5           [ 6] 	jsr io_put_ch
e761 : a5e5             [ 3] 	lda df_tmpptrb
e763 : 2060c5           [ 6] 	jsr io_put_ch
e766 : a927             [ 2] 	lda #0x27			; Single quote
e768 : 2060c5           [ 6] 	jsr io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank1.s --------------------------------

e76b : c8               [ 2] 	iny
e76c : 84be             [ 3] 	sty df_linoff
e76e : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
e76f :                       df_rt_lst_hex_pre
e76f : a930             [ 2] 	lda #'0'
e771 : 2060c5           [ 6] 	jsr io_put_ch
e774 : a978             [ 2] 	lda #'x'
e776 : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
e779 :                       df_rt_lst_bythex
e779 : 206fe7           [ 6] 	jsr df_rt_lst_hex_pre
e77c :                       df_rt_lst_lo_hex
e77c : a5e5             [ 3] 	lda df_tmpptrb
e77e : 2049c8           [ 6] 	jsr str_a_to_x
e781 : 2060c5           [ 6] 	jsr io_put_ch
e784 : 8a               [ 2] 	txa
e785 : 2060c5           [ 6] 	jsr io_put_ch
e788 :                       df_rt_lst_const_done
e788 : c8               [ 2] 	iny
e789 : 84be             [ 3] 	sty df_linoff
e78b : 60               [ 6] 	rts
                             
                             ; Decode an int hex
e78c :                       df_rt_lst_inthex
e78c : 206fe7           [ 6] 	jsr df_rt_lst_hex_pre
e78f : a5e6             [ 3] 	lda df_tmpptrb+1
e791 : 2049c8           [ 6] 	jsr str_a_to_x
e794 : 2060c5           [ 6] 	jsr io_put_ch
e797 : 8a               [ 2] 	txa
e798 : 2060c5           [ 6] 	jsr io_put_ch
e79b : 4c7ce7           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
e79e :                       df_rt_lst_bytbin
e79e : a5e5             [ 3] 	lda df_tmpptrb
e7a0 : 85e6             [ 3] 	sta df_tmpptrb+1
e7a2 : a208             [ 2] 	ldx #8
e7a4 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
e7a6 :                       df_rt_lst_intbin
e7a6 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
e7a8 :                       df_rt_lst_bin
e7a8 : a930             [ 2] 	lda #'0'
e7aa : 2060c5           [ 6] 	jsr io_put_ch
e7ad : a962             [ 2] 	lda #'b'
e7af : 2060c5           [ 6] 	jsr io_put_ch
e7b2 :                       df_rt_lst_bit
e7b2 : a930             [ 2] 	lda #'0'
e7b4 : 06e5             [ 5] 	asl df_tmpptrb
e7b6 : 26e6             [ 5] 	rol df_tmpptrb+1
e7b8 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
e7ba :                       df_rt_lst_bit_skip0
e7ba : 2060c5           [ 6] 	jsr io_put_ch
e7bd : ca               [ 2] 	dex
e7be : d0f2             [ 3] 	bne df_rt_lst_bit
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank1.s --------------------------------

e7c0 : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
e7c2 :                       df_rt_lst_intdec
e7c2 : a6e5             [ 3] 	ldx df_tmpptrb
e7c4 : a5e6             [ 3] 	lda df_tmpptrb+1
e7c6 : c8               [ 2] 	iny
e7c7 : 84be             [ 3] 	sty df_linoff
e7c9 : 18               [ 2] 	clc
e7ca : 4cd3ca           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
e7cd :                       df_rt_lst_var
e7cd :                       df_rt_lst_proc
                             	; jump over the address bytes
e7cd : c8               [ 2] 	iny
e7ce : 84be             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
e7e0 : a000             [ 2] 	ldy #0
e7e2 :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
e7e2 : a5e9             [ 3] 	lda df_tmpptrd
e7e4 : c5e5             [ 3] 	cmp df_tmpptrb
e7e6 : d006             [ 3] 	bne df_rt_list_vvtend
e7e8 : a5ea             [ 3] 	lda df_tmpptrd+1
e7ea : c5e6             [ 3] 	cmp df_tmpptrb+1
e7ec : f021             [ 4] 	beq df_rt_list_gotvvt
e7ee :                       df_rt_list_vvtend
e7ee : b1e7             [ 5] 	lda (df_tmpptrc),y
e7f0 : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
e7f8 : 4ceee7           [ 3] 	jmp df_rt_list_vvtend
e7fb :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
e801 : 18               [ 2] 	clc
e802 : a5e9             [ 3] 	lda df_tmpptrd
e804 : 6908             [ 2] 	adc #DFVVT_SZ
e806 : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e80a : e6ea             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
e80c : 4ce2e7           [ 3] 	jmp df_rt_list_findvvt
e80f :                       df_rt_list_gotvvt
e80f : b1e7             [ 5] 	lda (df_tmpptrc),y
e811 : f025             [ 3] 	beq df_rt_list_donvvt
e813 : 2060c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
e81c : 4c0fe8           [ 3] 	jmp df_rt_list_gotvvt
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank1.s --------------------------------

                             
e81f :                       df_rt_lst_strlit
e81f : a922             [ 2] 	lda #0x22
e821 : 2060c5           [ 6] 	jsr io_put_ch
e824 : a4be             [ 3] 	ldy df_linoff
e826 :                       df_rt_lst_strlitch
e826 : b1e3             [ 5] 	lda (df_tmpptra),y
e828 : f007             [ 3] 	beq df_rt_lst_strlitdon
e82a : 2060c5           [ 6] 	jsr io_put_ch
e82d : c8               [ 2] 	iny
e82e : 4c26e8           [ 3] 	jmp df_rt_lst_strlitch
e831 :                       df_rt_lst_strlitdon
e831 : a922             [ 2] 	lda #0x22
e833 : 2060c5           [ 6] 	jsr io_put_ch
e836 : 84be             [ 3] 	sty df_linoff
e838 :                       df_rt_list_donvvt
e838 : 60               [ 6] 	rts
                             
e839 :                       df_rt_list_linnum
e839 : a001             [ 2] 	ldy #1
e83b : b1e3             [ 5] 	lda (df_tmpptra),y
e83d : aa               [ 2] 	tax
e83e : c8               [ 2] 	iny
e83f : b1e3             [ 5] 	lda (df_tmpptra),y
e841 : 18               [ 2] 	clc
e842 : 20d3ca           [ 6] 	jsr print_a_to_d
e845 : a920             [ 2] 	lda #0x20			; Always add a space after line num
e847 : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
e84a :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
e84a : c997             [ 2] 	cmp #DFRT_ASM
e84c : d003             [ 3] 	bne df_rt_list_decode_token_normal
e84e : 4c88e8           [ 3] 	jmp df_rt_asm_decode_token
e851 :                       df_rt_list_decode_token_normal
e851 : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
e853 : c902             [ 2] 	cmp #2
e855 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
e857 : 60               [ 6] 	rts
e858 :                       df_rt_list_do_decode_tkn
e858 : aa               [ 2] 	tax
e859 : a9c6             [ 2] 	lda #lo(df_tokensyms)
e85b : 85e5             [ 3] 	sta df_tmpptrb
e85d : a9d1             [ 2] 	lda #hi(df_tokensyms)
e85f : 85e6             [ 3] 	sta df_tmpptrb+1
e861 :                       df_rt_list_find_sym
e861 : 8a               [ 2] 	txa
e862 : f012             [ 3] 	beq df_rt_list_got_sym
e864 : a000             [ 2] 	ldy #0
e866 :                       df_rt_list_next_ch
e866 : b1e5             [ 5] 	lda (df_tmpptrb),y
e868 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
e86f : 68               [ 4] 	pla
e870 : 10f4             [ 3] 	bpl df_rt_list_next_ch
e872 :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
e872 : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank1.s --------------------------------

e873 : 4c61e8           [ 3] 	jmp df_rt_list_find_sym
e876 :                       df_rt_list_got_sym
e876 : a1e5             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
e878 : 08               [ 3] 	php
e879 : 297f             [ 2] 	and #0x7f
e87b : 2060c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e884 : 28               [ 4] 	plp
e885 : 10ef             [ 3] 	bpl df_rt_list_got_sym
e887 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
e888 :                       df_rt_asm_decode_token
e888 : e6be             [ 5] 	inc df_linoff		; Point to token after asm token
e88a : a4be             [ 3] 	ldy df_linoff
e88c : b1e3             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
e88e : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
e890 : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
e892 : 2060c5           [ 6] 	jsr io_put_ch
e895 : b1e3             [ 5] 	lda (df_tmpptra),y	;Get asm token back
e897 : 4c3de7           [ 3] 	jmp df_rt_list_decode_esc
e89a :                       df_rt_asm_decode_token_keyword
e89a : 297f             [ 2] 	and #0x7f			; Mask off MSB
e89c : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
e89d : a9d5             [ 2] 	lda #lo(df_asm_tokensyms)
e89f : 85e5             [ 3] 	sta df_tmpptrb
e8a1 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
e8a3 : 85e6             [ 3] 	sta df_tmpptrb+1
e8a5 :                       df_rt_list_find_asm_sym
e8a5 : 8a               [ 2] 	txa
e8a6 : f01b             [ 3] 	beq df_rt_list_got_asm_sym
e8a8 : a000             [ 2] 	ldy #0
e8aa :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
e8b0 : b1e5             [ 5] 	lda (df_tmpptrb),y
e8b2 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
e8b4 : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
e8b6 : 38               [ 2] 	sec					; Skip offset and mode bytes
e8b7 : 65e5             [ 3] 	adc df_tmpptrb
e8b9 : 85e5             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
e8bd : e6e6             [ 5] 	inc df_tmpptrb+1
e8bf : ca               [ 2] 	dex					; One less symbol to skip over
e8c0 : 4ca5e8           [ 3] 	jmp df_rt_list_find_asm_sym
e8c3 :                       df_rt_list_got_asm_sym
e8c3 : a1e5             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
e8c5 : c920             [ 2] 	cmp #' '
e8c7 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
e8c9 : 2060c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e8d2 : 4cc3e8           [ 3] 	jmp df_rt_list_got_asm_sym
e8d5 :                       df_rt_asm_decode_token_done
e8d5 : 60               [ 6] 	rts
                             
                             
e8d6 :                       df_rt_doke
e8d6 : 205fdb           [ 6] 	jsr df_rt_parm_2ints
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank1.s --------------------------------

e8d9 : a5e5             [ 3] 	lda df_tmpptrb
e8db : 92e3             [ 5] 	sta (df_tmpptra)
                             	; get high byte to doke
e8dd : a5e6             [ 3] 	lda df_tmpptrb+1
e8df : a001             [ 2] 	ldy #1
                             	; poke hi byte
e8e1 : 91e3             [ 5] 	sta (df_tmpptra),y
e8e3 : 60               [ 6] 	rts
                             	
e8e4 :                       df_rt_poke
e8e4 : 205fdb           [ 6] 	jsr df_rt_parm_2ints
e8e7 : a5e5             [ 3] 	lda df_tmpptrb
e8e9 : 92e3             [ 5] 	sta (df_tmpptra)
                             ;	clc
e8eb : 60               [ 6] 	rts
                             
e8ec :                       df_rt_vpoke
e8ec : 205fdb           [ 6] 	jsr df_rt_parm_2ints
e8ef : a6e3             [ 3] 	ldx df_tmpptra
e8f1 : a4e4             [ 3] 	ldy df_tmpptra+1
e8f3 : a5e5             [ 3] 	lda df_tmpptrb
e8f5 : 4c1ec4           [ 3] 	jmp _vdp_poke
                             ;	clc
                             ;	rts
                             
e8f8 :                       df_rt_nvpoke
e8f8 : 205fdb           [ 6] 	jsr df_rt_parm_2ints
e8fb : a6e3             [ 3] 	ldx df_tmpptra
e8fd : a5e5             [ 3] 	lda df_tmpptrb
e8ff : 4caec4           [ 3] 	jmp _rtc_nvwrite
                             ;	clc
e902 : 60               [ 6] 	rts
                             
e903 :                       df_rt_setvdp
e903 : 205fdb           [ 6] 	jsr df_rt_parm_2ints
e906 : a5e3             [ 3] 	lda df_tmpptra
e908 : a6e5             [ 3] 	ldx df_tmpptrb
e90a : 4cf0c5           [ 3] 	jmp vdp_wr_reg
                             ;	clc
                             ;	rts
                             
e90d :                       df_rt_colour
e90d : 206adb           [ 6] 	jsr df_rt_parm_3ints
                             	; colour is a combination of b and c parms
e910 : a5e5             [ 3] 	lda df_tmpptrb
e912 : 0a               [ 2] 	asl a
e913 : 0a               [ 2] 	asl a
e914 : 0a               [ 2] 	asl a
e915 : 0a               [ 2] 	asl a
e916 : 05e7             [ 3] 	ora df_tmpptrc
e918 : 48               [ 3] 	pha
e919 : a5e3             [ 3] 	lda df_tmpptra
e91b : c920             [ 2] 	cmp #32					; 32 = border colour
e91d : f00e             [ 3] 	beq df_rt_colour_border
                             	; else write to the colour table
                             	; first calculate the colour table address
e91f : 18               [ 2] 	clc
e920 : 6519             [ 3] 	adc vdp_base+vdp_addr_col
e922 : aa               [ 2] 	tax
e923 : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
e925 : 6900             [ 2] 	adc #0
e927 : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank1.s --------------------------------

e928 : 68               [ 4] 	pla
                             	; A = colour, YX = address
e929 : 2028c6           [ 6] 	jsr vdp_poke
e92c : 60               [ 6] 	rts
e92d :                       df_rt_colour_border
e92d : a907             [ 2] 	lda #7
e92f : fa               [ 4] 	plx
e930 : 4cf0c5           [ 3] 	jmp vdp_wr_reg
                             
e933 :                       df_rt_sprite
e933 : 209ddb           [ 6] 	jsr df_rt_parm_5ints
                             	; calculate the sprite number in vram
e936 : a5e3             [ 3] 	lda df_tmpptra
e938 : 0a               [ 2] 	asl a
e939 : 0a               [ 2] 	asl a
e93a : 18               [ 2] 	clc
e93b : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e93d : aa               [ 2] 	tax
e93e : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e940 : 6900             [ 2] 	adc #0
e942 : 78               [ 2] 	sei				; Disable interrupts
e943 : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e946 : a5e7             [ 3] 	lda df_tmpptrc
e948 : 2023c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e94b : a5e5             [ 3] 	lda df_tmpptrb
e94d : 2023c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the pattern name (tmpd)
e950 : a5e9             [ 3] 	lda df_tmpptrd
e952 : 2023c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the colour / ec byte (tmpe)
e955 : a5eb             [ 3] 	lda df_tmpptre
e957 : 2023c6           [ 6] 	jsr vdp_wr_vram
e95a : 58               [ 2] 	cli				; Enable interrupts
e95b : 60               [ 6] 	rts
                             
                             
                             ; copy pattern array to sprite pattern vram
                             ; pattern array is a mim 4 element int
e95c :                       df_rt_spritepat
e95c : 205fdb           [ 6] 	jsr df_rt_parm_2ints
                             	; save sprite number
e95f : 86e3             [ 3] 	stx df_tmpptra
e961 : 64e4             [ 3] 	stz df_tmpptra+1
                             	; multiply by 8 to get pattern offset
e963 : 06e3             [ 5] 	asl df_tmpptra
e965 : 26e4             [ 5] 	rol df_tmpptra+1
e967 : 06e3             [ 5] 	asl df_tmpptra
e969 : 26e4             [ 5] 	rol df_tmpptra+1
e96b : 06e3             [ 5] 	asl df_tmpptra
e96d : 26e4             [ 5] 	rol df_tmpptra+1
                             	; add offset to sprite pattern base
                             	; and put in X,A
e96f : a5e3             [ 3] 	lda df_tmpptra
e971 : 651f             [ 3] 	adc vdp_base+vdp_addr_spp
e973 : aa               [ 2] 	tax
e974 : a5e4             [ 3] 	lda df_tmpptra+1
e976 : 6520             [ 3] 	adc vdp_base+vdp_addr_spp+1
e978 : 78               [ 2] 	sei			; Disable interrupts
                             	; set vdp address
e979 : 20fdc5           [ 6] 	jsr vdp_wr_addr
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank1.s --------------------------------

                             	; start from beginning of array
e97c : a000             [ 2] 	ldy #0
e97e :                       df_rt_spritepat_line
                             	; get the sprite patten from array
e97e : b1e5             [ 5] 	lda (df_tmpptrb),y
                             	; and write to vdp
e980 : 2023c6           [ 6] 	jsr vdp_wr_vram
e983 : c8               [ 2] 	iny
                             	; do this for 8 bytes (4 elements)
e984 : c008             [ 2] 	cpy #8
e986 : d0f6             [ 3] 	bne df_rt_spritepat_line
e988 : 58               [ 2] 	cli			; Enable interrupts
e989 : 60               [ 6] 	rts
                             
e98a :                       df_rt_spritepos
e98a : 206adb           [ 6] 	jsr df_rt_parm_3ints
                             	; calculate the sprite number in vram
e98d : a5e3             [ 3] 	lda df_tmpptra
e98f : 0a               [ 2] 	asl a
e990 : 0a               [ 2] 	asl a
e991 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e993 : aa               [ 2] 	tax
e994 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e996 : 6900             [ 2] 	adc #0
e998 : 78               [ 2] 	sei
e999 : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e99c : a5e7             [ 3] 	lda df_tmpptrc
e99e : 2023c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e9a1 : a5e5             [ 3] 	lda df_tmpptrb
e9a3 : 2023c6           [ 6] 	jsr vdp_wr_vram
e9a6 : 58               [ 2] 	cli
e9a7 : 60               [ 6] 	rts
                             
                             ; common routine for col and nme variations
                             ; A contains offset in to sprite table to update
e9a8 :                       df_rt_spriteattr
                             	; save A which contains the offset
e9a8 : 48               [ 3] 	pha
e9a9 : 205fdb           [ 6] 	jsr df_rt_parm_2ints
                             	; calculate the sprite number in vram
e9ac : a5e3             [ 3] 	lda df_tmpptra
e9ae : 0a               [ 2] 	asl a
e9af : 0a               [ 2] 	asl a
e9b0 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e9b2 : 85e3             [ 3] 	sta df_tmpptra
e9b4 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e9b6 : 6900             [ 2] 	adc #0
e9b8 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; add offset and put in X,A to set VRAM address
e9ba : 68               [ 4] 	pla							; get offset from stack
e9bb : 65e3             [ 3] 	adc df_tmpptra
e9bd : aa               [ 2] 	tax
e9be : a5e4             [ 3] 	lda df_tmpptra+1
e9c0 : 6900             [ 2] 	adc #0
e9c2 : a8               [ 2] 	tay
e9c3 : a5e5             [ 3] 	lda df_tmpptrb
e9c5 : 4c28c6           [ 3] 	jmp vdp_poke
                             
e9c8 :                       df_rt_spritecol
                             	; offset is 3 for colour byte
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank1.s --------------------------------

e9c8 : a903             [ 2] 	lda #3
e9ca : 4ca8e9           [ 3] 	jmp df_rt_spriteattr
                             
e9cd :                       df_rt_spritenme
                             	; offset is 2 for name byte
e9cd : a902             [ 2] 	lda #2
e9cf : 4ca8e9           [ 3] 	jmp df_rt_spriteattr
                             
e9d2 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
e9d2 : a5e3             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
e9d4 : 3a               [ 2] 	dec a
e9d5 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
e9d7 : 0a               [ 2] 	asl a
e9d8 : aa               [ 2] 	tax
                             	; get low byte of period
e9d9 : a4e5             [ 3] 	ldy df_tmpptrb
e9db : 20eec3           [ 6] 	jsr _snd_set
                             	; increment reg number to high byte
e9de : e8               [ 2] 	inx
                             	; get high byte of period
e9df : a5e6             [ 3] 	lda df_tmpptrb+1
e9e1 : 290f             [ 2] 	and #0x0f
e9e3 : a8               [ 2] 	tay
                             	; set period
e9e4 : 20eec3           [ 6] 	jsr _snd_set
                             	; get volume register index (8 = channel 1)
e9e7 : 18               [ 2] 	clc
e9e8 : a5e3             [ 3] 	lda df_tmpptra
e9ea : 2903             [ 2] 	and #3
e9ec : 6907             [ 2] 	adc #7
e9ee : aa               [ 2] 	tax
                             	; get volume
e9ef : a5e7             [ 3] 	lda df_tmpptrc
e9f1 : 290f             [ 2] 	and #0x0f
e9f3 : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
e9f5 : 0910             [ 2] 	ora #0x10
e9f7 :                       df_rt_sound_env_skip
e9f7 : a8               [ 2] 	tay
e9f8 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	rts
                             
                             ; sound chan,period,volume	
e9fb :                       df_rt_sound
e9fb : 206adb           [ 6] 	jsr df_rt_parm_3ints
e9fe :                       df_rt_dosound
                             	; check which channel (0 = noise)
e9fe : a5e3             [ 3] 	lda df_tmpptra
ea00 : f003             [ 3] 	beq df_rt_sound_noise
ea02 : 4cd2e9           [ 3] 	jmp df_rt_snd_common
ea05 :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
ea05 : a206             [ 2] 	ldx #6
ea07 : a5e5             [ 3] 	lda df_tmpptrb
ea09 : 291f             [ 2] 	and #0x1f
ea0b : a8               [ 2] 	tay
ea0c : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank1.s --------------------------------

                             ;	rts
                             
                             ; music chan,octave,note,volume
ea0f :                       df_rt_music
ea0f : 2081db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
ea12 : 18               [ 2] 	clc
ea13 : a5e5             [ 3] 	lda df_tmpptrb
ea15 : 65e5             [ 3] 	adc df_tmpptrb
ea17 : 65e5             [ 3] 	adc df_tmpptrb
ea19 : 0a               [ 2] 	asl a
ea1a : 0a               [ 2] 	asl a
                             	; we have x12, now add note to get index
ea1b : 65e7             [ 3] 	adc df_tmpptrc
ea1d : 0a               [ 2] 	asl a
ea1e : a8               [ 2] 	tay
                             	; get period A,X (hi/lo)
ea1f : 20bec3           [ 6] 	jsr _snd_get_note
ea22 : 86e5             [ 3] 	stx df_tmpptrb
ea24 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
ea26 : a5e9             [ 3] 	lda df_tmpptrd
ea28 : 85e7             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
ea2a : 4cfee9           [ 3] 	jmp df_rt_dosound
                             	
                             	
                             ; play tonemask,noisemask,envelope,period
ea2d :                       df_rt_play
ea2d : 2081db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
ea30 : a5e3             [ 3] 	lda df_tmpptra
ea32 : 2907             [ 2] 	and #7
ea34 : 85e3             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
ea36 : a5e5             [ 3] 	lda df_tmpptrb
ea38 : 2907             [ 2] 	and #7
ea3a : 0a               [ 2] 	asl a
ea3b : 0a               [ 2] 	asl a
ea3c : 0a               [ 2] 	asl a
ea3d : 05e3             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; keep top 2 bits 0 as these are port a and b in
ea3f : 493f             [ 2] 	eor #0x3f
ea41 : a8               [ 2] 	tay
                             	; reg 7 is control register
ea42 : a207             [ 2] 	ldx #7
ea44 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 3 = envelope mode
ea47 : a5e7             [ 3] 	lda df_tmpptrc
ea49 : 290f             [ 2] 	and #0xf
ea4b : a8               [ 2] 	tay
                             	; 13 is envelope shape register
ea4c : a20d             [ 2] 	ldx #13
ea4e : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
ea51 : a20b             [ 2] 	ldx #11
                             	; get low
ea53 : a4e9             [ 3] 	ldy df_tmpptrd
ea55 : 20eec3           [ 6] 	jsr _snd_set
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank1.s --------------------------------

                             	; get high
ea58 : e8               [ 2] 	inx
ea59 : a4ea             [ 3] 	ldy df_tmpptrd+1
ea5b : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             
                             ;* Binary save mem,hdr,addr,len,filename
ea5e :                       df_rt_bsave
                             	; Get mem type, 0=RAM, else VRAM
ea5e : 20a4d8           [ 6] 	jsr df_rt_neval				; Get mem type
ea61 : 20a5f1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
ea64 : e076             [ 2] 	cpx #'v'
ea66 : d003             [ 3] 	bne df_rt_bsave_tryr
ea68 : 18               [ 2] 	clc							; Clear C for vram
ea69 : 8007             [ 3] 	bra df_rt_bsave_savep
ea6b :                       df_rt_bsave_tryr
ea6b : e072             [ 2] 	cpx #'r'
ea6d : f002             [ 3] 	beq	 df_rt_bsave_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
ea71 :                       df_rt_bsave_setR
ea71 : 38               [ 2] 	sec							; Set C for ram
ea72 :                       df_rt_bsave_savep
                             	; save C, clear=VRAM, set=RAM
ea72 : 08               [ 3] 	php
                             
                             	; jump over comma
ea73 : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
ea75 : 20a4d8           [ 6] 	jsr df_rt_neval				; Get header length
ea78 : 20a5f1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
ea7b : da               [ 3] 	phx
                             
                             	; jump over comma
ea7c : e6ca             [ 5] 	inc df_exeoff
ea7e : 20a4d8           [ 6] 	jsr df_rt_neval				; Get address
ea81 : 20a5f1           [ 6] 	jsr df_ost_popInt			; X,A = Address
ea84 : 48               [ 3] 	pha
ea85 : da               [ 3] 	phx
                             
                             	; jump over comma
ea86 : e6ca             [ 5] 	inc df_exeoff
ea88 : 20a4d8           [ 6] 	jsr df_rt_neval				; Get length
ea8b : 20a5f1           [ 6] 	jsr df_ost_popInt			; X,A = Length
ea8e : 48               [ 3] 	pha
ea8f : da               [ 3] 	phx
                             
                             	; jump over comma
ea90 : e6ca             [ 5] 	inc df_exeoff
                             	; Process filename
ea92 : 20fdea           [ 6] 	jsr df_rt_parse_file
ea95 : 2066c5           [ 6] 	jsr io_open_write
ea98 : b05a             [ 3] 	bcs df_rt_file_errc3		; Error condition resets t
                             
                             	; On the stack, we have lenlo,lenhi,adlo,adhi,he
ea9a : ba               [ 2] 	tsx
ea9b : bc0501           [ 4] 	ldy 0x105,x					; Get header len
ea9e : f008             [ 3] 	beq df_rt_bsave_byte
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank1.s --------------------------------

eaa0 : a900             [ 2] 	lda #0						; Zero filler
eaa2 :                       df_rt_bsave_header
eaa2 : 2060c5           [ 6] 	jsr io_put_ch				; Write a byte to disk
eaa5 : 88               [ 2] 	dey
eaa6 : d0fa             [ 3] 	bne df_rt_bsave_header
eaa8 :                       df_rt_bsave_byte
eaa8 : ba               [ 2] 	tsx							; Restore SP to X
eaa9 : bd0101           [ 4] 	lda 0x101,x					; low<>0 carry on
eaac : d005             [ 3] 	bne df_rt_bsave_byte_do
eaae : bd0201           [ 4] 	lda 0x102,x					; hi<>0 carry on
eab1 : f038             [ 3] 	beq df_rt_bsave_done		; else done
eab3 :                       df_rt_bsave_byte_do
eab3 : bd0601           [ 4] 	lda 0x106,x					; Get the C status
eab6 : 48               [ 3] 	pha
eab7 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
eab8 : bd0301           [ 4] 	lda 0x103,x					; Get low address
eabb : bc0401           [ 4] 	ldy 0x104,x					; Get high address
eabe : aa               [ 2] 	tax							; X,Y contain address
                             
eabf : b006             [ 3] 	bcs df_rt_bsave_ram			; RAM or VRAM?
                             	; Read from VRAM
eac1 : 98               [ 2] 	tya							; A needs to contain high byte
eac2 : 2006c4           [ 6] 	jsr _vdp_peek				; Peek VRAM
eac5 : 8006             [ 3] 	bra df_rt_bsave_write
eac7 :                       df_rt_bsave_ram
                             	; Read from RAM
eac7 : 86e3             [ 3] 	stx df_tmpptra				; Save address
eac9 : 84e4             [ 3] 	sty df_tmpptra+1
eacb : b2e3             [ 5] 	lda (df_tmpptra)			; Peek RAM
eacd :                       df_rt_bsave_write
eacd : 2060c5           [ 6] 	jsr io_put_ch				; Write to disk
ead0 : ba               [ 2] 	tsx							; Get SP to X
ead1 : fe0301           [ 6] 	inc 0x103,x					; Increment low address
ead4 : d003             [ 3] 	bne df_rt_bsave_skiph
ead6 : fe0401           [ 6] 	inc 0x104,x					; Increment high address
ead9 :                       df_rt_bsave_skiph
ead9 : bc0101           [ 4] 	ldy 0x101,x					; Get low len byte
eadc : f005             [ 3] 	beq df_rt_bsave_dech
eade : de0101           [ 6] 	dec 0x101,x					; A simple decrement
eae1 : 80c5             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eae3 :                       df_rt_bsave_dech
eae3 : de0101           [ 6] 	dec 0x101,x					; Decrement low in readiness
eae6 : de0201           [ 6] 	dec 0x102,x					; Decrement high
eae9 : 80bd             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eaeb :                       df_rt_bsave_done
                             	; Tidy the stack
eaeb : 68               [ 4] 	pla
eaec : 68               [ 4] 	pla
eaed : 68               [ 4] 	pla
eaee : 68               [ 4] 	pla
eaef : 68               [ 4] 	pla
eaf0 : 68               [ 4] 	pla
eaf1 : 4c1aeb           [ 3] 	jmp df_rt_file_cleanup		; Clean up FS
                             
eaf4 :                       df_rt_file_errc3				; Stepping stone!!!
eaf4 : b0fe             [ 3] 	bcs df_rt_file_errc3
                             
                             ;* common filename procesing routine
                             ;* 
eaf6 :                       df_rt_init_filename
                             	; evaluate string X,A has the string pointer
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank1.s --------------------------------

eaf6 : 20a4d8           [ 6] 	jsr df_rt_neval
eaf9 : 209df1           [ 6] 	jsr df_ost_popStr
                             
eafc : 60               [ 6] 	rts
                             	
                             ;* common file parsing routine
eafd :                       df_rt_parse_file
eafd : a902             [ 2] 	lda #2					; Only works for SD card now
eaff : 2045c5           [ 6] 	jsr io_active_device
                             
                             	; now process filename, XA has pointer
eb02 : 20f6ea           [ 6] 	jsr df_rt_init_filename
eb05 : 60               [ 6] 	rts
                             ; save "file"
eb06 :                       df_rt_save
eb06 : 20fdea           [ 6] 	jsr df_rt_parse_file
eb09 : 2066c5           [ 6] 	jsr io_open_write
eb0c : b063             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
eb0e : a901             [ 2] 	lda #1
eb10 : 85eb             [ 3] 	sta df_tmpptre
eb12 : 20afe6           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
eb15 : a90d             [ 2] 	lda #UTF_CR
eb17 : 2060c5           [ 6] 	jsr io_put_ch
eb1a :                       df_rt_file_cleanup
                             	; close the file
eb1a : 2069c5           [ 6] 	jsr io_close
eb1d : 18               [ 2] 	clc
                             	; restore to default device io
eb1e : 4c42c5           [ 3] 	jmp io_set_default
                             ;	clc
                             ;	rts
                             
                             ; load 'x',"file" where 0=serial, 1=SDCard
eb21 :                       df_rt_load
eb21 : 20fdea           [ 6] 	jsr df_rt_parse_file
eb24 : 2063c5           [ 6] 	jsr io_open_read
eb27 : b048             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
                             
                             	; Initialise to line 10 in scratch, scratch+1
eb29 : a90a             [ 2] 	lda #10
eb2b : 8d0009           [ 4] 	sta scratch
eb2e : 9c0109           [ 4] 	stz scratch+1
eb31 :                       df_rt_loadline
eb31 : 18               [ 2] 	clc
eb32 : 2071d7           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
eb35 : 9013             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
eb37 : 9c800a           [ 4] 	stz df_tokbuff			; Offset to next line
eb3a : 9c810a           [ 4] 	stz df_tokbuff+1		; Clear line low
eb3d : 9c820a           [ 4] 	stz df_tokbuff+2		; Clear line high
eb40 : 64c1             [ 3] 	stz df_nxtstidx			; Clear next statement
eb42 : 64c0             [ 3] 	stz df_eolidx			; Clear end of line too
eb44 : a901             [ 2] 	lda #1					; Set immediate mode to get a 'Ready'
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank1.s --------------------------------

eb46 : 85a0             [ 3] 	sta df_immed			; But nothing to run
eb48 : 80d0             [ 3] 	bra df_rt_file_cleanup	; Ok now can close and do
eb4a :                       df_rt_ldtokenise
eb4a : 2095d0           [ 6] 	jsr df_lexer_line		; Tokenise loaded string - ju
                             	; check if line number == 0
eb4d : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
eb50 : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
eb53 : d017             [ 3] 	bne df_rt_storeline		; No, then store the line
                             	; Else insert current line number to buffer posi
                             	; also add 10 to the current line number
eb55 : 18               [ 2] 	clc
eb56 : ad0009           [ 4] 	lda scratch				; Get line number lo
eb59 : 8d810a           [ 4] 	sta df_tokbuff+1		; Use current line number
eb5c : 690a             [ 2] 	adc #10					; But increment for next by 10
eb5e : 8d0009           [ 4] 	sta scratch
eb61 : ad0109           [ 4] 	lda scratch+1			; Get line number hi
eb64 : 8d820a           [ 4] 	sta df_tokbuff+2
eb67 : 6900             [ 2] 	adc #0
eb69 : 8d0109           [ 4] 	sta scratch+1
eb6c :                       df_rt_storeline
eb6c : 20e8d7           [ 6] 	jsr df_pg_line_number	; Save the line in the rig
eb6f : 80c0             [ 3] 	bra df_rt_loadline		; Continue with next until b
                             
                             ; Somwehere to go to raise a file error!
eb71 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
eb73 :                       df_rt_del
eb73 : 20f6ea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb76 : 208ec0           [ 6] 	jsr _fs_delete_w			; Delete file
eb79 : 60               [ 6] 	rts
                             
eb7a :                       df_rt_chdir
eb7a : 20f6ea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb7d : 205ec0           [ 6] 	jsr _fs_chdir_w				; Try and change directory
eb80 : b0ef             [ 3] 	bcs df_rt_file_errc
eb82 : 60               [ 6] 	rts
                             
eb83 :                       df_rt_mkdir
eb83 : 20f6ea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb86 : 2076c0           [ 6] 	jsr _fs_mkdir_w				; Try and make directory
eb89 : b0e6             [ 3] 	bcs df_rt_file_errc
eb8b : 60               [ 6] 	rts
                             
                             ; bload MEM,HEAD,ADDR,FNAME
eb8c :                       df_rt_bload
                             	; Get mem type, 0=RAM, else VRAM
eb8c : 20a4d8           [ 6] 	jsr df_rt_neval				; Get mem type
eb8f : 20a5f1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
eb92 : e076             [ 2] 	cpx #'v'
eb94 : d003             [ 3] 	bne df_rt_bload_tryr
eb96 : 18               [ 2] 	clc							; Clear C for vram
eb97 : 8007             [ 3] 	bra df_rt_bload_savep
eb99 :                       df_rt_bload_tryr
eb99 : e072             [ 2] 	cpx #'r'
eb9b : f002             [ 3] 	beq	 df_rt_bload_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
eb9f :                       df_rt_bload_setR
eb9f : 38               [ 2] 	sec							; Set C for ram
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank1.s --------------------------------

eba0 :                       df_rt_bload_savep
                             	; save C, clear=VRAM, set=RAM
eba0 : 08               [ 3] 	php
                             	; jump over comma
eba1 : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
eba3 : 20a4d8           [ 6] 	jsr df_rt_neval				; Get header length
eba6 : 20a5f1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
eba9 : da               [ 3] 	phx
                             	; jump over comma
ebaa : e6ca             [ 5] 	inc df_exeoff
ebac : 8012             [ 3] 	bra df_rt_bvload
ebae :                       df_rt_font
ebae : 18               [ 2] 	clc							; Set to video
ebaf : 08               [ 3] 	php
ebb0 : a900             [ 2] 	lda #0						; No header
ebb2 : 48               [ 3] 	pha
ebb3 : a901             [ 2] 	lda #1						; 0x100 address - hi
ebb5 : 48               [ 3] 	pha
ebb6 : a900             [ 2] 	lda #0						; 0x100 address - lo
ebb8 : 48               [ 3] 	pha
ebb9 : 800d             [ 3] 	bra df_rt_bload_file
ebbb :                       df_rt_vload
ebbb : 18               [ 2] 	clc							; Hardcode for VRAM
ebbc : 08               [ 3] 	php
ebbd : a207             [ 2] 	ldx #7						; Hardcode header length
ebbf : da               [ 3] 	phx
ebc0 :                       df_rt_bvload
ebc0 : 20a4d8           [ 6] 	jsr df_rt_neval				; Get address
ebc3 : 20a5f1           [ 6] 	jsr df_ost_popInt			; X,A = Address
ebc6 : 48               [ 3] 	pha
ebc7 : da               [ 3] 	phx
ebc8 :                       df_rt_bload_file
                             	; jump over comma
ebc8 : e6ca             [ 5] 	inc df_exeoff
ebca : 20fdea           [ 6] 	jsr df_rt_parse_file
ebcd : 2063c5           [ 6] 	jsr io_open_read
ebd0 : b09f             [ 3] 	bcs df_rt_file_errc		; Error condition resets th
                             	; On the stack:
                             	; 101+x = adlo
                             	; 102+x = adhi
                             	; 103+x = header length
                             	; 104+x = mem type (c=0 means video)
ebd2 : ba               [ 2] 	tsx
ebd3 : bc0301           [ 4] 	ldy 0x103,x					; Get header
ebd6 : f008             [ 3] 	beq df_rt_vload_byte
ebd8 :                       df_rt_vload_header
ebd8 : 205dc5           [ 6] 	jsr io_get_ch				; Get a character
ebdb : b03c             [ 4] 	bcs df_rt_vload_done		; If EOF then done
ebdd : 88               [ 2] 	dey
ebde : d0f8             [ 3] 	bne df_rt_vload_header
ebe0 :                       df_rt_vload_byte
ebe0 : ba               [ 2] 	tsx							; Restore SP to X
ebe1 : bd0401           [ 4] 	lda 0x104,x					; Get the C status
ebe4 : 48               [ 3] 	pha
ebe5 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
ebe6 : bd0101           [ 4] 	lda 0x101,x					; Get low address
ebe9 : bc0201           [ 4] 	ldy 0x102,x					; Get high address
ebec : aa               [ 2] 	tax							; X,Y contain address
                             
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank1.s --------------------------------

ebed : b014             [ 4] 	bcs df_rt_vload_ram			; RAM or VRAM?
                             	; Poke to VRAM but skip 0x1800-0x1fff
ebef : 205dc5           [ 6] 	jsr io_get_ch				; Get a character
ebf2 : b025             [ 4] 	bcs df_rt_vload_done		; If EOF then done
ebf4 : c018             [ 2] 	cpy #0x18					; If page # <= 0x17
ebf6 : 9006             [ 3] 	bcc df_rt_vload_do_vpoke	; then vpoke
ebf8 : c020             [ 2] 	cpy #0x20					; Or page >= 0x20
ebfa : b002             [ 3] 	bcs df_rt_vload_do_vpoke	; then vpoke
ebfc : 8010             [ 4] 	bra df_rt_vload_next
ebfe :                       df_rt_vload_do_vpoke
ebfe : 201ec4           [ 6] 	jsr _vdp_poke				; Write to VRAM
ec01 : 800b             [ 3] 	bra df_rt_vload_next
ec03 :                       df_rt_vload_ram
                             	; Poke to RAM
ec03 : 205dc5           [ 6] 	jsr io_get_ch				; Get a character
ec06 : b011             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ec08 : 86e3             [ 3] 	stx df_tmpptra				; Save address
ec0a : 84e4             [ 3] 	sty df_tmpptra+1
ec0c : 92e3             [ 5] 	sta (df_tmpptra)			; Poke byte to RAM
ec0e :                       df_rt_vload_next
ec0e : ba               [ 2] 	tsx							; Get SP to X
ec0f : fe0101           [ 6] 	inc 0x101,x					; Increment low address
ec12 : d003             [ 3] 	bne df_rt_vload_byte_skip
ec14 : fe0201           [ 6] 	inc 0x102,x					; Increment high address
ec17 :                       df_rt_vload_byte_skip
ec17 : 80c7             [ 4] 	bra df_rt_vload_byte		; Back for next video byte
ec19 :                       df_rt_vload_done
                             	; Tidy the stack
ec19 : 68               [ 4] 	pla
ec1a : 68               [ 4] 	pla
ec1b : 68               [ 4] 	pla
ec1c : 68               [ 4] 	pla
ec1d : 4c1aeb           [ 3] 	jmp df_rt_file_cleanup
                             
ec20 :                       df_rt_dir_string				; Name of a directory
ec20 : 3c4449523e202000      	db "<DIR>  ",0				; 7 chars + terminator
ec28 :                       df_rt_dir
ec28 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ec2b : a214             [ 2] 	ldx #20						; Count of how many files before pa
ec2d : da               [ 3] 	phx
ec2e :                       df_rt_dir_show_entry
ec2e : 18               [ 2] 	clc							; Only looking for valid files
ec2f : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ec32 : b052             [ 3] 	bcs df_rt_dir_done			; If C then no more entries
ec34 : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ec36 : a909             [ 2] 	lda #hi(scratch)
ec38 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ec3b : a20c             [ 2] 	ldx #12						; Put a zero terminator after filen
ec3d : 9e0009           [ 5] 	stz scratch,x
ec40 : a200             [ 2] 	ldx #lo(scratch)			; Print filename
ec42 : a909             [ 2] 	lda #hi(scratch)
ec44 : 20abc5           [ 6] 	jsr io_print_line			; Print name
ec47 : 2014c8           [ 6] 	jsr utilPrintSPC			; Gap
ec4a : a563             [ 3] 	lda fh_handle+FH_Attr		; Is it a directory?
ec4c : c910             [ 2] 	cmp #0x10
ec4e : d009             [ 3] 	bne df_rt_dir_size
ec50 : a220             [ 2] 	ldx #lo(df_rt_dir_string)	; Set up pointer to na
ec52 : a9ec             [ 2] 	lda #hi(df_rt_dir_string)
ec54 : 20abc5           [ 6] 	jsr io_print_line			; Print directory indicator
ec57 : 800d             [ 3] 	bra df_rt_dir_line
ec59 :                       df_rt_dir_size
ec59 : a223             [ 2] 	ldx #lo(scratch+35)			; Print size (already term
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank1.s --------------------------------

ec5b : a909             [ 2] 	lda #hi(scratch+35)
ec5d : 20abc5           [ 6] 	jsr io_print_line			; Print size - 5 chars left 
ec60 : 2014c8           [ 6] 	jsr utilPrintSPC			; Gap
ec63 : 2014c8           [ 6] 	jsr utilPrintSPC			; Gap
                             	; Printed exactly 20 chars per size
ec66 :                       df_rt_dir_line
ec66 : a527             [ 3] 	lda gr_scrngeom+gr_screen_w	; If 32 col screen t
ec68 : c920             [ 2] 	cmp #32
ec6a : d003             [ 3] 	bne df_rt_dir_skip_crlf
ec6c : 201cc8           [ 6] 	jsr utilPrintCRLF
ec6f :                       df_rt_dir_skip_crlf
ec6f : fa               [ 4] 	plx							; Decrement file line counter
ec70 : ca               [ 2] 	dex
ec71 : d00d             [ 3] 	bne df_rt_dir_skip_pause
ec73 : a28d             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ec75 : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ec77 : 20abc5           [ 6] 	jsr io_print_line
ec7a : 38               [ 2] 	sec
ec7b : 205dc5           [ 6] 	jsr io_get_ch				; Wait for any key
ec7e : a214             [ 2] 	ldx #20						; Reset line counter
ec80 :                       df_rt_dir_skip_pause	
ec80 : da               [ 3] 	phx							; Save line counter
ec81 : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ec84 : 80a8             [ 3] 	bra df_rt_dir_show_entry	; Find another entry
ec86 :                       df_rt_dir_done
ec86 : fa               [ 4] 	plx							; Pop line counter
ec87 : a90d             [ 2] 	lda #UTF_CR					; Final CR
ec89 : 2060c5           [ 6] 	jsr io_put_ch
ec8c : 60               [ 6] 	rts
ec8d :                       df_rt_pausemsg
ec8d : 0d507265737320..      	db UTF_CR,"Press any key for more..",UTF_CR,0
                             
eca8 :                       df_rt_dirl						; Long listing format
eca8 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ecab : a214             [ 2] 	ldx #20						; Count of how many files before pa
ecad : da               [ 3] 	phx
ecae :                       df_rt_dirl_show_entry
ecae : 18               [ 2] 	clc							; Only looking for valid files
ecaf : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ecb2 : b025             [ 3] 	bcs df_rt_dirl_done			; If C then no more entrie
ecb4 : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ecb6 : a909             [ 2] 	lda #hi(scratch)
ecb8 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ecbb : a200             [ 2] 	ldx #lo(scratch)			; Print the whole entry
ecbd : a909             [ 2] 	lda #hi(scratch)
ecbf : 20abc5           [ 6] 	jsr io_print_line
ecc2 :                       df_rt_dirl_line
ecc2 : fa               [ 4] 	plx							; Decrement file line counter
ecc3 : ca               [ 2] 	dex
ecc4 : d00d             [ 3] 	bne df_rt_dirl_skip_pause
ecc6 : a28d             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ecc8 : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ecca : 20abc5           [ 6] 	jsr io_print_line
eccd : 38               [ 2] 	sec
ecce : 205dc5           [ 6] 	jsr io_get_ch				; Wait for any key
ecd1 : a214             [ 2] 	ldx #20						; Reset line counter
ecd3 :                       df_rt_dirl_skip_pause	
ecd3 : da               [ 3] 	phx							; Save line counter
ecd4 : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ecd7 : 80d5             [ 3] 	bra df_rt_dirl_show_entry	; Find another entry
ecd9 :                       df_rt_dirl_done
ecd9 : fa               [ 4] 	plx							; Pop line counter
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank1.s --------------------------------

ecda : 201cc8           [ 6] 	jsr utilPrintCRLF			; Final CR
ecdd : 60               [ 6] 	rts
                             	
                             ; reset %var
ecde :                       df_rt_reset
                             	; now get lvar X,A from current statement
ecde : 20eddc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ece1 : 86e5             [ 3] 	stx df_tmpptrb
ece3 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
ece5 : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
ece7 : 78               [ 2] 	sei
ece8 : a510             [ 3] 	lda vdp_int_cnt
ecea : 92e5             [ 5] 	sta (df_tmpptrb)
ecec : a511             [ 3] 	lda vdp_int_cnt+1
ecee : 91e5             [ 5] 	sta (df_tmpptrb),y
ecf0 : a512             [ 3] 	lda vdp_int_cnt+2
ecf2 : c8               [ 2] 	iny
ecf3 : 91e5             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
ecf5 : 58               [ 2] 	cli
ecf6 : 60               [ 6] 	rts
                             
                             ; timedate var$
                             ; output to string as dd/mm/yy hh:mm:ss
ecf7 :                       df_rt_datetime
                             	; now get lvar X,A from current statement
ecf7 : 20eddc           [ 6] 	jsr df_rt_getlvar
                             	; and save it
ecfa : da               [ 3] 	phx
ecfb : 48               [ 3] 	pha
                             	; Point to 6 bytes of scratch
ecfc : a200             [ 2] 	ldx #lo(scratch)
ecfe : a909             [ 2] 	lda #hi(scratch)
                             	; Populate timedate as hmsdmy
ed00 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Get destination pointer back
ed03 : 68               [ 4] 	pla
ed04 : 85e4             [ 3] 	sta df_tmpptra+1
ed06 : 68               [ 4] 	pla
ed07 : 85e3             [ 3] 	sta df_tmpptra
                             	; Start at first char of destination
ed09 : a000             [ 2] 	ldy #0
                             	; Get days binary and convert to BCD
ed0b : ae0309           [ 4] 	ldx scratch+3
                             	; Separator character
ed0e : a92f             [ 2] 	lda #'/'
ed10 : 203ced           [ 6] 	jsr df_rt_datetime_conv
                             	; Get months binary and convert to BCD
ed13 : ae0409           [ 4] 	ldx scratch+4
                             	; Separator character
ed16 : a92f             [ 2] 	lda #'/'
ed18 : 203ced           [ 6] 	jsr df_rt_datetime_conv
                             	; Get years binary and convert to BCD
ed1b : ae0509           [ 4] 	ldx scratch+5
                             	; Separator character is space between date and 
ed1e : a920             [ 2] 	lda #' '
ed20 : 203ced           [ 6] 	jsr df_rt_datetime_conv
                             	; Get hours binary and convert to BCD
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank1.s --------------------------------

ed23 : ae0009           [ 4] 	ldx scratch+0
                             	; Separator character
ed26 : a93a             [ 2] 	lda #':'
ed28 : 203ced           [ 6] 	jsr df_rt_datetime_conv
                             	; Get minutes binary and convert to BCD
ed2b : ae0109           [ 4] 	ldx scratch+1
                             	; Separator character
ed2e : a93a             [ 2] 	lda #':'
ed30 : 203ced           [ 6] 	jsr df_rt_datetime_conv
                             	; Get seconds binary and convert to BCD
ed33 : ae0209           [ 4] 	ldx scratch+2
                             	; Separator character is null to terminate strin
ed36 : a900             [ 2] 	lda #0
ed38 : 203ced           [ 6] 	jsr df_rt_datetime_conv
ed3b : 60               [ 6] 	rts
ed3c :                       df_rt_datetime_conv
ed3c : 48               [ 3] 	pha
ed3d : a900             [ 2] 	lda #0
ed3f : 204cca           [ 6] 	jsr word_to_bcd
                             	; We only need least 2 BCD digits
ed42 : a585             [ 3] 	lda num_a+0
                             	; put nibbles in A,X
ed44 : 2049c8           [ 6] 	jsr str_a_to_x
                             	; And save to destination
ed47 : 91e3             [ 5] 	sta (df_tmpptra),y
ed49 : c8               [ 2] 	iny
ed4a : 8a               [ 2] 	txa
ed4b : 91e3             [ 5] 	sta (df_tmpptra),y
ed4d : c8               [ 2] 	iny
ed4e : 68               [ 4] 	pla
ed4f : 91e3             [ 5] 	sta (df_tmpptra),y
ed51 : c8               [ 2] 	iny
ed52 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
ed53 :                       df_rt_deek
ed53 : 38               [ 2] 	sec
ed54 : 8001             [ 3] 	bra df_rt_readbyte
ed56 :                       df_rt_peek
ed56 : 18               [ 2] 	clc
ed57 :                       df_rt_readbyte
ed57 : 08               [ 3] 	php
                             ;	inc df_exeoff
ed58 : 209ed8           [ 6] 	jsr df_rt_getnval
ed5b : 86e3             [ 3] 	stx df_tmpptra
ed5d : 85e4             [ 3] 	sta df_tmpptra+1
ed5f : b2e3             [ 5] 	lda (df_tmpptra)
ed61 : aa               [ 2] 	tax
ed62 : a900             [ 2] 	lda #0
ed64 : 28               [ 4] 	plp
ed65 : 9005             [ 3] 	bcc df_rt_readbyte_skip
ed67 : 18               [ 2] 	clc
ed68 : a001             [ 2] 	ldy #1
ed6a : b1e3             [ 5] 	lda (df_tmpptra),y
ed6c :                       df_rt_readbyte_skip
ed6c : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
ed6f :                       df_rt_vpeek
                             ;	inc df_exeoff
ed6f : 209ed8           [ 6] 	jsr df_rt_getnval
ed72 : 2006c4           [ 6] 	jsr _vdp_peek
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank1.s --------------------------------

ed75 : aa               [ 2] 	tax
ed76 : a900             [ 2] 	lda #0
ed78 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
ed7b :                       df_rt_nvpeek
                             ;	inc df_exeoff
ed7b : 209ed8           [ 6] 	jsr df_rt_getnval
ed7e : 2096c4           [ 6] 	jsr _rtc_nvread
ed81 : aa               [ 2] 	tax
ed82 : a900             [ 2] 	lda #0
ed84 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
ed87 :                       df_rt_rnd
                             ;	inc df_exeoff
ed87 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
ed8a : e000             [ 2] 	cpx #0
ed8c : d017             [ 3] 	bne df_rt_rnd_set
ed8e : c900             [ 2] 	cmp #0
ed90 : d013             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
ed92 : a5da             [ 3] 	lda df_rnd+1
ed94 : 4a               [ 2] 	lsr a
ed95 : 26d9             [ 5] 	rol df_rnd
ed97 : 9002             [ 3] 	bcc df_rt_rnd_noeor
ed99 : 49b4             [ 2] 	eor #0xb4
ed9b :                       df_rt_rnd_noeor
ed9b : 85da             [ 3] 	sta df_rnd+1
ed9d : 45d9             [ 3] 	eor df_rnd
ed9f : aa               [ 2] 	tax
eda0 : a900             [ 2] 	lda #0
eda2 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             	; else set the seed to that number and done
eda5 :                       df_rt_rnd_set
eda5 : 86d9             [ 3] 	stx df_rnd
eda7 : 85da             [ 3] 	sta df_rnd+1
eda9 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; Get joystick status	
edac :                       df_rt_stick
                             ;	inc df_exeoff
edac : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
edaf : 86e3             [ 3] 	stx df_tmpptra
edb1 : 20d6c3           [ 6] 	jsr _snd_get_joy0
edb4 : 98               [ 2] 	tya
                             	; invert the bits so that 1=switch on
edb5 : 49ff             [ 2] 	eor #0xff
edb7 : 25e3             [ 3] 	and df_tmpptra
edb9 : aa               [ 2] 	tax
edba : a900             [ 2] 	lda #0
edbc : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; l = msbyte(x)
edbf :                       df_rt_msbyte
                             ;	inc df_exeoff
edbf : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; only high byte is used
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank1.s --------------------------------

edc2 : aa               [ 2] 	tax
edc3 : a900             [ 2] 	lda #0
edc5 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; l = lsbyte(x)
edc8 :                       df_rt_lsbyte
                             ;	inc df_exeoff
edc8 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
edcb : a900             [ 2] 	lda #0
edcd : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
edd0 :                       df_rt_mem
                             ;	inc df_exeoff
edd0 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
edd3 : e001             [ 2] 	cpx #1
edd5 : f016             [ 3] 	beq df_rt_mem_prg
edd7 : e002             [ 2] 	cpx #2
edd9 : f024             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
eddb :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
edeb : 8022             [ 4] 	bra df_rt_mem_calc
eded :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
edfd : 8010             [ 4] 	bra df_rt_mem_calc
edff :                       df_rt_mem_var
                             	_cpyZPWord df_vntend,df_tmpptra
                             
                             	_cpyZPWord df_vvtstrt,df_tmpptrb
                             
ee0f :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
ee0f : 38               [ 2] 	sec
ee10 : a5e3             [ 3] 	lda df_tmpptra
ee12 : e5e5             [ 3] 	sbc df_tmpptrb
ee14 : aa               [ 2] 	tax
ee15 : a5e4             [ 3] 	lda df_tmpptra+1
ee17 : e5e6             [ 3] 	sbc df_tmpptrb+1
ee19 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; %k=key(%sync) %sync>=1 means sync
ee1c :                       df_rt_get					; get is alias for key
ee1c :                       df_rt_key
                             ;	inc df_exeoff
ee1c : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=1 if x==0 else x>0 makes c=0
ee1f : e001             [ 2] 	cpx #1
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank1.s --------------------------------

ee21 : 205dc5           [ 6] 	jsr io_get_ch
ee24 : 9003             [ 3] 	bcc df_rt_key_valid
                             	; zero out A
ee26 : a900             [ 2] 	lda #0
ee28 : 18               [ 2] 	clc
ee29 :                       df_rt_key_valid
ee29 : aa               [ 2] 	tax
ee2a : a900             [ 2] 	lda #0
ee2c : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             	
                             ; s = scrn(x,y)
ee2f :                       df_rt_scrn
                             ;	inc df_exeoff
ee2f : 205fdb           [ 6] 	jsr df_rt_parm_2ints
ee32 : a6e3             [ 3] 	ldx df_tmpptra
ee34 : a4e5             [ 3] 	ldy df_tmpptrb
ee36 : 208ec3           [ 6] 	jsr _gr_get
ee39 : aa               [ 2] 	tax
ee3a : a900             [ 2] 	lda #0
ee3c : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             ; p = pixel(x,y)
ee3f :                       df_rt_pixel
                             ;	inc df_exeoff
ee3f : 205fdb           [ 6] 	jsr df_rt_parm_2ints
ee42 : a6e3             [ 3] 	ldx df_tmpptra
ee44 : a4e5             [ 3] 	ldy df_tmpptrb
ee46 : a900             [ 2] 	lda #0
ee48 : 4c82f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %e=elapsed(%var)
ee4b :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
ee4b : 20eddc           [ 6] 	jsr df_rt_getlvar
ee4e : e6ca             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
ee50 : 86e5             [ 3] 	stx df_tmpptrb
ee52 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
ee54 : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
ee56 : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
ee57 : 78               [ 2] 	sei
ee58 : a510             [ 3] 	lda vdp_int_cnt
ee5a : f2e5             [ 5] 	sbc (df_tmpptrb)
ee5c : aa               [ 2] 	tax
ee5d : a511             [ 3] 	lda vdp_int_cnt+1
                             	; restore interrupts asap
ee5f : 58               [ 2] 	cli
ee60 : f1e5             [ 5] 	sbc (df_tmpptrb),y
ee62 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
ee65 :                       df_rt_call
                             ;	inc df_exeoff
ee65 : 2081db           [ 6] 	jsr df_rt_parm_4ints
ee68 : a5e5             [ 3] 	lda df_tmpptrb				; load A
ee6a : a6e7             [ 3] 	ldx	df_tmpptrc				; load X
ee6c : a4e9             [ 3] 	ldy df_tmpptrd				; load Y
ee6e : 2074ee           [ 6] 	jsr df_rt_calljsr
ee71 :                       df_rt_push_int1
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank1.s --------------------------------

ee71 : 4c85f1           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value	
ee74 :                       df_rt_calljsr
ee74 : 6ce300           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
                             
ee77 :                       df_rt_sgn
                             ;	inc df_exeoff
ee77 : 209ed8           [ 6] 	jsr df_rt_getnval
ee7a : 86e3             [ 3] 	stx df_tmpptra
ee7c : 05e3             [ 3] 	ora df_tmpptra
ee7e : f00f             [ 3] 	beq df_rt_sgn_z
ee80 : 2980             [ 2] 	and #0x80
ee82 : d006             [ 3] 	bne df_rt_sgn_n
ee84 : a201             [ 2] 	ldx #1
ee86 : a900             [ 2] 	lda #0
ee88 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
ee8a :                       df_rt_sgn_n
ee8a : a2ff             [ 2] 	ldx #0xff
ee8c : 8a               [ 2] 	txa
ee8d : d0e2             [ 3] 	bne df_rt_push_int1			; Always
ee8f :                       df_rt_sgn_z
ee8f : a200             [ 2] 	ldx #0
ee91 : 8a               [ 2] 	txa
ee92 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
ee94 :                       df_rt_addr
                             	; get lvar X,A from current statement
ee94 : 20eddc           [ 6] 	jsr df_rt_getlvar
ee97 : e6ca             [ 5] 	inc df_exeoff
ee99 : 4c85f1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
ee9c :                       df_rt_strlen_common
ee9c : 86e3             [ 3] 	stx df_tmpptra
ee9e : 85e4             [ 3] 	sta df_tmpptra+1
eea0 : a0ff             [ 2] 	ldy #0xff
eea2 :                       df_rt_strlen_count
eea2 : c8               [ 2] 	iny
eea3 : b1e3             [ 5] 	lda (df_tmpptra),y
eea5 : d0fb             [ 3] 	bne df_rt_strlen_count
eea7 : 98               [ 2] 	tya
eea8 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
eea9 :                       df_rt_str_extract
                             	; source string
eea9 : 209df1           [ 6] 	jsr df_ost_popStr
eeac : 86e3             [ 3] 	stx df_tmpptra
eeae : 85e4             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
eeb0 : a5bc             [ 3] 	lda df_sevalptr
eeb2 : 85e5             [ 3] 	sta df_tmpptrb
eeb4 : a5bd             [ 3] 	lda df_sevalptr+1
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank1.s --------------------------------

eeb6 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; start pos
eeb8 : a4e7             [ 3] 	ldy df_tmpptrc
eeba : a200             [ 2] 	ldx #0
eebc :                       df_rt_str_cpy_ch
eebc : c4e9             [ 3] 	cpy df_tmpptrd
eebe : f011             [ 3] 	beq df_str_src_end
eec0 : b1e3             [ 5] 	lda (df_tmpptra),y
eec2 : f00d             [ 3] 	beq df_str_src_end
eec4 : 81e5             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
eecc : c8               [ 2] 	iny
eecd : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
eed1 :                       df_str_src_end
eed1 : a900             [ 2] 	lda #0
eed3 : 81e5             [ 6] 	sta (df_tmpptrb,x)
eed5 : a6bc             [ 3] 	ldx df_sevalptr
eed7 : a5bd             [ 3] 	lda df_sevalptr+1
eed9 : 4c7af1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
eedc :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
eedc : 209ed8           [ 6] 	jsr df_rt_getnval
eedf : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
eee1 : 8a               [ 2] 	txa
eee2 : 91bc             [ 5] 	sta (df_sevalptr),y
eee4 : c8               [ 2] 	iny
                             	; zero terminator
eee5 : a900             [ 2] 	lda #0
eee7 : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
eee9 : a6bc             [ 3] 	ldx df_sevalptr
eeeb : a5bd             [ 3] 	lda df_sevalptr+1
eeed : 4c7af1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
eef0 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
eef0 : 209ed8           [ 6] 	jsr df_rt_getnval
eef3 : 85e3             [ 3] 	sta df_tmpptra	; Save the high byte
eef5 : 8a               [ 2] 	txa				; Convert low byte first
eef6 : 2049c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
eef9 : 85e5             [ 3] 	sta df_tmpptrb
eefb : 8a               [ 2] 	txa				; Push low digit of low byte from X
eefc : 48               [ 3] 	pha
eefd : a5e5             [ 3] 	lda df_tmpptrb	; Get A back from temp
eeff : 48               [ 3] 	pha				; Push high digit of low byte
ef00 : a5e3             [ 3] 	lda df_tmpptra	; Get the high byte
ef02 : 2049c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
ef05 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
ef07 : 91bc             [ 5] 	sta (df_sevalptr),y
ef09 : c8               [ 2] 	iny
                             	; hi/lo
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank1.s --------------------------------

ef0a : 8a               [ 2] 	txa
ef0b : 91bc             [ 5] 	sta (df_sevalptr),y
ef0d : c8               [ 2] 	iny
                             	; lo/hi
ef0e : 68               [ 4] 	pla
ef0f : 91bc             [ 5] 	sta (df_sevalptr),y
ef11 : c8               [ 2] 	iny
                             	; lo/lo
ef12 : 68               [ 4] 	pla
ef13 : 91bc             [ 5] 	sta (df_sevalptr),y
ef15 : c8               [ 2] 	iny
                             	; zero terminator
ef16 : a900             [ 2] 	lda #0
ef18 : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
ef1a : a6bc             [ 3] 	ldx df_sevalptr
ef1c : a5bd             [ 3] 	lda df_sevalptr+1
ef1e : 4c7af1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
ef21 :                       df_rt_dec
ef21 : 209ed8           [ 6] 	jsr df_rt_getnval
ef24 : 18               [ 2] 	clc						; No leading zeros
ef25 : 2090ca           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
ef28 : a295             [ 2] 	ldx #lo(num_buf)
ef2a : a900             [ 2] 	lda #hi(num_buf)
ef2c : 4c7af1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
ef2f :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
ef2f : 2054d9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
ef32 : e6ca             [ 5] 	inc df_exeoff
ef34 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
ef37 : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
ef39 : a000             [ 2] 	ldy #0
ef3b : 84e7             [ 3] 	sty df_tmpptrc
ef3d : 4ca9ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
ef40 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
ef40 : 2054d9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
ef43 : e6ca             [ 5] 	inc df_exeoff
ef45 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
ef48 : 86e7             [ 3] 	stx df_tmpptrc
                             	; end pos = len
ef4a : a6bc             [ 3] 	ldx df_sevalptr
ef4c : a5bd             [ 3] 	lda df_sevalptr+1
ef4e : 209cee           [ 6] 	jsr df_rt_strlen_common
ef51 : 85e9             [ 3] 	sta df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank1.s --------------------------------

                             	; subtract num chars to extract to get start pos
ef53 : 38               [ 2] 	sec
ef54 : e5e7             [ 3] 	sbc df_tmpptrc
ef56 : 85e7             [ 3] 	sta df_tmpptrc
ef58 : 4ca9ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
ef5b :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
ef5b : 2054d9           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
ef5e : e6ca             [ 5] 	inc df_exeoff
ef60 : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
ef63 : e6ca             [ 5] 	inc df_exeoff
ef65 : 209ed8           [ 6] 	jsr df_rt_getnval
ef68 : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
ef6a : 20a5f1           [ 6] 	jsr df_ost_popInt
ef6d : ca               [ 2] 	dex					; zero offset rather than 1
ef6e : 86e7             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
ef70 : 8a               [ 2] 	txa
ef71 : 18               [ 2] 	clc
ef72 : 65e9             [ 3] 	adc df_tmpptrd
ef74 : 85e9             [ 3] 	sta df_tmpptrd
ef76 : 4ca9ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
ef79 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
ef79 : 2054d9           [ 6] 	jsr df_rt_seval
ef7c : 209df1           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
ef7f : 209cee           [ 6] 	jsr df_rt_strlen_common
ef82 : 4c82f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
ef85 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
ef85 : 2054d9           [ 6] 	jsr df_rt_seval
ef88 : 209df1           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
ef8b : 86e3             [ 3] 	stx df_tmpptra
ef8d : 85e4             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
ef8f : a200             [ 2] 	ldx #0
ef91 : a1e3             [ 6] 	lda (df_tmpptra,x)
ef93 : 4c82f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
ef96 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
ef96 : 2054d9           [ 6] 	jsr df_rt_seval
ef99 : 209df1           [ 6] 	jsr df_ost_popStr
ef9c : a000             [ 2] 	ldy #0				; any numeric format
ef9e : 2094c8           [ 6] 	jsr con_n_to_a		; result in num_a
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank1.s --------------------------------

efa1 : b007             [ 3] 	bcs df_rt_val_err
efa3 : a685             [ 3] 	ldx num_a
efa5 : a586             [ 3] 	lda num_a+1
                             	; Save as an int
efa7 : 4c85f1           [ 3] 	jmp df_ost_pushInt
efaa :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
efac :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
                             ;* ok=fcreate(filename)
efae :                       df_rt_fcreate
efae : 20fdea           [ 6] 	jsr df_rt_parse_file
efb1 : 2066c5           [ 6] 	jsr io_open_write
efb4 :                       df_rt_fcreate_check
                             	; Assume -1 which is OK
efb4 : a2ff             [ 2] 	ldx #-1
efb6 : 9002             [ 3] 	bcc df_rt_fcreate_ok
                             	; Else 0 which is error
efb8 : a200             [ 2] 	ldx #0
efba :                       df_rt_fcreate_ok
efba : 8a               [ 2] 	txa				; make A=X
                             	; Save as an int
efbb : 2085f1           [ 6] 	jsr df_ost_pushInt
                             	; Ensure we're back to the normal IO device
efbe : 4c42c5           [ 3] 	jmp io_set_default
                             	
                             ;* ok=fopen(filename)
efc1 :                       df_rt_fopen
efc1 : 20fdea           [ 6] 	jsr df_rt_parse_file
efc4 : 2063c5           [ 6] 	jsr io_open_read
efc7 : 80eb             [ 3] 	bra df_rt_fcreate_check
                             
                             ;* ok=fclose()
efc9 :                       df_rt_fclose
efc9 : a902             [ 2] 	lda #2					; Only works for SD card now
efcb : 2045c5           [ 6] 	jsr io_active_device
efce : 2069c5           [ 6] 	jsr io_close
                             	; Ensure we're back to the normal IO device
efd1 : 4c42c5           [ 3] 	jmp io_set_default
                             
                             ;* device <num>
efd4 :                       df_rt_device
efd4 : 209ed8           [ 6] 	jsr df_rt_getnval
                             	; Force update of status register
efd7 : 8a               [ 2] 	txa
efd8 : 300a             [ 3] 	bmi df_rt_device_default
                             	; Stop dflat from trying to read inputs for Ctrl
efda : a59e             [ 3] 	lda df_checkmsk
efdc : 0980             [ 2] 	ora #0x80
efde : 859e             [ 3] 	sta df_checkmsk
efe0 : 8a               [ 2] 	txa
                             	; A contains the device to activate
efe1 : 4c45c5           [ 3] 	jmp io_active_device
efe4 :                       df_rt_device_default
                             	; Allow dflat to read inputs for Ctrl-C
efe4 : a59e             [ 3] 	lda df_checkmsk
efe6 : 297f             [ 2] 	and #0x7f
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank1.s --------------------------------

efe8 : 859e             [ 3] 	sta df_checkmsk
efea : 4c42c5           [ 3] 	jmp io_set_default
                             
efed :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
efed :                       mod_sz_proc_s
                             
efed :                       df_rt_proc_parmerr
efed :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
efef :                       df_rt_proc
                             	; move past escape token
efef : a4ca             [ 3] 	ldy df_exeoff
eff1 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
eff2 : b1c8             [ 5] 	lda (df_currlin),y
eff4 : aa               [ 2] 	tax
eff5 : c8               [ 2] 	iny
eff6 : b1c8             [ 5] 	lda (df_currlin),y
eff8 : c8               [ 2] 	iny
eff9 : 84ca             [ 3] 	sty df_exeoff
effb : 86d0             [ 3] 	stx df_procptr
effd : 85d1             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
efff : a003             [ 2] 	ldy #DFVVT_DIM1
f001 : b1d0             [ 5] 	lda (df_procptr),y
f003 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f005 : 208ddc           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f008 : 8445             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f00a : a002             [ 2] 	ldy #DFVVT_HI
f00c : 91d0             [ 5] 	sta (df_procptr),y
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank1.s --------------------------------

f00e : a001             [ 2] 	ldy #DFVVT_LO
f010 : 8a               [ 2] 	txa
f011 : 91d0             [ 5] 	sta (df_procptr),y
f013 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f015 : a545             [ 3] 	lda tmp_d
f017 : 91d0             [ 5] 	sta (df_procptr),y
f019 :                       df_rt_proc_addr
                             	; move past first open bracket
f019 : e6ca             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f01b : a004             [ 2] 	ldy #DFVVT_DIM2
f01d : b1d0             [ 5] 	lda (df_procptr),y	
f01f : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f021 : 48               [ 3] 	pha
                             
f022 : c6ca             [ 5] 	dec df_exeoff		; Pre-adjust
f024 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f024 : e6ca             [ 5] 	inc df_exeoff
                             	; if at end then error!
f026 : a4ca             [ 3] 	ldy df_exeoff
f028 : b1c8             [ 5] 	lda (df_currlin),y
f02a : c929             [ 2] 	cmp #')'
f02c : f0bf             [ 4] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f02e : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f031 : 68               [ 4] 	pla
                             	; decrement
f032 : 38               [ 2] 	sec
f033 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f035 : 48               [ 3] 	pha
                             	; go back and do all required parms
f036 : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f038 :                       df_rt_proc_parm_done
f038 : 68               [ 4] 	pla
f039 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f039 : a4ca             [ 3] 	ldy df_exeoff
f03b : b1c8             [ 5] 	lda (df_currlin),y
f03d : c929             [ 2] 	cmp #')'
f03f : d0ac             [ 4] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f041 : a6d0             [ 3] 	ldx df_procptr
f043 : a5d1             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f045 :                       df_rt_exec_proc
                             	; save slot address
f045 : 86e3             [ 3] 	stx df_tmpptra
f047 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank1.s --------------------------------

f049 : a5c8             [ 3] 	lda df_currlin
f04b : 48               [ 3] 	pha
f04c : a5c9             [ 3] 	lda df_currlin+1
f04e : 48               [ 3] 	pha
f04f : a5ca             [ 3] 	lda df_exeoff
f051 : 48               [ 3] 	pha
f052 : a5c1             [ 3] 	lda df_nxtstidx
f054 : 48               [ 3] 	pha
f055 : a5c2             [ 3] 	lda df_curstidx
f057 : 48               [ 3] 	pha
f058 : a5c0             [ 3] 	lda df_eolidx
f05a : 48               [ 3] 	pha
f05b : a5d5             [ 3] 	lda df_ifnest
f05d : 48               [ 3] 	pha
                             
                             	; now initialise the data
f05e : a001             [ 2] 	ldy #DFVVT_LO
f060 : b1e3             [ 5] 	lda (df_tmpptra),y
f062 : 85c8             [ 3] 	sta df_currlin
f064 : c8               [ 2] 	iny
f065 : b1e3             [ 5] 	lda (df_tmpptra),y
f067 : 85c9             [ 3] 	sta df_currlin+1
f069 : c8               [ 2] 	iny
f06a : b1e3             [ 5] 	lda (df_tmpptra),y
f06c : 85ca             [ 3] 	sta df_exeoff
f06e : 85c2             [ 3] 	sta df_curstidx
f070 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f072 : b1c8             [ 5] 	lda (df_currlin),y
f074 : 85c1             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f076 : 20cfdb           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f079 : 68               [ 4] 	pla
f07a : 85d5             [ 3] 	sta df_ifnest
f07c : 68               [ 4] 	pla
f07d : 85c0             [ 3] 	sta df_eolidx
f07f : 68               [ 4] 	pla
f080 : 85c2             [ 3] 	sta df_curstidx
f082 : 68               [ 4] 	pla
f083 : 85c1             [ 3] 	sta df_nxtstidx
f085 : 68               [ 4] 	pla
f086 : 85ca             [ 3] 	sta df_exeoff
f088 : 68               [ 4] 	pla
f089 : 85c9             [ 3] 	sta df_currlin+1
f08b : 68               [ 4] 	pla
f08c : 85c8             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f08e : 60               [ 6] 	rts
                             
                             
f08f :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f08f : a6ca             [ 3] 	ldx df_exeoff
f091 : e8               [ 2] 	inx
f092 : e8               [ 2] 	inx
f093 : e8               [ 2] 	inx
f094 : 86ca             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f096 : a201             [ 2] 	ldx #1									; index in to scratch
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank1.s --------------------------------

f098 : 86ce             [ 3] 	stx df_procargs							; Proc args is the #args-1
f09a : a4ca             [ 3] 	ldy df_exeoff
f09c :                       df_rt_def_find_var
f09c : c8               [ 2] 	iny
f09d : b1c8             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f09f : c929             [ 2] 	cmp #')'
f0a1 : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f0a3 : c911             [ 2] 	cmp #DFTK_VAR
f0a5 : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f0a7 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f0a9 : d0f1             [ 3] 	bne df_rt_def_find_var
f0ab :                       df_rt_def_got_varparm
                             	; set high bit
f0ab : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f0ad : c8               [ 2] 	iny
f0ae :                       df_rt_def_got_var
f0ae : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f0b0 : 9d0009           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f0b3 : c8               [ 2] 	iny
f0b4 : b1c8             [ 5] 	lda (df_currlin),y
f0b6 : 9d2009           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f0b9 : c8               [ 2] 	iny
f0ba : b1c8             [ 5] 	lda (df_currlin),y
f0bc : 9d4009           [ 5] 	sta scratch+64,x
f0bf : e8               [ 2] 	inx
f0c0 : e6ce             [ 5] 	inc df_procargs
f0c2 : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f0c4 :                       df_rt_def_parm_done
                             	; save index that we got to
f0c4 : 84ca             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f0c6 : 86cd             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f0c8 : a900             [ 2] 	lda #0
f0ca : 85cf             [ 3] 	sta df_procloc
f0cc :                       df_rt_def_load_var
f0cc : c6ce             [ 5] 	dec df_procargs
f0ce : f02f             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f0d0 : c6cd             [ 5] 	dec df_procmode
f0d2 : a6cd             [ 3] 	ldx df_procmode
f0d4 : bd2009           [ 4] 	lda scratch+32,x
f0d7 : 85e3             [ 3] 	sta df_tmpptra
f0d9 : bd4009           [ 4] 	lda scratch+64,x
f0dc : 85e4             [ 3] 	sta df_tmpptra+1
                             	
f0de : bd0009           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f0e1 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f0e3 : a6e3             [ 3] 	ldx df_tmpptra
f0e5 : a5e4             [ 3] 	lda df_tmpptra+1
f0e7 : 2033f1           [ 6] 	jsr df_rt_proc_local
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank1.s --------------------------------

                             	; increment number of locals
f0ea : e6cf             [ 5] 	inc df_procloc
f0ec :                       df_rt_def_initialise_parm
                             	; load type
f0ec : a000             [ 2] 	ldy #DFVVT_TYPE
f0ee : b1e3             [ 5] 	lda (df_tmpptra),y
f0f0 : a8               [ 2] 	tay					; Put the type into Y
f0f1 : 20a7f1           [ 6] 	jsr df_ost_popParmX	; Try to get this off the st
                             	; update the variable
f0f4 : a002             [ 2] 	ldy #DFVVT_HI
f0f6 : 91e3             [ 5] 	sta (df_tmpptra),y
f0f8 : 88               [ 2] 	dey
f0f9 : 8a               [ 2] 	txa
f0fa : 91e3             [ 5] 	sta (df_tmpptra),y
                             
f0fc : 4cccf0           [ 3] 	jmp df_rt_def_load_var
f0ff :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f0ff : a5cf             [ 3] 	lda df_procloc
f101 : 2047f1           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f104 : 18               [ 2] 	clc
f105 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f106 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f106 : 20a4d8           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f109 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f109 : 2050f1           [ 6] 	jsr df_rst_popByte
f10c : aa               [ 2] 	tax
f10d : f020             [ 3] 	beq df_rt_proc_unload_done
f10f :                       df_rt_proc_unloadvar
f10f : 8a               [ 2] 	txa
f110 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f111 : 206df1           [ 6] 	jsr df_rst_popWord
f114 : 86e5             [ 3] 	stx df_tmpptrb
f116 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f118 : 206df1           [ 6] 	jsr df_rst_popWord
f11b : 86e3             [ 3] 	stx df_tmpptra
f11d : 85e4             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f11f : a001             [ 2] 	ldy #DFVVT_LO
f121 : a5e5             [ 3] 	lda df_tmpptrb
f123 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; then hi
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank1.s --------------------------------

f125 : c8               [ 2] 	iny
f126 : a5e6             [ 3] 	lda df_tmpptrb+1
f128 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f12a : 68               [ 4] 	pla
f12b : aa               [ 2] 	tax
f12c : ca               [ 2] 	dex
f12d : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f12f :                       df_rt_proc_unload_done
f12f : 68               [ 4] 	pla					; Pull the return address off stack
f130 : 68               [ 4] 	pla					; to get to the previous level
f131 : 18               [ 2] 	clc
f132 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f133 :                       df_rt_proc_local
                             	; save address
f133 : 86e3             [ 3] 	stx df_tmpptra
f135 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f137 : 205ff1           [ 6] 	jsr df_rst_pushWord
f13a :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f13a : a001             [ 2] 	ldy #DFVVT_LO
f13c : b1e3             [ 5] 	lda (df_tmpptra),y
f13e : aa               [ 2] 	tax
f13f : c8               [ 2] 	iny
f140 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f142 : 205ff1           [ 6] 	jsr df_rst_pushWord
f145 : 18               [ 2] 	clc
f146 : 60               [ 6] 	rts
                             		
f147 :                       mod_sz_proc_e
                             
                             
f147 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank1.s --------------------------------

                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f147 :                       df_rst_pushByte
f147 : a4b8             [ 3] 	ldy df_rtstop
f149 : 99000b           [ 5] 	sta df_rtstck,y
f14c : 88               [ 2] 	dey
f14d : 84b8             [ 3] 	sty df_rtstop
f14f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f150 :                       df_rst_popByte
f150 : a4b8             [ 3] 	ldy df_rtstop
f152 : c8               [ 2] 	iny
f153 : b9000b           [ 4] 	lda df_rtstck,y
f156 : 84b8             [ 3] 	sty df_rtstop
f158 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f159 :                       df_rst_peekByte
f159 : a4b8             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f15b : b9010b           [ 4] 	lda df_rtstck+1,y
f15e : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f15f :                       df_rst_pushWord
f15f : a4b8             [ 3] 	ldy df_rtstop
f161 : 99000b           [ 5] 	sta df_rtstck,y
f164 : 88               [ 2] 	dey
f165 : 8a               [ 2] 	txa
f166 : 99000b           [ 5] 	sta df_rtstck,y
f169 : 88               [ 2] 	dey
f16a : 84b8             [ 3] 	sty df_rtstop
f16c : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f16d :                       df_rst_popWord
f16d : a4b8             [ 3] 	ldy df_rtstop
f16f : c8               [ 2] 	iny
f170 : be000b           [ 4] 	ldx df_rtstck,y
f173 : c8               [ 2] 	iny
f174 : b9000b           [ 4] 	lda df_rtstck,y
f177 : 84b8             [ 3] 	sty df_rtstop
f179 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f17a :                       df_ost_pushStr
f17a : a004             [ 2] 	ldy #DFST_STR
f17c : d009             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f17e :                       df_ost_pushPtr
f17e : a0ff             [ 2] 	ldy #DFST_PTR
f180 : d005             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f182 :                       df_ost_pushIntA
f182 : aa               [ 2] 	tax
f183 : a900             [ 2] 	lda #0
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f185 :                       df_ost_pushInt
f185 : a003             [ 2] 	ldy #DFST_INT
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f187 :                       df_ost_pushParmX
f187 : 8445             [ 3] 	sty tmp_d		; Save Type
f189 : a4b9             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f18b : 99000b           [ 5] 	sta df_rtstck,y
f18e : c8               [ 2] 	iny
                             	; push low byte next (X)
f18f : 8a               [ 2] 	txa
f190 : 99000b           [ 5] 	sta df_rtstck,y
f193 : c8               [ 2] 	iny
f194 : a545             [ 3] 	lda tmp_d		; get Type
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank1.s --------------------------------

f196 : 99000b           [ 5] 	sta df_rtstck,y
f199 : c8               [ 2] 	iny
                             	; save new top of stack
f19a : 84b9             [ 3] 	sty df_parmtop
f19c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f19d :                       df_ost_popStr
f19d : a904             [ 2] 	lda #DFST_STR
f19f : d006             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f1a1 :                       df_ost_popPtr
f1a1 : a9ff             [ 2] 	lda #0xff
f1a3 : d002             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             		
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f1a5 :                       df_ost_popInt
f1a5 : a903             [ 2] 	lda #DFST_INT
                             	; ***FALL THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* A - type expected
                             ;****************************************
f1a7 :                       df_ost_popParmX
f1a7 : a4b9             [ 3] 	ldy df_parmtop
                             	; pull type first
f1a9 : 88               [ 2] 	dey
f1aa : 39000b           [ 4] 	and df_rtstck,y
f1ad : f00b             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f1af : 88               [ 2] 	dey
f1b0 : be000b           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f1b3 : 88               [ 2] 	dey
f1b4 : b9000b           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f1b7 : 84b9             [ 3] 	sty df_parmtop
f1b9 : 60               [ 6] 	rts
f1ba :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f1bc :                       df_ost_peekType
f1bc : a4b9             [ 3] 	ldy df_parmtop
f1be : b9ff0a           [ 4] 	lda df_rtstck-1,y
f1c1 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f1c2 :                       df_st_malloc
                             	; save A in Y
f1c2 : a8               [ 2] 	tay
                             	; save old starend
f1c3 : a5b7             [ 3] 	lda df_starend+1
f1c5 : 48               [ 3] 	pha
f1c6 : a5b6             [ 3] 	lda df_starend
f1c8 : 48               [ 3] 	pha
                             	; restore A from Y
f1c9 : 98               [ 2] 	tya
                             	; add X,A to starend
f1ca : 48               [ 3] 	pha
f1cb : 8a               [ 2] 	txa
f1cc : 18               [ 2] 	clc
f1cd : 65b6             [ 3] 	adc df_starend
f1cf : 85b6             [ 3] 	sta df_starend
f1d1 : 68               [ 4] 	pla
f1d2 : 65b7             [ 3] 	adc df_starend+1
f1d4 : 85b7             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f1d6 : 68               [ 4] 	pla
f1d7 : aa               [ 2] 	tax
f1d8 : 68               [ 4] 	pla
f1d9 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f1da :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f1da : a900             [ 2] 	lda #lo(DF_MEMTOP)
f1dc : 8d670c           [ 4] 	sta df_memtop
f1df : a9c0             [ 2] 	lda #hi(DF_MEMTOP)
f1e1 : 8d680c           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f1e4 : 20e7f1           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f1e7 :                       df_clear
                             	; Start of program space
f1e7 : a969             [ 2] 	lda #lo(DF_PROGSTART)
f1e9 : 85a7             [ 3] 	sta df_prgstrt
f1eb : 85a9             [ 3] 	sta df_prgend
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank1.s --------------------------------

f1ed : a90c             [ 2] 	lda #hi(DF_PROGSTART)
f1ef : 85a8             [ 3] 	sta df_prgstrt+1
f1f1 : 85aa             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f1f3 : a900             [ 2] 	lda #0
f1f5 : a8               [ 2] 	tay
f1f6 : 91a7             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f1f8 : 85b3             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f1fa : ad670c           [ 4] 	lda df_memtop
f1fd : 85af             [ 3] 	sta df_vvtstrt
f1ff : 85b1             [ 3] 	sta df_vvtend
f201 : ad680c           [ 4] 	lda df_memtop+1
f204 : 85b0             [ 3] 	sta df_vvtstrt+1
f206 : 85b2             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f208 : a5af             [ 3] 	lda df_vvtstrt
f20a : 85ab             [ 3] 	sta df_vntstrt
f20c : 85ad             [ 3] 	sta df_vntend
f20e : a5b0             [ 3] 	lda df_vvtstrt+1
f210 : 85ac             [ 3] 	sta df_vntstrt+1
f212 : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f214 : a900             [ 2] 	lda #lo(scratch)
f216 : 85bc             [ 3] 	sta df_sevalptr
f218 : a909             [ 2] 	lda #hi(scratch)
f21a : 85bd             [ 3] 	sta df_sevalptr+1
                             
f21c : 60               [ 6] 	rts
                             
f21d :                       mod_sz_dflat_e
                             
                             	include "dflat\error.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank1.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f21d :                       df_tk_errortab
f21d : 4f6b00                	db	"Ok", 0
f220 : 53796e74617800        	db	"Syntax", 0
f227 : 5479706500            	db	"Type", 0
f22c : 52652d64696d00        	db	"Re-dim", 0
f233 : 4e6f2072657065..      	db	"No repeat", 0
f23d : 4e6f206465666e00      	db	"No defn", 0
f245 : 5061726d00            	db	"Parm", 0
f24a : 456e64656400          	db	"Ended", 0
f250 : 4e6f20656e6469..      	db	"No endif", 0
f259 : 4e6f20696600          	db	"No if", 0
f25f : 4e6f20666f7200        	db	"No for", 0
f266 : 4e6f7420666f75..      	db	"Not found", 0
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank1.s --------------------------------

f270 : 546f6f206c6f6e..      	db	"Too long", 0
f279 : 427265616b00          	db	"Break", 0
f27f : 4e6f206461746100      	db	"No data", 0
f287 : 4e6f207768696c..      	db	"No while", 0
f290 : 4e6f206c696e6500      	db	"No line", 0
f298 : 4e6f2072657475..      	db	"No return ", 0
f2a3 : 41626f7274656400      	db	"Aborted", 0
f2ab : 426f756e647300        	db	"Bounds", 0
f2b2 : 4e6f206f726700        	db	"No org", 0
f2b9 : 00                    	db	0
                             
f2ba :                       df_tk_error_inline
f2ba : 20696e206c696e..      	db	" in line ", 0
f2c4 :                       df_tk_error_atpos
f2c4 : 20706f732000          	db	" pos ", 0
f2ca :                       df_tk_error_error
f2ca : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f2d1 :                       df_trap_error
                             	; set IO back to normal
f2d1 : 2042c5           [ 6] 	jsr io_set_default
f2d4 : 58               [ 2] 	cli
                             
f2d5 : a91d             [ 2] 	lda #lo(df_tk_errortab)
f2d7 : 85e3             [ 3] 	sta df_tmpptra
f2d9 : a9f2             [ 2] 	lda #hi(df_tk_errortab)
f2db : 85e4             [ 3] 	sta df_tmpptra+1
f2dd : a69f             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f2df : f002             [ 3] 	beq df_trap_go_monitor
f2e1 : 1003             [ 3] 	bpl df_trap_normal
f2e3 :                       df_trap_go_monitor
f2e3 : 4c62f3           [ 3] 	jmp df_trap_monitor
f2e6 :                       df_trap_normal
f2e6 : a000             [ 2] 	ldy #0
f2e8 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f2e8 : b1e3             [ 5] 	lda (df_tmpptra),y
f2ea : f076             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f2ec :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f2f2 : b1e3             [ 5] 	lda (df_tmpptra),y
f2f4 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f2fc : ca               [ 2] 	dex
f2fd : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f2ff : a6e3             [ 3] 	ldx df_tmpptra
f301 : a5e4             [ 3] 	lda df_tmpptra+1
f303 : 20abc5           [ 6] 	jsr io_print_line
f306 : a2ca             [ 2] 	ldx #lo(df_tk_error_error)
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank1.s --------------------------------

f308 : a9f2             [ 2] 	lda #hi(df_tk_error_error)
f30a : 20abc5           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f30d : a001             [ 2] 	ldy #DFTK_LINNUM
f30f : b1c8             [ 5] 	lda (df_currlin),y
f311 : aa               [ 2] 	tax
f312 : c8               [ 2] 	iny
f313 : b1c8             [ 5] 	lda (df_currlin),y
f315 : d004             [ 3] 	bne df_show_err_linnum
f317 : e000             [ 2] 	cpx #0x00
f319 : f011             [ 3] 	beq df_show_err_fin
f31b :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f328 : 18               [ 2] 	clc
f329 : 20d3ca           [ 6] 	jsr print_a_to_d
f32c :                       df_show_err_fin
f32c : a4be             [ 3] 	ldy df_linoff
f32e : f02b             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f33d : 98               [ 2] 	tya
f33e : aa               [ 2] 	tax
f33f : a900             [ 2] 	lda #0
f341 : 18               [ 2] 	clc
f342 : 20d3ca           [ 6] 	jsr print_a_to_d
f345 : 201cc8           [ 6] 	jsr utilPrintCRLF
f348 : a000             [ 2] 	ldy #0
                             	; Show the error line with error pos inverse
f34a :                       def_show_err_line
f34a : b9000a           [ 4] 	lda df_linbuff,y
f34d : f00c             [ 3] 	beq df_show_err_done
f34f : c4be             [ 3] 	cpy df_linoff
f351 : d002             [ 3] 	bne def_show_err_line_skip
f353 : 0980             [ 2] 	ora #0x80
f355 :                       def_show_err_line_skip
f355 : 2060c5           [ 6] 	jsr io_put_ch
f358 : c8               [ 2] 	iny
f359 : d0ef             [ 3] 	bne def_show_err_line	; Always
f35b :                       df_show_err_done
f35b : 201cc8           [ 6] 	jsr utilPrintCRLF
f35e : 18               [ 2] 	clc
                             	; back to editor
f35f : 4c81d7           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f362 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f369 : a5a5             [ 3] 	lda df_brkpc+1
f36b : 2024c8           [ 6] 	jsr utilPrintA
f36e : a5a4             [ 3] 	lda df_brkpc
f370 : 2024c8           [ 6] 	jsr utilPrintA
f373 : 2014c8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f37d : a585             [ 3] 	lda num_a
f37f : 2024c8           [ 6] 	jsr utilPrintA
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank1.s --------------------------------

f382 : 2014c8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f38c : a586             [ 3] 	lda num_a+1
f38e : 2024c8           [ 6] 	jsr utilPrintA
f391 : 2014c8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f39b : a587             [ 3] 	lda num_a+2
f39d : 2024c8           [ 6] 	jsr utilPrintA
f3a0 : 201cc8           [ 6] 	jsr utilPrintCRLF
                             
f3a3 : 2001e0           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f3a6 : 4c81d7           [ 3] 	jmp df_pg_dflat
                             
f3a9 :                       df_msg_pc
f3a9 : 50433a00              	db "PC:\x0"
f3ad :                       df_msg_acc
f3ad : 413a00                	db "A:\x0"
f3b0 :                       df_msg_xreg
f3b0 : 583a00                	db "X:\x0"
f3b3 :                       df_msg_yreg
f3b3 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat\asm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f3b6 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat\asm.i"
                             ;*	BBC-128 BREADBOARD COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank1.s --------------------------------

                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat\tkasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f3b6 :                       mod_sz_tkasm_s
                             
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank1.s --------------------------------

                             	; if didn't find regular keywords then try assen
f3b6 :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f3b6 : 20ebf3           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f3b9 : b01d             [ 3] 	bcs df_tk_asm_label
f3bb :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f3bb : a997             [ 2] 	lda #DFRT_ASM
f3bd : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f3c0 : a5c5             [ 3] 	lda df_symoff
f3c2 : 0980             [ 2] 	ora #0x80
f3c4 : 20d3cd           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f3c7 : a001             [ 2] 	ldy #1
f3c9 : b1c3             [ 5] 	lda (df_symtab),y
                             	; Directive?
f3cb : c910             [ 2] 	cmp #AM_DIR
f3cd : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f3cf : a5c5             [ 3] 	lda df_symoff
f3d1 : 4c42f4           [ 3] 	jmp df_tk_asm_exec_parser
f3d4 :                       df_tk_asm_parse_command_err
f3d4 : 60               [ 6] 	rts
f3d5 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f3d5 : 4c47f4           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f3d8 :                       df_tk_asm_label
                             	; labels must start with '.'
f3d8 : a92e             [ 2] 	lda #'.'
f3da : 2046ce           [ 6] 	jsr df_tk_expect
f3dd : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f3df : a997             [ 2] 	lda #DFRT_ASM
f3e1 : 20d3cd           [ 6] 	jsr df_tk_put_tok
f3e4 : e6be             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f3e6 : a900             [ 2] 	lda #0
f3e8 : 4c0acf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f3eb :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f3eb : a9d5             [ 2] 	lda #lo(df_asm_tokensyms)
f3ed : 85c3             [ 3] 	sta df_symtab
f3ef : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f3f1 : 85c4             [ 3] 	sta df_symtab+1
f3f3 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank1.s --------------------------------

f3f5 : 85c5             [ 3] 	sta df_symoff
f3f7 : a200             [ 2] 	ldx #0
f3f9 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f3f9 : a4be             [ 3] 	ldy df_linoff
f3fb :                       df_tk_asm_checktokch
                             	; Get symtable char
f3fb : a1c3             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f3fd : c920             [ 2] 	cmp #' '
f3ff : 9033             [ 4] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f401 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f404 : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f40c : c8               [ 2] 	iny
f40d : 4cfbf3           [ 3] 	jmp df_tk_asm_checktokch
f410 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f410 : e6c5             [ 5] 	inc df_symoff
f412 :                       df_tk_asm_symnextentry
f412 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f414 : c920             [ 2] 	cmp #' '
f416 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f41e : 4c12f4           [ 3] 	jmp df_tk_asm_symnextentry
f421 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f421 : 38               [ 2] 	sec
f422 : 65c3             [ 3] 	adc df_symtab
f424 : 85c3             [ 3] 	sta df_symtab
f426 : a5c4             [ 3] 	lda df_symtab+1
f428 : 6900             [ 2] 	adc #0
f42a : 85c4             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f42c : a1c3             [ 6] 	lda (df_symtab,x)
f42e : d0c9             [ 4] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f430 : 85c5             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f432 : 38               [ 2] 	sec
f433 : 60               [ 6] 	rts
f434 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank1.s --------------------------------

f434 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f437 : 2018ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f43a : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f43c : 84be             [ 3] 	sty df_linoff
f43e : a5c5             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f440 :                       df_tk_asm_addr_mode_ok
f440 : 18               [ 2] 	clc
f441 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f442 :                       df_tk_asm_exec_parser
f442 : 0a               [ 2] 	asl a
f443 : aa               [ 2] 	tax
f444 : 7c46fb           [ 6] 	jmp (df_tk_asm_tokenjmp,x)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f447 :                       df_tk_asm_addr_mode
f447 : 2024ce           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f44a : c900             [ 2] 	cmp #0					;End of line?
f44c : f0f2             [ 3] 	beq df_tk_asm_addr_mode_ok
f44e : c93a             [ 2] 	cmp #':'				;End of statement?
f450 : f0ee             [ 3] 	beq df_tk_asm_addr_mode_ok
f452 : a923             [ 2] 	lda #'#'				; Check for immediate
f454 : 2054ce           [ 6] 	jsr df_tk_expect_tok
f457 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f459 : 4c7ef4           [ 3] 	jmp df_tk_imm		; Process immediate
f45c :                       df_tk_asm_addr_mode_1
f45c : a928             [ 2] 	lda #'('				; One of indirect modes?
f45e : 2054ce           [ 6] 	jsr df_tk_expect_tok
f461 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f463 : 4c83f4           [ 3] 	jmp df_tk_indirect
f466 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f466 : 2051d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f469 : a92c             [ 2] 	lda #','
f46b : 2054ce           [ 6] 	jsr df_tk_expect_tok
f46e : b0d0             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f470 : a978             [ 2] 	lda #'x'
f472 : 2054ce           [ 6] 	jsr df_tk_expect_tok
f475 : 90c9             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f477 : a979             [ 2] 	lda #'y'
f479 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank1.s --------------------------------

f47c : 18               [ 2] 	clc
f47d : 60               [ 6] 	rts
                             	
                             	
                             ;* Toeknise immediate addressing mode	
f47e :                       df_tk_imm
                             	; Just one expression expected
f47e : 2051d0           [ 6] 	jsr df_tk_expression
f481 : 18               [ 2] 	clc
f482 : 60               [ 6] 	rts
                             	
                             ;* Tokenise indirect
f483 :                       df_tk_indirect
                             	; Just one expression expected
f483 : 2051d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f486 : a92c             [ 2] 	lda #','
f488 : 2054ce           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f48b : b00c             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f48d : a978             [ 2] 	lda #'x'
f48f : 205fce           [ 6] 	jsr df_tk_expect_tok_err
f492 : a929             [ 2] 	lda #')'
f494 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
f497 : 18               [ 2] 	clc
f498 : 60               [ 6] 	rts
                             	
f499 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f499 : a929             [ 2] 	lda #')'
f49b : 205fce           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f49e : a92c             [ 2] 	lda #','
f4a0 : 2054ce           [ 6] 	jsr df_tk_expect_tok
f4a3 : b007             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f4a5 : a979             [ 2] 	lda #'y'
f4a7 : 205fce           [ 6] 	jsr df_tk_expect_tok_err
f4aa : 18               [ 2] 	clc
f4ab : 60               [ 6] 	rts
                             
f4ac :                       df_tk_indirect_done
f4ac : 18               [ 2] 	clc
f4ad : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f4ae :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat\rtasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f4ae :                       mod_sz_rtasm_s
                             
f4ae :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f4ae : a4ca             [ 3] 	ldy df_exeoff
f4b0 : b1c8             [ 5] 	lda (df_currlin),y
f4b2 : 1009             [ 3] 	bpl df_rt_asm_do_label
f4b4 : 20c1f4           [ 6] 	jsr df_rt_asm_command
f4b7 : 20b9f6           [ 6] 	jsr df_rt_asm_printCR
f4ba : 4cc0f4           [ 3] 	jmp df_rt_asm_assemble_done
f4bd :                       df_rt_asm_do_label
f4bd : 20e5f4           [ 6] 	jsr df_rt_asm_label
f4c0 :                       df_rt_asm_assemble_done
                             	; any clean up here
f4c0 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank1.s --------------------------------

                             ; directive with index in A ignoring MSB
f4c1 :                       df_rt_asm_command
f4c1 : 297f             [ 2] 	and #0x7f
f4c3 : 48               [ 3] 	pha
f4c4 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f4c5 : 2087f7           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f4c8 : a001             [ 2] 	ldy #1
f4ca : b1c3             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f4cc : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f4ce : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f4d0 : 4cadf5           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f4d3 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f4d3 : 68               [ 4] 	pla
f4d4 : 0a               [ 2] 	asl a
f4d5 : aa               [ 2] 	tax
                             	; jump over directive code
f4d6 : e6ca             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f4d8 : bd50fb           [ 4] 	lda df_rt_asm_tokenjmp,x
f4db : 85e3             [ 3] 	sta df_tmpptra
f4dd : bd51fb           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f4e0 : 85e4             [ 3] 	sta df_tmpptra+1
f4e2 : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f4e5 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f4e5 : 2062e5           [ 6] 	jsr df_rt_generate_lvar
f4e8 : 86e0             [ 3] 	stx df_asmoprnd
f4ea : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f4ec : a000             [ 2] 	ldy #0
f4ee : a5db             [ 3] 	lda df_asmpc
f4f0 : 91e0             [ 5] 	sta (df_asmoprnd),y
f4f2 : a5dc             [ 3] 	lda df_asmpc+1
f4f4 : c8               [ 2] 	iny
f4f5 : 91e0             [ 5] 	sta (df_asmoprnd),y
f4f7 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f4f8 :                       df_rt_asm_org
                             	; Get the address from expression
f4f8 : 2064f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f4fb : a5e0             [ 3] 	lda df_asmoprnd
f4fd : 85db             [ 3] 	sta df_asmpc
f4ff : a5e1             [ 3] 	lda df_asmoprnd+1
f501 : 85dc             [ 3] 	sta df_asmpc+1
f503 : a903             [ 2] 	lda #3
f505 : 85e2             [ 3] 	sta df_asmlen
f507 : 4c7bf6           [ 3] 	jmp df_rt_asm_printPC
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank1.s --------------------------------

                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f50a :                       df_rt_asm_opt
                             	; Get the value from expression
f50a : 2064f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f50d : a5e0             [ 3] 	lda df_asmoprnd
f50f : 85dd             [ 3] 	sta df_asmopt
f511 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
f512 :                       df_rt_asm_db
f512 : a902             [ 2] 	lda #2
f514 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f515 :                       df_rt_asm_dw
f515 : a903             [ 2] 	lda #3
f517 :                       df_rt_asm_db_start
f517 : 85e2             [ 3] 	sta df_asmlen
f519 : 207bf6           [ 6] 	jsr df_rt_asm_printPC
f51c : 2096f6           [ 6] 	jsr df_rt_asm_printSPC
f51f :                       df_rt_asm_data
f51f : 20a4d8           [ 6] 	jsr df_rt_neval		; Evaluate expression
                             	_df_ost_peekType	; What is the type
                             
f527 : 2904             [ 2] 	and #DFST_STR
f529 : d00d             [ 3] 	bne df_rt_asm_string; If string
f52b : 20a5f1           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f52e : 86e0             [ 3] 	stx df_asmoprnd		; store low value
f530 : 85e1             [ 3] 	sta df_asmoprnd+1	; store high value
f532 : 2060f5           [ 6] 	jsr df_rt_asm_data_write
f535 : 4c55f5           [ 3] 	jmp df_rt_asm_data_next
f538 :                       df_rt_asm_string
f538 : 20a1f1           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f53b : 86e3             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f53d : 85e4             [ 3] 	sta df_tmpptra+1
f53f :                       df_rt_asm_string_ch
f53f : a000             [ 2] 	ldy #0
f541 : b1e3             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f543 : f010             [ 3] 	beq df_rt_asm_data_next
f545 : 85e0             [ 3] 	sta df_asmoprnd		; Save as operand
f547 : 84e1             [ 3] 	sty df_asmoprnd+1	; High is always zero
f549 : 2060f5           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
f552 : 4c3ff5           [ 3] 	jmp df_rt_asm_string_ch
f555 :                       df_rt_asm_data_next
f555 : 2094e5           [ 6] 	jsr df_rt_eos		; End?
f558 : b005             [ 3] 	bcs df_rt_asm_data_done
f55a : e6ca             [ 5] 	inc df_exeoff		; Jump over ','
f55c : 4c1ff5           [ 3] 	jmp df_rt_asm_data
f55f :                       df_rt_asm_data_done
f55f : 60               [ 6] 	rts	
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank1.s --------------------------------

                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
f560 :                       df_rt_asm_data_write
f560 : 209ff6           [ 6] 	jsr df_rt_asm_printOPR
f563 :                       df_rt_asm_data_write_skip1
f563 : a902             [ 2] 	lda #2
f565 : 25dd             [ 3] 	and df_asmopt
f567 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
f569 : a5e0             [ 3] 	lda df_asmoprnd
f56b : a000             [ 2] 	ldy #0
f56d : 91db             [ 5] 	sta (df_asmpc),y
f56f : c8               [ 2] 	iny
f570 : a902             [ 2] 	lda #2
f572 : c5e2             [ 3] 	cmp df_asmlen
f574 : d006             [ 3] 	bne df_rt_asm_data_write_hi
f576 : a5e1             [ 3] 	lda df_asmoprnd+1
f578 : d014             [ 3] 	bne df_rt_asm_data_write_err
f57a : f004             [ 3] 	beq df_rt_asm_data_write_skip2
f57c :                       df_rt_asm_data_write_hi
f57c : a5e1             [ 3] 	lda df_asmoprnd+1
f57e : 91db             [ 5] 	sta (df_asmpc),y
f580 :                       df_rt_asm_data_write_skip2
f580 : a4e2             [ 3] 	ldy df_asmlen
f582 : 88               [ 2] 	dey					; Add 1 less!
f583 : 98               [ 2] 	tya
f584 : 18               [ 2] 	clc
f585 : 65db             [ 3] 	adc df_asmpc
f587 : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f58b : e6dc             [ 5] 	inc df_asmpc+1
f58d : 60               [ 6] 	rts
f58e :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
f590 :                       df_rt_asm_ds
f590 : 207bf6           [ 6] 	jsr df_rt_asm_printPC
f593 : 2096f6           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
f596 : 2064f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
f599 : 18               [ 2] 	clc
f59a : a5e0             [ 3] 	lda df_asmoprnd
f59c : 65db             [ 3] 	adc df_asmpc
f59e : 85db             [ 3] 	sta df_asmpc
f5a0 : a5e1             [ 3] 	lda df_asmoprnd+1
f5a2 : 65dc             [ 3] 	adc df_asmpc+1
f5a4 : 85dc             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
f5a6 : a903             [ 2] 	lda #3
f5a8 : 85e2             [ 3] 	sta df_asmlen
f5aa : 4c9ff6           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
f5ad :                       df_rt_asm_mnem
f5ad : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank1.s --------------------------------

f5ae : e6ca             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
f5b0 : 20e7f6           [ 6] 	jsr df_rt_asm_addrmode
                             
f5b3 :                       df_rt_asm_mnem_try
f5b3 : a5de             [ 3] 	lda df_asmadmd					; With the addressing mode
f5b5 : 206ff7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
f5b8 : c900             [ 2] 	cmp #AM_NONE					; Exists?
f5ba : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
f5bc :                       df_rt_asm_check_alt
f5bc : a6de             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
f5be : bdc4f7           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
f5c1 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
f5c3 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
f5c5 : 206ff7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
f5c8 : c900             [ 2] 	cmp #AM_NONE					; this instruction
f5ca : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
f5cc : c5de             [ 3] 	cmp df_asmadmd					; Same as the original?
f5ce : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
f5d0 :                       df_rt_asm_mnem_chk
f5d0 : 85de             [ 3] 	sta df_asmadmd					; This is the final mode
f5d2 : aa               [ 2] 	tax								; Get the length
f5d3 : bdb3f7           [ 4] 	lda df_asm_length,x
f5d6 : a6e1             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
f5d8 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
f5da : c903             [ 2] 	cmp #3							; Else must be len 3?
f5dc : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
f5de :                       df_rt_asm_mnem_done
f5de : a6de             [ 3] 	ldx df_asmadmd					; Get the final mode index
f5e0 : bdb3f7           [ 4] 	lda df_asm_length,x				; Get the length
f5e3 : 85e2             [ 3] 	sta df_asmlen
f5e5 : a5de             [ 3] 	lda df_asmadmd					; Get the final mode
f5e7 : 206ff7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
f5ea : c8               [ 2] 	iny
f5eb : b1c3             [ 5] 	lda (df_symtab),y
f5ed : 85df             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
f5ef : 4cf4f5           [ 3] 	jmp df_rt_asm_encode
                             	
f5f2 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
f5f4 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
f5f4 : a5de             [ 3] 	lda df_asmadmd
f5f6 : c90f             [ 2] 	cmp #AM_REL
f5f8 : d033             [ 4] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
f5fa : a5e1             [ 3] 	lda df_asmoprnd+1
f5fc : f02f             [ 4] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
f5fe : 38               [ 2] 	sec
f5ff : a5e0             [ 3] 	lda df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank1.s --------------------------------

f601 : e902             [ 2] 	sbc #2
f603 : 85e0             [ 3] 	sta df_asmoprnd
f605 : a5e1             [ 3] 	lda df_asmoprnd+1
f607 : e900             [ 2] 	sbc #0
f609 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
f60b : 38               [ 2] 	sec
f60c : a5e0             [ 3] 	lda df_asmoprnd
f60e : e5db             [ 3] 	sbc df_asmpc
f610 : 85e0             [ 3] 	sta df_asmoprnd
f612 : a5e1             [ 3] 	lda df_asmoprnd+1
f614 : e5dc             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
f616 : a000             [ 2] 	ldy #0
f618 : 84e1             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
f61a : a8               [ 2] 	tay
f61b : f00a             [ 3] 	beq df_rt_asm_encode_relpos
f61d : c9ff             [ 2] 	cmp #0xff
f61f : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
f621 : a5e0             [ 3] 	lda df_asmoprnd
f623 : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
f625 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
f627 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
f627 : a5e0             [ 3] 	lda df_asmoprnd
f629 : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
f62b :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
f62b : c6e1             [ 5] 	dec df_asmoprnd+1
f62d :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
f62d : a902             [ 2] 	lda #0x02
f62f : 25dd             [ 3] 	and df_asmopt
f631 : f028             [ 3] 	beq df_rt_asm_encode_print
f633 : a000             [ 2] 	ldy #0
f635 : a5df             [ 3] 	lda df_asmopcde
f637 : 91db             [ 5] 	sta (df_asmpc),y
f639 : a5e2             [ 3] 	lda df_asmlen
f63b : c901             [ 2] 	cmp #1						; No operand
f63d : f01c             [ 3] 	beq df_rt_asm_encode_print
f63f : c903             [ 2] 	cmp #3						; Word operand
f641 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
f643 : a5e1             [ 3] 	lda df_asmoprnd+1
f645 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
f649 :                       df_rt_asm_encode_writebyte
f649 : c8               [ 2] 	iny 
f64a : a5e0             [ 3] 	lda df_asmoprnd
f64c : 91db             [ 5] 	sta (df_asmpc),y
f64e : 4c5bf6           [ 3] 	jmp df_rt_asm_encode_print
f651 :                       df_rt_asm_encode_writeword
f651 : c8               [ 2] 	iny 
f652 : a5e0             [ 3] 	lda df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank1.s --------------------------------

f654 : 91db             [ 5] 	sta (df_asmpc),y
f656 : c8               [ 2] 	iny 
f657 : a5e1             [ 3] 	lda df_asmoprnd+1
f659 : 91db             [ 5] 	sta (df_asmpc),y	
f65b :                       df_rt_asm_encode_print
f65b : 206bf6           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
f65e : 18               [ 2] 	clc
f65f : a5db             [ 3] 	lda df_asmpc
f661 : 65e2             [ 3] 	adc df_asmlen
f663 : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f667 : e6dc             [ 5] 	inc df_asmpc+1
f669 : 18               [ 2] 	clc
f66a : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
f66b :                       df_rt_asm_print_mmen
f66b : 207bf6           [ 6] 	jsr df_rt_asm_printPC
f66e : 2096f6           [ 6] 	jsr df_rt_asm_printSPC
f671 : 208bf6           [ 6] 	jsr df_rt_asm_printOPC
f674 : 2096f6           [ 6] 	jsr df_rt_asm_printSPC
f677 : 209ff6           [ 6] 	jsr df_rt_asm_printOPR
f67a :                       df_rt_asm_print_rts			; Hopefully subs can get he
f67a : 60               [ 6] 	rts
                             
f67b :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
f67b : a901             [ 2] 	lda #0x01
f67d : 25dd             [ 3] 	and df_asmopt
f67f : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
f681 : a5dc             [ 3] 	lda df_asmpc+1
f683 : 2024c8           [ 6] 	jsr utilPrintA
f686 : a5db             [ 3] 	lda df_asmpc
f688 : 4c24c8           [ 3] 	jmp utilPrintA
                             
f68b :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
f68b : a901             [ 2] 	lda #0x01
f68d : 25dd             [ 3] 	and df_asmopt
f68f : f0e9             [ 3] 	beq df_rt_asm_print_rts
f691 : a5df             [ 3] 	lda df_asmopcde
f693 : 4c24c8           [ 3] 	jmp utilPrintA
                             
f696 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
f696 : a901             [ 2] 	lda #0x01
f698 : 25dd             [ 3] 	and df_asmopt
f69a : f0de             [ 3] 	beq df_rt_asm_print_rts
f69c : 4c14c8           [ 3] 	jmp utilPrintSPC
                             	
f69f :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
f69f : a901             [ 2] 	lda #0x01
f6a1 : 25dd             [ 3] 	and df_asmopt
f6a3 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
f6a5 : a5e2             [ 3] 	lda df_asmlen				; check how may operand bytes
f6a7 : c901             [ 2] 	cmp #1						; if only opcode, done
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank1.s --------------------------------

f6a9 : f0cf             [ 3] 	beq df_rt_asm_print_rts	
f6ab : c902             [ 2] 	cmp #2
f6ad : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
f6af : a5e1             [ 3] 	lda df_asmoprnd+1
f6b1 : 2024c8           [ 6] 	jsr utilPrintA
f6b4 :                       df_rt_asm_printOPR_1
f6b4 : a5e0             [ 3] 	lda df_asmoprnd
f6b6 : 4c24c8           [ 3] 	jmp utilPrintA
                             
f6b9 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
f6b9 : a901             [ 2] 	lda #0x01
f6bb : 25dd             [ 3] 	and df_asmopt
f6bd : f0bb             [ 3] 	beq df_rt_asm_print_rts
f6bf : 4c1cc8           [ 3] 	jmp utilPrintCRLF
                             
f6c2 :                       df_rt_asm_printCH
f6c2 : 8545             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
f6c4 : a901             [ 2] 	lda #0x01
f6c6 : 25dd             [ 3] 	and df_asmopt
f6c8 : f0b0             [ 3] 	beq df_rt_asm_print_rts
f6ca : a545             [ 3] 	lda tmp_d
f6cc : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
f6cf :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
f6cf : a901             [ 2] 	lda #0x01
f6d1 : 25dd             [ 3] 	and df_asmopt
f6d3 : f0a5             [ 3] 	beq df_rt_asm_print_rts
f6d5 : a5ca             [ 3] 	lda df_exeoff
f6d7 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
f6e0 : 2002e7           [ 6] 	jsr df_rt_list_line_only
f6e3 : 68               [ 4] 	pla
f6e4 : 85ca             [ 3] 	sta df_exeoff
f6e6 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
f6e7 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
f6e7 : a900             [ 2] 	lda #AM_NONE
f6e9 : 85de             [ 3] 	sta df_asmadmd
                             	; zero out the operand
f6eb : a900             [ 2] 	lda #0
f6ed : 85e0             [ 3] 	sta df_asmoprnd
f6ef : 85e1             [ 3] 	sta df_asmoprnd+1
f6f1 : 2094e5           [ 6] 	jsr df_rt_eos			; End of statement?
f6f4 : b00d             [ 4] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
f6f6 : 20e0dc           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
f6f9 : c923             [ 2] 	cmp #'#'				; Immediate?
f6fb : f034             [ 4] 	beq df_rt_asm_AM_IMM
f6fd : c928             [ 2] 	cmp #'('				; Indirect something?
f6ff : f03a             [ 4] 	beq df_rt_asm_AM_INDIRECT
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank1.s --------------------------------

                             	; Must be ABS,ZP or REL
f701 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
f703 :                       df_rt_asm_AM_IMP
f703 : a90d             [ 2] 	lda #AM_IMP
f705 : 85de             [ 3] 	sta df_asmadmd
f707 : 60               [ 6] 	rts
                             ; Process ABS or REL
f708 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
f708 : 2064f7           [ 6] 	jsr df_rt_asm_get_operand
                             
f70b : 2094e5           [ 6] 	jsr df_rt_eos			; End of statement?
f70e : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
f710 : c8               [ 2] 	iny						; Jump over ","
f711 : b1c8             [ 5] 	lda (df_currlin),y		; Load X or Y
f713 : c8               [ 2] 	iny						; Jump over index reg
f714 : 85ca             [ 3] 	sta df_exeoff			; Save exe offset
f716 : c978             [ 2] 	cmp #'x'				; Indirect X?
f718 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
f71a :                       df_rt_asm_AM_ABSY
f71a : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
f71c : 85de             [ 3] 	sta df_asmadmd
f71e : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
f71f :                       df_rt_asm_AM_ABS
f71f : a001             [ 2] 	ldy #1					; Check first addressing mode
f721 : b1c3             [ 5] 	lda (df_symtab),y
f723 : c90f             [ 2] 	cmp #AM_REL
f725 : f002             [ 3] 	beq df_rt_asm_AM_REL
f727 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
f729 :                       df_rt_asm_AM_REL
f729 : 85de             [ 3] 	sta df_asmadmd
f72b : 60               [ 6] 	rts
                             ; Process ABSX
f72c :                       df_rt_asm_AM_ABSX
f72c : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
f72e : 85de             [ 3] 	sta df_asmadmd
f730 : 60               [ 6] 	rts
                             ; Process Immediate
f731 :                       df_rt_asm_AM_IMM
                             	; skip over #
f731 : e6ca             [ 5] 	inc df_exeoff
                             	; Get operand
f733 : 2064f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
f736 : a90c             [ 2] 	lda #AM_IMM
f738 : 85de             [ 3] 	sta df_asmadmd
f73a : 60               [ 6] 	rts
                             ; Process indirect
f73b :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
f73b : e6ca             [ 5] 	inc df_exeoff
                             	; Calculate the operand
f73d : 2064f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
f740 : a4ca             [ 3] 	ldy df_exeoff
f742 : b1c8             [ 5] 	lda (df_currlin),y
f744 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
f746 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank1.s --------------------------------

                             	; skip 'x)'
f748 : c8               [ 2] 	iny
f749 : c8               [ 2] 	iny
f74a : 84ca             [ 3] 	sty df_exeoff
f74c : a908             [ 2] 	lda #AM_ZPINDX
f74e : 85de             [ 3] 	sta df_asmadmd
f750 : 60               [ 6] 	rts
                             ; Pure indirect mode found
f751 :                       df_rt_asm_AM_ZPINDORY
f751 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
f753 : c8               [ 2] 	iny
f754 : 84ca             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
f756 : 2094e5           [ 6] 	jsr df_rt_eos			; End of statement?
f759 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
f75b : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
f75d : c8               [ 2] 	iny
f75e : c8               [ 2] 	iny
f75f : 84ca             [ 3] 	sty df_exeoff
f761 :                       df_rt_asm_AM_ZPIND
f761 : 85de             [ 3] 	sta df_asmadmd
f763 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
f764 :                       df_rt_asm_get_operand
                             	; evaluate
f764 : 20a4d8           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
f767 : 20a5f1           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
f76a : 86e0             [ 3] 	stx df_asmoprnd
f76c : 85e1             [ 3] 	sta df_asmoprnd+1
f76e : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
f76f :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
f76f : 8545             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
f771 : a0ff             [ 2] 	ldy #0xff
f773 : a200             [ 2] 	ldx #0
f775 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
f775 : c8               [ 2] 	iny
f776 : c8               [ 2] 	iny
                             	; if current index > num entries then error
f777 : 98               [ 2] 	tya
f778 : 38               [ 2] 	sec
f779 : e1c3             [ 6] 	sbc (df_symtab,x)
f77b : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
f77d : b1c3             [ 5] 	lda (df_symtab),y
f77f : c545             [ 3] 	cmp tmp_d
f781 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
f783 : 60               [ 6] 	rts
f784 :                       df_rt_asm_find_addr_mode_err
f784 : a900             [ 2] 	lda #AM_NONE
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank1.s --------------------------------

f786 :                       df_rt_asm_skip_to_sym_done; Used by function belo
f786 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
f787 :                       df_rt_asm_skip_to_sym
f787 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
f788 : a9d5             [ 2] 	lda #lo(df_asm_tokensyms)
f78a : 85c3             [ 3] 	sta df_symtab
f78c : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f78e : 85c4             [ 3] 	sta df_symtab+1
f790 : a900             [ 2] 	lda #0
f792 : 85c5             [ 3] 	sta df_symoff
f794 : a8               [ 2] 	tay
f795 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
f795 : b1c3             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
f797 : c920             [ 2] 	cmp #' '
f799 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
f7a1 : 4c95f7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
f7a4 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
f7a4 : ca               [ 2] 	dex
f7a5 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
f7a7 : 38               [ 2] 	sec
f7a8 : 65c3             [ 3] 	adc df_symtab
f7aa : 85c3             [ 3] 	sta df_symtab
                             	_bcc 2
                             
f7ae : e6c4             [ 5] 	inc df_symtab+1
f7b0 : 4c95f7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
f7b3 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat\asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank1.s --------------------------------

f7b3 :                       df_asm_length
f7b3 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
f7c4 :                       df_asm_altaddrmode
f7c4 : 00                    	db AM_NONE		;AM_NONE	= 0
f7c5 : 00                    	db AM_NONE		;AM_ABS	 	= 1
f7c6 : 00                    	db AM_NONE		;AM_ABSX	= 2
f7c7 : 00                    	db AM_NONE		;AM_ABSY	= 3
f7c8 : 01                    	db AM_ABS		;AM_ZP		= 4
f7c9 : 02                    	db AM_ABSX		;AM_ZPX		= 5
f7ca : 03                    	db AM_ABSY		;AM_ZPY		= 6
f7cb : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
f7cc : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
f7cd : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
f7ce : 00                    	db AM_NONE		;AM_ABSIND	= 10
f7cf : 00                    	db AM_NONE		;AM_ABSINDX	= 11
f7d0 : 00                    	db AM_NONE		;AM_IMM		= 12
f7d1 : 00                    	db AM_NONE		;AM_ACC		= 13
f7d2 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
f7d3 : 0f                    	db AM_REL		;AM_REL		= 15
f7d4 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
f7d5 :                       df_asm_tokensyms
                             	;* Start with directives
f7d5 : 2e6f726702            	db	".org",		1*2
f7da : 1000                  	db	AM_DIR,		0x00
f7dc : 2e6f707402            	db	".opt",		1*2
f7e1 : 1000                  	db	AM_DIR,		0x00
f7e3 : 2e646202              	db	".db",		1*2
f7e7 : 1000                  	db	AM_DIR,		0x00
f7e9 : 2e647702              	db	".dw",		1*2
f7ed : 1000                  	db	AM_DIR,		0x00
f7ef : 2e647302              	db	".ds",		1*2
f7f3 : 1000                  	db	AM_DIR,		0x00	
                             
f7f5 : 61646312              	db	"adc",		9*2
f7f9 : 0c69                  	db	AM_IMM,		0x69
f7fb : 0465                  	db	AM_ZP,		0x65
f7fd : 0575                  	db	AM_ZPX,		0x75
f7ff : 016d                  	db	AM_ABS,		0x6d
f801 : 027d                  	db	AM_ABSX,	0x7d
f803 : 0379                  	db	AM_ABSY,	0x79
f805 : 0861                  	db	AM_ZPINDX,	0x61
f807 : 0971                  	db	AM_ZPINDY,	0x71
f809 : 0772                  	db	AM_ZPIND,	0x72
                             	
f80b : 616e6412              	db	"and",		9*2
f80f : 0c29                  	db	AM_IMM,		0x29
f811 : 0425                  	db	AM_ZP,		0x25
f813 : 0535                  	db	AM_ZPX,		0x35
f815 : 012d                  	db	AM_ABS,		0x2d
f817 : 023d                  	db	AM_ABSX,	0x3d
f819 : 0339                  	db	AM_ABSY,	0x39
f81b : 0821                  	db	AM_ZPINDX,	0x21
f81d : 0931                  	db	AM_ZPINDY,	0x31
f81f : 0732                  	db	AM_ZPIND,	0x32
                             
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank1.s --------------------------------

f821 : 636d7012              	db	"cmp",		9*2
f825 : 0cc9                  	db	AM_IMM,		0xc9
f827 : 04c5                  	db	AM_ZP,		0xc5
f829 : 05d5                  	db	AM_ZPX,		0xd5
f82b : 01cd                  	db	AM_ABS,		0xcd
f82d : 02dd                  	db	AM_ABSX,	0xdd
f82f : 03d9                  	db	AM_ABSY,	0xd9
f831 : 08c1                  	db	AM_ZPINDX,	0xc1
f833 : 09d1                  	db	AM_ZPINDY,	0xd1
f835 : 07d2                  	db	AM_ZPIND,	0xd2
                             
f837 : 656f7212              	db	"eor",		9*2
f83b : 0c49                  	db	AM_IMM,		0x49
f83d : 0445                  	db	AM_ZP,		0x45
f83f : 0555                  	db	AM_ZPX,		0x55
f841 : 014d                  	db	AM_ABS,		0x4d
f843 : 025d                  	db	AM_ABSX,	0x5d
f845 : 0359                  	db	AM_ABSY,	0x59
f847 : 0841                  	db	AM_ZPINDX,	0x41
f849 : 0951                  	db	AM_ZPINDY,	0x51
f84b : 0752                  	db	AM_ZPIND,	0x52
                             
f84d : 6c646112              	db	"lda",		9*2
f851 : 0ca9                  	db	AM_IMM,		0xa9
f853 : 04a5                  	db	AM_ZP,		0xa5
f855 : 05b5                  	db	AM_ZPX,		0xb5
f857 : 01ad                  	db	AM_ABS,		0xad
f859 : 02bd                  	db	AM_ABSX,	0xbd
f85b : 03b9                  	db	AM_ABSY,	0xb9
f85d : 08a1                  	db	AM_ZPINDX,	0xa1
f85f : 09b1                  	db	AM_ZPINDY,	0xb1
f861 : 07b2                  	db	AM_ZPIND,	0xb2
                             
f863 : 6f726112              	db	"ora",		9*2
f867 : 0c09                  	db	AM_IMM,		0x09
f869 : 0405                  	db	AM_ZP,		0x05
f86b : 0515                  	db	AM_ZPX,		0x15
f86d : 010d                  	db	AM_ABS,		0x0d
f86f : 021d                  	db	AM_ABSX,	0x1d
f871 : 0319                  	db	AM_ABSY,	0x19
f873 : 0801                  	db	AM_ZPINDX,	0x01
f875 : 0911                  	db	AM_ZPINDY,	0x11
f877 : 0712                  	db	AM_ZPIND,	0x12
                             
f879 : 73626312              	db	"sbc",		9*2
f87d : 0ce9                  	db	AM_IMM,		0xe9
f87f : 04e5                  	db	AM_ZP,		0xe5
f881 : 05f5                  	db	AM_ZPX,		0xf5
f883 : 01ed                  	db	AM_ABS,		0xed
f885 : 02fd                  	db	AM_ABSX,	0xfd
f887 : 03f9                  	db	AM_ABSY,	0xf9
f889 : 08e1                  	db	AM_ZPINDX,	0xe1
f88b : 09f1                  	db	AM_ZPINDY,	0xf1
f88d : 07f2                  	db	AM_ZPIND,	0xf2
                             
f88f : 73746110              	db	"sta",		8*2
f893 : 0485                  	db	AM_ZP,		0x85
f895 : 0595                  	db	AM_ZPX,		0x95
f897 : 018d                  	db	AM_ABS,		0x8d
f899 : 029d                  	db	AM_ABSX,	0x9d
f89b : 0399                  	db	AM_ABSY,	0x99
f89d : 0881                  	db	AM_ZPINDX,	0x81
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank1.s --------------------------------

f89f : 0991                  	db	AM_ZPINDY,	0x91
f8a1 : 0792                  	db	AM_ZPIND,	0x92
                             
f8a3 : 61736c0a              	db	"asl",		5*2
f8a7 : 0d0a                  	db	AM_IMP,		0x0a
f8a9 : 0406                  	db	AM_ZP,		0x06
f8ab : 0516                  	db	AM_ZPX,		0x16
f8ad : 010e                  	db	AM_ABS,		0x0e
f8af : 021e                  	db	AM_ABSX,	0x1e
f8b1 : 6465630a              	db	"dec",		5*2
f8b5 : 0d3a                  	db	AM_IMP,		0x3a
f8b7 : 04c6                  	db	AM_ZP,		0xc6
f8b9 : 05d6                  	db	AM_ZPX,		0xd6
f8bb : 01ce                  	db	AM_ABS,		0xce
f8bd : 02de                  	db	AM_ABSX,	0xde
f8bf : 696e630a              	db	"inc",		5*2
f8c3 : 0d1a                  	db	AM_IMP,		0x1a
f8c5 : 04e6                  	db	AM_ZP,		0xe6
f8c7 : 05f6                  	db	AM_ZPX,		0xf6
f8c9 : 01ee                  	db	AM_ABS,		0xee
f8cb : 02fe                  	db	AM_ABSX,	0xfe
f8cd : 6c73720a              	db	"lsr",		5*2
f8d1 : 0d4a                  	db	AM_IMP,		0x4a
f8d3 : 0446                  	db	AM_ZP,		0x46
f8d5 : 0556                  	db	AM_ZPX,		0x56
f8d7 : 014e                  	db	AM_ABS,		0x4e
f8d9 : 025e                  	db	AM_ABSX,	0x5e
f8db : 726f6c0a              	db	"rol",		5*2
f8df : 0d2a                  	db	AM_IMP,		0x2a
f8e1 : 0426                  	db	AM_ZP,		0x26
f8e3 : 0536                  	db	AM_ZPX,		0x36
f8e5 : 012e                  	db	AM_ABS,		0x2e
f8e7 : 023e                  	db	AM_ABSX,	0x3e
f8e9 : 726f720a              	db	"ror",		5*2
f8ed : 0d6a                  	db	AM_IMP,		0x6a
f8ef : 0466                  	db	AM_ZP,		0x66
f8f1 : 0576                  	db	AM_ZPX,		0x76
f8f3 : 016e                  	db	AM_ABS,		0x6e
f8f5 : 027e                  	db	AM_ABSX,	0x7e
                             
f8f7 : 6269740a              	db	"bit",		5*2
f8fb : 0c89                  	db	AM_IMM,		0x89
f8fd : 0424                  	db	AM_ZP,		0x24
f8ff : 0534                  	db	AM_ZPX,		0x34
f901 : 012c                  	db	AM_ABS,		0x2c
f903 : 023c                  	db	AM_ABSX,	0x3c
                             	
f905 : 62726b02              	db	"brk",		1*2
f909 : 0d00                  	db	AM_IMP,		0x00
f90b : 73747002              	db	"stp",		1*2
f90f : 0ddb                  	db	AM_IMP,		0xdb
f911 : 77616902              	db	"wai",		1*2
f915 : 0dcb                  	db	AM_IMP,		0xcb
                             	
f917 : 636c6302              	db	"clc",		1*2
f91b : 0d18                  	db	AM_IMP,		0x18
f91d : 636c6402              	db	"cld",		1*2
f921 : 0dd8                  	db	AM_IMP,		0xd8
f923 : 636c6902              	db	"cli",		1*2
f927 : 0d58                  	db	AM_IMP,		0x58
f929 : 636c7602              	db	"clv",		1*2
f92d : 0db8                  	db	AM_IMP,		0xb8
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank1.s --------------------------------

f92f : 73656302              	db	"sec",		1*2
f933 : 0d38                  	db	AM_IMP,		0x38
f935 : 73656402              	db	"sed",		1*2
f939 : 0df8                  	db	AM_IMP,		0xf8
f93b : 73656902              	db	"sei",		1*2
f93f : 0d78                  	db	AM_IMP,		0x78
                             	
f941 : 63707806              	db	"cpx",		3*2
f945 : 0ce0                  	db	AM_IMM,		0xe0
f947 : 04e4                  	db	AM_ZP,		0xe4
f949 : 01ec                  	db	AM_ABS,		0xec
f94b : 63707906              	db	"cpy",		3*2
f94f : 0cc0                  	db	AM_IMM,		0xc0
f951 : 04c4                  	db	AM_ZP,		0xc4
f953 : 01cc                  	db	AM_ABS,		0xcc
f955 : 64657802              	db	"dex",		1*2
f959 : 0dca                  	db	AM_IMP,		0xca
f95b : 64657902              	db	"dey",		1*2
f95f : 0d88                  	db	AM_IMP,		0x88
f961 : 696e7802              	db	"inx",		1*2
f965 : 0de8                  	db	AM_IMP,		0xe8
f967 : 696e7902              	db	"iny",		1*2
f96b : 0dc8                  	db	AM_IMP,		0xc8
f96d : 6c64780a              	db	"ldx",		5*2
f971 : 0ca2                  	db	AM_IMM,		0xa2
f973 : 04a6                  	db	AM_ZP,		0xa6
f975 : 06b6                  	db	AM_ZPY,		0xb6
f977 : 01ae                  	db	AM_ABS,		0xae
f979 : 03be                  	db	AM_ABSY,	0xbe
f97b : 6c64790a              	db	"ldy",		5*2
f97f : 0ca0                  	db	AM_IMM,		0xa0
f981 : 04a4                  	db	AM_ZP,		0xa4
f983 : 05b4                  	db	AM_ZPX,		0xb4
f985 : 01ac                  	db	AM_ABS,		0xac
f987 : 02bc                  	db	AM_ABSX,	0xbc
f989 : 73747806              	db	"stx",		3*2
f98d : 0486                  	db	AM_ZP,		0x86
f98f : 0696                  	db	AM_ZPY,		0x96
f991 : 018e                  	db	AM_ABS,		0x8e
f993 : 73747906              	db	"sty",		3*2
f997 : 0484                  	db	AM_ZP,		0x84
f999 : 0594                  	db	AM_ZPX,		0x94
f99b : 018c                  	db	AM_ABS,		0x8c
f99d : 73747a08              	db	"stz",		4*2
f9a1 : 0464                  	db	AM_ZP,		0x64
f9a3 : 0574                  	db	AM_ZPX,		0x74
f9a5 : 019c                  	db	AM_ABS,		0x9c
f9a7 : 029e                  	db	AM_ABSX,	0x9e
                             	
                             
f9a9 : 62636302              	db	"bcc",		1*2
f9ad : 0f90                  	db	AM_REL,		0x90
f9af : 62637302              	db	"bcs",		1*2
f9b3 : 0fb0                  	db	AM_REL,		0xb0
f9b5 : 62657102              	db	"beq",		1*2
f9b9 : 0ff0                  	db	AM_REL,		0xf0
f9bb : 626d6902              	db	"bmi",		1*2
f9bf : 0f30                  	db	AM_REL,		0x30
f9c1 : 626e6502              	db	"bne",		1*2
f9c5 : 0fd0                  	db	AM_REL,		0xd0
f9c7 : 62706c02              	db	"bpl",		1*2
f9cb : 0f10                  	db	AM_REL,		0x10
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank1.s --------------------------------

f9cd : 62726102              	db	"bra",		1*2
f9d1 : 0f80                  	db	AM_REL,		0x80
f9d3 : 62766302              	db	"bvc",		1*2
f9d7 : 0f50                  	db	AM_REL,		0x50
f9d9 : 62767302              	db	"bvs",		1*2
f9dd : 0f70                  	db	AM_REL,		0x70
f9df : 6a6d7006              	db	"jmp",		3*2
f9e3 : 014c                  	db	AM_ABS,		0x4c
f9e5 : 0a6c                  	db	AM_ABSIND,	0x6c
f9e7 : 0b7c                  	db	AM_ABSINDX,	0x7c
f9e9 : 6a737202              	db	"jsr",		1*2
f9ed : 0120                  	db	AM_ABS,		0x20
                             	
f9ef : 6e6f7002              	db	"nop",		1*2
f9f3 : 0dea                  	db	AM_IMP,		0xea
f9f5 : 70686102              	db	"pha",		1*2
f9f9 : 0d48                  	db	AM_IMP,		0x48
f9fb : 70687002              	db	"php",		1*2
f9ff : 0d08                  	db	AM_IMP,		0x08
fa01 : 70687802              	db	"phx",		1*2
fa05 : 0dda                  	db	AM_IMP,		0xda
fa07 : 70687902              	db	"phy",		1*2
fa0b : 0d5a                  	db	AM_IMP,		0x5a
fa0d : 706c6102              	db	"pla",		1*2
fa11 : 0d68                  	db	AM_IMP,		0x68
fa13 : 706c7002              	db	"plp",		1*2
fa17 : 0d28                  	db	AM_IMP,		0x28
fa19 : 706c7802              	db	"plx",		1*2
fa1d : 0dfa                  	db	AM_IMP,		0xfa
fa1f : 706c7902              	db	"ply",		1*2
fa23 : 0d7a                  	db	AM_IMP,		0x7a
fa25 : 72746902              	db	"rti",		1*2
fa29 : 0d40                  	db	AM_IMP,		0x40
fa2b : 72747302              	db	"rts",		1*2
fa2f : 0d60                  	db	AM_IMP,		0x60
fa31 : 74617802              	db	"tax",		1*2
fa35 : 0daa                  	db	AM_IMP,		0xaa
fa37 : 74617902              	db	"tay",		1*2
fa3b : 0da8                  	db	AM_IMP,		0xa8
fa3d : 74737802              	db	"tsx",		1*2
fa41 : 0dba                  	db	AM_IMP,		0xba
fa43 : 74786102              	db	"txa",		1*2
fa47 : 0d8a                  	db	AM_IMP,		0x8a
fa49 : 74787302              	db	"txs",		1*2
fa4d : 0d9a                  	db	AM_IMP,		0x9a
fa4f : 74796102              	db	"tya",		1*2
fa53 : 0d98                  	db	AM_IMP,		0x98
                             	
fa55 : 74726204              	db	"trb",		2*2
fa59 : 0414                  	db	AM_ZP,		0x14
fa5b : 011c                  	db	AM_ABS,		0x1c
fa5d : 74736204              	db	"tsb",		2*2
fa61 : 0404                  	db	AM_ZP,		0x04
fa63 : 010c                  	db	AM_ABS,		0x0c
                             	
fa65 : 6262723002            	db	"bbr0",		1*2
fa6a : 0f0f                  	db	AM_REL,		0x0f
fa6c : 6262723102            	db	"bbr1",		1*2
fa71 : 0f1f                  	db	AM_REL,		0x1f
fa73 : 6262723202            	db	"bbr2",		1*2
fa78 : 0f2f                  	db	AM_REL,		0x2f
fa7a : 6262723302            	db	"bbr3",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank1.s --------------------------------

fa7f : 0f3f                  	db	AM_REL,		0x3f
fa81 : 6262723402            	db	"bbr4",		1*2
fa86 : 0f4f                  	db	AM_REL,		0x4f
fa88 : 6262723502            	db	"bbr5",		1*2
fa8d : 0f5f                  	db	AM_REL,		0x5f
fa8f : 6262723602            	db	"bbr6",		1*2
fa94 : 0f6f                  	db	AM_REL,		0x6f
fa96 : 6262723702            	db	"bbr7",		1*2
fa9b : 0f7f                  	db	AM_REL,		0x7f
fa9d : 6262733002            	db	"bbs0",		1*2
faa2 : 0f8f                  	db	AM_REL,		0x8f
faa4 : 6262733102            	db	"bbs1",		1*2
faa9 : 0f9f                  	db	AM_REL,		0x9f
faab : 6262733202            	db	"bbs2",		1*2
fab0 : 0faf                  	db	AM_REL,		0xaf
fab2 : 6262733302            	db	"bbs3",		1*2
fab7 : 0fbf                  	db	AM_REL,		0xbf
fab9 : 6262733402            	db	"bbs4",		1*2
fabe : 0fcf                  	db	AM_REL,		0xcf
fac0 : 6262733502            	db	"bbs5",		1*2
fac5 : 0fdf                  	db	AM_REL,		0xdf
fac7 : 6262733602            	db	"bbs6",		1*2
facc : 0fef                  	db	AM_REL,		0xef
face : 6262733702            	db	"bbs7",		1*2
fad3 : 0fff                  	db	AM_REL,		0xff
fad5 : 726d623002            	db	"rmb0",		1*2
fada : 0f07                  	db	AM_REL,		0x07
fadc : 726d623102            	db	"rmb1",		1*2
fae1 : 0f17                  	db	AM_REL,		0x17
fae3 : 726d623202            	db	"rmb2",		1*2
fae8 : 0f27                  	db	AM_REL,		0x27
faea : 726d623302            	db	"rmb3",		1*2
faef : 0f37                  	db	AM_REL,		0x37
faf1 : 726d623402            	db	"rmb4",		1*2
faf6 : 0f47                  	db	AM_REL,		0x47
faf8 : 726d623502            	db	"rmb5",		1*2
fafd : 0f57                  	db	AM_REL,		0x57
faff : 726d623602            	db	"rmb6",		1*2
fb04 : 0f67                  	db	AM_REL,		0x67
fb06 : 726d623702            	db	"rmb7",		1*2
fb0b : 0f77                  	db	AM_REL,		0x77
fb0d : 736d623002            	db	"smb0",		1*2
fb12 : 0f87                  	db	AM_REL,		0x87
fb14 : 736d623102            	db	"smb1",		1*2
fb19 : 0f97                  	db	AM_REL,		0x97
fb1b : 736d623202            	db	"smb2",		1*2
fb20 : 0fa7                  	db	AM_REL,		0xa7
fb22 : 736d623302            	db	"smb3",		1*2
fb27 : 0fb7                  	db	AM_REL,		0xb7
fb29 : 736d623402            	db	"smb4",		1*2
fb2e : 0fc7                  	db	AM_REL,		0xc7
fb30 : 736d623502            	db	"smb5",		1*2
fb35 : 0fd7                  	db	AM_REL,		0xd7
fb37 : 736d623602            	db	"smb6",		1*2
fb3c : 0fe7                  	db	AM_REL,		0xe7
fb3e : 736d623702            	db	"smb7",		1*2
fb43 : 0ff7                  	db	AM_REL,		0xf7
                             	
                             	;* Terminates with a zero
fb45 : 00                    	db	0
                             
                             	include	"dflat\asmjmptab.s"
AS65 Assembler for R6502 [1.42].                                     Page  221
-------------------------------- bank\bank1.s --------------------------------

                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
fb46 :                       df_tk_asm_tokenjmp
fb46 : 82d6                  	dw	df_tk_asm_org
fb48 : 82d6                  	dw	df_tk_asm_opt
fb4a : cdd5                  	dw	df_tk_asm_db
fb4c : cdd5                  	dw	df_tk_asm_dw
fb4e : 82d6                  	dw	df_tk_asm_ds
                             
fb50 :                       df_rt_asm_tokenjmp
fb50 : f8f4                  	dw	df_rt_asm_org
fb52 : 0af5                  	dw	df_rt_asm_opt
fb54 : 12f5                  	dw	df_rt_asm_db
fb56 : 15f5                  	dw	df_rt_asm_dw
fb58 : 90f5                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fb5a :                       asm_init
                             	; Zero the PC
fb5a : 64db             [ 3] 	stz df_asmpc
fb5c : 64dc             [ 3] 	stz df_asmpc+1
                             	; Zero the option
fb5e : 64dd             [ 3] 	stz df_asmopt
fb60 : 60               [ 6] 	rts
                             	
fb61 :                       mod_sz_asm_e
                             
                             
                             	; End of Code
fb61 :                       _code_end
fb61 :                       _bank1_end
AS65 Assembler for R6502 [1.42].                                     Page  222
-------------------------------- bank\bank1.s --------------------------------

                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
