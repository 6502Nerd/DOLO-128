AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank1.s --------------------------------

13340 lines read, no errors in pass 1.
c000 =                       _bank1_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank1.s --------------------------------

0002 =                       VDP_LONGDELAY 	= 2
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank1.s --------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank1.s --------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank1.s --------------------------------

0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
                             	phy
                             	pha
                             	jsr str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank1.s --------------------------------

                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank1.s --------------------------------

                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank1.s --------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank1.s --------------------------------

0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank1.s --------------------------------

0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank1.s --------------------------------

                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank1.s --------------------------------

0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank1.s --------------------------------

                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank1.s --------------------------------

0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank1.s --------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank1.s --------------------------------

                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank1.s --------------------------------

                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank1.s --------------------------------

009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank1.s --------------------------------

                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : dfc6                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : deca                  	fcw init			; 0xfffc : Reset Vector
fffe : 1fc7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
c000 : 80                    	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c48c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c45c5           [ 3] 	jmp io_get_ch			; Vec 1
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank1.s --------------------------------

c007 : 4cd8c5           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c10c6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c1cc6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c7dc6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c25c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4ce5c5           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4cfcc5           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ; 
c02e :                       mod_sz_autogen_s 
c02e :                       _df_init 
                               _bankjsr $f1b3, 1 
                             
c046 :                       _df_pg_dflat 
                               _bankjsr $d764, 1 
                             
c05e :                       _fs_chdir_w 
                               _bankjsr $d4df, 2 
                             
c076 :                       _fs_mkdir_w 
                               _bankjsr $d572, 2 
                             
c08e :                       _fs_delete_w 
                               _bankjsr $d4a2, 2 
                             
c0a6 :                       _fs_close_w 
                               _bankjsr $d461, 2 
                             
c0be :                       _fs_get_byte_w 
                               _bankjsr $d185, 2 
                             
c0d6 :                       _fs_open_read_w 
                               _bankjsr $d34d, 2 
                             
c0ee :                       _fs_open_write_w 
                               _bankjsr $d411, 2 
                             
c106 :                       _fs_put_byte_w 
                               _bankjsr $d2da, 2 
                             
c11e :                       _fs_dir_find_entry_w 
                               _bankjsr $cfc8, 2 
                             
c136 :                       _fs_dir_entry_next_w 
                               _bankjsr $cffe, 2 
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank1.s --------------------------------

                             
c14e :                       _fs_dir_root_start_w 
                               _bankjsr $cf83, 2 
                             
c166 :                       _get_byte 
                               _bankjsr $cedb, 0 
                             
c17e :                       _put_byte 
                               _bankjsr $cef0, 0 
                             
c196 :                       _gr_get_key 
                               _bankjsr $df8c, 0 
                             
c1ae :                       _gr_put_byte 
                               _bankjsr $df99, 0 
                             
c1c6 :                       _gr_init_screen 
                               _bankjsr $da59, 0 
                             
c1de :                       _init_acia 
                               _bankjsr $cefd, 0 
                             
c1f6 :                       _init_cia0 
                               _bankjsr $ce88, 0 
                             
c20e :                       _init_cia1 
                               _bankjsr $ceb9, 0 
                             
c226 :                       _init_fs 
                               _bankjsr $ce60, 2 
                             
c23e :                       _init_sdcard 
                               _bankjsr $cb5a, 2 
                             
c256 :                       _init_snd 
                               _bankjsr $d2bc, 0 
                             
c26e :                       _init_keyboard 
                               _bankjsr $cf0f, 0 
                             
c286 :                       _kb_read_raw 
                               _bankjsr $cf1e, 0 
                             
c29e :                       _kb_read_dip 
                               _bankjsr $cf89, 0 
                             
c2b6 :                       _command_line 
                               _bankjsr $cb5a, 0 
                             
c2ce :                       _gr_cls 
                               _bankjsr $da6c, 0 
                             
c2e6 :                       _gr_init_hires 
                               _bankjsr $da16, 0 
                             
c2fe :                       _gr_line 
                               _bankjsr $ddc6, 0 
                             
c316 :                       _gr_box 
                               _bankjsr $dc06, 0 
                             
c32e :                       _gr_circle 
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank1.s --------------------------------

                               _bankjsr $dd11, 0 
                             
c346 :                       _gr_plot 
                               _bankjsr $dad7, 0 
                             
c35e :                       _gr_hchar 
                               _bankjsr $db15, 0 
                             
c376 :                       _gr_point 
                               _bankjsr $dbbb, 0 
                             
c38e :                       _gr_get 
                               _bankjsr $daf2, 0 
                             
c3a6 :                       _gr_set_cur 
                               _bankjsr $dafa, 0 
                             
c3be :                       _snd_get_note 
                               _bankjsr $d2b5, 0 
                             
c3d6 :                       _snd_get_joy0 
                               _bankjsr $c67d, 0 
                             
c3ee :                       _snd_set 
                               _bankjsr $c625, 0 
                             
c406 :                       _vdp_peek 
                               _bankjsr $c61c, 0 
                             
c41e :                       _vdp_poke 
                               _bankjsr $c610, 0 
                             
c436 :                       _vdp_init 
                               _bankjsr $d800, 0 
                             
c44e :                       _rtc_init 
                               _bankjsr $d0df, 0 
                             
c466 :                       _rtc_gettimedate 
                               _bankjsr $d246, 0 
                             
c47e :                       _rtc_setdatetime 
                               _bankjsr $d197, 0 
                             
c496 :                       _rtc_nvread 
                               _bankjsr $d2ac, 0 
                             
c4ae :                       _rtc_nvwrite 
                               _bankjsr $d294, 0 
                             
c4c6 :                       _fs_dir_fhandle_str 
                               _bankjsr $d586, 2 
                             
c4de :                       _sd_sendcmd17 
                               _bankjsr $cd32, 2 
                             
c4f6 :                       _sd_sendcmd24 
                               _bankjsr $cdab, 2 
                             
c50e :                       mod_sz_autogen_e 
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank1.s --------------------------------

c50e :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c50e :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c50e :                       io_init
c50e : a900             [ 2] 	lda #0				; Assume it's serial
c510 : 48               [ 3] 	pha
c511 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c514 : 2910             [ 2] 	and #0x10
c516 : d00b             [ 3] 	bne io_init_set_default
c518 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c51b : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c51d : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c51f : 68               [ 4] 	pla
c520 : a901             [ 2] 	lda #1
c522 : 48               [ 3] 	pha
c523 :                       io_init_set_default
c523 : 68               [ 4] 	pla
c524 : 8d000c           [ 4] 	sta io_default
c527 : 4c2ac5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank1.s --------------------------------

                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c52a :                       io_set_default			; Entry point for default
c52a : ad000c           [ 4] 	lda io_default
c52d :                       io_active_device		; Entry point for A set
c52d : 0a               [ 2] 	asl	a				; x16 the Block number
c52e : 0a               [ 2] 	asl a
c52f : 0a               [ 2] 	asl a
c530 : 0a               [ 2] 	asl a
c531 : a8               [ 2] 	tay
c532 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c534 :                       io_copy_data
c534 : b9a8c5           [ 4] 	lda io_devices,y
c537 : 9d010c           [ 5] 	sta io_block,x
c53a : c8               [ 2] 	iny
c53b : e8               [ 2] 	inx
c53c : e010             [ 2] 	cpx #io_struct
c53e : d0f4             [ 3] 	bne io_copy_data
                             	
c540 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c542 : 854a             [ 3] 	sta buf_ef
c544 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c545 :                       io_get_ch
c545 : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c548 :                       io_put_ch
c548 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c54b :                       io_open_read
c54b : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank1.s --------------------------------

                             ;* Regs affected : All
                             ;****************************************
c54e :                       io_open_write
c54e : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c551 :                       io_close
c551 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c554 :                       io_delete
c554 : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c557 :                       io_read_line
c557 : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c559 : 8548             [ 3] 	sta buf_adr+1
c55b : 8449             [ 3] 	sty buf_sz			; Max length
c55d : 08               [ 3] 	php					; Save echo state
c55e : a000             [ 2] 	ldy #0x00			; Starting at first byte
c560 :                       io_get_line_byte
c560 : 38               [ 2] 	sec					; Getting bytes synchronously
c561 : 2045c5           [ 6] 	jsr io_get_ch		; Get a byte
c564 : b026             [ 3] 	bcs io_get_line_done; Got nothing then finish
c566 : 28               [ 4] 	plp					; Get echo state
c567 : 08               [ 3] 	php					; Instantly save it back
c568 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c56a : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c56c : d005             [ 3] 	bne io_do_echo
c56e : c000             [ 2] 	cpy #0				; Already at beginning?
c570 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c572 : 88               [ 2] 	dey					; Else decrement length
c573 :                       io_do_echo
c573 : 2048c5           [ 6] 	jsr io_put_ch		; Echo it
c576 :                       io_skip_echo
c576 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c578 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c57a : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c57c : f003             [ 3] 	beq io_skip_special
c57e : 9147             [ 5] 	sta (buf_adr),y		; Save it
c580 : c8               [ 2] 	iny					; Increase length
c581 :                       io_skip_special
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank1.s --------------------------------

c581 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c583 : f007             [ 3] 	beq io_get_line_done	; If yes then done
c585 : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c587 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c589 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c58a : 38               [ 2] 	sec					; Yes, set carry flag
c58b : 60               [ 6] 	rts					; And done
c58c :                       io_get_line_done
c58c : a900             [ 2] 	lda #0
c58e : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c590 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c591 : 18               [ 2] 	clc					; Clear carry flag
c592 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c593 :                       io_print_line
c593 : 48               [ 3] 	pha
                             
c594 : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c596 : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c598 : a000             [ 2] 	ldy #0						; Start at the beginning!
c59a :                       io_print_line_byte
c59a : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c59c : f006             [ 3] 	beq io_print_done			; If zero then done - print
c59e : 2048c5           [ 6] 	jsr io_put_ch				; Transmit
c5a1 : c8               [ 2] 	iny
c5a2 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c5a4 :                       io_print_done
c5a4 : 68               [ 4] 	pla
c5a5 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c5a6 :                       io_null_op
c5a6 : 18               [ 2] 	clc
c5a7 : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c5a8 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c5a8 :                       io_device0					; Serial device, input = Ser, outp
c5a8 : 66c1                  	dw	_get_byte			; io_get_ch
c5aa : 7ec1                  	dw	_put_byte			; io_put_ch
c5ac : a6c5                  	dw	io_null_op			; io_open_r
c5ae : a6c5                  	dw	io_null_op			; io_open_w
c5b0 : a6c5                  	dw	io_null_op			; io_close_f
c5b2 : a6c5                  	dw	io_null_op			; io_del_f
c5b4 : a6c5                  	dw	io_null_op			; io_ext1
c5b6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c5b8 :                       io_device1					; Default device, input = screen e
c5b8 : 96c1                  	dw	_gr_get_key			; io_get_ch
c5ba : aec1                  	dw	_gr_put_byte		; io_put_ch
c5bc : a6c5                  	dw	io_null_op			; io_open_r
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank1.s --------------------------------

c5be : a6c5                  	dw	io_null_op			; io_open_w
c5c0 : a6c5                  	dw	io_null_op			; io_close_f
c5c2 : a6c5                  	dw	io_null_op			; io_del_f
c5c4 : a6c5                  	dw	io_null_op			; io_ext1
c5c6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c5c8 :                       io_device2					; SD device, input = SD, output = 
c5c8 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c5ca : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c5cc : d6c0                  	dw	_fs_open_read_w		; io_open_r
c5ce : eec0                  	dw	_fs_open_write_w	; io_open_w
c5d0 : a6c0                  	dw	_fs_close_w			; io_close_f
c5d2 : 8ec0                  	dw	_fs_delete_w		; io_del_f
c5d4 : a6c5                  	dw	io_null_op			; io_ext1
c5d6 : a6c5                  	dw	io_null_op			; io_ext2
                             
c5d8 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5d8 :                       vdp_wr_reg
c5d8 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5db : ea               [ 2] 	nop
c5dc : ea               [ 2] 	nop
c5dd : 0980             [ 2] 	ora #0x80
c5df : 8d0105           [ 4] 	sta VDP_MODE1
c5e2 : 4980             [ 2] 	eor #0x80
c5e4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5e5 :                       vdp_wr_addr
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank1.s --------------------------------

c5e5 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5e8 : ea               [ 2] 	nop
c5e9 : ea               [ 2] 	nop
c5ea : 0940             [ 2] 	ora #0x40		; Required by VDP
c5ec : 8d0105           [ 4] 	sta VDP_MODE1
c5ef : 4940             [ 2] 	eor #0x40		; Undo that bit
c5f1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5f2 :                       vdp_mem_wait
c5f2 : da               [ 3] 	phx								; 3
c5f3 : a616             [ 3] 	ldx vdp_delay					; 3
c5f5 : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c5f7 :                       vdp_mem_wait_loop
c5f7 : ca               [ 2] 	dex								; 2
c5f8 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c5fa :                       vdp_mem_wait_end
c5fa : fa               [ 4] 	plx								; 3
c5fb : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5fc :                       vdp_rd_addr
c5fc : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c5ff : ea               [ 2] 	nop
c600 : ea               [ 2] 	nop
c601 : 8d0105           [ 4] 	sta VDP_MODE1
c604 : 80ec             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c606 :                       vdp_rd_vram
c606 : ad0005           [ 4] 	lda VDP_VRAM
c609 : 80e7             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank1.s --------------------------------

                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c60b :                       vdp_wr_vram
c60b : 8d0005           [ 4] 	sta VDP_VRAM
c60e : 80e2             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c610 :                       vdp_poke
c610 : 48               [ 3] 	pha
c611 : 98               [ 2] 	tya
c612 : 78               [ 2] 	sei
c613 : 20e5c5           [ 6] 	jsr vdp_wr_addr
c616 : 68               [ 4] 	pla
c617 : 200bc6           [ 6] 	jsr vdp_wr_vram
c61a : 58               [ 2] 	cli
c61b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c61c :                       vdp_peek
c61c : 78               [ 2] 	sei
c61d : 20fcc5           [ 6] 	jsr vdp_rd_addr
c620 : 2006c6           [ 6] 	jsr vdp_rd_vram
c623 : 58               [ 2] 	cli
c624 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank1.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c625 :                       snd_set
c625 : 48               [ 3] 	pha
                             
c626 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c628 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c62b : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c62e : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c631 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c633 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c635 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c638 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c63a : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c63d : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c640 : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c642 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c645 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c647 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c64a : 68               [ 4] 	pla
                             	
c64b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c64c :                       snd_get
c64c : 48               [ 3] 	pha
                             
c64d : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c64f : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c652 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c655 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c658 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c65a : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c65c : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c65f : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c661 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c664 : a900             [ 2] 	lda #0x00				; Set Port A to input
c666 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c669 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c66c : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c66e : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c670 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c673 : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank1.s --------------------------------

                             	
c676 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c678 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c67b : 68               [ 4] 	pla
                             	
c67c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c67d :                       snd_get_joy0
c67d : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c67f : 204cc6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c682 : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c683 :                       main
                             
c683 :                       infinity
c683 : 2046c0           [ 6] 	jsr _df_pg_dflat
c686 : 4c83c6           [ 3] 	jmp infinity
                             
c689 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c689 : 4275696c64203a..       db "Build : 16/07/2023\r" 
c69c : 3132384b204272..       db "128K Breadboard Computer\r" 
c6b5 : 42792040363530..       db "By @6502Nerd\r" 
c6c2 : 436f7079726967..       db "Copyright (c) 2022\r",0 
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank1.s --------------------------------

                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c6d6 :                       init_nmi
                             	; Core IRQ handler
c6d6 : a9e2             [ 2] 	lda #lo(nmi)
c6d8 : 8502             [ 3] 	sta int_nmi
c6da : a9c6             [ 2] 	lda #hi(nmi)
c6dc : 8503             [ 3] 	sta int_nmi+1
c6de : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c6df :                       call_nmi_master
c6df : 6c0200           [ 6] 	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* Only the 6551 uses this - fills the receive bu
c6e2 :                       nmi
c6e2 : 48               [ 3] 	pha
                             
c6e3 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c6e6 : 100c             [ 3] 	bpl	nmi_fin					; If no interrupt don't do anyth
                             
c6e8 : 5a               [ 3] 	phy
c6e9 : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c6ec : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c6ee : 990008           [ 5] 	sta ser_buf,y
c6f1 : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c6f3 : 7a               [ 4] 	ply
c6f4 :                       nmi_fin
                             
c6f4 : 68               [ 4] 	pla
c6f5 : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c6f6 :                       init_irq
                             	; Core IRQ handler
c6f6 : a930             [ 2] 	lda #lo(irq)
c6f8 : 8504             [ 3] 	sta int_irq
c6fa : a9c7             [ 2] 	lda #hi(irq)
c6fc : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c6fe : a95e             [ 2] 	lda #lo(irq_brk)
c700 : 8506             [ 3] 	sta int_brk
c702 : a9c7             [ 2] 	lda #hi(irq_brk)
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank1.s --------------------------------

c704 : 8507             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c706 : a92f             [ 2] 	lda #lo(null_handler)
c708 : 8508             [ 3] 	sta int_uservdp
c70a : a9c7             [ 2] 	lda #hi(null_handler)
c70c : 8509             [ 3] 	sta int_uservdp+1
                             
c70e : a92f             [ 2] 	lda #lo(null_handler)
c710 : 850a             [ 3] 	sta int_usercia0
c712 : a9c7             [ 2] 	lda #hi(null_handler)
c714 : 850b             [ 3] 	sta int_usercia0+1
                             
c716 : a92f             [ 2] 	lda #lo(null_handler)
c718 : 850c             [ 3] 	sta int_usercia1
c71a : a9c7             [ 2] 	lda #hi(null_handler)
c71c : 850d             [ 3] 	sta int_usercia1+1
                             
c71e : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c71f :                       call_irq_master
c71f : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c722 :                       call_irq_brk
c722 : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c725 :                       call_irq_uservdp
c725 : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c728 :                       call_irq_usercia0
c728 : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c72b :                       call_irq_usercia1
c72b : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c72e :                       null_irq
c72e : 40               [ 6] 	rti
                             
                             ;* null handler
c72f :                       null_handler
c72f : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c730 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c733 : ba               [ 2] 	tsx
c734 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c737 : 2910             [ 2] 	and #0x10
c739 : d0e7             [ 3] 	bne call_irq_brk
                             	
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank1.s --------------------------------

c73b : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c73c : ad8d04           [ 4] 	lda IO_1 + IFR
c73f : 1003             [ 3] 	bpl irq_check_vdp
c741 : 202bc7           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c744 :                       irq_check_vdp	
c744 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c747 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c749 : 2025c7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c74c : 20abc7           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c74f : 2089c7           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c752 :                       irq_check_cia0
c752 : ad0d04           [ 4] 	lda IO_0 + IFR
c755 : 1003             [ 3] 	bpl irq_fin
c757 : 2028c7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c75a :                       irq_fin
                             	_pullAXY
                             
c75d : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c75e :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c75e : 38               [ 2] 	sec
c75f : bd0501           [ 4] 	lda 0x0105,x
c762 : e902             [ 2] 	sbc #2
c764 : 85a4             [ 3] 	sta df_brkpc
c766 : bd0601           [ 4] 	lda 0x0106,x
c769 : e900             [ 2] 	sbc #0
c76b : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c76d : a001             [ 2] 	ldy #1
c76f : b1a4             [ 5] 	lda (df_brkpc),y
c771 : 85a6             [ 3] 	sta df_brkval
c773 : 859f             [ 3] 	sta errno
                             	; now update the return address
c775 : a5a2             [ 3] 	lda df_pc
c777 : 9d0501           [ 5] 	sta 0x105,x
c77a : a5a3             [ 3] 	lda df_pc+1
c77c : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c782 : 8585             [ 3] 	sta num_a
c784 : 8686             [ 3] 	stx num_a+1
c786 : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c788 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank1.s --------------------------------

                             ;* Keyboard interrupt handler
                             ;****************************************
c789 :                       int_kb_handler	
c789 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c78b : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c78d : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c790 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c792 : f00c             [ 3] 	beq int_keys_up
c794 :                       int_do_read
c794 : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c796 : a53b             [ 3] 	lda kb_debounce			; Set debounce
c798 : 8537             [ 3] 	sta kb_deb
c79a :                       int_skip_scan
c79a : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c79c : 8d0d04           [ 4] 	sta IO_0 + IFR
c79f : 60               [ 6] 	rts
c7a0 :                       int_keys_up					; No key pressed
c7a0 : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c7a2 : 6434             [ 3] 	stz kb_last
c7a4 : 6435             [ 3] 	stz kb_code
c7a6 : 6437             [ 3] 	stz kb_deb
c7a8 : 6438             [ 3] 	stz kb_rep
c7aa : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c7ab :                       int_vdp_handler
c7ab : 20d7c7           [ 6] 	jsr update_timers	; If it is then update system 
                             
c7ae : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c7b0 : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c7b2 : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c7b4 : a513             [ 3] 	lda vdp_curstat		; Check it
c7b6 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c7b8 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c7ba : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c7bc : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c7be : 8513             [ 3] 	sta vdp_curstat		
                             
c7c0 : 18               [ 2] 	clc					; Add offset for cursor address in vram
c7c1 : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c7c3 : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c7c5 : aa               [ 2] 	tax
c7c6 : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c7c8 : 6900             [ 2] 	adc #0
                             
c7ca : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	
c7cd : a513             [ 3] 	lda vdp_curstat
c7cf : 2980             [ 2] 	and #0x80
c7d1 : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c7d3 : 200bc6           [ 6] 	jsr vdp_wr_vram
c7d6 :                       int_vdp_fin	
c7d6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
c7d7 :                       update_timers
c7d7 : e610             [ 5] 	inc vdp_int_cnt
c7d9 : d002             [ 3] 	bne inc_kb_timers
c7db : e611             [ 5] 	inc vdp_int_cnt+1
c7dd :                       inc_kb_timers
c7dd : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c7df : f002             [ 3] 	beq skip_kb_deb
c7e1 : c637             [ 5] 	dec kb_deb
c7e3 :                       skip_kb_deb
c7e3 : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c7e5 : f002             [ 3] 	beq skip_kb_rep
c7e7 : c638             [ 5] 	dec kb_rep
c7e9 :                       skip_kb_rep
c7e9 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c7ea :                       long_delay
c7ea : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c7ee : a000             [ 2] 	ldy #0x00
c7f0 :                       long_delay_1
c7f0 : ea               [ 2] 	nop
c7f1 : ea               [ 2] 	nop
c7f2 : ea               [ 2] 	nop
c7f3 : ea               [ 2] 	nop
c7f4 : 88               [ 2] 	dey
c7f5 : d0f9             [ 3] 	bne long_delay_1
c7f7 : ca               [ 2] 	dex
c7f8 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c7fd : 28               [ 4] 	plp
                             	
c7fe : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c7ff :                       utilPrintSPC
c7ff : 48               [ 3] 	pha
c800 : a920             [ 2] 	lda #' '
c802 : 2048c5           [ 6] 	jsr io_put_ch
c805 : 68               [ 4] 	pla
c806 : 60               [ 6] 	rts
                             
c807 :                       utilPrintCRLF
c807 : 48               [ 3] 	pha
c808 : a90d             [ 2] 	lda #UTF_CR
c80a : 2048c5           [ 6] 	jsr io_put_ch
c80d : 68               [ 4] 	pla
c80e : 60               [ 6] 	rts
                             
c80f :                       utilPrintA
c80f : 8545             [ 3] 	sta tmp_d
c811 : 48               [ 3] 	pha
c812 : 8a               [ 2] 	txa
c813 : 48               [ 3] 	pha
c814 : a545             [ 3] 	lda tmp_d
c816 : 2034c8           [ 6] 	jsr str_a_to_x
c819 : 2048c5           [ 6] 	jsr io_put_ch
c81c : 8a               [ 2] 	txa
c81d : 2048c5           [ 6] 	jsr io_put_ch
c820 : 68               [ 4] 	pla
c821 : aa               [ 2] 	tax
c822 : 68               [ 4] 	pla
c823 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c824 :                       util_clr_mem
c824 : 48               [ 3] 	pha
c825 : 5a               [ 3] 	phy
c826 : 863f             [ 3] 	stx tmp_v1
c828 : 8540             [ 3] 	sta tmp_v1+1
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank1.s --------------------------------

c82a : a900             [ 2] 	lda #0
c82c :                       mem_clr_byte
c82c : 88               [ 2] 	dey
c82d : 913f             [ 5] 	sta (tmp_v1),y
c82f : d0fb             [ 3] 	bne mem_clr_byte
c831 : 7a               [ 4] 	ply
c832 : 68               [ 4] 	pla
c833 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c834 :                       str_a_to_x
c834 : 48               [ 3] 	pha					; Save the byte using later on
c835 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c837 : 18               [ 2] 	clc
c838 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c83a : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c83c : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c83e : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c840 :                       skip_a_f_1
c840 : aa               [ 2] 	tax					; Low char is in X
c841 : 68               [ 4] 	pla					; Get byte back
c842 : 4a               [ 2] 	lsr a				; Make high nibble low
c843 : 4a               [ 2] 	lsr a
c844 : 4a               [ 2] 	lsr a
c845 : 4a               [ 2] 	lsr a
c846 : 18               [ 2] 	clc
c847 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c849 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c84b : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c84d : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c84f :                       skip_a_f_2
                             
c84f : 18               [ 2] 	clc					; No error
c850 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c851 :                       str_x_to_a
c851 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c853 : 38               [ 2] 	sec					; Process high char in A
c854 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c856 : c90a             [ 2] 	cmp #10				; If A < 10 then
c858 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c85a : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c85c :                       skip_x_f_1
c85c : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c85e : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c860 : 0a               [ 2] 	asl a				; This is the high nibble
c861 : 0a               [ 2] 	asl a
c862 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank1.s --------------------------------

c863 : 0a               [ 2] 	asl a
c864 : 48               [ 3] 	pha					; Save the high nibble
c865 : 8a               [ 2] 	txa					; Now process the low char in X
c866 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c868 : 38               [ 2] 	sec
c869 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c86b : c90a             [ 2] 	cmp #10				; If A < 10 then
c86d : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c86f : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c871 :                       skip_x_f_2
c871 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c873 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c875 : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c877 : 68               [ 4] 	pla					; Get high nibble
c878 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c87a : 18               [ 2] 	clc					; No error
c87b : 60               [ 6] 	rts					; A contains value
                             
c87c :                       str_x_to_a_errl
c87c : 68               [ 4] 	pla
c87d :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c87f :                       con_n_to_a
c87f : 8691             [ 3] 	stx num_tmp
c881 : 8592             [ 3] 	sta num_tmp+1
c883 : 6485             [ 3] 	stz num_a
c885 : 6486             [ 3] 	stz num_a+1
c887 : c000             [ 2] 	cpy #NUM_ANY
c889 : f014             [ 3] 	beq con_n_to_a_detect
c88b : 88               [ 2] 	dey
c88c : d003             [ 3] 	bne con_n_not_dec
c88e :                       con_dec_jmp
c88e : 4c22c9           [ 3] 	jmp con_dec_to_a_int
c891 :                       con_n_not_dec
c891 : 88               [ 2] 	dey
c892 : d003             [ 3] 	bne con_n_not_hex
c894 :                       con_hex_jmp
c894 : 4cb9c8           [ 3] 	jmp con_hex_to_a_int
c897 :                       con_n_not_hex
c897 : 88               [ 2] 	dey
c898 : d003             [ 3] 	bne con_n_err
c89a :                       con_bin_jmp
c89a : 4cf8c8           [ 3] 	jmp con_bin_to_a_int
c89d :                       con_n_err
c89d : 38               [ 2] 	sec
c89e : 60               [ 6] 	rts
c89f :                       con_n_to_a_detect
c89f : b291             [ 5] 	lda (num_tmp)
c8a1 : c930             [ 2] 	cmp #'0'
c8a3 : d0e9             [ 3] 	bne con_dec_jmp
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank1.s --------------------------------

c8a5 : a001             [ 2] 	ldy #1
c8a7 : b191             [ 5] 	lda (num_tmp),y
c8a9 : 0920             [ 2] 	ora #0x20
c8ab : c978             [ 2] 	cmp #'x'
c8ad : f0e5             [ 3] 	beq con_hex_jmp
c8af : c962             [ 2] 	cmp #'b'
c8b1 : f0e7             [ 3] 	beq con_bin_jmp
c8b3 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8b5 :                       con_hex_to_a
c8b5 : 8691             [ 3] 	stx num_tmp
c8b7 : 8592             [ 3] 	sta num_tmp+1
c8b9 :                       con_hex_to_a_int
c8b9 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c8bb : a002             [ 2] 	ldy #2			; start at first digit
c8bd :                       con_hex_digit
c8bd : b191             [ 5] 	lda (num_tmp),y
c8bf : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c8c1 : 38               [ 2] 	sec							; Process high char in A
c8c2 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c8c4 : c90a             [ 2] 	cmp #10						; If A < 10 then
c8c6 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c8c8 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c8ca :                       con_hex_skip_x_f_1
c8ca : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c8cc : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c8ce : 48               [ 3] 	pha
                             	; make room for lo nibble
c8cf : 0685             [ 5] 	asl num_a
c8d1 : 2686             [ 5] 	rol num_a+1
c8d3 : 0685             [ 5] 	asl num_a
c8d5 : 2686             [ 5] 	rol num_a+1
c8d7 : 0685             [ 5] 	asl num_a
c8d9 : 2686             [ 5] 	rol num_a+1
c8db : 0685             [ 5] 	asl num_a
c8dd : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c8df : 68               [ 4] 	pla
c8e0 : 0585             [ 3] 	ora num_a
c8e2 : 8585             [ 3] 	sta num_a
c8e4 : c8               [ 2] 	iny
c8e5 : ca               [ 2] 	dex
c8e6 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c8e8 :                       con_hex_err
c8e8 : 38               [ 2] 	sec
c8e9 : 60               [ 6] 	rts
                             	; found a non-hex digit
c8ea :                       con_hex_done
                             	; if no digits processed then error
c8ea : c002             [ 2] 	cpy #2
c8ec : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c8ee : 98               [ 2] 	tya
c8ef : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank1.s --------------------------------

c8f0 : a902             [ 2] 	lda #NUM_HEX
c8f2 : 18               [ 2] 	clc
c8f3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8f4 :                       con_bin_to_a
c8f4 : 8691             [ 3] 	stx num_tmp
c8f6 : 8592             [ 3] 	sta num_tmp+1
c8f8 :                       con_bin_to_a_int
c8f8 : a002             [ 2] 	ldy #2
c8fa : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c8fc :                       con_bin_digit
c8fc : b191             [ 5] 	lda (num_tmp),y
c8fe : c930             [ 2] 	cmp #'0'
c900 : 9010             [ 3] 	bcc con_bin_done
c902 : c932             [ 2] 	cmp #'1'+1
c904 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c906 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c908 : 2685             [ 5] 	rol num_a
c90a : 2686             [ 5] 	rol num_a+1
c90c : c8               [ 2] 	iny
c90d : ca               [ 2] 	dex
c90e : d0ec             [ 4] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c910 : 800a             [ 3] 	bra con_bin_err
c912 :                       con_bin_done
                             	; didn't process any digit = error
c912 : c002             [ 2] 	cpy #2
c914 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c916 : 98               [ 2] 	tya
c917 : aa               [ 2] 	tax
c918 : a903             [ 2] 	lda #NUM_BIN
c91a : 18               [ 2] 	clc
c91b : 60               [ 6] 	rts
c91c :                       con_bin_err
c91c : 38               [ 2] 	sec
c91d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c91e :                       con_dec_to_a
c91e : 8691             [ 3] 	stx num_tmp
c920 : 8592             [ 3] 	sta num_tmp+1
c922 :                       con_dec_to_a_int
c922 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c924 : b291             [ 5] 	lda (num_tmp)
c926 : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank1.s --------------------------------

c928 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c92a : c8               [ 2] 	iny
c92b :                       str_d_find_end
c92b : b191             [ 5] 	lda (num_tmp),y
c92d : c930             [ 2] 	cmp #'0'
c92f : 9007             [ 3] 	bcc str_d_found_end
c931 : c93a             [ 2] 	cmp #'9'+1
c933 : b003             [ 3] 	bcs str_d_found_end
c935 : c8               [ 2] 	iny
c936 : 80f3             [ 3] 	bra str_d_find_end
c938 :                       str_d_found_end
c938 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c93a : b052             [ 3] 	bcs str_d_error		; e.g. -32767 including minus
c93c : 8494             [ 3] 	sty num_tmp+3
c93e : 6493             [ 3] 	stz num_tmp+2
c940 : 6485             [ 3] 	stz num_a
c942 : 6486             [ 3] 	stz num_a+1
c944 :                       str_d_process_digit
c944 : 88               [ 2] 	dey
c945 : 3026             [ 3] 	bmi str_d_digits_done
                             
c947 : b191             [ 5] 	lda (num_tmp),y
                             
c949 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c94b : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c94d : 38               [ 2] 	sec
c94e : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c950 : 18               [ 2] 	clc
c951 : 0a               [ 2] 	asl a
c952 : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c954 : aa               [ 2] 	tax
c955 : a585             [ 3] 	lda num_a
c957 : 7d90c9           [ 4] 	adc str_d_powers,x
c95a : 8585             [ 3] 	sta num_a
c95c : a586             [ 3] 	lda num_a+1
c95e : 7d91c9           [ 4] 	adc str_d_powers+1,x
c961 : 8586             [ 3] 	sta num_a+1
c963 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c965 : a593             [ 3] 	lda num_tmp+2
c967 : 6914             [ 2] 	adc #20
c969 : 8593             [ 3] 	sta num_tmp+2
c96b : 80d7             [ 3] 	bra str_d_process_digit
c96d :                       str_d_digits_done
                             	; check if minus
c96d : b291             [ 5] 	lda (num_tmp)
c96f : c92d             [ 2] 	cmp #'-'
c971 : d011             [ 3] 	bne str_d_skip_neg
c973 : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c975 : e002             [ 2] 	cpx #2				; else it's an error
c977 : 9015             [ 3] 	bcc str_d_error
c979 : a685             [ 3] 	ldx num_a
c97b : a586             [ 3] 	lda num_a+1
c97d : 20f4c9           [ 6] 	jsr twos_complement
c980 : 8685             [ 3] 	stx num_a
c982 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank1.s --------------------------------

c984 :                       str_d_skip_neg
c984 : a694             [ 3] 	ldx num_tmp+3
c986 : e001             [ 2] 	cpx #1				; must be at least 1 char
c988 : 9004             [ 3] 	bcc str_d_error
c98a : a901             [ 2] 	lda #NUM_DEC
c98c : 18               [ 2] 	clc
c98d : 60               [ 6] 	rts
c98e :                       str_d_error
c98e : 38               [ 2] 	sec
c98f : 60               [ 6] 	rts
                             
c990 :                       str_d_powers
c990 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c9a4 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c9b8 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c9cc : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c9e0 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c9f4 :                       twos_complement
c9f4 : 49ff             [ 2] 	eor #0xff
c9f6 : 48               [ 3] 	pha
c9f7 : 8a               [ 2] 	txa
c9f8 : 49ff             [ 2] 	eor #0xff
c9fa : aa               [ 2] 	tax
c9fb : 68               [ 4] 	pla
c9fc : e8               [ 2] 	inx
c9fd : d001             [ 4] 	bne twos_complement_skip_X
c9ff : 1a               [ 2] 	inc a
ca00 :                       twos_complement_skip_X
ca00 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
ca01 :                       int_to_bcd
ca01 : 08               [ 3] 	php
ca02 : 48               [ 3] 	pha
ca03 : da               [ 3] 	phx
                             
ca04 : 8691             [ 3] 	stx num_tmp
ca06 : 8592             [ 3] 	sta num_tmp+1
ca08 : c980             [ 2] 	cmp #0x80			; Negative?
ca0a : 9003             [ 3] 	bcc int_to_bcd_skip_neg
ca0c : 20f4c9           [ 6] 	jsr twos_complement
ca0f :                       int_to_bcd_skip_neg
ca0f : 6485             [ 3] 	stz num_a
ca11 : 6486             [ 3] 	stz num_a+1
ca13 : 6487             [ 3] 	stz num_a+2
ca15 : 6488             [ 3] 	stz num_a+3
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank1.s --------------------------------

ca17 : a210             [ 2] 	ldx #16
ca19 : f8               [ 2] 	sed
ca1a :                       int_to_bcd_bit
ca1a : 0691             [ 5] 	asl num_tmp
ca1c : 2692             [ 5] 	rol num_tmp+1
ca1e : a585             [ 3] 	lda num_a
ca20 : 6585             [ 3] 	adc num_a
ca22 : 8585             [ 3] 	sta num_a
ca24 : a586             [ 3] 	lda num_a+1
ca26 : 6586             [ 3] 	adc num_a+1
ca28 : 8586             [ 3] 	sta num_a+1
ca2a : a587             [ 3] 	lda num_a+2
ca2c : 6587             [ 3] 	adc num_a+2
ca2e : 8587             [ 3] 	sta num_a+2
ca30 : ca               [ 2] 	dex
ca31 : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
ca33 : fa               [ 4] 	plx
ca34 : 68               [ 4] 	pla
ca35 : 28               [ 4] 	plp
ca36 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
ca37 :                       word_to_bcd
ca37 : 08               [ 3] 	php
ca38 : 48               [ 3] 	pha
ca39 : da               [ 3] 	phx
                             
ca3a : 8691             [ 3] 	stx num_tmp
ca3c : 8592             [ 3] 	sta num_tmp+1
ca3e : 6485             [ 3] 	stz num_a
ca40 : 6486             [ 3] 	stz num_a+1
ca42 : 6487             [ 3] 	stz num_a+2
ca44 : 6488             [ 3] 	stz num_a+3
ca46 : a210             [ 2] 	ldx #16			; 16 binary bits
ca48 : f8               [ 2] 	sed
ca49 :                       word_to_bcd_bit
ca49 : 0691             [ 5] 	asl num_tmp
ca4b : 2692             [ 5] 	rol num_tmp+1
ca4d : a585             [ 3] 	lda num_a
ca4f : 6585             [ 3] 	adc num_a
ca51 : 8585             [ 3] 	sta num_a
ca53 : a586             [ 3] 	lda num_a+1
ca55 : 6586             [ 3] 	adc num_a+1
ca57 : 8586             [ 3] 	sta num_a+1
ca59 : a587             [ 3] 	lda num_a+2
ca5b : 6587             [ 3] 	adc num_a+2
ca5d : 8587             [ 3] 	sta num_a+2
ca5f : ca               [ 2] 	dex
ca60 : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
ca62 : fa               [ 4] 	plx
ca63 : 68               [ 4] 	pla
ca64 : 28               [ 4] 	plp
ca65 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
ca66 :                       bcd_to_str
ca66 : 48               [ 3] 	pha
ca67 : da               [ 3] 	phx
ca68 : 5a               [ 3] 	phy
                             
ca69 : a205             [ 2] 	ldx #5						; Index in to string
ca6b : a000             [ 2] 	ldy #0						; Current BCD digit
ca6d :                       bcd_str
ca6d : b98500           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
ca70 : 48               [ 3] 	pha
ca71 : 290f             [ 2] 	and #0xf
ca73 : 18               [ 2] 	clc
ca74 : 6930             [ 2] 	adc #0x30
ca76 : 9595             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
ca78 : 68               [ 4] 	pla
ca79 : 4a               [ 2] 	lsr a
ca7a : 4a               [ 2] 	lsr a
ca7b : 4a               [ 2] 	lsr a
ca7c : 4a               [ 2] 	lsr a
ca7d : 18               [ 2] 	clc
ca7e : 6930             [ 2] 	adc #0x30					; Convert to ASCII
ca80 : 9594             [ 4] 	sta num_buf-1,x
ca82 : ca               [ 2] 	dex
ca83 : ca               [ 2] 	dex
ca84 : c8               [ 2] 	iny
ca85 : c003             [ 2] 	cpy #3						; 3 BCD digits max
ca87 : d0e4             [ 3] 	bne bcd_str
                             
ca89 : 7a               [ 4] 	ply
ca8a : fa               [ 4] 	plx
ca8b : 68               [ 4] 	pla
ca8c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
ca8d :                       out_bcd
ca8d : 48               [ 3] 	pha
ca8e : da               [ 3] 	phx
ca8f : 08               [ 3] 	php
ca90 : a000             [ 2] 	ldy #0						; How many digits printed
ca92 : a200             [ 2] 	ldx #0						; Index in to string
ca94 :                       out_bcd_digit
ca94 : b595             [ 4] 	lda num_buf,x
ca96 : c000             [ 2] 	cpy #0						; If not in leading zero mode
ca98 : d008             [ 3] 	bne out_bcd_print			; No then go print
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank1.s --------------------------------

                             
ca9a : c930             [ 2] 	cmp #'0'					; else check if zero
ca9c : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
ca9e : 28               [ 4] 	plp
ca9f : 08               [ 3] 	php
caa0 : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
caa2 :                       out_bcd_print
caa2 : c8               [ 2] 	iny
caa3 : 2048c5           [ 6] 	jsr io_put_ch
caa6 :                       out_bcd_next
caa6 : e8               [ 2] 	inx
caa7 : e006             [ 2] 	cpx #6
caa9 : d0e9             [ 3] 	bne out_bcd_digit
caab : c000             [ 2] 	cpy #0						; If nothing printed
caad : d006             [ 3] 	bne out_bcd_fin
caaf : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
cab1 : 2048c5           [ 6] 	jsr io_put_ch
cab4 : c8               [ 2] 	iny
cab5 :                       out_bcd_fin
cab5 : 28               [ 4] 	plp
cab6 : fa               [ 4] 	plx
cab7 : 68               [ 4] 	pla
cab8 : 18               [ 2] 	clc
cab9 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
caba :                       str_a_to_d
caba : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cabb :                       print_a_to_d
cabb : 08               [ 3] 	php
cabc : c980             [ 2] 	cmp #0x80					; Check if sign bit is set
cabe : 9014             [ 3] 	bcc print_a_to_d_skip_neg	; Skip if not (postive
cac0 : 20f4c9           [ 6] 	jsr twos_complement			; Flip from 2s complement
cac3 : 2001ca           [ 6] 	jsr int_to_bcd				; Convert to BCD
cac6 : 2066ca           [ 6] 	jsr bcd_to_str				; Convert BCD to string
cac9 : a92d             [ 2] 	lda #'-'
cacb : 2048c5           [ 6] 	jsr io_put_ch
cace : 28               [ 4] 	plp							; Leading zeros preference
cacf : 208dca           [ 6] 	jsr out_bcd
cad2 : c8               [ 2] 	iny							; Account for sign
cad3 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank1.s --------------------------------

cad4 :                       print_a_to_d_skip_neg
cad4 : 2001ca           [ 6] 	jsr int_to_bcd				; Convert to BCD
cad7 : 2066ca           [ 6] 	jsr bcd_to_str				; Convert BCD to string
cada : 28               [ 4] 	plp							; Leading zeros preference
cadb : 4c8dca           [ 3] 	jmp out_bcd					; Print +ve string
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cade :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
cade : 4c39cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cae1 :                       init_2					; init_ram will jump back to here
cae1 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cae3 : 9a               [ 2] 	txs
                             ;	cld					; No need as disabled on startup
                             	
cae4 : 20eaca           [ 6] 	jsr kernel_init
                             
cae7 : 4c83c6           [ 3] 	jmp main
                             
caea :                       kernel_init
caea : 20d6c6           [ 6] 	jsr init_nmi		; Initialise NMI handling
caed : 20f6c6           [ 6] 	jsr init_irq		; Initialise IRQ handling
caf0 : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
caf3 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
caf6 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
caf9 :                       kernel_test
caf9 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cafc : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
caff : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cb02 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cb04 : 48               [ 3] 	pha
cb05 : a20e             [ 2] 	ldx #0xe			; NV location for default text mode [
cb07 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cb0a : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cb0c : aa               [ 2] 	tax					; Save the mode temporarily
cb0d : 68               [ 4] 	pla					; Get the default mode from stack
cb0e : 8a               [ 2] 	txa					; And push the NV mode that was read
cb0f : 48               [ 3] 	pha
cb10 : a20f             [ 2] 	ldx #0xf			; NV location for the default colour
cb12 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cb15 : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cb17 :                       kernel_skip_nv	
cb17 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cb18 : 20c6c1           [ 6] 	jsr _gr_init_screen
cb1b : 200ec5           [ 6] 	jsr io_init			; Set default input/output device
cb1e : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cb2c : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cb2f : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cb32 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cb35 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank1.s --------------------------------

cb38 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cb39 :                       init_ram
cb39 : 6400             [ 3] 	stz 0x00			; Start at page 0
cb3b : 6401             [ 3] 	stz 0x01
cb3d : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cb3f : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cb41 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cb43 :                       init_ram_1
cb43 : e004             [ 2] 	cpx	#4				; Page <4 is ok
cb45 : 9006             [ 3] 	bcc init_ram_fill
cb47 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cb49 : b002             [ 3] 	bcs init_ram_fill
cb4b : 8002             [ 3] 	bra init_ram_skip
cb4d :                       init_ram_fill
cb4d : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cb4f :                       init_ram_skip
cb4f : c8               [ 2] 	iny
cb50 : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cb52 : e8               [ 2] 	inx					; Increment page counter
cb53 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cb55 : d0ec             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cb57 : 4ce1ca           [ 3] 	jmp init_2			; Carry on initialisation
                             
cb5a :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "utils\intmath.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
cb5a :                       int_add
cb5a : 18               [ 2] 	clc
cb5b : a585             [ 3] 	lda num_a
cb5d : 6589             [ 3] 	adc num_b
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank1.s --------------------------------

cb5f : 8585             [ 3] 	sta num_a
cb61 : a586             [ 3] 	lda num_a+1
cb63 : 658a             [ 3] 	adc num_b+1
cb65 : 8586             [ 3] 	sta num_a+1
cb67 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
cb68 :                       int_sub
cb68 : 38               [ 2] 	sec
cb69 : a585             [ 3] 	lda num_a
cb6b : e589             [ 3] 	sbc num_b
cb6d : 8585             [ 3] 	sta num_a
cb6f : a586             [ 3] 	lda num_a+1
cb71 : 658a             [ 3] 	adc num_b+1
cb73 : 8586             [ 3] 	sta num_a+1
cb75 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
cb76 :                       int_swp
cb76 : a585             [ 3] 	lda num_a
cb78 : a689             [ 3] 	ldx num_b
cb7a : 8589             [ 3] 	sta num_b
cb7c : 8685             [ 3] 	stx num_a
cb7e : a586             [ 3] 	lda num_a+1
cb80 : a68a             [ 3] 	ldx num_b+1
cb82 : 858a             [ 3] 	sta num_b+1
cb84 : 8686             [ 3] 	stx num_a+1
cb86 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
cb87 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
cb8f : 6485             [ 3] 	stz num_a
cb91 : 6486             [ 3] 	stz num_a+1
cb93 : a008             [ 2] 	ldy #8
cb95 :                       int_fast_mult_cycle
cb95 : 4689             [ 5] 	lsr num_b
cb97 : 900d             [ 3] 	bcc int_fast_mult_next
cb99 : 18               [ 2] 	clc
cb9a : a585             [ 3] 	lda num_a
cb9c : 6591             [ 3] 	adc num_tmp
cb9e : 8585             [ 3] 	sta num_a
cba0 : a586             [ 3] 	lda num_a+1
cba2 : 6592             [ 3] 	adc num_tmp+1
cba4 : 8586             [ 3] 	sta num_a+1
cba6 :                       int_fast_mult_next
cba6 : 0691             [ 5] 	asl num_tmp
cba8 : 2692             [ 5] 	rol num_tmp+1
cbaa : 88               [ 2] 	dey
cbab : d0e8             [ 3] 	bne int_fast_mult_cycle
cbad : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
cbae :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
cbb6 : 6485             [ 3] 	stz num_a
cbb8 : 6486             [ 3] 	stz num_a+1
cbba : a010             [ 2] 	ldy #16
cbbc :                       int_mult_cycle
cbbc : 468a             [ 5] 	lsr num_b+1
cbbe : 6689             [ 5] 	ror num_b
cbc0 : 900d             [ 3] 	bcc int_mult_next
cbc2 : 18               [ 2] 	clc
cbc3 : a585             [ 3] 	lda num_a
cbc5 : 6591             [ 3] 	adc num_tmp
cbc7 : 8585             [ 3] 	sta num_a
cbc9 : a586             [ 3] 	lda num_a+1
cbcb : 6592             [ 3] 	adc num_tmp+1
cbcd : 8586             [ 3] 	sta num_a+1
cbcf :                       int_mult_next
cbcf : 0691             [ 5] 	asl num_tmp
cbd1 : 2692             [ 5] 	rol num_tmp+1
cbd3 : 88               [ 2] 	dey
cbd4 : d0e6             [ 3] 	bne int_mult_cycle
cbd6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
cbd7 :                       int_div
                             	; adjust signs
cbd7 : 6491             [ 3] 	stz num_tmp				; Assume all +ve
cbd9 : a586             [ 3] 	lda num_a+1				; Check A hi
cbdb : 100f             [ 3] 	bpl int_div_skip_negA
cbdd : e691             [ 5] 	inc num_tmp				; Record sign flip
cbdf : 38               [ 2] 	sec						; 2's complement A
cbe0 : a900             [ 2] 	lda #0					; by 0-A
cbe2 : e585             [ 3] 	sbc num_a				; A is now +ve
cbe4 : 8585             [ 3] 	sta num_a
cbe6 : a900             [ 2] 	lda #0
cbe8 : e586             [ 3] 	sbc num_a+1
cbea : 8586             [ 3] 	sta num_a+1	
cbec :                       int_div_skip_negA
cbec : a58a             [ 3] 	lda num_b+1				; Check B hi
cbee : 100f             [ 3] 	bpl int_div_skip_negB
cbf0 : e691             [ 5] 	inc num_tmp				; Record sign flip
cbf2 : 38               [ 2] 	sec						; 2's complement B
cbf3 : a900             [ 2] 	lda #0					; by 0-B
cbf5 : e589             [ 3] 	sbc num_b				; B is now +ve
cbf7 : 8589             [ 3] 	sta num_b
cbf9 : a900             [ 2] 	lda #0
cbfb : e58a             [ 3] 	sbc num_b+1
cbfd : 858a             [ 3] 	sta num_b+1
cbff :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
cbff : 648d             [ 3] 	stz num_x
cc01 : 648e             [ 3] 	stz num_x+1
                             	; 16 bit division
cc03 : a010             [ 2] 	ldy #16
cc05 :                       int_div_cycle
                             	; shift a left 1 bit
cc05 : 0685             [ 5] 	asl num_a
cc07 : 2686             [ 5] 	rol num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank1.s --------------------------------

                             	; shift in to remainder
cc09 : 268d             [ 5] 	rol num_x
cc0b : 268e             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
cc0d : 38               [ 2] 	sec
cc0e : a58d             [ 3] 	lda num_x
cc10 : e589             [ 3] 	sbc num_b
cc12 : aa               [ 2] 	tax
cc13 : a58e             [ 3] 	lda num_x+1
cc15 : e58a             [ 3] 	sbc num_b+1
cc17 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
cc19 : 868d             [ 3] 	stx num_x
cc1b : 858e             [ 3] 	sta num_x+1
cc1d : e685             [ 5] 	inc num_a
cc1f :                       int_div_skip
                             	; carry on for 16 bits
cc1f : 88               [ 2] 	dey
cc20 : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
cc22 : a591             [ 3] 	lda num_tmp
cc24 : 2901             [ 2] 	and #1
cc26 : f00d             [ 3] 	beq int_div_noflip
cc28 : 38               [ 2] 	sec						; 2's complement A
cc29 : a900             [ 2] 	lda #0					; by 0-A
cc2b : e585             [ 3] 	sbc num_a				; A is now +ve
cc2d : 8585             [ 3] 	sta num_a
cc2f : a900             [ 2] 	lda #0
cc31 : e586             [ 3] 	sbc num_a+1
cc33 : 8586             [ 3] 	sta num_a+1	
cc35 :                       int_div_noflip
cc35 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat\dflat.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank1.s --------------------------------

cc36 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
cc36 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
cc36 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
cc46 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank1.s --------------------------------

cc46 : a5e3             [ 3] 	lda df_tmpptra
cc48 : c5af             [ 3] 	cmp df_vvtstrt
cc4a : d006             [ 3] 	bne df_var_match_vnt_do
cc4c : a5e4             [ 3] 	lda df_tmpptra+1
cc4e : c5b0             [ 3] 	cmp df_vvtstrt+1
cc50 : f042             [ 3] 	beq df_var_find_no_vnt
cc52 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
cc52 : a4be             [ 3] 	ldy df_linoff
cc54 : a200             [ 2] 	ldx #0
cc56 :                       df_var_match_vnt_sym
cc56 : b9000a           [ 4] 	lda df_linbuff,y
cc59 : c1e5             [ 6] 	cmp (df_tmpptrb,x)
cc5b : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
cc5d : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
cc64 : a1e5             [ 6] 	lda (df_tmpptrb,x)
cc66 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
cc68 : b9000a           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
cc6b : 2017ce           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
cc6e : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
cc70 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
cc70 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
cc72 : d025             [ 3] 	bne df_var_find_true
cc74 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
cc74 : a1e5             [ 6] 	lda (df_tmpptrb,x)
cc76 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
cc7e : 4c74cc           [ 3] 	jmp df_var_vnt_sym_nomatch
cc81 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
cc87 : 18               [ 2] 	clc
cc88 : a5e3             [ 3] 	lda df_tmpptra
cc8a : 6908             [ 2] 	adc #8
cc8c : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
cc90 : e6e4             [ 5] 	inc df_tmpptra+1
cc92 : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
cc94 :                       df_var_find_no_vnt
cc94 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank1.s --------------------------------

cc96 : aa               [ 2] 	tax
cc97 : 38               [ 2] 	sec
cc98 : 60               [ 6] 	rts
                             
cc99 :                       df_var_find_true
                             	; Get slot address into x,a
cc99 : a6e3             [ 3] 	ldx df_tmpptra
cc9b : a5e4             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
cc9d : 84be             [ 3] 	sty df_linoff
cc9f : 18               [ 2] 	clc
cca0 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
cca1 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
cca1 : 38               [ 2] 	sec
cca2 : a5ab             [ 3] 	lda df_vntstrt
cca4 : e908             [ 2] 	sbc #DFVVT_SZ
cca6 : 85ab             [ 3] 	sta df_vntstrt
cca8 : a5ac             [ 3] 	lda df_vntstrt+1
ccaa : e900             [ 2] 	sbc #0
ccac : 85ac             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
ccae : 38               [ 2] 	sec
ccaf : a5ad             [ 3] 	lda df_vntend
ccb1 : e908             [ 2] 	sbc #DFVVT_SZ
ccb3 : 85ad             [ 3] 	sta df_vntend
ccb5 : a5ae             [ 3] 	lda df_vntend+1
ccb7 : e900             [ 2] 	sbc #0
ccb9 : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
ccc3 :                       df_var_move_byte
                             	; When pointer = vntend then done
ccc3 : a5e3             [ 3] 	lda df_tmpptra
ccc5 : c5ad             [ 3] 	cmp df_vntend
ccc7 : d006             [ 3] 	bne df_var_move_byte_do
ccc9 : a5e4             [ 3] 	lda df_tmpptra+1
cccb : c5ae             [ 3] 	cmp df_vntend+1
cccd : f011             [ 3] 	beq df_var_move_byte_fin
cccf :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank1.s --------------------------------

cccf : a008             [ 2] 	ldy #DFVVT_SZ
ccd1 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
ccd3 : a000             [ 2] 	ldy #0
ccd5 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
ccdd : 4cc3cc           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
cce0 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
cce0 : 8645             [ 3] 	stx tmp_d
cce2 : 38               [ 2] 	sec
cce3 : a5ab             [ 3] 	lda df_vntstrt
cce5 : e545             [ 3] 	sbc tmp_d
cce7 : 85ab             [ 3] 	sta df_vntstrt
cce9 : a5ac             [ 3] 	lda df_vntstrt+1
cceb : e900             [ 2] 	sbc #0
cced : 85ac             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
ccf7 : e6b3             [ 5] 	inc df_varcnt
ccf9 : 18               [ 2] 	clc
ccfa : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
ccfb :                       df_var_analyse
                             	; Default type is INT
ccfb : a901             [ 2] 	lda #DFVVT_INT
ccfd : 85e3             [ 3] 	sta df_tmpptra
                             	
                             	; start at the current buffer position
ccff : a4be             [ 3] 	ldy df_linoff
                             	
                             	; check for PROC prefix
cd01 : b9000a           [ 4] 	lda df_linbuff,y
cd04 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
cd06 : d005             [ 3] 	bne df_var_not_proc
                             	; else set type to PROC
cd08 : a940             [ 2] 	lda #DFVVT_PROC
cd0a : 85e3             [ 3] 	sta df_tmpptra
                             	; skip over prefix
cd0c : c8               [ 2] 	iny
cd0d :                       df_var_not_proc
                             	; found the actual number of alpha nums
cd0d : a2ff             [ 2] 	ldx #0xff
                             	; go back on pos on index as loop always does in
cd0f : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank1.s --------------------------------

cd10 :                       df_var_type_countlen
                             	; count alpha nums
cd10 : c8               [ 2] 	iny
cd11 : e8               [ 2] 	inx
cd12 : b9000a           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
cd15 : e000             [ 2] 	cpx #0
cd17 : d007             [ 3] 	bne df_var_type_countlen_alphanum
cd19 : 200ace           [ 6] 	jsr df_tk_isalpha
cd1c : b0f2             [ 3] 	bcs df_var_type_countlen
cd1e : 9005             [ 3] 	bcc df_var_type_countlen_done
cd20 :                       df_var_type_countlen_alphanum
cd20 : 2017ce           [ 6] 	jsr df_tk_isalphanum
cd23 : b0eb             [ 3] 	bcs df_var_type_countlen
cd25 :                       df_var_type_countlen_done
cd25 : e000             [ 2] 	cpx #0
cd27 : d00a             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
cd29 :                       df_var_analyse_err
                             	; If already prefix of PROC then fatal error
cd29 : a5e3             [ 3] 	lda df_tmpptra
cd2b : c940             [ 2] 	cmp #DFVVT_PROC
cd2d : f002             [ 3] 	beq df_var_analyse_fatal_err
cd2f : 38               [ 2] 	sec
cd30 : 60               [ 6] 	rts
cd31 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
cd33 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ;	ldx df_tmpptra
                             ;	cpx #DFVVT_PROC
                             ;	beq df_var_analyse_fatal_err
                             	; Set to INT type although it is the default alr
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
cd33 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
cd33 : c924             [ 2] 	cmp #'$'
cd35 : d00b             [ 3] 	bne df_var_analyse_chk_arry
cd37 : a6e3             [ 3] 	ldx df_tmpptra
cd39 : e040             [ 2] 	cpx #DFVVT_PROC
cd3b : f0f4             [ 3] 	beq df_var_analyse_fatal_err
                             	; Set to STRING type
cd3d : a904             [ 2] 	lda #DFVVT_STR
cd3f : 85e3             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
cd41 : c8               [ 2] 	iny
cd42 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
cd42 : b9000a           [ 4] 	lda df_linbuff,y
cd45 : c95b             [ 2] 	cmp #'['
cd47 : d00a             [ 3] 	bne df_var_not_arry
                             	; array and proc type not compatible
cd49 : a5e3             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank1.s --------------------------------

cd4b : c940             [ 2] 	cmp #DFVVT_PROC
cd4d : f0e2             [ 3] 	beq df_var_analyse_fatal_err
cd4f : 0980             [ 2] 	ora #DFVVT_ARRY
cd51 : 85e3             [ 3] 	sta df_tmpptra
cd53 :                       df_var_not_arry
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
cd53 : 98               [ 2] 	tya
cd54 : 38               [ 2] 	sec
cd55 : e5be             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
cd57 : aa               [ 2] 	tax
                             	; put type in A
cd58 : a5e3             [ 3] 	lda df_tmpptra
cd5a : 18               [ 2] 	clc
cd5b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
cd5c :                       df_var_findcreate
                             	; save mask
cd5c : 48               [ 3] 	pha
cd5d : 2036cc           [ 6] 	jsr df_var_find
cd60 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
cd62 : 68               [ 4] 	pla
cd63 : 48               [ 3] 	pha
                             	; don't check mask if zero
cd64 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
cd66 : 68               [ 4] 	pla
cd67 : a000             [ 2] 	ldy #DFVVT_TYPE
cd69 : 31e3             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
cd6b : f019             [ 3] 	beq df_var_findcreate_err
cd6d : 48               [ 3] 	pha		; Dummy push to match the pla
cd6e :                       df_var_findcreate_found
                             	; discard mask
cd6e : 68               [ 4] 	pla	
                             	; put slot address in x,a
cd6f : a6e3             [ 3] 	ldx df_tmpptra
cd71 : a5e4             [ 3] 	lda df_tmpptra+1
cd73 : 18               [ 2] 	clc
cd74 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
cd75 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
cd75 : 20fbcc           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
cd78 : 85e3             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
cd7a : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
cd7c : 68               [ 4] 	pla
cd7d : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank1.s --------------------------------

cd7f : 25e3             [ 3] 	and df_tmpptra
                             	; mask match is ok
cd81 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
cd83 : f001             [ 3] 	beq df_var_findcreate_err
cd85 :                       df_var_findcreate_errp
cd85 : 68               [ 4] 	pla
cd86 :                       df_var_findcreate_err
cd86 : 38               [ 2] 	sec
cd87 : 60               [ 6] 	rts
                             
cd88 :                       df_var_analyse_ok
                             	; extra space for zero terminator
cd88 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
cd89 : a5e3             [ 3] 	lda df_tmpptra
cd8b : 48               [ 3] 	pha
cd8c : 8a               [ 2] 	txa
cd8d : 48               [ 3] 	pha
                             	
cd8e : 20a1cc           [ 6] 	jsr df_var_insert_space
cd91 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
cd95 :                       df_var_initialise_var
cd95 : 68               [ 4] 	pla
cd96 : 85e7             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
cd98 : 68               [ 4] 	pla							; type
cd99 : a000             [ 2] 	ldy #DFVVT_TYPE
cd9b : 91b1             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
cd9d : a900             [ 2] 	lda #0						; zero the rest
cd9f : a007             [ 2] 	ldy #7
cda1 :                       df_var_zero_vnt
cda1 : 91b1             [ 5] 	sta (df_vvtend),y
cda3 : 88               [ 2] 	dey
cda4 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
cda6 : c6e7             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
cda8 : a6be             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
cdaa :                       df_var_findcreate_copy
cdaa : bd000a           [ 4] 	lda df_linbuff,x
cdad : 91ab             [ 5] 	sta (df_vntstrt),y
cdaf : e8               [ 2] 	inx
cdb0 : c8               [ 2] 	iny
cdb1 : c6e7             [ 5] 	dec df_tmpptrc
cdb3 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
cdb5 : a900             [ 2] 	lda #0
cdb7 : 91ab             [ 5] 	sta (df_vntstrt),y
                             
cdb9 : 86be             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
cdbb : a6b1             [ 3] 	ldx df_vvtend
cdbd : a5b2             [ 3] 	lda df_vvtend+1
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank1.s --------------------------------

                             	
cdbf : 18               [ 2] 	clc
cdc0 : 60               [ 6] 	rts
                             	
cdc1 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cdc1 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
cdc1 :                       df_tk_peek_buf
cdc1 : a4be             [ 3] 	ldy df_linoff
cdc3 : b9000a           [ 4] 	lda df_linbuff,y
cdc6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
cdc7 :                       df_tk_get_buf
cdc7 : a4be             [ 3] 	ldy df_linoff
cdc9 : b9000a           [ 4] 	lda df_linbuff,y
cdcc : f003             [ 3] 	beq df_tk_get_buf_null
cdce : c8               [ 2] 	iny
cdcf : 84be             [ 3] 	sty df_linoff
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank1.s --------------------------------

cdd1 :                       df_tk_get_buf_null
cdd1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
cdd2 :                       df_tk_put_tok
cdd2 : a4bf             [ 3] 	ldy df_tokoff
cdd4 : 99800a           [ 5] 	sta df_tokbuff,y
cdd7 : c8               [ 2] 	iny
cdd8 : 3004             [ 3] 	bmi df_tk_put_overflow
cdda : 84bf             [ 3] 	sty df_tokoff
cddc : 18               [ 2] 	clc
cddd : 60               [ 6] 	rts
cdde :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cde0 :                       df_tk_isdigit
cde0 : c93a             [ 2] 	cmp #'9'+1
cde2 : b005             [ 3] 	bcs df_tk_isdigit_false
cde4 : c930             [ 2] 	cmp #'0'
cde6 : 9001             [ 3] 	bcc df_tk_isdigit_false
cde8 : 60               [ 6] 	rts						; C must be 1
cde9 :                       df_tk_isdigit_false
cde9 : 18               [ 2] 	clc
cdea : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdeb :                       df_tk_isbin
cdeb : c930             [ 2] 	cmp #'0'
cded : f005             [ 3] 	beq df_tk_isbin_true	; C=1
cdef : c931             [ 2] 	cmp #'1'
cdf1 : f001             [ 3] 	beq df_tk_isbin_true	; C=1
cdf3 : 18               [ 2] 	clc
cdf4 :                       df_tk_isbin_true
cdf4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdf5 :                       df_tk_ishex
cdf5 : 48               [ 3] 	pha
cdf6 : 20e0cd           [ 6] 	jsr df_tk_isdigit
cdf9 : b00a             [ 4] 	bcs df_tk_ishex_truep
cdfb : 0920             [ 2] 	ora #0x20
cdfd : c967             [ 2] 	cmp #'f'+1
cdff : b006             [ 4] 	bcs df_tk_ishex_false
ce01 : c961             [ 2] 	cmp #'a'
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank1.s --------------------------------

ce03 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
ce05 :                       df_tk_ishex_truep
ce05 : 68               [ 4] 	pla
ce06 : 60               [ 6] 	rts
ce07 :                       df_tk_ishex_false
ce07 :                       df_tk_isalpha_false
ce07 : 18               [ 2] 	clc
ce08 : 68               [ 4] 	pla
ce09 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce0a :                       df_tk_isalpha
ce0a : 48               [ 3] 	pha
ce0b : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
ce0d : c97b             [ 2] 	cmp #'z'+1
ce0f : b0f6             [ 3] 	bcs df_tk_isalpha_false
ce11 : c961             [ 2] 	cmp #'a'
ce13 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
ce15 : 68               [ 4] 	pla
ce16 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce17 :                       df_tk_isalphanum
ce17 : 200ace           [ 6] 	jsr df_tk_isalpha
ce1a : 90c4             [ 4] 	bcc df_tk_isdigit
ce1c :                       df_tk_rts1				; branch to this RTS where possible
ce1c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce1d :                       df_tk_isproc
ce1d : c95f             [ 2] 	cmp #'_'
ce1f : f001             [ 3] 	beq df_tk_isproc_true	; C=1
ce21 : 18               [ 2] 	clc
ce22 :                       df_tk_isproc_true
ce22 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ce23 :                       df_tk_skip_ws
ce23 :                       df_tk_ws_loop1
ce23 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
ce26 : 203ece           [ 6] 	jsr df_tk_isws
ce29 : 90f1             [ 3] 	bcc df_tk_rts1
ce2b : e6be             [ 5] 	inc df_linoff
ce2d : 20d2cd           [ 6] 	jsr df_tk_put_tok
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank1.s --------------------------------

ce30 : 90f1             [ 3] 	bcc df_tk_skip_ws		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_strip_ws
                             ;* Strip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ce32 :                       df_tk_strip_ws
ce32 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
ce35 : 203ece           [ 6] 	jsr df_tk_isws
ce38 : 90e2             [ 3] 	bcc df_tk_rts1
ce3a : e6be             [ 5] 	inc df_linoff
ce3c : d0f4             [ 3] 	bne df_tk_strip_ws		; Always as linoff is not ze
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce3e :                       df_tk_isws
ce3e : c920             [ 2] 	cmp #' '
ce40 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
ce42 : 60               [ 6] 	rts
ce43 :                       df_tk_isws_false
ce43 :                       df_tk_expectok
ce43 : 18               [ 2] 	clc
ce44 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
ce45 :                       df_tk_expect
ce45 : 48               [ 3] 	pha
                             	; skip ws
ce46 : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
ce49 : 68               [ 4] 	pla
ce4a : a4be             [ 3] 	ldy df_linoff
ce4c : d9000a           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
ce4f : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
ce51 :                       df_tk_num_err
ce51 :                       df_tk_char_err
ce51 : 38               [ 2] 	sec
ce52 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
ce53 :                       df_tk_expect_tok
ce53 : 2045ce           [ 6] 	jsr df_tk_expect
ce56 : b0c4             [ 3] 	bcs df_tk_rts1
ce58 : 20c7cd           [ 6] 	jsr df_tk_get_buf
ce5b : 4cd2cd           [ 3] 	jmp df_tk_put_tok
                             
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
ce5e :                       df_tk_expect_tok_err
ce5e : 2053ce           [ 6] 	jsr df_tk_expect_tok
ce61 : 90b9             [ 3] 	bcc df_tk_rts1
ce63 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
ce65 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
ce65 : 18               [ 2] 	clc
ce66 : a900             [ 2] 	lda #lo(df_linbuff)
ce68 : 65be             [ 3] 	adc df_linoff
ce6a : aa               [ 2] 	tax
ce6b : a90a             [ 2] 	lda #hi(df_linbuff)
ce6d : 6900             [ 2] 	adc #0
ce6f : a000             [ 2] 	ldy #0				; any numeric format
ce71 : 207fc8           [ 6] 	jsr con_n_to_a
ce74 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
ce76 : a8               [ 2] 	tay
ce77 : 18               [ 2] 	clc
ce78 : 8a               [ 2] 	txa
ce79 : 65be             [ 3] 	adc df_linoff
ce7b : 85be             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
ce7d : 98               [ 2] 	tya
ce7e : c901             [ 2] 	cmp #NUM_DEC
ce80 : d004             [ 3] 	bne df_tk_num_hexbin
ce82 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
ce84 : d016             [ 3] 	bne df_tk_num_put
ce86 :                       df_tk_num_hexbin
ce86 : c902             [ 2] 	cmp #NUM_HEX
ce88 : d00a             [ 3] 	bne df_tk_num_bin
ce8a : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
ce8c : e005             [ 2] 	cpx #5				; If >4 chars then INT
ce8e : 900c             [ 3] 	bcc df_tk_num_put
ce90 : a90a             [ 2] 	lda #DFTK_INTHEX
ce92 : d008             [ 3] 	bne df_tk_num_put
ce94 :                       df_tk_num_bin
ce94 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
ce96 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
ce98 : 9002             [ 3] 	bcc df_tk_num_put
ce9a : a90b             [ 2] 	lda #DFTK_INTBIN
ce9c :                       df_tk_num_put
ce9c : 20d2cd           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
ce9f : a585             [ 3] 	lda num_a
cea1 : 20d2cd           [ 6] 	jsr df_tk_put_tok
cea4 : a586             [ 3] 	lda num_a+1
cea6 : 4cd2cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank1.s --------------------------------

                             ;* Tokenise a constant char
                             ;****************************************
cea9 :                       df_tk_char
                             	; skip the first quote
cea9 : 20c7cd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
ceac : a900             [ 2] 	lda #DFTK_CHR
ceae : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
ceb1 : 20c7cd           [ 6] 	jsr df_tk_get_buf
ceb4 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
ceb7 : a900             [ 2] 	lda #0
ceb9 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
cebc : 20c7cd           [ 6] 	jsr df_tk_get_buf
cebf : c927             [ 2] 	cmp #0x27
cec1 : d08e             [ 3] 	bne df_tk_char_err
cec3 : 18               [ 2] 	clc
cec4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
cec5 :                       df_tk_str
                             	; skip the first quote
cec5 : 20c7cd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cec8 : a910             [ 2] 	lda #DFTK_STRLIT
ceca : 20d2cd           [ 6] 	jsr df_tk_put_tok
cecd :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
cecd : 20c7cd           [ 6] 	jsr df_tk_get_buf
ced0 : c900             [ 2] 	cmp #0
ced2 : f011             [ 3] 	beq df_tk_str_err
ced4 : c922             [ 2] 	cmp #0x22
ced6 : f006             [ 3] 	beq df_tk_str_don
ced8 : 20d2cd           [ 6] 	jsr df_tk_put_tok
cedb : 4ccdce           [ 3] 	jmp df_tk_str_ch
cede :                       df_tk_str_don
                             	; zero terminated strings
cede : a900             [ 2] 	lda #0
cee0 : 4cd2cd           [ 3] 	jmp df_tk_put_tok
cee3 :                       df_tk_var_noarry
cee3 : 18               [ 2] 	clc
cee4 : 60               [ 6] 	rts
cee5 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
cee7 :                       df_tk_const
cee7 : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
ceea : 20c1cd           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
ceed : c92d             [ 2] 	cmp #'-'
ceef : f005             [ 3] 	beq df_tk_const_try_num
cef1 : 20e0cd           [ 6] 	jsr df_tk_isdigit
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank1.s --------------------------------

cef4 : 9003             [ 3] 	bcc df_tk_const_try_str
cef6 :                       df_tk_const_try_num
cef6 : 4c65ce           [ 3] 	jmp df_tk_num
cef9 :                       df_tk_const_try_str
                             	; check for double quote
cef9 : c922             [ 2] 	cmp #0x22
cefb : d003             [ 4] 	bne df_tk_const_try_char
cefd : 4cc5ce           [ 3] 	jmp df_tk_str
cf00 :                       df_tk_const_try_char
                             	; check for single apostrophe
cf00 : c927             [ 2] 	cmp #0x27
cf02 : d003             [ 3] 	bne df_tk_const_err
cf04 : 4ca9ce           [ 3] 	jmp df_tk_char
cf07 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
cf09 :                       df_tk_var
                             	; Find or create variable, address in X,A
cf09 : 205ccd           [ 6] 	jsr df_var_findcreate
cf0c : 9001             [ 3] 	bcc df_tk_var_cont
cf0e : 60               [ 6] 	rts
cf0f :                       df_tk_var_cont
                             	; Save X,A for later
cf0f : 48               [ 3] 	pha
cf10 : 8a               [ 2] 	txa
cf11 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf12 : a911             [ 2] 	lda #DFTK_VAR
cf14 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf17 : 68               [ 4] 	pla
cf18 : 20d2cd           [ 6] 	jsr df_tk_put_tok
cf1b : 68               [ 4] 	pla
cf1c : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
cf1f :                       df_tk_var_ck
                             	; check if array procesing needed
cf1f : a95b             [ 2] 	lda #'['
cf21 : 2053ce           [ 6] 	jsr df_tk_expect_tok
cf24 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
cf26 : 4cd0cf           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
cf29 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
cf29 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
cf2c : c926             [ 2] 	cmp #DFTK_VARPARM
cf2e : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
cf30 : 20c7cd           [ 6] 	jsr df_tk_get_buf
cf33 : 20d2cd           [ 6] 	jsr df_tk_put_tok
cf36 :                       df_tk_parm_skip_var
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank1.s --------------------------------

                             	; don't have a certain type of var
cf36 : a900             [ 2] 	lda #0
cf38 : 4c09cf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
cf3b :                       df_tk_localvar
                             	; Find or create variable, index in A
cf3b : 205ccd           [ 6] 	jsr df_var_findcreate
cf3e : 9001             [ 3] 	bcc df_tk_localvar_cont
cf40 : 60               [ 6] 	rts
cf41 :                       df_tk_localvar_cont
                             	; Save variable address for later
cf41 : 48               [ 3] 	pha
cf42 : 8a               [ 2] 	txa
cf43 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf44 : a911             [ 2] 	lda #DFTK_VAR
cf46 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
cf49 : 68               [ 4] 	pla
cf4a : 20d2cd           [ 6] 	jsr df_tk_put_tok
cf4d : 68               [ 4] 	pla
cf4e : 4cd2cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
cf51 :                       df_tk_arrvar
                             	; Like a local var at first
cf51 : 203bcf           [ 6] 	jsr df_tk_localvar
                             	; but must be array
cf54 : a95b             [ 2] 	lda #'['
cf56 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
cf59 : 4cd0cf           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
cf5c :                       df_tk_proc
cf5c : 85cd             [ 3] 	sta df_procmode
cf5e : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
cf61 : a940             [ 2] 	lda #DFVVT_PROC
cf63 : 205ccd           [ 6] 	jsr df_var_findcreate
cf66 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
cf68 : 86d0             [ 3] 	stx df_procptr
cf6a : 85d1             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
cf6c : a912             [ 2] 	lda #DFTK_PROC
cf6e : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf71 : a5d0             [ 3] 	lda df_procptr
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank1.s --------------------------------

cf73 : 20d2cd           [ 6] 	jsr df_tk_put_tok
cf76 : a5d1             [ 3] 	lda df_procptr+1
cf78 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
cf7b : a900             [ 2] 	lda #0
cf7d : 85ce             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
cf7f : a928             [ 2] 	lda #'('
cf81 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
cf84 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
cf87 : c929             [ 2] 	cmp #')'
cf89 : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
cf8b :                       df_tk_proc_parms
cf8b : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
cf8e : a5cd             [ 3] 	lda df_procmode
cf90 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
cf92 : 2029cf           [ 6] 	jsr df_tk_parm
cf95 : 4ca1cf           [ 3] 	jmp df_tk_proc_skip_call
cf98 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
cf98 : a5ce             [ 3] 	lda df_procargs	; procargs could be impacted ins
cf9a : 48               [ 3] 	pha
cf9b : 2050d0           [ 6] 	jsr df_tk_expression
cf9e : 68               [ 4] 	pla
cf9f : 85ce             [ 3] 	sta df_procargs
cfa1 :                       df_tk_proc_skip_call
cfa1 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
cfa3 : e6ce             [ 5] 	inc df_procargs
                             	; what is next non ws char
cfa5 : 2023ce           [ 6] 	jsr df_tk_skip_ws
cfa8 : c92c             [ 2] 	cmp #','
cfaa : f006             [ 3] 	beq df_tk_proc_comma
cfac : c929             [ 2] 	cmp #')'
cfae : d01d             [ 3] 	bne df_tk_proc_errp
cfb0 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
cfb2 :                       df_tk_proc_comma
cfb2 : 20c7cd           [ 6] 	jsr df_tk_get_buf
cfb5 : 20d2cd           [ 6] 	jsr df_tk_put_tok
cfb8 : 4c8bcf           [ 3] 	jmp df_tk_proc_parms
cfbb :                       df_tk_proc_noparm
                             	; consume the close bracket
cfbb : 20c7cd           [ 6] 	jsr df_tk_get_buf
cfbe : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
cfc1 : a6cd             [ 3] 	ldx df_procmode
cfc3 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
cfc5 : a004             [ 2] 	ldy #DFVVT_DIM2
cfc7 : a5ce             [ 3] 	lda df_procargs
cfc9 : 91d0             [ 5] 	sta (df_procptr),y
cfcb :                       df_tk_proc_skip_args
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank1.s --------------------------------

cfcb : 18               [ 2] 	clc
cfcc : 60               [ 6] 	rts
cfcd :                       df_tk_proc_errp
cfcd : 68               [ 4] 	pla
cfce :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
cfd0 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
cfd0 : 2050d0           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
cfd3 : a92c             [ 2] 	lda #','
cfd5 : 2053ce           [ 6] 	jsr df_tk_expect_tok
cfd8 : b003             [ 3] 	bcs df_tk_narry_end
cfda : 2050d0           [ 6] 	jsr df_tk_expression
cfdd :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
cfdd : a95d             [ 2] 	lda #']'
cfdf : 4c5ece           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
cfe2 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
cfe2 : 2050d0           [ 6] 	jsr df_tk_expression
cfe5 : a929             [ 2] 	lda #')'
cfe7 : 4c5ece           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
cfea :                       df_tk_nterm_proc
                             	; call mode
cfea : a901             [ 2] 	lda #1
cfec : 4c5ccf           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
cfef :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
cfef : 2023ce           [ 6] 	jsr df_tk_skip_ws
cff2 : c900             [ 2] 	cmp #0
cff4 : f004             [ 3] 	beq df_tk_nterm_done
cff6 : c93a             [ 2] 	cmp #':'
cff8 : d002             [ 3] 	bne df_tk_nterm_cont
cffa :                       df_tk_nterm_done
cffa :                       df_tk_nop_false
cffa : 38               [ 2] 	sec
cffb : 60               [ 6] 	rts
cffc :                       df_tk_nterm_cont
                             	; if open bracket then process it
cffc : c928             [ 2] 	cmp #'('
cffe : d009             [ 4] 	bne df_tk_nterm_tryfn
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank1.s --------------------------------

                             	; get the bracket and put in token buffer
d000 : 20c7cd           [ 6] 	jsr df_tk_get_buf
d003 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d006 : 4ce2cf           [ 3] 	jmp df_tk_nbrkt
d009 :                       df_tk_nterm_tryfn
d009 : 48               [ 3] 	pha
                             	; try decoding a built-in function
d00a : a902             [ 2] 	lda #DFTK_FN
d00c : 203cd1           [ 6] 	jsr df_tk_matchtok
d00f : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d011 : 68               [ 4] 	pla
d012 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d013 : 8a               [ 2] 	txa
d014 : 0980             [ 2] 	ora #0x80
d016 : 20d2cd           [ 6] 	jsr df_tk_put_tok
d019 : 200ed1           [ 6] 	jsr df_tk_exec_parser
d01c : b01b             [ 3] 	bcs df_tk_nterm_err
d01e : 60               [ 6] 	rts
d01f :                       df_tk_nterm_try_proc
d01f : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d020 : 201dce           [ 6] 	jsr df_tk_isproc
d023 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d025 : 20eacf           [ 6] 	jsr df_tk_nterm_proc
d028 : b00f             [ 3] 	bcs df_tk_nterm_err
d02a : 60               [ 6] 	rts
d02b :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d02b : a900             [ 2] 	lda #0
d02d : 2009cf           [ 6] 	jsr df_tk_var
d030 : b001             [ 3] 	bcs df_tk_nterm_try_const
d032 : 60               [ 6] 	rts
d033 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d033 : 20e7ce           [ 6] 	jsr df_tk_const
d036 : b001             [ 3] 	bcs df_tk_nterm_err
d038 : 60               [ 6] 	rts
d039 :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d03b :                       df_tk_nop
d03b : 2023ce           [ 6] 	jsr df_tk_skip_ws
d03e : c900             [ 2] 	cmp #0
d040 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d042 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d044 : 203cd1           [ 6] 	jsr df_tk_matchtok
d047 : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d049 : 0980             [ 2] 	ora #DFTK_TOKEN
d04b : 20d2cd           [ 6] 	jsr df_tk_put_tok
d04e : 18               [ 2] 	clc
d04f : 60               [ 6] 	rts
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d050 :                       df_tk_expression
                             	; Tokenise a numeric term
d050 : 20efcf           [ 6] 	jsr df_tk_nterm
d053 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d055 : 203bd0           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d058 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d05a :                       df_tk_not_eos
d05a : 18               [ 2] 	clc
d05b :                       df_tk_expre_err
d05b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d05c :                       df_tk_tok_expression
d05c : 205ece           [ 6] 	jsr df_tk_expect_tok_err
d05f : 4c50d0           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d062 :                       df_tk_isEOS
d062 : a93a             [ 2] 	lda #':'
d064 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d067 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d069 : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d06b : a4c1             [ 3] 	ldy df_nxtstidx
d06d : 99800a           [ 5] 	sta df_tokbuff,y
d070 : 38               [ 2] 	sec
d071 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d072 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d072 : a981             [ 2] 	lda #0x81
d074 : 20d2cd           [ 6] 	jsr df_tk_put_tok
d077 : a901             [ 2] 	lda #1
d079 : 4c5ccf           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d07c :                       df_tk_parse_command
                             	; only looking for keywords
d07c : a901             [ 2] 	lda #DFTK_KW
d07e : 203cd1           [ 6] 	jsr df_tk_matchtok
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank1.s --------------------------------

                             	; if didn't find regular keywords then try non f
d081 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d083 : 0980             [ 2] 	ora #0x80
d085 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d088 : a5c5             [ 3] 	lda df_symoff
d08a : 200ed1           [ 6] 	jsr df_tk_exec_parser
d08d : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d08f : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d092 :                       df_tk_parse_command_done
d092 : 18               [ 2] 	clc
d093 :                       df_tk_parse_command_err
d093 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d094 :                       df_lexer_line
d094 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d096 : 85be             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d098 : 85bf             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d09a : a980             [ 2] 	lda #lo(df_tokbuff)
d09c : 85c8             [ 3] 	sta df_currlin
d09e : a90a             [ 2] 	lda #hi(df_tokbuff)
d0a0 : 85c9             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d0a2 : a900             [ 2] 	lda #0
d0a4 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d0a7 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
d0aa : 20e0cd           [ 6] 	jsr df_tk_isdigit
d0ad : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d0af : 201dd1           [ 6] 	jsr df_tk_linenum
d0b2 : 4cbdd0           [ 3] 	jmp df_tk_body
d0b5 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d0b5 : a900             [ 2] 	lda #0
d0b7 : 20d2cd           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d0ba : 20d2cd           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d0bd :                       df_tk_body
                             	; Offset for next statement
d0bd : a5bf             [ 3] 	lda df_tokoff
d0bf : 85c1             [ 3] 	sta df_nxtstidx
d0c1 : a900             [ 2] 	lda #0
d0c3 : 20d2cd           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d0c6 : 20c1cd           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d0c9 : 203ece           [ 6] 	jsr df_tk_isws					; and first character
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank1.s --------------------------------

d0cc : 9002             [ 3] 	bcc df_tk_skip_1_spc
d0ce : e6be             [ 5] 	inc df_linoff					; Don't tokenise this single s
d0d0 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d0d0 : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d0d3 : c900             [ 2] 	cmp #0
d0d5 : f033             [ 4] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d0d7 : 201dce           [ 6] 	jsr df_tk_isproc
d0da : 9006             [ 3] 	bcc df_tk_try_command
d0dc : 2072d0           [ 6] 	jsr df_tk_parse_user_proc
d0df : 4cecd0           [ 3] 	jmp df_tk_done
d0e2 :                       df_tk_try_command
                             	; try  a keyword
d0e2 : 207cd0           [ 6] 	jsr df_tk_parse_command
                             ;	bcs	df_tk_try_assign
d0e5 : 9005             [ 3] 	bcc df_tk_done
d0e7 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d0e7 : 204bd5           [ 6] 	jsr df_tk_assign
d0ea : b020             [ 4] 	bcs	df_tk_parseerror
d0ec :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d0ec : 2062d0           [ 6] 	jsr df_tk_isEOS
d0ef : b0cc             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d0f1 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
d0f4 : c900             [ 2] 	cmp #0
d0f6 : d014             [ 4] 	bne df_tk_parseerror
                             	; this is the position of the next line
d0f8 : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d0fa : a4c1             [ 3] 	ldy df_nxtstidx
d0fc : 99800a           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d0ff : a4bf             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d101 : a900             [ 2] 	lda #0
d103 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d106 : 98               [ 2] 	tya
d107 : 8d800a           [ 4] 	sta df_tokbuff
d10a :                       df_tk_line_empty
d10a : 18               [ 2] 	clc
d10b : 60               [ 6] 	rts
d10c :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d10e :                       df_tk_exec_parser
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank1.s --------------------------------

d10e : 0a               [ 2] 	asl a
d10f : aa               [ 2] 	tax
d110 : bdc2d3           [ 4] 	lda df_tk_tokenjmp,x
d113 : 85e3             [ 3] 	sta df_tmpptra
d115 : bdc3d3           [ 4] 	lda df_tk_tokenjmp+1,x
d118 : 85e4             [ 3] 	sta df_tmpptra+1
d11a : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d11d :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d11d : 18               [ 2] 	clc
d11e : a900             [ 2] 	lda #lo(df_linbuff)
d120 : 65be             [ 3] 	adc df_linoff
d122 : aa               [ 2] 	tax
d123 : a90a             [ 2] 	lda #hi(df_linbuff)
d125 : 6900             [ 2] 	adc #0
d127 : a001             [ 2] 	ldy #1			; Decimal format only
d129 : 207fc8           [ 6] 	jsr con_n_to_a
d12c : 18               [ 2] 	clc
d12d : 8a               [ 2] 	txa
d12e : 65be             [ 3] 	adc df_linoff
d130 : 85be             [ 3] 	sta df_linoff
                             	; Now save line number
d132 : a585             [ 3] 	lda num_a
d134 : 20d2cd           [ 6] 	jsr df_tk_put_tok
d137 : a586             [ 3] 	lda num_a+1
d139 : 4cd2cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d13c :                       df_tk_matchtok
                             	; save the mask to check types against
d13c : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d13d : a9be             [ 2] 	lda #lo(df_tokensyms)
d13f : 85c3             [ 3] 	sta df_symtab
d141 : a9d1             [ 2] 	lda #hi(df_tokensyms)
d143 : 85c4             [ 3] 	sta df_symtab+1
d145 : a900             [ 2] 	lda #0
d147 : 85c5             [ 3] 	sta df_symoff
d149 :                       df_tk_checknexttok
                             	; check this token type first
d149 : 68               [ 4] 	pla
d14a : 48               [ 3] 	pha
d14b : a6c5             [ 3] 	ldx df_symoff
d14d : 3dacd4           [ 4] 	and df_tk_tokentype,x
d150 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank1.s --------------------------------

                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
d152 : bdacd4           [ 4] 	lda df_tk_tokentype,x
d155 : 2908             [ 2] 	and #DFTK_OP
d157 : f009             [ 3] 	beq df_tk_matchtok_skip_op
d159 : 68               [ 4] 	pla
d15a : 48               [ 3] 	pha
d15b : 2908             [ 2] 	and #DFTK_OP
d15d : 3dacd4           [ 4] 	and df_tk_tokentype,x
d160 : f022             [ 3] 	beq df_tk_symnomatch
d162 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
d162 : a4be             [ 3] 	ldy df_linoff
d164 : a200             [ 2] 	ldx #0
d166 :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
d166 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
d168 : 48               [ 3] 	pha
d169 : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
d16b : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
d16e : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
d170 : 68               [ 4] 	pla
d171 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
d179 : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
d17a : b9000a           [ 4] 	lda df_linbuff,y
d17d : c92e             [ 2] 	cmp #'.'
d17f : f025             [ 3] 	beq df_tk_symfound
d181 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
d183 :                       df_tk_symnomatchp
d183 : 68               [ 4] 	pla
d184 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
d184 : e6c5             [ 5] 	inc df_symoff
d186 :                       df_tk_symnextentry
d186 : a200             [ 2] 	ldx #0
d188 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
d18a : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
d192 : 4c86d1           [ 3] 	jmp df_tk_symnextentry
d195 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank1.s --------------------------------

d19b : a1c3             [ 6] 	lda (df_symtab,x)
d19d : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
d19f : 68               [ 4] 	pla
                             	; Zero symbol counter
d1a0 : a900             [ 2] 	lda #0
d1a2 : 85c5             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
d1a4 : 38               [ 2] 	sec
d1a5 : 60               [ 6] 	rts
d1a6 :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
d1a6 : c8               [ 2] 	iny
                             	; First mask off MSB
d1a7 : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
d1a9 : 200ace           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
d1ac : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
d1ae : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
d1b1 : 2017ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
d1b4 : b0ce             [ 3] 	bcs df_tk_symnomatch
d1b6 :                       df_tk_symfound_final
                             	; pop mask off stack
d1b6 : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
d1b7 : 84be             [ 3] 	sty df_linoff
d1b9 : a5c5             [ 3] 	lda df_symoff
d1bb : aa               [ 2] 	tax
d1bc : 18               [ 2] 	clc
d1bd : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank1.s --------------------------------

                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
d1be :                       df_tokensyms
d1be : 80                    	db	0x80						; Implicit numeric assign
d1bf : 80                    	db	0x80						; Implicit call procedure
d1c0 : bb                    	db	";"+0x80					; Comment
d1c1 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
d1c8 : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
d1cf : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
d1d4 : 6465e6                	db	"de",'f'+0x80				; def_subname
d1d7 : 656e646465e6          	db	"endde",'f'+0x80			; enddef
d1dd : 7265747572ee          	db	"retur",'n'+0x80			; return
d1e3 : 61626f72f4            	db	"abor",'t'+0x80				; abort
d1e8 : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
d1ed : 6469ed                	db	"di",'m'+0x80				; dim varlist
d1f0 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
d1f6 : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
d1fb : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
d1fe : 6e6578f4              	db	"nex",'t'+0x80				; next
d202 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
d207 : 77656ee4              	db	"wen",'d'+0x80				; wend
d20b : 69e6                  	db	"i",'f'+0x80				; if condition
d20d : 656c73e5              	db	"els",'e'+0x80				; else
d211 : 656e6469e6            	db	"endi",'f'+0x80				; endif
d216 : 656c69e6              	db	"eli",'f'+0x80				; elif condition
d21a : 646174e1              	db	"dat",'a'+0x80				; data
d21e : ae                    	db	'.'+0x80					; assembler command
d21f : 7275ee                	db	"ru",'n'+0x80				; run
d222 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
d226 : 696e7075f4            	db	"inpu",'t'+0x80				; input var
d22b : 6d6f64e5              	db	"mod",'e'+0x80				; mode n
d22f : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
d233 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
d239 : 636cf3                	db	"cl",'s'+0x80				; cls
d23c : 76706f6be5            	db	"vpok",'e'+0x80				; vpoke addr,val
d241 : 7365747664f0          	db	"setvd",'p'+0x80			; setvdp reg,val
d247 : 636f6c6f75f2          	db	"colou",'r'+0x80			; colour reg,val
d24d : 73707269746570..      	db	"spritepa",'t'+0x80			; spritepat patnum,arra
d256 : 73707269746570..      	db	"spritepo",'s'+0x80			; spritepos sprnum,x,y
d25f : 73707269746563..      	db	"spriteco",'l'+0x80			; spritecol sprnum,col
d268 : 7370726974656e..      	db	"spritenm",'e'+0x80			; spritenme sprnum,patn
d271 : 7370726974e5          	db	"sprit",'e'+0x80			; sprite n,x,y,p,c
d277 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
d27b : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
d27f : 736f756ee4            	db	"soun",'d'+0x80				; sound
d284 : 6d757369e3            	db	"musi",'c'+0x80				; music
d289 : 706c61f9              	db	"pla",'y'+0x80				; play
d28d : 736176e5              	db	"sav",'e'+0x80				; save
d291 : 6c6f61e4              	db	"loa",'d'+0x80				; load
d295 : 6469f2                	db	"di",'r'+0x80				; dir (compact listing)
d298 : 646972ec              	db	"dir",'l'+0x80				; dirl (long listing)
d29c : 6465ec                	db 	"de",'l'+0x80				; del
d29f : 726561e4              	db	"rea",'d'+0x80				; read
d2a3 : 6e65f7                	db	"ne",'w'+0x80				; new
d2a6 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank1.s --------------------------------

d2ab : 776169f4              	db	"wai",'t'+0x80				; wait delay
d2af : 72657365f4            	db	"rese",'t'+0x80				; reset var
d2b4 : 68697265f3            	db	"hire",'s'+0x80				; hires col
d2b9 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y,mode
d2be : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
d2c2 : 68706c6ff4            	db	"hplo",'t'+0x80				; hplot x,y,char|string
d2c7 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
d2ce : 7069786d6173eb        	db	"pixmas",'k'+0x80			; pixmask n
d2d5 : 706978636fec          	db	"pixco",'l'+0x80			; pixcol n
d2db : 626ff8                	db	"bo",'x'+0x80				; box x0,y0,x1,y1
d2de : 636972636ce5          	db	"circl",'e'+0x80			; circle x0,y0,r
d2e4 : 73686170e5            	db	"shap",'e'+0x80				; shape x,y,coords[]
d2e9 : 766c6f61e4            	db	"vloa",'d'+0x80				; vload addr,filename
d2ee : 626c6f61e4            	db	"bloa",'d'+0x80				; bload mem,hrd,addr,filen
d2f3 : 62736176e5            	db	"bsav",'e'+0x80				; bsave mem,hdr,addr,len,f
d2f8 : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
d2fd : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
d304 : 63686469f2            	db	"chdi",'r'+0x80				; chdir fname
d309 : 6d6b6469f2            	db	"mkdi",'r'+0x80				; mkdir fname
d30e : 6461746574696de5      	db	"datetim",'e'+0x80			; datetime string output
d316 : 6e76706f6be5          	db	"nvpok",'e'+0x80			; NV poke addr,val
d31c : 666f6ef4              	db	"fon",'t'+0x80				; font <font file>
d320 : 6465766963e5          	db	"devic",'e'+0x80			; device <devnum>
d326 : 66636c6f73e5          	db	"fclos",'e'+0x80			; fclose
                             ; Functions
d32c : 767065656ba8          	db	"vpeek",'('+0x80			; vpeek(x)
d332 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
d337 : 6465656ba8            	db	"deek",'('+0x80				; deek(x)
d33c : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
d342 : 6b6579a8              	db	"key",'('+0x80				; key(x)
d346 : 636872a8              	db	"chr",'('+0x80				; chr(x)
d34a : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
d34f : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
d355 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
d359 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
d35d : 6d656da8              	db	"mem",'('+0x80				; mem(x)
d361 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
d366 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
d36a : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
d372 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
d377 : 686578a8              	db	"hex",'('+0x80				; hex(x)
d37b : 646563a8              	db	"dec","("+0x80				; dec(x)
d37f : 617363a8              	db	"asc",'('+0x80				; asc(x$)
d383 : 76616ca8              	db	"val",'('+0x80				; val(x$)
d387 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
d38d : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
d391 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
d396 : 6e767065656ba8        	db  "nvpeek",'('+0x80			; nvpeek(addr)
d39d : 66637265617465a8      	db	"fcreate",'('+0x80			; success=fcreate(filena
d3a5 : 666f70656ea8          	db	"fopen",'('+0x80			; success=fopen(filename)
                             ; Numeric operators, in priority
d3ab : aa                    	db	'*'+0x80					; Multiply
d3ac : af                    	db 	'/'+0x80					; Divide
d3ad : dc                    	db 	'\\'+0x80					; Modulus
d3ae : 3cbc                  	db	'<','<'+0x80				; Shift left
d3b0 : 3ebe                  	db	'>','>'+0x80				; Shift right
d3b2 : ab                    	db 	'+'+0x80					; Add
d3b3 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
d3b4 : a6                    	db '&'+0x80						; AND
d3b5 : fc                    	db '|'+0x80						; OR
d3b6 : de                    	db '^'+0x80						; EOR
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank1.s --------------------------------

d3b7 : 3cbd                  	db "<",'='+0x80					; Less than or equal
d3b9 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
d3bb : 3cbe                  	db "<",'>'+0x80					; Not equal
d3bd : bc                    	db '<'+0x80						; Less than
d3be : be                    	db '>'+0x80						; Greater than
d3bf : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
d3c1 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
d3c2 :                       df_tk_tokenjmp
d3c2 : 4bd5                  	dw	df_tk_assign
d3c4 : 20d6                  	dw	df_tk_callproc
d3c6 : 53d5                  	dw	df_tk_comment
d3c8 : b0d5                  	dw	df_tk_println
d3ca : a4d5                  	dw	df_tk_printat
d3cc : b0d5                  	dw	df_tk_print
d3ce : f8d5                  	dw	df_tk_def
d3d0 : 60d6                  	dw	df_tk_enddef
d3d2 : 62d6                  	dw	df_tk_return
d3d4 : 60d6                  	dw	df_tk_abort
d3d6 : e6d5                  	dw	df_tk_local
d3d8 : d7d5                  	dw	df_tk_dim
d3da : 60d6                  	dw	df_tk_repeat
d3dc : 65d6                  	dw	df_tk_until
d3de : fed5                  	dw	df_tk_for
d3e0 : 60d6                  	dw	df_tk_next
d3e2 : 65d6                  	dw	df_tk_while
d3e4 : 60d6                  	dw	df_tk_wend
d3e6 : 65d6                  	dw	df_tk_if
d3e8 : 60d6                  	dw	df_tk_else
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank1.s --------------------------------

d3ea : 60d6                  	dw	df_tk_endif
d3ec : 65d6                  	dw	df_tk_elseif
d3ee : b0d5                  	dw	df_tk_data
d3f0 : 8ff3                  	dw	df_tk_asm_parse_command
d3f2 : 60d6                  	dw	df_tk_run
d3f4 : 82d5                  	dw	df_tk_list
d3f6 : bed5                  	dw	df_tk_input
d3f8 : 65d6                  	dw	df_tk_mode
d3fa : 75d6                  	dw	df_tk_plot
d3fc : 65d6                  	dw	df_tk_cursor
d3fe : 60d6                  	dw	df_tk_cls
d400 : 69d6                  	dw	df_tk_vpoke
d402 : 69d6                  	dw	df_tk_setvdp
d404 : 75d6                  	dw	df_tk_colour
d406 : 69d6                  	dw	df_tk_spritepat
d408 : 75d6                  	dw	df_tk_spritepos
d40a : 69d6                  	dw	df_tk_spritecol
d40c : 69d6                  	dw	df_tk_spritenme
d40e : 8dd6                  	dw	df_tk_sprite
d410 : 69d6                  	dw	df_tk_poke
d412 : 69d6                  	dw	df_tk_doke
d414 : 75d6                  	dw	df_tk_sound
d416 : 81d6                  	dw	df_tk_music
d418 : 81d6                  	dw	df_tk_play
d41a : 65d6                  	dw	df_tk_save
d41c : 65d6                  	dw	df_tk_load
d41e : 60d6                  	dw	df_tk_dir
d420 : 60d6                  	dw	df_tk_dirl
d422 : 65d6                  	dw	df_tk_del
d424 : c8d5                  	dw	df_tk_read
d426 : 60d6                  	dw	df_tk_new
d428 : 75d6                  	dw	df_tk_renum
d42a : 65d6                  	dw	df_tk_wait
d42c : 22d6                  	dw	df_tk_reset
d42e : 65d6                  	dw	df_tk_hires
d430 : 69d6                  	dw	df_tk_point
d432 : 81d6                  	dw	df_tk_line
d434 : 75d6                  	dw	df_tk_hplot
d436 : 65d6                  	dw	df_tk_pixmode
d438 : 65d6                  	dw	df_tk_pixmask
d43a : 65d6                  	dw	df_tk_pixcol
d43c : 81d6                  	dw	df_tk_box
d43e : 75d6                  	dw	df_tk_circle
d440 : 75d6                  	dw	df_tk_shape
d442 : 69d6                  	dw	df_tk_vload
d444 : 81d6                  	dw	df_tk_bload
d446 : 8dd6                  	dw	df_tk_bsave
d448 : 65d6                  	dw	df_tk_himem
d44a : 60d6                  	dw	df_tk_monitor
d44c : 65d6                  	dw	df_tk_chdir
d44e : 65d6                  	dw	df_tk_mkdir
d450 : 2bd6                  	dw	df_tk_datetime
d452 : 69d6                  	dw	df_tk_nvpoke
d454 : 65d6                  	dw	df_tk_font
d456 : 65d6                  	dw	df_tk_device
d458 : 60d6                  	dw	df_tk_fclose
                             
d45a : 34d6                  	dw	df_tk_vpeek
d45c : 34d6                  	dw	df_tk_peek
d45e : 34d6                  	dw	df_tk_deek
d460 : 34d6                  	dw	df_tk_stick
d462 : 34d6                  	dw	df_tk_key
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank1.s --------------------------------

d464 : 34d6                  	dw	df_tk_chr
d466 : 46d6                  	dw	df_tk_left
d468 : 46d6                  	dw	df_tk_right
d46a : 4cd6                  	dw	df_tk_mid
d46c : 34d6                  	dw	df_tk_len
d46e : 34d6                  	dw	df_tk_mem
d470 : 46d6                  	dw	df_tk_scrn
d472 : 34d6                  	dw	df_tk_rnd
d474 : 3dd6                  	dw	df_tk_elapsed
d476 : 52d6                  	dw	df_tk_call
d478 : 34d6                  	dw	df_tk_hex
d47a : 34d6                  	dw	df_tk_dec
d47c : 34d6                  	dw	df_tk_asc
d47e : 34d6                  	dw	df_tk_val
d480 : 46d6                  	dw	df_tk_pixel
d482 : 34d6                  	dw	df_tk_sgn
d484 : 3dd6                  	dw	df_tk_addr
d486 : 34d6                  	dw	df_tk_nvpeek
d488 : 34d6                  	dw	df_tk_fcreate
d48a : 34d6                  	dw	df_tk_fopen
                             	
d48c : 60d6                  	dw	df_tk_mult
d48e : 60d6                  	dw	df_tk_div
d490 : 60d6                  	dw	df_tk_mod
d492 : 60d6                  	dw	df_tk_asl
d494 : 60d6                  	dw	df_tk_lsr
d496 : 60d6                  	dw	df_tk_add
d498 : 60d6                  	dw	df_tk_sub
                             	
d49a : 60d6                  	dw	df_tk_and
d49c : 60d6                  	dw	df_tk_or
d49e : 60d6                  	dw	df_tk_eor
d4a0 : 60d6                  	dw	df_tk_lte
d4a2 : 60d6                  	dw	df_tk_gte
d4a4 : 60d6                  	dw	df_tk_ne
d4a6 : 60d6                  	dw	df_tk_lt
d4a8 : 60d6                  	dw	df_tk_gt
d4aa : 60d6                  	dw	df_tk_eq
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank1.s --------------------------------

                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
d4ac :                       df_tk_tokentype
d4ac : 01                    	db	DFTK_KW
d4ad : 01                    	db	DFTK_KW
d4ae : 01                    	db	DFTK_KW
d4af : 01                    	db	DFTK_KW
d4b0 : 01                    	db	DFTK_KW
d4b1 : 01                    	db	DFTK_KW
d4b2 : 01                    	db	DFTK_KW
d4b3 : 01                    	db	DFTK_KW
d4b4 : 01                    	db	DFTK_KW
d4b5 : 01                    	db	DFTK_KW
d4b6 : 01                    	db	DFTK_KW
d4b7 : 01                    	db	DFTK_KW
d4b8 : 01                    	db	DFTK_KW
d4b9 : 01                    	db	DFTK_KW
d4ba : 01                    	db	DFTK_KW
d4bb : 01                    	db	DFTK_KW
d4bc : 01                    	db	DFTK_KW
d4bd : 01                    	db	DFTK_KW
d4be : 01                    	db	DFTK_KW
d4bf : 01                    	db	DFTK_KW
d4c0 : 01                    	db	DFTK_KW
d4c1 : 01                    	db	DFTK_KW
d4c2 : 01                    	db	DFTK_KW
d4c3 : 01                    	db	DFTK_KW
d4c4 : 01                    	db	DFTK_KW
d4c5 : 01                    	db	DFTK_KW
d4c6 : 01                    	db	DFTK_KW
d4c7 : 01                    	db	DFTK_KW
d4c8 : 01                    	db	DFTK_KW
d4c9 : 01                    	db	DFTK_KW
d4ca : 01                    	db	DFTK_KW
d4cb : 01                    	db	DFTK_KW
d4cc : 01                    	db	DFTK_KW
d4cd : 01                    	db	DFTK_KW
d4ce : 01                    	db	DFTK_KW
d4cf : 01                    	db	DFTK_KW
d4d0 : 01                    	db	DFTK_KW
d4d1 : 01                    	db	DFTK_KW
d4d2 : 01                    	db	DFTK_KW
d4d3 : 01                    	db	DFTK_KW
d4d4 : 01                    	db	DFTK_KW
d4d5 : 01                    	db	DFTK_KW
d4d6 : 01                    	db	DFTK_KW
d4d7 : 01                    	db	DFTK_KW
d4d8 : 01                    	db	DFTK_KW
d4d9 : 01                    	db	DFTK_KW
d4da : 01                    	db	DFTK_KW
d4db : 01                    	db	DFTK_KW
d4dc : 01                    	db	DFTK_KW
d4dd : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank1.s --------------------------------

d4de : 01                    	db	DFTK_KW
d4df : 01                    	db	DFTK_KW
d4e0 : 01                    	db	DFTK_KW
d4e1 : 01                    	db	DFTK_KW
d4e2 : 01                    	db	DFTK_KW
d4e3 : 01                    	db	DFTK_KW
d4e4 : 01                    	db	DFTK_KW
d4e5 : 01                    	db	DFTK_KW
d4e6 : 01                    	db	DFTK_KW
d4e7 : 01                    	db	DFTK_KW
d4e8 : 01                    	db	DFTK_KW
d4e9 : 01                    	db	DFTK_KW
d4ea : 01                    	db	DFTK_KW
d4eb : 01                    	db	DFTK_KW
d4ec : 01                    	db	DFTK_KW
d4ed : 01                    	db	DFTK_KW
d4ee : 01                    	db	DFTK_KW
d4ef : 01                    	db	DFTK_KW
d4f0 : 01                    	db	DFTK_KW
d4f1 : 01                    	db	DFTK_KW
d4f2 : 01                    	db	DFTK_KW
d4f3 : 01                    	db	DFTK_KW
d4f4 : 01                    	db	DFTK_KW
d4f5 : 01                    	db	DFTK_KW
d4f6 : 01                    	db	DFTK_KW
d4f7 : 01                    	db	DFTK_KW
                             
d4f8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4f9 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fa : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fc : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d4fd : 42                    	db 	DFTK_FN | DFTK_STR
d4fe : 42                    	db 	DFTK_FN | DFTK_STR
d4ff : 42                    	db 	DFTK_FN | DFTK_STR
d500 : 42                    	db 	DFTK_FN | DFTK_STR
d501 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d502 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d503 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d504 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d505 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d506 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d507 : 42                    	db 	DFTK_FN | DFTK_STR
d508 : 42                    	db 	DFTK_FN | DFTK_STR
d509 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d50a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d50b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d50c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d50d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d50e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d50f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d510 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
d511 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d512 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d513 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d514 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d515 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d516 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
d517 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
d518 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank1.s --------------------------------

d519 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d51a : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d51b : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d51c : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d51d : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d51e : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d51f : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d520 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-1 HOMEBREW COMPUTER
                             ;*	Hardware and software design by Dolo Miah
                             ;*	Copyright 2014-18
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;* General routine to tokenise a mandatory variab
d521 :                       df_tk_variable
d521 : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d524 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
d527 : 200ace           [ 6] 	jsr df_tk_isalpha
d52a : 901d             [ 3] 	bcc df_tk_error
d52c : a900             [ 2] 	lda #0
d52e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
d52f :                       df_tk_preassign
                             	; Put assignment token
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank1.s --------------------------------

                             	; assume its a numeric int for now
d52f : a980             [ 2] 	lda #0x80
d531 : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
d534 : 2021d5           [ 6] 	jsr df_tk_variable
d537 : 2009cf           [ 6] 	jsr df_tk_var
                             	; next char sound be =
d53a : a93d             [ 2] 	lda #'='
d53c : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             	; skip more ws
d53f : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; should not be at end of line
d542 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
d545 : f002             [ 3] 	beq df_tk_parse_ass_err
d547 : 18               [ 2] 	clc
d548 : 60               [ 6] 	rts
d549 :                       df_tk_parse_ass_err
d549 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
d54b :                       df_tk_assign
d54b : 202fd5           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
d54e : 2050d0           [ 6] 	jsr df_tk_expression
d551 : 18               [ 2] 	clc
d552 : 60               [ 6] 	rts
                             
                             
d553 :                       df_tk_comment
                             	; copy all subsequent chars to token
d553 : 20c7cd           [ 6] 	jsr df_tk_get_buf
d556 : f005             [ 3] 	beq df_tk_comment_done
d558 : 20d2cd           [ 6] 	jsr df_tk_put_tok
d55b : 80f6             [ 3] 	bra df_tk_comment
d55d :                       df_tk_comment_done
d55d : 18               [ 2] 	clc
d55e : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
d55f :                       df_tk_listp_procname
                             	; try and find the first proc
d55f : a95f             [ 2] 	lda #'_'
d561 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d564 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
d566 : 20c1cd           [ 6] 	jsr df_tk_peek_buf
d569 : 200ace           [ 6] 	jsr df_tk_isalpha
d56c : 9012             [ 3] 	bcc df_tk_listp_procname_err
d56e :                       df_tk_listp_procname_ch
d56e : 20c1cd           [ 6] 	jsr df_tk_peek_buf
d571 : 2017ce           [ 6] 	jsr df_tk_isalphanum
d574 : 9008             [ 3] 	bcc df_tk_listp_procname_ok
d576 : 20c7cd           [ 6] 	jsr df_tk_get_buf
d579 : 20d2cd           [ 6] 	jsr df_tk_put_tok
d57c : 80f0             [ 3] 	bra df_tk_listp_procname_ch
d57e :                       df_tk_listp_procname_ok
d57e : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank1.s --------------------------------

d57f : 60               [ 6] 	rts
d580 :                       df_tk_listp_procname_err
d580 : 38               [ 2] 	sec
d581 : 60               [ 6] 	rts
                             
d582 :                       df_tk_list
d582 : 205fd5           [ 6] 	jsr df_tk_listp_procname
                             	; if not found try '*' or normal list
d585 : b007             [ 3] 	bcs df_tk_list_procs
                             	; the '-' allows to list to end
d587 : a92d             [ 2] 	lda #'-'
                             	; find and add if it exists
d589 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d58c : 8014             [ 3] 	bra df_tk_list_done
                             	; '*' means list procs
d58e :                       df_tk_list_procs
                             	; try and find the first proc
d58e : a92a             [ 2] 	lda #'*'
d590 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d593 : 900d             [ 3] 	bcc df_tk_list_done
                             	; else normal line number
d595 :                       df_tk_list_line
                             	; tokenise an expression
d595 : 2050d0           [ 6] 	jsr df_tk_expression
                             	; if not at the end then keep going
d598 : a92c             [ 2] 	lda #','
d59a : 2053ce           [ 6] 	jsr df_tk_expect_tok
d59d : b003             [ 3] 	bcs df_tk_list_done
                             	; else get the next expression
d59f : 2050d0           [ 6] 	jsr df_tk_expression	
d5a2 :                       df_tk_list_done
d5a2 : 18               [ 2] 	clc
d5a3 : 60               [ 6] 	rts
                             
d5a4 :                       df_tk_printat
                             	; Must get 2 parms for x,y
d5a4 : 2069d6           [ 6] 	jsr df_tk_2parms
                             	; if not at the end then keep going
d5a7 : a92c             [ 2] 	lda #','
d5a9 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d5ac : 9002             [ 3] 	bcc df_tk_print
                             	; else done
d5ae : 18               [ 2] 	clc
d5af : 60               [ 6] 	rts
d5b0 :                       df_tk_data
d5b0 :                       df_tk_println
d5b0 :                       df_tk_print
d5b0 :                       df_tk_asm_db
d5b0 :                       df_tk_asm_dw
                             	; tokenise an expression
d5b0 : 2050d0           [ 6] 	jsr df_tk_expression
                             	; is there more to come?
d5b3 : a92c             [ 2] 	lda #','
d5b5 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d5b8 : b002             [ 3] 	bcs df_tk_print_done
d5ba : 80f4             [ 3] 	bra df_tk_print
d5bc :                       df_tk_print_done
d5bc : 18               [ 2] 	clc
d5bd : 60               [ 6] 	rts
                             
d5be :                       df_tk_input
d5be : 2023ce           [ 6] 	jsr df_tk_skip_ws
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank1.s --------------------------------

                             	; tokenise a variable
d5c1 : 2021d5           [ 6] 	jsr df_tk_variable
d5c4 : 2009cf           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
d5c7 : 60               [ 6] 	rts
                             	
d5c8 :                       df_tk_read
                             	; tokenise a variable
d5c8 : 2021d5           [ 6] 	jsr df_tk_variable
d5cb : 2009cf           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
d5ce : a92c             [ 2] 	lda #','
d5d0 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d5d3 : 90f3             [ 3] 	bcc df_tk_read
d5d5 : 18               [ 2] 	clc
d5d6 : 60               [ 6] 	rts
                             
d5d7 :                       df_tk_dim
                             	; tokenise a variable
d5d7 : 2021d5           [ 6] 	jsr df_tk_variable
d5da : 2051cf           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
d5dd : a92c             [ 2] 	lda #','
d5df : 2053ce           [ 6] 	jsr df_tk_expect_tok
d5e2 : 90f3             [ 3] 	bcc df_tk_dim
d5e4 : 18               [ 2] 	clc
d5e5 : 60               [ 6] 	rts
                             
d5e6 :                       df_tk_local
d5e6 : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d5e9 : 2021d5           [ 6] 	jsr df_tk_variable
d5ec : 203bcf           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
d5ef : a92c             [ 2] 	lda #','
d5f1 : 2053ce           [ 6] 	jsr df_tk_expect_tok
d5f4 : 90f0             [ 3] 	bcc df_tk_local
d5f6 : 18               [ 2] 	clc
d5f7 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
d5f8 :                       df_tk_def
d5f8 : a900             [ 2] 	lda #0
d5fa : 205ccf           [ 6] 	jsr df_tk_proc
d5fd : 60               [ 6] 	rts
                             
                             
                             ; syntax : for %a=1,10,1
d5fe :                       df_tk_for
d5fe : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
d601 : a901             [ 2] 	lda #DFVVT_INT
d603 : 2009cf           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
d606 : a93d             [ 2] 	lda #'='
d608 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; starting value
d60b : 2050d0           [ 6] 	jsr df_tk_expression
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank1.s --------------------------------

                             	
                             	; always expect ',' separator
d60e : a92c             [ 2] 	lda #','
d610 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; ending value
d613 : 2050d0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d616 : a92c             [ 2] 	lda #','
d618 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             	
                             	; step value
d61b : 2050d0           [ 6] 	jsr df_tk_expression
d61e :                       df_tk_for_done
d61e : 18               [ 2] 	clc
d61f : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
d620 :                       df_tk_callproc
d620 : 38               [ 2] 	sec
d621 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
d622 :                       df_tk_reset
d622 : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d625 : a901             [ 2] 	lda #DFVVT_INT
d627 : 2009cf           [ 6] 	jsr df_tk_var
d62a : 60               [ 6] 	rts
                             
                             ; date time expects a string variable only
d62b :                       df_tk_datetime
d62b : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d62e : a904             [ 2] 	lda #DFVVT_STR
d630 : 2009cf           [ 6] 	jsr df_tk_var
d633 : 60               [ 6] 	rts
                             
                             ; These functions expect 1 parmeter
d634 :                       df_tk_len
d634 :                       df_tk_chr
d634 :                       df_tk_key
d634 :                       df_tk_stick
d634 :                       df_tk_deek
d634 :                       df_tk_vpeek
d634 :                       df_tk_peek
d634 :                       df_tk_nvpeek
d634 :                       df_tk_mem
d634 :                       df_tk_rnd
d634 :                       df_tk_hex
d634 :                       df_tk_dec
d634 :                       df_tk_asc
d634 :                       df_tk_val
d634 :                       df_tk_sgn
d634 :                       df_tk_fcreate
d634 :                       df_tk_fopen
d634 : 2050d0           [ 6] 	jsr df_tk_expression
d637 :                       df_tk_closebrkt
d637 : a929             [ 2] 	lda #')'
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank1.s --------------------------------

d639 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
d63c : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
d63d :                       df_tk_addr
d63d :                       df_tk_elapsed
d63d : 2021d5           [ 6] 	jsr df_tk_variable
d640 : 2009cf           [ 6] 	jsr df_tk_var
                             	; must have close braket
d643 : 4c37d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
d646 :                       df_tk_left
d646 :                       df_tk_right
d646 :                       df_tk_scrn
d646 :                       df_tk_pixel
d646 : 2069d6           [ 6] 	jsr df_tk_2parms
d649 : 4c37d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
d64c :                       df_tk_mid
d64c : 2075d6           [ 6] 	jsr df_tk_3parms
d64f : 4c37d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
d652 :                       df_tk_call
d652 : 2069d6           [ 6] 	jsr df_tk_2parms
d655 : a92c             [ 2] 	lda #','
d657 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
d65a : 2069d6           [ 6] 	jsr df_tk_2parms
d65d : 4c37d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
d660 :                       df_tk_else
d660 :                       df_tk_endif
d660 :                       df_tk_enddef
d660 :                       df_tk_abort
d660 :                       df_tk_repeat
d660 :                       df_tk_next
d660 :                       df_tk_wend
d660 :                       df_tk_run
d660 :                       df_tk_add
d660 :                       df_tk_sadd
d660 :                       df_tk_dir
d660 :                       df_tk_dirl
d660 :                       df_tk_cls
d660 :                       df_tk_new
d660 :                       df_tk_mult
d660 :                       df_tk_div
d660 :                       df_tk_mod
d660 :                       df_tk_asl
d660 :                       df_tk_lsr
d660 :                       df_tk_sub
d660 :                       df_tk_and
d660 :                       df_tk_or
d660 :                       df_tk_eor
d660 :                       df_tk_lte
d660 :                       df_tk_lt
d660 :                       df_tk_gte
d660 :                       df_tk_gt
d660 :                       df_tk_ne
d660 :                       df_tk_eq
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank1.s --------------------------------

d660 :                       df_tk_monitor
d660 :                       df_tk_fclose
                             ;df_tk_retsub
d660 : 18               [ 2] 	clc
d661 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
d662 :                       df_tk_return
d662 : 4c50d0           [ 3] 	jmp df_tk_expression
                             
                             ; These commands expect 1 parameter	
d665 :                       df_tk_while
d665 :                       df_tk_until
d665 :                       df_tk_if
d665 :                       df_tk_elseif
d665 :                       df_tk_wait
d665 :                       df_tk_cursor
d665 :                       df_tk_mode
d665 :                       df_tk_del
d665 :                       df_tk_chdir
d665 :                       df_tk_mkdir
d665 :                       df_tk_hires
d665 :                       df_tk_load
d665 :                       df_tk_save
d665 :                       df_tk_pixmode
d665 :                       df_tk_pixmask
d665 :                       df_tk_pixcol
d665 :                       df_tk_himem
d665 :                       df_tk_font
d665 :                       df_tk_device
                             ;df_tk_goto
                             ;df_tk_gosub
                             
d665 :                       df_tk_asm_org
d665 :                       df_tk_asm_opt
d665 :                       df_tk_asm_ds
                             
                             	; first parm
d665 : 2050d0           [ 6] 	jsr df_tk_expression
d668 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
d669 :                       df_tk_setvdp
d669 :                       df_tk_spritepat
d669 :                       df_tk_spritecol
d669 :                       df_tk_spritenme
d669 :                       df_tk_vpoke
d669 :                       df_tk_poke
d669 :                       df_tk_doke
d669 :                       df_tk_nvpoke
d669 :                       df_tk_point
d669 :                       df_tk_vload
d669 :                       df_tk_2parms
                             	; first parm
d669 : 2050d0           [ 6] 	jsr df_tk_expression
d66c : a92c             [ 2] 	lda #','
d66e : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise second parm
d671 : 2050d0           [ 6] 	jsr df_tk_expression
d674 : 60               [ 6] 	rts
                             
                             ; these commands expect 3 numeric parameters
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank1.s --------------------------------

d675 :                       df_tk_hplot
d675 :                       df_tk_plot
d675 :                       df_tk_circle
d675 :                       df_tk_sound
d675 :                       df_tk_colour
d675 :                       df_tk_spritepos
d675 :                       df_tk_shape
d675 :                       df_tk_renum
d675 :                       df_tk_3parms
d675 : 2069d6           [ 6] 	jsr df_tk_2parms
d678 : a92c             [ 2] 	lda #','
d67a : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise third parm
d67d : 2050d0           [ 6] 	jsr df_tk_expression
d680 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
d681 :                       df_tk_play
d681 :                       df_tk_music
d681 :                       df_tk_line
d681 :                       df_tk_box
d681 :                       df_tk_bload
d681 :                       df_tk_4parms
d681 : 2069d6           [ 6] 	jsr df_tk_2parms
d684 : a92c             [ 2] 	lda #','
d686 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
d689 : 2069d6           [ 6] 	jsr df_tk_2parms
d68c : 60               [ 6] 	rts
                             
                             ; these commands expect 5 numeric parameters
d68d :                       df_tk_sprite
d68d :                       df_tk_bsave
d68d :                       df_tk_5parms
d68d : 2081d6           [ 6] 	jsr df_tk_4parms
d690 : a92c             [ 2] 	lda #','
d692 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
d695 : 2050d0           [ 6] 	jsr df_tk_expression
d698 : 60               [ 6] 	rts
                             
                             
                             
d699 :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank1.s --------------------------------

                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
d699 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
d699 :                       df_pg_find_line
d699 : a4a7             [ 3] 	ldy df_prgstrt		; num_tmp contains starting poin
d69b : 8491             [ 3] 	sty num_tmp
d69d : a4a8             [ 3] 	ldy df_prgstrt+1
d69f : 8492             [ 3] 	sty num_tmp+1
d6a1 : 8685             [ 3] 	stx num_a			; num_a contains the line number to 
d6a3 : 8586             [ 3] 	sta num_a+1
d6a5 :                       df_pg_check_next_line	; Also used during runtime 
d6a5 : a591             [ 3] 	lda num_tmp
d6a7 : c5a9             [ 3] 	cmp df_prgend
d6a9 : d011             [ 3] 	bne df_pg_check_line
d6ab : a592             [ 3] 	lda num_tmp+1
d6ad : c5aa             [ 3] 	cmp df_prgend+1
d6af : d00b             [ 3] 	bne df_pg_check_line
d6b1 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
d6b1 : a200             [ 2] 	ldx #0
d6b3 : a191             [ 6] 	lda (num_tmp,x)
d6b5 : a8               [ 2] 	tay
d6b6 : a691             [ 3] 	ldx num_tmp
d6b8 : a592             [ 3] 	lda num_tmp+1
d6ba : 38               [ 2] 	sec
d6bb : 60               [ 6] 	rts
d6bc :                       df_pg_check_line
d6bc : 38               [ 2] 	sec					; Do a trial subtract of
d6bd : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
d6bf : a585             [ 3] 	lda num_a
d6c1 : f191             [ 5] 	sbc (num_tmp),y
d6c3 : 8593             [ 3] 	sta num_tmp+2		; Partial result of sbc
d6c5 : c8               [ 2] 	iny
d6c6 : a586             [ 3] 	lda num_a+1
d6c8 : f191             [ 5] 	sbc (num_tmp),y
d6ca : 0593             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
d6cc : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
d6ce : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
d6d0 : a200             [ 2] 	ldx #0
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank1.s --------------------------------

d6d2 : 18               [ 2] 	clc
d6d3 : a591             [ 3] 	lda num_tmp
d6d5 : 6191             [ 6] 	adc (num_tmp,x)
d6d7 : 8591             [ 3] 	sta num_tmp
d6d9 : 90ca             [ 3] 	bcc df_pg_check_next_line
d6db : e692             [ 5] 	inc num_tmp+1
d6dd : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
d6df :                       df_pr_line_match
d6df : a200             [ 2] 	ldx #0
d6e1 : a191             [ 6] 	lda (num_tmp,x)
d6e3 : a8               [ 2] 	tay
d6e4 : a691             [ 3] 	ldx num_tmp
d6e6 : a592             [ 3] 	lda num_tmp+1
d6e8 : 18               [ 2] 	clc
d6e9 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d6ea :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
d6ea : 8685             [ 3] 	stx num_a
d6ec : 8586             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
d6ee : a5a9             [ 3] 	lda df_prgend
d6f0 : 858d             [ 3] 	sta num_x
d6f2 : a5aa             [ 3] 	lda df_prgend+1
d6f4 : 858e             [ 3] 	sta num_x+1	
d6f6 :                       df_pg_insert_byte
                             	; Move a byte from the current top
d6f6 : a200             [ 2] 	ldx #0
d6f8 : a18d             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
d6fa : 918d             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
d6fc : a58d             [ 3] 	lda num_x
d6fe : c585             [ 3] 	cmp num_a
d700 : d012             [ 3] 	bne df_pg_insert_next_byte
d702 : a58e             [ 3] 	lda num_x+1
d704 : c586             [ 3] 	cmp num_a+1
d706 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
d708 : 18               [ 2] 	clc
d709 : 98               [ 2] 	tya
d70a : 65a9             [ 3] 	adc df_prgend
d70c : 85a9             [ 3] 	sta df_prgend
                             	_bcc 2
                             
d710 : e6aa             [ 5] 	inc df_prgend+1
d712 : 18               [ 2] 	clc
d713 : 60               [ 6] 	rts	; C=0
d714 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
d721 : 4cf6d6           [ 3] 	jmp df_pg_insert_byte
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d724 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
d724 : 8685             [ 3] 	stx num_a
d726 : 8586             [ 3] 	sta num_a+1
d728 : a200             [ 2] 	ldx #0	; No indirect indexing
d72a :                       df_pg_delete_byte
                             	; Move a byte from current+Y
d72a : b185             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
d72c : 8185             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
d72e : a585             [ 3] 	lda num_a
d730 : c5a9             [ 3] 	cmp df_prgend
d732 : d017             [ 3] 	bne df_pg_delete_next_byte
d734 : a586             [ 3] 	lda num_a+1
d736 : c5aa             [ 3] 	cmp df_prgend+1
d738 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
d73a : 8485             [ 3] 	sty num_a
d73c : 38               [ 2] 	sec
d73d : a5a9             [ 3] 	lda df_prgend
d73f : e585             [ 3] 	sbc num_a
d741 : 85a9             [ 3] 	sta df_prgend
d743 : a5aa             [ 3] 	lda df_prgend+1
d745 : e900             [ 2] 	sbc #0
d747 : 85aa             [ 3] 	sta df_prgend+1
d749 : 18               [ 2] 	clc
d74a : 60               [ 6] 	rts
d74b :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
d751 : 4c2ad7           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
d754 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input into df_linbuff
d754 : a200             [ 2] 	ldx #lo(df_linbuff)
d756 : a90a             [ 2] 	lda #hi(df_linbuff)
d758 : a078             [ 2] 	ldy #120
d75a : 2057c5           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
d75d : 98               [ 2] 	tya
d75e : d002             [ 3] 	bne df_pg_inputline_ok
d760 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank1.s --------------------------------

d761 : 60               [ 6] 	rts
d762 :                       df_pg_inputline_ok
d762 : 18               [ 2] 	clc
d763 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
d764 :                       df_pg_dflat
                             	; reset stack pointer
d764 : a2ff             [ 2] 	ldx #255
d766 : 9a               [ 2] 	txs
                             
                             	; error handler address
d767 : a9aa             [ 2] 	lda #lo(df_trap_error)
d769 : 85a2             [ 3] 	sta df_pc
d76b : a9f2             [ 2] 	lda #hi(df_trap_error)
d76d : 85a3             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
d76f :                       df_pg_prompt
d76f : a201             [ 2] 	ldx #lo(df_pg_prompt_msg)
d771 : a9d8             [ 2] 	lda #hi(df_pg_prompt_msg)
d773 : 2093c5           [ 6] 	jsr io_print_line
d776 : a900             [ 2] 	lda #0
d778 : 85a0             [ 3] 	sta df_immed
d77a :                       df_pg_getcommand
                             	; current line is the token buffer when editing
d77a : a980             [ 2] 	lda #lo(df_tokbuff)
d77c : 85c8             [ 3] 	sta df_currlin
d77e : a90a             [ 2] 	lda #hi(df_tokbuff)
d780 : 85c9             [ 3] 	sta df_currlin+1
d782 : 38               [ 2] 	sec
d783 : 2054d7           [ 6] 	jsr df_pg_inputline
d786 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
d788 : 20a1d7           [ 6] 	jsr df_pg_tokenise
d78b : a5a0             [ 3] 	lda df_immed
d78d : f0eb             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
d78f : 2008d8           [ 6] 	jsr df_initrun
                             	; run from tokbuff
d792 : a280             [ 2] 	ldx #lo(df_tokbuff)
d794 : a90a             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
d796 : a003             [ 2] 	ldy #3
                             ;	sty df_exeoff
                             	; init currlin
d798 : 208edb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
d79b : 209fdb           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
d79e : 4c6fd7           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
d7a1 :                       df_pg_tokenise
d7a1 : a900             [ 2] 	lda #0
d7a3 : 859f             [ 3] 	sta errno
d7a5 : 2094d0           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank1.s --------------------------------

d7a8 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d7ab : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
d7ae : d00f             [ 3] 	bne df_pg_line_number
                             	; check if line empty
d7b0 : ad800a           [ 4] 	lda df_tokbuff
d7b3 : f009             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
d7b5 : a901             [ 2] 	lda #1
d7b7 : 85a0             [ 3] 	sta df_immed
                             	; Zero out text line buffer
d7b9 : a900             [ 2] 	lda #0
d7bb : 8d000a           [ 4] 	sta df_linbuff
d7be :                       df_pg_nothing
d7be : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
d7bf :                       df_pg_line_number
                             	; Check if this line exists
d7bf : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d7c2 : aa               [ 2] 	tax
d7c3 : ad820a           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
d7c6 : 2099d6           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
d7c9 : 8545             [ 3] 	sta tmp_d
d7cb : 8a               [ 2] 	txa
d7cc : 48               [ 3] 	pha
d7cd : a545             [ 3] 	lda tmp_d
d7cf : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
d7d0 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
d7d2 : 2024d7           [ 6] 	jsr df_pg_delete_block
d7d5 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
d7d5 : ad800a           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
d7d8 : 48               [ 3] 	pha
d7d9 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
d7db : 68               [ 4] 	pla
d7dc : 68               [ 4] 	pla
d7dd : 68               [ 4] 	pla
d7de : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
d7df :                       df_pg_insertline
                             	; Restore previously saved length
d7df : 68               [ 4] 	pla
d7e0 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
d7e1 : 68               [ 4] 	pla
d7e2 : 8545             [ 3] 	sta tmp_d
d7e4 : 68               [ 4] 	pla
d7e5 : aa               [ 2] 	tax
d7e6 : a545             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank1.s --------------------------------

                             
                             	; We now have insert address and length
d7eb : 20ead6           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
d7ee : 68               [ 4] 	pla
d7ef : a8               [ 2] 	tay
d7f0 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
d7f1 : 68               [ 4] 	pla
d7f2 : aa               [ 2] 	tax
d7f3 : 8685             [ 3] 	stx num_a
d7f5 : 68               [ 4] 	pla
d7f6 : 8586             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
d7f8 :                       df_pg_insertlinbyte
d7f8 : b9800a           [ 4] 	lda df_tokbuff,y
d7fb : 9185             [ 5] 	sta (num_a),y
d7fd : 88               [ 2] 	dey
d7fe : 10f8             [ 3] 	bpl df_pg_insertlinbyte
d800 : 60               [ 6] 	rts
                             	
d801 :                       df_pg_prompt_msg
d801 : 52656164790d00        	db "Ready",UTF_CR,0
                             
d808 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d808 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
d808 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
d808 : a910             [ 2] 	lda #0x10
d80a : 859e             [ 3] 	sta df_checkmsk
d80c : 859d             [ 3] 	sta df_checkkey
                             
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank1.s --------------------------------

                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
d824 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
d826 : 86b8             [ 3] 	stx df_rtstop
                             	; make X=0
d828 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
d829 : 86b9             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
d82b : 86d7             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
d82d : 86d5             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
d82f : 2033d8           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
d832 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
d833 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d83b : a200             [ 2] 	ldx #0
d83d :                       df_rt_init_vvt_slot
d83d : a5e3             [ 3] 	lda df_tmpptra
d83f : c5af             [ 3] 	cmp df_vvtstrt
d841 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
d843 : a5e4             [ 3] 	lda df_tmpptra+1
d845 : c5b0             [ 3] 	cmp df_vvtstrt+1
d847 : f02b             [ 3] 	beq df_rt_init_done
d849 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
d849 : a000             [ 2] 	ldy #0
d84b : b1e3             [ 5] 	lda (df_tmpptra),y
d84d : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_ARRY
d84f : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
d851 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
d852 : a900             [ 2] 	lda #0
d854 : 91e3             [ 5] 	sta (df_tmpptra),y
d856 : c8               [ 2] 	iny
d857 : 91e3             [ 5] 	sta (df_tmpptra),y
d859 : c8               [ 2] 	iny
d85a : 91e3             [ 5] 	sta (df_tmpptra),y
d85c : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank1.s --------------------------------

                             ;	lda (df_tmpptra,x)
d85d : b2e3             [ 5] 	lda (df_tmpptra)
d85f : 2940             [ 2] 	and #DFVVT_PROC
d861 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
d863 : a900             [ 2] 	lda #0
d865 : 91e3             [ 5] 	sta (df_tmpptra),y
d867 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
                             ;	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
d872 : 80c9             [ 3] 	bra df_rt_init_vvt_slot 	; Don't rely on bcc
d874 :                       df_rt_init_done
d874 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
d875 :                       df_rt_getnval
                             	; evaluate the expression
d875 : 207bd8           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
d878 : 4c7ef1           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
d87b :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
d87b : a900             [ 2] 	lda #0
d87d : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
d87e :                       df_rt_neval_optk
d87e : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
d880 : c4c1             [ 3] 	cpy df_nxtstidx
d882 : f03a             [ 3] 	beq df_rt_neval_process
d884 : b1c8             [ 5] 	lda (df_currlin),y		; Get the byte which could b
d886 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
d888 : c920             [ 2] 	cmp #DFTK_ESCVAL		; >=32 means it's an normal ch
d88a : 9007             [ 3] 	bcc df_rt_neval_chr
d88c :                       df_rt_neval_esc
d88c : 2000d9           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
d88f : e6ca             [ 5] 	inc df_exeoff
d891 : d0eb             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
d893 :                       df_rt_neval_chr
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
d893 : c92c             [ 2] 	cmp #','
d895 : f027             [ 3] 	beq df_rt_neval_process
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank1.s --------------------------------

d897 : c95d             [ 2] 	cmp #']'
d899 : f023             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
d89b : c929             [ 2] 	cmp #')'
d89d : f01f             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
d89f : e6ca             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
d8a1 : c928             [ 2] 	cmp #'('
d8a3 : d0d9             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
d8a5 : 207bd8           [ 6] 	jsr df_rt_neval
                             	; move to next byte
d8a8 : e6ca             [ 5] 	inc df_exeoff
d8aa : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
d8ac :                       df_rt_neval_tk
d8ac : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
d8ae : aa               [ 2] 	tax
d8af : bdacd4           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
d8b2 : 48               [ 3] 	pha
d8b3 : 2908             [ 2] 	and #DFTK_OP
d8b5 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
d8b7 : 68               [ 4] 	pla
d8b8 : 2902             [ 2] 	and #DFTK_FN
d8ba : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
d8be :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
d8be : 68               [ 4] 	pla
d8bf : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
d8c1 : 2005dc           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
d8c4 : 4cbed8           [ 3] 	jmp df_rt_neval_process
d8c7 :                       df_rt_neval_done
d8c7 : 60               [ 6] 	rts
                             
d8c8 :                       df_rt_neval_tk_fn
d8c8 : 18               [ 2] 	clc
d8c9 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
d8ca : e6ca             [ 5] 	inc df_exeoff
d8cc : 2005dc           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
d8cf :                       df_rt_neval_nextbyte
d8cf : e6ca             [ 5] 	inc df_exeoff
d8d1 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
d8d3 :                       df_rt_neval_tk_opp
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank1.s --------------------------------

d8d3 : 68               [ 4] 	pla				; Get A off stack which is the type
d8d4 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
d8d4 : 86e3             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
d8d6 : 2907             [ 2] 	and #DFTK_OPMSK
d8d8 : 85e5             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
d8da : 68               [ 4] 	pla
d8db : 48               [ 3] 	pha
d8dc : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
d8dd : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
d8df : bdacd4           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
d8e2 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
d8e4 : c5e5             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
d8e6 : f002             [ 3] 	beq df_rt_neval_donow
d8e8 : b011             [ 3] 	bcs df_rt_neval_pushOp
d8ea :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
d8ea : 68               [ 4] 	pla
d8eb : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
d8ec : a5e3             [ 3] 	lda df_tmpptra
d8ee : 48               [ 3] 	pha
d8ef : aa               [ 2] 	tax		; X = current op
d8f0 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
d8f1 : 2005dc           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
d8f4 : 68               [ 4] 	pla
d8f5 : aa               [ 2] 	tax
                             	; get the token type in to A
d8f6 : bdacd4           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
d8f9 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
d8fb :                       df_rt_neval_pushOp
                             	; push the operator
d8fb : a5e3             [ 3] 	lda df_tmpptra
d8fd : 48               [ 3] 	pha
                             	; move to next byte
d8fe : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank1.s --------------------------------

d900 :                       df_rt_eval_esc
d900 : 0a               [ 2] 	asl a
d901 : aa               [ 2] 	tax
d902 : 7c05d9           [ 6] 	jmp (df_rt_eval_esc_tab,x)
                             ;	lda df_rt_eval_esc_tab,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_eval_esc_tab+1,x
                             ;	sta df_tmpptra+1
                             ;	jmp (df_tmpptra)
                             
d905 :                       df_rt_eval_esc_tab
d905 : c2d9                  	dw df_rt_eval_chr
d907 : ced9                  	dw df_rt_eval_reserved
d909 : ced9                  	dw df_rt_eval_reserved
d90b : ced9                  	dw df_rt_eval_reserved
d90d : ced9                  	dw df_rt_eval_reserved
d90f : ced9                  	dw df_rt_eval_reserved	; no such thing as bytdec
d911 : c2d9                  	dw df_rt_eval_bythex
d913 : c2d9                  	dw df_rt_eval_bytbin
d915 : ced9                  	dw df_rt_eval_reserved
d917 : c2d9                  	dw df_rt_eval_intdec
d919 : c2d9                  	dw df_rt_eval_inthex
d91b : c2d9                  	dw df_rt_eval_intbin
d91d : ced9                  	dw df_rt_eval_reserved
d91f : ced9                  	dw df_rt_eval_reserved
d921 : ced9                  	dw df_rt_eval_reserved
d923 : ced9                  	dw df_rt_eval_reserved
d925 : d0d9                  	dw df_rt_eval_strlit
d927 : 15da                  	dw df_rt_eval_var
d929 : 02db                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
d92b :                       df_rt_seval
d92b : a6bc             [ 3] 	ldx df_sevalptr
d92d : a5bd             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
d92f :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
d92f : 8545             [ 3] 	sta tmp_d
d931 : 48               [ 3] 	pha
d932 : 8a               [ 2] 	txa
d933 : 48               [ 3] 	pha
d934 : a545             [ 3] 	lda tmp_d
                             	; push original destination
d936 : 2053f1           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_ost_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank1.s --------------------------------

                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
d939 :                       df_rt_seval_optk
d939 : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
d93b : c4c1             [ 3] 	cpy df_nxtstidx
d93d : f069             [ 3] 	beq df_rt_seval_done
                             
d93f : b1c8             [ 5] 	lda (df_currlin),y
d941 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
d943 : c920             [ 2] 	cmp #DFTK_ESCVAL
d945 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
d947 : c92c             [ 2] 	cmp #','
d949 : f05d             [ 3] 	beq df_rt_seval_done
d94b : c929             [ 2] 	cmp #')'
d94d : f059             [ 3] 	beq df_rt_seval_done
d94f : d04a             [ 3] 	bne df_rt_seval_nextbyte
d951 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
d951 : c910             [ 2] 	cmp #DFTK_STRLIT
d953 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
d955 : c911             [ 2] 	cmp #DFTK_VAR
d957 : f028             [ 3] 	beq	df_rt_seval_esc_var
d959 : c912             [ 2] 	cmp #DFTK_PROC
d95b : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
d95f :                       df_rt_seval_tk
d95f : 84ca             [ 3] 	sty df_exeoff
d961 : 297f             [ 2] 	and #0x7f
                             	; check if op
d963 : aa               [ 2] 	tax
d964 : bdacd4           [ 4] 	lda df_tk_tokentype,x
d967 : 2904             [ 2] 	and #DFTK_STROP
d969 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
d96b : bdacd4           [ 4] 	lda df_tk_tokentype,x
d96e : 2902             [ 2] 	and #DFTK_FN
d970 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
d974 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
d974 : 8a               [ 2] 	txa
d975 : 4c9bd9           [ 3] 	jmp df_rt_seval_nextbyte
                             
d978 :                       df_rt_seval_tk_fn
d978 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank1.s --------------------------------

d979 : e6ca             [ 5] 	inc df_exeoff
d97b : 2005dc           [ 6] 	jsr df_rt_run_token
d97e : 4c85d9           [ 3] 	jmp df_rt_seval_copy
                             
d981 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
d981 : 18               [ 2] 	clc
d982 : 2015da           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
d985 :                       df_rt_seval_copy
                             	; pull destination pointer
d985 : 68               [ 4] 	pla
d986 : 85e3             [ 3] 	sta df_tmpptra
d988 : 68               [ 4] 	pla
d989 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
d98b : 2076f1           [ 6] 	jsr df_ost_popStr
d98e : 86e5             [ 3] 	stx df_tmpptrb
d990 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
d992 : 20acd9           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
d995 : a5e4             [ 3] 	lda df_tmpptra+1
d997 : 48               [ 3] 	pha
d998 : a5e3             [ 3] 	lda df_tmpptra
d99a : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
d99b :                       df_rt_seval_nextbyte
d99b : e6ca             [ 5] 	inc df_exeoff
d99d : 4c39d9           [ 3] 	jmp df_rt_seval_optk
                             
d9a0 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
d9a0 : 20d0d9           [ 6] 	jsr df_rt_eval_strlit
d9a3 : 4c85d9           [ 3] 	jmp df_rt_seval_copy
                             
d9a6 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
d9a8 :                       df_rt_seval_done
                             	;
d9a8 : 68               [ 4] 	pla
d9a9 : 68               [ 4] 	pla
                             
d9aa : 18               [ 2] 	clc
d9ab : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
d9ac :                       df_rt_copyStr
d9ac : a000             [ 2] 	ldy #0
d9ae :                       df_rt_copyStr_ch
d9ae : b1e5             [ 5] 	lda (df_tmpptrb),y
d9b0 : 91e3             [ 5] 	sta (df_tmpptra),y
d9b2 : f003             [ 3] 	beq df_rt_copyStr_done
d9b4 : c8               [ 2] 	iny
d9b5 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
d9b7 :                       df_rt_copyStr_done
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank1.s --------------------------------

d9b7 : 98               [ 2] 	tya
d9b8 : 18               [ 2] 	clc
d9b9 : 65e3             [ 3] 	adc df_tmpptra
d9bb : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d9bf : e6e4             [ 5] 	inc df_tmpptra+1
d9c1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
d9c2 :                       df_rt_eval_intdec
d9c2 :                       df_rt_eval_bytdec
d9c2 :                       df_rt_eval_inthex
d9c2 :                       df_rt_eval_bythex
d9c2 :                       df_rt_eval_intbin
d9c2 :                       df_rt_eval_bytbin
d9c2 :                       df_rt_eval_chr
                             	; numeric constant
d9c2 : c8               [ 2] 	iny
d9c3 : b1c8             [ 5] 	lda (df_currlin),y
d9c5 : aa               [ 2] 	tax
d9c6 : c8               [ 2] 	iny
d9c7 : b1c8             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
d9c9 : 84ca             [ 3] 	sty df_exeoff
                             	; push number on to stack
d9cb : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
d9ce :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
d9d0 :                       df_rt_eval_strlit
d9d0 : 84ca             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
d9d2 : 98               [ 2] 	tya
                             	; set carry to add one extra
d9d3 : 38               [ 2] 	sec
d9d4 : 65c8             [ 3] 	adc df_currlin
d9d6 : aa               [ 2] 	tax
d9d7 : a5c9             [ 3] 	lda df_currlin+1
d9d9 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
d9db : 2053f1           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
d9de : a4ca             [ 3] 	ldy df_exeoff
d9e0 :                       df_rt_eval_strlit_ch
d9e0 : b1c8             [ 5] 	lda (df_currlin),y
d9e2 : f003             [ 3] 	beq df_rt_eval_strlit_done
d9e4 : c8               [ 2] 	iny
d9e5 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
d9e7 :                       df_rt_eval_strlit_done	; Always relying on Y neve
d9e7 : 84ca             [ 3] 	sty df_exeoff
d9e9 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
d9ea :                       df_rt_arry_parm
                             	; move past open bracket or comma
d9ea : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
d9ec : 2075d8           [ 6] 	jsr df_rt_getnval
d9ef : 8a               [ 2] 	txa
                             ;	clc
d9f0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
d9f1 :                       df_rt_arry_parm2
                             	; go get array parm 1
d9f1 : 20ead9           [ 6] 	jsr df_rt_arry_parm
d9f4 : 48               [ 3] 	pha
d9f5 : a200             [ 2] 	ldx #0
d9f7 : a4ca             [ 3] 	ldy df_exeoff
d9f9 :                       df_rt_arry_parm2_term
d9f9 : b1c8             [ 5] 	lda (df_currlin),y
d9fb : c95d             [ 2] 	cmp #']'
d9fd : f011             [ 4] 	beq df_rt_arry_parm2_skiparry2
d9ff : c92c             [ 2] 	cmp #','
da01 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
da03 : 84ca             [ 3] 	sty df_exeoff
da05 : c8               [ 2] 	iny
da06 : 4cf9d9           [ 3] 	jmp df_rt_arry_parm2_term
da09 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
da09 : 20ead9           [ 6] 	jsr df_rt_arry_parm
da0c : a8               [ 2] 	tay
da0d : 68               [ 4] 	pla
da0e : aa               [ 2] 	tax
                             ;	clc
da0f : 60               [ 6] 	rts
da10 :                       df_rt_arry_parm2_skiparry2
da10 : a000             [ 2] 	ldy #0
da12 : 68               [ 4] 	pla
da13 : aa               [ 2] 	tax
                             ;	clc
da14 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
da15 :                       df_rt_eval_var
                             	; save carry bit
                             ;	php
                             	; if lvar mode then already passed escape token
da15 : b00c             [ 3] 	bcs df_rt_eval_skip_init
                             	; move past var escape token
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank1.s --------------------------------

da17 : c8               [ 2] 	iny
                             	; get var vvt address
da18 : b1c8             [ 5] 	lda (df_currlin),y
da1a : 85e3             [ 3] 	sta df_tmpptra
da1c : c8               [ 2] 	iny
da1d : 84ca             [ 3] 	sty df_exeoff
da1f : b1c8             [ 5] 	lda (df_currlin),y
da21 : 85e4             [ 3] 	sta df_tmpptra+1
da23 :                       df_rt_eval_skip_init
                             	; push vvt type first as this is the last thing 
                             ;	ldx #0
                             ;	lda (df_tmpptra,x)
da23 : b2e3             [ 5] 	lda (df_tmpptra)
da25 : 1010             [ 3] 	bpl df_rt_eval_simple_var
da27 : aa               [ 2] 	tax					; Keep A (type) in X for later
                             ;	pha
                             ;	; Test A
                             ;	tax
                             ;	; simple variable
                             ;	bpl df_rt_eval_simple_var
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
                             ;	cpy df_eolidx
                             ;	beq df_rt_eval_var_simple
da28 : 08               [ 3] 	php			; Save lvar pref for later
da29 : c4c1             [ 3] 	cpy df_nxtstidx
da2b : f024             [ 3] 	beq df_rt_eval_var_ptr
                             	; if next ch is not [ then simple copy
da2d : c8               [ 2] 	iny
da2e : b1c8             [ 5] 	lda (df_currlin),y
da30 : 88               [ 2] 	dey
da31 : c95b             [ 2] 	cmp #'['
da33 : d01c             [ 3] 	bne df_rt_eval_var_ptr
                             	; go do array handling
da35 : f027             [ 3] 	beq df_rt_eval_var_do_arry
da37 :                       df_rt_eval_simple_var
                             	; pull C and check if lvar wanted rather than rv
                             ;	plp
da37 : b00c             [ 3] 	bcs df_rt_eval_simple_lvar
                             	; just push the vvt lo,hi value
da39 : a001             [ 2] 	ldy #DFVVT_LO
da3b : b1e3             [ 5] 	lda (df_tmpptra),y
da3d : aa               [ 2] 	tax
da3e : a002             [ 2] 	ldy #DFVVT_HI
da40 : b1e3             [ 5] 	lda (df_tmpptra),y
                             
da42 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
da45 :                       df_rt_eval_simple_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
                             	; C=1
                             ;	clc
da45 : a900             [ 2] 	lda #DFVVT_LO-1
da47 : 65e3             [ 3] 	adc df_tmpptra
da49 : aa               [ 2] 	tax
da4a : a5e4             [ 3] 	lda df_tmpptra+1
da4c : 6900             [ 2] 	adc #0
                             	; push pointer to lo,hi
da4e : 4c57f1           [ 3] 	jmp df_ost_pushPtr
                             
da51 :                       df_rt_eval_var_ptr
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank1.s --------------------------------

                             	; clean up stack
da51 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
da52 : a001             [ 2] 	ldy #DFVVT_LO
da54 : b1e3             [ 5] 	lda (df_tmpptra),y
da56 : aa               [ 2] 	tax
da57 : a002             [ 2] 	ldy #DFVVT_HI
da59 : b1e3             [ 5] 	lda (df_tmpptra),y
da5b : 4c57f1           [ 3] 	jmp df_ost_pushPtr
                             
da5e :                       df_rt_eval_var_do_arry
                             	; X on stack = type
da5e : da               [ 3] 	phx
                             	; move past var index
da5f : e6ca             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
da61 : a200             [ 2] 	ldx #0
da63 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; save vvt address
da65 : a5e4             [ 3] 	lda df_tmpptra+1
da67 : 48               [ 3] 	pha
da68 : a5e3             [ 3] 	lda df_tmpptra
da6a : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
da6b : 20f1d9           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
da6e : 68               [ 4] 	pla
da6f : 85e3             [ 3] 	sta df_tmpptra
da71 : 68               [ 4] 	pla
da72 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
da74 : 86e5             [ 3] 	stx df_tmpptrb
da76 : 84e6             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
da78 : c000             [ 2] 	cpy #0
da7a : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
da7c : a004             [ 2] 	ldy #DFVVT_DIM2
da7e : b1e3             [ 5] 	lda (df_tmpptra),y
da80 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
da82 : a6e5             [ 3] 	ldx df_tmpptrb
da84 : a4e6             [ 3] 	ldy df_tmpptrb+1
da86 : 86e6             [ 3] 	stx df_tmpptrb+1
da88 : 84e5             [ 3] 	sty df_tmpptrb
                             
da8a :                       df_rt_eval_var_dim2adj
da8a : a6e5             [ 3] 	ldx df_tmpptrb
da8c : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
da8e : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
da90 : c8               [ 2] 	iny
da91 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
da91 : e000             [ 2] 	cpx #0
da93 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
da95 : e8               [ 2] 	inx
da96 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank1.s --------------------------------

                             	;(y-1)*dim1 + (x-1)
da96 : ca               [ 2] 	dex
da97 : a900             [ 2] 	lda #0
da99 : 8586             [ 3] 	sta num_a+1
da9b : 88               [ 2] 	dey
                             	; (y-1)
da9c : 8485             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
da9e : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
daa0 : a003             [ 2] 	ldy #DFVVT_DIM1
daa2 : a900             [ 2] 	lda #0
daa4 : 858a             [ 3] 	sta num_b+1
daa6 : b1e3             [ 5] 	lda (df_tmpptra),y
daa8 : 8589             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
daaa : 2087cb           [ 6] 	jsr int_fast_mult
daad :                       df_rt_eval_var_nomult
                             	; move x to a
daad : 8a               [ 2] 	txa
                             	; add x to num_a
daae : 18               [ 2] 	clc
daaf : 6585             [ 3] 	adc num_a
dab1 : 8585             [ 3] 	sta num_a
                             	_bcc 2
                             
dab5 : e686             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
dab7 : a6e5             [ 3] 	ldx df_tmpptrb
dab9 : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
dabb : 68               [ 4] 	pla
dabc : 48               [ 3] 	pha
dabd : 2901             [ 2] 	and #DFVVT_INT
dabf : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
dac1 : 0685             [ 5] 	asl num_a
dac3 : 2686             [ 5] 	rol num_a+1
dac5 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
dac5 : 18               [ 2] 	clc
dac6 : a001             [ 2] 	ldy #DFVVT_LO
dac8 : b1e3             [ 5] 	lda (df_tmpptra),y
daca : 6585             [ 3] 	adc num_a
dacc : 8585             [ 3] 	sta num_a
dace : a002             [ 2] 	ldy #DFVVT_HI
dad0 : b1e3             [ 5] 	lda (df_tmpptra),y
dad2 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
                             	SWBRK DFERR_DIM
                             
dad6 :                       df_rt_array_exists
dad6 : 6586             [ 3] 	adc num_a+1
dad8 : 8586             [ 3] 	sta num_a+1
                             	; get the type
dada : 68               [ 4] 	pla
                             	; if not int or byte then push string
dadb : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
dadd : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
dadf : 28               [ 4] 	plp
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank1.s --------------------------------

dae0 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
dae2 : 2901             [ 2] 	and #DFVVT_INT
dae4 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
dae6 : a000             [ 2] 	ldy #0
dae8 : b185             [ 5] 	lda (num_a),y
daea : aa               [ 2] 	tax
daeb : c8               [ 2] 	iny
daec : b185             [ 5] 	lda (num_a),y
daee : 4c5ef1           [ 3] 	jmp df_ost_pushInt
daf1 :                       df_rt_eval_byt
daf1 : a000             [ 2] 	ldy #0
daf3 : b185             [ 5] 	lda (num_a),y
daf5 : aa               [ 2] 	tax
daf6 : 98               [ 2] 	tya			; Make A=0
daf7 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
dafa :                       df_rt_eval_var_str
dafa : 28               [ 4] 	plp
dafb :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
dafb : a685             [ 3] 	ldx num_a
dafd : a586             [ 3] 	lda num_a+1
daff : 4c57f1           [ 3] 	jmp df_ost_pushPtr
                             
db02 :                       df_rt_eval_proc
db02 : a5b9             [ 3] 	lda df_parmtop				; Save current position of par
db04 : 48               [ 3] 	pha
db05 : 20bfef           [ 6] 	jsr df_rt_proc				; Go and call the user functio
db08 : 68               [ 4] 	pla							; Get back the original parameter stac
db09 : c5b9             [ 3] 	cmp df_parmtop				; if it is the same, then no r
db0b : f002             [ 3] 	beq df_rt_eval_proc_err
db0d : 18               [ 2] 	clc
db0e : 60               [ 6] 	rts
db0f :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
db11 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
db11 : 207ef1           [ 6] 	jsr df_ost_popInt
db14 : 86e5             [ 3] 	stx df_tmpptrb
db16 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db18 : 207ef1           [ 6] 	jsr df_ost_popInt
db1b : 86e3             [ 3] 	stx df_tmpptra
db1d : 85e4             [ 3] 	sta df_tmpptra+1
db1f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank1.s --------------------------------

db20 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
db20 : 2076f1           [ 6] 	jsr df_ost_popStr
db23 : 86e5             [ 3] 	stx df_tmpptrb
db25 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db27 : 2076f1           [ 6] 	jsr df_ost_popStr
db2a : 86e3             [ 3] 	stx df_tmpptra
db2c : 85e4             [ 3] 	sta df_tmpptra+1
db2e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
db2f :                       df_rt_parm_2ints
                             	; evaluate 1st parm
db2f : 207bd8           [ 6] 	jsr df_rt_neval
                             	; jump over comma
db32 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db34 : 207bd8           [ 6] 	jsr df_rt_neval
                             	
db37 : 4c11db           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
db3a :                       df_rt_parm_3ints
                             	; evaluate 1st parm
db3a : 207bd8           [ 6] 	jsr df_rt_neval
db3d : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db3f : 207bd8           [ 6] 	jsr df_rt_neval
db42 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db44 : 207bd8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
db47 :                       df_rt_parm_pop3
db47 : 207ef1           [ 6] 	jsr df_ost_popInt
db4a : 86e7             [ 3] 	stx df_tmpptrc
db4c : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
db4e : 4c11db           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
db51 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
db51 : 207bd8           [ 6] 	jsr df_rt_neval
db54 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db56 : 207bd8           [ 6] 	jsr df_rt_neval
db59 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db5b : 207bd8           [ 6] 	jsr df_rt_neval
db5e : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
db60 : 207bd8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
db63 :                       df_rt_parm_pop4
db63 : 207ef1           [ 6] 	jsr df_ost_popInt
db66 : 86e9             [ 3] 	stx df_tmpptrd
db68 : 85ea             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
db6a : 4c47db           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
db6d :                       df_rt_parm_5ints
                             	; evaluate 1st parm
db6d : 207bd8           [ 6] 	jsr df_rt_neval
db70 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db72 : 207bd8           [ 6] 	jsr df_rt_neval
db75 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db77 : 207bd8           [ 6] 	jsr df_rt_neval
db7a : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
db7c : 207bd8           [ 6] 	jsr df_rt_neval
db7f : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
db81 : 207bd8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
db84 : 207ef1           [ 6] 	jsr df_ost_popInt
db87 : 86eb             [ 3] 	stx df_tmpptre
db89 : 85ec             [ 3] 	sta df_tmpptre+1
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank1.s --------------------------------

                             
                             	; pop 4,3,2,1 parms
db8b : 4c63db           [ 3] 	jmp df_rt_parm_pop4
                             
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
db8e :                       df_rt_init_stat_ptr
                             	; save current line
db8e : 86c8             [ 3] 	stx df_currlin
db90 : 85c9             [ 3] 	sta df_currlin+1
db92 : 84ca             [ 3] 	sty df_exeoff
db94 : 84c2             [ 3] 	sty df_curstidx
db96 : b1c8             [ 5] 	lda (df_currlin),y
db98 : 85c1             [ 3] 	sta df_nxtstidx
                             ;	ldx #0
                             ;	lda (df_currlin,x)
db9a : b2c8             [ 5] 	lda (df_currlin)
db9c : 85c0             [ 3] 	sta df_eolidx
db9e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
db9f :                       df_rt_exec_stat
db9f : a6c8             [ 3] 	ldx df_currlin
dba1 : a5c9             [ 3] 	lda df_currlin+1
dba3 : a4ca             [ 3] 	ldy df_exeoff
dba5 :                       df_rt_exec_init_ptr
dba5 : 208edb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
                             ;	lda #0
                             ;	sta df_nextlin+1
dba8 : 64cc             [ 3] 	stz df_nextlin+1
                             
                             	; find first token in statement
dbaa :                       df_rt_exec_find_tok
dbaa : c8               [ 2] 	iny
dbab : b1c8             [ 5] 	lda (df_currlin),y
dbad : 10fb             [ 3] 	bpl df_rt_exec_find_tok
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank1.s --------------------------------

dbaf :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
dbaf : c8               [ 2] 	iny
dbb0 : 84ca             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
dbb2 : 2005dc           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
dbb5 : a59e             [ 3] 	lda df_checkmsk
dbb7 : 300e             [ 3] 	bmi df_rt_exec_no_key
dbb9 : c69d             [ 5] 	dec df_checkkey
dbbb : d00a             [ 3] 	bne df_rt_exec_no_key
dbbd : a59e             [ 3] 	lda df_checkmsk
dbbf : 859d             [ 3] 	sta df_checkkey
dbc1 : 18               [ 2] 	clc
dbc2 : 2045c5           [ 6] 	jsr io_get_ch
dbc5 : 9027             [ 3] 	bcc df_rt_exec_check_key
dbc7 :                       df_rt_exec_no_key
                             	; check if normal flow of control
dbc7 : a5cc             [ 3] 	lda df_nextlin+1
dbc9 : d031             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
dbcb : a4c1             [ 3] 	ldy df_nxtstidx
dbcd : c4c0             [ 3] 	cpy df_eolidx
dbcf : 84ca             [ 3] 	sty df_exeoff
dbd1 : d0cc             [ 3] 	bne df_rt_exec_stat
                             	
                             
                             	; reached end of line, move to next
dbd3 : 18               [ 2] 	clc
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dbd4 : b2c8             [ 5] 	lda (df_currlin)
dbd6 : 65c8             [ 3] 	adc df_currlin
dbd8 : 85c8             [ 3] 	sta df_currlin
                             	_bcc 2
                             
dbdc : e6c9             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
dbde : a003             [ 2] 	ldy #3
dbe0 : 84ca             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
                             ;	lda (df_currlin,x)
dbe2 : b2c8             [ 5] 	lda (df_currlin)
dbe4 : 85c0             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
dbe6 : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
dbe8 : a5a0             [ 3] 	lda df_immed
dbea : f00e             [ 3] 	beq df_rt_unexpected_end
dbec :                       df_rt_exec_end
dbec : 18               [ 2] 	clc
dbed : 60               [ 6] 	rts
dbee :                       df_rt_exec_check_key
dbee : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
dbf0 : f006             [ 3] 	beq df_rt_exec_ctrl_z
dbf2 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank1.s --------------------------------

dbf4 : d0d1             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
dbf6 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
dbf8 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
dbfa :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
dbfc :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
dbfc : a6cb             [ 3] 	ldx df_nextlin
dbfe : a5cc             [ 3] 	lda df_nextlin+1
dc00 : a4c1             [ 3] 	ldy df_nxtstidx
dc02 : 4ca5db           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
dc05 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
dc05 : 0a               [ 2] 	asl a
dc06 : aa               [ 2] 	tax
dc07 : 7ce2dc           [ 6] 	jmp (df_rt_tokenjmp,x)
                             ;	lda df_rt_tokenjmp,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_tokenjmp+1,x
                             ;	sta df_tmpptra+1
                             ;	; execution code finishes with rts
                             ;	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
dc0a :                       df_rt_nextstat
                             	; save pointer
dc0a : 86d2             [ 3] 	stx df_lineptr
dc0c : 85d3             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dc0e : b2d2             [ 5] 	lda (df_lineptr)
dc10 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
dc12 : b1d2             [ 5] 	lda (df_lineptr),y
                             ;	cmp (df_lineptr,x)
dc14 : d2d2             [ 5] 	cmp (df_lineptr)
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank1.s --------------------------------

dc16 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
dc18 : a8               [ 2] 	tay
                             	; X = line low
dc19 : a6d2             [ 3] 	ldx df_lineptr
                             	; A = line high
dc1b : a5d3             [ 3] 	lda df_lineptr+1
dc1d : 18               [ 2] 	clc
dc1e : 60               [ 6] 	rts
dc1f :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
dc1f : 18               [ 2] 	clc
dc20 : 65d2             [ 3] 	adc df_lineptr
dc22 : 85d2             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
dc26 : e6d3             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
                             ;	lda (df_lineptr,x)
dc28 : b2d2             [ 5] 	lda (df_lineptr)
dc2a : f008             [ 3] 	beq df_rt_nextstat_err
dc2c : a6d2             [ 3] 	ldx df_lineptr
dc2e : a5d3             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
dc30 : a003             [ 2] 	ldy #3
dc32 : 18               [ 2] 	clc
dc33 : 60               [ 6] 	rts
dc34 :                       df_rt_nextstat_err
dc34 : a000             [ 2] 	ldy #0
dc36 : 38               [ 2] 	sec
dc37 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
dc38 :                       df_rt_push_stat
dc38 : a5c2             [ 3] 	lda df_curstidx
dc3a : 2020f1           [ 6] 	jsr df_rst_pushByte
dc3d : a5c9             [ 3] 	lda df_currlin+1
dc3f : a6c8             [ 3] 	ldx df_currlin
dc41 : 4c38f1           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
dc44 :                       df_rt_pop_stat
dc44 : 2046f1           [ 6] 	jsr df_rst_popWord
dc47 : 86cb             [ 3] 	stx	df_nextlin
dc49 : 85cc             [ 3] 	sta df_nextlin+1
dc4b : 2029f1           [ 6] 	jsr df_rst_popByte
dc4e : a8               [ 2] 	tay
dc4f : a6cb             [ 3] 	ldx df_nextlin
dc51 : a5cc             [ 3] 	lda df_nextlin+1
dc53 : 200adc           [ 6] 	jsr df_rt_nextstat
dc56 : 86cb             [ 3] 	stx df_nextlin
dc58 : 85cc             [ 3] 	sta df_nextlin+1
dc5a : 84c1             [ 3] 	sty df_nxtstidx
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank1.s --------------------------------

dc5c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
dc5d :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
dc65 : a003             [ 2] 	ldy #3
dc67 : 84d4             [ 3] 	sty df_lineidx
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dc69 : b2d2             [ 5] 	lda (df_lineptr)
dc6b : f034             [ 3] 	beq df_rt_findproc_err
dc6d :                       df_rt_findproc_cmd
dc6d : c8               [ 2] 	iny
dc6e : b1d2             [ 5] 	lda (df_lineptr),y
dc70 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
dc72 : c986             [ 2] 	cmp #DFRT_DEF
dc74 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
dc76 : c8               [ 2] 	iny
                             	; skip proc escape token
dc77 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
dc78 : b1d2             [ 5] 	lda (df_lineptr),y
dc7a : c5d0             [ 3] 	cmp df_procptr
dc7c : d00f             [ 3] 	bne df_rt_findproc_nextstat
dc7e : c8               [ 2] 	iny
dc7f : b1d2             [ 5] 	lda (df_lineptr),y
dc81 : c5d1             [ 3] 	cmp df_procptr+1
dc83 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
dc85 : a6d2             [ 3] 	ldx df_lineptr
dc87 : a5d3             [ 3] 	lda df_lineptr+1
dc89 : a4d4             [ 3] 	ldy df_lineidx
dc8b : 18               [ 2] 	clc
dc8c : 60               [ 6] 	rts
dc8d :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
dc8d : a6d2             [ 3] 	ldx df_lineptr
dc8f : a5d3             [ 3] 	lda df_lineptr+1
dc91 : a4d4             [ 3] 	ldy df_lineidx
dc93 : 200adc           [ 6] 	jsr df_rt_nextstat
dc96 : b009             [ 3] 	bcs df_rt_findproc_err
dc98 : 86d2             [ 3] 	stx df_lineptr
dc9a : 85d3             [ 3] 	sta df_lineptr+1
dc9c : 84d4             [ 3] 	sty df_lineidx
dc9e : 4c6ddc           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
dca1 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
dca3 :                       df_rt_findescval
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank1.s --------------------------------

dca3 : a4ca             [ 3] 	ldy df_exeoff
dca5 : 88               [ 2] 	dey
dca6 :                       df_rt_findescval_loop
dca6 : c8               [ 2] 	iny
dca7 : b1c8             [ 5] 	lda (df_currlin),y
dca9 : c920             [ 2] 	cmp #DFTK_ESCVAL
dcab : b0f9             [ 3] 	bcs df_rt_findescval_loop
dcad : 84ca             [ 3] 	sty df_exeoff
dcaf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
dcb0 :                       df_rt_skip_ws
dcb0 : a4ca             [ 3] 	ldy df_exeoff
dcb2 : 88               [ 2] 	dey
dcb3 :                       df_rt_skip_ws_loop
dcb3 : c8               [ 2] 	iny
dcb4 : b1c8             [ 5] 	lda (df_currlin),y
dcb6 : c920             [ 2] 	cmp #' '
dcb8 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
dcba : 84ca             [ 3] 	sty df_exeoff
dcbc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
dcbd :                       df_rt_getlvar
dcbd : 20a3dc           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
dcc0 : c8               [ 2] 	iny
                             
                             	; get variable address
dcc1 : b1c8             [ 5] 	lda (df_currlin),y
dcc3 : 85e3             [ 3] 	sta df_tmpptra
dcc5 : c8               [ 2] 	iny
dcc6 : b1c8             [ 5] 	lda (df_currlin),y
dcc8 : 85e4             [ 3] 	sta df_tmpptra+1
                             
dcca : 84ca             [ 3] 	sty df_exeoff
                             	; get the type
dccc : a000             [ 2] 	ldy #0
dcce : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
dcd0 : 38               [ 2] 	sec
dcd1 : a4ca             [ 3] 	ldy df_exeoff
dcd3 : 2015da           [ 6] 	jsr df_rt_eval_var
dcd6 : 4c7af1           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
dcd9 :                       df_rt_pop_stat_go
dcd9 : 2044dc           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank1.s --------------------------------

dcdc : 68               [ 4] 	pla
dcdd : a8               [ 2] 	tay
dcde : 84b8             [ 3] 	sty df_rtstop
dce0 : 18               [ 2] 	clc
dce1 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dce2 :                       df_rt_tokenjmp
dce2 : 49e5                  	dw	df_rt_assign
dce4 : bfef                  	dw	df_rt_proc
dce6 : 4fe5                  	dw	df_rt_comment
dce8 : fde4                  	dw	df_rt_println
dcea : b7e4                  	dw	df_rt_printat
dcec : c1e4                  	dw	df_rt_print
dcee : 5ff0                  	dw	df_rt_def			; 0x86
dcf0 : e2f0                  	dw	df_rt_enddef		; 0x87
dcf2 : dff0                  	dw	df_rt_return		; 0x88
dcf4 : 7cef                  	dw	df_rt_abort			; 0x89
dcf6 : b0e2                  	dw	df_rt_local
dcf8 : d9e2                  	dw	df_rt_dim
dcfa : 85e1                  	dw	df_rt_repeat		; 0x8c
dcfc : 8de1                  	dw	df_rt_until
dcfe : f0e0                  	dw	df_rt_for			; 0x8e
dd00 : 2ae1                  	dw	df_rt_next			; 0x8f
dd02 : d2df                  	dw	df_rt_while			; 0x90
dd04 : 37e0                  	dw	df_rt_wend			; 0x81
dd06 : b1e0                  	dw	df_rt_if			; 0x92
dd08 : 9fe0                  	dw	df_rt_else			; 0x93
dd0a : 9ae0                  	dw	df_rt_endif			; 0x94
dd0c : 9fe0                  	dw	df_rt_elseif		; 0x95
dd0e : 4fe5                  	dw	df_rt_data			; 0x96
dd10 : 7bf4                  	dw	df_rt_asm_assemble	; 0x97
dd12 : 50e5                  	dw	df_rt_run
dd14 : 45e6                  	dw	df_rt_list
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank1.s --------------------------------

dd16 : 7be2                  	dw	df_rt_input
dd18 : d6e3                  	dw	df_rt_mode
dd1a : 5ce3                  	dw	df_rt_plot
dd1c : c3e3                  	dw	df_rt_cursor
dd1e : 52e3                  	dw	df_rt_cls
dd20 : b4e8                  	dw	df_rt_vpoke
dd22 : cbe8                  	dw	df_rt_setvdp
dd24 : d5e8                  	dw	df_rt_colour
dd26 : 24e9                  	dw	df_rt_spritepat
dd28 : 52e9                  	dw	df_rt_spritepos
dd2a : 90e9                  	dw	df_rt_spritecol
dd2c : 95e9                  	dw	df_rt_spritenme
dd2e : fbe8                  	dw	df_rt_sprite
dd30 : ace8                  	dw	df_rt_poke
dd32 : 9ee8                  	dw	df_rt_doke
dd34 : c3e9                  	dw	df_rt_sound
dd36 : d7e9                  	dw	df_rt_music
dd38 : f5e9                  	dw	df_rt_play
dd3a : ceea                  	dw	df_rt_save
dd3c : e9ea                  	dw	df_rt_load
dd3e : f0eb                  	dw	df_rt_dir
dd40 : 70ec                  	dw	df_rt_dirl
dd42 : 3beb                  	dw	df_rt_del
dd44 : 63e2                  	dw	df_rt_read
dd46 : cfdf                  	dw	df_rt_new
dd48 : 61e5                  	dw	df_rt_renum
dd4a : 9ee4                  	dw	df_rt_wait
dd4c : a6ec                  	dw	df_rt_reset
dd4e : d6e3                  	dw	df_rt_hires
dd50 : efe3                  	dw	df_rt_point
dd52 : 17e4                  	dw	df_rt_line
dd54 : f9e3                  	dw	df_rt_hplot
dd56 : dde3                  	dw	df_rt_pixmode
dd58 : e3e3                  	dw	df_rt_pixmask
dd5a : e9e3                  	dw	df_rt_pixcol
dd5c : 2de4                  	dw	df_rt_box
dd5e : 05e4                  	dw	df_rt_circle
dd60 : 43e4                  	dw	df_rt_shape
dd62 : 83eb                  	dw	df_rt_vload
dd64 : 54eb                  	dw	df_rt_bload
dd66 : 26ea                  	dw	df_rt_bsave
dd68 : c9e3                  	dw	df_rt_himem
dd6a : cbdf                  	dw	df_rt_monitor
dd6c : 42eb                  	dw	df_rt_chdir
dd6e : 4beb                  	dw	df_rt_mkdir
dd70 : bfec                  	dw	df_rt_datetime
dd72 : c0e8                  	dw	df_rt_nvpoke
dd74 : 76eb                  	dw	df_rt_font
dd76 : a4ef                  	dw	df_rt_device
dd78 : 99ef                  	dw	df_rt_fclose
                             
dd7a : 37ed                  	dw	df_rt_vpeek
dd7c : 1eed                  	dw	df_rt_peek
dd7e : 1bed                  	dw	df_rt_deek
dd80 : 74ed                  	dw	df_rt_stick
dd82 : e4ed                  	dw	df_rt_key
dd84 : a4ee                  	dw	df_rt_chr
dd86 : ffee                  	dw	df_rt_left
dd88 : 10ef                  	dw	df_rt_right
dd8a : 2bef                  	dw	df_rt_mid
dd8c : 49ef                  	dw	df_rt_len
dd8e : 98ed                  	dw	df_rt_mem
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank1.s --------------------------------

dd90 : f7ed                  	dw	df_rt_scrn
dd92 : 4fed                  	dw	df_rt_rnd
dd94 : 13ee                  	dw	df_rt_elapsed
dd96 : 2dee                  	dw	df_rt_call
dd98 : b8ee                  	dw	df_rt_hex
dd9a : e9ee                  	dw	df_rt_dec
dd9c : 55ef                  	dw	df_rt_asc
dd9e : 66ef                  	dw	df_rt_val
dda0 : 07ee                  	dw	df_rt_pixel
dda2 : 3fee                  	dw	df_rt_sgn
dda4 : 5cee                  	dw	df_rt_addr
dda6 : 43ed                  	dw	df_rt_nvpeek
dda8 : 7eef                  	dw	df_rt_fcreate
ddaa : 91ef                  	dw	df_rt_fopen
                             	
ddac : 1fde                  	dw	df_rt_mult
ddae : 40de                  	dw	df_rt_div
ddb0 : 61de                  	dw	df_rt_mod
ddb2 : 82de                  	dw	df_rt_asl
ddb4 : 95de                  	dw	df_rt_lsr
ddb6 : f9dd                  	dw	df_rt_add
ddb8 : 0cde                  	dw	df_rt_sub
                             	
ddba : a8de                  	dw	df_rt_and
ddbc : b7de                  	dw	df_rt_or
ddbe : c6de                  	dw	df_rt_eor
ddc0 : 65df                  	dw	df_rt_comlte
ddc2 : 70df                  	dw	df_rt_comgte
ddc4 : 7bdf                  	dw	df_rt_comne
ddc6 : 44df                  	dw	df_rt_comlt
ddc8 : 4fdf                  	dw	df_rt_comgt
ddca : 5adf                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
ddcc :                       df_rt_escjmp
ddcc : 19e7                  	dw df_rt_lst_chr
ddce : 18e7                  	dw df_rt_lst_reserved
ddd0 : 18e7                  	dw df_rt_lst_reserved
ddd2 : 18e7                  	dw df_rt_lst_reserved
ddd4 : 18e7                  	dw df_rt_lst_reserved	
ddd6 : 18e7                  	dw df_rt_lst_reserved	; no such thing as bytdec
ddd8 : 36e7                  	dw df_rt_lst_bythex
ddda : 5be7                  	dw df_rt_lst_bytbin
dddc : 18e7                  	dw df_rt_lst_reserved	
ddde : 7fe7                  	dw df_rt_lst_intdec
dde0 : 49e7                  	dw df_rt_lst_inthex
dde2 : 63e7                  	dw df_rt_lst_intbin
dde4 : 18e7                  	dw df_rt_lst_reserved
dde6 : 18e7                  	dw df_rt_lst_reserved
dde8 : 18e7                  	dw df_rt_lst_reserved
ddea : 18e7                  	dw df_rt_lst_reserved	
ddec : dce7                  	dw df_rt_lst_strlit
ddee : 8ae7                  	dw df_rt_lst_var
ddf0 : 8ae7                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank1.s --------------------------------

                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
ddf2 :                       mod_sz_rtsubs_s
                             
                             	include "dflat\numop.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
ddf2 :                       df_rt_putintres
ddf2 : a6e3             [ 3] 	ldx df_tmpptra
ddf4 : a5e4             [ 3] 	lda df_tmpptra+1
ddf6 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
ddf9 :                       df_rt_add
ddf9 : 2011db           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
de09 : 4cf2dd           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
de0c :                       df_rt_sub
de0c : 2011db           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
de1c : 4cf2dd           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank1.s --------------------------------

de1f :                       df_rt_mult
de1f : 2011db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de32 : 20aecb           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
de3d : 4cf2dd           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
de40 :                       df_rt_div
de40 : 2011db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de53 : 20d7cb           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
de5e : 4cf2dd           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
de61 :                       df_rt_mod
de61 : 2011db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de74 : 20d7cb           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
de7f : 4cf2dd           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
de82 :                       df_rt_asl
de82 : 2011db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
de85 : a6e5             [ 3] 	ldx df_tmpptrb
de87 : e8               [ 2] 	inx
de88 :                       df_rt_aslbit
de88 : ca               [ 2] 	dex
de89 : f007             [ 3] 	beq df_rt_asldone
de8b : 06e3             [ 5] 	asl df_tmpptra
de8d : 26e4             [ 5] 	rol df_tmpptra+1
de8f : 4c88de           [ 3] 	jmp df_rt_aslbit
de92 :                       df_rt_asldone
de92 : 4cf2dd           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
de95 :                       df_rt_lsr
de95 : 2011db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
de98 : a6e5             [ 3] 	ldx df_tmpptrb
de9a : e8               [ 2] 	inx
de9b :                       df_rt_lsrbit
de9b : ca               [ 2] 	dex
de9c : f007             [ 3] 	beq df_rt_lsrdone
de9e : 46e4             [ 5] 	lsr df_tmpptra+1
dea0 : 66e3             [ 5] 	ror df_tmpptra
dea2 : 4c9bde           [ 3] 	jmp df_rt_lsrbit
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank1.s --------------------------------

dea5 :                       df_rt_lsrdone
dea5 : 4cf2dd           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
dea8 :                       df_rt_and
dea8 : 2011db           [ 6] 	jsr df_rt_get2Ints
deab : a5e3             [ 3] 	lda df_tmpptra
dead : 25e5             [ 3] 	and df_tmpptrb
deaf : aa               [ 2] 	tax
deb0 : a5e4             [ 3] 	lda df_tmpptra+1
deb2 : 25e6             [ 3] 	and df_tmpptrb+1
deb4 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
deb7 :                       df_rt_or
deb7 : 2011db           [ 6] 	jsr df_rt_get2Ints
deba : a5e3             [ 3] 	lda df_tmpptra
debc : 05e5             [ 3] 	ora df_tmpptrb
debe : aa               [ 2] 	tax
debf : a5e4             [ 3] 	lda df_tmpptra+1
dec1 : 05e6             [ 3] 	ora df_tmpptrb+1
dec3 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
dec6 :                       df_rt_eor
dec6 : 2011db           [ 6] 	jsr df_rt_get2Ints
dec9 : a5e3             [ 3] 	lda df_tmpptra
decb : 45e5             [ 3] 	eor df_tmpptrb
decd : aa               [ 2] 	tax
dece : a5e4             [ 3] 	lda df_tmpptra+1
ded0 : 45e6             [ 3] 	eor df_tmpptrb+1
ded2 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
ded5 :                       df_rt_aequb
ded5 : a5e3             [ 3] 	lda df_tmpptra
ded7 : c5e5             [ 3] 	cmp df_tmpptrb
ded9 : d004             [ 3] 	bne df_rt_aequbFin
dedb : a5e4             [ 3] 	lda df_tmpptra+1
dedd : c5e6             [ 3] 	cmp df_tmpptrb+1
dedf :                       df_rt_aequbFin
dedf : 60               [ 6] 	rts
                             
                             ; a-b common function
dee0 :                       df_rt_asubb
dee0 : 38               [ 2] 	sec
dee1 : a5e3             [ 3] 	lda df_tmpptra
dee3 : e5e5             [ 3] 	sbc df_tmpptrb
dee5 : a5e4             [ 3] 	lda df_tmpptra+1
dee7 : e5e6             [ 3] 	sbc df_tmpptrb+1
dee9 : 5002             [ 3] 	bvc df_rt_asubbFin
deeb : 4980             [ 2] 	eor #0x80
deed :                       df_rt_asubbFin
deed : 60               [ 6] 	rts
                             
                             ; b-a common function
deee :                       df_rt_bsuba
deee : 38               [ 2] 	sec
deef : a5e5             [ 3] 	lda df_tmpptrb
def1 : e5e3             [ 3] 	sbc df_tmpptra
def3 : a5e6             [ 3] 	lda df_tmpptrb+1
def5 : e5e4             [ 3] 	sbc df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank1.s --------------------------------

def7 : 5002             [ 3] 	bvc df_rt_bsubaFin
def9 : 4980             [ 2] 	eor #0x80
defb :                       df_rt_bsubaFin
defb : 60               [ 6] 	rts
                             
                             ; common routine push true
defc :                       df_rt_true
defc : a2ff             [ 2] 	ldx #0xff
defe : 8a               [ 2] 	txa
deff : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
df02 :                       df_rt_false
df02 : a200             [ 2] 	ldx #0x00
df04 : 8a               [ 2] 	txa
df05 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
df08 :                       df_rt_lt
df08 : 2011db           [ 6] 	jsr df_rt_get2Ints
df0b : 20e0de           [ 6] 	jsr df_rt_asubb
df0e : 30ec             [ 4] 	bmi df_rt_true
df10 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
df12 :                       df_rt_lte
df12 : 2011db           [ 6] 	jsr df_rt_get2Ints
df15 :                       df_rt_lte_calc
df15 : 20eede           [ 6] 	jsr df_rt_bsuba
df18 : 30e8             [ 3] 	bmi df_rt_false
df1a : 10e0             [ 4] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
df1c :                       df_rt_gt
df1c : 2011db           [ 6] 	jsr df_rt_get2Ints
df1f : 20eede           [ 6] 	jsr df_rt_bsuba
df22 : 30d8             [ 4] 	bmi df_rt_true
df24 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
df26 :                       df_rt_gte
df26 : 2011db           [ 6] 	jsr df_rt_get2Ints
df29 :                       df_rt_gte_calc
df29 : 20e0de           [ 6] 	jsr df_rt_asubb
df2c : 10ce             [ 4] 	bpl df_rt_true
df2e : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
df30 :                       df_rt_eq
df30 : 2011db           [ 6] 	jsr df_rt_get2Ints
df33 : 20d5de           [ 6] 	jsr df_rt_aequb
df36 : d0ca             [ 3] 	bne df_rt_false
df38 : f0c2             [ 4] 	beq df_rt_true
                             
                             ; a <> b
df3a :                       df_rt_ne
df3a : 2011db           [ 6] 	jsr df_rt_get2Ints
df3d : 20d5de           [ 6] 	jsr df_rt_aequb
df40 : f0c0             [ 3] 	beq df_rt_false
df42 : d0b8             [ 4] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank1.s --------------------------------

                             
df44 :                       df_rt_comlt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df49 : 2980             [ 2] 	and #DFST_STR
df4b : d054             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
df4d : f0b9             [ 3] 	beq df_rt_lt
                             
df4f :                       df_rt_comgt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df54 : 2980             [ 2] 	and #DFST_STR
df56 : d050             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
df58 : f0c2             [ 3] 	beq df_rt_gt
                             
df5a :                       df_rt_comeq
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df5f : 2980             [ 2] 	and #DFST_STR
df61 : d04e             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
df63 : f0cb             [ 3] 	beq df_rt_eq
                             
df65 :                       df_rt_comlte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df6a : 2980             [ 2] 	and #DFST_STR
df6c : d018             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
df6e : f0a2             [ 3] 	beq df_rt_lte
                             	
df70 :                       df_rt_comgte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df75 : 2980             [ 2] 	and #DFST_STR
df77 : d01a             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
df79 : f0ab             [ 3] 	beq df_rt_gte
                             
df7b :                       df_rt_comne
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df80 : 2980             [ 2] 	and #DFST_STR
df82 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
df84 : f0b4             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
df86 :                       df_rt_slte
df86 : 20b8df           [ 6] 	jsr df_rt_str_comp
df89 : 9005             [ 3] 	bcc df_rt_str_comp_true
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank1.s --------------------------------

df8b : f003             [ 3] 	beq df_rt_str_comp_true
df8d :                       df_rt_str_comp_false
df8d : 4c02df           [ 3] 	jmp df_rt_false
df90 :                       df_rt_str_comp_true
df90 : 4cfcde           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
df93 :                       df_rt_sgte
df93 : 20b8df           [ 6] 	jsr df_rt_str_comp
df96 : b0f8             [ 3] 	bcs df_rt_str_comp_true
df98 : 90f3             [ 3] 	bcc df_rt_str_comp_false
                             
                             ; string not equal
df9a :                       df_rt_sne
df9a : 20b8df           [ 6] 	jsr df_rt_str_comp
df9d : d0f1             [ 3] 	bne df_rt_str_comp_true
df9f : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
dfa1 :                       df_rt_slt
dfa1 : 20b8df           [ 6] 	jsr df_rt_str_comp
dfa4 : 90ea             [ 3] 	bcc df_rt_str_comp_true
dfa6 : b0e5             [ 3] 	bcs df_rt_str_comp_false
                             
                             ; string greater than
dfa8 :                       df_rt_sgt
dfa8 : 20b8df           [ 6] 	jsr df_rt_str_comp
dfab : f0e0             [ 3] 	beq df_rt_str_comp_false
dfad : 90de             [ 3] 	bcc df_rt_str_comp_false
dfaf : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
dfb1 :                       df_rt_seq
dfb1 : 20b8df           [ 6] 	jsr df_rt_str_comp
dfb4 : f0da             [ 3] 	beq df_rt_str_comp_true
dfb6 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; C=0 means <
                             ; C=1,Z=0 means >
                             ; C=1,Z=1 means ==
dfb8 :                       df_rt_str_comp
dfb8 : 2020db           [ 6] 	jsr df_rt_get2Strs
dfbb : a000             [ 2] 	ldy #0
dfbd :                       df_rt_str_comp_byte
dfbd : b1e3             [ 5] 	lda (df_tmpptra),y
dfbf : d1e5             [ 5] 	cmp (df_tmpptrb),y
dfc1 : d007             [ 3] 	bne df_rt_str_comp_done
                             	; if here then both strings still the same
dfc3 : c900             [ 2] 	cmp #0				; What was op1 char
                             	; if char is zero then end
dfc5 : f003             [ 3] 	beq df_rt_str_comp_done
                             	; else do next char
dfc7 : c8               [ 2] 	iny
dfc8 : d0f3             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
dfca :                       df_rt_str_comp_done
dfca : 60               [ 6] 	rts
                             
                             
                             
                             
dfcb :                       df_rt_monitor
AS65 Assembler for R6502 [1.42].                                     Page  129
-------------------------------- bank\bank1.s --------------------------------

dfcb : 20b6c2           [ 6] 	jsr _command_line
dfce : 60               [ 6] 	rts
                             	
dfcf :                       df_rt_new
dfcf : 4cc0f1           [ 3] 	jmp df_clear
                             
                             ; df_rt_gotosub_common
                             ; 	; get line number in A,X and put in num_a
                             ; 	jsr df_rt_getnval
                             ; 	stx num_a
                             ; 	sta num_a+1
                             ; 	; For the moment start from the beginning
                             ; 	ldy df_prgstrt		; num_tmp contains starting po
                             ; 	sty num_tmp
                             ; 	ldy df_prgstrt+1
                             ; 	sty num_tmp+1
                             ; 	; if current line number > target then start f
                             ; 	; else start from this line number
                             ; 	; do a trial substract of current - target
                             ; 	sec
                             ; 	ldy #DFTK_LINNUM
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a
                             ; 	iny
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a+1
                             ; 	; if C=1 then current >= target so start from 
                             ; 	bcs df_rt_goto_find_line
                             ; 	; else use current line address
                             ; 	lda df_currlin
                             ; 	sta num_tmp
                             ; 	lda df_currlin+1
                             ; 	sta num_tmp+1
                             ; df_rt_goto_find_line
                             ; 	jsr df_pg_check_next_line	; Reuses the line fi
                             ; 	bcs df_rt_goto_not_found	; If no exact match t
                             ; 	rts							; X,A contains address of target lin
                             ; df_rt_goto_not_found
                             ; 	SWBRK DFERR_NOLINE
                             
                             ; df_rt_gosub
                             ; 	; push statement address for return
                             ; 	jsr df_rt_push_stat
                             ; 	; DFRT_WHILE token
                             ; 	lda #DFRT_GOSUB
                             ; 	jsr df_rst_pushByte
                             ; 	; *IMPORTANT* : falls through to the goto code
                             ; df_rt_goto
                             ; 	; Find the line number to goto
                             ; 	jsr df_rt_gotosub_common
                             ; 	; Save it in the next line property
                             ; 	stx df_nextlin
                             ; 	sta df_nextlin+1
                             ; 	; GOTO is from the beginning of a line only
                             ; 	ldy #3
                             ; 	sty df_nxtstidx
                             ; 	; Runtime will change flow to use next line pr
                             ; 	rts
                             
                             ; df_rt_retsub
                             ; 	; The top of stack needs to be a gosub return 
                             ; 	jsr df_rst_popByte
AS65 Assembler for R6502 [1.42].                                     Page  130
-------------------------------- bank\bank1.s --------------------------------

                             ; 	cmp #DFRT_GOSUB
                             ; 	bne df_rt_retsub_err
                             ; 	; pop the stat and continue
                             ; 	jmp df_rt_pop_stat
                             ; df_rt_retsub_err
                             ; 	SWBRK DFERR_RETURN
                             
                             
dfd2 :                       df_rt_while
                             	; push statement address
dfd2 : 2038dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
dfd5 : a990             [ 2] 	lda #DFRT_WHILE
dfd7 : 2020f1           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
dfda : 2075d8           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
dfdd : e000             [ 2] 	cpx #0
dfdf : f001             [ 3] 	beq df_rt_while_done
dfe1 : 60               [ 6] 	rts
dfe2 :                       df_rt_while_done
                             	; pop while data off stack as not needed
dfe2 : 2029f1           [ 6] 	jsr df_rst_popByte
dfe5 : 2029f1           [ 6] 	jsr df_rst_popByte
dfe8 : 2046f1           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
dfeb : a5d5             [ 3] 	lda df_ifnest
dfed : 48               [ 3] 	pha
dfee : a901             [ 2] 	lda #1
dff0 : 85d5             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
dffa :                       df_rt_findwend
dffa : a6cb             [ 3] 	ldx df_nextlin
dffc : a5cc             [ 3] 	lda df_nextlin+1
dffe : a4c2             [ 3] 	ldy df_curstidx
e000 : 200adc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e003 : b030             [ 3] 	bcs df_rt_wend_end
e005 : 86cb             [ 3] 	stx df_nextlin
e007 : 85cc             [ 3] 	sta df_nextlin+1
e009 : 84c2             [ 3] 	sty df_curstidx
                             	; find the command token
e00b :                       df_rt_while_cmd
e00b : c8               [ 2] 	iny
e00c : b1cb             [ 5] 	lda (df_nextlin),y
e00e : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e010 : c991             [ 2] 	cmp #DFRT_WEND
e012 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e014 : c6d5             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e016 : d0e2             [ 4] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
AS65 Assembler for R6502 [1.42].                                     Page  131
-------------------------------- bank\bank1.s --------------------------------

e018 : 68               [ 4] 	pla
e019 : 85d5             [ 3] 	sta df_ifnest
e01b : a6cb             [ 3] 	ldx df_nextlin
e01d : a5cc             [ 3] 	lda df_nextlin+1
e01f : a4c2             [ 3] 	ldy df_curstidx
e021 : 200adc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e024 : b00f             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e026 : 86cb             [ 3] 	stx df_nextlin
e028 : 85cc             [ 3] 	sta df_nextlin+1
e02a : 84c1             [ 3] 	sty df_nxtstidx	
e02c : 60               [ 6] 	rts
e02d :                       df_rt_check_while
                             	; check for while
e02d : c990             [ 2] 	cmp #DFRT_WHILE
e02f : d0c9             [ 4] 	bne df_rt_findwend
                             	; if while found then increment nest
e031 : e6d5             [ 5] 	inc df_ifnest
e033 : 80c5             [ 4] 	bra df_rt_findwend
e035 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e037 :                       df_rt_wend
e037 : 2029f1           [ 6] 	jsr df_rst_popByte
e03a : c990             [ 2] 	cmp #DFRT_WHILE
e03c : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e03e : 2046f1           [ 6] 	jsr df_rst_popWord
e041 : 86cb             [ 3] 	stx	df_nextlin
e043 : 85cc             [ 3] 	sta df_nextlin+1
e045 : 2029f1           [ 6] 	jsr df_rst_popByte
e048 : 85c1             [ 3] 	sta df_nxtstidx
e04a : 60               [ 6] 	rts
e04b :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e04d :                       df_rt_if_stat
e04d : a6cb             [ 3] 	ldx df_nextlin
e04f : a5cc             [ 3] 	lda df_nextlin+1
e051 : a4c2             [ 3] 	ldy df_curstidx
e053 : 200adc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e056 : b009             [ 3] 	bcs df_rt_if_stat_err
e058 : 86cb             [ 3] 	stx df_nextlin
e05a : 85cc             [ 3] 	sta df_nextlin+1
e05c : 84c2             [ 3] 	sty df_curstidx
e05e : 84c1             [ 3] 	sty df_nxtstidx
e060 : 60               [ 6] 	rts
                             ; program ended with no match
e061 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             	
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
AS65 Assembler for R6502 [1.42].                                     Page  132
-------------------------------- bank\bank1.s --------------------------------

                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e063 :                       df_rt_if_match
                             	; save the current if nest level
e063 : a5d5             [ 3] 	lda df_ifnest
e065 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e066 : 64d5             [ 3] 	stz df_ifnest	
                             	; save match pref
e068 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e069 :                       df_rt_findelseendif
e069 : 204de0           [ 6] 	jsr df_rt_if_stat
                             	; find command
e06c :                       df_rt_ifcmd
e06c : c8               [ 2] 	iny
e06d : b1cb             [ 5] 	lda (df_nextlin),y
e06f : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e071 : c994             [ 2] 	cmp #DFRT_ENDIF
e073 : f014             [ 3] 	beq df_rt_ifelse
                             
e075 : 28               [ 4] 	plp
e076 : 08               [ 3] 	php
                             	
e077 : b008             [ 3] 	bcs df_rt_ifskipelseif
e079 : c993             [ 2] 	cmp #DFRT_ELSE
e07b : f00c             [ 3] 	beq df_rt_ifelse
e07d : c995             [ 2] 	cmp #DFRT_ELSEIF
e07f : f008             [ 3] 	beq df_rt_ifelse
e081 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e081 : c992             [ 2] 	cmp #DFRT_IF
e083 : d002             [ 3] 	bne df_rt_skipnestif
e085 : e6d5             [ 5] 	inc df_ifnest
e087 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e087 : 80e0             [ 3] 	bra df_rt_findelseendif
                             	
                             	; found else/elseif/endif
                             	; but check if this is nested
e089 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e089 : a6d5             [ 3] 	ldx df_ifnest
e08b : f008             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e08d : c994             [ 2] 	cmp #DFRT_ENDIF
e08f : d002             [ 3] 	bne df_rt_skipnestendif
e091 : c6d5             [ 5] 	dec df_ifnest
e093 :                       df_rt_skipnestendif	
                             	; continue to search for else/endif
e093 : 80d4             [ 3] 	bra df_rt_findelseendif
                             	; ok got a match
e095 :                       df_rt_if_found
                             	; remove pref
e095 : 28               [ 4] 	plp
                             	; restore global if nest
e096 : fa               [ 4] 	plx
e097 : 86d5             [ 3] 	stx df_ifnest
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  133
-------------------------------- bank\bank1.s --------------------------------

e099 : 60               [ 6] 	rts
                             
e09a :                       df_rt_endif
                             	; decrement if next level
e09a : c6d5             [ 5] 	dec df_ifnest
e09c : 3011             [ 3] 	bmi df_rt_noif_err
                             ;	clc
e09e : 60               [ 6] 	rts
                             	
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e09f :                       df_rt_elseif
e09f :                       df_rt_else
                             	; not in if mode then error
e09f : a5d5             [ 3] 	lda df_ifnest
e0a1 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e0ab : 38               [ 2] 	sec
e0ac : 4c63e0           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if	
e0af :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             	
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e0b1 :                       df_rt_if
                             	; increment global if nest counter
e0b1 : e6d5             [ 5] 	inc df_ifnest
e0b3 :                       df_rt_ifeval
                             	; get value
e0b3 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e0b6 : c900             [ 2] 	cmp #0
e0b8 : d035             [ 3] 	bne df_rt_if_done
e0ba : e000             [ 2] 	cpx #0
e0bc : d031             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e0c6 : 18               [ 2] 	clc						
e0c7 : 2063e0           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e0ca : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e0cc : f01e             [ 3] 	beq df_rt_do_else
                             
e0ce : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e0d0 : f01d             [ 3] 	beq df_rt_if_done
                             
AS65 Assembler for R6502 [1.42].                                     Page  134
-------------------------------- bank\bank1.s --------------------------------

                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e0da : c8               [ 2] 	iny
e0db : 5a               [ 3] 	phy
                             	; initialise statement pointer
e0dc : a4c2             [ 3] 	ldy df_curstidx
e0de : a6c8             [ 3] 	ldx df_currlin
e0e0 : a5c9             [ 3] 	lda df_currlin+1
e0e2 : 208edb           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e0e5 : 7a               [ 4] 	ply
e0e6 : 84ca             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e0e8 : 64cc             [ 3] 	stz df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e0ea : 80c7             [ 3] 	bra df_rt_ifeval
                             	
e0ec :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e0ec : 204de0           [ 6] 	jsr df_rt_if_stat
e0ef :                       df_rt_if_done
                             ;	clc
e0ef : 60               [ 6] 	rts
                             	
e0f0 :                       df_rt_for
                             	; push statement address to rt stack
e0f0 : 2038dc           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e0f3 : 20bddc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e0f6 : 48               [ 3] 	pha
e0f7 : da               [ 3] 	phx
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e0f8 : e6ca             [ 5] 	inc df_exeoff
e0fa : 207bd8           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter
e0fd : fa               [ 4] 	plx
e0fe : 86e3             [ 3] 	stx df_tmpptra
e100 : 68               [ 4] 	pla
e101 : 85e4             [ 3] 	sta df_tmpptra+1
e103 : 48               [ 3] 	pha
e104 : da               [ 3] 	phx
                             	; get the starting value from op stack
e105 : 207ef1           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e108 : a001             [ 2] 	ldy #1
e10a : 91e3             [ 5] 	sta (df_tmpptra),y
e10c : 8a               [ 2] 	txa
e10d : 88               [ 2] 	dey
e10e : 92e3             [ 5] 	sta (df_tmpptra)
                             
                             	; find end value
                             	; evaluate the end value
e110 : e6ca             [ 5] 	inc df_exeoff
e112 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
AS65 Assembler for R6502 [1.42].                                     Page  135
-------------------------------- bank\bank1.s --------------------------------

e115 : 2038f1           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e118 : e6ca             [ 5] 	inc df_exeoff
e11a : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e11d : 2038f1           [ 6] 	jsr df_rst_pushWord
                             	; save the counter slot address
e120 : fa               [ 4] 	plx
e121 : 68               [ 4] 	pla
e122 : 2038f1           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e125 : a98e             [ 2] 	lda #DFRT_FOR
e127 : 4c20f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             
e12a :                       df_rt_next
                             	; remember stack position
e12a : a4b8             [ 3] 	ldy df_rtstop
e12c : 5a               [ 3] 	phy
e12d : 2029f1           [ 6] 	jsr df_rst_popByte
e130 : c98e             [ 2] 	cmp #DFRT_FOR
e132 : d04f             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e134 : 2046f1           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e137 : 86e9             [ 3] 	stx df_tmpptrd
e139 : 85ea             [ 3] 	sta df_tmpptrd+1
e13b : b2e9             [ 5] 	lda (df_tmpptrd)
e13d : 85e3             [ 3] 	sta df_tmpptra
e13f : a001             [ 2] 	ldy #1
e141 : b1e9             [ 5] 	lda (df_tmpptrd),y
e143 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; get step value, save in ptrb
e145 : 2046f1           [ 6] 	jsr df_rst_popWord
e148 : 86e5             [ 3] 	stx df_tmpptrb
e14a : 85e6             [ 3] 	sta df_tmpptrb+1
e14c : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e15a : a5e3             [ 3] 	lda df_tmpptra
e15c : 92e9             [ 5] 	sta (df_tmpptrd)
e15e : a001             [ 2] 	ldy #1
e160 : a5e4             [ 3] 	lda df_tmpptra+1
e162 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	
                             	; get end value, save in ptrb
e164 : 2046f1           [ 6] 	jsr df_rst_popWord
e167 : 86e5             [ 3] 	stx df_tmpptrb
e169 : 85e6             [ 3] 	sta df_tmpptrb+1
e16b : 68               [ 4] 	pla					; check if if +ve or -ve step
e16c : 1005             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e16e : 2029df           [ 6] 	jsr df_rt_gte_calc
e171 : 8003             [ 3] 	bra df_rt_next_check
AS65 Assembler for R6502 [1.42].                                     Page  136
-------------------------------- bank\bank1.s --------------------------------

e173 :                       df_rt_check_pos	
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e173 : 2015df           [ 6] 	jsr df_rt_lte_calc
e176 :                       df_rt_next_check
                             	; check if true or false
e176 : 207ef1           [ 6] 	jsr df_ost_popInt
e179 : e000             [ 2] 	cpx #0
                             	; if false then next is done
e17b : f003             [ 3] 	beq df_next_done
                             	; else we continue
e17d : 4cd9dc           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e180 :                       df_next_done
e180 : 4ca1e1           [ 3] 	jmp df_rt_untilnext_done
                             	
e183 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             	
e185 :                       df_rt_repeat
                             	; push statement address
e185 : 2038dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e188 : a98c             [ 2] 	lda #DFRT_REPEAT
e18a : 4c20f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             	
e18d :                       df_rt_until
                             	; remember stack position
e18d : a4b8             [ 3] 	ldy df_rtstop
e18f : 5a               [ 3] 	phy
e190 : 2029f1           [ 6] 	jsr df_rst_popByte
e193 : c98c             [ 2] 	cmp #DFRT_REPEAT
e195 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e197 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e19a : e000             [ 2] 	cpx #0
e19c : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e19e : 4cd9dc           [ 3] 	jmp df_rt_pop_stat_go
                             
e1a1 :                       df_rt_untilnext_done
e1a1 : 7a               [ 4] 	ply
                             	; pop 2 items off stack (line address, index)
e1a2 : 2046f1           [ 6] 	jsr df_rst_popWord
e1a5 : 4c29f1           [ 3] 	jmp df_rst_popByte
                             	; and continue
                             ;	clc
                             ;	rts
                             
e1a8 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             	
e1aa :                       df_rt_sadd
                             ;	clc
e1aa : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  137
-------------------------------- bank\bank1.s --------------------------------

e1ab :                       df_rt_print_num
e1ab : 207ef1           [ 6] 	jsr df_ost_popInt
e1ae : 18               [ 2] 	clc
e1af : 4cbbca           [ 3] 	jmp print_a_to_d
                             ;	rts
                             	
e1b2 :                       df_rt_print_str
e1b2 : 2076f1           [ 6] 	jsr df_ost_popStr
e1b5 : 86e3             [ 3] 	stx df_tmpptra
e1b7 : 85e4             [ 3] 	sta df_tmpptra+1
e1b9 : a000             [ 2] 	ldy #0
e1bb :                       df_rt_print_str_ch
e1bb : b1e3             [ 5] 	lda (df_tmpptra),y
e1bd : f006             [ 3] 	beq df_rt_print_str_done
e1bf : 2048c5           [ 6] 	jsr io_put_ch
e1c2 : c8               [ 2] 	iny
e1c3 : 80f6             [ 3] 	bra df_rt_print_str_ch
e1c5 :                       df_rt_print_str_done
                             ;	clc
e1c5 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e1c6 :                       df_rt_nextdatum
e1c6 : a200             [ 2] 	ldx #0
                             	; load data line offset
e1c8 : a4d8             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e1ca : a5d7             [ 3] 	lda df_currdat+1
e1cc : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e1d6 :                       df_rt_datlinstart
                             	; if end of program then error
e1d6 : a1d6             [ 6] 	lda (df_currdat,x)
e1d8 : f032             [ 4] 	beq df_rt_datumerr
                             	; index in to first line byte
e1da : a003             [ 2] 	ldy #3
e1dc : 84d8             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e1de :                       df_rt_datastatement
e1de : c8               [ 2] 	iny
e1df : 98               [ 2] 	tya
                             	; end of line reached?
e1e0 : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e1e2 : d00e             [ 3] 	bne df_rt_getdatatk
e1e4 :                       df_rt_datnextlin
                             	; if so then go to next line
e1e4 : 18               [ 2] 	clc
e1e5 : a5d6             [ 3] 	lda df_currdat
e1e7 : 61d6             [ 6] 	adc (df_currdat,x)
e1e9 : 85d6             [ 3] 	sta df_currdat
                             	_bcc 2
                             
e1ed : e6d7             [ 5] 	inc df_currdat+1
e1ef : 4cd6e1           [ 3] 	jmp df_rt_datlinstart
e1f2 :                       df_rt_getdatatk
e1f2 : b1d6             [ 5] 	lda (df_currdat),y
e1f4 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e1f6 : c996             [ 2] 	cmp #DFRT_DATA
AS65 Assembler for R6502 [1.42].                                     Page  138
-------------------------------- bank\bank1.s --------------------------------

                             	; if not then go to next line
e1f8 : d0ea             [ 3] 	bne df_rt_datnextlin
e1fa : 84d8             [ 3] 	sty df_datoff
e1fc :                       df_rt_skipinitdataptr
e1fc : 98               [ 2] 	tya
                             	; end of line reached?
e1fd : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e1ff : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e201 : b1d6             [ 5] 	lda (df_currdat),y
e203 : c920             [ 2] 	cmp #DFTK_ESCVAL
e205 : c8               [ 2] 	iny
e206 : b0f4             [ 4] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e208 : 88               [ 2] 	dey
e209 : 84d8             [ 3] 	sty df_datoff
e20b : 60               [ 6] 	rts
e20c :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e20e :                       df_rt_readdatum
                             	; update data pointer to next data item
e20e : 20c6e1           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e211 : 20bddc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e214 : 86e5             [ 3] 	stx df_tmpptrb
e216 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e218 : a5c8             [ 3] 	lda df_currlin
e21a : 48               [ 3] 	pha
e21b : a5c9             [ 3] 	lda df_currlin+1
e21d : 48               [ 3] 	pha
e21e : a5ca             [ 3] 	lda df_exeoff
e220 : 48               [ 3] 	pha
e221 : a5c0             [ 3] 	lda df_eolidx
e223 : 48               [ 3] 	pha
e224 : a5c1             [ 3] 	lda df_nxtstidx
e226 : 48               [ 3] 	pha
e227 : a5c2             [ 3] 	lda df_curstidx
e229 : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
e232 : a5d8             [ 3] 	lda df_datoff
e234 : 85ca             [ 3] 	sta df_exeoff
e236 : a200             [ 2] 	ldx #0
e238 : a1d6             [ 6] 	lda (df_currdat,x)
e23a : 85c0             [ 3] 	sta df_eolidx
e23c : 85c1             [ 3] 	sta df_nxtstidx
e23e : a903             [ 2] 	lda #3
e240 : 85c2             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
e242 : a1e3             [ 6] 	lda (df_tmpptra,x)
e244 : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  139
-------------------------------- bank\bank1.s --------------------------------

                             	; get lvar point from tmpb
e245 : a6e5             [ 3] 	ldx df_tmpptrb
e247 : a5e6             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
e249 : 203be5           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
e24c : a5ca             [ 3] 	lda df_exeoff
e24e : 85d8             [ 3] 	sta df_datoff
                             	; restore line settings
e250 : 68               [ 4] 	pla
e251 : 85c2             [ 3] 	sta df_curstidx
e253 : 68               [ 4] 	pla
e254 : 85c1             [ 3] 	sta df_nxtstidx
e256 : 68               [ 4] 	pla
e257 : 85c0             [ 3] 	sta df_eolidx
e259 : 68               [ 4] 	pla
e25a : 85ca             [ 3] 	sta df_exeoff
e25c : 68               [ 4] 	pla
e25d : 85c9             [ 3] 	sta df_currlin+1
e25f : 68               [ 4] 	pla
e260 : 85c8             [ 3] 	sta df_currlin
e262 : 60               [ 6] 	rts
                             
                             
e263 :                       df_rt_read
                             	; find variable to read in to from current posit
e263 : a4ca             [ 3] 	ldy df_exeoff
e265 :                       df_rt_read_find_var
e265 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
e266 : c4c1             [ 3] 	cpy df_nxtstidx
e268 : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
e26a : b1c8             [ 5] 	lda (df_currlin),y
e26c : c920             [ 2] 	cmp #DFTK_ESCVAL
e26e : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
e270 : 84ca             [ 3] 	sty df_exeoff
                             	; go and read in the value
e272 : 200ee2           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
e275 : 4c63e2           [ 3] 	jmp df_rt_read
                             
e278 :                       df_rt_read_done
                             	; save position
e278 : 84ca             [ 3] 	sty df_exeoff
e27a : 60               [ 6] 	rts
                             
                             
e27b :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
e27b : 20bddc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e27e : 86e5             [ 3] 	stx df_tmpptrb
e280 : 85e6             [ 3] 	sta df_tmpptrb+1
e282 : a078             [ 2] 	ldy #120
                             	; go read a line of input
                             	; X,A is ptr has the input, Y is size
AS65 Assembler for R6502 [1.42].                                     Page  140
-------------------------------- bank\bank1.s --------------------------------

e284 : 38               [ 2] 	sec
e285 : 2057c5           [ 6] 	jsr io_read_line
                             	; check the type
e288 : b2e3             [ 5] 	lda (df_tmpptra)
e28a : 2904             [ 2] 	and #DFVVT_STR
e28c : d008             [ 3] 	bne df_rt_input_str
e28e : b2e3             [ 5] 	lda (df_tmpptra)
e290 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e292 : d003             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
e294 : 8018             [ 3] 	bra df_rt_input_err
e296 :                       df_rt_input_str
                             	; If string then done!
                             ;	clc
e296 : 60               [ 6] 	rts
                             
e297 :                       df_rt_input_num
                             	; X,A = address from tmpb, linbuff must be on pa
e297 : a6e5             [ 3] 	ldx df_tmpptrb
e299 : a5e6             [ 3] 	lda df_tmpptrb+1
e29b : a000             [ 2] 	ldy #0				; any numeric format
e29d : 207fc8           [ 6] 	jsr con_n_to_a
e2a0 : b00c             [ 3] 	bcs df_rt_input_err
e2a2 : a000             [ 2] 	ldy #0
e2a4 : a585             [ 3] 	lda num_a
e2a6 : 91e5             [ 5] 	sta (df_tmpptrb),y
e2a8 : c8               [ 2] 	iny
e2a9 : a586             [ 3] 	lda num_a+1
e2ab : 91e5             [ 5] 	sta (df_tmpptrb),y
                             ;	clc
e2ad : 60               [ 6] 	rts
e2ae :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             	
e2b0 :                       df_rt_local
                             	; get current local count off rt stack
e2b0 : 2029f1           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
e2b3 : 48               [ 3] 	pha
e2b4 : a4ca             [ 3] 	ldy df_exeoff
e2b6 : 88               [ 2] 	dey
e2b7 :                       df_rt_local_findesc
e2b7 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
e2b8 : c4c1             [ 3] 	cpy df_nxtstidx
e2ba : f019             [ 3] 	beq df_rt_local_done
                             	; find a var
e2bc : b1c8             [ 5] 	lda (df_currlin),y
e2be : c911             [ 2] 	cmp #DFTK_VAR
e2c0 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
e2c2 : c8               [ 2] 	iny
                             	; get var slot in A,X
e2c3 : b1c8             [ 5] 	lda (df_currlin),y
e2c5 : aa               [ 2] 	tax
e2c6 : c8               [ 2] 	iny
e2c7 : b1c8             [ 5] 	lda (df_currlin),y
e2c9 : 84ca             [ 3] 	sty df_exeoff
                             	; localise this variable
AS65 Assembler for R6502 [1.42].                                     Page  141
-------------------------------- bank\bank1.s --------------------------------

e2cb : 200cf1           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
e2ce : 68               [ 4] 	pla
e2cf : 1a               [ 2] 	inc a
e2d0 : 48               [ 3] 	pha
e2d1 : a4ca             [ 3] 	ldy df_exeoff
e2d3 : 80e2             [ 3] 	bra df_rt_local_findesc
e2d5 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
e2d5 : 68               [ 4] 	pla
e2d6 : 4c20f1           [ 3] 	jmp df_rst_pushByte
                             ;	clc
                             ;	rts
                             	
e2d9 :                       df_rt_dim
e2d9 : a4ca             [ 3] 	ldy df_exeoff
e2db : 88               [ 2] 	dey
e2dc :                       df_rt_dim_findesc
                             	; check end of line
e2dc : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
e2dd : c4c1             [ 3] 	cpy df_nxtstidx
e2df : f06e             [ 4] 	beq df_rt_dim_done
                             	; find a var
e2e1 : b1c8             [ 5] 	lda (df_currlin),y
e2e3 : c911             [ 2] 	cmp #DFTK_VAR
e2e5 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
e2e7 : c8               [ 2] 	iny
                             	; get var address
e2e8 : b1c8             [ 5] 	lda (df_currlin),y
e2ea : 85e3             [ 3] 	sta df_tmpptra
e2ec : c8               [ 2] 	iny
e2ed : b1c8             [ 5] 	lda (df_currlin),y
e2ef : 85e4             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
e2f1 : c8               [ 2] 	iny
e2f2 : 84ca             [ 3] 	sty df_exeoff
                             	; check if already dim'd
e2f4 : a003             [ 2] 	ldy #DFVVT_DIM1
e2f6 : b1e3             [ 5] 	lda (df_tmpptra),y
e2f8 : d056             [ 4] 	bne df_rt_dim_err
                             	; Save slot address found earlier
e2fa : a5e3             [ 3] 	lda df_tmpptra
e2fc : 48               [ 3] 	pha
e2fd : a5e4             [ 3] 	lda df_tmpptra+1
e2ff : 48               [ 3] 	pha
e300 : 20f1d9           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
e303 : 68               [ 4] 	pla
e304 : 85e4             [ 3] 	sta df_tmpptra+1
e306 : 68               [ 4] 	pla
e307 : 85e3             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
e309 : 5a               [ 3] 	phy
e30a : da               [ 3] 	phx
e30b : a003             [ 2] 	ldy #DFVVT_DIM1
e30d : 68               [ 4] 	pla
e30e : 91e3             [ 5] 	sta (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  142
-------------------------------- bank\bank1.s --------------------------------

e310 : c8               [ 2] 	iny
e311 : 68               [ 4] 	pla
e312 : 91e3             [ 5] 	sta (df_tmpptra),y	
e314 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
e314 : a003             [ 2] 	ldy #DFVVT_DIM1
e316 : b1e3             [ 5] 	lda (df_tmpptra),y
e318 : 8585             [ 3] 	sta num_a
e31a : 6486             [ 3] 	stz num_a+1
e31c : c8               [ 2] 	iny
e31d : b1e3             [ 5] 	lda (df_tmpptra),y
e31f : d002             [ 3] 	bne df_rt_dim2_nz
e321 : a901             [ 2] 	lda #1
e323 :                       df_rt_dim2_nz
e323 : 8589             [ 3] 	sta num_b
e325 : 648a             [ 3] 	stz num_b+1
e327 : 2087cb           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
e32a : b2e3             [ 5] 	lda (df_tmpptra)
e32c : 2901             [ 2] 	and #DFVVT_INT
e32e : f004             [ 3] 	beq df_rt_dim2_mul2
e330 : 0685             [ 5] 	asl num_a
e332 : 2686             [ 5] 	rol num_a+1
e334 :                       df_rt_dim2_mul2	
                             	; finally, we have a size of array
e334 : a685             [ 3] 	ldx num_a
e336 : a586             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
e338 : 209bf1           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
e33b : a002             [ 2] 	ldy #DFVVT_HI
e33d : 91e3             [ 5] 	sta (df_tmpptra),y
e33f : 8a               [ 2] 	txa
e340 : 88               [ 2] 	dey
e341 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
e343 : b2e3             [ 5] 	lda (df_tmpptra)
e345 : 0980             [ 2] 	ora #DFVVT_ARRY
e347 : 92e3             [ 5] 	sta (df_tmpptra)
                             	; don't increment byte again - go check for more
e349 : 808e             [ 4] 	bra df_rt_dim	
e34b :                       df_rt_dim_next_byte
e34b : e6ca             [ 5] 	inc df_exeoff
e34d : 808a             [ 4] 	bra df_rt_dim
e34f :                       df_rt_dim_done
                             ;	clc
e34f : 60               [ 6] 	rts
e350 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
e352 :                       df_rt_cls
                             	; set cursror position to top left first
e352 : a200             [ 2] 	ldx #0
e354 : a000             [ 2] 	ldy #0
e356 : 20a6c3           [ 6] 	jsr _gr_set_cur
e359 : 4ccec2           [ 3] 	jmp _gr_cls
                             ;	clc
                             ;	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  143
-------------------------------- bank\bank1.s --------------------------------

e35c :                       df_rt_plot
                             	; evaluate the expression
e35c : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e35f : da               [ 3] 	phx
                             	; jump over comma
e360 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e362 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e365 : da               [ 3] 	phx
                             	; jump over comma
e366 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e368 : 207bd8           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
                             	_df_ost_peekType
                             
                             	; if >=0x80 then a pointer / string
e370 : 3014             [ 3] 	bmi df_rt_plotstr
                             	; else it is int
e372 : 207ef1           [ 6] 	jsr df_ost_popInt
                             	; put low byte of pop result in a
e375 : 8a               [ 2] 	txa
e376 : a622             [ 3] 	ldx vdp_base+vdp_gmode	; Check if in hires mode
e378 : e010             [ 2] 	cpx #0x10
e37a : b005             [ 3] 	bcs df_rt_hchar
                             	; get y and x in that order
e37c : 7a               [ 4] 	ply
e37d : fa               [ 4] 	plx
e37e : 4c46c3           [ 3] 	jmp _gr_plot
e381 :                       df_rt_hchar
                             	; get y and x in that order
e381 : 7a               [ 4] 	ply
e382 : fa               [ 4] 	plx
e383 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e386 :                       df_rt_plotstr
                             	; pop string pointer
e386 : 207af1           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
e389 : 86e3             [ 3] 	stx df_tmpptra
e38b : 85e4             [ 3] 	sta df_tmpptra+1
e38d : a422             [ 3] 	ldy vdp_base+vdp_gmode	; Check if in hires mode
e38f : c010             [ 2] 	cpy #0x10
e391 : b017             [ 3] 	bcs df_rt_hplotstr
                             	; get y and x in that order
e393 : 7a               [ 4] 	ply
e394 : fa               [ 4] 	plx
                             	; set cursror position
e395 :                       df_rt_plotstrch
e395 : b2e3             [ 5] 	lda (df_tmpptra)
e397 : f010             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e39f : da               [ 3] 	phx
e3a0 : 5a               [ 3] 	phy
e3a1 : 2046c3           [ 6] 	jsr _gr_plot
e3a4 : 7a               [ 4] 	ply
e3a5 : fa               [ 4] 	plx
e3a6 : e8               [ 2] 	inx
e3a7 : 80ec             [ 3] 	bra df_rt_plotstrch
AS65 Assembler for R6502 [1.42].                                     Page  144
-------------------------------- bank\bank1.s --------------------------------

e3a9 :                       df_rt_plotstrdone
e3a9 : 60               [ 6] 	rts
e3aa :                       df_rt_hplotstr
                             	; get y and x in that order
e3aa : 7a               [ 4] 	ply
e3ab : fa               [ 4] 	plx
                             	; set cursror position
e3ac :                       df_rt_hplotstrch
e3ac : b2e3             [ 5] 	lda (df_tmpptra)
e3ae : f0f9             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e3b6 : da               [ 3] 	phx
e3b7 : 5a               [ 3] 	phy
e3b8 : 205ec3           [ 6] 	jsr _gr_hchar
e3bb : 7a               [ 4] 	ply
e3bc : 68               [ 4] 	pla
e3bd : 18               [ 2] 	clc			; Assume pitch 8 for now
e3be : 6908             [ 2] 	adc #8
e3c0 : aa               [ 2] 	tax
e3c1 : 80e9             [ 3] 	bra df_rt_hplotstrch
                             
e3c3 :                       df_rt_cursor
                             	; evaluate the expression
e3c3 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
e3c6 : 8612             [ 3] 	stx vdp_curoff
                             ;	clc
e3c8 : 60               [ 6] 	rts
                             		
e3c9 :                       df_rt_himem
                             	; evaluate the expression
e3c9 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
e3cc : 8e670c           [ 4] 	stx df_memtop
e3cf : 8d680c           [ 4] 	sta df_memtop+1
                             	; now clear everything down
e3d2 : 4cc0f1           [ 3] 	jmp df_clear
e3d5 : 60               [ 6] 	rts
                             
e3d6 :                       df_rt_mode
e3d6 :                       df_rt_hires
                             	; evaluate the expression
e3d6 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; only interested in low byte
e3d9 : 8a               [ 2] 	txa
e3da : 4cc6c1           [ 3] 	jmp _gr_init_screen
                             	
e3dd :                       df_rt_pixmode
                             	; evaluate the expression X = mode
e3dd : 2075d8           [ 6] 	jsr df_rt_getnval
e3e0 : 862e             [ 3] 	stx gr_scrngeom+gr_pixmode
                             ;	clc
e3e2 : 60               [ 6] 	rts
                             
e3e3 :                       df_rt_pixmask
                             	; evaluate the expression X = mask
e3e3 : 2075d8           [ 6] 	jsr df_rt_getnval
e3e6 : 862f             [ 3] 	stx gr_scrngeom+gr_pixmask
                             ;	clc
e3e8 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  145
-------------------------------- bank\bank1.s --------------------------------

                             
e3e9 :                       df_rt_pixcol
                             	; evaluate the expression X = col
e3e9 : 2075d8           [ 6] 	jsr df_rt_getnval
e3ec : 8630             [ 3] 	stx gr_scrngeom+gr_pixcol
                             ;	clc
e3ee : 60               [ 6] 	rts
                             
e3ef :                       df_rt_point
e3ef : 202fdb           [ 6] 	jsr df_rt_parm_2ints
e3f2 : a6e3             [ 3] 	ldx df_tmpptra
e3f4 : a4e5             [ 3] 	ldy df_tmpptrb
e3f6 : 4c76c3           [ 3] 	jmp _gr_point
                             ;	clc
                             ;	rts
                             
e3f9 :                       df_rt_hplot
e3f9 : 203adb           [ 6] 	jsr df_rt_parm_3ints
e3fc : a6e3             [ 3] 	ldx df_tmpptra				; load x
e3fe : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e400 : a5e7             [ 3] 	lda df_tmpptrc				; load char
e402 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e405 :                       df_rt_circle
e405 : 203adb           [ 6] 	jsr df_rt_parm_3ints
e408 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e40a : 8585             [ 3] 	sta num_a
e40c : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e40e : 8586             [ 3] 	sta num_a+1
e410 : a5e7             [ 3] 	lda df_tmpptrc				; load r
e412 : 8587             [ 3] 	sta num_a+2
e414 : 4c2ec3           [ 3] 	jmp _gr_circle
                             
e417 :                       df_rt_line
e417 : 2051db           [ 6] 	jsr df_rt_parm_4ints
e41a : a5e3             [ 3] 	lda df_tmpptra				; load x0
e41c : 8585             [ 3] 	sta num_a
e41e : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e420 : 8586             [ 3] 	sta num_a+1
e422 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e424 : 8587             [ 3] 	sta num_a+2
e426 : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e428 : 8588             [ 3] 	sta num_a+3
e42a : 4cfec2           [ 3] 	jmp _gr_line
                             
e42d :                       df_rt_box
e42d : 2051db           [ 6] 	jsr df_rt_parm_4ints
e430 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e432 : 8585             [ 3] 	sta num_a
e434 : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e436 : 8586             [ 3] 	sta num_a+1
e438 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e43a : 8587             [ 3] 	sta num_a+2
e43c : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e43e : 8588             [ 3] 	sta num_a+3
e440 : 4c16c3           [ 3] 	jmp _gr_box
                             
e443 :                       df_rt_shape
e443 : 203adb           [ 6] 	jsr df_rt_parm_3ints
e446 : a6e3             [ 3] 	ldx df_tmpptra				; load x
e448 : da               [ 3] 	phx
e449 : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
AS65 Assembler for R6502 [1.42].                                     Page  146
-------------------------------- bank\bank1.s --------------------------------

e44b : 5a               [ 3] 	phy
e44c : a6e7             [ 3] 	ldx df_tmpptrc				; load coords[]
e44e : a5e8             [ 3] 	lda df_tmpptrc+1			; load coords[]
e450 : 2038f1           [ 6] 	jsr df_rst_pushWord
e453 :                       df_rt_shapeLoop
e453 : 2046f1           [ 6] 	jsr df_rst_popWord			; Get pointer
e456 : 86e3             [ 3] 	stx df_tmpptra
e458 : 85e4             [ 3] 	sta df_tmpptra+1
e45a : b2e3             [ 5] 	lda (df_tmpptra)			; Get X coord as int
e45c : 853f             [ 3] 	sta tmp_v1
e45e : a001             [ 2] 	ldy #1
e460 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get X hi byte
e462 : 8540             [ 3] 	sta tmp_v1+1
e464 : c8               [ 2] 	iny
e465 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y coord as int
e467 : 8543             [ 3] 	sta tmp_b
e469 : c8               [ 2] 	iny
e46a : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y hi byte
e46c : 8544             [ 3] 	sta tmp_b+1
e46e : a53f             [ 3] 	lda tmp_v1					; If X and Y low are zero then en
e470 : d007             [ 3] 	bne df_rt_shapeCalc
e472 : a543             [ 3] 	lda tmp_b
e474 : d003             [ 3] 	bne df_rt_shapeCalc
                             	; Got here then must be finished
e476 : 68               [ 4] 	pla							; Pop bytes off 6502 stack
e477 : 68               [ 4] 	pla
e478 : 60               [ 6] 	rts
e479 :                       df_rt_shapeCalc
e479 : 18               [ 2] 	clc
e47a : a5e3             [ 3] 	lda df_tmpptra				; Increment coord pointer 
e47c : 6904             [ 2] 	adc #4						; 2 ints is 4 bytes per coord
e47e : aa               [ 2] 	tax
e47f : a5e4             [ 3] 	lda df_tmpptra+1
e481 : 6900             [ 2] 	adc #0
e483 : 2038f1           [ 6] 	jsr df_rst_pushWord			; Put pointer on runtime s
                             	; previous cursor is starting position
                             	; plus delta is new position
e486 : 68               [ 4] 	pla							; get y0 off stack
e487 : 18               [ 2] 	clc
e488 : 8586             [ 3] 	sta num_a+1
e48a : 6543             [ 3] 	adc tmp_b
e48c : 8588             [ 3] 	sta num_a+3					; y1 = y0+dy
e48e : aa               [ 2] 	tax							; save y1 in X reg
e48f : 68               [ 4] 	pla							; get x0 off stack
e490 : 18               [ 2] 	clc
e491 : 8585             [ 3] 	sta num_a					; x0
e493 : 653f             [ 3] 	adc tmp_v1
e495 : 8587             [ 3] 	sta num_a+2					; x1
e497 : 48               [ 3] 	pha							; save x1
e498 : da               [ 3] 	phx							; save y1
e499 : 20fec2           [ 6] 	jsr _gr_line				; line x0,y0,x1,y1
e49c : 80b5             [ 3] 	bra df_rt_shapeLoop			; go back to next coord
                             	
e49e :                       df_rt_wait
                             	; evaluate the expression
e49e : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
e4a1 : a8               [ 2] 	tay
e4a2 :                       df_rt_wait_loop
                             	; check X,Y==0
e4a2 : 8a               [ 2] 	txa
e4a3 : d004             [ 3] 	bne df_rt_wait_countdown
AS65 Assembler for R6502 [1.42].                                     Page  147
-------------------------------- bank\bank1.s --------------------------------

e4a5 : 98               [ 2] 	tya
e4a6 : d001             [ 3] 	bne df_rt_wait_countdown
                             	; Done (wait 0 returns immediately)
e4a8 : 60               [ 6] 	rts
e4a9 :                       df_rt_wait_countdown
                             	; get vdp low byte timer val in A for tick wait
e4a9 : a510             [ 3] 	lda vdp_int_cnt
e4ab : ca               [ 2] 	dex
e4ac : e0ff             [ 2] 	cpx #0xff
e4ae : d001             [ 3] 	bne df_rt_wait_tick
e4b0 : 88               [ 2] 	dey
e4b1 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
e4b1 : c510             [ 3] 	cmp vdp_int_cnt
e4b3 : f0fc             [ 3] 	beq df_rt_wait_tick
e4b5 : d0eb             [ 3] 	bne df_rt_wait_loop		; Always
                             	
e4b7 :                       df_rt_printat
                             	; Get x,y
e4b7 : 202fdb           [ 6] 	jsr df_rt_parm_2ints
e4ba : a6e3             [ 3] 	ldx df_tmpptra
e4bc : a4e5             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
e4be : 20a6c3           [ 6] 	jsr _gr_set_cur
                             	; and continue to normal print command
e4c1 :                       df_rt_print
e4c1 : a4ca             [ 3] 	ldy df_exeoff
e4c3 : 88               [ 2] 	dey
e4c4 :                       df_rt_print_ws
e4c4 : c8               [ 2] 	iny
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
e4c5 : c4c1             [ 3] 	cpy df_nxtstidx
e4c7 : f031             [ 3] 	beq df_rt_print_done
e4c9 : b1c8             [ 5] 	lda (df_currlin),y
e4cb : c93a             [ 2] 	cmp #':'
e4cd : f02b             [ 3] 	beq df_rt_print_done
e4cf : c920             [ 2] 	cmp #' '
e4d1 : f0f1             [ 3] 	beq df_rt_print_ws
e4d3 : c92c             [ 2] 	cmp #','
e4d5 : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
e4d7 : 84ca             [ 3] 	sty df_exeoff
                             	
                             	; if starts with string literal then process sev
e4d9 : c910             [ 2] 	cmp #DFTK_STRLIT
e4db : f014             [ 3] 	beq df_rt_print_string
                             	; else evaluate a numeric
e4dd : 207bd8           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
                             	_df_ost_peekType
                             
e4e5 : 3005             [ 3] 	bmi df_rt_print_gotstr
e4e7 : 20abe1           [ 6] 	jsr df_rt_print_num
e4ea : 80d5             [ 3] 	bra df_rt_print
e4ec :                       df_rt_print_gotstr
e4ec : 20b2e1           [ 6] 	jsr df_rt_print_str
e4ef : 80d0             [ 3] 	bra df_rt_print
e4f1 :                       df_rt_print_string
                             	; point to string accumulator
e4f1 : a6bc             [ 3] 	ldx df_sevalptr
AS65 Assembler for R6502 [1.42].                                     Page  148
-------------------------------- bank\bank1.s --------------------------------

e4f3 : a5bd             [ 3] 	lda df_sevalptr+1
e4f5 : 202bd9           [ 6] 	jsr df_rt_seval
e4f8 : 80f2             [ 3] 	bra df_rt_print_gotstr
e4fa :                       df_rt_print_done
e4fa : 84ca             [ 3] 	sty df_exeoff
e4fc : 60               [ 6] 	rts
                             	
e4fd :                       df_rt_println
e4fd : 20c1e4           [ 6] 	jsr df_rt_print
e500 : a90d             [ 2] 	lda #UTF_CR
e502 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
e505 :                       df_rt_nassign
e505 : 48               [ 3] 	pha
e506 : da               [ 3] 	phx
                             	; now go evaluate expression in to A,X
e507 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to
e50a : 7a               [ 4] 	ply
e50b : 84e3             [ 3] 	sty df_tmpptra
e50d : 7a               [ 4] 	ply
e50e : 84e4             [ 3] 	sty df_tmpptra+1
                             	; save X,A int in contents section
e510 : a001             [ 2] 	ldy #1
e512 : 91e3             [ 5] 	sta (df_tmpptra),y
e514 : 8a               [ 2] 	txa
e515 : 88               [ 2] 	dey
e516 : 91e3             [ 5] 	sta (df_tmpptra),y
                             
e518 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
e519 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being X,A
e519 : 202fd9           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
e51c : 4c76f1           [ 3] 	jmp df_ost_popStr
                             	
                             ;	clc
                             ;	rts
                             
                             ; generate lvar from a var token ready for assign
e51f :                       df_rt_generate_lvar
                             	; move past escape val
e51f : a4ca             [ 3] 	ldy df_exeoff
e521 : c8               [ 2] 	iny
                             	; pointing to variable index
e522 : b1c8             [ 5] 	lda (df_currlin),y
e524 : 85e3             [ 3] 	sta df_tmpptra
e526 : c8               [ 2] 	iny
e527 : b1c8             [ 5] 	lda (df_currlin),y
e529 : 84ca             [ 3] 	sty df_exeoff
e52b : 85e4             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
e52d : b2e3             [ 5] 	lda (df_tmpptra)
AS65 Assembler for R6502 [1.42].                                     Page  149
-------------------------------- bank\bank1.s --------------------------------

e52f : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
e530 : 38               [ 2] 	sec
e531 : 2015da           [ 6] 	jsr df_rt_eval_var
e534 : 207af1           [ 6] 	jsr df_ost_popPtr
                             	; pull the type previously saved into Y
e537 : 7a               [ 4] 	ply
                             	; move past the lvar variable index
e538 : e6ca             [ 5] 	inc df_exeoff
                             ;	clc
e53a : 60               [ 6] 	rts
                             
                             ; assign
                             ; X,A,Y contain lvar pointer and type
e53b :                       df_rt_doassign
                             	; save A and put type Y in to A
e53b : 48               [ 3] 	pha
e53c : 98               [ 2] 	tya
e53d : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
e53f : f004             [ 3] 	beq df_rt_assign_num
                             	; remember to restore A
                             	; jump to string expression evaluator
e541 : 68               [ 4] 	pla
e542 : 4c19e5           [ 3] 	jmp df_rt_sassign
e545 :                       df_rt_assign_num
                             	; else jump to numeric expression evaluator
                             	; remember to restore A
e545 : 68               [ 4] 	pla
e546 : 4c05e5           [ 3] 	jmp df_rt_nassign
                             
                             ; general assignment execution
e549 :                       df_rt_assign
e549 : 201fe5           [ 6] 	jsr df_rt_generate_lvar
                             	; go and do the assignment
e54c : 4c3be5           [ 3] 	jmp df_rt_doassign
                             	
                             ; comment or data token is ignored by runtime
e54f :                       df_rt_comment
e54f :                       df_rt_data
                             ;	clc
e54f : 60               [ 6] 	rts
                             
                             	
                             ; run token	
e550 :                       df_rt_run
                             ;	sec
e550 : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
e551 :                       df_rt_eos
e551 : a4ca             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
e553 : c4c1             [ 3] 	cpy df_nxtstidx
e555 : f008             [ 3] 	beq df_rt_eos_true
e557 : b1c8             [ 5] 	lda (df_currlin),y
e559 : c93a             [ 2] 	cmp #':'
e55b : f002             [ 3] 	beq df_rt_eos_true
e55d : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  150
-------------------------------- bank\bank1.s --------------------------------

e55e : 60               [ 6] 	rts
e55f :                       df_rt_eos_true
e55f : 38               [ 2] 	sec
e560 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
e561 :                       df_rt_renum
e561 : e6ca             [ 5] 	inc df_exeoff
e563 : 203adb           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
e566 : a6e3             [ 3] 	ldx df_tmpptra
e568 : a5e4             [ 3] 	lda df_tmpptra+1
e56a : 2099d6           [ 6] 	jsr df_pg_find_line
e56d : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
e571 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
e571 : 86e9             [ 3] 	stx df_tmpptrd
e573 : 85ea             [ 3] 	sta df_tmpptrd+1
e575 :                       df_rt_renum_do
                             	; if not end of program
e575 : a000             [ 2] 	ldy #0
e577 : b1e9             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
e579 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
e57b : 60               [ 6] 	rts
e57c :                       df_rt_renum_update
                             	; so set this line number to new line number
e57c : a001             [ 2] 	ldy #DFTK_LINNUM
e57e : a5e5             [ 3] 	lda df_tmpptrb
e580 : 91e9             [ 5] 	sta (df_tmpptrd),y
e582 : c8               [ 2] 	iny
e583 : a5e6             [ 3] 	lda df_tmpptrb+1
e585 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
e594 :                       df_rt_renum_next
                             	; point ptrd to the next line
e594 : 18               [ 2] 	clc
e595 : a5e9             [ 3] 	lda df_tmpptrd
e597 : a200             [ 2] 	ldx #0
e599 : 61e9             [ 6] 	adc (df_tmpptrd,x)
e59b : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e59f : e6ea             [ 5] 	inc df_tmpptrd+1
e5a1 : 4c75e5           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
e5a4 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
e5ac : a5b3             [ 3] 	lda df_varcnt
e5ae : 85e5             [ 3] 	sta df_tmpptrb
e5b0 :                       df_rt_listcheckvnt
AS65 Assembler for R6502 [1.42].                                     Page  151
-------------------------------- bank\bank1.s --------------------------------

                             	; If reached 0 then not found
e5b0 : a5e5             [ 3] 	lda df_tmpptrb
e5b2 : f03a             [ 3] 	beq df_rt_listpn_done
e5b4 : a000             [ 2] 	ldy #0
e5b6 : b1e3             [ 5] 	lda (df_tmpptra),y
e5b8 : c95f             [ 2] 	cmp #'_'
e5ba : d01b             [ 3] 	bne df_rt_listnextvnt
e5bc :                       df_rt_listprocch
e5bc : b1e3             [ 5] 	lda (df_tmpptra),y
e5be : 2048c5           [ 6] 	jsr io_put_ch
e5c1 : aa               [ 2] 	tax
e5c2 : f003             [ 3] 	beq df_rt_listproccr
e5c4 : c8               [ 2] 	iny
e5c5 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
e5c7 :                       df_rt_listproccr
e5c7 : a90d             [ 2] 	lda #UTF_CR
e5c9 : 2048c5           [ 6] 	jsr io_put_ch
e5cc : 18               [ 2] 	clc
e5cd :                       df_rt_listprocpause
e5cd : 2045c5           [ 6] 	jsr io_get_ch
e5d0 : c920             [ 2] 	cmp #' '
e5d2 : d003             [ 3] 	bne df_rt_listnextvnt
e5d4 :                       df_rt_listwait
e5d4 : 38               [ 2] 	sec
e5d5 : b0f6             [ 3] 	bcs df_rt_listprocpause
e5d7 :                       df_rt_listnextvnt
e5d7 : b1e3             [ 5] 	lda (df_tmpptra),y
e5d9 : f003             [ 3] 	beq df_rt_listgotnext
e5db : c8               [ 2] 	iny
e5dc : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
e5de :                       df_rt_listgotnext
                             	; dec vnt #
e5de : c6e5             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
e5e0 : c8               [ 2] 	iny
                             	; add this to vnt pointer
e5e1 : 18               [ 2] 	clc
e5e2 : 98               [ 2] 	tya
e5e3 : 65e3             [ 3] 	adc df_tmpptra
e5e5 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e5e9 : e6e4             [ 5] 	inc df_tmpptra+1
e5eb : 4cb0e5           [ 3] 	jmp df_rt_listcheckvnt
e5ee :                       df_rt_listpn_done
e5ee : 60               [ 6] 	rts
                             
e5ef :                       df_rt_listproc
                             	; A already contains '_'
e5ef : 8d000a           [ 4] 	sta df_linbuff
e5f2 : a200             [ 2] 	ldx #0
e5f4 : a4ca             [ 3] 	ldy df_exeoff
e5f6 :                       df_rt_listp_copy
e5f6 : c8               [ 2] 	iny
e5f7 : e8               [ 2] 	inx
e5f8 : b1c8             [ 5] 	lda (df_currlin),y
e5fa : 9d000a           [ 5] 	sta df_linbuff,x
e5fd : 2017ce           [ 6] 	jsr df_tk_isalphanum
e600 : b0f4             [ 4] 	bcs df_rt_listp_copy
                             	; zero the line index
e602 : a200             [ 2] 	ldx #0
e604 : 86be             [ 3] 	stx df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  152
-------------------------------- bank\bank1.s --------------------------------

                             	; save runtime pos
e606 : 84ca             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
e608 : 2036cc           [ 6] 	jsr df_var_find
e60b : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
e60d : 86d0             [ 3] 	stx df_procptr
e60f : 85d1             [ 3] 	sta df_procptr+1
e611 : 205ddc           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
e614 : 86e3             [ 3] 	stx df_tmpptra
e616 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
e618 :                       df_rt_listp_findend
                             	; Go to next stat
e618 : 200adc           [ 6] 	jsr df_rt_nextstat
e61b : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
e61d : 98               [ 2] 	tya
e61e : 48               [ 3] 	pha
                             	; find the command
e61f :                       df_rt_listp_findcmd
e61f : c8               [ 2] 	iny
e620 : b1d2             [ 5] 	lda (df_lineptr),y
e622 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
e624 : 8545             [ 3] 	sta tmp_d
e626 : 68               [ 4] 	pla
e627 : a8               [ 2] 	tay
e628 : a545             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
e62a : c987             [ 2] 	cmp #DFRT_ENDDEF
e62c : f00b             [ 3] 	beq df_rt_listp_done
e62e : c986             [ 2] 	cmp #DFRT_DEF
e630 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
e632 : a6d2             [ 3] 	ldx df_lineptr
e634 : a5d3             [ 3] 	lda df_lineptr+1
e636 : 4c18e6           [ 3] 	jmp df_rt_listp_findend
e639 :                       df_rt_listp_done
                             	; Push end line on to stack
e639 : a5d3             [ 3] 	lda df_lineptr+1
e63b : 48               [ 3] 	pha
e63c : 8a               [ 2] 	txa
e63d : 48               [ 3] 	pha
e63e : a5d3             [ 3] 	lda df_lineptr+1
e640 : 4c7ae6           [ 3] 	jmp df_rt_list_line
e643 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
AS65 Assembler for R6502 [1.42].                                     Page  153
-------------------------------- bank\bank1.s --------------------------------

                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
e645 :                       df_rt_list
e645 : a900             [ 2] 	lda #0
e647 : 85eb             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
e649 : 20b0dc           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
e64c : 2051e5           [ 6] 	jsr df_rt_eos
                             	; so list whole program
e64f : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
e651 : c95f             [ 2] 	cmp #'_'
e653 : d003             [ 3] 	bne df_rt_list_all
e655 : 4cefe5           [ 3] 	jmp df_rt_listproc
e658 :                       df_rt_list_all
                             	;if '*' then display all procnames
e658 : c92a             [ 2] 	cmp #'*'
e65a : d003             [ 3] 	bne df_rt_list_linno
e65c : 4ca4e5           [ 3] 	jmp df_rt_listprocnames
e65f :                       df_rt_list_linno
                             	; else get 1st parameter
e65f : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
e662 : 2099d6           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
e665 : 86e3             [ 3] 	stx df_tmpptra
e667 : 85e4             [ 3] 	sta df_tmpptra+1
e669 : 4c74e6           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
e66c :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
e674 :                       df_rt_listprgend
e674 : a5aa             [ 3] 	lda df_prgend+1
e676 : 48               [ 3] 	pha						; df_prgend hi at 102,x
e677 : a5a9             [ 3] 	lda df_prgend
e679 : 48               [ 3] 	pha						; df_prgend lo at 101,x
e67a :                       df_rt_list_line
                             	; if line length = 0 then end of program
e67a : a000             [ 2] 	ldy #0
e67c : b1e3             [ 5] 	lda (df_tmpptra),y
e67e : f039             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
e680 : a5eb             [ 3] 	lda df_tmpptre
e682 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
e684 : 18               [ 2] 	clc
e685 :                       df_rt_list_synckey
e685 : a5eb             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
e687 : d00b             [ 3] 	bne df_rt_list_line_cont
e689 :                       df_rt_list_pause
e689 : 2045c5           [ 6] 	jsr io_get_ch
e68c : c920             [ 2] 	cmp #' '						; Space = PAUSE
AS65 Assembler for R6502 [1.42].                                     Page  154
-------------------------------- bank\bank1.s --------------------------------

e68e : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
e690 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e692 : f025             [ 3] 	beq df_rt_list_line_fin
e694 :                       df_rt_list_line_cont
e694 : a000             [ 2] 	ldy #0
e696 : 84be             [ 3] 	sty df_linoff
e698 : 20bce6           [ 6] 	jsr df_rt_list_all_line
e69b :                       df_rt_list_next_line
                             	; new line
e69b : 2007c8           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
e69e : 18               [ 2] 	clc
e69f : a5e3             [ 3] 	lda df_tmpptra
e6a1 : a000             [ 2] 	ldy #0
e6a3 : 71e3             [ 5] 	adc (df_tmpptra),y
e6a5 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e6a9 : e6e4             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
e6ab : ba               [ 2] 	tsx
e6ac : 38               [ 2] 	sec
e6ad : bd0101           [ 4] 	lda 0x101,x						; get prend lo from stack frame
e6b0 : e5e3             [ 3] 	sbc df_tmpptra
e6b2 : bd0201           [ 4] 	lda 0x102,x						; get prend hi from stack frame
e6b5 : e5e4             [ 3] 	sbc df_tmpptra+1
e6b7 : b0c1             [ 3] 	bcs df_rt_list_line
e6b9 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
e6b9 : 68               [ 4] 	pla
e6ba : 68               [ 4] 	pla
e6bb :                       df_rt_list_line_only_fin
e6bb : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
e6bc :                       df_rt_list_all_line				; Start here to include nu
e6bc : 20f6e7           [ 6] 	jsr df_rt_list_linnum
e6bf :                       df_rt_list_line_only			; Start here for just the 
e6bf : a003             [ 2] 	ldy #3
e6c1 : b1e3             [ 5] 	lda (df_tmpptra),y
e6c3 : 85d4             [ 3] 	sta df_lineidx
e6c5 : c8               [ 2] 	iny
e6c6 : 84be             [ 3] 	sty df_linoff
e6c8 :                       df_rt_list_decode
e6c8 : a4be             [ 3] 	ldy df_linoff
e6ca : b1e3             [ 5] 	lda (df_tmpptra),y
e6cc : 3010             [ 3] 	bmi df_rt_list_token
e6ce : c920             [ 2] 	cmp #DFTK_ESCVAL
e6d0 : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
e6d2 : 2048c5           [ 6] 	jsr io_put_ch
e6d5 : 4ce1e6           [ 3] 	jmp df_rt_list_nexttok
e6d8 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
e6d8 : 20fae6           [ 6] 	jsr df_rt_list_decode_esc
e6db : 4ce1e6           [ 3] 	jmp df_rt_list_nexttok
e6de :                       df_rt_list_token
e6de : 2007e8           [ 6] 	jsr df_rt_list_decode_token
e6e1 :                       df_rt_list_nexttok
                             	; advance the line offset
e6e1 : e6be             [ 5] 	inc df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  155
-------------------------------- bank\bank1.s --------------------------------

e6e3 : a5be             [ 3] 	lda df_linoff
                             	; check if at end of line
e6e5 : a200             [ 2] 	ldx #0
e6e7 : c1e3             [ 6] 	cmp (df_tmpptra,x)
e6e9 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
e6eb : c5d4             [ 3] 	cmp df_lineidx
e6ed : d0d9             [ 3] 	bne df_rt_list_decode
e6ef : a8               [ 2] 	tay
                             	; save the next statement offset
e6f0 : b1e3             [ 5] 	lda (df_tmpptra),y
e6f2 : 85d4             [ 3] 	sta df_lineidx
e6f4 : c8               [ 2] 	iny
e6f5 : 84be             [ 3] 	sty df_linoff
e6f7 : 4cc8e6           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
e6fa :                       df_rt_list_decode_esc
                             	; jump over esc byte
e6fa : c8               [ 2] 	iny
e6fb : 84be             [ 3] 	sty df_linoff
e6fd : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
e6fe : b1e3             [ 5] 	lda (df_tmpptra),y
e700 : 85e5             [ 3] 	sta df_tmpptrb
e702 : c8               [ 2] 	iny
e703 : b1e3             [ 5] 	lda (df_tmpptra),y
e705 : 85e6             [ 3] 	sta df_tmpptrb+1
e707 : 88               [ 2] 	dey				; Y is on byte after esc byte
e708 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
e709 : 0a               [ 2] 	asl a
e70a : aa               [ 2] 	tax
e70b : bdccdd           [ 4] 	lda df_rt_escjmp,x
e70e : 85e7             [ 3] 	sta df_tmpptrc
e710 : bdcddd           [ 4] 	lda df_rt_escjmp+1,x
e713 : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
e715 : 6ce700           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
e718 :                       df_rt_lst_reserved
e718 : 60               [ 6] 	rts
                             
                             ; decode a byte char
e719 :                       df_rt_lst_chr
e719 : a927             [ 2] 	lda #0x27			; Single quote
e71b : 2048c5           [ 6] 	jsr io_put_ch
e71e : a5e5             [ 3] 	lda df_tmpptrb
e720 : 2048c5           [ 6] 	jsr io_put_ch
e723 : a927             [ 2] 	lda #0x27			; Single quote
e725 : 2048c5           [ 6] 	jsr io_put_ch
e728 : c8               [ 2] 	iny
e729 : 84be             [ 3] 	sty df_linoff
e72b : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
e72c :                       df_rt_lst_hex_pre
e72c : a930             [ 2] 	lda #'0'
e72e : 2048c5           [ 6] 	jsr io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page  156
-------------------------------- bank\bank1.s --------------------------------

e731 : a978             [ 2] 	lda #'x'
e733 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
e736 :                       df_rt_lst_bythex
e736 : 202ce7           [ 6] 	jsr df_rt_lst_hex_pre
e739 :                       df_rt_lst_lo_hex
e739 : a5e5             [ 3] 	lda df_tmpptrb
e73b : 2034c8           [ 6] 	jsr str_a_to_x
e73e : 2048c5           [ 6] 	jsr io_put_ch
e741 : 8a               [ 2] 	txa
e742 : 2048c5           [ 6] 	jsr io_put_ch
e745 :                       df_rt_lst_const_done
e745 : c8               [ 2] 	iny
e746 : 84be             [ 3] 	sty df_linoff
e748 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
e749 :                       df_rt_lst_inthex
e749 : 202ce7           [ 6] 	jsr df_rt_lst_hex_pre
e74c : a5e6             [ 3] 	lda df_tmpptrb+1
e74e : 2034c8           [ 6] 	jsr str_a_to_x
e751 : 2048c5           [ 6] 	jsr io_put_ch
e754 : 8a               [ 2] 	txa
e755 : 2048c5           [ 6] 	jsr io_put_ch
e758 : 4c39e7           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
e75b :                       df_rt_lst_bytbin
e75b : a5e5             [ 3] 	lda df_tmpptrb
e75d : 85e6             [ 3] 	sta df_tmpptrb+1
e75f : a208             [ 2] 	ldx #8
e761 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
e763 :                       df_rt_lst_intbin
e763 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
e765 :                       df_rt_lst_bin
e765 : a930             [ 2] 	lda #'0'
e767 : 2048c5           [ 6] 	jsr io_put_ch
e76a : a962             [ 2] 	lda #'b'
e76c : 2048c5           [ 6] 	jsr io_put_ch
e76f :                       df_rt_lst_bit
e76f : a930             [ 2] 	lda #'0'
e771 : 06e5             [ 5] 	asl df_tmpptrb
e773 : 26e6             [ 5] 	rol df_tmpptrb+1
e775 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
e777 :                       df_rt_lst_bit_skip0
e777 : 2048c5           [ 6] 	jsr io_put_ch
e77a : ca               [ 2] 	dex
e77b : d0f2             [ 3] 	bne df_rt_lst_bit
e77d : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
e77f :                       df_rt_lst_intdec
e77f : a6e5             [ 3] 	ldx df_tmpptrb
e781 : a5e6             [ 3] 	lda df_tmpptrb+1
e783 : c8               [ 2] 	iny
e784 : 84be             [ 3] 	sty df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  157
-------------------------------- bank\bank1.s --------------------------------

e786 : 18               [ 2] 	clc
e787 : 4cbbca           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
e78a :                       df_rt_lst_var
e78a :                       df_rt_lst_proc
                             	; jump over the address bytes
e78a : c8               [ 2] 	iny
e78b : 84be             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
e79d : a000             [ 2] 	ldy #0
e79f :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
e79f : a5e9             [ 3] 	lda df_tmpptrd
e7a1 : c5e5             [ 3] 	cmp df_tmpptrb
e7a3 : d006             [ 3] 	bne df_rt_list_vvtend
e7a5 : a5ea             [ 3] 	lda df_tmpptrd+1
e7a7 : c5e6             [ 3] 	cmp df_tmpptrb+1
e7a9 : f021             [ 3] 	beq df_rt_list_gotvvt
e7ab :                       df_rt_list_vvtend
e7ab : b1e7             [ 5] 	lda (df_tmpptrc),y
e7ad : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
e7b5 : 4cabe7           [ 3] 	jmp df_rt_list_vvtend
e7b8 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
e7be : 18               [ 2] 	clc
e7bf : a5e9             [ 3] 	lda df_tmpptrd
e7c1 : 6908             [ 2] 	adc #DFVVT_SZ
e7c3 : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e7c7 : e6ea             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
e7c9 : 4c9fe7           [ 3] 	jmp df_rt_list_findvvt
e7cc :                       df_rt_list_gotvvt
e7cc : b1e7             [ 5] 	lda (df_tmpptrc),y
e7ce : f025             [ 3] 	beq df_rt_list_donvvt
e7d0 : 2048c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
e7d9 : 4ccce7           [ 3] 	jmp df_rt_list_gotvvt
                             
e7dc :                       df_rt_lst_strlit
e7dc : a922             [ 2] 	lda #0x22
e7de : 2048c5           [ 6] 	jsr io_put_ch
e7e1 : a4be             [ 3] 	ldy df_linoff
e7e3 :                       df_rt_lst_strlitch
e7e3 : b1e3             [ 5] 	lda (df_tmpptra),y
e7e5 : f007             [ 3] 	beq df_rt_lst_strlitdon
AS65 Assembler for R6502 [1.42].                                     Page  158
-------------------------------- bank\bank1.s --------------------------------

e7e7 : 2048c5           [ 6] 	jsr io_put_ch
e7ea : c8               [ 2] 	iny
e7eb : 4ce3e7           [ 3] 	jmp df_rt_lst_strlitch
e7ee :                       df_rt_lst_strlitdon
e7ee : a922             [ 2] 	lda #0x22
e7f0 : 2048c5           [ 6] 	jsr io_put_ch
e7f3 : 84be             [ 3] 	sty df_linoff
e7f5 :                       df_rt_list_donvvt
e7f5 : 60               [ 6] 	rts
                             
e7f6 :                       df_rt_list_linnum
e7f6 : a001             [ 2] 	ldy #1
e7f8 : b1e3             [ 5] 	lda (df_tmpptra),y
e7fa : aa               [ 2] 	tax
e7fb : c8               [ 2] 	iny
e7fc : b1e3             [ 5] 	lda (df_tmpptra),y
e7fe : 18               [ 2] 	clc
e7ff : 20bbca           [ 6] 	jsr print_a_to_d
e802 : a920             [ 2] 	lda #0x20			; Always add a space after line num
e804 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
e807 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
e807 : c997             [ 2] 	cmp #DFRT_ASM
e809 : d003             [ 3] 	bne df_rt_list_decode_token_normal
e80b : 4c45e8           [ 3] 	jmp df_rt_asm_decode_token
e80e :                       df_rt_list_decode_token_normal
e80e : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
e810 : c902             [ 2] 	cmp #2
e812 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
e814 : 60               [ 6] 	rts
e815 :                       df_rt_list_do_decode_tkn
e815 : aa               [ 2] 	tax
e816 : a9be             [ 2] 	lda #lo(df_tokensyms)
e818 : 85e5             [ 3] 	sta df_tmpptrb
e81a : a9d1             [ 2] 	lda #hi(df_tokensyms)
e81c : 85e6             [ 3] 	sta df_tmpptrb+1
e81e :                       df_rt_list_find_sym
e81e : 8a               [ 2] 	txa
e81f : f012             [ 3] 	beq df_rt_list_got_sym
e821 : a000             [ 2] 	ldy #0
e823 :                       df_rt_list_next_ch
e823 : b1e5             [ 5] 	lda (df_tmpptrb),y
e825 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
e82c : 68               [ 4] 	pla
e82d : 10f4             [ 3] 	bpl df_rt_list_next_ch
e82f :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
e82f : ca               [ 2] 	dex
e830 : 4c1ee8           [ 3] 	jmp df_rt_list_find_sym
e833 :                       df_rt_list_got_sym
e833 : a1e5             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
e835 : 08               [ 3] 	php
e836 : 297f             [ 2] 	and #0x7f
e838 : 2048c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
AS65 Assembler for R6502 [1.42].                                     Page  159
-------------------------------- bank\bank1.s --------------------------------

e841 : 28               [ 4] 	plp
e842 : 10ef             [ 3] 	bpl df_rt_list_got_sym
e844 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
e845 :                       df_rt_asm_decode_token
e845 : a92e             [ 2] 	lda #'.'			;Always put out the . symbol
e847 : 2048c5           [ 6] 	jsr io_put_ch
e84a : a4be             [ 3] 	ldy df_linoff		;Print out any whitespace
e84c :                       df_rt_asm_decode_token_ws
e84c : c8               [ 2] 	iny					;Point to char after the asm token
e84d : 84be             [ 3] 	sty df_linoff
e84f : b1e3             [ 5] 	lda (df_tmpptra),y	;What is the char?
e851 : 203ece           [ 6] 	jsr df_tk_isws		;If not then found the keyword
e854 : 9005             [ 3] 	bcc df_rt_asm_decode_token_found
e856 : 2048c5           [ 6] 	jsr io_put_ch		;Print the space
e859 : 80f1             [ 3] 	bra df_rt_asm_decode_token_ws
e85b :                       df_rt_asm_decode_token_found
e85b : c911             [ 2] 	cmp #DFTK_VAR		; If is a label variable?
e85d : d003             [ 3] 	bne df_rt_asm_decode_token_keyword
                             	; if so then process as normal escape handling
e85f : 4cfae6           [ 3] 	jmp df_rt_list_decode_esc
e862 :                       df_rt_asm_decode_token_keyword
e862 : 297f             [ 2] 	and #0x7f			; Mask off MSB
e864 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
e865 : a9a0             [ 2] 	lda #lo(df_asm_tokensyms)
e867 : 85e5             [ 3] 	sta df_tmpptrb
e869 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
e86b : 85e6             [ 3] 	sta df_tmpptrb+1
e86d :                       df_rt_list_find_asm_sym
e86d : 8a               [ 2] 	txa
e86e : f01b             [ 3] 	beq df_rt_list_got_asm_sym
e870 : a000             [ 2] 	ldy #0
e872 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
e878 : b1e5             [ 5] 	lda (df_tmpptrb),y
e87a : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
e87c : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
e87e : 38               [ 2] 	sec					; Skip offset and mode bytes
e87f : 65e5             [ 3] 	adc df_tmpptrb
e881 : 85e5             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
e885 : e6e6             [ 5] 	inc df_tmpptrb+1
e887 : ca               [ 2] 	dex					; One less symbol to skip over
e888 : 4c6de8           [ 3] 	jmp df_rt_list_find_asm_sym
e88b :                       df_rt_list_got_asm_sym
e88b : a1e5             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
e88d : c920             [ 2] 	cmp #' '
e88f : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
e891 : 2048c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e89a : 4c8be8           [ 3] 	jmp df_rt_list_got_asm_sym
e89d :                       df_rt_asm_decode_token_done
e89d : 60               [ 6] 	rts
                             
                             
e89e :                       df_rt_doke
e89e : 202fdb           [ 6] 	jsr df_rt_parm_2ints
AS65 Assembler for R6502 [1.42].                                     Page  160
-------------------------------- bank\bank1.s --------------------------------

e8a1 : a5e5             [ 3] 	lda df_tmpptrb
e8a3 : 92e3             [ 5] 	sta (df_tmpptra)
                             	; get high byte to doke
e8a5 : a5e6             [ 3] 	lda df_tmpptrb+1
e8a7 : a001             [ 2] 	ldy #1
                             	; poke hi byte
e8a9 : 91e3             [ 5] 	sta (df_tmpptra),y
e8ab : 60               [ 6] 	rts
                             	
e8ac :                       df_rt_poke
e8ac : 202fdb           [ 6] 	jsr df_rt_parm_2ints
e8af : a5e5             [ 3] 	lda df_tmpptrb
e8b1 : 92e3             [ 5] 	sta (df_tmpptra)
                             ;	clc
e8b3 : 60               [ 6] 	rts
                             
e8b4 :                       df_rt_vpoke
e8b4 : 202fdb           [ 6] 	jsr df_rt_parm_2ints
e8b7 : a6e3             [ 3] 	ldx df_tmpptra
e8b9 : a4e4             [ 3] 	ldy df_tmpptra+1
e8bb : a5e5             [ 3] 	lda df_tmpptrb
e8bd : 4c1ec4           [ 3] 	jmp _vdp_poke
                             ;	clc
                             ;	rts
                             
e8c0 :                       df_rt_nvpoke
e8c0 : 202fdb           [ 6] 	jsr df_rt_parm_2ints
e8c3 : a6e3             [ 3] 	ldx df_tmpptra
e8c5 : a5e5             [ 3] 	lda df_tmpptrb
e8c7 : 4caec4           [ 3] 	jmp _rtc_nvwrite
                             ;	clc
e8ca : 60               [ 6] 	rts
                             
e8cb :                       df_rt_setvdp
e8cb : 202fdb           [ 6] 	jsr df_rt_parm_2ints
e8ce : a5e3             [ 3] 	lda df_tmpptra
e8d0 : a6e5             [ 3] 	ldx df_tmpptrb
e8d2 : 4cd8c5           [ 3] 	jmp vdp_wr_reg
                             ;	clc
                             ;	rts
                             
e8d5 :                       df_rt_colour
e8d5 : 203adb           [ 6] 	jsr df_rt_parm_3ints
                             	; colour is a combination of b and c parms
e8d8 : a5e5             [ 3] 	lda df_tmpptrb
e8da : 0a               [ 2] 	asl a
e8db : 0a               [ 2] 	asl a
e8dc : 0a               [ 2] 	asl a
e8dd : 0a               [ 2] 	asl a
e8de : 05e7             [ 3] 	ora df_tmpptrc
e8e0 : 48               [ 3] 	pha
e8e1 : a5e3             [ 3] 	lda df_tmpptra
e8e3 : c920             [ 2] 	cmp #32					; 32 = border colour
e8e5 : f00e             [ 3] 	beq df_rt_colour_border
                             	; else write to the colour table
                             	; first calculate the colour table address
e8e7 : 18               [ 2] 	clc
e8e8 : 6519             [ 3] 	adc vdp_base+vdp_addr_col
e8ea : aa               [ 2] 	tax
e8eb : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
e8ed : 6900             [ 2] 	adc #0
e8ef : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  161
-------------------------------- bank\bank1.s --------------------------------

e8f0 : 68               [ 4] 	pla
                             	; A = colour, YX = address
e8f1 : 2010c6           [ 6] 	jsr vdp_poke
e8f4 : 60               [ 6] 	rts
e8f5 :                       df_rt_colour_border
e8f5 : a907             [ 2] 	lda #7
e8f7 : fa               [ 4] 	plx
e8f8 : 4cd8c5           [ 3] 	jmp vdp_wr_reg
                             
e8fb :                       df_rt_sprite
e8fb : 206ddb           [ 6] 	jsr df_rt_parm_5ints
                             	; calculate the sprite number in vram
e8fe : a5e3             [ 3] 	lda df_tmpptra
e900 : 0a               [ 2] 	asl a
e901 : 0a               [ 2] 	asl a
e902 : 18               [ 2] 	clc
e903 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e905 : aa               [ 2] 	tax
e906 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e908 : 6900             [ 2] 	adc #0
e90a : 78               [ 2] 	sei				; Disable interrupts
e90b : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e90e : a5e7             [ 3] 	lda df_tmpptrc
e910 : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e913 : a5e5             [ 3] 	lda df_tmpptrb
e915 : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the pattern name (tmpd)
e918 : a5e9             [ 3] 	lda df_tmpptrd
e91a : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the colour / ec byte (tmpe)
e91d : a5eb             [ 3] 	lda df_tmpptre
e91f : 200bc6           [ 6] 	jsr vdp_wr_vram
e922 : 58               [ 2] 	cli				; Enable interrupts
e923 : 60               [ 6] 	rts
                             
                             
                             ; copy pattern array to sprite pattern vram
                             ; pattern array is a mim 4 element int
e924 :                       df_rt_spritepat
e924 : 202fdb           [ 6] 	jsr df_rt_parm_2ints
                             	; save sprite number
e927 : 86e3             [ 3] 	stx df_tmpptra
e929 : 64e4             [ 3] 	stz df_tmpptra+1
                             	; multiply by 8 to get pattern offset
e92b : 06e3             [ 5] 	asl df_tmpptra
e92d : 26e4             [ 5] 	rol df_tmpptra+1
e92f : 06e3             [ 5] 	asl df_tmpptra
e931 : 26e4             [ 5] 	rol df_tmpptra+1
e933 : 06e3             [ 5] 	asl df_tmpptra
e935 : 26e4             [ 5] 	rol df_tmpptra+1
                             	; add offset to sprite pattern base
                             	; and put in X,A
e937 : a5e3             [ 3] 	lda df_tmpptra
e939 : 651f             [ 3] 	adc vdp_base+vdp_addr_spp
e93b : aa               [ 2] 	tax
e93c : a5e4             [ 3] 	lda df_tmpptra+1
e93e : 6520             [ 3] 	adc vdp_base+vdp_addr_spp+1
e940 : 78               [ 2] 	sei			; Disable interrupts
                             	; set vdp address
e941 : 20e5c5           [ 6] 	jsr vdp_wr_addr
AS65 Assembler for R6502 [1.42].                                     Page  162
-------------------------------- bank\bank1.s --------------------------------

                             	; start from beginning of array
e944 : a000             [ 2] 	ldy #0
e946 :                       df_rt_spritepat_line
                             	; get the sprite patten from array
e946 : b1e5             [ 5] 	lda (df_tmpptrb),y
                             	; and write to vdp
e948 : 200bc6           [ 6] 	jsr vdp_wr_vram
e94b : c8               [ 2] 	iny
                             	; do this for 8 bytes (4 elements)
e94c : c008             [ 2] 	cpy #8
e94e : d0f6             [ 3] 	bne df_rt_spritepat_line
e950 : 58               [ 2] 	cli			; Enable interrupts
e951 : 60               [ 6] 	rts
                             
e952 :                       df_rt_spritepos
e952 : 203adb           [ 6] 	jsr df_rt_parm_3ints
                             	; calculate the sprite number in vram
e955 : a5e3             [ 3] 	lda df_tmpptra
e957 : 0a               [ 2] 	asl a
e958 : 0a               [ 2] 	asl a
e959 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e95b : aa               [ 2] 	tax
e95c : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e95e : 6900             [ 2] 	adc #0
e960 : 78               [ 2] 	sei
e961 : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e964 : a5e7             [ 3] 	lda df_tmpptrc
e966 : 200bc6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e969 : a5e5             [ 3] 	lda df_tmpptrb
e96b : 200bc6           [ 6] 	jsr vdp_wr_vram
e96e : 58               [ 2] 	cli
e96f : 60               [ 6] 	rts
                             
                             ; common routine for col and nme variations
                             ; A contains offset in to sprite table to update
e970 :                       df_rt_spriteattr
                             	; save A which contains the offset
e970 : 48               [ 3] 	pha
e971 : 202fdb           [ 6] 	jsr df_rt_parm_2ints
                             	; calculate the sprite number in vram
e974 : a5e3             [ 3] 	lda df_tmpptra
e976 : 0a               [ 2] 	asl a
e977 : 0a               [ 2] 	asl a
e978 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e97a : 85e3             [ 3] 	sta df_tmpptra
e97c : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e97e : 6900             [ 2] 	adc #0
e980 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; add offset and put in X,A to set VRAM address
e982 : 68               [ 4] 	pla							; get offset from stack
e983 : 65e3             [ 3] 	adc df_tmpptra
e985 : aa               [ 2] 	tax
e986 : a5e4             [ 3] 	lda df_tmpptra+1
e988 : 6900             [ 2] 	adc #0
e98a : a8               [ 2] 	tay
e98b : a5e5             [ 3] 	lda df_tmpptrb
e98d : 4c10c6           [ 3] 	jmp vdp_poke
                             
e990 :                       df_rt_spritecol
                             	; offset is 3 for colour byte
AS65 Assembler for R6502 [1.42].                                     Page  163
-------------------------------- bank\bank1.s --------------------------------

e990 : a903             [ 2] 	lda #3
e992 : 4c70e9           [ 3] 	jmp df_rt_spriteattr
                             
e995 :                       df_rt_spritenme
                             	; offset is 2 for name byte
e995 : a902             [ 2] 	lda #2
e997 : 4c70e9           [ 3] 	jmp df_rt_spriteattr
                             
e99a :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
e99a : a5e3             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
e99c : 3a               [ 2] 	dec a
e99d : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
e99f : 0a               [ 2] 	asl a
e9a0 : aa               [ 2] 	tax
                             	; get low byte of period
e9a1 : a4e5             [ 3] 	ldy df_tmpptrb
e9a3 : 20eec3           [ 6] 	jsr _snd_set
                             	; increment reg number to high byte
e9a6 : e8               [ 2] 	inx
                             	; get high byte of period
e9a7 : a5e6             [ 3] 	lda df_tmpptrb+1
e9a9 : 290f             [ 2] 	and #0x0f
e9ab : a8               [ 2] 	tay
                             	; set period
e9ac : 20eec3           [ 6] 	jsr _snd_set
                             	; get volume register index (8 = channel 1)
e9af : 18               [ 2] 	clc
e9b0 : a5e3             [ 3] 	lda df_tmpptra
e9b2 : 2903             [ 2] 	and #3
e9b4 : 6907             [ 2] 	adc #7
e9b6 : aa               [ 2] 	tax
                             	; get volume
e9b7 : a5e7             [ 3] 	lda df_tmpptrc
e9b9 : 290f             [ 2] 	and #0x0f
e9bb : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
e9bd : 0910             [ 2] 	ora #0x10
e9bf :                       df_rt_sound_env_skip
e9bf : a8               [ 2] 	tay
e9c0 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	rts
                             
                             ; sound chan,period,volume	
e9c3 :                       df_rt_sound
e9c3 : 203adb           [ 6] 	jsr df_rt_parm_3ints
e9c6 :                       df_rt_dosound
                             	; check which channel (0 = noise)
e9c6 : a5e3             [ 3] 	lda df_tmpptra
e9c8 : f003             [ 3] 	beq df_rt_sound_noise
e9ca : 4c9ae9           [ 3] 	jmp df_rt_snd_common
e9cd :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
e9cd : a206             [ 2] 	ldx #6
e9cf : a5e5             [ 3] 	lda df_tmpptrb
e9d1 : 291f             [ 2] 	and #0x1f
e9d3 : a8               [ 2] 	tay
e9d4 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  164
-------------------------------- bank\bank1.s --------------------------------

                             ;	rts
                             
                             ; music chan,octave,note,volume
e9d7 :                       df_rt_music
e9d7 : 2051db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
e9da : 18               [ 2] 	clc
e9db : a5e5             [ 3] 	lda df_tmpptrb
e9dd : 65e5             [ 3] 	adc df_tmpptrb
e9df : 65e5             [ 3] 	adc df_tmpptrb
e9e1 : 0a               [ 2] 	asl a
e9e2 : 0a               [ 2] 	asl a
                             	; we have x12, now add note to get index
e9e3 : 65e7             [ 3] 	adc df_tmpptrc
e9e5 : 0a               [ 2] 	asl a
e9e6 : a8               [ 2] 	tay
                             	; get period A,X (hi/lo)
e9e7 : 20bec3           [ 6] 	jsr _snd_get_note
e9ea : 86e5             [ 3] 	stx df_tmpptrb
e9ec : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
e9ee : a5e9             [ 3] 	lda df_tmpptrd
e9f0 : 85e7             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
e9f2 : 4cc6e9           [ 3] 	jmp df_rt_dosound
                             	
                             	
                             ; play tonemask,noisemask,envelope,period
e9f5 :                       df_rt_play
e9f5 : 2051db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
e9f8 : a5e3             [ 3] 	lda df_tmpptra
e9fa : 2907             [ 2] 	and #7
e9fc : 85e3             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
e9fe : a5e5             [ 3] 	lda df_tmpptrb
ea00 : 2907             [ 2] 	and #7
ea02 : 0a               [ 2] 	asl a
ea03 : 0a               [ 2] 	asl a
ea04 : 0a               [ 2] 	asl a
ea05 : 05e3             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; keep top 2 bits 0 as these are port a and b in
ea07 : 493f             [ 2] 	eor #0x3f
ea09 : a8               [ 2] 	tay
                             	; reg 7 is control register
ea0a : a207             [ 2] 	ldx #7
ea0c : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 3 = envelope mode
ea0f : a5e7             [ 3] 	lda df_tmpptrc
ea11 : 290f             [ 2] 	and #0xf
ea13 : a8               [ 2] 	tay
                             	; 13 is envelope shape register
ea14 : a20d             [ 2] 	ldx #13
ea16 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
ea19 : a20b             [ 2] 	ldx #11
                             	; get low
ea1b : a4e9             [ 3] 	ldy df_tmpptrd
ea1d : 20eec3           [ 6] 	jsr _snd_set
AS65 Assembler for R6502 [1.42].                                     Page  165
-------------------------------- bank\bank1.s --------------------------------

                             	; get high
ea20 : e8               [ 2] 	inx
ea21 : a4ea             [ 3] 	ldy df_tmpptrd+1
ea23 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             
                             ;* Binary save mem,hdr,addr,len,filename
ea26 :                       df_rt_bsave
                             	; Get mem type, 0=RAM, else VRAM
ea26 : 207bd8           [ 6] 	jsr df_rt_neval				; Get mem type
ea29 : 207ef1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
ea2c : e076             [ 2] 	cpx #'v'
ea2e : d003             [ 3] 	bne df_rt_bsave_tryr
ea30 : 18               [ 2] 	clc							; Clear C for vram
ea31 : 8007             [ 3] 	bra df_rt_bsave_savep
ea33 :                       df_rt_bsave_tryr
ea33 : e072             [ 2] 	cpx #'r'
ea35 : f002             [ 3] 	beq	 df_rt_bsave_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
ea39 :                       df_rt_bsave_setR
ea39 : 38               [ 2] 	sec							; Set C for ram
ea3a :                       df_rt_bsave_savep
                             	; save C, clear=VRAM, set=RAM
ea3a : 08               [ 3] 	php
                             
                             	; jump over comma
ea3b : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
ea3d : 207bd8           [ 6] 	jsr df_rt_neval				; Get header length
ea40 : 207ef1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
ea43 : da               [ 3] 	phx
                             
                             	; jump over comma
ea44 : e6ca             [ 5] 	inc df_exeoff
ea46 : 207bd8           [ 6] 	jsr df_rt_neval				; Get address
ea49 : 207ef1           [ 6] 	jsr df_ost_popInt			; X,A = Address
ea4c : 48               [ 3] 	pha
ea4d : da               [ 3] 	phx
                             
                             	; jump over comma
ea4e : e6ca             [ 5] 	inc df_exeoff
ea50 : 207bd8           [ 6] 	jsr df_rt_neval				; Get length
ea53 : 207ef1           [ 6] 	jsr df_ost_popInt			; X,A = Length
ea56 : 48               [ 3] 	pha
ea57 : da               [ 3] 	phx
                             
                             	; jump over comma
ea58 : e6ca             [ 5] 	inc df_exeoff
                             	; Process filename
ea5a : 20c5ea           [ 6] 	jsr df_rt_parse_file
ea5d : 204ec5           [ 6] 	jsr io_open_write
ea60 : b05a             [ 3] 	bcs df_rt_file_errc3		; Error condition resets t
                             
                             	; On the stack, we have lenlo,lenhi,adlo,adhi,he
ea62 : ba               [ 2] 	tsx
ea63 : bc0501           [ 4] 	ldy 0x105,x					; Get header len
ea66 : f008             [ 3] 	beq df_rt_bsave_byte
AS65 Assembler for R6502 [1.42].                                     Page  166
-------------------------------- bank\bank1.s --------------------------------

ea68 : a900             [ 2] 	lda #0						; Zero filler
ea6a :                       df_rt_bsave_header
ea6a : 2048c5           [ 6] 	jsr io_put_ch				; Write a byte to disk
ea6d : 88               [ 2] 	dey
ea6e : d0fa             [ 3] 	bne df_rt_bsave_header
ea70 :                       df_rt_bsave_byte
ea70 : ba               [ 2] 	tsx							; Restore SP to X
ea71 : bd0101           [ 4] 	lda 0x101,x					; low<>0 carry on
ea74 : d005             [ 3] 	bne df_rt_bsave_byte_do
ea76 : bd0201           [ 4] 	lda 0x102,x					; hi<>0 carry on
ea79 : f038             [ 3] 	beq df_rt_bsave_done		; else done
ea7b :                       df_rt_bsave_byte_do
ea7b : bd0601           [ 4] 	lda 0x106,x					; Get the C status
ea7e : 48               [ 3] 	pha
ea7f : 28               [ 4] 	plp							; C unaffected by next ops
                             	
ea80 : bd0301           [ 4] 	lda 0x103,x					; Get low address
ea83 : bc0401           [ 4] 	ldy 0x104,x					; Get high address
ea86 : aa               [ 2] 	tax							; X,Y contain address
                             
ea87 : b006             [ 3] 	bcs df_rt_bsave_ram			; RAM or VRAM?
                             	; Read from VRAM
ea89 : 98               [ 2] 	tya							; A needs to contain high byte
ea8a : 2006c4           [ 6] 	jsr _vdp_peek				; Peek VRAM
ea8d : 8006             [ 3] 	bra df_rt_bsave_write
ea8f :                       df_rt_bsave_ram
                             	; Read from RAM
ea8f : 86e3             [ 3] 	stx df_tmpptra				; Save address
ea91 : 84e4             [ 3] 	sty df_tmpptra+1
ea93 : b2e3             [ 5] 	lda (df_tmpptra)			; Peek RAM
ea95 :                       df_rt_bsave_write
ea95 : 2048c5           [ 6] 	jsr io_put_ch				; Write to disk
ea98 : ba               [ 2] 	tsx							; Get SP to X
ea99 : fe0301           [ 6] 	inc 0x103,x					; Increment low address
ea9c : d003             [ 3] 	bne df_rt_bsave_skiph
ea9e : fe0401           [ 6] 	inc 0x104,x					; Increment high address
eaa1 :                       df_rt_bsave_skiph
eaa1 : bc0101           [ 4] 	ldy 0x101,x					; Get low len byte
eaa4 : f005             [ 3] 	beq df_rt_bsave_dech
eaa6 : de0101           [ 6] 	dec 0x101,x					; A simple decrement
eaa9 : 80c5             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eaab :                       df_rt_bsave_dech
eaab : de0101           [ 6] 	dec 0x101,x					; Decrement low in readiness
eaae : de0201           [ 6] 	dec 0x102,x					; Decrement high
eab1 : 80bd             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eab3 :                       df_rt_bsave_done
                             	; Tidy the stack
eab3 : 68               [ 4] 	pla
eab4 : 68               [ 4] 	pla
eab5 : 68               [ 4] 	pla
eab6 : 68               [ 4] 	pla
eab7 : 68               [ 4] 	pla
eab8 : 68               [ 4] 	pla
eab9 : 4ce2ea           [ 3] 	jmp df_rt_file_cleanup		; Clean up FS
                             
eabc :                       df_rt_file_errc3				; Stepping stone!!!
eabc : b0fe             [ 3] 	bcs df_rt_file_errc3
                             
                             ;* common filename procesing routine
                             ;* 
eabe :                       df_rt_init_filename
                             	; evaluate string X,A has the string pointer
AS65 Assembler for R6502 [1.42].                                     Page  167
-------------------------------- bank\bank1.s --------------------------------

eabe : 207bd8           [ 6] 	jsr df_rt_neval
eac1 : 2076f1           [ 6] 	jsr df_ost_popStr
                             
eac4 : 60               [ 6] 	rts
                             	
                             ;* common file parsing routine
eac5 :                       df_rt_parse_file
eac5 : a902             [ 2] 	lda #2					; Only works for SD card now
eac7 : 202dc5           [ 6] 	jsr io_active_device
                             
                             	; now process filename, XA has pointer
eaca : 20beea           [ 6] 	jsr df_rt_init_filename
eacd : 60               [ 6] 	rts
                             ; save "file"
eace :                       df_rt_save
eace : 20c5ea           [ 6] 	jsr df_rt_parse_file
ead1 : 204ec5           [ 6] 	jsr io_open_write
ead4 : b063             [ 4] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
ead6 : a901             [ 2] 	lda #1
ead8 : 85eb             [ 3] 	sta df_tmpptre
eada : 206ce6           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
eadd : a90d             [ 2] 	lda #UTF_CR
eadf : 2048c5           [ 6] 	jsr io_put_ch
eae2 :                       df_rt_file_cleanup
                             	; close the file
eae2 : 2051c5           [ 6] 	jsr io_close
eae5 : 18               [ 2] 	clc
                             	; restore to default device io
eae6 : 4c2ac5           [ 3] 	jmp io_set_default
                             ;	clc
                             ;	rts
                             
                             ; load 'x',"file" where 0=serial, 1=SDCard
eae9 :                       df_rt_load
eae9 : 20c5ea           [ 6] 	jsr df_rt_parse_file
eaec : 204bc5           [ 6] 	jsr io_open_read
eaef : b048             [ 4] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
                             
                             	; Initialise to line 10 in scratch, scratch+1
eaf1 : a90a             [ 2] 	lda #10
eaf3 : 8d0009           [ 4] 	sta scratch
eaf6 : 9c0109           [ 4] 	stz scratch+1
eaf9 :                       df_rt_loadline
eaf9 : 18               [ 2] 	clc
eafa : 2054d7           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
eafd : 9013             [ 4] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
eaff : 9c800a           [ 4] 	stz df_tokbuff			; Offset to next line
eb02 : 9c810a           [ 4] 	stz df_tokbuff+1		; Clear line low
eb05 : 9c820a           [ 4] 	stz df_tokbuff+2		; Clear line high
eb08 : 64c1             [ 3] 	stz df_nxtstidx			; Clear next statement
eb0a : 64c0             [ 3] 	stz df_eolidx			; Clear end of line too
eb0c : a901             [ 2] 	lda #1					; Set immediate mode to get a 'Ready'
AS65 Assembler for R6502 [1.42].                                     Page  168
-------------------------------- bank\bank1.s --------------------------------

eb0e : 85a0             [ 3] 	sta df_immed			; But nothing to run
eb10 : 80d0             [ 4] 	bra df_rt_file_cleanup	; Ok now can close and do
eb12 :                       df_rt_ldtokenise
eb12 : 2094d0           [ 6] 	jsr df_lexer_line		; Tokenise loaded string - ju
                             	; check if line number == 0
eb15 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
eb18 : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
eb1b : d017             [ 3] 	bne df_rt_storeline		; No, then store the line
                             	; Else insert current line number to buffer posi
                             	; also add 10 to the current line number
eb1d : 18               [ 2] 	clc
eb1e : ad0009           [ 4] 	lda scratch				; Get line number lo
eb21 : 8d810a           [ 4] 	sta df_tokbuff+1		; Use current line number
eb24 : 690a             [ 2] 	adc #10					; But increment for next by 10
eb26 : 8d0009           [ 4] 	sta scratch
eb29 : ad0109           [ 4] 	lda scratch+1			; Get line number hi
eb2c : 8d820a           [ 4] 	sta df_tokbuff+2
eb2f : 6900             [ 2] 	adc #0
eb31 : 8d0109           [ 4] 	sta scratch+1
eb34 :                       df_rt_storeline
eb34 : 20bfd7           [ 6] 	jsr df_pg_line_number	; Save the line in the rig
eb37 : 80c0             [ 4] 	bra df_rt_loadline		; Continue with next until b
                             
                             ; Somwehere to go to raise a file error!
eb39 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
eb3b :                       df_rt_del
eb3b : 20beea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb3e : 208ec0           [ 6] 	jsr _fs_delete_w			; Delete file
eb41 : 60               [ 6] 	rts
                             
eb42 :                       df_rt_chdir
eb42 : 20beea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb45 : 205ec0           [ 6] 	jsr _fs_chdir_w				; Try and change directory
eb48 : b0ef             [ 3] 	bcs df_rt_file_errc
eb4a : 60               [ 6] 	rts
                             
eb4b :                       df_rt_mkdir
eb4b : 20beea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb4e : 2076c0           [ 6] 	jsr _fs_mkdir_w				; Try and make directory
eb51 : b0e6             [ 3] 	bcs df_rt_file_errc
eb53 : 60               [ 6] 	rts
                             
                             ; bload MEM,HEAD,ADDR,FNAME
eb54 :                       df_rt_bload
                             	; Get mem type, 0=RAM, else VRAM
eb54 : 207bd8           [ 6] 	jsr df_rt_neval				; Get mem type
eb57 : 207ef1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
eb5a : e076             [ 2] 	cpx #'v'
eb5c : d003             [ 3] 	bne df_rt_bload_tryr
eb5e : 18               [ 2] 	clc							; Clear C for vram
eb5f : 8007             [ 3] 	bra df_rt_bload_savep
eb61 :                       df_rt_bload_tryr
eb61 : e072             [ 2] 	cpx #'r'
eb63 : f002             [ 3] 	beq	 df_rt_bload_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
eb67 :                       df_rt_bload_setR
eb67 : 38               [ 2] 	sec							; Set C for ram
AS65 Assembler for R6502 [1.42].                                     Page  169
-------------------------------- bank\bank1.s --------------------------------

eb68 :                       df_rt_bload_savep
                             	; save C, clear=VRAM, set=RAM
eb68 : 08               [ 3] 	php
                             	; jump over comma
eb69 : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
eb6b : 207bd8           [ 6] 	jsr df_rt_neval				; Get header length
eb6e : 207ef1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
eb71 : da               [ 3] 	phx
                             	; jump over comma
eb72 : e6ca             [ 5] 	inc df_exeoff
eb74 : 8012             [ 3] 	bra df_rt_bvload
eb76 :                       df_rt_font
eb76 : 18               [ 2] 	clc							; Set to video
eb77 : 08               [ 3] 	php
eb78 : a900             [ 2] 	lda #0						; No header
eb7a : 48               [ 3] 	pha
eb7b : a901             [ 2] 	lda #1						; 0x100 address - hi
eb7d : 48               [ 3] 	pha
eb7e : a900             [ 2] 	lda #0						; 0x100 address - lo
eb80 : 48               [ 3] 	pha
eb81 : 800d             [ 3] 	bra df_rt_bload_file
eb83 :                       df_rt_vload
eb83 : 18               [ 2] 	clc							; Hardcode for VRAM
eb84 : 08               [ 3] 	php
eb85 : a207             [ 2] 	ldx #7						; Hardcode header length
eb87 : da               [ 3] 	phx
eb88 :                       df_rt_bvload
eb88 : 207bd8           [ 6] 	jsr df_rt_neval				; Get address
eb8b : 207ef1           [ 6] 	jsr df_ost_popInt			; X,A = Address
eb8e : 48               [ 3] 	pha
eb8f : da               [ 3] 	phx
eb90 :                       df_rt_bload_file
                             	; jump over comma
eb90 : e6ca             [ 5] 	inc df_exeoff
eb92 : 20c5ea           [ 6] 	jsr df_rt_parse_file
eb95 : 204bc5           [ 6] 	jsr io_open_read
eb98 : b09f             [ 3] 	bcs df_rt_file_errc		; Error condition resets th
                             	; On the stack:
                             	; 101+x = adlo
                             	; 102+x = adhi
                             	; 103+x = header length
                             	; 104+x = mem type (c=0 means video)
eb9a : ba               [ 2] 	tsx
eb9b : bc0301           [ 4] 	ldy 0x103,x					; Get header
eb9e : f008             [ 3] 	beq df_rt_vload_byte
eba0 :                       df_rt_vload_header
eba0 : 2045c5           [ 6] 	jsr io_get_ch				; Get a character
eba3 : b03c             [ 3] 	bcs df_rt_vload_done		; If EOF then done
eba5 : 88               [ 2] 	dey
eba6 : d0f8             [ 3] 	bne df_rt_vload_header
eba8 :                       df_rt_vload_byte
eba8 : ba               [ 2] 	tsx							; Restore SP to X
eba9 : bd0401           [ 4] 	lda 0x104,x					; Get the C status
ebac : 48               [ 3] 	pha
ebad : 28               [ 4] 	plp							; C unaffected by next ops
                             	
ebae : bd0101           [ 4] 	lda 0x101,x					; Get low address
ebb1 : bc0201           [ 4] 	ldy 0x102,x					; Get high address
ebb4 : aa               [ 2] 	tax							; X,Y contain address
                             
AS65 Assembler for R6502 [1.42].                                     Page  170
-------------------------------- bank\bank1.s --------------------------------

ebb5 : b014             [ 3] 	bcs df_rt_vload_ram			; RAM or VRAM?
                             	; Poke to VRAM but skip 0x1800-0x1fff
ebb7 : 2045c5           [ 6] 	jsr io_get_ch				; Get a character
ebba : b025             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ebbc : c018             [ 2] 	cpy #0x18					; If page # <= 0x17
ebbe : 9006             [ 3] 	bcc df_rt_vload_do_vpoke	; then vpoke
ebc0 : c020             [ 2] 	cpy #0x20					; Or page >= 0x20
ebc2 : b002             [ 3] 	bcs df_rt_vload_do_vpoke	; then vpoke
ebc4 : 8010             [ 3] 	bra df_rt_vload_next
ebc6 :                       df_rt_vload_do_vpoke
ebc6 : 201ec4           [ 6] 	jsr _vdp_poke				; Write to VRAM
ebc9 : 800b             [ 3] 	bra df_rt_vload_next
ebcb :                       df_rt_vload_ram
                             	; Poke to RAM
ebcb : 2045c5           [ 6] 	jsr io_get_ch				; Get a character
ebce : b011             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ebd0 : 86e3             [ 3] 	stx df_tmpptra				; Save address
ebd2 : 84e4             [ 3] 	sty df_tmpptra+1
ebd4 : 92e3             [ 5] 	sta (df_tmpptra)			; Poke byte to RAM
ebd6 :                       df_rt_vload_next
ebd6 : ba               [ 2] 	tsx							; Get SP to X
ebd7 : fe0101           [ 6] 	inc 0x101,x					; Increment low address
ebda : d003             [ 3] 	bne df_rt_vload_byte_skip
ebdc : fe0201           [ 6] 	inc 0x102,x					; Increment high address
ebdf :                       df_rt_vload_byte_skip
ebdf : 80c7             [ 3] 	bra df_rt_vload_byte		; Back for next video byte
ebe1 :                       df_rt_vload_done
                             	; Tidy the stack
ebe1 : 68               [ 4] 	pla
ebe2 : 68               [ 4] 	pla
ebe3 : 68               [ 4] 	pla
ebe4 : 68               [ 4] 	pla
ebe5 : 4ce2ea           [ 3] 	jmp df_rt_file_cleanup
                             
ebe8 :                       df_rt_dir_string				; Name of a directory
ebe8 : 3c4449523e202000      	db "<DIR>  ",0				; 7 chars + terminator
ebf0 :                       df_rt_dir
ebf0 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ebf3 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ebf5 : da               [ 3] 	phx
ebf6 :                       df_rt_dir_show_entry
ebf6 : 18               [ 2] 	clc							; Only looking for valid files
ebf7 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ebfa : b052             [ 4] 	bcs df_rt_dir_done			; If C then no more entries
ebfc : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ebfe : a909             [ 2] 	lda #hi(scratch)
ec00 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ec03 : a20c             [ 2] 	ldx #12						; Put a zero terminator after filen
ec05 : 9e0009           [ 5] 	stz scratch,x
ec08 : a200             [ 2] 	ldx #lo(scratch)			; Print filename
ec0a : a909             [ 2] 	lda #hi(scratch)
ec0c : 2093c5           [ 6] 	jsr io_print_line			; Print name
ec0f : 20ffc7           [ 6] 	jsr utilPrintSPC			; Gap
ec12 : a563             [ 3] 	lda fh_handle+FH_Attr		; Is it a directory?
ec14 : c910             [ 2] 	cmp #0x10
ec16 : d009             [ 3] 	bne df_rt_dir_size
ec18 : a2e8             [ 2] 	ldx #lo(df_rt_dir_string)	; Set up pointer to na
ec1a : a9eb             [ 2] 	lda #hi(df_rt_dir_string)
ec1c : 2093c5           [ 6] 	jsr io_print_line			; Print directory indicator
ec1f : 800d             [ 3] 	bra df_rt_dir_line
ec21 :                       df_rt_dir_size
ec21 : a223             [ 2] 	ldx #lo(scratch+35)			; Print size (already term
AS65 Assembler for R6502 [1.42].                                     Page  171
-------------------------------- bank\bank1.s --------------------------------

ec23 : a909             [ 2] 	lda #hi(scratch+35)
ec25 : 2093c5           [ 6] 	jsr io_print_line			; Print size - 5 chars left 
ec28 : 20ffc7           [ 6] 	jsr utilPrintSPC			; Gap
ec2b : 20ffc7           [ 6] 	jsr utilPrintSPC			; Gap
                             	; Printed exactly 20 chars per size
ec2e :                       df_rt_dir_line
ec2e : a527             [ 3] 	lda gr_scrngeom+gr_screen_w	; If 32 col screen t
ec30 : c920             [ 2] 	cmp #32
ec32 : d003             [ 3] 	bne df_rt_dir_skip_crlf
ec34 : 2007c8           [ 6] 	jsr utilPrintCRLF
ec37 :                       df_rt_dir_skip_crlf
ec37 : fa               [ 4] 	plx							; Decrement file line counter
ec38 : ca               [ 2] 	dex
ec39 : d00d             [ 3] 	bne df_rt_dir_skip_pause
ec3b : a255             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ec3d : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ec3f : 2093c5           [ 6] 	jsr io_print_line
ec42 : 38               [ 2] 	sec
ec43 : 2045c5           [ 6] 	jsr io_get_ch				; Wait for any key
ec46 : a214             [ 2] 	ldx #20						; Reset line counter
ec48 :                       df_rt_dir_skip_pause	
ec48 : da               [ 3] 	phx							; Save line counter
ec49 : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ec4c : 80a8             [ 4] 	bra df_rt_dir_show_entry	; Find another entry
ec4e :                       df_rt_dir_done
ec4e : fa               [ 4] 	plx							; Pop line counter
ec4f : a90d             [ 2] 	lda #UTF_CR					; Final CR
ec51 : 2048c5           [ 6] 	jsr io_put_ch
ec54 : 60               [ 6] 	rts
ec55 :                       df_rt_pausemsg
ec55 : 0d507265737320..      	db UTF_CR,"Press any key for more..",UTF_CR,0
                             
ec70 :                       df_rt_dirl						; Long listing format
ec70 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ec73 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ec75 : da               [ 3] 	phx
ec76 :                       df_rt_dirl_show_entry
ec76 : 18               [ 2] 	clc							; Only looking for valid files
ec77 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ec7a : b025             [ 3] 	bcs df_rt_dirl_done			; If C then no more entrie
ec7c : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ec7e : a909             [ 2] 	lda #hi(scratch)
ec80 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ec83 : a200             [ 2] 	ldx #lo(scratch)			; Print the whole entry
ec85 : a909             [ 2] 	lda #hi(scratch)
ec87 : 2093c5           [ 6] 	jsr io_print_line
ec8a :                       df_rt_dirl_line
ec8a : fa               [ 4] 	plx							; Decrement file line counter
ec8b : ca               [ 2] 	dex
ec8c : d00d             [ 3] 	bne df_rt_dirl_skip_pause
ec8e : a255             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ec90 : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ec92 : 2093c5           [ 6] 	jsr io_print_line
ec95 : 38               [ 2] 	sec
ec96 : 2045c5           [ 6] 	jsr io_get_ch				; Wait for any key
ec99 : a214             [ 2] 	ldx #20						; Reset line counter
ec9b :                       df_rt_dirl_skip_pause	
ec9b : da               [ 3] 	phx							; Save line counter
ec9c : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ec9f : 80d5             [ 3] 	bra df_rt_dirl_show_entry	; Find another entry
eca1 :                       df_rt_dirl_done
eca1 : fa               [ 4] 	plx							; Pop line counter
AS65 Assembler for R6502 [1.42].                                     Page  172
-------------------------------- bank\bank1.s --------------------------------

eca2 : 2007c8           [ 6] 	jsr utilPrintCRLF			; Final CR
eca5 : 60               [ 6] 	rts
                             	
                             ; reset %var
eca6 :                       df_rt_reset
                             	; now get lvar X,A from current statement
eca6 : 20bddc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
eca9 : 86e5             [ 3] 	stx df_tmpptrb
ecab : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
ecad : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; clear interrupts to access 3 byte vdp counter 
ecaf : 78               [ 2] 	sei
ecb0 : a510             [ 3] 	lda vdp_int_cnt
ecb2 : 92e5             [ 5] 	sta (df_tmpptrb)
ecb4 : a511             [ 3] 	lda vdp_int_cnt+1
ecb6 : 91e5             [ 5] 	sta (df_tmpptrb),y
ecb8 : a512             [ 3] 	lda vdp_int_cnt+2
ecba : c8               [ 2] 	iny
ecbb : 91e5             [ 5] 	sta (df_tmpptrb),y
                             	; restore interrupts asap
ecbd : 58               [ 2] 	cli
ecbe : 60               [ 6] 	rts
                             
                             ; timedate var$
                             ; output to string as dd/mm/yy hh:mm:ss
ecbf :                       df_rt_datetime
                             	; now get lvar X,A from current statement
ecbf : 20bddc           [ 6] 	jsr df_rt_getlvar
                             	; and save it
ecc2 : da               [ 3] 	phx
ecc3 : 48               [ 3] 	pha
                             	; Point to 6 bytes of scratch
ecc4 : a200             [ 2] 	ldx #lo(scratch)
ecc6 : a909             [ 2] 	lda #hi(scratch)
                             	; Populate timedate as hmsdmy
ecc8 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Get destination pointer back
eccb : 68               [ 4] 	pla
eccc : 85e4             [ 3] 	sta df_tmpptra+1
ecce : 68               [ 4] 	pla
eccf : 85e3             [ 3] 	sta df_tmpptra
                             	; Start at first char of destination
ecd1 : a000             [ 2] 	ldy #0
                             	; Get days binary and convert to BCD
ecd3 : ae0309           [ 4] 	ldx scratch+3
                             	; Separator character
ecd6 : a92f             [ 2] 	lda #'/'
ecd8 : 2004ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get months binary and convert to BCD
ecdb : ae0409           [ 4] 	ldx scratch+4
                             	; Separator character
ecde : a92f             [ 2] 	lda #'/'
ece0 : 2004ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get years binary and convert to BCD
ece3 : ae0509           [ 4] 	ldx scratch+5
                             	; Separator character is space between date and 
ece6 : a920             [ 2] 	lda #' '
ece8 : 2004ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get hours binary and convert to BCD
AS65 Assembler for R6502 [1.42].                                     Page  173
-------------------------------- bank\bank1.s --------------------------------

eceb : ae0009           [ 4] 	ldx scratch+0
                             	; Separator character
ecee : a93a             [ 2] 	lda #':'
ecf0 : 2004ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get minutes binary and convert to BCD
ecf3 : ae0109           [ 4] 	ldx scratch+1
                             	; Separator character
ecf6 : a93a             [ 2] 	lda #':'
ecf8 : 2004ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get seconds binary and convert to BCD
ecfb : ae0209           [ 4] 	ldx scratch+2
                             	; Separator character is null to terminate strin
ecfe : a900             [ 2] 	lda #0
ed00 : 2004ed           [ 6] 	jsr df_rt_datetime_conv
ed03 : 60               [ 6] 	rts
ed04 :                       df_rt_datetime_conv
ed04 : 48               [ 3] 	pha
ed05 : a900             [ 2] 	lda #0
ed07 : 2037ca           [ 6] 	jsr word_to_bcd
                             	; We only need least 2 BCD digits
ed0a : a585             [ 3] 	lda num_a+0
                             	; put nibbles in A,X
ed0c : 2034c8           [ 6] 	jsr str_a_to_x
                             	; And save to destination
ed0f : 91e3             [ 5] 	sta (df_tmpptra),y
ed11 : c8               [ 2] 	iny
ed12 : 8a               [ 2] 	txa
ed13 : 91e3             [ 5] 	sta (df_tmpptra),y
ed15 : c8               [ 2] 	iny
ed16 : 68               [ 4] 	pla
ed17 : 91e3             [ 5] 	sta (df_tmpptra),y
ed19 : c8               [ 2] 	iny
ed1a : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
ed1b :                       df_rt_deek
ed1b : 38               [ 2] 	sec
ed1c : 8001             [ 3] 	bra df_rt_readbyte
ed1e :                       df_rt_peek
ed1e : 18               [ 2] 	clc
ed1f :                       df_rt_readbyte
ed1f : 08               [ 3] 	php
                             ;	inc df_exeoff
ed20 : 2075d8           [ 6] 	jsr df_rt_getnval
ed23 : 86e3             [ 3] 	stx df_tmpptra
ed25 : 85e4             [ 3] 	sta df_tmpptra+1
ed27 : b2e3             [ 5] 	lda (df_tmpptra)
ed29 : aa               [ 2] 	tax
ed2a : a900             [ 2] 	lda #0
ed2c : 28               [ 4] 	plp
ed2d : 9005             [ 3] 	bcc df_rt_readbyte_skip
ed2f : 18               [ 2] 	clc
ed30 : a001             [ 2] 	ldy #1
ed32 : b1e3             [ 5] 	lda (df_tmpptra),y
ed34 :                       df_rt_readbyte_skip
ed34 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
ed37 :                       df_rt_vpeek
                             ;	inc df_exeoff
ed37 : 2075d8           [ 6] 	jsr df_rt_getnval
ed3a : 2006c4           [ 6] 	jsr _vdp_peek
AS65 Assembler for R6502 [1.42].                                     Page  174
-------------------------------- bank\bank1.s --------------------------------

ed3d : aa               [ 2] 	tax
ed3e : a900             [ 2] 	lda #0
ed40 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
ed43 :                       df_rt_nvpeek
                             ;	inc df_exeoff
ed43 : 2075d8           [ 6] 	jsr df_rt_getnval
ed46 : 2096c4           [ 6] 	jsr _rtc_nvread
ed49 : aa               [ 2] 	tax
ed4a : a900             [ 2] 	lda #0
ed4c : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
ed4f :                       df_rt_rnd
                             ;	inc df_exeoff
ed4f : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
ed52 : e000             [ 2] 	cpx #0
ed54 : d017             [ 3] 	bne df_rt_rnd_set
ed56 : c900             [ 2] 	cmp #0
ed58 : d013             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
ed5a : a5da             [ 3] 	lda df_rnd+1
ed5c : 4a               [ 2] 	lsr a
ed5d : 26d9             [ 5] 	rol df_rnd
ed5f : 9002             [ 3] 	bcc df_rt_rnd_noeor
ed61 : 49b4             [ 2] 	eor #0xb4
ed63 :                       df_rt_rnd_noeor
ed63 : 85da             [ 3] 	sta df_rnd+1
ed65 : 45d9             [ 3] 	eor df_rnd
ed67 : aa               [ 2] 	tax
ed68 : a900             [ 2] 	lda #0
ed6a : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             	; else set the seed to that number and done
ed6d :                       df_rt_rnd_set
ed6d : 86d9             [ 3] 	stx df_rnd
ed6f : 85da             [ 3] 	sta df_rnd+1
ed71 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; Get joystick status	
ed74 :                       df_rt_stick
                             ;	inc df_exeoff
ed74 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ed77 : 86e3             [ 3] 	stx df_tmpptra
ed79 : 20d6c3           [ 6] 	jsr _snd_get_joy0
ed7c : 98               [ 2] 	tya
                             	; invert the bits so that 1=switch on
ed7d : 49ff             [ 2] 	eor #0xff
ed7f : 25e3             [ 3] 	and df_tmpptra
ed81 : aa               [ 2] 	tax
ed82 : a900             [ 2] 	lda #0
ed84 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; l = msbyte(x)
ed87 :                       df_rt_msbyte
                             ;	inc df_exeoff
ed87 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; only high byte is used
AS65 Assembler for R6502 [1.42].                                     Page  175
-------------------------------- bank\bank1.s --------------------------------

ed8a : aa               [ 2] 	tax
ed8b : a900             [ 2] 	lda #0
ed8d : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; l = lsbyte(x)
ed90 :                       df_rt_lsbyte
                             ;	inc df_exeoff
ed90 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ed93 : a900             [ 2] 	lda #0
ed95 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
ed98 :                       df_rt_mem
                             ;	inc df_exeoff
ed98 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ed9b : e001             [ 2] 	cpx #1
ed9d : f016             [ 3] 	beq df_rt_mem_prg
ed9f : e002             [ 2] 	cpx #2
eda1 : f024             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
eda3 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
edb3 : 8022             [ 3] 	bra df_rt_mem_calc
edb5 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
edc5 : 8010             [ 3] 	bra df_rt_mem_calc
edc7 :                       df_rt_mem_var
                             	_cpyZPWord df_vntend,df_tmpptra
                             
                             	_cpyZPWord df_vvtstrt,df_tmpptrb
                             
edd7 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
edd7 : 38               [ 2] 	sec
edd8 : a5e3             [ 3] 	lda df_tmpptra
edda : e5e5             [ 3] 	sbc df_tmpptrb
eddc : aa               [ 2] 	tax
eddd : a5e4             [ 3] 	lda df_tmpptra+1
eddf : e5e6             [ 3] 	sbc df_tmpptrb+1
ede1 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; %k=key(%sync) %sync>=1 means sync
ede4 :                       df_rt_key
                             ;	inc df_exeoff
ede4 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=1 if x==0 else x>0 makes c=0
ede7 : e001             [ 2] 	cpx #1
ede9 : 2045c5           [ 6] 	jsr io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page  176
-------------------------------- bank\bank1.s --------------------------------

edec : 9003             [ 3] 	bcc df_rt_key_valid
                             	; zero out A
edee : a900             [ 2] 	lda #0
edf0 : 18               [ 2] 	clc
edf1 :                       df_rt_key_valid
edf1 : aa               [ 2] 	tax
edf2 : a900             [ 2] 	lda #0
edf4 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             	
                             ; s = scrn(x,y)
edf7 :                       df_rt_scrn
                             ;	inc df_exeoff
edf7 : 202fdb           [ 6] 	jsr df_rt_parm_2ints
edfa : a6e3             [ 3] 	ldx df_tmpptra
edfc : a4e5             [ 3] 	ldy df_tmpptrb
edfe : 208ec3           [ 6] 	jsr _gr_get
ee01 : aa               [ 2] 	tax
ee02 : a900             [ 2] 	lda #0
ee04 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             ; p = pixel(x,y)
ee07 :                       df_rt_pixel
                             ;	inc df_exeoff
ee07 : 202fdb           [ 6] 	jsr df_rt_parm_2ints
ee0a : a6e3             [ 3] 	ldx df_tmpptra
ee0c : a4e5             [ 3] 	ldy df_tmpptrb
ee0e : a900             [ 2] 	lda #0
ee10 : 4c5bf1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %e=elapsed(%var)
ee13 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
ee13 : 20bddc           [ 6] 	jsr df_rt_getlvar
ee16 : e6ca             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
ee18 : 86e5             [ 3] 	stx df_tmpptrb
ee1a : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
                             	; turn off interrupts while reading vdp lo,hi
ee1c : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
ee1e : 38               [ 2] 	sec
                             	; disable interrupts to access vdp counter
ee1f : 78               [ 2] 	sei
ee20 : a510             [ 3] 	lda vdp_int_cnt
ee22 : f2e5             [ 5] 	sbc (df_tmpptrb)
ee24 : aa               [ 2] 	tax
ee25 : a511             [ 3] 	lda vdp_int_cnt+1
                             	; restore interrupts asap
ee27 : 58               [ 2] 	cli
ee28 : f1e5             [ 5] 	sbc (df_tmpptrb),y
ee2a : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
ee2d :                       df_rt_call
                             ;	inc df_exeoff
ee2d : 2051db           [ 6] 	jsr df_rt_parm_4ints
ee30 : a5e5             [ 3] 	lda df_tmpptrb				; load A
ee32 : a6e7             [ 3] 	ldx	df_tmpptrc				; load X
ee34 : a4e9             [ 3] 	ldy df_tmpptrd				; load Y
ee36 : 203cee           [ 6] 	jsr df_rt_calljsr
ee39 :                       df_rt_push_int1
ee39 : 4c5ef1           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value	
AS65 Assembler for R6502 [1.42].                                     Page  177
-------------------------------- bank\bank1.s --------------------------------

ee3c :                       df_rt_calljsr
ee3c : 6ce300           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
                             
ee3f :                       df_rt_sgn
                             ;	inc df_exeoff
ee3f : 2075d8           [ 6] 	jsr df_rt_getnval
ee42 : 86e3             [ 3] 	stx df_tmpptra
ee44 : 05e3             [ 3] 	ora df_tmpptra
ee46 : f00f             [ 3] 	beq df_rt_sgn_z
ee48 : 2980             [ 2] 	and #0x80
ee4a : d006             [ 3] 	bne df_rt_sgn_n
ee4c : a201             [ 2] 	ldx #1
ee4e : a900             [ 2] 	lda #0
ee50 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
ee52 :                       df_rt_sgn_n
ee52 : a2ff             [ 2] 	ldx #0xff
ee54 : 8a               [ 2] 	txa
ee55 : d0e2             [ 3] 	bne df_rt_push_int1			; Always
ee57 :                       df_rt_sgn_z
ee57 : a200             [ 2] 	ldx #0
ee59 : 8a               [ 2] 	txa
ee5a : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
ee5c :                       df_rt_addr
                             	; get lvar X,A from current statement
ee5c : 20bddc           [ 6] 	jsr df_rt_getlvar
ee5f : e6ca             [ 5] 	inc df_exeoff
ee61 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
ee64 :                       df_rt_strlen_common
ee64 : 86e3             [ 3] 	stx df_tmpptra
ee66 : 85e4             [ 3] 	sta df_tmpptra+1
ee68 : a0ff             [ 2] 	ldy #0xff
ee6a :                       df_rt_strlen_count
ee6a : c8               [ 2] 	iny
ee6b : b1e3             [ 5] 	lda (df_tmpptra),y
ee6d : d0fb             [ 3] 	bne df_rt_strlen_count
ee6f : 98               [ 2] 	tya
ee70 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
ee71 :                       df_rt_str_extract
                             	; source string
ee71 : 2076f1           [ 6] 	jsr df_ost_popStr
ee74 : 86e3             [ 3] 	stx df_tmpptra
ee76 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
ee78 : a5bc             [ 3] 	lda df_sevalptr
ee7a : 85e5             [ 3] 	sta df_tmpptrb
ee7c : a5bd             [ 3] 	lda df_sevalptr+1
ee7e : 85e6             [ 3] 	sta df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  178
-------------------------------- bank\bank1.s --------------------------------

                             	; start pos
ee80 : a4e7             [ 3] 	ldy df_tmpptrc
ee82 : a200             [ 2] 	ldx #0
ee84 :                       df_rt_str_cpy_ch
ee84 : c4e9             [ 3] 	cpy df_tmpptrd
ee86 : f011             [ 3] 	beq df_str_src_end
ee88 : b1e3             [ 5] 	lda (df_tmpptra),y
ee8a : f00d             [ 3] 	beq df_str_src_end
ee8c : 81e5             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
ee94 : c8               [ 2] 	iny
ee95 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
ee99 :                       df_str_src_end
ee99 : a900             [ 2] 	lda #0
ee9b : 81e5             [ 6] 	sta (df_tmpptrb,x)
ee9d : a6bc             [ 3] 	ldx df_sevalptr
ee9f : a5bd             [ 3] 	lda df_sevalptr+1
eea1 : 4c53f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
eea4 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
eea4 : 2075d8           [ 6] 	jsr df_rt_getnval
eea7 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
eea9 : 8a               [ 2] 	txa
eeaa : 91bc             [ 5] 	sta (df_sevalptr),y
eeac : c8               [ 2] 	iny
                             	; zero terminator
eead : a900             [ 2] 	lda #0
eeaf : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
eeb1 : a6bc             [ 3] 	ldx df_sevalptr
eeb3 : a5bd             [ 3] 	lda df_sevalptr+1
eeb5 : 4c53f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
eeb8 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
eeb8 : 2075d8           [ 6] 	jsr df_rt_getnval
eebb : 85e3             [ 3] 	sta df_tmpptra	; Save the high byte
eebd : 8a               [ 2] 	txa				; Convert low byte first
eebe : 2034c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
eec1 : 85e5             [ 3] 	sta df_tmpptrb
eec3 : 8a               [ 2] 	txa				; Push low digit of low byte from X
eec4 : 48               [ 3] 	pha
eec5 : a5e5             [ 3] 	lda df_tmpptrb	; Get A back from temp
eec7 : 48               [ 3] 	pha				; Push high digit of low byte
eec8 : a5e3             [ 3] 	lda df_tmpptra	; Get the high byte
eeca : 2034c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
eecd : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
eecf : 91bc             [ 5] 	sta (df_sevalptr),y
eed1 : c8               [ 2] 	iny
                             	; hi/lo
eed2 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  179
-------------------------------- bank\bank1.s --------------------------------

eed3 : 91bc             [ 5] 	sta (df_sevalptr),y
eed5 : c8               [ 2] 	iny
                             	; lo/hi
eed6 : 68               [ 4] 	pla
eed7 : 91bc             [ 5] 	sta (df_sevalptr),y
eed9 : c8               [ 2] 	iny
                             	; lo/lo
eeda : 68               [ 4] 	pla
eedb : 91bc             [ 5] 	sta (df_sevalptr),y
eedd : c8               [ 2] 	iny
                             	; zero terminator
eede : a900             [ 2] 	lda #0
eee0 : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
eee2 : a6bc             [ 3] 	ldx df_sevalptr
eee4 : a5bd             [ 3] 	lda df_sevalptr+1
eee6 : 4c53f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
eee9 :                       df_rt_dec
                             ;	inc df_exeoff
                             	; create dec digits
eee9 : 2075d8           [ 6] 	jsr df_rt_getnval
eeec : 85e3             [ 3] 	sta df_tmpptra	; Save the high byte
eeee : 8a               [ 2] 	txa				; Convert low byte first
eeef : 2034c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
eef2 : 85e5             [ 3] 	sta df_tmpptrb
eef4 : 8a               [ 2] 	txa				; Push low digit of low byte from X
eef5 : 48               [ 3] 	pha
eef6 : a5e5             [ 3] 	lda df_tmpptrb	; Get A back from temp
                             	; point to seval scratch area
eef8 : a6bc             [ 3] 	ldx df_sevalptr
eefa : a5bd             [ 3] 	lda df_sevalptr+1
eefc : 4c53f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
eeff :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
eeff : 202bd9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
ef02 : e6ca             [ 5] 	inc df_exeoff
ef04 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
ef07 : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
ef09 : a000             [ 2] 	ldy #0
ef0b : 84e7             [ 3] 	sty df_tmpptrc
ef0d : 4c71ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
ef10 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
ef10 : 202bd9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
ef13 : e6ca             [ 5] 	inc df_exeoff
ef15 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
AS65 Assembler for R6502 [1.42].                                     Page  180
-------------------------------- bank\bank1.s --------------------------------

ef18 : 86e7             [ 3] 	stx df_tmpptrc
                             	; end pos = len
ef1a : a6bc             [ 3] 	ldx df_sevalptr
ef1c : a5bd             [ 3] 	lda df_sevalptr+1
ef1e : 2064ee           [ 6] 	jsr df_rt_strlen_common
ef21 : 85e9             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
ef23 : 38               [ 2] 	sec
ef24 : e5e7             [ 3] 	sbc df_tmpptrc
ef26 : 85e7             [ 3] 	sta df_tmpptrc
ef28 : 4c71ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
ef2b :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
ef2b : 202bd9           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
ef2e : e6ca             [ 5] 	inc df_exeoff
ef30 : 207bd8           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
ef33 : e6ca             [ 5] 	inc df_exeoff
ef35 : 2075d8           [ 6] 	jsr df_rt_getnval
ef38 : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
ef3a : 207ef1           [ 6] 	jsr df_ost_popInt
ef3d : ca               [ 2] 	dex					; zero offset rather than 1
ef3e : 86e7             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
ef40 : 8a               [ 2] 	txa
ef41 : 18               [ 2] 	clc
ef42 : 65e9             [ 3] 	adc df_tmpptrd
ef44 : 85e9             [ 3] 	sta df_tmpptrd
ef46 : 4c71ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
ef49 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
ef49 : 202bd9           [ 6] 	jsr df_rt_seval
ef4c : 2076f1           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
ef4f : 2064ee           [ 6] 	jsr df_rt_strlen_common
ef52 : 4c5bf1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
ef55 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
ef55 : 202bd9           [ 6] 	jsr df_rt_seval
ef58 : 2076f1           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
ef5b : 86e3             [ 3] 	stx df_tmpptra
ef5d : 85e4             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
ef5f : a200             [ 2] 	ldx #0
ef61 : a1e3             [ 6] 	lda (df_tmpptra,x)
ef63 : 4c5bf1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
ef66 :                       df_rt_val
AS65 Assembler for R6502 [1.42].                                     Page  181
-------------------------------- bank\bank1.s --------------------------------

                             ;	inc df_exeoff
                             	; evaluate the string
ef66 : 202bd9           [ 6] 	jsr df_rt_seval
ef69 : 2076f1           [ 6] 	jsr df_ost_popStr
ef6c : a000             [ 2] 	ldy #0				; any numeric format
ef6e : 207fc8           [ 6] 	jsr con_n_to_a		; result in num_a
ef71 : b007             [ 3] 	bcs df_rt_val_err
ef73 : a685             [ 3] 	ldx num_a
ef75 : a586             [ 3] 	lda num_a+1
                             	; Save as an int
ef77 : 4c5ef1           [ 3] 	jmp df_ost_pushInt
ef7a :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
ef7c :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
                             ;* ok=fcreate(filename)
ef7e :                       df_rt_fcreate
ef7e : 20c5ea           [ 6] 	jsr df_rt_parse_file
ef81 : 204ec5           [ 6] 	jsr io_open_write
ef84 :                       df_rt_fcreate_check
                             	; Assume -1 which is OK
ef84 : a2ff             [ 2] 	ldx #-1
ef86 : 9002             [ 3] 	bcc df_rt_fcreate_ok
                             	; Else 0 which is error
ef88 : a200             [ 2] 	ldx #0
ef8a :                       df_rt_fcreate_ok
ef8a : 8a               [ 2] 	txa				; make A=X
                             	; Save as an int
ef8b : 205ef1           [ 6] 	jsr df_ost_pushInt
                             	; Ensure we're back to the normal IO device
ef8e : 4c2ac5           [ 3] 	jmp io_set_default
                             	
                             ;* ok=fopen(filename)
ef91 :                       df_rt_fopen
ef91 : 20c5ea           [ 6] 	jsr df_rt_parse_file
ef94 : 204bc5           [ 6] 	jsr io_open_read
ef97 : 80eb             [ 3] 	bra df_rt_fcreate_check
                             
                             ;* ok=fclose()
ef99 :                       df_rt_fclose
ef99 : a902             [ 2] 	lda #2					; Only works for SD card now
ef9b : 202dc5           [ 6] 	jsr io_active_device
ef9e : 2051c5           [ 6] 	jsr io_close
                             	; Ensure we're back to the normal IO device
efa1 : 4c2ac5           [ 3] 	jmp io_set_default
                             
                             ;* device <num>
efa4 :                       df_rt_device
efa4 : 2075d8           [ 6] 	jsr df_rt_getnval
                             	; Force update of status register
efa7 : 8a               [ 2] 	txa
efa8 : 300a             [ 3] 	bmi df_rt_device_default
                             	; Stop dflat from trying to read inputs for Ctrl
efaa : a59e             [ 3] 	lda df_checkmsk
efac : 0980             [ 2] 	ora #0x80
efae : 859e             [ 3] 	sta df_checkmsk
efb0 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  182
-------------------------------- bank\bank1.s --------------------------------

                             	; A contains the device to activate
efb1 : 4c2dc5           [ 3] 	jmp io_active_device
efb4 :                       df_rt_device_default
                             	; Allow dflat to read inputs for Ctrl-C
efb4 : a59e             [ 3] 	lda df_checkmsk
efb6 : 297f             [ 2] 	and #0x7f
efb8 : 859e             [ 3] 	sta df_checkmsk
efba : 4c2ac5           [ 3] 	jmp io_set_default
                             
efbd :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
efbd :                       mod_sz_proc_s
                             
efbd :                       df_rt_proc_parmerr
efbd :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
efbf :                       df_rt_proc
                             	; move past escape token
efbf : a4ca             [ 3] 	ldy df_exeoff
efc1 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
efc2 : b1c8             [ 5] 	lda (df_currlin),y
efc4 : aa               [ 2] 	tax
efc5 : c8               [ 2] 	iny
efc6 : b1c8             [ 5] 	lda (df_currlin),y
efc8 : c8               [ 2] 	iny
efc9 : 84ca             [ 3] 	sty df_exeoff
efcb : 86d0             [ 3] 	stx df_procptr
efcd : 85d1             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
efcf : a003             [ 2] 	ldy #DFVVT_DIM1
efd1 : b1d0             [ 5] 	lda (df_procptr),y
efd3 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
AS65 Assembler for R6502 [1.42].                                     Page  183
-------------------------------- bank\bank1.s --------------------------------

efd5 : 205ddc           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
efd8 : 8445             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
efda : a002             [ 2] 	ldy #DFVVT_HI
efdc : 91d0             [ 5] 	sta (df_procptr),y
efde : a001             [ 2] 	ldy #DFVVT_LO
efe0 : 8a               [ 2] 	txa
efe1 : 91d0             [ 5] 	sta (df_procptr),y
efe3 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
efe5 : a545             [ 3] 	lda tmp_d
efe7 : 91d0             [ 5] 	sta (df_procptr),y
efe9 :                       df_rt_proc_addr
                             	; move past first open bracket
efe9 : e6ca             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
efeb : a004             [ 2] 	ldy #DFVVT_DIM2
efed : b1d0             [ 5] 	lda (df_procptr),y	
efef : f018             [ 4] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
eff1 : 48               [ 3] 	pha
                             
eff2 : c6ca             [ 5] 	dec df_exeoff		; Pre-adjust
eff4 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
eff4 : e6ca             [ 5] 	inc df_exeoff
                             	; if at end then error!
eff6 : a4ca             [ 3] 	ldy df_exeoff
eff8 : b1c8             [ 5] 	lda (df_currlin),y
effa : c929             [ 2] 	cmp #')'
effc : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
effe : 207bd8           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f001 : 68               [ 4] 	pla
                             	; decrement
f002 : 38               [ 2] 	sec
f003 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f005 : 48               [ 3] 	pha
                             	; go back and do all required parms
f006 : d0ec             [ 4] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f008 :                       df_rt_proc_parm_done
f008 : 68               [ 4] 	pla
f009 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f009 : a4ca             [ 3] 	ldy df_exeoff
f00b : b1c8             [ 5] 	lda (df_currlin),y
f00d : c929             [ 2] 	cmp #')'
f00f : d0ac             [ 4] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f011 : a6d0             [ 3] 	ldx df_procptr
f013 : a5d1             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
AS65 Assembler for R6502 [1.42].                                     Page  184
-------------------------------- bank\bank1.s --------------------------------

f015 :                       df_rt_exec_proc
                             	; save slot address
f015 : 86e3             [ 3] 	stx df_tmpptra
f017 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f019 : a5c8             [ 3] 	lda df_currlin
f01b : 48               [ 3] 	pha
f01c : a5c9             [ 3] 	lda df_currlin+1
f01e : 48               [ 3] 	pha
f01f : a5ca             [ 3] 	lda df_exeoff
f021 : 48               [ 3] 	pha
f022 : a5c1             [ 3] 	lda df_nxtstidx
f024 : 48               [ 3] 	pha
f025 : a5c2             [ 3] 	lda df_curstidx
f027 : 48               [ 3] 	pha
f028 : a5c0             [ 3] 	lda df_eolidx
f02a : 48               [ 3] 	pha
f02b : a5d5             [ 3] 	lda df_ifnest
f02d : 48               [ 3] 	pha
                             
                             	; now initialise the data
f02e : a001             [ 2] 	ldy #DFVVT_LO
f030 : b1e3             [ 5] 	lda (df_tmpptra),y
f032 : 85c8             [ 3] 	sta df_currlin
f034 : c8               [ 2] 	iny
f035 : b1e3             [ 5] 	lda (df_tmpptra),y
f037 : 85c9             [ 3] 	sta df_currlin+1
f039 : c8               [ 2] 	iny
f03a : b1e3             [ 5] 	lda (df_tmpptra),y
f03c : 85ca             [ 3] 	sta df_exeoff
f03e : 85c2             [ 3] 	sta df_curstidx
f040 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f042 : b1c8             [ 5] 	lda (df_currlin),y
f044 : 85c1             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f046 : 209fdb           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f049 : 68               [ 4] 	pla
f04a : 85d5             [ 3] 	sta df_ifnest
f04c : 68               [ 4] 	pla
f04d : 85c0             [ 3] 	sta df_eolidx
f04f : 68               [ 4] 	pla
f050 : 85c2             [ 3] 	sta df_curstidx
f052 : 68               [ 4] 	pla
f053 : 85c1             [ 3] 	sta df_nxtstidx
f055 : 68               [ 4] 	pla
f056 : 85ca             [ 3] 	sta df_exeoff
f058 : 68               [ 4] 	pla
f059 : 85c9             [ 3] 	sta df_currlin+1
f05b : 68               [ 4] 	pla
f05c : 85c8             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f05e : 60               [ 6] 	rts
                             
                             
f05f :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f05f : a6ca             [ 3] 	ldx df_exeoff
f061 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  185
-------------------------------- bank\bank1.s --------------------------------

f062 : e8               [ 2] 	inx
f063 : e8               [ 2] 	inx
f064 : 86ca             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f066 : a201             [ 2] 	ldx #1									; index in to scratch
f068 : 86ce             [ 3] 	stx df_procargs							; Proc args is the #args-1
f06a : a4ca             [ 3] 	ldy df_exeoff
f06c :                       df_rt_def_find_var
f06c : c8               [ 2] 	iny
f06d : b1c8             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f06f : c929             [ 2] 	cmp #')'
f071 : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f073 : c911             [ 2] 	cmp #DFTK_VAR
f075 : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f077 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f079 : d0f1             [ 3] 	bne df_rt_def_find_var
f07b :                       df_rt_def_got_varparm
                             	; set high bit
f07b : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f07d : c8               [ 2] 	iny
f07e :                       df_rt_def_got_var
f07e : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f080 : 9d0009           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f083 : c8               [ 2] 	iny
f084 : b1c8             [ 5] 	lda (df_currlin),y
f086 : 9d2009           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f089 : c8               [ 2] 	iny
f08a : b1c8             [ 5] 	lda (df_currlin),y
f08c : 9d4009           [ 5] 	sta scratch+64,x
f08f : e8               [ 2] 	inx
f090 : e6ce             [ 5] 	inc df_procargs
f092 : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f094 :                       df_rt_def_parm_done
                             	; save index that we got to
f094 : 84ca             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f096 : 86cd             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f098 : a900             [ 2] 	lda #0
f09a : 85cf             [ 3] 	sta df_procloc
f09c :                       df_rt_def_load_var
f09c : c6ce             [ 5] 	dec df_procargs
f09e : f038             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f0a0 : c6cd             [ 5] 	dec df_procmode
f0a2 : a6cd             [ 3] 	ldx df_procmode
f0a4 : bd2009           [ 4] 	lda scratch+32,x
f0a7 : 85e3             [ 3] 	sta df_tmpptra
f0a9 : bd4009           [ 4] 	lda scratch+64,x
f0ac : 85e4             [ 3] 	sta df_tmpptra+1
                             	
f0ae : bd0009           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
AS65 Assembler for R6502 [1.42].                                     Page  186
-------------------------------- bank\bank1.s --------------------------------

f0b1 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f0b3 : a6e3             [ 3] 	ldx df_tmpptra
f0b5 : a5e4             [ 3] 	lda df_tmpptra+1
f0b7 : 200cf1           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f0ba : e6cf             [ 5] 	inc df_procloc
f0bc :                       df_rt_def_initialise_parm
                             	; load type
f0bc : a000             [ 2] 	ldy #DFVVT_TYPE
f0be : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; if array or string type then pop pointer from 
f0c0 : 2984             [ 2] 	and #DFVVT_STR|DFVVT_ARRY
f0c2 : f006             [ 3] 	beq df_rt_def_load_var_int
f0c4 : 207af1           [ 6] 	jsr df_ost_popPtr
f0c7 : 4ccdf0           [ 3] 	jmp df_rt_def_load_var_int_skip
f0ca :                       df_rt_def_load_var_int
                             	; must be int pop it from operator stack
f0ca : 207ef1           [ 6] 	jsr df_ost_popInt
f0cd :                       df_rt_def_load_var_int_skip
                             	; update the variable
f0cd : a002             [ 2] 	ldy #DFVVT_HI
f0cf : 91e3             [ 5] 	sta (df_tmpptra),y
f0d1 : 88               [ 2] 	dey
f0d2 : 8a               [ 2] 	txa
f0d3 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	
f0d5 : 4c9cf0           [ 3] 	jmp df_rt_def_load_var
f0d8 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f0d8 : a5cf             [ 3] 	lda df_procloc
f0da : 2020f1           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f0dd : 18               [ 2] 	clc
f0de : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f0df :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f0df : 207bd8           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f0e2 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f0e2 : 2029f1           [ 6] 	jsr df_rst_popByte
f0e5 : aa               [ 2] 	tax
f0e6 : f020             [ 4] 	beq df_rt_proc_unload_done
f0e8 :                       df_rt_proc_unloadvar
f0e8 : 8a               [ 2] 	txa
f0e9 : 48               [ 3] 	pha
                             	; var value is popped first then index
AS65 Assembler for R6502 [1.42].                                     Page  187
-------------------------------- bank\bank1.s --------------------------------

                             	; get a word and put in tmpb
f0ea : 2046f1           [ 6] 	jsr df_rst_popWord
f0ed : 86e5             [ 3] 	stx df_tmpptrb
f0ef : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f0f1 : 2046f1           [ 6] 	jsr df_rst_popWord
f0f4 : 86e3             [ 3] 	stx df_tmpptra
f0f6 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f0f8 : a001             [ 2] 	ldy #DFVVT_LO
f0fa : a5e5             [ 3] 	lda df_tmpptrb
f0fc : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f0fe : c8               [ 2] 	iny
f0ff : a5e6             [ 3] 	lda df_tmpptrb+1
f101 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f103 : 68               [ 4] 	pla
f104 : aa               [ 2] 	tax
f105 : ca               [ 2] 	dex
f106 : d0e0             [ 4] 	bne df_rt_proc_unloadvar
f108 :                       df_rt_proc_unload_done
f108 : 68               [ 4] 	pla					; Pull the return address off stack
f109 : 68               [ 4] 	pla					; to get to the previous level
f10a : 18               [ 2] 	clc
f10b : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f10c :                       df_rt_proc_local
                             	; save address
f10c : 86e3             [ 3] 	stx df_tmpptra
f10e : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f110 : 2038f1           [ 6] 	jsr df_rst_pushWord
f113 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f113 : a001             [ 2] 	ldy #DFVVT_LO
f115 : b1e3             [ 5] 	lda (df_tmpptra),y
f117 : aa               [ 2] 	tax
f118 : c8               [ 2] 	iny
f119 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f11b : 2038f1           [ 6] 	jsr df_rst_pushWord
f11e : 18               [ 2] 	clc
f11f : 60               [ 6] 	rts
                             		
f120 :                       mod_sz_proc_e
                             
                             
f120 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page  188
-------------------------------- bank\bank1.s --------------------------------

                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f120 :                       df_rst_pushByte
f120 : a4b8             [ 3] 	ldy df_rtstop
f122 : 99000b           [ 5] 	sta df_rtstck,y
f125 : 88               [ 2] 	dey
f126 : 84b8             [ 3] 	sty df_rtstop
f128 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f129 :                       df_rst_popByte
f129 : a4b8             [ 3] 	ldy df_rtstop
f12b : c8               [ 2] 	iny
f12c : b9000b           [ 4] 	lda df_rtstck,y
f12f : 84b8             [ 3] 	sty df_rtstop
f131 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f132 :                       df_rst_peekByte
f132 : a4b8             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f134 : b9010b           [ 4] 	lda df_rtstck+1,y
f137 : 60               [ 6] 	rts
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  189
-------------------------------- bank\bank1.s --------------------------------

                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f138 :                       df_rst_pushWord
f138 : a4b8             [ 3] 	ldy df_rtstop
f13a : 99000b           [ 5] 	sta df_rtstck,y
f13d : 88               [ 2] 	dey
f13e : 8a               [ 2] 	txa
f13f : 99000b           [ 5] 	sta df_rtstck,y
f142 : 88               [ 2] 	dey
f143 : 84b8             [ 3] 	sty df_rtstop
f145 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f146 :                       df_rst_popWord
f146 : a4b8             [ 3] 	ldy df_rtstop
f148 : c8               [ 2] 	iny
f149 : be000b           [ 4] 	ldx df_rtstck,y
f14c : c8               [ 2] 	iny
f14d : b9000b           [ 4] 	lda df_rtstck,y
f150 : 84b8             [ 3] 	sty df_rtstop
f152 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f153 :                       df_ost_pushStr
f153 : a080             [ 2] 	ldy #DFST_STR
f155 : d009             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f157 :                       df_ost_pushPtr
f157 : a0ff             [ 2] 	ldy #0xff
f159 : d005             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f15b :                       df_ost_pushIntA
f15b : aa               [ 2] 	tax
f15c : a900             [ 2] 	lda #0
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f15e :                       df_ost_pushInt
f15e : a001             [ 2] 	ldy #DFST_INT
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
AS65 Assembler for R6502 [1.42].                                     Page  190
-------------------------------- bank\bank1.s --------------------------------

                             ;* Y - type
                             ;****************************************
f160 :                       df_ost_pushParmX
f160 : 8445             [ 3] 	sty tmp_d		; Save Type
f162 : a4b9             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f164 : 99000b           [ 5] 	sta df_rtstck,y
f167 : c8               [ 2] 	iny
                             	; push low byte next (X)
f168 : 8a               [ 2] 	txa
f169 : 99000b           [ 5] 	sta df_rtstck,y
f16c : c8               [ 2] 	iny
f16d : a545             [ 3] 	lda tmp_d		; get Type
f16f : 99000b           [ 5] 	sta df_rtstck,y
f172 : c8               [ 2] 	iny
                             	; save new top of stack
f173 : 84b9             [ 3] 	sty df_parmtop
f175 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f176 :                       df_ost_popStr
f176 : a980             [ 2] 	lda #DFST_STR
f178 : d006             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f17a :                       df_ost_popPtr
f17a : a9ff             [ 2] 	lda #0xff
f17c : d002             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             		
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f17e :                       df_ost_popInt
f17e : a901             [ 2] 	lda #DFST_INT
                             	; ***FALL THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* A - type expected
                             ;****************************************
f180 :                       df_ost_popParmX
f180 : a4b9             [ 3] 	ldy df_parmtop
                             	; pull type first
f182 : 88               [ 2] 	dey
f183 : 39000b           [ 4] 	and df_rtstck,y
f186 : f00b             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f188 : 88               [ 2] 	dey
f189 : be000b           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f18c : 88               [ 2] 	dey
f18d : b9000b           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f190 : 84b9             [ 3] 	sty df_parmtop
AS65 Assembler for R6502 [1.42].                                     Page  191
-------------------------------- bank\bank1.s --------------------------------

f192 : 60               [ 6] 	rts
f193 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f195 :                       df_ost_peekType
f195 : a4b9             [ 3] 	ldy df_parmtop
f197 : b9ff0a           [ 4] 	lda df_rtstck-1,y
f19a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f19b :                       df_st_malloc
                             	; save A in Y
f19b : a8               [ 2] 	tay
                             	; save old starend
f19c : a5b7             [ 3] 	lda df_starend+1
f19e : 48               [ 3] 	pha
f19f : a5b6             [ 3] 	lda df_starend
f1a1 : 48               [ 3] 	pha
                             	; restore A from Y
f1a2 : 98               [ 2] 	tya
                             	; add X,A to starend
f1a3 : 48               [ 3] 	pha
f1a4 : 8a               [ 2] 	txa
f1a5 : 18               [ 2] 	clc
f1a6 : 65b6             [ 3] 	adc df_starend
f1a8 : 85b6             [ 3] 	sta df_starend
f1aa : 68               [ 4] 	pla
f1ab : 65b7             [ 3] 	adc df_starend+1
f1ad : 85b7             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f1af : 68               [ 4] 	pla
f1b0 : aa               [ 2] 	tax
f1b1 : 68               [ 4] 	pla
f1b2 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f1b3 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f1b3 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f1b5 : 8d670c           [ 4] 	sta df_memtop
f1b8 : a9c0             [ 2] 	lda #hi(DF_MEMTOP)
f1ba : 8d680c           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f1bd : 20c0f1           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
AS65 Assembler for R6502 [1.42].                                     Page  192
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f1c0 :                       df_clear
                             	; Start of program space
f1c0 : a969             [ 2] 	lda #lo(DF_PROGSTART)
f1c2 : 85a7             [ 3] 	sta df_prgstrt
f1c4 : 85a9             [ 3] 	sta df_prgend
f1c6 : a90c             [ 2] 	lda #hi(DF_PROGSTART)
f1c8 : 85a8             [ 3] 	sta df_prgstrt+1
f1ca : 85aa             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f1cc : a900             [ 2] 	lda #0
f1ce : a8               [ 2] 	tay
f1cf : 91a7             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f1d1 : 85b3             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f1d3 : ad670c           [ 4] 	lda df_memtop
f1d6 : 85af             [ 3] 	sta df_vvtstrt
f1d8 : 85b1             [ 3] 	sta df_vvtend
f1da : ad680c           [ 4] 	lda df_memtop+1
f1dd : 85b0             [ 3] 	sta df_vvtstrt+1
f1df : 85b2             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f1e1 : a5af             [ 3] 	lda df_vvtstrt
f1e3 : 85ab             [ 3] 	sta df_vntstrt
f1e5 : 85ad             [ 3] 	sta df_vntend
f1e7 : a5b0             [ 3] 	lda df_vvtstrt+1
f1e9 : 85ac             [ 3] 	sta df_vntstrt+1
f1eb : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f1ed : a900             [ 2] 	lda #lo(scratch)
f1ef : 85bc             [ 3] 	sta df_sevalptr
f1f1 : a909             [ 2] 	lda #hi(scratch)
f1f3 : 85bd             [ 3] 	sta df_sevalptr+1
                             
f1f5 : 60               [ 6] 	rts
                             
f1f6 :                       mod_sz_dflat_e
                             
                             	include "dflat\error.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
AS65 Assembler for R6502 [1.42].                                     Page  193
-------------------------------- bank\bank1.s --------------------------------

                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
AS65 Assembler for R6502 [1.42].                                     Page  194
-------------------------------- bank\bank1.s --------------------------------

f1f6 :                       df_tk_errortab
f1f6 : 4f6b00                	db	"Ok", 0
f1f9 : 53796e74617800        	db	"Syntax", 0
f200 : 5479706500            	db	"Type", 0
f205 : 52652d64696d00        	db	"Re-dim", 0
f20c : 4e6f2072657065..      	db	"No repeat", 0
f216 : 4e6f206465666e00      	db	"No defn", 0
f21e : 5061726d00            	db	"Parm", 0
f223 : 456e64656400          	db	"Ended", 0
f229 : 4e6f20656e6469..      	db	"No endif", 0
f232 : 4e6f20696600          	db	"No if", 0
f238 : 4e6f20666f7200        	db	"No for", 0
f23f : 4e6f7420666f75..      	db	"Not found", 0
f249 : 546f6f206c6f6e..      	db	"Too long", 0
f252 : 427265616b00          	db	"Break", 0
f258 : 4e6f206461746100      	db	"No data", 0
f260 : 4e6f207768696c..      	db	"No while", 0
f269 : 4e6f206c696e6500      	db	"No line", 0
f271 : 4e6f2072657475..      	db	"No return ", 0
f27c : 41626f7274656400      	db	"Aborted", 0
f284 : 426f756e647300        	db	"Bounds", 0
f28b : 4e6f206f726700        	db	"No org", 0
f292 : 00                    	db	0
                             
f293 :                       df_tk_error_inline
f293 : 20696e206c696e..      	db	" in line ", 0
f29d :                       df_tk_error_atpos
f29d : 20706f732000          	db	" pos ", 0
f2a3 :                       df_tk_error_error
f2a3 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f2aa :                       df_trap_error
                             	; set IO back to normal
f2aa : 202ac5           [ 6] 	jsr io_set_default
f2ad : 58               [ 2] 	cli
                             
f2ae : a9f6             [ 2] 	lda #lo(df_tk_errortab)
f2b0 : 85e3             [ 3] 	sta df_tmpptra
f2b2 : a9f1             [ 2] 	lda #hi(df_tk_errortab)
f2b4 : 85e4             [ 3] 	sta df_tmpptra+1
f2b6 : a69f             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f2b8 : f002             [ 3] 	beq df_trap_go_monitor
f2ba : 1003             [ 3] 	bpl df_trap_normal
f2bc :                       df_trap_go_monitor
f2bc : 4c3bf3           [ 3] 	jmp df_trap_monitor
f2bf :                       df_trap_normal
f2bf : a000             [ 2] 	ldy #0
f2c1 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f2c1 : b1e3             [ 5] 	lda (df_tmpptra),y
f2c3 : f076             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f2c5 :                       df_show_err_skip
AS65 Assembler for R6502 [1.42].                                     Page  195
-------------------------------- bank\bank1.s --------------------------------

                             	_incZPWord df_tmpptra
                             
f2cb : b1e3             [ 5] 	lda (df_tmpptra),y
f2cd : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f2d5 : ca               [ 2] 	dex
f2d6 : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f2d8 : a6e3             [ 3] 	ldx df_tmpptra
f2da : a5e4             [ 3] 	lda df_tmpptra+1
f2dc : 2093c5           [ 6] 	jsr io_print_line
f2df : a2a3             [ 2] 	ldx #lo(df_tk_error_error)
f2e1 : a9f2             [ 2] 	lda #hi(df_tk_error_error)
f2e3 : 2093c5           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f2e6 : a001             [ 2] 	ldy #DFTK_LINNUM
f2e8 : b1c8             [ 5] 	lda (df_currlin),y
f2ea : aa               [ 2] 	tax
f2eb : c8               [ 2] 	iny
f2ec : b1c8             [ 5] 	lda (df_currlin),y
f2ee : d004             [ 3] 	bne df_show_err_linnum
f2f0 : e000             [ 2] 	cpx #0x00
f2f2 : f011             [ 4] 	beq df_show_err_fin
f2f4 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f301 : 18               [ 2] 	clc
f302 : 20bbca           [ 6] 	jsr print_a_to_d
f305 :                       df_show_err_fin
f305 : a4be             [ 3] 	ldy df_linoff
f307 : f02b             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f316 : 98               [ 2] 	tya
f317 : aa               [ 2] 	tax
f318 : a900             [ 2] 	lda #0
f31a : 18               [ 2] 	clc
f31b : 20bbca           [ 6] 	jsr print_a_to_d
f31e : 2007c8           [ 6] 	jsr utilPrintCRLF
f321 : a000             [ 2] 	ldy #0
                             	; Show the error line with error pos inverse
f323 :                       def_show_err_line
f323 : b9000a           [ 4] 	lda df_linbuff,y
f326 : f00c             [ 3] 	beq df_show_err_done
f328 : c4be             [ 3] 	cpy df_linoff
f32a : d002             [ 3] 	bne def_show_err_line_skip
f32c : 0980             [ 2] 	ora #0x80
f32e :                       def_show_err_line_skip
f32e : 2048c5           [ 6] 	jsr io_put_ch
f331 : c8               [ 2] 	iny
f332 : d0ef             [ 3] 	bne def_show_err_line	; Always
f334 :                       df_show_err_done
f334 : 2007c8           [ 6] 	jsr utilPrintCRLF
f337 : 18               [ 2] 	clc
                             	; back to editor
f338 : 4c64d7           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f33b :                       df_trap_monitor
                             	; Print PC
AS65 Assembler for R6502 [1.42].                                     Page  196
-------------------------------- bank\bank1.s --------------------------------

                             	_println_low df_msg_pc
                             
f342 : a5a5             [ 3] 	lda df_brkpc+1
f344 : 200fc8           [ 6] 	jsr utilPrintA
f347 : a5a4             [ 3] 	lda df_brkpc
f349 : 200fc8           [ 6] 	jsr utilPrintA
f34c : 20ffc7           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f356 : a585             [ 3] 	lda num_a
f358 : 200fc8           [ 6] 	jsr utilPrintA
f35b : 20ffc7           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f365 : a586             [ 3] 	lda num_a+1
f367 : 200fc8           [ 6] 	jsr utilPrintA
f36a : 20ffc7           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f374 : a587             [ 3] 	lda num_a+2
f376 : 200fc8           [ 6] 	jsr utilPrintA
f379 : 2007c8           [ 6] 	jsr utilPrintCRLF
                             
f37c : 20cbdf           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f37f : 4c64d7           [ 3] 	jmp df_pg_dflat
                             
f382 :                       df_msg_pc
f382 : 50433a00              	db "PC:\x0"
f386 :                       df_msg_acc
f386 : 413a00                	db "A:\x0"
f389 :                       df_msg_xreg
f389 : 583a00                	db "X:\x0"
f38c :                       df_msg_yreg
f38c : 593a00                	db "Y:\x0"
                             
                             	include	"dflat\asm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f38f :                       mod_sz_asm_s
AS65 Assembler for R6502 [1.42].                                     Page  197
-------------------------------- bank\bank1.s --------------------------------

                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat\asm.i"
                             ;*	BBC-128 BREADBOARD COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat\tkasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
AS65 Assembler for R6502 [1.42].                                     Page  198
-------------------------------- bank\bank1.s --------------------------------

                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f38f :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f38f :                       df_tk_asm_parse_command
                             	; skip the white space after the dot
f38f : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; find the assembler symbol
f392 : 20bef3           [ 6] 	jsr df_tk_asm_matchtok
                             	; if not found then must be a label assignment
f395 : b021             [ 3] 	bcs df_tk_asm_parse_command_symbol
                             	; Get the assembler symbol and put the token
f397 : a5c5             [ 3] 	lda df_symoff
                             	; Set the MSB
f399 : 0980             [ 2] 	ora #0x80
f39b : 20d2cd           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f39e : a001             [ 2] 	ldy #1
f3a0 : b1c3             [ 5] 	lda (df_symtab),y
                             	; Directive?
f3a2 : c910             [ 2] 	cmp #AM_DIR
f3a4 : d00c             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f3a6 : a5c5             [ 3] 	lda df_symoff
f3a8 : 200ff4           [ 6] 	jsr df_tk_asm_exec_parser
f3ab : b004             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; [1] ignore white space but keep it
f3ad : 2023ce           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
f3b0 : 18               [ 2] 	clc
f3b1 :                       df_tk_asm_parse_command_err
f3b1 : 60               [ 6] 	rts
f3b2 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f3b2 : 2014f4           [ 6] 	jsr df_tk_asm_addr_mode
f3b5 : b0fa             [ 3] 	bcs df_tk_asm_parse_command_err
f3b7 : 60               [ 6] 	rts
f3b8 :                       df_tk_asm_parse_command_symbol
                             	; No mask
f3b8 : a900             [ 2] 	lda #0
f3ba : 2009cf           [ 6] 	jsr df_tk_var
f3bd : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
AS65 Assembler for R6502 [1.42].                                     Page  199
-------------------------------- bank\bank1.s --------------------------------

                             ;****************************************
f3be :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f3be : a9a0             [ 2] 	lda #lo(df_asm_tokensyms)
f3c0 : 85c3             [ 3] 	sta df_symtab
f3c2 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f3c4 : 85c4             [ 3] 	sta df_symtab+1
f3c6 : 64c5             [ 3] 	stz df_symoff
f3c8 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f3c8 : a4be             [ 3] 	ldy df_linoff
f3ca :                       df_tk_asm_checktokch
                             	; Get symtable char
f3ca : b2c3             [ 5] 	lda (df_symtab)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f3cc : c920             [ 2] 	cmp #' '
f3ce : 9031             [ 4] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f3d0 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f3d3 : d009             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f3db : c8               [ 2] 	iny
f3dc : 80ec             [ 3] 	bra df_tk_asm_checktokch
f3de :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f3de : e6c5             [ 5] 	inc df_symoff
f3e0 :                       df_tk_asm_symnextentry
f3e0 : b2c3             [ 5] 	lda (df_symtab)
                             	; End of symbol is < ' '
f3e2 : c920             [ 2] 	cmp #' '
f3e4 : 9008             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f3ec : 80f2             [ 3] 	bra df_tk_asm_symnextentry
f3ee :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f3ee : 38               [ 2] 	sec
f3ef : 65c3             [ 3] 	adc df_symtab
f3f1 : 85c3             [ 3] 	sta df_symtab
f3f3 : a5c4             [ 3] 	lda df_symtab+1
f3f5 : 6900             [ 2] 	adc #0
f3f7 : 85c4             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f3f9 : b2c3             [ 5] 	lda (df_symtab)
f3fb : d0cb             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f3fd : 64c5             [ 3] 	stz df_symoff
                             	; Set C to indicate error (no match)
f3ff : 38               [ 2] 	sec
f400 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  200
-------------------------------- bank\bank1.s --------------------------------

f401 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f401 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f404 : 2017ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f407 : b0d5             [ 4] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f409 : 84be             [ 3] 	sty df_linoff
f40b : a5c5             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f40d : 18               [ 2] 	clc
f40e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f40f :                       df_tk_asm_exec_parser
f40f : 0a               [ 2] 	asl a
f410 : aa               [ 2] 	tax
f411 : 7c0cfb           [ 6] 	jmp (df_tk_asm_tokenjmp,x)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f414 :                       df_tk_asm_addr_mode
f414 : 2023ce           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f417 : c900             [ 2] 	cmp #0					;End of line?
f419 : f02e             [ 3] 	beq df_tk_asm_addr_mode_ok
f41b : c93a             [ 2] 	cmp #':'				;End of statement?
f41d : f02a             [ 3] 	beq df_tk_asm_addr_mode_ok
f41f : a923             [ 2] 	lda #'#'				; Check for immediate
f421 : 2053ce           [ 6] 	jsr df_tk_expect_tok
f424 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f426 : 4c4bf4           [ 3] 	jmp df_tk_imm		; Process immediate
f429 :                       df_tk_asm_addr_mode_1
f429 : a928             [ 2] 	lda #'('				; One of indirect modes?
f42b : 2053ce           [ 6] 	jsr df_tk_expect_tok
f42e : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f430 : 4c50f4           [ 3] 	jmp df_tk_indirect
f433 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f433 : 2050d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f436 : a92c             [ 2] 	lda #','
f438 : 2053ce           [ 6] 	jsr df_tk_expect_tok
f43b : b00c             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f43d : a978             [ 2] 	lda #'x'
AS65 Assembler for R6502 [1.42].                                     Page  201
-------------------------------- bank\bank1.s --------------------------------

f43f : 2053ce           [ 6] 	jsr df_tk_expect_tok
f442 : 9005             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f444 : a979             [ 2] 	lda #'y'
f446 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
f449 :                       df_tk_asm_addr_mode_ok
f449 : 18               [ 2] 	clc
f44a : 60               [ 6] 	rts
                             	
                             	
                             ;* Toeknise immediate addressing mode	
f44b :                       df_tk_imm
                             	; Just one expression expected
f44b : 2050d0           [ 6] 	jsr df_tk_expression
f44e : 18               [ 2] 	clc
f44f : 60               [ 6] 	rts
                             	
                             ;* Tokenise indirect
f450 :                       df_tk_indirect
                             	; Just one expression expected
f450 : 2050d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f453 : a92c             [ 2] 	lda #','
f455 : 2053ce           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f458 : b00c             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f45a : a978             [ 2] 	lda #'x'
f45c : 205ece           [ 6] 	jsr df_tk_expect_tok_err
f45f : a929             [ 2] 	lda #')'
f461 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
f464 : 18               [ 2] 	clc
f465 : 60               [ 6] 	rts
                             	
f466 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f466 : a929             [ 2] 	lda #')'
f468 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f46b : a92c             [ 2] 	lda #','
f46d : 2053ce           [ 6] 	jsr df_tk_expect_tok
f470 : b007             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f472 : a979             [ 2] 	lda #'y'
f474 : 205ece           [ 6] 	jsr df_tk_expect_tok_err
f477 : 18               [ 2] 	clc
f478 : 60               [ 6] 	rts
                             
f479 :                       df_tk_indirect_done
f479 : 18               [ 2] 	clc
f47a : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
AS65 Assembler for R6502 [1.42].                                     Page  202
-------------------------------- bank\bank1.s --------------------------------

                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f47b :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat\rtasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f47b :                       mod_sz_rtasm_s
                             
f47b :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f47b : a4ca             [ 3] 	ldy df_exeoff
f47d : b1c8             [ 5] 	lda (df_currlin),y
f47f : 1009             [ 3] 	bpl df_rt_asm_do_label
f481 : 208ef4           [ 6] 	jsr df_rt_asm_command
f484 : 2084f6           [ 6] 	jsr df_rt_asm_printCR
f487 : 4c8df4           [ 3] 	jmp df_rt_asm_assemble_done
f48a :                       df_rt_asm_do_label
AS65 Assembler for R6502 [1.42].                                     Page  203
-------------------------------- bank\bank1.s --------------------------------

f48a : 20b2f4           [ 6] 	jsr df_rt_asm_label
f48d :                       df_rt_asm_assemble_done
                             	; any clean up here
f48d : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f48e :                       df_rt_asm_command
f48e : 297f             [ 2] 	and #0x7f
f490 : 48               [ 3] 	pha
f491 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f492 : 2052f7           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f495 : a001             [ 2] 	ldy #1
f497 : b1c3             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f499 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f49b : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f49d : 4c78f5           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f4a0 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f4a0 : 68               [ 4] 	pla
f4a1 : 0a               [ 2] 	asl a
f4a2 : aa               [ 2] 	tax
                             	; jump over directive code
f4a3 : e6ca             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f4a5 : bd16fb           [ 4] 	lda df_rt_asm_tokenjmp,x
f4a8 : 85e3             [ 3] 	sta df_tmpptra
f4aa : bd17fb           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f4ad : 85e4             [ 3] 	sta df_tmpptra+1
f4af : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f4b2 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f4b2 : 201fe5           [ 6] 	jsr df_rt_generate_lvar
f4b5 : 86e0             [ 3] 	stx df_asmoprnd
f4b7 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f4b9 : a000             [ 2] 	ldy #0
f4bb : a5db             [ 3] 	lda df_asmpc
f4bd : 91e0             [ 5] 	sta (df_asmoprnd),y
f4bf : a5dc             [ 3] 	lda df_asmpc+1
f4c1 : c8               [ 2] 	iny
f4c2 : 91e0             [ 5] 	sta (df_asmoprnd),y
f4c4 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f4c5 :                       df_rt_asm_org
                             	; Get the address from expression
f4c5 : 202ff7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f4c8 : a5e0             [ 3] 	lda df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  204
-------------------------------- bank\bank1.s --------------------------------

f4ca : 85db             [ 3] 	sta df_asmpc
f4cc : a5e1             [ 3] 	lda df_asmoprnd+1
f4ce : 85dc             [ 3] 	sta df_asmpc+1
f4d0 : a903             [ 2] 	lda #3
f4d2 : 85e2             [ 3] 	sta df_asmlen
f4d4 : 4c46f6           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f4d7 :                       df_rt_asm_opt
                             	; Get the value from expression
f4d7 : 202ff7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f4da : a5e0             [ 3] 	lda df_asmoprnd
f4dc : 85dd             [ 3] 	sta df_asmopt
f4de : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
f4df :                       df_rt_asm_db
f4df : a902             [ 2] 	lda #2
f4e1 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f4e2 :                       df_rt_asm_dw
f4e2 : a903             [ 2] 	lda #3
f4e4 :                       df_rt_asm_db_start
f4e4 : 85e2             [ 3] 	sta df_asmlen
f4e6 : 2046f6           [ 6] 	jsr df_rt_asm_printPC
f4e9 : 2061f6           [ 6] 	jsr df_rt_asm_printSPC
f4ec :                       df_rt_asm_data
f4ec : 207bd8           [ 6] 	jsr df_rt_neval		; Evaluate expression
                             	_df_ost_peekType	; What is the type
                             
f4f4 : 300d             [ 4] 	bmi df_rt_asm_string; If string
f4f6 : 207ef1           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f4f9 : 86e0             [ 3] 	stx df_asmoprnd		; store low value
f4fb : 85e1             [ 3] 	sta df_asmoprnd+1	; store high value
f4fd : 202bf5           [ 6] 	jsr df_rt_asm_data_write
f500 : 4c20f5           [ 3] 	jmp df_rt_asm_data_next
f503 :                       df_rt_asm_string
f503 : 207af1           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f506 : 86e3             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f508 : 85e4             [ 3] 	sta df_tmpptra+1
f50a :                       df_rt_asm_string_ch
f50a : a000             [ 2] 	ldy #0
f50c : b1e3             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f50e : f010             [ 3] 	beq df_rt_asm_data_next
f510 : 85e0             [ 3] 	sta df_asmoprnd		; Save as operand
f512 : 84e1             [ 3] 	sty df_asmoprnd+1	; High is always zero
f514 : 202bf5           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
f51d : 4c0af5           [ 3] 	jmp df_rt_asm_string_ch
f520 :                       df_rt_asm_data_next
f520 : 2051e5           [ 6] 	jsr df_rt_eos		; End?
AS65 Assembler for R6502 [1.42].                                     Page  205
-------------------------------- bank\bank1.s --------------------------------

f523 : b005             [ 3] 	bcs df_rt_asm_data_done
f525 : e6ca             [ 5] 	inc df_exeoff		; Jump over ','
f527 : 4cecf4           [ 3] 	jmp df_rt_asm_data
f52a :                       df_rt_asm_data_done
f52a : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
f52b :                       df_rt_asm_data_write
f52b : 206af6           [ 6] 	jsr df_rt_asm_printOPR
f52e :                       df_rt_asm_data_write_skip1
f52e : a902             [ 2] 	lda #2
f530 : 25dd             [ 3] 	and df_asmopt
f532 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
f534 : a5e0             [ 3] 	lda df_asmoprnd
f536 : a000             [ 2] 	ldy #0
f538 : 91db             [ 5] 	sta (df_asmpc),y
f53a : c8               [ 2] 	iny
f53b : a902             [ 2] 	lda #2
f53d : c5e2             [ 3] 	cmp df_asmlen
f53f : d006             [ 3] 	bne df_rt_asm_data_write_hi
f541 : a5e1             [ 3] 	lda df_asmoprnd+1
f543 : d014             [ 3] 	bne df_rt_asm_data_write_err
f545 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
f547 :                       df_rt_asm_data_write_hi
f547 : a5e1             [ 3] 	lda df_asmoprnd+1
f549 : 91db             [ 5] 	sta (df_asmpc),y
f54b :                       df_rt_asm_data_write_skip2
f54b : a4e2             [ 3] 	ldy df_asmlen
f54d : 88               [ 2] 	dey					; Add 1 less!
f54e : 98               [ 2] 	tya
f54f : 18               [ 2] 	clc
f550 : 65db             [ 3] 	adc df_asmpc
f552 : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f556 : e6dc             [ 5] 	inc df_asmpc+1
f558 : 60               [ 6] 	rts
f559 :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
f55b :                       df_rt_asm_ds
f55b : 2046f6           [ 6] 	jsr df_rt_asm_printPC
f55e : 2061f6           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
f561 : 202ff7           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
f564 : 18               [ 2] 	clc
f565 : a5e0             [ 3] 	lda df_asmoprnd
f567 : 65db             [ 3] 	adc df_asmpc
f569 : 85db             [ 3] 	sta df_asmpc
f56b : a5e1             [ 3] 	lda df_asmoprnd+1
f56d : 65dc             [ 3] 	adc df_asmpc+1
f56f : 85dc             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
f571 : a903             [ 2] 	lda #3
f573 : 85e2             [ 3] 	sta df_asmlen
f575 : 4c6af6           [ 3] 	jmp df_rt_asm_printOPR
                             
AS65 Assembler for R6502 [1.42].                                     Page  206
-------------------------------- bank\bank1.s --------------------------------

                             
                             ; Process a normal assembler mnemonic
f578 :                       df_rt_asm_mnem
f578 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
f579 : e6ca             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
f57b : 20b2f6           [ 6] 	jsr df_rt_asm_addrmode
                             
f57e :                       df_rt_asm_mnem_try
f57e : a5de             [ 3] 	lda df_asmadmd					; With the addressing mode
f580 : 203af7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
f583 : c900             [ 2] 	cmp #AM_NONE					; Exists?
f585 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
f587 :                       df_rt_asm_check_alt
f587 : a6de             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
f589 : bd8ff7           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
f58c : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
f58e : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
f590 : 203af7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
f593 : c900             [ 2] 	cmp #AM_NONE					; this instruction
f595 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
f597 : c5de             [ 3] 	cmp df_asmadmd					; Same as the original?
f599 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
f59b :                       df_rt_asm_mnem_chk
f59b : 85de             [ 3] 	sta df_asmadmd					; This is the final mode
f59d : aa               [ 2] 	tax								; Get the length
f59e : bd7ef7           [ 4] 	lda df_asm_length,x
f5a1 : a6e1             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
f5a3 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
f5a5 : c903             [ 2] 	cmp #3							; Else must be len 3?
f5a7 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
f5a9 :                       df_rt_asm_mnem_done
f5a9 : a6de             [ 3] 	ldx df_asmadmd					; Get the final mode index
f5ab : bd7ef7           [ 4] 	lda df_asm_length,x				; Get the length
f5ae : 85e2             [ 3] 	sta df_asmlen
f5b0 : a5de             [ 3] 	lda df_asmadmd					; Get the final mode
f5b2 : 203af7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
f5b5 : c8               [ 2] 	iny
f5b6 : b1c3             [ 5] 	lda (df_symtab),y
f5b8 : 85df             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
f5ba : 4cbff5           [ 3] 	jmp df_rt_asm_encode
                             	
f5bd :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
f5bf :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
f5bf : a5de             [ 3] 	lda df_asmadmd
f5c1 : c90f             [ 2] 	cmp #AM_REL
f5c3 : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
f5c5 : a5e1             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  207
-------------------------------- bank\bank1.s --------------------------------

f5c7 : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
f5c9 : 38               [ 2] 	sec
f5ca : a5e0             [ 3] 	lda df_asmoprnd
f5cc : e902             [ 2] 	sbc #2
f5ce : 85e0             [ 3] 	sta df_asmoprnd
f5d0 : a5e1             [ 3] 	lda df_asmoprnd+1
f5d2 : e900             [ 2] 	sbc #0
f5d4 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
f5d6 : 38               [ 2] 	sec
f5d7 : a5e0             [ 3] 	lda df_asmoprnd
f5d9 : e5db             [ 3] 	sbc df_asmpc
f5db : 85e0             [ 3] 	sta df_asmoprnd
f5dd : a5e1             [ 3] 	lda df_asmoprnd+1
f5df : e5dc             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
f5e1 : a000             [ 2] 	ldy #0
f5e3 : 84e1             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
f5e5 : a8               [ 2] 	tay
f5e6 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
f5e8 : c9ff             [ 2] 	cmp #0xff
f5ea : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
f5ec : a5e0             [ 3] 	lda df_asmoprnd
f5ee : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
f5f0 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
f5f2 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
f5f2 : a5e0             [ 3] 	lda df_asmoprnd
f5f4 : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
f5f6 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
f5f6 : c6e1             [ 5] 	dec df_asmoprnd+1
f5f8 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
f5f8 : a902             [ 2] 	lda #0x02
f5fa : 25dd             [ 3] 	and df_asmopt
f5fc : f028             [ 4] 	beq df_rt_asm_encode_print
f5fe : a000             [ 2] 	ldy #0
f600 : a5df             [ 3] 	lda df_asmopcde
f602 : 91db             [ 5] 	sta (df_asmpc),y
f604 : a5e2             [ 3] 	lda df_asmlen
f606 : c901             [ 2] 	cmp #1						; No operand
f608 : f01c             [ 3] 	beq df_rt_asm_encode_print
f60a : c903             [ 2] 	cmp #3						; Word operand
f60c : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
f60e : a5e1             [ 3] 	lda df_asmoprnd+1
f610 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
f614 :                       df_rt_asm_encode_writebyte
f614 : c8               [ 2] 	iny 
f615 : a5e0             [ 3] 	lda df_asmoprnd
AS65 Assembler for R6502 [1.42].                                     Page  208
-------------------------------- bank\bank1.s --------------------------------

f617 : 91db             [ 5] 	sta (df_asmpc),y
f619 : 4c26f6           [ 3] 	jmp df_rt_asm_encode_print
f61c :                       df_rt_asm_encode_writeword
f61c : c8               [ 2] 	iny 
f61d : a5e0             [ 3] 	lda df_asmoprnd
f61f : 91db             [ 5] 	sta (df_asmpc),y
f621 : c8               [ 2] 	iny 
f622 : a5e1             [ 3] 	lda df_asmoprnd+1
f624 : 91db             [ 5] 	sta (df_asmpc),y	
f626 :                       df_rt_asm_encode_print
f626 : 2036f6           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
f629 : 18               [ 2] 	clc
f62a : a5db             [ 3] 	lda df_asmpc
f62c : 65e2             [ 3] 	adc df_asmlen
f62e : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f632 : e6dc             [ 5] 	inc df_asmpc+1
f634 : 18               [ 2] 	clc
f635 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
f636 :                       df_rt_asm_print_mmen
f636 : 2046f6           [ 6] 	jsr df_rt_asm_printPC
f639 : 2061f6           [ 6] 	jsr df_rt_asm_printSPC
f63c : 2056f6           [ 6] 	jsr df_rt_asm_printOPC
f63f : 2061f6           [ 6] 	jsr df_rt_asm_printSPC
f642 : 206af6           [ 6] 	jsr df_rt_asm_printOPR
f645 :                       df_rt_asm_print_rts			; Hopefully subs can get he
f645 : 60               [ 6] 	rts
                             
f646 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
f646 : a901             [ 2] 	lda #0x01
f648 : 25dd             [ 3] 	and df_asmopt
f64a : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
f64c : a5dc             [ 3] 	lda df_asmpc+1
f64e : 200fc8           [ 6] 	jsr utilPrintA
f651 : a5db             [ 3] 	lda df_asmpc
f653 : 4c0fc8           [ 3] 	jmp utilPrintA
                             
f656 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
f656 : a901             [ 2] 	lda #0x01
f658 : 25dd             [ 3] 	and df_asmopt
f65a : f0e9             [ 3] 	beq df_rt_asm_print_rts
f65c : a5df             [ 3] 	lda df_asmopcde
f65e : 4c0fc8           [ 3] 	jmp utilPrintA
                             
f661 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
f661 : a901             [ 2] 	lda #0x01
f663 : 25dd             [ 3] 	and df_asmopt
f665 : f0de             [ 3] 	beq df_rt_asm_print_rts
f667 : 4cffc7           [ 3] 	jmp utilPrintSPC
                             	
f66a :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
AS65 Assembler for R6502 [1.42].                                     Page  209
-------------------------------- bank\bank1.s --------------------------------

f66a : a901             [ 2] 	lda #0x01
f66c : 25dd             [ 3] 	and df_asmopt
f66e : f0d5             [ 3] 	beq df_rt_asm_print_rts	
f670 : a5e2             [ 3] 	lda df_asmlen				; check how may operand bytes
f672 : c901             [ 2] 	cmp #1						; if only opcode, done
f674 : f0cf             [ 3] 	beq df_rt_asm_print_rts	
f676 : c902             [ 2] 	cmp #2
f678 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
f67a : a5e1             [ 3] 	lda df_asmoprnd+1
f67c : 200fc8           [ 6] 	jsr utilPrintA
f67f :                       df_rt_asm_printOPR_1
f67f : a5e0             [ 3] 	lda df_asmoprnd
f681 : 4c0fc8           [ 3] 	jmp utilPrintA
                             
f684 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
f684 : a901             [ 2] 	lda #0x01
f686 : 25dd             [ 3] 	and df_asmopt
f688 : f0bb             [ 3] 	beq df_rt_asm_print_rts
f68a : 4c07c8           [ 3] 	jmp utilPrintCRLF
                             
f68d :                       df_rt_asm_printCH
f68d : 8545             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
f68f : a901             [ 2] 	lda #0x01
f691 : 25dd             [ 3] 	and df_asmopt
f693 : f0b0             [ 3] 	beq df_rt_asm_print_rts
f695 : a545             [ 3] 	lda tmp_d
f697 : 4c48c5           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
f69a :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
f69a : a901             [ 2] 	lda #0x01
f69c : 25dd             [ 3] 	and df_asmopt
f69e : f0a5             [ 3] 	beq df_rt_asm_print_rts
f6a0 : a5ca             [ 3] 	lda df_exeoff
f6a2 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
f6ab : 20bfe6           [ 6] 	jsr df_rt_list_line_only
f6ae : 68               [ 4] 	pla
f6af : 85ca             [ 3] 	sta df_exeoff
f6b1 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
f6b2 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
f6b2 : a900             [ 2] 	lda #AM_NONE
f6b4 : 85de             [ 3] 	sta df_asmadmd
                             	; zero out the operand
f6b6 : a900             [ 2] 	lda #0
f6b8 : 85e0             [ 3] 	sta df_asmoprnd
f6ba : 85e1             [ 3] 	sta df_asmoprnd+1
f6bc : 2051e5           [ 6] 	jsr df_rt_eos			; End of statement?
f6bf : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
f6c1 : 20b0dc           [ 6] 	jsr df_rt_skip_ws
AS65 Assembler for R6502 [1.42].                                     Page  210
-------------------------------- bank\bank1.s --------------------------------

                             	; Check what it is
f6c4 : c923             [ 2] 	cmp #'#'				; Immediate?
f6c6 : f034             [ 3] 	beq df_rt_asm_AM_IMM
f6c8 : c928             [ 2] 	cmp #'('				; Indirect something?
f6ca : f03a             [ 4] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
f6cc : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
f6ce :                       df_rt_asm_AM_IMP
f6ce : a90d             [ 2] 	lda #AM_IMP
f6d0 : 85de             [ 3] 	sta df_asmadmd
f6d2 : 60               [ 6] 	rts
                             ; Process ABS or REL
f6d3 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
f6d3 : 202ff7           [ 6] 	jsr df_rt_asm_get_operand
                             
f6d6 : 2051e5           [ 6] 	jsr df_rt_eos			; End of statement?
f6d9 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
f6db : c8               [ 2] 	iny						; Jump over ","
f6dc : b1c8             [ 5] 	lda (df_currlin),y		; Load X or Y
f6de : c8               [ 2] 	iny						; Jump over index reg
f6df : 85ca             [ 3] 	sta df_exeoff			; Save exe offset
f6e1 : c978             [ 2] 	cmp #'x'				; Indirect X?
f6e3 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
f6e5 :                       df_rt_asm_AM_ABSY
f6e5 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
f6e7 : 85de             [ 3] 	sta df_asmadmd
f6e9 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
f6ea :                       df_rt_asm_AM_ABS
f6ea : a001             [ 2] 	ldy #1					; Check first addressing mode
f6ec : b1c3             [ 5] 	lda (df_symtab),y
f6ee : c90f             [ 2] 	cmp #AM_REL
f6f0 : f002             [ 3] 	beq df_rt_asm_AM_REL
f6f2 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
f6f4 :                       df_rt_asm_AM_REL
f6f4 : 85de             [ 3] 	sta df_asmadmd
f6f6 : 60               [ 6] 	rts
                             ; Process ABSX
f6f7 :                       df_rt_asm_AM_ABSX
f6f7 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
f6f9 : 85de             [ 3] 	sta df_asmadmd
f6fb : 60               [ 6] 	rts
                             ; Process Immediate
f6fc :                       df_rt_asm_AM_IMM
                             	; skip over #
f6fc : e6ca             [ 5] 	inc df_exeoff
                             	; Get operand
f6fe : 202ff7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
f701 : a90c             [ 2] 	lda #AM_IMM
f703 : 85de             [ 3] 	sta df_asmadmd
f705 : 60               [ 6] 	rts
                             ; Process indirect
f706 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
f706 : e6ca             [ 5] 	inc df_exeoff
                             	; Calculate the operand
f708 : 202ff7           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
AS65 Assembler for R6502 [1.42].                                     Page  211
-------------------------------- bank\bank1.s --------------------------------

f70b : a4ca             [ 3] 	ldy df_exeoff
f70d : b1c8             [ 5] 	lda (df_currlin),y
f70f : c929             [ 2] 	cmp #')'			; Could be IND or INDY
f711 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
f713 : c8               [ 2] 	iny
f714 : c8               [ 2] 	iny
f715 : 84ca             [ 3] 	sty df_exeoff
f717 : a908             [ 2] 	lda #AM_ZPINDX
f719 : 85de             [ 3] 	sta df_asmadmd
f71b : 60               [ 6] 	rts
                             ; Pure indirect mode found
f71c :                       df_rt_asm_AM_ZPINDORY
f71c : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
f71e : c8               [ 2] 	iny
f71f : 84ca             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
f721 : 2051e5           [ 6] 	jsr df_rt_eos			; End of statement?
f724 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
f726 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
f728 : c8               [ 2] 	iny
f729 : c8               [ 2] 	iny
f72a : 84ca             [ 3] 	sty df_exeoff
f72c :                       df_rt_asm_AM_ZPIND
f72c : 85de             [ 3] 	sta df_asmadmd
f72e : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
f72f :                       df_rt_asm_get_operand
                             	; evaluate
f72f : 207bd8           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
f732 : 207ef1           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
f735 : 86e0             [ 3] 	stx df_asmoprnd
f737 : 85e1             [ 3] 	sta df_asmoprnd+1
f739 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
f73a :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
f73a : 8545             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
f73c : a0ff             [ 2] 	ldy #0xff
f73e : a200             [ 2] 	ldx #0
f740 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
f740 : c8               [ 2] 	iny
f741 : c8               [ 2] 	iny
                             	; if current index > num entries then error
f742 : 98               [ 2] 	tya
f743 : 38               [ 2] 	sec
f744 : e1c3             [ 6] 	sbc (df_symtab,x)
f746 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
f748 : b1c3             [ 5] 	lda (df_symtab),y
f74a : c545             [ 3] 	cmp tmp_d
AS65 Assembler for R6502 [1.42].                                     Page  212
-------------------------------- bank\bank1.s --------------------------------

f74c : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
f74e : 60               [ 6] 	rts
f74f :                       df_rt_asm_find_addr_mode_err
f74f : a900             [ 2] 	lda #AM_NONE
f751 :                       df_rt_asm_skip_to_sym_done; Used by function belo
f751 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
f752 :                       df_rt_asm_skip_to_sym
f752 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
f753 : a9a0             [ 2] 	lda #lo(df_asm_tokensyms)
f755 : 85c3             [ 3] 	sta df_symtab
f757 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f759 : 85c4             [ 3] 	sta df_symtab+1
f75b : a900             [ 2] 	lda #0
f75d : 85c5             [ 3] 	sta df_symoff
f75f : a8               [ 2] 	tay
f760 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
f760 : b1c3             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
f762 : c920             [ 2] 	cmp #' '
f764 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
f76c : 4c60f7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
f76f :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
f76f : ca               [ 2] 	dex
f770 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
f772 : 38               [ 2] 	sec
f773 : 65c3             [ 3] 	adc df_symtab
f775 : 85c3             [ 3] 	sta df_symtab
                             	_bcc 2
                             
f779 : e6c4             [ 5] 	inc df_symtab+1
f77b : 4c60f7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
f77e :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat\asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page  213
-------------------------------- bank\bank1.s --------------------------------

                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
f77e :                       df_asm_length
f77e : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
f78f :                       df_asm_altaddrmode
f78f : 00                    	db AM_NONE		;AM_NONE	= 0
f790 : 00                    	db AM_NONE		;AM_ABS	 	= 1
f791 : 00                    	db AM_NONE		;AM_ABSX	= 2
f792 : 00                    	db AM_NONE		;AM_ABSY	= 3
f793 : 01                    	db AM_ABS		;AM_ZP		= 4
f794 : 02                    	db AM_ABSX		;AM_ZPX		= 5
f795 : 03                    	db AM_ABSY		;AM_ZPY		= 6
f796 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
f797 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
f798 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
f799 : 00                    	db AM_NONE		;AM_ABSIND	= 10
f79a : 00                    	db AM_NONE		;AM_ABSINDX	= 11
f79b : 00                    	db AM_NONE		;AM_IMM		= 12
f79c : 00                    	db AM_NONE		;AM_ACC		= 13
f79d : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
f79e : 0f                    	db AM_REL		;AM_REL		= 15
f79f : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
f7a0 :                       df_asm_tokensyms
                             	;* Start with directives
f7a0 : 6f726702              	db	"org",		1*2
f7a4 : 1000                  	db	AM_DIR,		0x00
f7a6 : 6f707402              	db	"opt",		1*2
f7aa : 1000                  	db	AM_DIR,		0x00
f7ac : 646202                	db	"db",		1*2
f7af : 1000                  	db	AM_DIR,		0x00
f7b1 : 647702                	db	"dw",		1*2
f7b4 : 1000                  	db	AM_DIR,		0x00
f7b6 : 647302                	db	"ds",		1*2
f7b9 : 1000                  	db	AM_DIR,		0x00	
                             
f7bb : 61646312              	db	"adc",		9*2
f7bf : 0c69                  	db	AM_IMM,		0x69
f7c1 : 0465                  	db	AM_ZP,		0x65
f7c3 : 0575                  	db	AM_ZPX,		0x75
f7c5 : 016d                  	db	AM_ABS,		0x6d
f7c7 : 027d                  	db	AM_ABSX,	0x7d
f7c9 : 0379                  	db	AM_ABSY,	0x79
f7cb : 0861                  	db	AM_ZPINDX,	0x61
f7cd : 0971                  	db	AM_ZPINDY,	0x71
f7cf : 0772                  	db	AM_ZPIND,	0x72
                             	
f7d1 : 616e6412              	db	"and",		9*2
f7d5 : 0c29                  	db	AM_IMM,		0x29
f7d7 : 0425                  	db	AM_ZP,		0x25
f7d9 : 0535                  	db	AM_ZPX,		0x35
f7db : 012d                  	db	AM_ABS,		0x2d
f7dd : 023d                  	db	AM_ABSX,	0x3d
AS65 Assembler for R6502 [1.42].                                     Page  214
-------------------------------- bank\bank1.s --------------------------------

f7df : 0339                  	db	AM_ABSY,	0x39
f7e1 : 0821                  	db	AM_ZPINDX,	0x21
f7e3 : 0931                  	db	AM_ZPINDY,	0x31
f7e5 : 0732                  	db	AM_ZPIND,	0x32
                             
f7e7 : 636d7012              	db	"cmp",		9*2
f7eb : 0cc9                  	db	AM_IMM,		0xc9
f7ed : 04c5                  	db	AM_ZP,		0xc5
f7ef : 05d5                  	db	AM_ZPX,		0xd5
f7f1 : 01cd                  	db	AM_ABS,		0xcd
f7f3 : 02dd                  	db	AM_ABSX,	0xdd
f7f5 : 03d9                  	db	AM_ABSY,	0xd9
f7f7 : 08c1                  	db	AM_ZPINDX,	0xc1
f7f9 : 09d1                  	db	AM_ZPINDY,	0xd1
f7fb : 07d2                  	db	AM_ZPIND,	0xd2
                             
f7fd : 656f7212              	db	"eor",		9*2
f801 : 0c49                  	db	AM_IMM,		0x49
f803 : 0445                  	db	AM_ZP,		0x45
f805 : 0555                  	db	AM_ZPX,		0x55
f807 : 014d                  	db	AM_ABS,		0x4d
f809 : 025d                  	db	AM_ABSX,	0x5d
f80b : 0359                  	db	AM_ABSY,	0x59
f80d : 0841                  	db	AM_ZPINDX,	0x41
f80f : 0951                  	db	AM_ZPINDY,	0x51
f811 : 0752                  	db	AM_ZPIND,	0x52
                             
f813 : 6c646112              	db	"lda",		9*2
f817 : 0ca9                  	db	AM_IMM,		0xa9
f819 : 04a5                  	db	AM_ZP,		0xa5
f81b : 05b5                  	db	AM_ZPX,		0xb5
f81d : 01ad                  	db	AM_ABS,		0xad
f81f : 02bd                  	db	AM_ABSX,	0xbd
f821 : 03b9                  	db	AM_ABSY,	0xb9
f823 : 08a1                  	db	AM_ZPINDX,	0xa1
f825 : 09b1                  	db	AM_ZPINDY,	0xb1
f827 : 07b2                  	db	AM_ZPIND,	0xb2
                             
f829 : 6f726112              	db	"ora",		9*2
f82d : 0c09                  	db	AM_IMM,		0x09
f82f : 0405                  	db	AM_ZP,		0x05
f831 : 0515                  	db	AM_ZPX,		0x15
f833 : 010d                  	db	AM_ABS,		0x0d
f835 : 021d                  	db	AM_ABSX,	0x1d
f837 : 0319                  	db	AM_ABSY,	0x19
f839 : 0801                  	db	AM_ZPINDX,	0x01
f83b : 0911                  	db	AM_ZPINDY,	0x11
f83d : 0712                  	db	AM_ZPIND,	0x12
                             
f83f : 73626312              	db	"sbc",		9*2
f843 : 0ce9                  	db	AM_IMM,		0xe9
f845 : 04e5                  	db	AM_ZP,		0xe5
f847 : 05f5                  	db	AM_ZPX,		0xf5
f849 : 01ed                  	db	AM_ABS,		0xed
f84b : 02fd                  	db	AM_ABSX,	0xfd
f84d : 03f9                  	db	AM_ABSY,	0xf9
f84f : 08e1                  	db	AM_ZPINDX,	0xe1
f851 : 09f1                  	db	AM_ZPINDY,	0xf1
f853 : 07f2                  	db	AM_ZPIND,	0xf2
                             
f855 : 73746110              	db	"sta",		8*2
f859 : 0485                  	db	AM_ZP,		0x85
AS65 Assembler for R6502 [1.42].                                     Page  215
-------------------------------- bank\bank1.s --------------------------------

f85b : 0595                  	db	AM_ZPX,		0x95
f85d : 018d                  	db	AM_ABS,		0x8d
f85f : 029d                  	db	AM_ABSX,	0x9d
f861 : 0399                  	db	AM_ABSY,	0x99
f863 : 0881                  	db	AM_ZPINDX,	0x81
f865 : 0991                  	db	AM_ZPINDY,	0x91
f867 : 0792                  	db	AM_ZPIND,	0x92
                             
f869 : 61736c0a              	db	"asl",		5*2
f86d : 0d0a                  	db	AM_IMP,		0x0a
f86f : 0406                  	db	AM_ZP,		0x06
f871 : 0516                  	db	AM_ZPX,		0x16
f873 : 010e                  	db	AM_ABS,		0x0e
f875 : 021e                  	db	AM_ABSX,	0x1e
f877 : 6465630a              	db	"dec",		5*2
f87b : 0d3a                  	db	AM_IMP,		0x3a
f87d : 04c6                  	db	AM_ZP,		0xc6
f87f : 05d6                  	db	AM_ZPX,		0xd6
f881 : 01ce                  	db	AM_ABS,		0xce
f883 : 02de                  	db	AM_ABSX,	0xde
f885 : 696e630a              	db	"inc",		5*2
f889 : 0d1a                  	db	AM_IMP,		0x1a
f88b : 04e6                  	db	AM_ZP,		0xe6
f88d : 05f6                  	db	AM_ZPX,		0xf6
f88f : 01ee                  	db	AM_ABS,		0xee
f891 : 02fe                  	db	AM_ABSX,	0xfe
f893 : 6c73720a              	db	"lsr",		5*2
f897 : 0d4a                  	db	AM_IMP,		0x4a
f899 : 0446                  	db	AM_ZP,		0x46
f89b : 0556                  	db	AM_ZPX,		0x56
f89d : 014e                  	db	AM_ABS,		0x4e
f89f : 025e                  	db	AM_ABSX,	0x5e
f8a1 : 726f6c0a              	db	"rol",		5*2
f8a5 : 0d2a                  	db	AM_IMP,		0x2a
f8a7 : 0426                  	db	AM_ZP,		0x26
f8a9 : 0536                  	db	AM_ZPX,		0x36
f8ab : 012e                  	db	AM_ABS,		0x2e
f8ad : 023e                  	db	AM_ABSX,	0x3e
f8af : 726f720a              	db	"ror",		5*2
f8b3 : 0d6a                  	db	AM_IMP,		0x6a
f8b5 : 0466                  	db	AM_ZP,		0x66
f8b7 : 0576                  	db	AM_ZPX,		0x76
f8b9 : 016e                  	db	AM_ABS,		0x6e
f8bb : 027e                  	db	AM_ABSX,	0x7e
                             
f8bd : 6269740a              	db	"bit",		5*2
f8c1 : 0c89                  	db	AM_IMM,		0x89
f8c3 : 0424                  	db	AM_ZP,		0x24
f8c5 : 0534                  	db	AM_ZPX,		0x34
f8c7 : 012c                  	db	AM_ABS,		0x2c
f8c9 : 023c                  	db	AM_ABSX,	0x3c
                             	
f8cb : 62726b02              	db	"brk",		1*2
f8cf : 0d00                  	db	AM_IMP,		0x00
f8d1 : 73747002              	db	"stp",		1*2
f8d5 : 0ddb                  	db	AM_IMP,		0xdb
f8d7 : 77616902              	db	"wai",		1*2
f8db : 0dcb                  	db	AM_IMP,		0xcb
                             	
f8dd : 636c6302              	db	"clc",		1*2
f8e1 : 0d18                  	db	AM_IMP,		0x18
f8e3 : 636c6402              	db	"cld",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  216
-------------------------------- bank\bank1.s --------------------------------

f8e7 : 0dd8                  	db	AM_IMP,		0xd8
f8e9 : 636c6902              	db	"cli",		1*2
f8ed : 0d58                  	db	AM_IMP,		0x58
f8ef : 636c7602              	db	"clv",		1*2
f8f3 : 0db8                  	db	AM_IMP,		0xb8
f8f5 : 73656302              	db	"sec",		1*2
f8f9 : 0d38                  	db	AM_IMP,		0x38
f8fb : 73656402              	db	"sed",		1*2
f8ff : 0df8                  	db	AM_IMP,		0xf8
f901 : 73656902              	db	"sei",		1*2
f905 : 0d78                  	db	AM_IMP,		0x78
                             	
f907 : 63707806              	db	"cpx",		3*2
f90b : 0ce0                  	db	AM_IMM,		0xe0
f90d : 04e4                  	db	AM_ZP,		0xe4
f90f : 01ec                  	db	AM_ABS,		0xec
f911 : 63707906              	db	"cpy",		3*2
f915 : 0cc0                  	db	AM_IMM,		0xc0
f917 : 04c4                  	db	AM_ZP,		0xc4
f919 : 01cc                  	db	AM_ABS,		0xcc
f91b : 64657802              	db	"dex",		1*2
f91f : 0dca                  	db	AM_IMP,		0xca
f921 : 64657902              	db	"dey",		1*2
f925 : 0d88                  	db	AM_IMP,		0x88
f927 : 696e7802              	db	"inx",		1*2
f92b : 0de8                  	db	AM_IMP,		0xe8
f92d : 696e7902              	db	"iny",		1*2
f931 : 0dc8                  	db	AM_IMP,		0xc8
f933 : 6c64780a              	db	"ldx",		5*2
f937 : 0ca2                  	db	AM_IMM,		0xa2
f939 : 04a6                  	db	AM_ZP,		0xa6
f93b : 06b6                  	db	AM_ZPY,		0xb6
f93d : 01ae                  	db	AM_ABS,		0xae
f93f : 03be                  	db	AM_ABSY,	0xbe
f941 : 6c64790a              	db	"ldy",		5*2
f945 : 0ca0                  	db	AM_IMM,		0xa0
f947 : 04a4                  	db	AM_ZP,		0xa4
f949 : 05b4                  	db	AM_ZPX,		0xb4
f94b : 01ac                  	db	AM_ABS,		0xac
f94d : 02bc                  	db	AM_ABSX,	0xbc
f94f : 73747806              	db	"stx",		3*2
f953 : 0486                  	db	AM_ZP,		0x86
f955 : 0696                  	db	AM_ZPY,		0x96
f957 : 018e                  	db	AM_ABS,		0x8e
f959 : 73747906              	db	"sty",		3*2
f95d : 0484                  	db	AM_ZP,		0x84
f95f : 0594                  	db	AM_ZPX,		0x94
f961 : 018c                  	db	AM_ABS,		0x8c
f963 : 73747a08              	db	"stz",		4*2
f967 : 0464                  	db	AM_ZP,		0x64
f969 : 0574                  	db	AM_ZPX,		0x74
f96b : 019c                  	db	AM_ABS,		0x9c
f96d : 029e                  	db	AM_ABSX,	0x9e
                             	
                             
f96f : 62636302              	db	"bcc",		1*2
f973 : 0f90                  	db	AM_REL,		0x90
f975 : 62637302              	db	"bcs",		1*2
f979 : 0fb0                  	db	AM_REL,		0xb0
f97b : 62657102              	db	"beq",		1*2
f97f : 0ff0                  	db	AM_REL,		0xf0
f981 : 626d6902              	db	"bmi",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  217
-------------------------------- bank\bank1.s --------------------------------

f985 : 0f30                  	db	AM_REL,		0x30
f987 : 626e6502              	db	"bne",		1*2
f98b : 0fd0                  	db	AM_REL,		0xd0
f98d : 62706c02              	db	"bpl",		1*2
f991 : 0f10                  	db	AM_REL,		0x10
f993 : 62726102              	db	"bra",		1*2
f997 : 0f80                  	db	AM_REL,		0x80
f999 : 62766302              	db	"bvc",		1*2
f99d : 0f50                  	db	AM_REL,		0x50
f99f : 62767302              	db	"bvs",		1*2
f9a3 : 0f70                  	db	AM_REL,		0x70
f9a5 : 6a6d7006              	db	"jmp",		3*2
f9a9 : 014c                  	db	AM_ABS,		0x4c
f9ab : 0a6c                  	db	AM_ABSIND,	0x6c
f9ad : 0b7c                  	db	AM_ABSINDX,	0x7c
f9af : 6a737202              	db	"jsr",		1*2
f9b3 : 0120                  	db	AM_ABS,		0x20
                             	
f9b5 : 6e6f7002              	db	"nop",		1*2
f9b9 : 0dea                  	db	AM_IMP,		0xea
f9bb : 70686102              	db	"pha",		1*2
f9bf : 0d48                  	db	AM_IMP,		0x48
f9c1 : 70687002              	db	"php",		1*2
f9c5 : 0d08                  	db	AM_IMP,		0x08
f9c7 : 70687802              	db	"phx",		1*2
f9cb : 0dda                  	db	AM_IMP,		0xda
f9cd : 70687902              	db	"phy",		1*2
f9d1 : 0d5a                  	db	AM_IMP,		0x5a
f9d3 : 706c6102              	db	"pla",		1*2
f9d7 : 0d68                  	db	AM_IMP,		0x68
f9d9 : 706c7002              	db	"plp",		1*2
f9dd : 0d28                  	db	AM_IMP,		0x28
f9df : 706c7802              	db	"plx",		1*2
f9e3 : 0dfa                  	db	AM_IMP,		0xfa
f9e5 : 706c7902              	db	"ply",		1*2
f9e9 : 0d7a                  	db	AM_IMP,		0x7a
f9eb : 72746902              	db	"rti",		1*2
f9ef : 0d40                  	db	AM_IMP,		0x40
f9f1 : 72747302              	db	"rts",		1*2
f9f5 : 0d60                  	db	AM_IMP,		0x60
f9f7 : 74617802              	db	"tax",		1*2
f9fb : 0daa                  	db	AM_IMP,		0xaa
f9fd : 74617902              	db	"tay",		1*2
fa01 : 0da8                  	db	AM_IMP,		0xa8
fa03 : 74737802              	db	"tsx",		1*2
fa07 : 0dba                  	db	AM_IMP,		0xba
fa09 : 74786102              	db	"txa",		1*2
fa0d : 0d8a                  	db	AM_IMP,		0x8a
fa0f : 74787302              	db	"txs",		1*2
fa13 : 0d9a                  	db	AM_IMP,		0x9a
fa15 : 74796102              	db	"tya",		1*2
fa19 : 0d98                  	db	AM_IMP,		0x98
                             	
fa1b : 74726204              	db	"trb",		2*2
fa1f : 0414                  	db	AM_ZP,		0x14
fa21 : 011c                  	db	AM_ABS,		0x1c
fa23 : 74736204              	db	"tsb",		2*2
fa27 : 0404                  	db	AM_ZP,		0x04
fa29 : 010c                  	db	AM_ABS,		0x0c
                             	
fa2b : 6262723002            	db	"bbr0",		1*2
fa30 : 0f0f                  	db	AM_REL,		0x0f
AS65 Assembler for R6502 [1.42].                                     Page  218
-------------------------------- bank\bank1.s --------------------------------

fa32 : 6262723102            	db	"bbr1",		1*2
fa37 : 0f1f                  	db	AM_REL,		0x1f
fa39 : 6262723202            	db	"bbr2",		1*2
fa3e : 0f2f                  	db	AM_REL,		0x2f
fa40 : 6262723302            	db	"bbr3",		1*2
fa45 : 0f3f                  	db	AM_REL,		0x3f
fa47 : 6262723402            	db	"bbr4",		1*2
fa4c : 0f4f                  	db	AM_REL,		0x4f
fa4e : 6262723502            	db	"bbr5",		1*2
fa53 : 0f5f                  	db	AM_REL,		0x5f
fa55 : 6262723602            	db	"bbr6",		1*2
fa5a : 0f6f                  	db	AM_REL,		0x6f
fa5c : 6262723702            	db	"bbr7",		1*2
fa61 : 0f7f                  	db	AM_REL,		0x7f
fa63 : 6262733002            	db	"bbs0",		1*2
fa68 : 0f8f                  	db	AM_REL,		0x8f
fa6a : 6262733102            	db	"bbs1",		1*2
fa6f : 0f9f                  	db	AM_REL,		0x9f
fa71 : 6262733202            	db	"bbs2",		1*2
fa76 : 0faf                  	db	AM_REL,		0xaf
fa78 : 6262733302            	db	"bbs3",		1*2
fa7d : 0fbf                  	db	AM_REL,		0xbf
fa7f : 6262733402            	db	"bbs4",		1*2
fa84 : 0fcf                  	db	AM_REL,		0xcf
fa86 : 6262733502            	db	"bbs5",		1*2
fa8b : 0fdf                  	db	AM_REL,		0xdf
fa8d : 6262733602            	db	"bbs6",		1*2
fa92 : 0fef                  	db	AM_REL,		0xef
fa94 : 6262733702            	db	"bbs7",		1*2
fa99 : 0fff                  	db	AM_REL,		0xff
fa9b : 726d623002            	db	"rmb0",		1*2
faa0 : 0f07                  	db	AM_REL,		0x07
faa2 : 726d623102            	db	"rmb1",		1*2
faa7 : 0f17                  	db	AM_REL,		0x17
faa9 : 726d623202            	db	"rmb2",		1*2
faae : 0f27                  	db	AM_REL,		0x27
fab0 : 726d623302            	db	"rmb3",		1*2
fab5 : 0f37                  	db	AM_REL,		0x37
fab7 : 726d623402            	db	"rmb4",		1*2
fabc : 0f47                  	db	AM_REL,		0x47
fabe : 726d623502            	db	"rmb5",		1*2
fac3 : 0f57                  	db	AM_REL,		0x57
fac5 : 726d623602            	db	"rmb6",		1*2
faca : 0f67                  	db	AM_REL,		0x67
facc : 726d623702            	db	"rmb7",		1*2
fad1 : 0f77                  	db	AM_REL,		0x77
fad3 : 736d623002            	db	"smb0",		1*2
fad8 : 0f87                  	db	AM_REL,		0x87
fada : 736d623102            	db	"smb1",		1*2
fadf : 0f97                  	db	AM_REL,		0x97
fae1 : 736d623202            	db	"smb2",		1*2
fae6 : 0fa7                  	db	AM_REL,		0xa7
fae8 : 736d623302            	db	"smb3",		1*2
faed : 0fb7                  	db	AM_REL,		0xb7
faef : 736d623402            	db	"smb4",		1*2
faf4 : 0fc7                  	db	AM_REL,		0xc7
faf6 : 736d623502            	db	"smb5",		1*2
fafb : 0fd7                  	db	AM_REL,		0xd7
fafd : 736d623602            	db	"smb6",		1*2
fb02 : 0fe7                  	db	AM_REL,		0xe7
fb04 : 736d623702            	db	"smb7",		1*2
fb09 : 0ff7                  	db	AM_REL,		0xf7
AS65 Assembler for R6502 [1.42].                                     Page  219
-------------------------------- bank\bank1.s --------------------------------

                             	
                             	;* Terminates with a zero
fb0b : 00                    	db	0
                             
                             	include	"dflat\asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
fb0c :                       df_tk_asm_tokenjmp
fb0c : 65d6                  	dw	df_tk_asm_org
fb0e : 65d6                  	dw	df_tk_asm_opt
fb10 : b0d5                  	dw	df_tk_asm_db
fb12 : b0d5                  	dw	df_tk_asm_dw
fb14 : 65d6                  	dw	df_tk_asm_ds
                             
fb16 :                       df_rt_asm_tokenjmp
fb16 : c5f4                  	dw	df_rt_asm_org
fb18 : d7f4                  	dw	df_rt_asm_opt
fb1a : dff4                  	dw	df_rt_asm_db
fb1c : e2f4                  	dw	df_rt_asm_dw
fb1e : 5bf5                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fb20 :                       asm_init
                             	; Zero the PC
fb20 : 64db             [ 3] 	stz df_asmpc
fb22 : 64dc             [ 3] 	stz df_asmpc+1
                             	; Zero the option
fb24 : 64dd             [ 3] 	stz df_asmopt
fb26 : 60               [ 6] 	rts
                             	
fb27 :                       mod_sz_asm_e
AS65 Assembler for R6502 [1.42].                                     Page  220
-------------------------------- bank\bank1.s --------------------------------

                             
                             
                             	; End of Code
fb27 :                       _code_end
fb27 :                       _bank1_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
