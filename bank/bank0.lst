AS65 Assembler for R6502 [1.42].                                     Page    1
-------------------------------- bank\bank0.s --------------------------------

7814 lines read, no errors in pass 1.
c000 =                       _bank0_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
-------------------------------- bank\bank0.s --------------------------------

0002 =                       VDP_LONGDELAY 	= 2
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
-------------------------------- bank\bank0.s --------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
-------------------------------- bank\bank0.s --------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
AS65 Assembler for R6502 [1.42].                                     Page    5
-------------------------------- bank\bank0.s --------------------------------

0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
AS65 Assembler for R6502 [1.42].                                     Page    6
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
                             	phy
                             	pha
                             	jsr str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page    7
-------------------------------- bank\bank0.s --------------------------------

                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
AS65 Assembler for R6502 [1.42].                                     Page    8
-------------------------------- bank\bank0.s --------------------------------

                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
                             	endm
                             
                             _bcs macro skip
AS65 Assembler for R6502 [1.42].                                     Page    9
-------------------------------- bank\bank0.s --------------------------------

                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
AS65 Assembler for R6502 [1.42].                                     Page   10
-------------------------------- bank\bank0.s --------------------------------

0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
AS65 Assembler for R6502 [1.42].                                     Page   11
-------------------------------- bank\bank0.s --------------------------------

0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
AS65 Assembler for R6502 [1.42].                                     Page   12
-------------------------------- bank\bank0.s --------------------------------

                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
AS65 Assembler for R6502 [1.42].                                     Page   13
-------------------------------- bank\bank0.s --------------------------------

0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
AS65 Assembler for R6502 [1.42].                                     Page   14
-------------------------------- bank\bank0.s --------------------------------

                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_ARRY	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
AS65 Assembler for R6502 [1.42].                                     Page   15
-------------------------------- bank\bank0.s --------------------------------

0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0001 =                       DFST_INT	=	0x01
0080 =                       DFST_STR	=	0x80
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   16
-------------------------------- bank\bank0.s --------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
AS65 Assembler for R6502 [1.42].                                     Page   17
-------------------------------- bank\bank0.s --------------------------------

                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
-------------------------------- bank\bank0.s --------------------------------

                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
-------------------------------- bank\bank0.s --------------------------------

009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
-------------------------------- bank\bank0.s --------------------------------

                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : dfc6                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : deca                  	fcw init			; 0xfffc : Reset Vector
fffe : 1fc7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
c000 : c0                    	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c48c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c45c5           [ 3] 	jmp io_get_ch			; Vec 1
AS65 Assembler for R6502 [1.42].                                     Page   22
-------------------------------- bank\bank0.s --------------------------------

c007 : 4cd8c5           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c10c6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c1cc6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c7dc6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c25c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4ce5c5           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4cfcc5           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ; 
c02e :                       mod_sz_autogen_s 
c02e :                       _df_init 
                               _bankjsr $f1b3, 1 
                             
c046 :                       _df_pg_dflat 
                               _bankjsr $d764, 1 
                             
c05e :                       _fs_chdir_w 
                               _bankjsr $d4df, 2 
                             
c076 :                       _fs_mkdir_w 
                               _bankjsr $d572, 2 
                             
c08e :                       _fs_delete_w 
                               _bankjsr $d4a2, 2 
                             
c0a6 :                       _fs_close_w 
                               _bankjsr $d461, 2 
                             
c0be :                       _fs_get_byte_w 
                               _bankjsr $d185, 2 
                             
c0d6 :                       _fs_open_read_w 
                               _bankjsr $d34d, 2 
                             
c0ee :                       _fs_open_write_w 
                               _bankjsr $d411, 2 
                             
c106 :                       _fs_put_byte_w 
                               _bankjsr $d2da, 2 
                             
c11e :                       _fs_dir_find_entry_w 
                               _bankjsr $cfc8, 2 
                             
c136 :                       _fs_dir_entry_next_w 
                               _bankjsr $cffe, 2 
AS65 Assembler for R6502 [1.42].                                     Page   23
-------------------------------- bank\bank0.s --------------------------------

                             
c14e :                       _fs_dir_root_start_w 
                               _bankjsr $cf83, 2 
                             
c166 :                       _get_byte 
                               _bankjsr $cedb, 0 
                             
c17e :                       _put_byte 
                               _bankjsr $cef0, 0 
                             
c196 :                       _gr_get_key 
                               _bankjsr $df8c, 0 
                             
c1ae :                       _gr_put_byte 
                               _bankjsr $df99, 0 
                             
c1c6 :                       _gr_init_screen 
                               _bankjsr $da59, 0 
                             
c1de :                       _init_acia 
                               _bankjsr $cefd, 0 
                             
c1f6 :                       _init_cia0 
                               _bankjsr $ce88, 0 
                             
c20e :                       _init_cia1 
                               _bankjsr $ceb9, 0 
                             
c226 :                       _init_fs 
                               _bankjsr $ce60, 2 
                             
c23e :                       _init_sdcard 
                               _bankjsr $cb5a, 2 
                             
c256 :                       _init_snd 
                               _bankjsr $d2bc, 0 
                             
c26e :                       _init_keyboard 
                               _bankjsr $cf0f, 0 
                             
c286 :                       _kb_read_raw 
                               _bankjsr $cf1e, 0 
                             
c29e :                       _kb_read_dip 
                               _bankjsr $cf89, 0 
                             
c2b6 :                       _command_line 
                               _bankjsr $cb5a, 0 
                             
c2ce :                       _gr_cls 
                               _bankjsr $da6c, 0 
                             
c2e6 :                       _gr_init_hires 
                               _bankjsr $da16, 0 
                             
c2fe :                       _gr_line 
                               _bankjsr $ddc6, 0 
                             
c316 :                       _gr_box 
                               _bankjsr $dc06, 0 
                             
c32e :                       _gr_circle 
AS65 Assembler for R6502 [1.42].                                     Page   24
-------------------------------- bank\bank0.s --------------------------------

                               _bankjsr $dd11, 0 
                             
c346 :                       _gr_plot 
                               _bankjsr $dad7, 0 
                             
c35e :                       _gr_hchar 
                               _bankjsr $db15, 0 
                             
c376 :                       _gr_point 
                               _bankjsr $dbbb, 0 
                             
c38e :                       _gr_get 
                               _bankjsr $daf2, 0 
                             
c3a6 :                       _gr_set_cur 
                               _bankjsr $dafa, 0 
                             
c3be :                       _snd_get_note 
                               _bankjsr $d2b5, 0 
                             
c3d6 :                       _snd_get_joy0 
                               _bankjsr $c67d, 0 
                             
c3ee :                       _snd_set 
                               _bankjsr $c625, 0 
                             
c406 :                       _vdp_peek 
                               _bankjsr $c61c, 0 
                             
c41e :                       _vdp_poke 
                               _bankjsr $c610, 0 
                             
c436 :                       _vdp_init 
                               _bankjsr $d800, 0 
                             
c44e :                       _rtc_init 
                               _bankjsr $d0df, 0 
                             
c466 :                       _rtc_gettimedate 
                               _bankjsr $d246, 0 
                             
c47e :                       _rtc_setdatetime 
                               _bankjsr $d197, 0 
                             
c496 :                       _rtc_nvread 
                               _bankjsr $d2ac, 0 
                             
c4ae :                       _rtc_nvwrite 
                               _bankjsr $d294, 0 
                             
c4c6 :                       _fs_dir_fhandle_str 
                               _bankjsr $d586, 2 
                             
c4de :                       _sd_sendcmd17 
                               _bankjsr $cd32, 2 
                             
c4f6 :                       _sd_sendcmd24 
                               _bankjsr $cdab, 2 
                             
c50e :                       mod_sz_autogen_e 
                             
                             	
AS65 Assembler for R6502 [1.42].                                     Page   25
-------------------------------- bank\bank0.s --------------------------------

c50e :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c50e :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c50e :                       io_init
c50e : a900             [ 2] 	lda #0				; Assume it's serial
c510 : 48               [ 3] 	pha
c511 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c514 : 2910             [ 2] 	and #0x10
c516 : d00b             [ 3] 	bne io_init_set_default
c518 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c51b : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c51d : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c51f : 68               [ 4] 	pla
c520 : a901             [ 2] 	lda #1
c522 : 48               [ 3] 	pha
c523 :                       io_init_set_default
c523 : 68               [ 4] 	pla
c524 : 8d000c           [ 4] 	sta io_default
c527 : 4c2ac5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
AS65 Assembler for R6502 [1.42].                                     Page   26
-------------------------------- bank\bank0.s --------------------------------

                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c52a :                       io_set_default			; Entry point for default
c52a : ad000c           [ 4] 	lda io_default
c52d :                       io_active_device		; Entry point for A set
c52d : 0a               [ 2] 	asl	a				; x16 the Block number
c52e : 0a               [ 2] 	asl a
c52f : 0a               [ 2] 	asl a
c530 : 0a               [ 2] 	asl a
c531 : a8               [ 2] 	tay
c532 : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c534 :                       io_copy_data
c534 : b9a8c5           [ 4] 	lda io_devices,y
c537 : 9d010c           [ 5] 	sta io_block,x
c53a : c8               [ 2] 	iny
c53b : e8               [ 2] 	inx
c53c : e010             [ 2] 	cpx #io_struct
c53e : d0f4             [ 3] 	bne io_copy_data
                             	
c540 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c542 : 854a             [ 3] 	sta buf_ef
c544 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c545 :                       io_get_ch
c545 : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c548 :                       io_put_ch
c548 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c54b :                       io_open_read
c54b : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
AS65 Assembler for R6502 [1.42].                                     Page   27
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : All
                             ;****************************************
c54e :                       io_open_write
c54e : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c551 :                       io_close
c551 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c554 :                       io_delete
c554 : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c557 :                       io_read_line
c557 : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c559 : 8548             [ 3] 	sta buf_adr+1
c55b : 8449             [ 3] 	sty buf_sz			; Max length
c55d : 08               [ 3] 	php					; Save echo state
c55e : a000             [ 2] 	ldy #0x00			; Starting at first byte
c560 :                       io_get_line_byte
c560 : 38               [ 2] 	sec					; Getting bytes synchronously
c561 : 2045c5           [ 6] 	jsr io_get_ch		; Get a byte
c564 : b026             [ 3] 	bcs io_get_line_done; Got nothing then finish
c566 : 28               [ 4] 	plp					; Get echo state
c567 : 08               [ 3] 	php					; Instantly save it back
c568 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c56a : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c56c : d005             [ 3] 	bne io_do_echo
c56e : c000             [ 2] 	cpy #0				; Already at beginning?
c570 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c572 : 88               [ 2] 	dey					; Else decrement length
c573 :                       io_do_echo
c573 : 2048c5           [ 6] 	jsr io_put_ch		; Echo it
c576 :                       io_skip_echo
c576 : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c578 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c57a : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c57c : f003             [ 3] 	beq io_skip_special
c57e : 9147             [ 5] 	sta (buf_adr),y		; Save it
c580 : c8               [ 2] 	iny					; Increase length
c581 :                       io_skip_special
AS65 Assembler for R6502 [1.42].                                     Page   28
-------------------------------- bank\bank0.s --------------------------------

c581 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c583 : f007             [ 3] 	beq io_get_line_done	; If yes then done
c585 : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c587 : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c589 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c58a : 38               [ 2] 	sec					; Yes, set carry flag
c58b : 60               [ 6] 	rts					; And done
c58c :                       io_get_line_done
c58c : a900             [ 2] 	lda #0
c58e : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c590 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c591 : 18               [ 2] 	clc					; Clear carry flag
c592 : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c593 :                       io_print_line
c593 : 48               [ 3] 	pha
                             
c594 : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c596 : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c598 : a000             [ 2] 	ldy #0						; Start at the beginning!
c59a :                       io_print_line_byte
c59a : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c59c : f006             [ 3] 	beq io_print_done			; If zero then done - print
c59e : 2048c5           [ 6] 	jsr io_put_ch				; Transmit
c5a1 : c8               [ 2] 	iny
c5a2 : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c5a4 :                       io_print_done
c5a4 : 68               [ 4] 	pla
c5a5 : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c5a6 :                       io_null_op
c5a6 : 18               [ 2] 	clc
c5a7 : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c5a8 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c5a8 :                       io_device0					; Serial device, input = Ser, outp
c5a8 : 66c1                  	dw	_get_byte			; io_get_ch
c5aa : 7ec1                  	dw	_put_byte			; io_put_ch
c5ac : a6c5                  	dw	io_null_op			; io_open_r
c5ae : a6c5                  	dw	io_null_op			; io_open_w
c5b0 : a6c5                  	dw	io_null_op			; io_close_f
c5b2 : a6c5                  	dw	io_null_op			; io_del_f
c5b4 : a6c5                  	dw	io_null_op			; io_ext1
c5b6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c5b8 :                       io_device1					; Default device, input = screen e
c5b8 : 96c1                  	dw	_gr_get_key			; io_get_ch
c5ba : aec1                  	dw	_gr_put_byte		; io_put_ch
c5bc : a6c5                  	dw	io_null_op			; io_open_r
AS65 Assembler for R6502 [1.42].                                     Page   29
-------------------------------- bank\bank0.s --------------------------------

c5be : a6c5                  	dw	io_null_op			; io_open_w
c5c0 : a6c5                  	dw	io_null_op			; io_close_f
c5c2 : a6c5                  	dw	io_null_op			; io_del_f
c5c4 : a6c5                  	dw	io_null_op			; io_ext1
c5c6 : a6c5                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c5c8 :                       io_device2					; SD device, input = SD, output = 
c5c8 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c5ca : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c5cc : d6c0                  	dw	_fs_open_read_w		; io_open_r
c5ce : eec0                  	dw	_fs_open_write_w	; io_open_w
c5d0 : a6c0                  	dw	_fs_close_w			; io_close_f
c5d2 : 8ec0                  	dw	_fs_delete_w		; io_del_f
c5d4 : a6c5                  	dw	io_null_op			; io_ext1
c5d6 : a6c5                  	dw	io_null_op			; io_ext2
                             
c5d8 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5d8 :                       vdp_wr_reg
c5d8 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5db : ea               [ 2] 	nop
c5dc : ea               [ 2] 	nop
c5dd : 0980             [ 2] 	ora #0x80
c5df : 8d0105           [ 4] 	sta VDP_MODE1
c5e2 : 4980             [ 2] 	eor #0x80
c5e4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5e5 :                       vdp_wr_addr
AS65 Assembler for R6502 [1.42].                                     Page   30
-------------------------------- bank\bank0.s --------------------------------

c5e5 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5e8 : ea               [ 2] 	nop
c5e9 : ea               [ 2] 	nop
c5ea : 0940             [ 2] 	ora #0x40		; Required by VDP
c5ec : 8d0105           [ 4] 	sta VDP_MODE1
c5ef : 4940             [ 2] 	eor #0x40		; Undo that bit
c5f1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5f2 :                       vdp_mem_wait
c5f2 : da               [ 3] 	phx								; 3
c5f3 : a616             [ 3] 	ldx vdp_delay					; 3
c5f5 : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c5f7 :                       vdp_mem_wait_loop
c5f7 : ca               [ 2] 	dex								; 2
c5f8 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c5fa :                       vdp_mem_wait_end
c5fa : fa               [ 4] 	plx								; 3
c5fb : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c5fc :                       vdp_rd_addr
c5fc : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c5ff : ea               [ 2] 	nop
c600 : ea               [ 2] 	nop
c601 : 8d0105           [ 4] 	sta VDP_MODE1
c604 : 80ec             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c606 :                       vdp_rd_vram
c606 : ad0005           [ 4] 	lda VDP_VRAM
c609 : 80e7             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
AS65 Assembler for R6502 [1.42].                                     Page   31
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c60b :                       vdp_wr_vram
c60b : 8d0005           [ 4] 	sta VDP_VRAM
c60e : 80e2             [ 4] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c610 :                       vdp_poke
c610 : 48               [ 3] 	pha
c611 : 98               [ 2] 	tya
c612 : 78               [ 2] 	sei
c613 : 20e5c5           [ 6] 	jsr vdp_wr_addr
c616 : 68               [ 4] 	pla
c617 : 200bc6           [ 6] 	jsr vdp_wr_vram
c61a : 58               [ 2] 	cli
c61b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c61c :                       vdp_peek
c61c : 78               [ 2] 	sei
c61d : 20fcc5           [ 6] 	jsr vdp_rd_addr
c620 : 2006c6           [ 6] 	jsr vdp_rd_vram
c623 : 58               [ 2] 	cli
c624 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
AS65 Assembler for R6502 [1.42].                                     Page   32
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c625 :                       snd_set
c625 : 48               [ 3] 	pha
                             
c626 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c628 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c62b : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c62e : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c631 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c633 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c635 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c638 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c63a : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c63d : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c640 : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c642 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c645 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c647 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c64a : 68               [ 4] 	pla
                             	
c64b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c64c :                       snd_get
c64c : 48               [ 3] 	pha
                             
c64d : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c64f : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c652 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c655 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c658 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c65a : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c65c : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c65f : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c661 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c664 : a900             [ 2] 	lda #0x00				; Set Port A to input
c666 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c669 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c66c : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c66e : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c670 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c673 : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
AS65 Assembler for R6502 [1.42].                                     Page   33
-------------------------------- bank\bank0.s --------------------------------

                             	
c676 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c678 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c67b : 68               [ 4] 	pla
                             	
c67c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c67d :                       snd_get_joy0
c67d : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c67f : 204cc6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c682 : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c683 :                       main
                             
c683 :                       infinity
c683 : 2046c0           [ 6] 	jsr _df_pg_dflat
c686 : 4c83c6           [ 3] 	jmp infinity
                             
c689 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c689 : 4275696c64203a..       db "Build : 20/07/2023\r" 
c69c : 3132384b204272..       db "128K Breadboard Computer\r" 
c6b5 : 42792040363530..       db "By @6502Nerd\r" 
c6c2 : 436f7079726967..       db "Copyright (c) 2022\r",0 
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
AS65 Assembler for R6502 [1.42].                                     Page   34
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c6d6 :                       init_nmi
                             	; Core IRQ handler
c6d6 : a9e2             [ 2] 	lda #lo(nmi)
c6d8 : 8502             [ 3] 	sta int_nmi
c6da : a9c6             [ 2] 	lda #hi(nmi)
c6dc : 8503             [ 3] 	sta int_nmi+1
c6de : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c6df :                       call_nmi_master
c6df : 6c0200           [ 6] 	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* Only the 6551 uses this - fills the receive bu
c6e2 :                       nmi
c6e2 : 48               [ 3] 	pha
                             
c6e3 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c6e6 : 100c             [ 3] 	bpl	nmi_fin					; If no interrupt don't do anyth
                             
c6e8 : 5a               [ 3] 	phy
c6e9 : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c6ec : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c6ee : 990008           [ 5] 	sta ser_buf,y
c6f1 : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c6f3 : 7a               [ 4] 	ply
c6f4 :                       nmi_fin
                             
c6f4 : 68               [ 4] 	pla
c6f5 : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c6f6 :                       init_irq
                             	; Core IRQ handler
c6f6 : a930             [ 2] 	lda #lo(irq)
c6f8 : 8504             [ 3] 	sta int_irq
c6fa : a9c7             [ 2] 	lda #hi(irq)
c6fc : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c6fe : a95e             [ 2] 	lda #lo(irq_brk)
c700 : 8506             [ 3] 	sta int_brk
c702 : a9c7             [ 2] 	lda #hi(irq_brk)
AS65 Assembler for R6502 [1.42].                                     Page   35
-------------------------------- bank\bank0.s --------------------------------

c704 : 8507             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c706 : a92f             [ 2] 	lda #lo(null_handler)
c708 : 8508             [ 3] 	sta int_uservdp
c70a : a9c7             [ 2] 	lda #hi(null_handler)
c70c : 8509             [ 3] 	sta int_uservdp+1
                             
c70e : a92f             [ 2] 	lda #lo(null_handler)
c710 : 850a             [ 3] 	sta int_usercia0
c712 : a9c7             [ 2] 	lda #hi(null_handler)
c714 : 850b             [ 3] 	sta int_usercia0+1
                             
c716 : a92f             [ 2] 	lda #lo(null_handler)
c718 : 850c             [ 3] 	sta int_usercia1
c71a : a9c7             [ 2] 	lda #hi(null_handler)
c71c : 850d             [ 3] 	sta int_usercia1+1
                             
c71e : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c71f :                       call_irq_master
c71f : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c722 :                       call_irq_brk
c722 : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c725 :                       call_irq_uservdp
c725 : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c728 :                       call_irq_usercia0
c728 : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c72b :                       call_irq_usercia1
c72b : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c72e :                       null_irq
c72e : 40               [ 6] 	rti
                             
                             ;* null handler
c72f :                       null_handler
c72f : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c730 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c733 : ba               [ 2] 	tsx
c734 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c737 : 2910             [ 2] 	and #0x10
c739 : d0e7             [ 3] 	bne call_irq_brk
                             	
AS65 Assembler for R6502 [1.42].                                     Page   36
-------------------------------- bank\bank0.s --------------------------------

c73b : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c73c : ad8d04           [ 4] 	lda IO_1 + IFR
c73f : 1003             [ 3] 	bpl irq_check_vdp
c741 : 202bc7           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c744 :                       irq_check_vdp	
c744 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c747 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c749 : 2025c7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c74c : 20abc7           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c74f : 2089c7           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c752 :                       irq_check_cia0
c752 : ad0d04           [ 4] 	lda IO_0 + IFR
c755 : 1003             [ 3] 	bpl irq_fin
c757 : 2028c7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c75a :                       irq_fin
                             	_pullAXY
                             
c75d : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c75e :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c75e : 38               [ 2] 	sec
c75f : bd0501           [ 4] 	lda 0x0105,x
c762 : e902             [ 2] 	sbc #2
c764 : 85a4             [ 3] 	sta df_brkpc
c766 : bd0601           [ 4] 	lda 0x0106,x
c769 : e900             [ 2] 	sbc #0
c76b : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c76d : a001             [ 2] 	ldy #1
c76f : b1a4             [ 5] 	lda (df_brkpc),y
c771 : 85a6             [ 3] 	sta df_brkval
c773 : 859f             [ 3] 	sta errno
                             	; now update the return address
c775 : a5a2             [ 3] 	lda df_pc
c777 : 9d0501           [ 5] 	sta 0x105,x
c77a : a5a3             [ 3] 	lda df_pc+1
c77c : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c782 : 8585             [ 3] 	sta num_a
c784 : 8686             [ 3] 	stx num_a+1
c786 : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c788 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
AS65 Assembler for R6502 [1.42].                                     Page   37
-------------------------------- bank\bank0.s --------------------------------

                             ;* Keyboard interrupt handler
                             ;****************************************
c789 :                       int_kb_handler	
c789 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c78b : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c78d : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c790 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c792 : f00c             [ 3] 	beq int_keys_up
c794 :                       int_do_read
c794 : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c796 : a53b             [ 3] 	lda kb_debounce			; Set debounce
c798 : 8537             [ 3] 	sta kb_deb
c79a :                       int_skip_scan
c79a : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c79c : 8d0d04           [ 4] 	sta IO_0 + IFR
c79f : 60               [ 6] 	rts
c7a0 :                       int_keys_up					; No key pressed
c7a0 : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c7a2 : 6434             [ 3] 	stz kb_last
c7a4 : 6435             [ 3] 	stz kb_code
c7a6 : 6437             [ 3] 	stz kb_deb
c7a8 : 6438             [ 3] 	stz kb_rep
c7aa : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c7ab :                       int_vdp_handler
c7ab : 20d7c7           [ 6] 	jsr update_timers	; If it is then update system 
                             
c7ae : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c7b0 : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c7b2 : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c7b4 : a513             [ 3] 	lda vdp_curstat		; Check it
c7b6 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c7b8 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c7ba : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c7bc : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c7be : 8513             [ 3] 	sta vdp_curstat		
                             
c7c0 : 18               [ 2] 	clc					; Add offset for cursor address in vram
c7c1 : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c7c3 : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c7c5 : aa               [ 2] 	tax
c7c6 : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c7c8 : 6900             [ 2] 	adc #0
                             
c7ca : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	
c7cd : a513             [ 3] 	lda vdp_curstat
c7cf : 2980             [ 2] 	and #0x80
c7d1 : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c7d3 : 200bc6           [ 6] 	jsr vdp_wr_vram
c7d6 :                       int_vdp_fin	
c7d6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
AS65 Assembler for R6502 [1.42].                                     Page   38
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
c7d7 :                       update_timers
c7d7 : e610             [ 5] 	inc vdp_int_cnt
c7d9 : d002             [ 3] 	bne inc_kb_timers
c7db : e611             [ 5] 	inc vdp_int_cnt+1
c7dd :                       inc_kb_timers
c7dd : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c7df : f002             [ 3] 	beq skip_kb_deb
c7e1 : c637             [ 5] 	dec kb_deb
c7e3 :                       skip_kb_deb
c7e3 : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c7e5 : f002             [ 3] 	beq skip_kb_rep
c7e7 : c638             [ 5] 	dec kb_rep
c7e9 :                       skip_kb_rep
c7e9 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c7ea :                       long_delay
c7ea : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c7ee : a000             [ 2] 	ldy #0x00
c7f0 :                       long_delay_1
c7f0 : ea               [ 2] 	nop
c7f1 : ea               [ 2] 	nop
c7f2 : ea               [ 2] 	nop
c7f3 : ea               [ 2] 	nop
c7f4 : 88               [ 2] 	dey
c7f5 : d0f9             [ 3] 	bne long_delay_1
c7f7 : ca               [ 2] 	dex
c7f8 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c7fd : 28               [ 4] 	plp
                             	
c7fe : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   39
-------------------------------- bank\bank0.s --------------------------------

                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c7ff :                       utilPrintSPC
c7ff : 48               [ 3] 	pha
c800 : a920             [ 2] 	lda #' '
c802 : 2048c5           [ 6] 	jsr io_put_ch
c805 : 68               [ 4] 	pla
c806 : 60               [ 6] 	rts
                             
c807 :                       utilPrintCRLF
c807 : 48               [ 3] 	pha
c808 : a90d             [ 2] 	lda #UTF_CR
c80a : 2048c5           [ 6] 	jsr io_put_ch
c80d : 68               [ 4] 	pla
c80e : 60               [ 6] 	rts
                             
c80f :                       utilPrintA
c80f : 8545             [ 3] 	sta tmp_d
c811 : 48               [ 3] 	pha
c812 : 8a               [ 2] 	txa
c813 : 48               [ 3] 	pha
c814 : a545             [ 3] 	lda tmp_d
c816 : 2034c8           [ 6] 	jsr str_a_to_x
c819 : 2048c5           [ 6] 	jsr io_put_ch
c81c : 8a               [ 2] 	txa
c81d : 2048c5           [ 6] 	jsr io_put_ch
c820 : 68               [ 4] 	pla
c821 : aa               [ 2] 	tax
c822 : 68               [ 4] 	pla
c823 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c824 :                       util_clr_mem
c824 : 48               [ 3] 	pha
c825 : 5a               [ 3] 	phy
c826 : 863f             [ 3] 	stx tmp_v1
c828 : 8540             [ 3] 	sta tmp_v1+1
AS65 Assembler for R6502 [1.42].                                     Page   40
-------------------------------- bank\bank0.s --------------------------------

c82a : a900             [ 2] 	lda #0
c82c :                       mem_clr_byte
c82c : 88               [ 2] 	dey
c82d : 913f             [ 5] 	sta (tmp_v1),y
c82f : d0fb             [ 3] 	bne mem_clr_byte
c831 : 7a               [ 4] 	ply
c832 : 68               [ 4] 	pla
c833 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c834 :                       str_a_to_x
c834 : 48               [ 3] 	pha					; Save the byte using later on
c835 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c837 : 18               [ 2] 	clc
c838 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c83a : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c83c : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c83e : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c840 :                       skip_a_f_1
c840 : aa               [ 2] 	tax					; Low char is in X
c841 : 68               [ 4] 	pla					; Get byte back
c842 : 4a               [ 2] 	lsr a				; Make high nibble low
c843 : 4a               [ 2] 	lsr a
c844 : 4a               [ 2] 	lsr a
c845 : 4a               [ 2] 	lsr a
c846 : 18               [ 2] 	clc
c847 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c849 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c84b : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c84d : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c84f :                       skip_a_f_2
                             
c84f : 18               [ 2] 	clc					; No error
c850 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c851 :                       str_x_to_a
c851 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c853 : 38               [ 2] 	sec					; Process high char in A
c854 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c856 : c90a             [ 2] 	cmp #10				; If A < 10 then
c858 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c85a : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c85c :                       skip_x_f_1
c85c : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c85e : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c860 : 0a               [ 2] 	asl a				; This is the high nibble
c861 : 0a               [ 2] 	asl a
c862 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page   41
-------------------------------- bank\bank0.s --------------------------------

c863 : 0a               [ 2] 	asl a
c864 : 48               [ 3] 	pha					; Save the high nibble
c865 : 8a               [ 2] 	txa					; Now process the low char in X
c866 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c868 : 38               [ 2] 	sec
c869 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c86b : c90a             [ 2] 	cmp #10				; If A < 10 then
c86d : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c86f : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c871 :                       skip_x_f_2
c871 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c873 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c875 : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c877 : 68               [ 4] 	pla					; Get high nibble
c878 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c87a : 18               [ 2] 	clc					; No error
c87b : 60               [ 6] 	rts					; A contains value
                             
c87c :                       str_x_to_a_errl
c87c : 68               [ 4] 	pla
c87d :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c87f :                       con_n_to_a
c87f : 8691             [ 3] 	stx num_tmp
c881 : 8592             [ 3] 	sta num_tmp+1
c883 : 6485             [ 3] 	stz num_a
c885 : 6486             [ 3] 	stz num_a+1
c887 : c000             [ 2] 	cpy #NUM_ANY
c889 : f014             [ 3] 	beq con_n_to_a_detect
c88b : 88               [ 2] 	dey
c88c : d003             [ 3] 	bne con_n_not_dec
c88e :                       con_dec_jmp
c88e : 4c22c9           [ 3] 	jmp con_dec_to_a_int
c891 :                       con_n_not_dec
c891 : 88               [ 2] 	dey
c892 : d003             [ 3] 	bne con_n_not_hex
c894 :                       con_hex_jmp
c894 : 4cb9c8           [ 3] 	jmp con_hex_to_a_int
c897 :                       con_n_not_hex
c897 : 88               [ 2] 	dey
c898 : d003             [ 3] 	bne con_n_err
c89a :                       con_bin_jmp
c89a : 4cf8c8           [ 3] 	jmp con_bin_to_a_int
c89d :                       con_n_err
c89d : 38               [ 2] 	sec
c89e : 60               [ 6] 	rts
c89f :                       con_n_to_a_detect
c89f : b291             [ 5] 	lda (num_tmp)
c8a1 : c930             [ 2] 	cmp #'0'
c8a3 : d0e9             [ 3] 	bne con_dec_jmp
AS65 Assembler for R6502 [1.42].                                     Page   42
-------------------------------- bank\bank0.s --------------------------------

c8a5 : a001             [ 2] 	ldy #1
c8a7 : b191             [ 5] 	lda (num_tmp),y
c8a9 : 0920             [ 2] 	ora #0x20
c8ab : c978             [ 2] 	cmp #'x'
c8ad : f0e5             [ 3] 	beq con_hex_jmp
c8af : c962             [ 2] 	cmp #'b'
c8b1 : f0e7             [ 3] 	beq con_bin_jmp
c8b3 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8b5 :                       con_hex_to_a
c8b5 : 8691             [ 3] 	stx num_tmp
c8b7 : 8592             [ 3] 	sta num_tmp+1
c8b9 :                       con_hex_to_a_int
c8b9 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c8bb : a002             [ 2] 	ldy #2			; start at first digit
c8bd :                       con_hex_digit
c8bd : b191             [ 5] 	lda (num_tmp),y
c8bf : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c8c1 : 38               [ 2] 	sec							; Process high char in A
c8c2 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c8c4 : c90a             [ 2] 	cmp #10						; If A < 10 then
c8c6 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c8c8 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c8ca :                       con_hex_skip_x_f_1
c8ca : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c8cc : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c8ce : 48               [ 3] 	pha
                             	; make room for lo nibble
c8cf : 0685             [ 5] 	asl num_a
c8d1 : 2686             [ 5] 	rol num_a+1
c8d3 : 0685             [ 5] 	asl num_a
c8d5 : 2686             [ 5] 	rol num_a+1
c8d7 : 0685             [ 5] 	asl num_a
c8d9 : 2686             [ 5] 	rol num_a+1
c8db : 0685             [ 5] 	asl num_a
c8dd : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c8df : 68               [ 4] 	pla
c8e0 : 0585             [ 3] 	ora num_a
c8e2 : 8585             [ 3] 	sta num_a
c8e4 : c8               [ 2] 	iny
c8e5 : ca               [ 2] 	dex
c8e6 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c8e8 :                       con_hex_err
c8e8 : 38               [ 2] 	sec
c8e9 : 60               [ 6] 	rts
                             	; found a non-hex digit
c8ea :                       con_hex_done
                             	; if no digits processed then error
c8ea : c002             [ 2] 	cpy #2
c8ec : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c8ee : 98               [ 2] 	tya
c8ef : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   43
-------------------------------- bank\bank0.s --------------------------------

c8f0 : a902             [ 2] 	lda #NUM_HEX
c8f2 : 18               [ 2] 	clc
c8f3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8f4 :                       con_bin_to_a
c8f4 : 8691             [ 3] 	stx num_tmp
c8f6 : 8592             [ 3] 	sta num_tmp+1
c8f8 :                       con_bin_to_a_int
c8f8 : a002             [ 2] 	ldy #2
c8fa : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c8fc :                       con_bin_digit
c8fc : b191             [ 5] 	lda (num_tmp),y
c8fe : c930             [ 2] 	cmp #'0'
c900 : 9010             [ 3] 	bcc con_bin_done
c902 : c932             [ 2] 	cmp #'1'+1
c904 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c906 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c908 : 2685             [ 5] 	rol num_a
c90a : 2686             [ 5] 	rol num_a+1
c90c : c8               [ 2] 	iny
c90d : ca               [ 2] 	dex
c90e : d0ec             [ 4] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c910 : 800a             [ 3] 	bra con_bin_err
c912 :                       con_bin_done
                             	; didn't process any digit = error
c912 : c002             [ 2] 	cpy #2
c914 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c916 : 98               [ 2] 	tya
c917 : aa               [ 2] 	tax
c918 : a903             [ 2] 	lda #NUM_BIN
c91a : 18               [ 2] 	clc
c91b : 60               [ 6] 	rts
c91c :                       con_bin_err
c91c : 38               [ 2] 	sec
c91d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c91e :                       con_dec_to_a
c91e : 8691             [ 3] 	stx num_tmp
c920 : 8592             [ 3] 	sta num_tmp+1
c922 :                       con_dec_to_a_int
c922 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c924 : b291             [ 5] 	lda (num_tmp)
c926 : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   44
-------------------------------- bank\bank0.s --------------------------------

c928 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c92a : c8               [ 2] 	iny
c92b :                       str_d_find_end
c92b : b191             [ 5] 	lda (num_tmp),y
c92d : c930             [ 2] 	cmp #'0'
c92f : 9007             [ 3] 	bcc str_d_found_end
c931 : c93a             [ 2] 	cmp #'9'+1
c933 : b003             [ 3] 	bcs str_d_found_end
c935 : c8               [ 2] 	iny
c936 : 80f3             [ 3] 	bra str_d_find_end
c938 :                       str_d_found_end
c938 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c93a : b052             [ 3] 	bcs str_d_error		; e.g. -32767 including minus
c93c : 8494             [ 3] 	sty num_tmp+3
c93e : 6493             [ 3] 	stz num_tmp+2
c940 : 6485             [ 3] 	stz num_a
c942 : 6486             [ 3] 	stz num_a+1
c944 :                       str_d_process_digit
c944 : 88               [ 2] 	dey
c945 : 3026             [ 3] 	bmi str_d_digits_done
                             
c947 : b191             [ 5] 	lda (num_tmp),y
                             
c949 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c94b : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c94d : 38               [ 2] 	sec
c94e : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c950 : 18               [ 2] 	clc
c951 : 0a               [ 2] 	asl a
c952 : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c954 : aa               [ 2] 	tax
c955 : a585             [ 3] 	lda num_a
c957 : 7d90c9           [ 4] 	adc str_d_powers,x
c95a : 8585             [ 3] 	sta num_a
c95c : a586             [ 3] 	lda num_a+1
c95e : 7d91c9           [ 4] 	adc str_d_powers+1,x
c961 : 8586             [ 3] 	sta num_a+1
c963 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c965 : a593             [ 3] 	lda num_tmp+2
c967 : 6914             [ 2] 	adc #20
c969 : 8593             [ 3] 	sta num_tmp+2
c96b : 80d7             [ 3] 	bra str_d_process_digit
c96d :                       str_d_digits_done
                             	; check if minus
c96d : b291             [ 5] 	lda (num_tmp)
c96f : c92d             [ 2] 	cmp #'-'
c971 : d011             [ 3] 	bne str_d_skip_neg
c973 : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c975 : e002             [ 2] 	cpx #2				; else it's an error
c977 : 9015             [ 3] 	bcc str_d_error
c979 : a685             [ 3] 	ldx num_a
c97b : a586             [ 3] 	lda num_a+1
c97d : 20f4c9           [ 6] 	jsr twos_complement
c980 : 8685             [ 3] 	stx num_a
c982 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   45
-------------------------------- bank\bank0.s --------------------------------

c984 :                       str_d_skip_neg
c984 : a694             [ 3] 	ldx num_tmp+3
c986 : e001             [ 2] 	cpx #1				; must be at least 1 char
c988 : 9004             [ 3] 	bcc str_d_error
c98a : a901             [ 2] 	lda #NUM_DEC
c98c : 18               [ 2] 	clc
c98d : 60               [ 6] 	rts
c98e :                       str_d_error
c98e : 38               [ 2] 	sec
c98f : 60               [ 6] 	rts
                             
c990 :                       str_d_powers
c990 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c9a4 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c9b8 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c9cc : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c9e0 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
c9f4 :                       twos_complement
c9f4 : 49ff             [ 2] 	eor #0xff
c9f6 : 48               [ 3] 	pha
c9f7 : 8a               [ 2] 	txa
c9f8 : 49ff             [ 2] 	eor #0xff
c9fa : aa               [ 2] 	tax
c9fb : 68               [ 4] 	pla
c9fc : e8               [ 2] 	inx
c9fd : d001             [ 4] 	bne twos_complement_skip_X
c9ff : 1a               [ 2] 	inc a
ca00 :                       twos_complement_skip_X
ca00 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
ca01 :                       int_to_bcd
ca01 : 08               [ 3] 	php
ca02 : 48               [ 3] 	pha
ca03 : da               [ 3] 	phx
                             
ca04 : 8691             [ 3] 	stx num_tmp
ca06 : 8592             [ 3] 	sta num_tmp+1
ca08 : c980             [ 2] 	cmp #0x80			; Negative?
ca0a : 9003             [ 3] 	bcc int_to_bcd_skip_neg
ca0c : 20f4c9           [ 6] 	jsr twos_complement
ca0f :                       int_to_bcd_skip_neg
ca0f : 6485             [ 3] 	stz num_a
ca11 : 6486             [ 3] 	stz num_a+1
ca13 : 6487             [ 3] 	stz num_a+2
ca15 : 6488             [ 3] 	stz num_a+3
AS65 Assembler for R6502 [1.42].                                     Page   46
-------------------------------- bank\bank0.s --------------------------------

ca17 : a210             [ 2] 	ldx #16
ca19 : f8               [ 2] 	sed
ca1a :                       int_to_bcd_bit
ca1a : 0691             [ 5] 	asl num_tmp
ca1c : 2692             [ 5] 	rol num_tmp+1
ca1e : a585             [ 3] 	lda num_a
ca20 : 6585             [ 3] 	adc num_a
ca22 : 8585             [ 3] 	sta num_a
ca24 : a586             [ 3] 	lda num_a+1
ca26 : 6586             [ 3] 	adc num_a+1
ca28 : 8586             [ 3] 	sta num_a+1
ca2a : a587             [ 3] 	lda num_a+2
ca2c : 6587             [ 3] 	adc num_a+2
ca2e : 8587             [ 3] 	sta num_a+2
ca30 : ca               [ 2] 	dex
ca31 : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
ca33 : fa               [ 4] 	plx
ca34 : 68               [ 4] 	pla
ca35 : 28               [ 4] 	plp
ca36 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
ca37 :                       word_to_bcd
ca37 : 08               [ 3] 	php
ca38 : 48               [ 3] 	pha
ca39 : da               [ 3] 	phx
                             
ca3a : 8691             [ 3] 	stx num_tmp
ca3c : 8592             [ 3] 	sta num_tmp+1
ca3e : 6485             [ 3] 	stz num_a
ca40 : 6486             [ 3] 	stz num_a+1
ca42 : 6487             [ 3] 	stz num_a+2
ca44 : 6488             [ 3] 	stz num_a+3
ca46 : a210             [ 2] 	ldx #16			; 16 binary bits
ca48 : f8               [ 2] 	sed
ca49 :                       word_to_bcd_bit
ca49 : 0691             [ 5] 	asl num_tmp
ca4b : 2692             [ 5] 	rol num_tmp+1
ca4d : a585             [ 3] 	lda num_a
ca4f : 6585             [ 3] 	adc num_a
ca51 : 8585             [ 3] 	sta num_a
ca53 : a586             [ 3] 	lda num_a+1
ca55 : 6586             [ 3] 	adc num_a+1
ca57 : 8586             [ 3] 	sta num_a+1
ca59 : a587             [ 3] 	lda num_a+2
ca5b : 6587             [ 3] 	adc num_a+2
ca5d : 8587             [ 3] 	sta num_a+2
ca5f : ca               [ 2] 	dex
ca60 : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
ca62 : fa               [ 4] 	plx
ca63 : 68               [ 4] 	pla
ca64 : 28               [ 4] 	plp
ca65 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   47
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
ca66 :                       bcd_to_str
ca66 : 48               [ 3] 	pha
ca67 : da               [ 3] 	phx
ca68 : 5a               [ 3] 	phy
                             
ca69 : a205             [ 2] 	ldx #5						; Index in to string
ca6b : a000             [ 2] 	ldy #0						; Current BCD digit
ca6d :                       bcd_str
ca6d : b98500           [ 4] 	lda num_a,y
                             	; Convert 1s digit of byte
ca70 : 48               [ 3] 	pha
ca71 : 290f             [ 2] 	and #0xf
ca73 : 18               [ 2] 	clc
ca74 : 6930             [ 2] 	adc #0x30
ca76 : 9595             [ 4] 	sta num_buf,x
                             	; Convert 10s digit of byte
ca78 : 68               [ 4] 	pla
ca79 : 4a               [ 2] 	lsr a
ca7a : 4a               [ 2] 	lsr a
ca7b : 4a               [ 2] 	lsr a
ca7c : 4a               [ 2] 	lsr a
ca7d : 18               [ 2] 	clc
ca7e : 6930             [ 2] 	adc #0x30					; Convert to ASCII
ca80 : 9594             [ 4] 	sta num_buf-1,x
ca82 : ca               [ 2] 	dex
ca83 : ca               [ 2] 	dex
ca84 : c8               [ 2] 	iny
ca85 : c003             [ 2] 	cpy #3						; 3 BCD digits max
ca87 : d0e4             [ 3] 	bne bcd_str
                             
ca89 : 7a               [ 4] 	ply
ca8a : fa               [ 4] 	plx
ca8b : 68               [ 4] 	pla
ca8c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
ca8d :                       out_bcd
ca8d : 48               [ 3] 	pha
ca8e : da               [ 3] 	phx
ca8f : 08               [ 3] 	php
ca90 : a000             [ 2] 	ldy #0						; How many digits printed
ca92 : a200             [ 2] 	ldx #0						; Index in to string
ca94 :                       out_bcd_digit
ca94 : b595             [ 4] 	lda num_buf,x
ca96 : c000             [ 2] 	cpy #0						; If not in leading zero mode
ca98 : d008             [ 3] 	bne out_bcd_print			; No then go print
AS65 Assembler for R6502 [1.42].                                     Page   48
-------------------------------- bank\bank0.s --------------------------------

                             
ca9a : c930             [ 2] 	cmp #'0'					; else check if zero
ca9c : d004             [ 3] 	bne out_bcd_print			; No then go print
                             
ca9e : 28               [ 4] 	plp
ca9f : 08               [ 3] 	php
caa0 : 9004             [ 3] 	bcc out_bcd_next			; If C=0 go to next digit, el
caa2 :                       out_bcd_print
caa2 : c8               [ 2] 	iny
caa3 : 2048c5           [ 6] 	jsr io_put_ch
caa6 :                       out_bcd_next
caa6 : e8               [ 2] 	inx
caa7 : e006             [ 2] 	cpx #6
caa9 : d0e9             [ 3] 	bne out_bcd_digit
caab : c000             [ 2] 	cpy #0						; If nothing printed
caad : d006             [ 3] 	bne out_bcd_fin
caaf : a930             [ 2] 	lda #'0'					; Need to put out 1 zero
cab1 : 2048c5           [ 6] 	jsr io_put_ch
cab4 : c8               [ 2] 	iny
cab5 :                       out_bcd_fin
cab5 : 28               [ 4] 	plp
cab6 : fa               [ 4] 	plx
cab7 : 68               [ 4] 	pla
cab8 : 18               [ 2] 	clc
cab9 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
caba :                       str_a_to_d
caba : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cabb :                       print_a_to_d
cabb : 08               [ 3] 	php
cabc : c980             [ 2] 	cmp #0x80					; Check if sign bit is set
cabe : 9014             [ 3] 	bcc print_a_to_d_skip_neg	; Skip if not (postive
cac0 : 20f4c9           [ 6] 	jsr twos_complement			; Flip from 2s complement
cac3 : 2001ca           [ 6] 	jsr int_to_bcd				; Convert to BCD
cac6 : 2066ca           [ 6] 	jsr bcd_to_str				; Convert BCD to string
cac9 : a92d             [ 2] 	lda #'-'
cacb : 2048c5           [ 6] 	jsr io_put_ch
cace : 28               [ 4] 	plp							; Leading zeros preference
cacf : 208dca           [ 6] 	jsr out_bcd
cad2 : c8               [ 2] 	iny							; Account for sign
cad3 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   49
-------------------------------- bank\bank0.s --------------------------------

cad4 :                       print_a_to_d_skip_neg
cad4 : 2001ca           [ 6] 	jsr int_to_bcd				; Convert to BCD
cad7 : 2066ca           [ 6] 	jsr bcd_to_str				; Convert BCD to string
cada : 28               [ 4] 	plp							; Leading zeros preference
cadb : 4c8dca           [ 3] 	jmp out_bcd					; Print +ve string
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cade :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
cade : 4c39cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cae1 :                       init_2					; init_ram will jump back to here
cae1 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cae3 : 9a               [ 2] 	txs
                             ;	cld					; No need as disabled on startup
                             	
cae4 : 20eaca           [ 6] 	jsr kernel_init
                             
cae7 : 4c83c6           [ 3] 	jmp main
                             
caea :                       kernel_init
caea : 20d6c6           [ 6] 	jsr init_nmi		; Initialise NMI handling
caed : 20f6c6           [ 6] 	jsr init_irq		; Initialise IRQ handling
caf0 : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
caf3 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
caf6 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
caf9 :                       kernel_test
caf9 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cafc : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
caff : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cb02 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cb04 : 48               [ 3] 	pha
cb05 : a20e             [ 2] 	ldx #0xe			; NV location for default text mode [
cb07 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cb0a : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cb0c : aa               [ 2] 	tax					; Save the mode temporarily
cb0d : 68               [ 4] 	pla					; Get the default mode from stack
cb0e : 8a               [ 2] 	txa					; And push the NV mode that was read
cb0f : 48               [ 3] 	pha
cb10 : a20f             [ 2] 	ldx #0xf			; NV location for the default colour
cb12 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cb15 : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cb17 :                       kernel_skip_nv	
cb17 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cb18 : 20c6c1           [ 6] 	jsr _gr_init_screen
cb1b : 200ec5           [ 6] 	jsr io_init			; Set default input/output device
cb1e : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cb2c : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cb2f : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cb32 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cb35 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
AS65 Assembler for R6502 [1.42].                                     Page   50
-------------------------------- bank\bank0.s --------------------------------

cb38 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cb39 :                       init_ram
cb39 : 6400             [ 3] 	stz 0x00			; Start at page 0
cb3b : 6401             [ 3] 	stz 0x01
cb3d : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cb3f : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cb41 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cb43 :                       init_ram_1
cb43 : e004             [ 2] 	cpx	#4				; Page <4 is ok
cb45 : 9006             [ 3] 	bcc init_ram_fill
cb47 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cb49 : b002             [ 3] 	bcs init_ram_fill
cb4b : 8002             [ 3] 	bra init_ram_skip
cb4d :                       init_ram_fill
cb4d : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cb4f :                       init_ram_skip
cb4f : c8               [ 2] 	iny
cb50 : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cb52 : e8               [ 2] 	inx					; Increment page counter
cb53 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cb55 : d0ec             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cb57 : 4ce1ca           [ 3] 	jmp init_2			; Carry on initialisation
                             
cb5a :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "monitor\cmd.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	Simple monitor.
                             ;*
                             ;************************************************
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
00d6 =                       cmd_lo					= df_currdat
00d7 =                       cmd_hi					= (df_currdat+1)
00d8 =                       cmd_mem					= df_datoff
                             
                             	; ROM code
                             	code  
                             
cb5a :                       command_line
cb5a : a900             [ 2] 	lda #0						; Initialise monitor
cb5c : 85d6             [ 3] 	sta cmd_lo					; Monitor address lo
cb5e : 85d7             [ 3] 	sta cmd_hi					; Monitor address hi
AS65 Assembler for R6502 [1.42].                                     Page   51
-------------------------------- bank\bank0.s --------------------------------

cb60 : 85d8             [ 3] 	sta cmd_mem					; Memory = 0 RAM, 1 = VRAM
cb62 : a0a0             [ 2] 	ldy #160					; Maximum line length
cb64 : 8449             [ 3] 	sty buf_sz
                             
cb66 :                       cmd_ready
                             	_println msg_ready
                             
                             
cb73 : 38               [ 2] 	sec							; Set carry flag = echo characters
cb74 : a200             [ 2] 	ldx #lo(df_linbuff)
cb76 : a90a             [ 2] 	lda #hi(df_linbuff)
cb78 : a050             [ 2] 	ldy #80
cb7a : 2057c5           [ 6] 	jsr io_read_line			; Get a command line
cb7d : 20bbcb           [ 6] 	jsr cmd_parse				; Find command and execute
cb80 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
cb82 : 4c66cb           [ 3] 	jmp cmd_ready
                             
cb85 :                       cmd_error
cb85 : a59f             [ 3] 	lda errno
cb87 : 1004             [ 3] 	bpl cmd_skip_quit
cb89 : 649f             [ 3] 	stz errno					; Clear error
cb8b : 18               [ 2] 	clc							; Clear carry
cb8c : 60               [ 6] 	rts							; Return to caller
cb8d :                       cmd_skip_quit	
cb8d : 2093cb           [ 6] 	jsr cmd_print_error
cb90 : 4c66cb           [ 3] 	jmp cmd_ready
                             
                             ;****************************************
                             ;* cmd_print_error
                             ;* Given error code and Y offset in to buffer
                             ;* print the error message
                             ;* Input : errno, Y
                             ;* Regs affected :
                             ;****************************************
cb93 :                       cmd_print_error
cb93 : 48               [ 3] 	pha
cb94 : 5a               [ 3] 	phy
cb95 : a59f             [ 3] 	lda errno
cb97 : 0a               [ 2] 	asl a
cb98 : a8               [ 2] 	tay
cb99 : be14ce           [ 4] 	ldx cmd_error_messages,y
cb9c : b915ce           [ 4] 	lda cmd_error_messages+1,y
cb9f : 2093c5           [ 6] 	jsr io_print_line
cba2 : a920             [ 2] 	lda #' '
cba4 : 2048c5           [ 6] 	jsr io_put_ch
cba7 : 68               [ 4] 	pla								; Pull Y off stack
cba8 : 48               [ 3] 	pha								; And put it back
cba9 : 2034c8           [ 6] 	jsr str_a_to_x
cbac : 2048c5           [ 6] 	jsr io_put_ch
cbaf : 8a               [ 2] 	txa
cbb0 : 2048c5           [ 6] 	jsr io_put_ch
cbb3 : a90d             [ 2] 	lda #UTF_CR
cbb5 : 2048c5           [ 6] 	jsr io_put_ch
                             	
cbb8 : 7a               [ 4] 	ply
cbb9 : 68               [ 4] 	pla
cbba : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
AS65 Assembler for R6502 [1.42].                                     Page   52
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
cbbb :                       cmd_parse
cbbb : 48               [ 3] 	pha
cbbc : da               [ 3] 	phx
                             	
cbbd : a200             [ 2] 	ldx #0
cbbf :                       find_cmd_loop
cbbf : a000             [ 2] 	ldy #0
cbc1 :                       find_cmd_byte
cbc1 : bde3cd           [ 4] 	lda cmd_list,x			; Check the command list
cbc4 : c980             [ 2] 	cmp #0x80				; If not end of this command in lis
cbc6 : d009             [ 3] 	bne cmd_do_match		; then do the check
cbc8 : b9000a           [ 4] 	lda df_linbuff,y		; Check the command line
cbcb : f02d             [ 3] 	beq cmd_found			; If zero then found
cbcd : c920             [ 2] 	cmp #' '				; If space then
cbcf : f029             [ 3] 	beq cmd_found			; also found
cbd1 :                       cmd_do_match				; If here then line <> 0/space an
cbd1 : b9000a           [ 4] 	lda df_linbuff,y		; Get char from command buffer
cbd4 : 0920             [ 2] 	ora #0x20				; Make lower case
cbd6 : dde3cd           [ 4] 	cmp cmd_list,x			; Compare with char from comman
cbd9 : d004             [ 3] 	bne cmd_no_match		; Different = command does not
cbdb : c8               [ 2] 	iny						; Advance command buffer and list
cbdc : e8               [ 2] 	inx
cbdd : 80e2             [ 3] 	bra find_cmd_byte		; Go check the next bytes
cbdf :                       cmd_no_match				; A command didn't match, so find
cbdf : bde3cd           [ 4] 	lda cmd_list,x			; Get the non-matching command 
cbe2 : c980             [ 2] 	cmp #0x80				; If already at command terminator 
cbe4 : f007             [ 3] 	beq cmd_next_cmd		; set up for next command
cbe6 : c9ff             [ 2] 	cmp #0xff				; If end of command list
cbe8 : f008             [ 3] 	beq cmd_not_found		; then not found
cbea : e8               [ 2] 	inx						; Else check next char
cbeb : 80f2             [ 3] 	bra cmd_no_match
cbed :                       cmd_next_cmd
cbed : e8               [ 2] 	inx						; Jump over 0x80
cbee : e8               [ 2] 	inx						; Jump over command address
cbef : e8               [ 2] 	inx
cbf0 : 80cd             [ 3] 	bra find_cmd_loop		; Check for match again
                             
cbf2 :                       cmd_not_found
cbf2 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
cbf4 : 859f             [ 3] 	sta errno
cbf6 : 68               [ 4] 	pla
cbf7 : fa               [ 4] 	plx
cbf8 : 38               [ 2] 	sec
cbf9 : 60               [ 6] 	rts
                             	
cbfa :                       cmd_found					; Found the command
cbfa : bde4cd           [ 4] 	lda cmd_list+1,x		; Low byte of jump pointer
cbfd : 853f             [ 3] 	sta tmp_v1				; Store in temp location
cbff : bde5cd           [ 4] 	lda cmd_list+2,x		; High byte of jump pointer
cc02 : 8540             [ 3] 	sta tmp_v1+1			; Store in temp location
cc04 : 68               [ 4] 	pla
cc05 : fa               [ 4] 	plx
cc06 : 6c3f00           [ 6] 	jmp (tmp_v1)			; Jump to command (Y points at la
                             	
                             ;****************************************
                             ;* cmd_memtype
                             ;* Set the memory type to V or M
AS65 Assembler for R6502 [1.42].                                     Page   53
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
cc09 :                       cmd_memtype
cc09 : 48               [ 3] 	pha
cc0a : 18               [ 2] 	clc
cc0b : 20cacd           [ 6] 	jsr cmd_parse_next_parm
cc0e : a902             [ 2] 	lda #CMD_ERR_PARM
cc10 : b01c             [ 3] 	bcs cmd_memtype_err
cc12 : b9000a           [ 4] 	lda df_linbuff,y
cc15 : 0920             [ 2] 	ora #0x20
cc17 : c976             [ 2] 	cmp #'v'
cc19 : f008             [ 3] 	beq cmd_setmemtypeV
cc1b : c96d             [ 2] 	cmp #'m'
cc1d : f00a             [ 3] 	beq cmd_setmemtypeM
cc1f : a903             [ 2] 	lda #CMD_ERR_VAL
cc21 : 800b             [ 3] 	bra cmd_memtype_err
cc23 :                       cmd_setmemtypeV
cc23 : a901             [ 2] 	lda #1
cc25 : 85d8             [ 3] 	sta cmd_mem
cc27 : 8002             [ 3] 	bra cmd_memtypeFin
cc29 :                       cmd_setmemtypeM
cc29 : 64d8             [ 3] 	stz cmd_mem
cc2b :                       cmd_memtypeFin
cc2b : 68               [ 4] 	pla
cc2c : 18               [ 2] 	clc
cc2d : 60               [ 6] 	rts
cc2e :                       cmd_memtype_err
cc2e : 859f             [ 3] 	sta errno
cc30 : 38               [ 2] 	sec
cc31 : 68               [ 4] 	pla
cc32 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
cc33 :                       cmd_setmem
cc33 : 48               [ 3] 	pha
cc34 : da               [ 3] 	phx
                             	
cc35 : 18               [ 2] 	clc
cc36 : 20cacd           [ 6] 	jsr cmd_parse_next_parm
cc39 : b022             [ 3] 	bcs cmd_setmem_err
cc3b : 20afcd           [ 6] 	jsr cmd_parse_word
cc3e : b01d             [ 3] 	bcs cmd_setmem_err
cc40 : 86d6             [ 3] 	stx cmd_lo
cc42 : 85d7             [ 3] 	sta cmd_hi
cc44 : 20cacd           [ 6] 	jsr cmd_parse_next_parm		; Should be at least 1 
cc47 : b014             [ 3] 	bcs cmd_setmem_err
cc49 :                       cmd_setmem_byte
cc49 : 208ccd           [ 6] 	jsr cmd_parse_byte
cc4c : b00f             [ 3] 	bcs cmd_setmem_err
cc4e : 2072cd           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
cc51 : 205acd           [ 6] 	jsr cmd_incmem
cc54 : 20cacd           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
AS65 Assembler for R6502 [1.42].                                     Page   54
-------------------------------- bank\bank0.s --------------------------------

cc57 : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
cc59 :                       cmd_setmemFin
cc59 : 18               [ 2] 	clc
cc5a : fa               [ 4] 	plx
cc5b : 68               [ 4] 	pla
cc5c : 60               [ 6] 	rts
cc5d :                       cmd_setmem_err
cc5d : 38               [ 2] 	sec
cc5e : fa               [ 4] 	plx
cc5f : 68               [ 4] 	pla
cc60 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
cc61 :                       cmd_dumpmem
cc61 : 48               [ 3] 	pha
cc62 : da               [ 3] 	phx
cc63 : 5a               [ 3] 	phy
                             
cc64 : 18               [ 2] 	clc
cc65 : 20cacd           [ 6] 	jsr cmd_parse_next_parm
cc68 : b014             [ 3] 	bcs cmd_dumpmem_err
cc6a : 20afcd           [ 6] 	jsr cmd_parse_word			; Get hi byte of word
cc6d : b00f             [ 3] 	bcs cmd_dumpmem_err
cc6f : 20cacd           [ 6] 	jsr cmd_parse_next_parm		; Should cause error, n
cc72 : 9006             [ 3] 	bcc cmd_dumpmem_parm_err
cc74 : 86d6             [ 3] 	stx cmd_lo
cc76 : 85d7             [ 3] 	sta cmd_hi
cc78 : 8009             [ 3] 	bra cmd_dumpmem_block		; Skip over error code to
cc7a :                       cmd_dumpmem_parm_err
cc7a : a902             [ 2] 	lda #CMD_ERR_PARM
cc7c : 859f             [ 3] 	sta errno
cc7e :                       cmd_dumpmem_err
cc7e : 7a               [ 4] 	ply
cc7f : fa               [ 4] 	plx
cc80 : 68               [ 4] 	pla
cc81 : 38               [ 2] 	sec
cc82 : 60               [ 6] 	rts
cc83 :                       cmd_dumpmem_block
cc83 : a5d7             [ 3] 	lda cmd_hi					; Show the address
cc85 : 2034c8           [ 6] 	jsr str_a_to_x
cc88 : 2048c5           [ 6] 	jsr io_put_ch
cc8b : 8a               [ 2] 	txa
cc8c : 2048c5           [ 6] 	jsr io_put_ch
cc8f : a5d6             [ 3] 	lda cmd_lo
cc91 : 2034c8           [ 6] 	jsr str_a_to_x
cc94 : 2048c5           [ 6] 	jsr io_put_ch
cc97 : 8a               [ 2] 	txa
cc98 : 2048c5           [ 6] 	jsr io_put_ch
cc9b : a920             [ 2] 	lda #' '
cc9d : 2048c5           [ 6] 	jsr io_put_ch
                             	
cca0 : a008             [ 2] 	ldy #8						; 8 Bytes per line
cca2 :                       cmd_dumpmem_byte
cca2 : 2061cd           [ 6] 	jsr cmd_peek
cca5 : 2034c8           [ 6] 	jsr str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page   55
-------------------------------- bank\bank0.s --------------------------------

cca8 : 2048c5           [ 6] 	jsr io_put_ch
ccab : 8a               [ 2] 	txa
ccac : 2048c5           [ 6] 	jsr io_put_ch
ccaf : a920             [ 2] 	lda #' '
ccb1 : 2048c5           [ 6] 	jsr io_put_ch
ccb4 : 205acd           [ 6] 	jsr cmd_incmem
ccb7 : 88               [ 2] 	dey
ccb8 : d0e8             [ 3] 	bne cmd_dumpmem_byte
ccba :                       cmd_dumpmemASCII
ccba : 38               [ 2] 	sec
ccbb : a5d6             [ 3] 	lda cmd_lo
ccbd : e908             [ 2] 	sbc #8
ccbf : 85d6             [ 3] 	sta cmd_lo
ccc1 : a5d7             [ 3] 	lda cmd_hi
ccc3 : e900             [ 2] 	sbc #0
ccc5 : 85d7             [ 3] 	sta cmd_hi
                             	
ccc7 : a920             [ 2] 	lda #' '
ccc9 : 2048c5           [ 6] 	jsr io_put_ch
cccc : 2048c5           [ 6] 	jsr io_put_ch
cccf : a008             [ 2] 	ldy #8						; 8 Bytes per line
ccd1 :                       cmd_dumpmem_ascii
ccd1 : 2061cd           [ 6] 	jsr cmd_peek
ccd4 : c920             [ 2] 	cmp #' '					; <32 is unprintable
ccd6 : b002             [ 3] 	bcs cmd_dump_skip_ctrl
ccd8 : a92e             [ 2] 	lda #'.'					; Replace with dot
ccda :                       cmd_dump_skip_ctrl
ccda : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
ccdc : 9002             [ 3] 	bcc cmd_dump_skip_del
ccde : a92e             [ 2] 	lda #'.'					; Replace with dot
cce0 :                       cmd_dump_skip_del	
cce0 : 2048c5           [ 6] 	jsr io_put_ch
cce3 : 205acd           [ 6] 	jsr cmd_incmem
cce6 : 88               [ 2] 	dey
cce7 : d0e8             [ 3] 	bne cmd_dumpmem_ascii
cce9 : 38               [ 2] 	sec
ccea : 2045c5           [ 6] 	jsr io_get_ch
cced : c90d             [ 2] 	cmp #UTF_CR
ccef : d005             [ 3] 	bne cmd_dumpmemFin
ccf1 : 2048c5           [ 6] 	jsr io_put_ch
ccf4 : 808d             [ 3] 	bra cmd_dumpmem_block
ccf6 :                       cmd_dumpmemFin
ccf6 : a90d             [ 2] 	lda #UTF_CR
ccf8 : 2048c5           [ 6] 	jsr io_put_ch
ccfb : 7a               [ 4] 	ply
ccfc : fa               [ 4] 	plx
ccfd : 68               [ 4] 	pla
ccfe : 18               [ 2] 	clc
ccff : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* cmd_sector
                             ;* Load sector
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
cd00 :                       cmd_sector
cd00 : 48               [ 3] 	pha
cd01 : da               [ 3] 	phx
cd02 : 5a               [ 3] 	phy
AS65 Assembler for R6502 [1.42].                                     Page   56
-------------------------------- bank\bank0.s --------------------------------

                             
cd03 : 18               [ 2] 	clc
                             	
cd04 : 208ccd           [ 6] 	jsr cmd_parse_byte			; Get read or write indicat
cd07 : b044             [ 3] 	bcs cmd_sector_err
cd09 : 48               [ 3] 	pha							; Save the indicator
                             	
cd0a : 20afcd           [ 6] 	jsr cmd_parse_word			; Get hi byte of word
cd0d : b03d             [ 3] 	bcs cmd_sector_errl
                             
cd0f : 864e             [ 3] 	stx sd_sect+0				; Initialise the sector
cd11 : 854f             [ 3] 	sta sd_sect+1
cd13 : 6450             [ 3] 	stz sd_sect+2
cd15 : 6451             [ 3] 	stz sd_sect+3
                             
cd17 : 20cacd           [ 6] 	jsr cmd_parse_next_parm		; Should cause error, n
cd1a : 9030             [ 3] 	bcc cmd_sector_errl
                             
cd1c : a902             [ 2] 	lda #hi(sd_buf)				; Save/Load from sd_buf
                             
cd1e : fa               [ 4] 	plx							; Read or write?
cd1f : e000             [ 2] 	cpx #0x00
cd21 : d005             [ 3] 	bne cmd_sector_skip00
cd23 : 20dec4           [ 6] 	jsr _sd_sendcmd17
cd26 : 801f             [ 3] 	bra cmd_sector_done
cd28 :                       cmd_sector_skip00
cd28 : e001             [ 2] 	cpx #0x01
cd2a : d005             [ 3] 	bne cmd_sector_skip01
cd2c : 20f6c4           [ 6] 	jsr _sd_sendcmd24
cd2f : 8016             [ 3] 	bra cmd_sector_done
cd31 :                       cmd_sector_skip01
cd31 : e0ff             [ 2] 	cpx #0xff
cd33 : d008             [ 3] 	bne cmd_sector_skipff
cd35 : 20dec4           [ 6] 	jsr _sd_sendcmd17
cd38 : 20f6c4           [ 6] 	jsr _sd_sendcmd24
cd3b : 800a             [ 3] 	bra cmd_sector_done
cd3d :                       cmd_sector_skipff
cd3d : e0fe             [ 2] 	cpx #0xfe
cd3f : d006             [ 3] 	bne cmd_sector_done
cd41 : 20f6c4           [ 6] 	jsr _sd_sendcmd24
cd44 : 20dec4           [ 6] 	jsr _sd_sendcmd17
                             	
cd47 :                       cmd_sector_done	
cd47 : 7a               [ 4] 	ply
cd48 : fa               [ 4] 	plx
cd49 : 68               [ 4] 	pla
cd4a : 18               [ 2] 	clc
cd4b : 60               [ 6] 	rts
cd4c :                       cmd_sector_errl
cd4c : 68               [ 4] 	pla
cd4d :                       cmd_sector_err
cd4d : 859f             [ 3] 	sta errno
cd4f : 7a               [ 4] 	ply
cd50 : fa               [ 4] 	plx
cd51 : 68               [ 4] 	pla
cd52 : 38               [ 2] 	sec
cd53 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_quit
                             ;* To quit set err=255 and C=1
AS65 Assembler for R6502 [1.42].                                     Page   57
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
cd54 :                       cmd_dflat
cd54 : a9ff             [ 2] 	lda #0xff
cd56 : 859f             [ 3] 	sta errno
cd58 : 38               [ 2] 	sec
cd59 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
cd5a :                       cmd_incmem
cd5a : e6d6             [ 5] 	inc cmd_lo
cd5c : d002             [ 3] 	bne cmd_skipincmemhi
cd5e : e6d7             [ 5] 	inc cmd_hi
cd60 :                       cmd_skipincmemhi
cd60 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
cd61 :                       cmd_peek
cd61 : a5d8             [ 3] 	lda cmd_mem
cd63 : d003             [ 3] 	bne cmd_peek_vram
cd65 : b2d6             [ 5] 	lda (cmd_lo)
cd67 : 60               [ 6] 	rts
cd68 :                       cmd_peek_vram
cd68 : da               [ 3] 	phx
cd69 : a6d6             [ 3] 	ldx cmd_lo
cd6b : a5d7             [ 3] 	lda cmd_hi
cd6d : 2006c4           [ 6] 	jsr _vdp_peek
cd70 : fa               [ 4] 	plx
cd71 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
cd72 :                       cmd_poke
cd72 : 48               [ 3] 	pha
cd73 : a5d8             [ 3] 	lda cmd_mem
cd75 : d004             [ 3] 	bne cmd_poke_vram
cd77 : 68               [ 4] 	pla
cd78 : 92d6             [ 5] 	sta (cmd_lo)
cd7a : 60               [ 6] 	rts
cd7b :                       cmd_poke_vram
cd7b : 68               [ 4] 	pla
cd7c : da               [ 3] 	phx
cd7d : 5a               [ 3] 	phy
cd7e : a6d6             [ 3] 	ldx cmd_lo
cd80 : a4d7             [ 3] 	ldy cmd_hi
cd82 : 201ec4           [ 6] 	jsr _vdp_poke
AS65 Assembler for R6502 [1.42].                                     Page   58
-------------------------------- bank\bank0.s --------------------------------

cd85 : 7a               [ 4] 	ply
cd86 : fa               [ 4] 	plx
cd87 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_time
                             ;* Set date and time
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : None
                             ;* Regs affected : 
                             ;****************************************
cd88 :                       cmd_time
cd88 : 207ec4           [ 6] 	jsr _rtc_setdatetime
cd8b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
cd8c :                       cmd_parse_byte
cd8c : da               [ 3] 	phx
cd8d : 20cacd           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
cd90 : b016             [ 3] 	bcs cmd_parse_byte_err
cd92 : b9000a           [ 4] 	lda df_linbuff,y		; Get hi nibble of high byte
cd95 : 48               [ 3] 	pha						; Save on stack
cd96 : c8               [ 2] 	iny
cd97 : b9000a           [ 4] 	lda df_linbuff,y		; Get lo nibble of high byte
cd9a : f00b             [ 3] 	beq cmd_parse_byte_errl	; If no char then error 
cd9c : aa               [ 2] 	tax						; Lo nibble goes to X
cd9d : 68               [ 4] 	pla						; Restore hi nibble
cd9e : 2051c8           [ 6] 	jsr str_x_to_a			; Convert from hex to A
cda1 : b005             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
cda3 : c8               [ 2] 	iny						; Point to next char
cda4 : 18               [ 2] 	clc
cda5 : fa               [ 4] 	plx
cda6 : 60               [ 6] 	rts
cda7 :                       cmd_parse_byte_errl
cda7 : 68               [ 4] 	pla						; Pull low nibble off
cda8 :                       cmd_parse_byte_err
cda8 : a903             [ 2] 	lda #CMD_ERR_VAL		; Basic value error
cdaa : 859f             [ 3] 	sta errno
cdac : 38               [ 2] 	sec
cdad : fa               [ 4] 	plx
cdae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
cdaf :                       cmd_parse_word
cdaf : 20cacd           [ 6] 	jsr cmd_parse_next_parm		; Find the next paramet
cdb2 : b010             [ 3] 	bcs cmd_word_err
cdb4 : 208ccd           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
cdb7 : b00b             [ 3] 	bcs cmd_word_err
cdb9 : 48               [ 3] 	pha							; Save hi byte of word
AS65 Assembler for R6502 [1.42].                                     Page   59
-------------------------------- bank\bank0.s --------------------------------

cdba : 208ccd           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
cdbd : b004             [ 3] 	bcs cmd_word_errl
cdbf : aa               [ 2] 	tax							; Put in X
cdc0 : 68               [ 4] 	pla							; Get high byte back
cdc1 : 18               [ 2] 	clc
cdc2 : 60               [ 6] 	rts
cdc3 :                       cmd_word_errl
cdc3 : 68               [ 4] 	pla							; Pull off stack
cdc4 :                       cmd_word_err
cdc4 : a903             [ 2] 	lda #CMD_ERR_VAL
cdc6 : 859f             [ 3] 	sta errno
cdc8 : 38               [ 2] 	sec
cdc9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
cdca :                       cmd_parse_next_parm
cdca : 48               [ 3] 	pha
cdcb :                       cmd_find_parm
cdcb : b9000a           [ 4] 	lda df_linbuff,y
cdce : c8               [ 2] 	iny
cdcf : c900             [ 2] 	cmp #0					; End of command line?
cdd1 : f008             [ 3] 	beq cmd_next_parm_err	; ie no parms
cdd3 : c920             [ 2] 	cmp #' '				; Ignore space
cdd5 : f0f4             [ 3] 	beq cmd_find_parm
cdd7 : 88               [ 2] 	dey						; Go back 1 to parm start
cdd8 : 68               [ 4] 	pla
cdd9 : 18               [ 2] 	clc
cdda : 60               [ 6] 	rts
cddb :                       cmd_next_parm_err
cddb : 88               [ 2] 	dey						; Go back 1 to end of line
cddc : a902             [ 2] 	lda #CMD_ERR_PARM
cdde : 859f             [ 3] 	sta errno
cde0 : 68               [ 4] 	pla
cde1 : 38               [ 2] 	sec
cde2 : 60               [ 6] 	rts
                             
                             	
cde3 :                       cmd_list
cde3 : 6d656d74797065..      	db "memtype",	0x80,	lo(cmd_memtype), 	hi(cmd_mem
cded : 64756d708061cc        	db "dump", 		0x80, 	lo(cmd_dumpmem), 	hi(cmd_dum
cdf4 : 7365748033cc          	db "set", 		0x80,	lo(cmd_setmem), 	hi(cmd_setmem
cdfa : 736563746f7280..      	db "sector",	0x80,	lo(cmd_sector),		hi(cmd_secto
ce03 : 717569748054cd        	db "quit",		0x80,	lo(cmd_dflat),		hi(cmd_dflat)
ce0a : 74696d658088cd        	db "time",		0x80,	lo(cmd_time),		hi(cmd_time)
ce11 : 0000ff                	db 0x00,		0x00,	0xff
                             
                             
ce14 :                       cmd_error_messages
ce14 : 22ce                  	dw msg_errmsg_none
ce16 : 2bce                  	dw msg_errmsg_notfound
ce18 : 3dce                  	dw msg_errmsg_parm
ce1a : 4dce                  	dw msg_errmsg_val
                             
ce1c : 636d642d3e00          msg_ready				db "cmd->",0
ce22 : 4e6f206572726f..      msg_errmsg_none			db "No error",0
ce2b : 436f6d6d616e64..      msg_errmsg_notfound		db "Command not found",0
AS65 Assembler for R6502 [1.42].                                     Page   60
-------------------------------- bank\bank0.s --------------------------------

ce3d : 506172616d6574..      msg_errmsg_parm			db "Parameter error",0
ce4d : 496c6c6567616c..      msg_errmsg_val			db "Illegal value",0
                             	
                             
                             	include "cia\cia.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the two WDC65c
                             ;*
                             ;*  VIA1 is for keyboard, LEDs and RAM memory ban
                             ;*		Port A
                             ;*			PA0 to PA7 	- All output to keyboard
                             ;*		Port B
                             ;*			PB0			- Input from BBC keboard to sense matr
                             ;*			PB1			- Output - Led 0 (cassette motor Led)
                             ;*			PB2			- Output - Led 1 (caps lock Led)
                             ;*			PB3			- Output - Led 2 (shift lock Led)
                             ;*			PB4			- Output bit X0 RAM bank selector
                             ;*			PB5			- Output bit X1 RAM bank selector
                             ;*			PB6			- Output bit Y0 ROM bank selector
                             ;*			PB7			- Output bit Y1 ROM bank selector
                             ;*
                             ;*  VIA2 is for AY-3-8910 sound chip, SD Card int
                             ;*		Port A
                             ;*			PA0 to PA7	- Connected to 8910 data bus for 
                             ;*		Port B
                             ;*			PB0			- Output to SD card clock
                             ;*			PB1			- Output - Sound write select
                             ;*			PB2			- Input - SD Card detect
                             ;*			PB3			- Output - SD Card chip select
                             ;*			PB4			- Output - Data out from VIA to SD Car
                             ;*			PB5			- Output - ROM Disable (active low)
                             ;*			PB6			- Output - Sound read select
                             ;*			PB7			- Input - Data in to VIA from SD Card
                             ;*
                             ;* On startup;
                             ;* 	 		VIA0 PB4..7 are high (with weak pull-ups)
                             ;* 	 		VIA1 PB5 is high (with weak pull-ups)
                             ;*
                             ;*  This file is called cia.s because the origina
                             ;*  used a MOS 6526 from a C64.  However I update
                             ;*  design to use two 6522 chips, but never got a
                             ;*  renaming the file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
ce5b :                       mod_sz_cia_s
                             	
                             ;********************************
                             ;* set_led0
                             ;* Set the LED0 (cassette motor)
AS65 Assembler for R6502 [1.42].                                     Page   61
-------------------------------- bank\bank0.s --------------------------------

                             ;* Input : C = status (1 = on, 0 = off)
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce5b :                       set_led0
ce5b : 48               [ 3] 	pha							; Save A
ce5c : ad0004           [ 4] 	lda IO_0 + PRB				; Get current led status
ce5f : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
ce61 : 9002             [ 3] 	bcc skip_led0_on
ce63 : 4902             [ 2] 	eor #KB_LED0					; Switch on if C=1
ce65 :                       skip_led0_on
ce65 : 8d0004           [ 4] 	sta IO_0 + PRB				; Set the leds
ce68 : 68               [ 4] 	pla							; Restore A
ce69 : 60               [ 6] 	rts
                             
                             ;********************************
                             ;* set_led1
                             ;* Set the LED1 (caps lock)
                             ;* Input : C = status (1 = on, 0 = off)
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce6a :                       set_led1
ce6a : 48               [ 3] 	pha							; Save A
ce6b : ad0004           [ 4] 	lda IO_0 + PRB				; Get current led status
ce6e : 0904             [ 2] 	ora #KB_LED1				; Initially assume off
ce70 : 9002             [ 3] 	bcc skip_led1_on
ce72 : 4904             [ 2] 	eor #KB_LED1				; Switch on if C=1
ce74 :                       skip_led1_on
ce74 : 8d0004           [ 4] 	sta IO_0 + PRB				; Set the leds
ce77 : 68               [ 4] 	pla							; Restore A
ce78 : 60               [ 6] 	rts
                             
                             ;********************************
                             ;* set_led2
                             ;* Set the LED2 (shift lock)
                             ;* Input : C = status (1 = on, 0 = off)
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce79 :                       set_led2
ce79 : 48               [ 3] 	pha							; Save A
ce7a : ad0004           [ 4] 	lda IO_0 + PRB				; Get current led status
ce7d : 0908             [ 2] 	ora #KB_LED2				; Initially assume off
ce7f : 9002             [ 3] 	bcc skip_led2_on
ce81 : 4908             [ 2] 	eor #KB_LED2				; Switch on if C=1
ce83 :                       skip_led2_on
ce83 : 8d0004           [ 4] 	sta IO_0 + PRB				; Set the leds
ce86 : 68               [ 4] 	pla							; Restore A
ce87 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_cia0
                             ;* Initialise cia 0, controls the BBC keyboard
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
ce88 :                       init_cia0
ce88 : a97f             [ 2] 	lda #0x7f					; Disable all interrupts
ce8a : 8d0e04           [ 4] 	sta IO_0 + IER
ce8d : a9ff             [ 2] 	lda #0xff					; Clear IFR
AS65 Assembler for R6502 [1.42].                                     Page   62
-------------------------------- bank\bank0.s --------------------------------

ce8f : 8d0d04           [ 4] 	sta IO_0 + IFR				; Set IFR to clear flags
                             	
                             
ce92 : a9ff             [ 2] 	lda #0xff			
ce94 : 8d0304           [ 4] 	sta IO_0 + DDRA				; Port A all output
                             
ce97 : a9fe             [ 2] 	lda #0xfe					; Make sure all outputs are high!
ce99 : 8d0004           [ 4] 	sta IO_0 + PRB
                             	
ce9c : 8d0204           [ 4] 	sta IO_0 + DDRB				; Port B output for leds and 
                             
ce9f : a900             [ 2] 	lda #0x00					; Init control register - nothing 
cea1 : 8d0b04           [ 4] 	sta IO_0 + ACR
cea4 : a902             [ 2] 	lda #0x02					; CA2 independent interrupt
cea6 : 8d0c04           [ 4] 	sta IO_0 + PCR
                             
cea9 : a980             [ 2] 	lda #KB_EN 					; Set KB_EN bit to allow h/w str
ceab : 8d0104           [ 4] 	sta IO_0 + PRA
                             	
                             	; LEDS off
ceae : 18               [ 2] 	clc
ceaf : 205bce           [ 6] 	jsr set_led0
ceb2 : 206ace           [ 6] 	jsr set_led1
ceb5 : 2079ce           [ 6] 	jsr set_led2
                             
ceb8 : 60               [ 6] 	rts							; return from sub
                             	
                             ;****************************************
                             ;* init_cia1
                             ;* Initialise cia 1, controls the sound chip
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
ceb9 :                       init_cia1
ceb9 : a97f             [ 2] 	lda #0x7f					; Disable all interrupts
cebb : 8d8e04           [ 4] 	sta IO_1 + IER
                             	
cebe : a9ff             [ 2] 	lda #0xff					; Port A all output (AY-3 data bus
cec0 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             	
cec3 : a920             [ 2] 	lda #MM_DIS					; Make sure ROM is enabled in po
cec5 : 8d8004           [ 4] 	sta IO_1+PRB				; setting the data direction reg
                             	
cec8 : a97b             [ 2] 	lda #0b01111011				; Set Port B input/output SD,
ceca : 8d8204           [ 4] 	sta IO_1+DDRB
                             	
cecd : a900             [ 2] 	lda #0x00					; Init control register - nothing 
cecf : 8d8b04           [ 4] 	sta IO_1 + ACR
ced2 : 8d8c04           [ 4] 	sta IO_1 + PCR
                             
ced5 : a9ff             [ 2] 	lda #0xff					; Clear IFR
ced7 : 8d8d04           [ 4] 	sta IO_1 + IFR				; Read ICR to clear flags
                             	
ceda : 60               [ 6] 	rts							; return from sub
                             
cedb :                       mod_sz_cia_e
                             
                             	include "serial\serial.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
AS65 Assembler for R6502 [1.42].                                     Page   63
-------------------------------- bank\bank0.s --------------------------------

                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SERIAL.S
                             ;*  Serial input/output handler - driving a 6551 
                             ;*  To handle WDC65c51 bug on transmit, use a del
                             ;*  to ensure byte is transmitted before the next
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             
                             ;****************************************
                             ;* get_byte
                             ;* Get a byte (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
cedb :                       get_byte
cedb : a50e             [ 3] 	lda ser_first			; if first==last then buffer emp
cedd : 450f             [ 3] 	eor ser_last
cedf : d004             [ 3] 	bne got_byte
cee1 : b0f8             [ 3] 	bcs get_byte
cee3 : 38               [ 2] 	sec
cee4 : 60               [ 6] 	rts
cee5 :                       got_byte
cee5 : 5a               [ 3] 	phy
cee6 : a40e             [ 3] 	ldy ser_first			; Get first byte in FIFO
cee8 : b90008           [ 4] 	lda ser_buf,y
ceeb : e60e             [ 5] 	inc ser_first			; Advance first byte of FIFO
ceed : 7a               [ 4] 	ply
ceee : 18               [ 2] 	clc						; Indicate byte was got
ceef : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cef0 :                       put_byte
cef0 : 48               [ 3] 	pha						; Save A
                             ;	phx
                             ;	ldx #112				; Loop 112 times
cef1 :                       put_byte_wait				; Delay 2512 cycles (19200bps, 1
                             ;	nop						; For 5.36Mhz clock
                             ;	nop						; ~25 cycles per loop (10xnop+dex+bne)
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
AS65 Assembler for R6502 [1.42].                                     Page   64
-------------------------------- bank\bank0.s --------------------------------

                             ;	dex						;
cef1 : ad8105           [ 4] 	lda SER_STATUS			; Check status register
cef4 : 2910             [ 2] 	and #SER_TDRE			; Is transmit reg empty?
cef6 : f0f9             [ 3] 	beq put_byte_wait		; Keep waiting if not
                             ;	plx						; restore X
cef8 : 68               [ 4] 	pla						; Get A back
cef9 : 8d8005           [ 4] 	sta SER_DATA			; Write the data
cefc : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* init_acia
                             ;* ACIA initialisation (this is IO_2)
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : X
                             ;****************************************
cefd :                       init_acia
cefd : a21f             [ 2] 	ldx #0b00011111			; 19200 baud, 8 bits, 1 stop b
ceff : 8e8305           [ 4] 	stx SER_CTL
cf02 : a209             [ 2] 	ldx #0b00001001			; No parity, no TX int plus RT
cf04 : 8e8205           [ 4] 	stx SER_CMD
cf07 : ae8105           [ 4] 	ldx SER_STATUS			; Read status reg to clear stuf
                             
cf0a : 640e             [ 3] 	stz ser_first			; Initialise FIFO buffer pointer
cf0c : 640f             [ 3] 	stz ser_last
                             
cf0e : 60               [ 6] 	rts
                             
                             	include "keyboard\keyboard.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*  This is the keyboard module to enable interfa
                             ;*  BBC keyboard using a 65c22.  The BBC keyboard
                             ;*  in that it provides a signal to know if somet
                             ;*  pressed in hardware, so the more cycle heavy 
                             ;*  actually check which key etc can be done only
                             ;*  necessary.  Debouncing is necessary to not sc
                             ;*  often, with the timing for this happening dur
                             ;*  interrupt cycle.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
cf0f :                       init_keyboard
cf0f : a914             [ 2] 	lda #KB_REP_DEL
cf11 : 853a             [ 3] 	sta kb_rep_del
cf13 : a903             [ 2] 	lda #KB_REP_TIM
cf15 : 8539             [ 3] 	sta kb_rep_tim
AS65 Assembler for R6502 [1.42].                                     Page   65
-------------------------------- bank\bank0.s --------------------------------

cf17 : a902             [ 2] 	lda #KB_DEBOUNCE
cf19 : 853b             [ 3] 	sta kb_debounce
cf1b : 6436             [ 3] 	stz kb_stat
cf1d : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard (not shift+ctrl)
                             ;* X = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
cf1e :                       kb_read_raw
cf1e : 48               [ 3] 	pha
cf1f : 5a               [ 3] 	phy
                             
cf20 : a901             [ 2] 	lda #KB_W				; This is the mask to look for
cf22 : a000             [ 2] 	ldy #0					; Start at row 1, column 0, KB_EN is 
cf24 :                       kb_check_w_col
cf24 : a207             [ 2] 	ldx #7					; Only 7 rows as row zero is skipped
cf26 : c8               [ 2] 	iny						; Increment past row 0
cf27 :                       kb_check_w_key
cf27 : 8c0104           [ 4] 	sty IO_0 + PRA			; Set the row and column with K
cf2a : ea               [ 2] 	nop						; Short delay for fast CPU
cf2b : ea               [ 2] 	nop						; Short delay for fast CPU
cf2c : 2c0004           [ 4] 	bit IO_0 + PRB			; Bit test for the W status
cf2f : d00b             [ 3] 	bne got_key				; Found key
cf31 : c8               [ 2] 	iny						; Advance row
cf32 : ca               [ 2] 	dex						; Do each row
cf33 : d0f2             [ 3] 	bne kb_check_w_key
cf35 : c050             [ 2] 	cpy #0b01010000			; If not got to column 10 then
cf37 : d0eb             [ 3] 	bne kb_check_w_col
                             
cf39 :                       kb_no_key
                             	; no key found
cf39 : 18               [ 2] 	clc						; Clear carry flag = no keys found
cf3a : 8045             [ 3] 	bra kb_raw_done			; Exit nicely
                             
cf3c :                       got_key
cf3c : 8433             [ 3] 	sty kb_raw				; Save the raw key code
cf3e : be1fd0           [ 4] 	ldx kb_table_std,y		; Load up standard key code 
cf41 : a900             [ 2] 	lda #0b00000000			; Check shift pressed (row=0, 
cf43 : 8d0104           [ 4] 	sta IO_0 + PRA
cf46 : ea               [ 2] 	nop						; Short delay for fast CPU
cf47 : ea               [ 2] 	nop						; Short delay for fast CPU
cf48 : ad0004           [ 4] 	lda IO_0 + PRB			; Read w
cf4b : 2901             [ 2] 	and #KB_W
cf4d : d006             [ 3] 	bne do_shifted_key
cf4f : a536             [ 3] 	lda kb_stat
cf51 : 2902             [ 2] 	and #KB_SHIFTLK			; Check shift lock
cf53 : f003             [ 3] 	beq skip_shifted_key	
cf55 :                       do_shifted_key
cf55 : be70d0           [ 4] 	ldx kb_table_shift,y	; Overwrite X with shifted 
cf58 :                       skip_shifted_key
cf58 : a908             [ 2] 	lda #0b00001000			; Check ctrl pressed (row=0, c
cf5a : 8d0104           [ 4] 	sta IO_0 + PRA
cf5d : ea               [ 2] 	nop						; Short delay for fast CPU
cf5e : ea               [ 2] 	nop						; Short delay for fast CPU
cf5f : ad0004           [ 4] 	lda IO_0 + PRB			; Read w
cf62 : 2901             [ 2] 	and #KB_W
cf64 : f006             [ 3] 	beq skip_ctrl_key
cf66 : 8a               [ 2] 	txa						; If ctrl pressed then only take bottom
AS65 Assembler for R6502 [1.42].                                     Page   66
-------------------------------- bank\bank0.s --------------------------------

cf67 : 291f             [ 2] 	and #0x1f				; Which will result in codes 0 to 3
cf69 : aa               [ 2] 	tax
cf6a : 8012             [ 3] 	bra skip_caps_lock		; no point in checking caps 
cf6c :                       skip_ctrl_key
cf6c : a536             [ 3] 	lda kb_stat				; Check caps lock
cf6e : 2901             [ 2] 	and #KB_CAPSLK
cf70 : f00c             [ 3] 	beq skip_caps_lock
cf72 : 8a               [ 2] 	txa						; Easier to modify in A
cf73 : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
cf75 : 9007             [ 3] 	bcc skip_caps_lock
cf77 : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
cf79 : b003             [ 3] 	bcs skip_caps_lock
cf7b : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
cf7d : aa               [ 2] 	tax						; to make upper case
cf7e :                       skip_caps_lock
cf7e : 8635             [ 3] 	stx kb_code				; Store mapped key code
cf80 : 38               [ 2] 	sec						; Set carry flag = key found
                             	
cf81 :                       kb_raw_done
cf81 : a080             [ 2] 	ldy #KB_EN				; Re-enable h/w strobe
cf83 : 8c0104           [ 4] 	sty IO_0 + PRA
cf86 : 7a               [ 4] 	ply
cf87 : 68               [ 4] 	pla
cf88 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* kb_read_dip
                             ;* Scans options dip switch
                             ;* A = Options code for all 8 bits
                             ;****************************************
cf89 :                       kb_read_dip
cf89 : 5a               [ 3] 	phy
                             
cf8a : a000             [ 2] 	ldy #0
cf8c : 6441             [ 3] 	stz tmp_a
cf8e :                       kb_check_dip
cf8e : b9c1d0           [ 4] 	lda kb_dip_code, y		; Binary dip code, row = 0, 
cf91 : 8d0104           [ 4] 	sta IO_0 + PRA
cf94 : ea               [ 2] 	nop						; Short delay for fast CPU
cf95 : ea               [ 2] 	nop						; Short delay for fast CPU
cf96 : ad0004           [ 4] 	lda IO_0 + PRB			; Read w
cf99 : 2901             [ 2] 	and #KB_W
cf9b : f007             [ 3] 	beq kb_skip_dip
cf9d : a541             [ 3] 	lda tmp_a
cf9f : 19c9d0           [ 4] 	ora kb_dip_bit, y		; Set the bit if option on
cfa2 : 8541             [ 3] 	sta tmp_a
cfa4 :                       kb_skip_dip
cfa4 : c8               [ 2] 	iny
cfa5 : c008             [ 2] 	cpy #8
cfa7 : d0e5             [ 3] 	bne kb_check_dip
cfa9 : a541             [ 3] 	lda tmp_a
                             
cfab : a080             [ 2] 	ldy #KB_EN				; Re-enable h/w strobe
cfad : 8c0104           [ 4] 	sty IO_0 + PRA
                             
cfb0 : 7a               [ 4] 	ply
cfb1 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* kb_scan_key
AS65 Assembler for R6502 [1.42].                                     Page   67
-------------------------------- bank\bank0.s --------------------------------

                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
cfb2 :                       kb_scan_key
cfb2 : a53c             [ 3] 	lda kb_pressed			; or if interrupt handler didn'
cfb4 : f01d             [ 3] 	beq kb_scan_zero			
cfb6 : 643c             [ 3] 	stz kb_pressed			; Zero the flag to indicate a s
cfb8 : 5a               [ 3] 	phy
cfb9 : da               [ 3] 	phx
                             	
cfba : a43a             [ 3] 	ldy kb_rep_del			; Initially, assuming normal re
cfbc : 201ecf           [ 6] 	jsr kb_read_raw			; H/W scan of keyboard
cfbf : 9010             [ 3] 	bcc kb_scan_nothing		; C clear means nothing fou
cfc1 : e080             [ 2] 	cpx #0x80				; Was it a special key (caps/shift 
cfc3 : b01a             [ 3] 	bcs kb_special			; If so process
cfc5 : a533             [ 3] 	lda kb_raw
cfc7 : c534             [ 3] 	cmp kb_last
cfc9 : d00b             [ 3] 	bne kb_return_code		; This key different from la
cfcb : a439             [ 3] 	ldy kb_rep_tim
cfcd : a638             [ 3] 	ldx kb_rep				; If repeat timer is zero then emi
cfcf : f005             [ 3] 	beq kb_return_code
                             
cfd1 :                       kb_scan_nothing
cfd1 : fa               [ 4] 	plx
cfd2 : 7a               [ 4] 	ply
cfd3 :                       kb_scan_zero
cfd3 : a900             [ 2] 	lda #0					; 0 = no key	
cfd5 : 60               [ 6] 	rts
cfd6 :                       kb_return_code				; Return a key because raw != l
cfd6 : 8438             [ 3] 	sty kb_rep				; Delay before the same key is emi
cfd8 : 8534             [ 3] 	sta kb_last				; Now make last = raw
                             	
cfda : fa               [ 4] 	plx
cfdb : 7a               [ 4] 	ply
                             	
cfdc : a535             [ 3] 	lda kb_code				; Get the actual code
                             	
cfde : 60               [ 6] 	rts
                             
cfdf :                       kb_special					; Process special keys
cfdf : e434             [ 3] 	cpx kb_last				; If last is not zero then don't 
cfe1 : f0ee             [ 3] 	beq kb_scan_nothing		; special keys don't obey r
cfe3 : 8634             [ 3] 	stx kb_last				; Update last
cfe5 : e08a             [ 2] 	cpx #0x8a				; CAPS?
cfe7 : f015             [ 3] 	beq kb_caps_lock		; Yes
cfe9 : e08b             [ 2] 	cpx #0x8b				; Shift Lock?
cfeb : d0e4             [ 3] 	bne kb_scan_nothing		; No, then found nothing (F
                             	;Process shift lock
cfed : a536             [ 3] 	lda kb_stat
cfef : 4902             [ 2] 	eor #KB_SHIFTLK
cff1 : 8536             [ 3] 	sta kb_stat
cff3 : 18               [ 2] 	clc
cff4 : 2902             [ 2] 	and #KB_SHIFTLK
cff6 : f001             [ 3] 	beq kb_skip_shiftlk
cff8 : 38               [ 2] 	sec
cff9 :                       kb_skip_shiftlk
cff9 : 2079ce           [ 6] 	jsr set_led2
cffc : 80d3             [ 3] 	bra kb_scan_nothing
                             	;Process caps lock
cffe :                       kb_caps_lock
cffe : a536             [ 3] 	lda kb_stat
AS65 Assembler for R6502 [1.42].                                     Page   68
-------------------------------- bank\bank0.s --------------------------------

d000 : 4901             [ 2] 	eor #KB_CAPSLK
d002 : 8536             [ 3] 	sta kb_stat
d004 : 18               [ 2] 	clc
d005 : 2901             [ 2] 	and #KB_CAPSLK
d007 : f001             [ 3] 	beq kb_skip_capslk
d009 : 38               [ 2] 	sec
d00a :                       kb_skip_capslk
d00a : 206ace           [ 6] 	jsr set_led1
d00d : 80c2             [ 4] 	bra kb_scan_nothing
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code
                             ;****************************************
d00f :                       kb_get_key
d00f : 08               [ 3] 	php
d010 : 20b2cf           [ 6] 	jsr kb_scan_key
d013 : c900             [ 2] 	cmp #0
d015 : d005             [ 3] 	bne kb_scan_got_key
d017 : 28               [ 4] 	plp						; No key, so check C
d018 : b0f5             [ 3] 	bcs kb_get_key			; Keep looking if C
d01a : 38               [ 2] 	sec						; Indicate key not got
d01b : 60               [ 6] 	rts
d01c :                       kb_scan_got_key
d01c : 28               [ 4] 	plp						; Pull stack
d01d : 18               [ 2] 	clc						; Indicate key valid
d01e : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Keyboard table - zero indicates nothing
                             ;****************************************
d01f :                       kb_table_std
d01f : 00                    	db 0x00								; Zero entry means nothing
d020 : 7180318a8b091b        	db 'q',0x80, '1',0x8a,0x8b,   9, 27	; Q, F0, 1, 
d027 : 00                    	db 0x00								; Skip row 0
d028 : 33773261737a81        	db '3', 'w', '2', 'a', 's', 'z',0x81; 3, W, 2, A
d02f : 00                    	db 0x00								; Skip row 0
d030 : 34656478632082        	db '4', 'e', 'd', 'x', 'c', ' ',0x82; 4, E, D, X
d037 : 00                    	db 0x00								; Skip row 0
d038 : 35747266677683        	db '5', 't', 'r', 'f', 'g', 'v',0x83; 5, T, R, F
d03f : 00                    	db 0x00								; Skip row 0
d040 : 84373679686285        	db 0x84,'7', '6', 'y', 'h', 'b',0x85; F4, 7, 6, 
d047 : 00                    	db 0x00								; Skip row 0
d048 : 3869756a6e6d86        	db '8', 'i', 'u', 'j', 'n', 'm',0x86; 8, I, U, J
d04f : 00                    	db 0x00								; Skip row 0
d050 : 87396f6b6c2c88        	db 0x87,'9', 'o', 'k', 'l', ',',0x88; F7, 9, O, 
d057 : 00                    	db 0x00								; Skip row 0
d058 : 2d3070403b2e89        	db '-', '0', 'p', '@', ';', '.',0x89; -, 0, P, @
d05f : 00                    	db 0x00								; Skip row 0
d060 : 5e5f5b3a5d2f5c        	db '^', '_', '[', ':', ']', '/', 92	; ^, _, [, :
d067 : 00                    	db 0x00								; Skip row 0
d068 : 080a0b0d7f0609        	db   8,  10,  11,  13, 127,   6,  9	; Left, Down
d06f : 00                    	db 0x00								; Skip row 0
                             
                             ;****************************************
                             ;* kb_table_shift (with shift)
                             ;* Keyboard table - zero indicates nothing
                             ;****************************************
d070 :                       kb_table_shift
d070 : 00                    	db 0x00								; Zero entry means nothing
AS65 Assembler for R6502 [1.42].                                     Page   69
-------------------------------- bank\bank0.s --------------------------------

d071 : 51c0218a8b091b        	db 'Q',0xc0, '!',0x8a,0x8b,   9, 27	; Q, F0, 1, 
d078 : 00                    	db 0x00								; Skip row 0
d079 : 23572241535ac1        	db '#', 'W', '"', 'A', 'S', 'Z',0xc1; 3, W, 2, A
d080 : 00                    	db 0x00								; Skip row 0
d081 : 244544584320c2        	db '$', 'E', 'D', 'X', 'C', ' ',0xc2; 4, E, D, X
d088 : 00                    	db 0x00								; Skip row 0
d089 : 255452464756c3        	db '%', 'T', 'R', 'F', 'G', 'V',0xc3; 5, T, R, F
d090 : 00                    	db 0x00								; Skip row 0
d091 : 842726594842c5        	db 0x84, 39, '&', 'Y', 'H', 'B',0xc5; F4, 7, 6, 
d098 : 00                    	db 0x00								; Skip row 0
d099 : 2849554a4e4dc6        	db '(', 'I', 'U', 'J', 'N', 'M',0xc6; 8, I, U, J
d0a0 : 00                    	db 0x00								; Skip row 0
d0a1 : 87294f4b4c3cc8        	db 0x87,')', 'O', 'K', 'L', '<',0xc8; F7, 9, O, 
d0a8 : 00                    	db 0x00								; Skip row 0
d0a9 : 3d3050402b3ec9        	db '=', '0', 'P', '@', '+', '>',0xc9; -, 0, P, @
d0b0 : 00                    	db 0x00								; Skip row 0
d0b1 : 7e607b2a7d3f7c        	db '~', 96, '{', '*', '}', '?', '|'	; ^, _, [, :
d0b8 : 00                    	db 0x00								; Skip row 0
d0b9 : 080a0b0d7f0609        	db   8,  10,  11,  13, 127,   6,  9	; Left, Down
d0c0 : 00                    	db 0x00								; Skip row 0
                             
                             ; Option switches
d0c1 :                       kb_dip_code
d0c1 : 10                    	db 0b00010000
d0c2 : 18                    	db 0b00011000
d0c3 : 20                    	db 0b00100000
d0c4 : 28                    	db 0b00101000
d0c5 : 30                    	db 0b00110000
d0c6 : 38                    	db 0b00111000
d0c7 : 40                    	db 0b01000000
d0c8 : 48                    	db 0b01001000
d0c9 :                       kb_dip_bit
d0c9 : 0102040810204080      	db 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80
                             	
                             
                             	include "rtc\rtc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.S
                             ;*	Real time clock support.  Uses the DS12887 to 
                             ;*	time functions for use by the rest of the syst
                             ;*	notably for file date-time stamps.
                             ;*	Just basic functions supported so far.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d0d1 :                       mod_sz_rtc_s
                             
                             
                             ;****************************************
                             ;* rtc_write
                             ;* Low level routine to write to a RTC location
                             ;* Inputs; X=location, A=Value
AS65 Assembler for R6502 [1.42].                                     Page   70
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
d0d1 :                       rtc_write
d0d1 : 8e0006           [ 4] 	stx RTC_ADDR
d0d4 : 8d0106           [ 4] 	sta RTC_DATA
d0d7 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* rtc_read
                             ;* Low level routine to write to a RTC location
                             ;* Inputs; X=location
                             ;* Output; A=Value
                             ;****************************************
d0d8 :                       rtc_read
d0d8 : 8e0006           [ 4] 	stx RTC_ADDR
d0db : ad0106           [ 4] 	lda RTC_DATA
d0de : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* rtc_init
                             ;* Initialise the RTC.  Check the VRT
                             ;* and if suspect then offer option to
                             ;* set date-time.
                             ;* Check NV ram and warn if bad
                             ;****************************************
d0df :                       rtc_init
                             	; No interrupts
d0df : a20c             [ 2] 	ldx #RTC_REGC
d0e1 : a900             [ 2] 	lda #0
d0e3 : 20d1d0           [ 6] 	jsr rtc_write
                             	
                             ;	; Clear alarm bytes
                             ;	lda #0
                             ;	ldx #RTC_SECA
                             ;	jsr rtc_write
                             ;	ldx #RTC_MINA
                             ;	jsr rtc_write
                             ;	ldx #RTC_HRA
                             ;	jsr rtc_write
                             ;	; Also clear day of week (not used yet)
                             ;	ldx #RTC_DOW
                             ;	jsr rtc_write
                             
                             	; Default is binary mode, 24 hour clock, no dayl
d0e6 : a20b             [ 2] 	ldx #RTC_REGB
d0e8 : a906             [ 2] 	lda #RTC_DM | RTC_2412
d0ea : 20d1d0           [ 6] 	jsr rtc_write
                             
                             	; Make sure clock is ticking
d0ed : a20a             [ 2] 	ldx #RTC_REGA
d0ef : a920             [ 2] 	lda #0b00100000			; Magic number to start the os
d0f1 : 20d1d0           [ 6] 	jsr rtc_write
                             	
                             	; Check VRT - if zero then bad battery / RAM!
d0f4 : a20d             [ 2] 	ldx #RTC_REGD
d0f6 : 20d8d0           [ 6] 	jsr rtc_read
d0f9 : 3003             [ 3] 	bmi rtc_badbattery_ok
d0fb : 2021d1           [ 6] 	jsr rtc_badbattery
d0fe :                       rtc_badbattery_ok
                             	; Check NV ram - if C=1 then corrupted!
d0fe : 2081d2           [ 6] 	jsr rtc_nvvalid
AS65 Assembler for R6502 [1.42].                                     Page   71
-------------------------------- bank\bank0.s --------------------------------

d101 : b046             [ 3] 	bcs rtc_badnvram
                             	
                             	;C=0
d103 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* rtc_badbattery
                             ;* Warn of bad battery and choice to set date/tim
                             ;****************************************
d104 :                       rtc_badbattery_msg
d104 : 5761726e696e67..      	db "Warning, RTC battery issue.",UTF_CR,0
                             	
d121 :                       rtc_badbattery
                             	; Print message
d121 : a204             [ 2] 	ldx #lo(rtc_badbattery_msg)
d123 : a9d1             [ 2] 	lda #hi(rtc_badbattery_msg)
d125 : 2093c5           [ 6] 	jsr io_print_line
                             	; Signifiy bad battery
d128 : 38               [ 2] 	sec
d129 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* rtc_badnvram
                             ;* Warn of bad NV ram
                             ;****************************************
d12a :                       rtc_badnvram_msg
d12a : 5761726e696e67..      	db "Warning, NV RAM checksum bad.",UTF_CR,0
                             
d149 :                       rtc_badnvram
                             	; Print message
d149 : a22a             [ 2] 	ldx #lo(rtc_badnvram_msg)
d14b : a9d1             [ 2] 	lda #hi(rtc_badnvram_msg)
d14d : 2093c5           [ 6] 	jsr io_print_line
                             	; Signify bad NV ram
d150 : 38               [ 2] 	sec
d151 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* rtc_freezeupdate
                             ;* Stop time and date buffer updating
                             ;****************************************
d152 :                       rtc_freezeupdate
d152 : a20b             [ 2] 	ldx #RTC_REGB
d154 : a986             [ 2] 	lda #RTC_SET | RTC_DM | RTC_2412
d156 : 4cd1d0           [ 3] 	jmp rtc_write
                             
                             
                             ;****************************************
                             ;* rtc_resumeupdate
                             ;* Resume time and date buffer updating
                             ;****************************************
d159 :                       rtc_resumeupdate
d159 : a20b             [ 2] 	ldx #RTC_REGB
d15b : a906             [ 2] 	lda #RTC_DM | RTC_2412
d15d : 4cd1d0           [ 3] 	jmp rtc_write
                             
                             
                             ;****************************************
                             ;* rtc_setdatetime
                             ;* Set the date and time
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   72
-------------------------------- bank\bank0.s --------------------------------

d160 :                       rtc_date_msg
d160 : 456e7465722064..      	db "Enter date dd/mm/yy : ",0
d177 :                       rtc_time_msg
d177 : 456e7465722074..      	db "Enter time hh/mm/ss : ",0
d18e :                       rtc_notset_msg
d18e : 4e6f7420736574..      	db "Not set",UTF_CR,0
d197 :                       rtc_setdatetime
d197 : 2052d1           [ 6] 	jsr rtc_freezeupdate
                             	; Message for get date
d19a : a260             [ 2] 	ldx #lo(rtc_date_msg)
d19c : a9d1             [ 2] 	lda #hi(rtc_date_msg)
d19e : 2093c5           [ 6] 	jsr io_print_line
                             	; Input date to the scratch buffer
d1a1 : 38               [ 2] 	sec								; Echo
d1a2 : a200             [ 2] 	ldx #lo(scratch)				; Serial input buffer for th
d1a4 : a909             [ 2] 	lda #hi(scratch)
d1a6 : a00a             [ 2] 	ldy #10
d1a8 : 2057c5           [ 6] 	jsr io_read_line
d1ab : c008             [ 2] 	cpy #8							; Must be 8 characters
d1ad : d056             [ 4] 	bne rtc_dtnotset				; else don't set
d1af : a200             [ 2] 	ldx #0							; Buffer is page aligned, pos 0=day
d1b1 : a548             [ 3] 	lda buf_adr+1
d1b3 : 2020d2           [ 6] 	jsr rtc_dtstringconvert
d1b6 : b04d             [ 4] 	bcs rtc_dtnotset
                             	; Ok now update the date from tmp_b,+1,+2
d1b8 : a207             [ 2] 	ldx #RTC_DAY
d1ba : a543             [ 3] 	lda tmp_b
d1bc : 20d1d0           [ 6] 	jsr rtc_write
d1bf : a208             [ 2] 	ldx #RTC_MTH
d1c1 : a544             [ 3] 	lda tmp_b+1
d1c3 : 20d1d0           [ 6] 	jsr rtc_write
d1c6 : a209             [ 2] 	ldx #RTC_YR
d1c8 : a545             [ 3] 	lda tmp_b+2
d1ca : 20d1d0           [ 6] 	jsr rtc_write
                             
                             	; Message for get time
d1cd : a277             [ 2] 	ldx #lo(rtc_time_msg)
d1cf : a9d1             [ 2] 	lda #hi(rtc_time_msg)
d1d1 : 2093c5           [ 6] 	jsr io_print_line
                             	; Input date to the scratch buffer
d1d4 : 38               [ 2] 	sec								; Echo
d1d5 : a200             [ 2] 	ldx #lo(scratch)				; Serial input buffer for th
d1d7 : a909             [ 2] 	lda #hi(scratch)
d1d9 : a00a             [ 2] 	ldy #10
d1db : 2057c5           [ 6] 	jsr io_read_line
d1de : c008             [ 2] 	cpy #8							; Must be 8 characters
d1e0 : d023             [ 4] 	bne rtc_dtnotset				; else don't set
d1e2 : a200             [ 2] 	ldx #0							; Buffer is page aligned, pos 0=hr
d1e4 : a548             [ 3] 	lda buf_adr+1
d1e6 : 2020d2           [ 6] 	jsr rtc_dtstringconvert
d1e9 : b01a             [ 4] 	bcs rtc_dtnotset
                             	; Ok now update the time from tmp_b,+1,+2
d1eb : a204             [ 2] 	ldx #RTC_HR
d1ed : a543             [ 3] 	lda tmp_b
d1ef : 20d1d0           [ 6] 	jsr rtc_write
d1f2 : a202             [ 2] 	ldx #RTC_MIN
d1f4 : a544             [ 3] 	lda tmp_b+1
d1f6 : 20d1d0           [ 6] 	jsr rtc_write
d1f9 : a200             [ 2] 	ldx #RTC_SEC
d1fb : a545             [ 3] 	lda tmp_b+2
d1fd : 20d1d0           [ 6] 	jsr rtc_write
d200 : 2059d1           [ 6] 	jsr rtc_resumeupdate
AS65 Assembler for R6502 [1.42].                                     Page   73
-------------------------------- bank\bank0.s --------------------------------

                             	; Signify time set OK
d203 : 18               [ 2] 	clc
d204 : 60               [ 6] 	rts
d205 :                       rtc_dtnotset
                             	; Message for get date
d205 : a28e             [ 2] 	ldx #lo(rtc_notset_msg)
d207 : a9d1             [ 2] 	lda #hi(rtc_notset_msg)
d209 : 2093c5           [ 6] 	jsr io_print_line
d20c : 2059d1           [ 6] 	jsr rtc_resumeupdate
                             	; Signify time not set
d20f : 38               [ 2] 	sec
d210 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* rtc_ptrplus3
                             ;* Add 3 to tmp_v1 ptr, result in tmp_v1 + X,A
                             ;****************************************
d211 :                       rtc_ptrplus3
d211 : 18               [ 2] 	clc
d212 : a53f             [ 3] 	lda tmp_v1
d214 : 6903             [ 2] 	adc #3
d216 : 853f             [ 3] 	sta tmp_v1
d218 : aa               [ 2] 	tax
d219 : a540             [ 3] 	lda tmp_v1+1
d21b : 6900             [ 2] 	adc #0
d21d : 8540             [ 3] 	sta tmp_v1+1
d21f : 60               [ 6] 	rts
                             
                             
                             ;**************************************
                             ;* rtc_dtstringconvert
                             ;* Convert a PP:QQ:RR string
                             ;* Starting at X,A
                             ;****************************************
d220 :                       rtc_dtstringconvert
                             	; X,A is base of string pointer
d220 : 863f             [ 3] 	stx tmp_v1						
d222 : 8540             [ 3] 	sta tmp_v1+1
d224 : 201ec9           [ 6] 	jsr con_dec_to_a				; Convert day of month
d227 : b01c             [ 3] 	bcs rtc_dtbadstring
d229 : a585             [ 3] 	lda num_a						; Get converted number
d22b : 8543             [ 3] 	sta tmp_b						; Save day of month
                             
d22d : 2011d2           [ 6] 	jsr rtc_ptrplus3				; +3 to base for month
d230 : 201ec9           [ 6] 	jsr con_dec_to_a				; Convert month
d233 : b010             [ 3] 	bcs rtc_dtbadstring
d235 : a585             [ 3] 	lda num_a						; Get converted number
d237 : 8544             [ 3] 	sta tmp_b+1						; Save month
                             
d239 : 2011d2           [ 6] 	jsr rtc_ptrplus3				; +3 to base for month
d23c : 201ec9           [ 6] 	jsr con_dec_to_a				; Convert year
d23f : b004             [ 3] 	bcs rtc_dtbadstring
d241 : a585             [ 3] 	lda num_a						; Get converted number
d243 : 8545             [ 3] 	sta tmp_b+2						; Save year
d245 :                       rtc_dtbadstring
d245 : 60               [ 6] 	rts
                             
                             
                             ;**************************************
                             ;* rtc_gettimedate
                             ;* Get time and put in to 6 bytes in location X,A
AS65 Assembler for R6502 [1.42].                                     Page   74
-------------------------------- bank\bank0.s --------------------------------

                             ;* Order is : HMSDMY
                             ;**************************************
d246 :                       rtc_gettimedate
d246 : 863f             [ 3] 	stx tmp_v1
d248 : 8540             [ 3] 	sta tmp_v1+1
d24a : a000             [ 2] 	ldy #0
d24c : 2052d1           [ 6] 	jsr rtc_freezeupdate
d24f : a204             [ 2] 	ldx #RTC_HR
d251 : 20d8d0           [ 6] 	jsr rtc_read
d254 : 913f             [ 5] 	sta (tmp_v1),y
d256 : c8               [ 2] 	iny
d257 : a202             [ 2] 	ldx #RTC_MIN
d259 : 20d8d0           [ 6] 	jsr rtc_read
d25c : 913f             [ 5] 	sta (tmp_v1),y
d25e : c8               [ 2] 	iny
d25f : a200             [ 2] 	ldx #RTC_SEC
d261 : 20d8d0           [ 6] 	jsr rtc_read
d264 : 913f             [ 5] 	sta (tmp_v1),y
d266 : c8               [ 2] 	iny
d267 : a207             [ 2] 	ldx #RTC_DAY
d269 : 20d8d0           [ 6] 	jsr rtc_read
d26c : 913f             [ 5] 	sta (tmp_v1),y
d26e : c8               [ 2] 	iny
d26f : a208             [ 2] 	ldx #RTC_MTH
d271 : 20d8d0           [ 6] 	jsr rtc_read
d274 : 913f             [ 5] 	sta (tmp_v1),y
d276 : c8               [ 2] 	iny
d277 : a209             [ 2] 	ldx #RTC_YR
d279 : 20d8d0           [ 6] 	jsr rtc_read
d27c : 913f             [ 5] 	sta (tmp_v1),y
d27e : 2059d1           [ 6] 	jsr rtc_resumeupdate
                             
                             ;**************************************
                             ;* rtc_nvvalid
                             ;* Validate nvram checksum
                             ;* C=1 means ERROR
                             ;* Simple 8 bit sum of all bytes should
                             ;* result in a zero. Partial sum carry
                             ;* is used.
                             ;* Uses A,X
                             ;**************************************
d281 :                       rtc_nvvalid
d281 : a20e             [ 2] 	ldx #14
d283 : a900             [ 2] 	lda #0
d285 :                       rtc_nvvalid_loop
d285 : 8e0006           [ 4] 	stx RTC_ADDR
d288 : 18               [ 2] 	clc
d289 : 6d0106           [ 4] 	adc RTC_DATA
d28c : e8               [ 2] 	inx
d28d : e040             [ 2] 	cpx #NV_RAMSZ+1
d28f : d0f4             [ 3] 	bne rtc_nvvalid_loop
                             	; A-1 will be C=1 if A>=1
d291 : c901             [ 2] 	cmp #1
d293 : 60               [ 6] 	rts
                             
                             ;**************************************
                             ;* rtc_nvwrite
                             ;* Write to nvram location X, value A
                             ;* Checksum (byte 127) is also updated
                             ;**************************************
d294 :                       rtc_nvwrite
                             	; Write to required nv location
AS65 Assembler for R6502 [1.42].                                     Page   75
-------------------------------- bank\bank0.s --------------------------------

d294 : 20d1d0           [ 6] 	jsr rtc_write
                             	; Zero out checksum location
d297 : a23f             [ 2] 	ldx #NV_RAMSZ
d299 : a900             [ 2] 	lda #0
d29b : 20d1d0           [ 6] 	jsr rtc_write
                             	; Get new checksum by calling validator
d29e : 2081d2           [ 6] 	jsr rtc_nvvalid
                             	; Calculate checksum by making 2s complement
d2a1 : 49ff             [ 2] 	eor #0xff
d2a3 : 18               [ 2] 	clc
d2a4 : 6901             [ 2] 	adc #1
                             	; Write new checksum
d2a6 : a23f             [ 2] 	ldx #NV_RAMSZ
d2a8 : 20d1d0           [ 6] 	jsr rtc_write
d2ab : 60               [ 6] 	rts
                             
                             ;**************************************
                             ;* rtc_nvread
                             ;* Read from nvram location X
                             ;* Value in A
                             ;* C=1 if checksum failed
                             ;**************************************
d2ac :                       rtc_nvread
                             	; Read nv location
d2ac : 20d8d0           [ 6] 	jsr rtc_read
                             	; Remember while validating checksum
d2af : 48               [ 3] 	pha
                             	; Validate checksum (C=0 if OK)
d2b0 : 2081d2           [ 6] 	jsr rtc_nvvalid
                             	; Retrieve the location read
d2b3 : 68               [ 4] 	pla
                             	; C=0 if OK and A is valid
d2b4 : 60               [ 6] 	rts
                             
d2b5 :                       mod_sz_rtc_e
                             
                             
                             	include "sound\sound.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.  Interf
                             ;*  chip is through port A of VIA 2 because it ca
                             ;*  connected directly to the 6502 bus.  This mea
                             ;*  is a bit clunky to drive, but this is how the
                             ;*  did it, so even though I came up with this in
                             ;*  I guess I can't be too wrong with this approa
                             ;*  The AY doesn't only produce sound, it also ha
                             ;*  of 8 bit IO port - one of them I am using for
                             ;*
                             ;*  NOTE:	As part of the ROM banking strategy, th
                             ;*			lowest level routines have been factored out
                             ;*			to the 'kernel' which means they are present
AS65 Assembler for R6502 [1.42].                                     Page   76
-------------------------------- bank\bank0.s --------------------------------

                             ;*			in every code bank.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d2b5 :                       mod_sz_sound_s
                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Y
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d2b5 :                       snd_get_note
d2b5 : bedad2           [ 4] 	ldx snd_music_tab,y
d2b8 : b9dbd2           [ 4] 	lda snd_music_tab+1,y
d2bb : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d2bc :                       init_snd
d2bc : a200             [ 2] 	ldx #0x00
d2be :                       init_snd_regs
d2be : bccad2           [ 4] 	ldy snd_init_tab,x
d2c1 : 2025c6           [ 6] 	jsr snd_set				; Set X to Y
d2c4 : e8               [ 2] 	inx
d2c5 : e010             [ 2] 	cpx #16					; Done 16?
d2c7 : d0f5             [ 3] 	bne init_snd_regs		; Nope	
                             	
d2c9 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d2ca :                       snd_init_tab
d2ca : 80                    	db 0x80				; R0 = Channel A Tone Low
d2cb : 00                    	db 0x00				; R1 = Channel A Tone High
d2cc : 00                    	db 0x00				; R2 = Channel B Tone Low
d2cd : 01                    	db 0x01				; R3 = Channel B Tone High
d2ce : 00                    	db 0x00				; R4 = Channel C Tone Low
d2cf : 02                    	db 0x02				; R5 = Channel C Tone High
d2d0 : 00                    	db 0x00				; R6 = Noise period
d2d1 : 3e                    	db 0b00111110		; R7 = Control : IOB input, IOA i
d2d2 : 1f                    	db 0x1f				; R8 = Channel A Vol
d2d3 : 1f                    	db 0x1f				; R9 = Channel B Vol
d2d4 : 1f                    	db 0x1f				; R10 = Channel C Vol
d2d5 : 00                    	db 0x00				; R11 = Envelope Period Low
d2d6 : 09                    	db 0x09				; R12 = Envelope Period High
d2d7 : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d2d8 : 00                    	db 0x00				; R14 = IO Port A
d2d9 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0
                             
AS65 Assembler for R6502 [1.42].                                     Page   77
-------------------------------- bank\bank0.s --------------------------------

d2da :                       snd_music_tab
d2da : 050a                  	dw 2565				; C		0
d2dc : 7509                  	dw 2421				; C#	1
d2de : ee08                  	dw 2286				; D		2
d2e0 : 6d08                  	dw 2157				; D#	3
d2e2 : f407                  	dw 2036				; E		4
d2e4 : 8207                  	dw 1922				; F		5
d2e6 : 1607                  	dw 1814				; F#	6
d2e8 : b006                  	dw 1712				; G		7
d2ea : 5006                  	dw 1616				; G#	8
d2ec : f505                  	dw 1525				; A		9
d2ee : a005                  	dw 1440				; A#	10
d2f0 : 4f05                  	dw 1359				; B		11
                             	
d2f2 : 0305                  	dw 1283				; C
d2f4 : bb04                  	dw 1211				; C#
d2f6 : 7704                  	dw 1143				; D
d2f8 : 3704                  	dw 1079				; D#
d2fa : fa03                  	dw 1018				; E
d2fc : c103                  	dw 961 				; F
d2fe : 8b03                  	dw 907 				; F#
d300 : 5803                  	dw 856 				; G
d302 : 2803                  	dw 808 				; G#
d304 : fb02                  	dw 763 				; A
d306 : d002                  	dw 720 				; A#
d308 : a702                  	dw 679 				; B
                             
d30a : 8102                  	dw 641				; C
d30c : 5d02                  	dw 605				; C#
d30e : 3b02                  	dw 571				; D
d310 : 1b02                  	dw 539				; D#
d312 : fd01                  	dw 509				; E
d314 : e001                  	dw 480				; F
d316 : c501                  	dw 453				; F#
d318 : ac01                  	dw 428				; G
d31a : 9401                  	dw 404				; G#
d31c : 7d01                  	dw 381				; A
d31e : 6801                  	dw 360				; A#
d320 : 5401                  	dw 340				; B
                             
d322 : 4101                  	dw 321				; C
d324 : 2f01                  	dw 303				; C#
d326 : 1e01                  	dw 286				; D
d328 : 0e01                  	dw 270				; D#
d32a : fe00                  	dw 254				; E
d32c : f000                  	dw 240				; F
d32e : e300                  	dw 227				; F#
d330 : d600                  	dw 214				; G
d332 : ca00                  	dw 202				; G#
d334 : bf00                  	dw 191				; A
d336 : b400                  	dw 180				; A#
d338 : aa00                  	dw 170				; B
                             
d33a : a000                  	dw 160				; C
d33c : 9700                  	dw 151				; C#
d33e : 8f00                  	dw 143				; D
d340 : 8700                  	dw 135				; D#
d342 : 7f00                  	dw 127				; E
d344 : 7800                  	dw 120				; F
d346 : 7100                  	dw 113				; F#
d348 : 6b00                  	dw 107				; G
d34a : 6500                  	dw 101				; G#
AS65 Assembler for R6502 [1.42].                                     Page   78
-------------------------------- bank\bank0.s --------------------------------

d34c : 5f00                  	dw 95 				; A
d34e : 5a00                  	dw 90 				; A#
d350 : 5500                  	dw 85 				; B
                             
d352 : 5000                  	dw 80				; C
d354 : 4c00                  	dw 76				; C#
d356 : 4700                  	dw 71				; D
d358 : 4300                  	dw 67				; D#
d35a : 4000                  	dw 64				; E
d35c : 3c00                  	dw 60				; F
d35e : 3900                  	dw 57				; F#
d360 : 3600                  	dw 54				; G
d362 : 3300                  	dw 51				; G#
d364 : 3000                  	dw 48				; A
d366 : 2d00                  	dw 45				; A#
d368 : 2a00                  	dw 42				; B
                             
d36a : 2800                  	dw 40				; C
d36c : 2600                  	dw 38				; C#
d36e : 2400                  	dw 36				; D
d370 : 2200                  	dw 34				; D#
d372 : 2000                  	dw 32				; E
d374 : 1e00                  	dw 30				; F
d376 : 1c00                  	dw 28				; F#
d378 : 1b00                  	dw 27				; G
d37a : 1900                  	dw 25				; G#
d37c : 1800                  	dw 24				; A
d37e : 1600                  	dw 22				; A#
d380 : 1500                  	dw 21				; B
                             
d382 :                       mod_sz_sound_e
                             
                             	include "vdp\vdp.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP.S
                             ;*  This module implements the drivers of the VDP
                             ;*  a TMS9918a.  The VDP is interfaced to the 650
                             ;*  through a memory mapped IO (that's how the 65
                             ;*  There are only two bytes in the IO space that
                             ;*  and the 6502 needs to poke or read from these
                             ;*  delay to allow the VDP to detect and respond 
                             ;*  request.  It's interesting that delays are ne
                             ;*  MSX computer also used a TMS9918a but with Z8
                             ;*  CPU, which actually didn't need delays.  The 
                             ;*  a simple processor but a write instruction on
                             ;*  4 cycles, hence needing delays.
                             ;*  Considering it came out in the late 70s, the 
                             ;*  series of VDP are pretty impressive - 2 text 
                             ;*  a hires mode too ('a' variant).  Plus 32 hard
                             ;*  sprites and 15 colours - very good indeed. Al
                             ;*  uses its own memory so doesn't eat 6502 space
                             ;*  Downside to having its own memory is that it 
                             ;*  slow to do large updates e.g. scrolling.  Ok 
                             ;*  column screen can be scrolled and it looks ok
                             ;*  no way would I try to scroll a hires screen. 
AS65 Assembler for R6502 [1.42].                                     Page   79
-------------------------------- bank\bank0.s --------------------------------

                             ;*  why many games on the MSX didn't do smooth sc
                             ;*
                             ;*  NOTE:	As part of the ROM banking strategy, th
                             ;*			lowest level routines have been factored out
                             ;*			to the 'kernel' which means they are present
                             ;*			in every code bank.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d382 :                       mod_sz_vdp_s
                             
                             	include "vdp\font.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  The normal char 1 is either a
                             ;*  but I have set the default to be a little spa
                             ;*  This character set is a combination of the MS
                             ;*  special characters outside of the normal ASCI
                             ;*  and Oric-1 for letters, numbers, punctuation 
                             ;*  Oric was my first computer hence the nostalgi
                             ;*
                             ;************************************************
                             
d382 : 00000000000000..      	align 256
                             	
d400 :                       vdp_font
                             ; char 0
d400 : 00                    	db %00000000
d401 : 00                    	db %00000000
d402 : 00                    	db %00000000
d403 : 00                    	db %00000000
d404 : 00                    	db %00000000
d405 : 00                    	db %00000000
d406 : 00                    	db %00000000
d407 : 00                    	db %00000000
                             ; char 1 standard
                             ;	db %00000000
                             ;	db %00100000
                             ;	db %01110000
                             ;	db %11111000
                             ;	db %01110000
                             ;	db %00100000
                             ;	db %00000000
                             ;	db %00000000
                             ; char 1 space invader
d408 : 18                    	db %00011000
d409 : 3c                    	db %00111100
d40a : 7e                    	db %01111110
d40b : db                    	db %11011011
d40c : ff                    	db %11111111
AS65 Assembler for R6502 [1.42].                                     Page   80
-------------------------------- bank\bank0.s --------------------------------

d40d : 24                    	db %00100100
d40e : 5a                    	db %01011010
d40f : a5                    	db %10100101
                             ; char 2
d410 : a8                    	db %10101000
d411 : 54                    	db %01010100
d412 : a8                    	db %10101000
d413 : 54                    	db %01010100
d414 : a8                    	db %10101000
d415 : 54                    	db %01010100
d416 : a8                    	db %10101000
d417 : 54                    	db %01010100
                             ; char 3
d418 : 20                    	db %00100000
d419 : 70                    	db %01110000
d41a : a8                    	db %10101000
d41b : 20                    	db %00100000
d41c : 20                    	db %00100000
d41d : 20                    	db %00100000
d41e : 20                    	db %00100000
d41f : 00                    	db %00000000
                             ; char 4
d420 : 20                    	db %00100000
d421 : 20                    	db %00100000
d422 : 20                    	db %00100000
d423 : 20                    	db %00100000
d424 : a8                    	db %10101000
d425 : 70                    	db %01110000
d426 : 20                    	db %00100000
d427 : 00                    	db %00000000
                             ; char 5
d428 : 00                    	db %00000000
d429 : 20                    	db %00100000
d42a : 40                    	db %01000000
d42b : f8                    	db %11111000
d42c : 40                    	db %01000000
d42d : 20                    	db %00100000
d42e : 00                    	db %00000000
d42f : 00                    	db %00000000
                             ; char 6
d430 : 00                    	db %00000000
d431 : 20                    	db %00100000
d432 : 10                    	db %00010000
d433 : f8                    	db %11111000
d434 : 10                    	db %00010000
d435 : 20                    	db %00100000
d436 : 00                    	db %00000000
d437 : 00                    	db %00000000
                             ; char 7
d438 : 60                    	db %01100000
d439 : 90                    	db %10010000
d43a : 90                    	db %10010000
d43b : 60                    	db %01100000
d43c : 00                    	db %00000000
d43d : 00                    	db %00000000
d43e : 00                    	db %00000000
d43f : 00                    	db %00000000
                             ; char 8
d440 : 20                    	db %00100000
d441 : 20                    	db %00100000
d442 : f8                    	db %11111000
d443 : 20                    	db %00100000
AS65 Assembler for R6502 [1.42].                                     Page   81
-------------------------------- bank\bank0.s --------------------------------

d444 : 20                    	db %00100000
d445 : 00                    	db %00000000
d446 : f8                    	db %11111000
d447 : 00                    	db %00000000
                             ; char 9
d448 : 00                    	db %00000000
d449 : 00                    	db %00000000
d44a : 00                    	db %00000000
d44b : 00                    	db %00000000
d44c : 00                    	db %00000000
d44d : 00                    	db %00000000
d44e : a8                    	db %10101000
d44f : 00                    	db %00000000
                             ; char 10
d450 : 00                    	db %00000000
d451 : 00                    	db %00000000
d452 : 08                    	db %00001000
d453 : 10                    	db %00010000
d454 : a0                    	db %10100000
d455 : 40                    	db %01000000
d456 : 00                    	db %00000000
d457 : 00                    	db %00000000
                             ; char 11
d458 : 30                    	db %00110000
d459 : 30                    	db %00110000
d45a : 30                    	db %00110000
d45b : f0                    	db %11110000
d45c : f0                    	db %11110000
d45d : 00                    	db %00000000
d45e : 00                    	db %00000000
d45f : 00                    	db %00000000
                             ; char 12
d460 : 00                    	db %00000000
d461 : 00                    	db %00000000
d462 : 00                    	db %00000000
d463 : f0                    	db %11110000
d464 : f0                    	db %11110000
d465 : 30                    	db %00110000
d466 : 30                    	db %00110000
d467 : 30                    	db %00110000
                             ; char 13
d468 : 00                    	db %00000000
d469 : 00                    	db %00000000
d46a : 00                    	db %00000000
d46b : 3c                    	db %00111100
d46c : 3c                    	db %00111100
d46d : 30                    	db %00110000
d46e : 30                    	db %00110000
d46f : 30                    	db %00110000
                             ; char 14
d470 : 30                    	db %00110000
d471 : 30                    	db %00110000
d472 : 30                    	db %00110000
d473 : 3c                    	db %00111100
d474 : 3c                    	db %00111100
d475 : 00                    	db %00000000
d476 : 00                    	db %00000000
d477 : 00                    	db %00000000
                             ; char 15
d478 : 30                    	db %00110000
d479 : 30                    	db %00110000
d47a : 30                    	db %00110000
AS65 Assembler for R6502 [1.42].                                     Page   82
-------------------------------- bank\bank0.s --------------------------------

d47b : fc                    	db %11111100
d47c : fc                    	db %11111100
d47d : 30                    	db %00110000
d47e : 30                    	db %00110000
d47f : 30                    	db %00110000
                             ; char 16
d480 : fc                    	db %11111100
d481 : fc                    	db %11111100
d482 : 00                    	db %00000000
d483 : 00                    	db %00000000
d484 : 00                    	db %00000000
d485 : 00                    	db %00000000
d486 : 00                    	db %00000000
d487 : 00                    	db %00000000
                             ; char 17
d488 : 00                    	db %00000000
d489 : 00                    	db %00000000
d48a : fc                    	db %11111100
d48b : fc                    	db %11111100
d48c : 00                    	db %00000000
d48d : 00                    	db %00000000
d48e : 00                    	db %00000000
d48f : 00                    	db %00000000
                             ; char 18
d490 : 00                    	db %00000000
d491 : 00                    	db %00000000
d492 : 00                    	db %00000000
d493 : fc                    	db %11111100
d494 : fc                    	db %11111100
d495 : 00                    	db %00000000
d496 : 00                    	db %00000000
d497 : 00                    	db %00000000
                             ; char 19
d498 : 00                    	db %00000000
d499 : 00                    	db %00000000
d49a : 00                    	db %00000000
d49b : 00                    	db %00000000
d49c : fc                    	db %11111100
d49d : fc                    	db %11111100
d49e : 00                    	db %00000000
d49f : 00                    	db %00000000
                             ; char 20
d4a0 : 00                    	db %00000000
d4a1 : 00                    	db %00000000
d4a2 : 00                    	db %00000000
d4a3 : 00                    	db %00000000
d4a4 : 00                    	db %00000000
d4a5 : 00                    	db %00000000
d4a6 : fc                    	db %11111100
d4a7 : fc                    	db %11111100
                             ; char 21
d4a8 : 30                    	db %00110000
d4a9 : 30                    	db %00110000
d4aa : 30                    	db %00110000
d4ab : 3c                    	db %00111100
d4ac : 3c                    	db %00111100
d4ad : 30                    	db %00110000
d4ae : 30                    	db %00110000
d4af : 30                    	db %00110000
                             ; char 22
d4b0 : 30                    	db %00110000
d4b1 : 30                    	db %00110000
AS65 Assembler for R6502 [1.42].                                     Page   83
-------------------------------- bank\bank0.s --------------------------------

d4b2 : 30                    	db %00110000
d4b3 : f0                    	db %11110000
d4b4 : f0                    	db %11110000
d4b5 : 30                    	db %00110000
d4b6 : 30                    	db %00110000
d4b7 : 30                    	db %00110000
                             ; char 23
d4b8 : 30                    	db %00110000
d4b9 : 30                    	db %00110000
d4ba : 30                    	db %00110000
d4bb : fc                    	db %11111100
d4bc : fc                    	db %11111100
d4bd : 00                    	db %00000000
d4be : 00                    	db %00000000
d4bf : 00                    	db %00000000
                             ; char 24
d4c0 : 00                    	db %00000000
d4c1 : 00                    	db %00000000
d4c2 : 00                    	db %00000000
d4c3 : fc                    	db %11111100
d4c4 : fc                    	db %11111100
d4c5 : 30                    	db %00110000
d4c6 : 30                    	db %00110000
d4c7 : 30                    	db %00110000
                             ; char 25
d4c8 : 30                    	db %00110000
d4c9 : 30                    	db %00110000
d4ca : 30                    	db %00110000
d4cb : 30                    	db %00110000
d4cc : 30                    	db %00110000
d4cd : 30                    	db %00110000
d4ce : 30                    	db %00110000
d4cf : 30                    	db %00110000
                             ; char 26
d4d0 : 08                    	db %00001000
d4d1 : 30                    	db %00110000
d4d2 : c0                    	db %11000000
d4d3 : 30                    	db %00110000
d4d4 : 08                    	db %00001000
d4d5 : 00                    	db %00000000
d4d6 : f8                    	db %11111000
d4d7 : 00                    	db %00000000
                             ; char 27
d4d8 : 80                    	db %10000000
d4d9 : 60                    	db %01100000
d4da : 18                    	db %00011000
d4db : 60                    	db %01100000
d4dc : 80                    	db %10000000
d4dd : 00                    	db %00000000
d4de : f8                    	db %11111000
d4df : 00                    	db %00000000
                             ; char 28
d4e0 : 00                    	db %00000000
d4e1 : 00                    	db %00000000
d4e2 : f8                    	db %11111000
d4e3 : 50                    	db %01010000
d4e4 : 50                    	db %01010000
d4e5 : 50                    	db %01010000
d4e6 : 98                    	db %10011000
d4e7 : 00                    	db %00000000
                             ; char 29
d4e8 : 10                    	db %00010000
AS65 Assembler for R6502 [1.42].                                     Page   84
-------------------------------- bank\bank0.s --------------------------------

d4e9 : 10                    	db %00010000
d4ea : f8                    	db %11111000
d4eb : 20                    	db %00100000
d4ec : f8                    	db %11111000
d4ed : 40                    	db %01000000
d4ee : 40                    	db %01000000
d4ef : 00                    	db %00000000
                             ; char 30
d4f0 : 30                    	db %00110000
d4f1 : 48                    	db %01001000
d4f2 : 40                    	db %01000000
d4f3 : e0                    	db %11100000
d4f4 : 40                    	db %01000000
d4f5 : 48                    	db %01001000
d4f6 : b0                    	db %10110000
d4f7 : 00                    	db %00000000
                             ; char 31
d4f8 : 00                    	db %00000000
d4f9 : 00                    	db %00000000
d4fa : 00                    	db %00000000
d4fb : 20                    	db %00100000
d4fc : 00                    	db %00000000
d4fd : 00                    	db %00000000
d4fe : 00                    	db %00000000
d4ff : 00                    	db %00000000
                             ; char 32
d500 : 00                    	db %00000000
d501 : 00                    	db %00000000
d502 : 00                    	db %00000000
d503 : 00                    	db %00000000
d504 : 00                    	db %00000000
d505 : 00                    	db %00000000
d506 : 00                    	db %00000000
d507 : 00                    	db %00000000
                             ; char 33
d508 : 20                    	db %00100000
d509 : 20                    	db %00100000
d50a : 20                    	db %00100000
d50b : 20                    	db %00100000
d50c : 20                    	db %00100000
d50d : 00                    	db %00000000
d50e : 20                    	db %00100000
d50f : 00                    	db %00000000
                             ; char 34
d510 : 50                    	db %01010000
d511 : 50                    	db %01010000
d512 : 50                    	db %01010000
d513 : 00                    	db %00000000
d514 : 00                    	db %00000000
d515 : 00                    	db %00000000
d516 : 00                    	db %00000000
d517 : 00                    	db %00000000
                             ; char 35
d518 : 50                    	db %01010000
d519 : 50                    	db %01010000
d51a : f8                    	db %11111000
d51b : 50                    	db %01010000
d51c : f8                    	db %11111000
d51d : 50                    	db %01010000
d51e : 50                    	db %01010000
d51f : 00                    	db %00000000
                             ; char 36
AS65 Assembler for R6502 [1.42].                                     Page   85
-------------------------------- bank\bank0.s --------------------------------

d520 : 20                    	db %00100000
d521 : 78                    	db %01111000
d522 : a0                    	db %10100000
d523 : 70                    	db %01110000
d524 : 28                    	db %00101000
d525 : f0                    	db %11110000
d526 : 20                    	db %00100000
d527 : 00                    	db %00000000
                             ; char 37
d528 : c0                    	db %11000000
d529 : c8                    	db %11001000
d52a : 10                    	db %00010000
d52b : 20                    	db %00100000
d52c : 40                    	db %01000000
d52d : 98                    	db %10011000
d52e : 18                    	db %00011000
d52f : 00                    	db %00000000
                             ; char 38
d530 : 40                    	db %01000000
d531 : a0                    	db %10100000
d532 : a0                    	db %10100000
d533 : 40                    	db %01000000
d534 : a8                    	db %10101000
d535 : 90                    	db %10010000
d536 : 68                    	db %01101000
d537 : 00                    	db %00000000
                             ; char 39
d538 : 20                    	db %00100000
d539 : 20                    	db %00100000
d53a : 20                    	db %00100000
d53b : 00                    	db %00000000
d53c : 00                    	db %00000000
d53d : 00                    	db %00000000
d53e : 00                    	db %00000000
d53f : 00                    	db %00000000
                             ; char 40
d540 : 20                    	db %00100000
d541 : 40                    	db %01000000
d542 : 80                    	db %10000000
d543 : 80                    	db %10000000
d544 : 80                    	db %10000000
d545 : 40                    	db %01000000
d546 : 20                    	db %00100000
d547 : 00                    	db %00000000
                             ; char 41
d548 : 20                    	db %00100000
d549 : 10                    	db %00010000
d54a : 08                    	db %00001000
d54b : 08                    	db %00001000
d54c : 08                    	db %00001000
d54d : 10                    	db %00010000
d54e : 20                    	db %00100000
d54f : 00                    	db %00000000
                             ; char 42
d550 : 20                    	db %00100000
d551 : a8                    	db %10101000
d552 : 70                    	db %01110000
d553 : 20                    	db %00100000
d554 : 70                    	db %01110000
d555 : a8                    	db %10101000
d556 : 20                    	db %00100000
d557 : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   86
-------------------------------- bank\bank0.s --------------------------------

                             ; char 43
d558 : 00                    	db %00000000
d559 : 20                    	db %00100000
d55a : 20                    	db %00100000
d55b : f8                    	db %11111000
d55c : 20                    	db %00100000
d55d : 20                    	db %00100000
d55e : 00                    	db %00000000
d55f : 00                    	db %00000000
                             ; char 44
d560 : 00                    	db %00000000
d561 : 00                    	db %00000000
d562 : 00                    	db %00000000
d563 : 00                    	db %00000000
d564 : 00                    	db %00000000
d565 : 20                    	db %00100000
d566 : 20                    	db %00100000
d567 : 40                    	db %01000000
                             ; char 45
d568 : 00                    	db %00000000
d569 : 00                    	db %00000000
d56a : 00                    	db %00000000
d56b : f8                    	db %11111000
d56c : 00                    	db %00000000
d56d : 00                    	db %00000000
d56e : 00                    	db %00000000
d56f : 00                    	db %00000000
                             ; char 46
d570 : 00                    	db %00000000
d571 : 00                    	db %00000000
d572 : 00                    	db %00000000
d573 : 00                    	db %00000000
d574 : 00                    	db %00000000
d575 : 10                    	db %00010000
d576 : 00                    	db %00000000
d577 : 00                    	db %00000000
                             ; char 47
d578 : 00                    	db %00000000
d579 : 08                    	db %00001000
d57a : 10                    	db %00010000
d57b : 20                    	db %00100000
d57c : 40                    	db %01000000
d57d : 80                    	db %10000000
d57e : 00                    	db %00000000
d57f : 00                    	db %00000000
                             ; char 48
d580 : 70                    	db %01110000
d581 : 88                    	db %10001000
d582 : 98                    	db %10011000
d583 : a8                    	db %10101000
d584 : c8                    	db %11001000
d585 : 88                    	db %10001000
d586 : 70                    	db %01110000
d587 : 00                    	db %00000000
                             ; char 49
d588 : 20                    	db %00100000
d589 : 60                    	db %01100000
d58a : 20                    	db %00100000
d58b : 20                    	db %00100000
d58c : 20                    	db %00100000
d58d : 20                    	db %00100000
d58e : 70                    	db %01110000
AS65 Assembler for R6502 [1.42].                                     Page   87
-------------------------------- bank\bank0.s --------------------------------

d58f : 00                    	db %00000000
                             ; char 50
d590 : 70                    	db %01110000
d591 : 88                    	db %10001000
d592 : 08                    	db %00001000
d593 : 10                    	db %00010000
d594 : 20                    	db %00100000
d595 : 40                    	db %01000000
d596 : f8                    	db %11111000
d597 : 00                    	db %00000000
                             ; char 51
d598 : f8                    	db %11111000
d599 : 08                    	db %00001000
d59a : 10                    	db %00010000
d59b : 30                    	db %00110000
d59c : 08                    	db %00001000
d59d : 88                    	db %10001000
d59e : 70                    	db %01110000
d59f : 00                    	db %00000000
                             ; char 52
d5a0 : 10                    	db %00010000
d5a1 : 30                    	db %00110000
d5a2 : 50                    	db %01010000
d5a3 : 90                    	db %10010000
d5a4 : f8                    	db %11111000
d5a5 : 10                    	db %00010000
d5a6 : 10                    	db %00010000
d5a7 : 00                    	db %00000000
                             ; char 53
d5a8 : f8                    	db %11111000
d5a9 : 80                    	db %10000000
d5aa : f0                    	db %11110000
d5ab : 08                    	db %00001000
d5ac : 08                    	db %00001000
d5ad : 88                    	db %10001000
d5ae : 70                    	db %01110000
d5af : 00                    	db %00000000
                             ; char 54
d5b0 : 30                    	db %00110000
d5b1 : 40                    	db %01000000
d5b2 : 80                    	db %10000000
d5b3 : f0                    	db %11110000
d5b4 : 88                    	db %10001000
d5b5 : 88                    	db %10001000
d5b6 : 70                    	db %01110000
d5b7 : 00                    	db %00000000
                             ; char 55
d5b8 : f8                    	db %11111000
d5b9 : 08                    	db %00001000
d5ba : 10                    	db %00010000
d5bb : 20                    	db %00100000
d5bc : 40                    	db %01000000
d5bd : 40                    	db %01000000
d5be : 40                    	db %01000000
d5bf : 00                    	db %00000000
                             ; char 56
d5c0 : 70                    	db %01110000
d5c1 : 88                    	db %10001000
d5c2 : 88                    	db %10001000
d5c3 : 70                    	db %01110000
d5c4 : 88                    	db %10001000
d5c5 : 88                    	db %10001000
AS65 Assembler for R6502 [1.42].                                     Page   88
-------------------------------- bank\bank0.s --------------------------------

d5c6 : 70                    	db %01110000
d5c7 : 00                    	db %00000000
                             ; char 57
d5c8 : 70                    	db %01110000
d5c9 : 88                    	db %10001000
d5ca : 88                    	db %10001000
d5cb : 78                    	db %01111000
d5cc : 08                    	db %00001000
d5cd : 10                    	db %00010000
d5ce : 60                    	db %01100000
d5cf : 00                    	db %00000000
                             ; char 58
d5d0 : 00                    	db %00000000
d5d1 : 00                    	db %00000000
d5d2 : 20                    	db %00100000
d5d3 : 00                    	db %00000000
d5d4 : 00                    	db %00000000
d5d5 : 20                    	db %00100000
d5d6 : 00                    	db %00000000
d5d7 : 00                    	db %00000000
                             ; char 59
d5d8 : 00                    	db %00000000
d5d9 : 00                    	db %00000000
d5da : 20                    	db %00100000
d5db : 00                    	db %00000000
d5dc : 00                    	db %00000000
d5dd : 20                    	db %00100000
d5de : 20                    	db %00100000
d5df : 40                    	db %01000000
                             ; char 60
d5e0 : 10                    	db %00010000
d5e1 : 20                    	db %00100000
d5e2 : 40                    	db %01000000
d5e3 : 80                    	db %10000000
d5e4 : 40                    	db %01000000
d5e5 : 20                    	db %00100000
d5e6 : 10                    	db %00010000
d5e7 : 00                    	db %00000000
                             ; char 61
d5e8 : 00                    	db %00000000
d5e9 : 00                    	db %00000000
d5ea : f8                    	db %11111000
d5eb : 00                    	db %00000000
d5ec : f8                    	db %11111000
d5ed : 00                    	db %00000000
d5ee : 00                    	db %00000000
d5ef : 00                    	db %00000000
                             ; char 62
d5f0 : 40                    	db %01000000
d5f1 : 20                    	db %00100000
d5f2 : 10                    	db %00010000
d5f3 : 08                    	db %00001000
d5f4 : 10                    	db %00010000
d5f5 : 20                    	db %00100000
d5f6 : 40                    	db %01000000
d5f7 : 00                    	db %00000000
                             ; char 63
d5f8 : 70                    	db %01110000
d5f9 : 88                    	db %10001000
d5fa : 10                    	db %00010000
d5fb : 20                    	db %00100000
d5fc : 20                    	db %00100000
AS65 Assembler for R6502 [1.42].                                     Page   89
-------------------------------- bank\bank0.s --------------------------------

d5fd : 00                    	db %00000000
d5fe : 20                    	db %00100000
d5ff : 00                    	db %00000000
                             ; char 64
d600 : 70                    	db %01110000
d601 : 88                    	db %10001000
d602 : a8                    	db %10101000
d603 : b8                    	db %10111000
d604 : b0                    	db %10110000
d605 : 80                    	db %10000000
d606 : 78                    	db %01111000
d607 : 00                    	db %00000000
d608 :                       vdp_font_a
                             ; char 65
d608 : 20                    	db %00100000
d609 : 50                    	db %01010000
d60a : 88                    	db %10001000
d60b : 88                    	db %10001000
d60c : f8                    	db %11111000
d60d : 88                    	db %10001000
d60e : 88                    	db %10001000
d60f : 00                    	db %00000000
                             ; char 66
d610 : f0                    	db %11110000
d611 : 88                    	db %10001000
d612 : 88                    	db %10001000
d613 : f0                    	db %11110000
d614 : 88                    	db %10001000
d615 : 88                    	db %10001000
d616 : f0                    	db %11110000
d617 : 00                    	db %00000000
                             ; char 67
d618 : 70                    	db %01110000
d619 : 88                    	db %10001000
d61a : 80                    	db %10000000
d61b : 80                    	db %10000000
d61c : 80                    	db %10000000
d61d : 88                    	db %10001000
d61e : 70                    	db %01110000
d61f : 00                    	db %00000000
                             ; char 68
d620 : f0                    	db %11110000
d621 : 88                    	db %10001000
d622 : 88                    	db %10001000
d623 : 88                    	db %10001000
d624 : 88                    	db %10001000
d625 : 88                    	db %10001000
d626 : f0                    	db %11110000
d627 : 00                    	db %00000000
                             ; char 69
d628 : f8                    	db %11111000
d629 : 80                    	db %10000000
d62a : 80                    	db %10000000
d62b : f0                    	db %11110000
d62c : 80                    	db %10000000
d62d : 80                    	db %10000000
d62e : f8                    	db %11111000
d62f : 00                    	db %00000000
                             ; char 70
d630 : f8                    	db %11111000
d631 : 80                    	db %10000000
d632 : 80                    	db %10000000
AS65 Assembler for R6502 [1.42].                                     Page   90
-------------------------------- bank\bank0.s --------------------------------

d633 : f0                    	db %11110000
d634 : 80                    	db %10000000
d635 : 80                    	db %10000000
d636 : 80                    	db %10000000
d637 : 00                    	db %00000000
                             ; char 71
d638 : 78                    	db %01111000
d639 : 80                    	db %10000000
d63a : 80                    	db %10000000
d63b : 80                    	db %10000000
d63c : 98                    	db %10011000
d63d : 88                    	db %10001000
d63e : 78                    	db %01111000
d63f : 00                    	db %00000000
                             ; char 72
d640 : 88                    	db %10001000
d641 : 88                    	db %10001000
d642 : 88                    	db %10001000
d643 : f8                    	db %11111000
d644 : 88                    	db %10001000
d645 : 88                    	db %10001000
d646 : 88                    	db %10001000
d647 : 00                    	db %00000000
                             ; char 73
d648 : 70                    	db %01110000
d649 : 20                    	db %00100000
d64a : 20                    	db %00100000
d64b : 20                    	db %00100000
d64c : 20                    	db %00100000
d64d : 20                    	db %00100000
d64e : 70                    	db %01110000
d64f : 00                    	db %00000000
                             ; char 74
d650 : 08                    	db %00001000
d651 : 08                    	db %00001000
d652 : 08                    	db %00001000
d653 : 08                    	db %00001000
d654 : 08                    	db %00001000
d655 : 88                    	db %10001000
d656 : 70                    	db %01110000
d657 : 00                    	db %00000000
                             ; char 75
d658 : 88                    	db %10001000
d659 : 90                    	db %10010000
d65a : a0                    	db %10100000
d65b : c0                    	db %11000000
d65c : a0                    	db %10100000
d65d : 90                    	db %10010000
d65e : 88                    	db %10001000
d65f : 00                    	db %00000000
                             ; char 76
d660 : 80                    	db %10000000
d661 : 80                    	db %10000000
d662 : 80                    	db %10000000
d663 : 80                    	db %10000000
d664 : 80                    	db %10000000
d665 : 80                    	db %10000000
d666 : f8                    	db %11111000
d667 : 00                    	db %00000000
                             ; char 77
d668 : 88                    	db %10001000
d669 : d8                    	db %11011000
AS65 Assembler for R6502 [1.42].                                     Page   91
-------------------------------- bank\bank0.s --------------------------------

d66a : a8                    	db %10101000
d66b : a8                    	db %10101000
d66c : 88                    	db %10001000
d66d : 88                    	db %10001000
d66e : 88                    	db %10001000
d66f : 00                    	db %00000000
                             ; char 78
d670 : 88                    	db %10001000
d671 : 88                    	db %10001000
d672 : c8                    	db %11001000
d673 : a8                    	db %10101000
d674 : 98                    	db %10011000
d675 : 88                    	db %10001000
d676 : 88                    	db %10001000
d677 : 00                    	db %00000000
                             ; char 79
d678 : 70                    	db %01110000
d679 : 88                    	db %10001000
d67a : 88                    	db %10001000
d67b : 88                    	db %10001000
d67c : 88                    	db %10001000
d67d : 88                    	db %10001000
d67e : 70                    	db %01110000
d67f : 00                    	db %00000000
                             ; char 80
d680 : f0                    	db %11110000
d681 : 88                    	db %10001000
d682 : 88                    	db %10001000
d683 : f0                    	db %11110000
d684 : 80                    	db %10000000
d685 : 80                    	db %10000000
d686 : 80                    	db %10000000
d687 : 00                    	db %00000000
                             ; char 81
d688 : 70                    	db %01110000
d689 : 88                    	db %10001000
d68a : 88                    	db %10001000
d68b : 88                    	db %10001000
d68c : a8                    	db %10101000
d68d : 90                    	db %10010000
d68e : 68                    	db %01101000
d68f : 00                    	db %00000000
                             ; char 82
d690 : f0                    	db %11110000
d691 : 88                    	db %10001000
d692 : 88                    	db %10001000
d693 : f0                    	db %11110000
d694 : a0                    	db %10100000
d695 : 90                    	db %10010000
d696 : 88                    	db %10001000
d697 : 00                    	db %00000000
                             ; char 83
d698 : 70                    	db %01110000
d699 : 88                    	db %10001000
d69a : 80                    	db %10000000
d69b : 70                    	db %01110000
d69c : 08                    	db %00001000
d69d : 88                    	db %10001000
d69e : 70                    	db %01110000
d69f : 00                    	db %00000000
                             ; char 84
d6a0 : f8                    	db %11111000
AS65 Assembler for R6502 [1.42].                                     Page   92
-------------------------------- bank\bank0.s --------------------------------

d6a1 : 20                    	db %00100000
d6a2 : 20                    	db %00100000
d6a3 : 20                    	db %00100000
d6a4 : 20                    	db %00100000
d6a5 : 20                    	db %00100000
d6a6 : 20                    	db %00100000
d6a7 : 00                    	db %00000000
                             ; char 85
d6a8 : 88                    	db %10001000
d6a9 : 88                    	db %10001000
d6aa : 88                    	db %10001000
d6ab : 88                    	db %10001000
d6ac : 88                    	db %10001000
d6ad : 88                    	db %10001000
d6ae : 70                    	db %01110000
d6af : 00                    	db %00000000
                             ; char 86
d6b0 : 88                    	db %10001000
d6b1 : 88                    	db %10001000
d6b2 : 88                    	db %10001000
d6b3 : 88                    	db %10001000
d6b4 : 88                    	db %10001000
d6b5 : 50                    	db %01010000
d6b6 : 20                    	db %00100000
d6b7 : 00                    	db %00000000
                             ; char 87
d6b8 : 88                    	db %10001000
d6b9 : 88                    	db %10001000
d6ba : 88                    	db %10001000
d6bb : a8                    	db %10101000
d6bc : a8                    	db %10101000
d6bd : d8                    	db %11011000
d6be : 88                    	db %10001000
d6bf : 00                    	db %00000000
                             ; char 88
d6c0 : 88                    	db %10001000
d6c1 : 88                    	db %10001000
d6c2 : 50                    	db %01010000
d6c3 : 20                    	db %00100000
d6c4 : 50                    	db %01010000
d6c5 : 88                    	db %10001000
d6c6 : 88                    	db %10001000
d6c7 : 00                    	db %00000000
                             ; char 89
d6c8 : 88                    	db %10001000
d6c9 : 88                    	db %10001000
d6ca : 50                    	db %01010000
d6cb : 20                    	db %00100000
d6cc : 20                    	db %00100000
d6cd : 20                    	db %00100000
d6ce : 20                    	db %00100000
d6cf : 00                    	db %00000000
                             ; char 90
d6d0 : f8                    	db %11111000
d6d1 : 08                    	db %00001000
d6d2 : 10                    	db %00010000
d6d3 : 20                    	db %00100000
d6d4 : 40                    	db %01000000
d6d5 : 80                    	db %10000000
d6d6 : f8                    	db %11111000
d6d7 : 00                    	db %00000000
                             ; char 91
AS65 Assembler for R6502 [1.42].                                     Page   93
-------------------------------- bank\bank0.s --------------------------------

d6d8 : 78                    	db %01111000
d6d9 : 40                    	db %01000000
d6da : 40                    	db %01000000
d6db : 40                    	db %01000000
d6dc : 40                    	db %01000000
d6dd : 40                    	db %01000000
d6de : 78                    	db %01111000
d6df : 00                    	db %00000000
                             ; char 92
d6e0 : 00                    	db %00000000
d6e1 : 80                    	db %10000000
d6e2 : 40                    	db %01000000
d6e3 : 20                    	db %00100000
d6e4 : 10                    	db %00010000
d6e5 : 08                    	db %00001000
d6e6 : 00                    	db %00000000
d6e7 : 00                    	db %00000000
                             ; char 93
d6e8 : f0                    	db %11110000
d6e9 : 10                    	db %00010000
d6ea : 10                    	db %00010000
d6eb : 10                    	db %00010000
d6ec : 10                    	db %00010000
d6ed : 10                    	db %00010000
d6ee : f0                    	db %11110000
d6ef : 00                    	db %00000000
                             ; char 94
d6f0 : 20                    	db %00100000
d6f1 : 50                    	db %01010000
d6f2 : a8                    	db %10101000
d6f3 : 20                    	db %00100000
d6f4 : 20                    	db %00100000
d6f5 : 20                    	db %00100000
d6f6 : 20                    	db %00100000
d6f7 : 00                    	db %00000000
                             ; char 95
d6f8 : 00                    	db %00000000
d6f9 : 00                    	db %00000000
d6fa : 00                    	db %00000000
d6fb : 00                    	db %00000000
d6fc : 00                    	db %00000000
d6fd : 00                    	db %00000000
d6fe : f8                    	db %11111000
d6ff : 00                    	db %00000000
                             ; char 96
d700 : 38                    	db %00111000
d701 : 40                    	db %01000000
d702 : 40                    	db %01000000
d703 : 40                    	db %01000000
d704 : f0                    	db %11110000
d705 : 40                    	db %01000000
d706 : f8                    	db %11111000
d707 : 00                    	db %00000000
                             ; char 97
d708 : 00                    	db %00000000
d709 : 00                    	db %00000000
d70a : 70                    	db %01110000
d70b : 08                    	db %00001000
d70c : 78                    	db %01111000
d70d : 88                    	db %10001000
d70e : 78                    	db %01111000
d70f : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   94
-------------------------------- bank\bank0.s --------------------------------

                             ; char 98
d710 : 80                    	db %10000000
d711 : 80                    	db %10000000
d712 : f0                    	db %11110000
d713 : 88                    	db %10001000
d714 : 88                    	db %10001000
d715 : 88                    	db %10001000
d716 : f0                    	db %11110000
d717 : 00                    	db %00000000
                             ; char 99
d718 : 00                    	db %00000000
d719 : 00                    	db %00000000
d71a : 78                    	db %01111000
d71b : 80                    	db %10000000
d71c : 80                    	db %10000000
d71d : 80                    	db %10000000
d71e : 78                    	db %01111000
d71f : 00                    	db %00000000
                             ; char 100
d720 : 08                    	db %00001000
d721 : 08                    	db %00001000
d722 : 78                    	db %01111000
d723 : 88                    	db %10001000
d724 : 88                    	db %10001000
d725 : 88                    	db %10001000
d726 : 78                    	db %01111000
d727 : 00                    	db %00000000
                             ; char 101
d728 : 00                    	db %00000000
d729 : 00                    	db %00000000
d72a : 70                    	db %01110000
d72b : 88                    	db %10001000
d72c : f8                    	db %11111000
d72d : 80                    	db %10000000
d72e : 78                    	db %01111000
d72f : 00                    	db %00000000
                             ; char 102
d730 : 30                    	db %00110000
d731 : 48                    	db %01001000
d732 : 40                    	db %01000000
d733 : f0                    	db %11110000
d734 : 40                    	db %01000000
d735 : 40                    	db %01000000
d736 : 40                    	db %01000000
d737 : 00                    	db %00000000
                             ; char 103
d738 : 00                    	db %00000000
d739 : 00                    	db %00000000
d73a : 70                    	db %01110000
d73b : 88                    	db %10001000
d73c : 88                    	db %10001000
d73d : 78                    	db %01111000
d73e : 08                    	db %00001000
d73f : 70                    	db %01110000
                             ; char 104
d740 : 80                    	db %10000000
d741 : 80                    	db %10000000
d742 : f0                    	db %11110000
d743 : 88                    	db %10001000
d744 : 88                    	db %10001000
d745 : 88                    	db %10001000
d746 : 88                    	db %10001000
AS65 Assembler for R6502 [1.42].                                     Page   95
-------------------------------- bank\bank0.s --------------------------------

d747 : 00                    	db %00000000
                             ; char 105
d748 : 20                    	db %00100000
d749 : 00                    	db %00000000
d74a : 60                    	db %01100000
d74b : 20                    	db %00100000
d74c : 20                    	db %00100000
d74d : 20                    	db %00100000
d74e : 70                    	db %01110000
d74f : 00                    	db %00000000
                             ; char 106
d750 : 10                    	db %00010000
d751 : 00                    	db %00000000
d752 : 30                    	db %00110000
d753 : 10                    	db %00010000
d754 : 10                    	db %00010000
d755 : 10                    	db %00010000
d756 : 90                    	db %10010000
d757 : 60                    	db %01100000
                             ; char 107
d758 : 80                    	db %10000000
d759 : 80                    	db %10000000
d75a : 88                    	db %10001000
d75b : 90                    	db %10010000
d75c : e0                    	db %11100000
d75d : 90                    	db %10010000
d75e : 88                    	db %10001000
d75f : 00                    	db %00000000
                             ; char 108
d760 : 60                    	db %01100000
d761 : 20                    	db %00100000
d762 : 20                    	db %00100000
d763 : 20                    	db %00100000
d764 : 20                    	db %00100000
d765 : 20                    	db %00100000
d766 : 70                    	db %01110000
d767 : 00                    	db %00000000
                             ; char 109
d768 : 00                    	db %00000000
d769 : 00                    	db %00000000
d76a : d8                    	db %11011000
d76b : a8                    	db %10101000
d76c : a8                    	db %10101000
d76d : a8                    	db %10101000
d76e : 88                    	db %10001000
d76f : 00                    	db %00000000
                             ; char 110
d770 : 00                    	db %00000000
d771 : 00                    	db %00000000
d772 : f0                    	db %11110000
d773 : 88                    	db %10001000
d774 : 88                    	db %10001000
d775 : 88                    	db %10001000
d776 : 88                    	db %10001000
d777 : 00                    	db %00000000
                             ; char 111
d778 : 00                    	db %00000000
d779 : 00                    	db %00000000
d77a : 70                    	db %01110000
d77b : 88                    	db %10001000
d77c : 88                    	db %10001000
d77d : 88                    	db %10001000
AS65 Assembler for R6502 [1.42].                                     Page   96
-------------------------------- bank\bank0.s --------------------------------

d77e : 70                    	db %01110000
d77f : 00                    	db %00000000
                             ; char 112
d780 : 00                    	db %00000000
d781 : 00                    	db %00000000
d782 : f0                    	db %11110000
d783 : 88                    	db %10001000
d784 : 88                    	db %10001000
d785 : f0                    	db %11110000
d786 : 80                    	db %10000000
d787 : 80                    	db %10000000
                             ; char 113
d788 : 00                    	db %00000000
d789 : 00                    	db %00000000
d78a : 78                    	db %01111000
d78b : 88                    	db %10001000
d78c : 88                    	db %10001000
d78d : 78                    	db %01111000
d78e : 08                    	db %00001000
d78f : 08                    	db %00001000
                             ; char 114
d790 : 00                    	db %00000000
d791 : 00                    	db %00000000
d792 : b8                    	db %10111000
d793 : c0                    	db %11000000
d794 : 80                    	db %10000000
d795 : 80                    	db %10000000
d796 : 80                    	db %10000000
d797 : 00                    	db %00000000
                             ; char 115
d798 : 00                    	db %00000000
d799 : 00                    	db %00000000
d79a : 78                    	db %01111000
d79b : 80                    	db %10000000
d79c : 70                    	db %01110000
d79d : 08                    	db %00001000
d79e : f0                    	db %11110000
d79f : 00                    	db %00000000
                             ; char 116
d7a0 : 40                    	db %01000000
d7a1 : 40                    	db %01000000
d7a2 : f0                    	db %11110000
d7a3 : 40                    	db %01000000
d7a4 : 40                    	db %01000000
d7a5 : 48                    	db %01001000
d7a6 : 30                    	db %00110000
d7a7 : 00                    	db %00000000
                             ; char 117
d7a8 : 00                    	db %00000000
d7a9 : 00                    	db %00000000
d7aa : 88                    	db %10001000
d7ab : 88                    	db %10001000
d7ac : 88                    	db %10001000
d7ad : 98                    	db %10011000
d7ae : 68                    	db %01101000
d7af : 00                    	db %00000000
                             ; char 118
d7b0 : 00                    	db %00000000
d7b1 : 00                    	db %00000000
d7b2 : 88                    	db %10001000
d7b3 : 88                    	db %10001000
d7b4 : 88                    	db %10001000
AS65 Assembler for R6502 [1.42].                                     Page   97
-------------------------------- bank\bank0.s --------------------------------

d7b5 : 50                    	db %01010000
d7b6 : 20                    	db %00100000
d7b7 : 00                    	db %00000000
                             ; char 119
d7b8 : 00                    	db %00000000
d7b9 : 00                    	db %00000000
d7ba : 88                    	db %10001000
d7bb : 88                    	db %10001000
d7bc : a8                    	db %10101000
d7bd : a8                    	db %10101000
d7be : d8                    	db %11011000
d7bf : 00                    	db %00000000
                             ; char 120
d7c0 : 00                    	db %00000000
d7c1 : 00                    	db %00000000
d7c2 : 88                    	db %10001000
d7c3 : 50                    	db %01010000
d7c4 : 20                    	db %00100000
d7c5 : 50                    	db %01010000
d7c6 : 88                    	db %10001000
d7c7 : 00                    	db %00000000
                             ; char 121
d7c8 : 00                    	db %00000000
d7c9 : 00                    	db %00000000
d7ca : 88                    	db %10001000
d7cb : 88                    	db %10001000
d7cc : 88                    	db %10001000
d7cd : 78                    	db %01111000
d7ce : 08                    	db %00001000
d7cf : 70                    	db %01110000
                             ; char 122
d7d0 : 00                    	db %00000000
d7d1 : 00                    	db %00000000
d7d2 : f8                    	db %11111000
d7d3 : 10                    	db %00010000
d7d4 : 20                    	db %00100000
d7d5 : 40                    	db %01000000
d7d6 : f8                    	db %11111000
d7d7 : 00                    	db %00000000
                             ; char 123
d7d8 : 38                    	db %00111000
d7d9 : 60                    	db %01100000
d7da : 60                    	db %01100000
d7db : c0                    	db %11000000
d7dc : 60                    	db %01100000
d7dd : 60                    	db %01100000
d7de : 38                    	db %00111000
d7df : 00                    	db %00000000
                             ; char 124
d7e0 : 20                    	db %00100000
d7e1 : 20                    	db %00100000
d7e2 : 20                    	db %00100000
d7e3 : 20                    	db %00100000
d7e4 : 20                    	db %00100000
d7e5 : 20                    	db %00100000
d7e6 : 20                    	db %00100000
d7e7 : 20                    	db %00100000
                             ; char 125
d7e8 : e0                    	db %11100000
d7e9 : 30                    	db %00110000
d7ea : 30                    	db %00110000
d7eb : 18                    	db %00011000
AS65 Assembler for R6502 [1.42].                                     Page   98
-------------------------------- bank\bank0.s --------------------------------

d7ec : 30                    	db %00110000
d7ed : 30                    	db %00110000
d7ee : e0                    	db %11100000
d7ef : 00                    	db %00000000
                             ; char 126
d7f0 : 00                    	db %00000000
d7f1 : 00                    	db %00000000
d7f2 : 40                    	db %01000000
d7f3 : a8                    	db %10101000
d7f4 : 10                    	db %00010000
d7f5 : 00                    	db %00000000
d7f6 : 00                    	db %00000000
d7f7 : 00                    	db %00000000
                             ; char 127
d7f8 : f8                    	db %11111000
d7f9 : f8                    	db %11111000
d7fa : f8                    	db %11111000
d7fb : f8                    	db %11111000
d7fc : f8                    	db %11111000
d7fd : f8                    	db %11111000
d7fe : f8                    	db %11111000
d7ff : 00                    	db %00000000
                             	
                             	
                             
                             
                             
                             ;****************************************
                             ;* vdp_init
                             ;* Initialise VDP
                             ;* Clears all of VRAM to zero
                             ;****************************************
d800 :                       vdp_init
d800 : 20e9d8           [ 6] 	jsr clear_vram
d803 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_init_mode
                             ;* Initialise VDP  to required mode and addresses
                             ;* Input : Y = Offset in to VDP init table
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d804 :                       vdp_init_mode
d804 : 78               [ 2] 	sei
d805 : be70d9           [ 4] 	ldx vdp_base_table+0,y		; Get delay
d808 : 8616             [ 3] 	stx vdp_delay
                             
d80a : a900             [ 2] 	lda	#0						; Do R0
d80c : be71d9           [ 4] 	ldx vdp_base_table+1,y		; Get R0 value
d80f : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
d812 : a901             [ 2] 	lda	#1						; Do R1
d814 : be72d9           [ 4] 	ldx vdp_base_table+2,y		; Get R1 value
d817 : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
d81a : be73d9           [ 4] 	ldx vdp_base_table+3,y		; Get name table low add
d81d : 8617             [ 3] 	stx vdp_base+vdp_addr_nme	; Save in vdp_base
d81f : be74d9           [ 4] 	ldx vdp_base_table+4,y		; Get name table high ad
d822 : 8618             [ 3] 	stx vdp_base+vdp_addr_nme+1	; Save in vdp_base
d824 : a902             [ 2] 	lda #2						; Do R2
d826 : be75d9           [ 4] 	ldx vdp_base_table+5,y		; Get R2 value
AS65 Assembler for R6502 [1.42].                                     Page   99
-------------------------------- bank\bank0.s --------------------------------

d829 : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
d82c : be76d9           [ 4] 	ldx vdp_base_table+6,y		; Get col table low addr
d82f : 8619             [ 3] 	stx vdp_base+vdp_addr_col	; Save in vdp_base
d831 : be77d9           [ 4] 	ldx vdp_base_table+7,y		; Get col table high add
d834 : 861a             [ 3] 	stx vdp_base+vdp_addr_col+1	; Save in vdp_base
d836 : a903             [ 2] 	lda #3						; Do R3
d838 : be78d9           [ 4] 	ldx vdp_base_table+8,y		; Get R3 value
d83b : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
d83e : be79d9           [ 4] 	ldx vdp_base_table+9,y		; Get pat table low addr
d841 : 861b             [ 3] 	stx vdp_base+vdp_addr_pat	; Save in vdp_base
d843 : be7ad9           [ 4] 	ldx vdp_base_table+10,y		; Get pat table high ad
d846 : 861c             [ 3] 	stx vdp_base+vdp_addr_pat+1	; Save in vdp_base
d848 : a904             [ 2] 	lda #4						; Do R4
d84a : be7bd9           [ 4] 	ldx vdp_base_table+11,y		; Get R4 value
d84d : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
d850 : be7cd9           [ 4] 	ldx vdp_base_table+12,y		; Get spr att table low
d853 : 861d             [ 3] 	stx vdp_base+vdp_addr_spa	; Save in vdp_base
d855 : be7dd9           [ 4] 	ldx vdp_base_table+13,y		; Get spr att table hig
d858 : 861e             [ 3] 	stx vdp_base+vdp_addr_spa+1	; Save in vdp_base
d85a : a905             [ 2] 	lda #5						; Do R5
d85c : be7ed9           [ 4] 	ldx vdp_base_table+14,y		; Get R5 value
d85f : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
d862 : be7fd9           [ 4] 	ldx vdp_base_table+15,y		; Get spr pat table low
d865 : 861f             [ 3] 	stx vdp_base+vdp_addr_spp	; Save in vdp_base
d867 : be80d9           [ 4] 	ldx vdp_base_table+16,y		; Get spr pat table hig
d86a : 8620             [ 3] 	stx vdp_base+vdp_addr_spp+1	; Save in vdp_base
d86c : a906             [ 2] 	lda #6						; Do R6
d86e : be81d9           [ 4] 	ldx vdp_base_table+17,y		; Get R6 value
d871 : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
d874 : a621             [ 3] 	ldx vdp_base+vdp_bord_col	; Get border colour
d876 : d005             [ 3] 	bne vdp_init_skip_table		; If not zero (i.e. NV 
d878 : be82d9           [ 4] 	ldx vdp_base_table+18,y		; Else get R7 value fro
d87b : 8621             [ 3] 	stx vdp_base+vdp_bord_col	; Save border colour t
d87d :                       vdp_init_skip_table
d87d : a907             [ 2] 	lda #7						; Do R7, X contains colour
d87f : 20d8c5           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             	
d882 : 58               [ 2] 	cli
                             
d883 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* vdp_set_txt_mode
                             ;* Set up text mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d884 :                       vdp_set_txt_mode
d884 : a039             [ 2] 	ldy #vdp_base_table_txt-vdp_base_table
d886 : 2004d8           [ 6] 	jsr vdp_init_mode
d889 : 4c2fd9           [ 3] 	jmp init_fonts
                             
                             	
                             ;****************************************
                             ;* vdp_set_g1_mode
AS65 Assembler for R6502 [1.42].                                     Page  100
-------------------------------- bank\bank0.s --------------------------------

                             ;* Set up G1 mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d88c :                       vdp_set_g1_mode
d88c : a000             [ 2] 	ldy #vdp_base_table_g1-vdp_base_table
d88e : 2004d8           [ 6] 	jsr vdp_init_mode
d891 : 4c2fd9           [ 3] 	jmp init_fonts
                             
                             ;****************************************
                             ;* vdp_set_g2_mode
                             ;* Set up G2 mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d894 :                       vdp_set_g2_mode
d894 : a013             [ 2] 	ldy #vdp_base_table_g2-vdp_base_table
d896 : 2004d8           [ 6] 	jsr vdp_init_mode
d899 : 4c2fd9           [ 3] 	jmp init_fonts
                             
                             ;****************************************
                             ;* vdp_set_hires
                             ;* Set up HI mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d89c :                       vdp_set_hires
d89c : a026             [ 2] 	ldy #vdp_base_table_hi-vdp_base_table
d89e : 2004d8           [ 6] 	jsr vdp_init_mode
                             	
                             	; No fonts to init but pre-fill name table
                             	; to use all 3 character sets
d8a1 : 78               [ 2] 	sei
                             
                             	; Point at name table
d8a2 : a617             [ 3] 	ldx vdp_base+vdp_addr_nme
d8a4 : a518             [ 3] 	lda vdp_base+vdp_addr_nme+1
d8a6 : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	
                             	; set name for 3 pages (768)
d8a9 : a200             [ 2] 	ldx #0
d8ab : a003             [ 2] 	ldy #3
d8ad :                       vdp_set_hires_fill_nme
d8ad : 8a               [ 2] 	txa						; Name table is 0..255 for 3 pages
d8ae : 200bc6           [ 6] 	jsr vdp_wr_vram
d8b1 : e8               [ 2] 	inx
d8b2 : d0f9             [ 3] 	bne vdp_set_hires_fill_nme
d8b4 : 88               [ 2] 	dey
d8b5 : d0f6             [ 3] 	bne vdp_set_hires_fill_nme
                             	
d8b7 : 58               [ 2] 	cli
                             	
d8b8 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_vdp_g1
                             ;* Initialise video processor graphics 1
                             ;* Input : None
AS65 Assembler for R6502 [1.42].                                     Page  101
-------------------------------- bank\bank0.s --------------------------------

                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
d8b9 :                       init_vdp_g1
d8b9 : 208cd8           [ 6] 	jsr vdp_set_g1_mode
d8bc : 203cd9           [ 6] 	jsr init_sprtpat_g1
d8bf : 20f6d8           [ 6] 	jsr init_colours_g1
d8c2 : 201cd9           [ 6] 	jsr init_sprites_g1
d8c5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_vdp_g2
                             ;* Initialise video processor graphics 2
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
d8c6 :                       init_vdp_g2
d8c6 : 2094d8           [ 6] 	jsr vdp_set_g2_mode
d8c9 : 203cd9           [ 6] 	jsr init_sprtpat_g1		; Same as G1
d8cc : 2009d9           [ 6] 	jsr init_colours_g2
d8cf : 201cd9           [ 6] 	jsr init_sprites_g1		; Same as G1
d8d2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_vdp_hires
                             ;* Initialise video processor graphics 1
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
d8d3 :                       init_vdp_hires
d8d3 : 209cd8           [ 6] 	jsr vdp_set_hires
d8d6 : 203cd9           [ 6] 	jsr init_sprtpat_g1
d8d9 : 4c1cd9           [ 3] 	jmp init_sprites_g1
                             
                             
                             ;****************************************
                             ;* init_vdp_txt
                             ;* Initialise video processor text mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
d8dc :                       init_vdp_txt
d8dc : 4c84d8           [ 3] 	jmp vdp_set_txt_mode
                             	
                             
                             ;****************************************
                             ;* fill_vram
                             ;* Fill a number of VRAM bytes with a value
                             ;* Input : X,Y = Fill length (lo,hi), A = Value
                             ;* Output : None
                             ;* Regs affected : All
                             ;* ASSUMES vdp_wr_vram already called
                             ;* Works for < 256 bytes as long as Y=1
                             ;* Else only use for WHOLE pages at a time so X m
                             ;* INTERRUPTS MUST HAVE BEEN DISABLED BY THE CALL
                             ;****************************************
d8df :                       vdp_fill_vram
d8df : 200bc6           [ 6] 	jsr vdp_wr_vram
d8e2 : ca               [ 2] 	dex
AS65 Assembler for R6502 [1.42].                                     Page  102
-------------------------------- bank\bank0.s --------------------------------

d8e3 : d0fa             [ 3] 	bne vdp_fill_vram
d8e5 : 88               [ 2] 	dey
d8e6 : d0f7             [ 3] 	bne vdp_fill_vram
d8e8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* clear_vram
                             ;* Set all 16k VDP vram to 0x00
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d8e9 :                       clear_vram
                             ;	sei
d8e9 : a200             [ 2] 	ldx #0x00			; Low byte of address
d8eb : a900             [ 2] 	lda #0x00			; High byte of address
d8ed : 20e5c5           [ 6] 	jsr vdp_wr_addr		; Write address to VDP
                             
d8f0 : a040             [ 2] 	ldy #0x40			; 0x40 pages = 16k (X already zero)
d8f2 : 20dfd8           [ 6] 	jsr vdp_fill_vram
                             ;	cli
d8f5 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* init_colours_g1
                             ;* Initialise colour table for graphics 1
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d8f6 :                       init_colours_g1
d8f6 : 78               [ 2] 	sei
d8f7 : a619             [ 3] 	ldx vdp_base+vdp_addr_col
d8f9 : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
d8fb : 20e5c5           [ 6] 	jsr vdp_wr_addr				; Set VDP address
                             	
d8fe : a220             [ 2] 	ldx #0x20					; 32 bytes to fill	
d900 : a001             [ 2] 	ldy #0x01					; Only 1 pass through
d902 : a521             [ 3] 	lda vdp_base+vdp_bord_col	; Border colour
d904 : 20dfd8           [ 6] 	jsr vdp_fill_vram
d907 : 58               [ 2] 	cli
d908 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_colours_g2
                             ;* Initialise colour table for graphics 2
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d909 :                       init_colours_g2
d909 : 78               [ 2] 	sei
d90a : a619             [ 3] 	ldx vdp_base+vdp_addr_col
d90c : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
d90e : 20e5c5           [ 6] 	jsr vdp_wr_addr				; Set VDP address
                             	
d911 : a200             [ 2] 	ldx #0x00					; 2048 bytes to fill	
d913 : a008             [ 2] 	ldy #0x08					; 8 pass through
d915 : a521             [ 3] 	lda vdp_base+vdp_bord_col	; Border colour
d917 : 20dfd8           [ 6] 	jsr vdp_fill_vram
d91a : 58               [ 2] 	cli
d91b : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  103
-------------------------------- bank\bank0.s --------------------------------

                             
                             ;****************************************
                             ;* init_sprites_g1
                             ;* Initialise sprite attribute table for graphics
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d91c :                       init_sprites_g1
d91c : 78               [ 2] 	sei
d91d : a61d             [ 3] 	ldx vdp_base+vdp_addr_spa
d91f : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
d921 : 20e5c5           [ 6] 	jsr vdp_wr_addr				; Set VDP address
                             	
d924 : a280             [ 2] 	ldx #0x80					; 128 bytes of attribute to fill
d926 : a001             [ 2] 	ldy #0x01					; Only 1 pass
d928 : a9d0             [ 2] 	lda #0xd0					; Sprite terminator
d92a : 20dfd8           [ 6] 	jsr vdp_fill_vram
d92d : 58               [ 2] 	cli
d92e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_fonts
                             ;* Initialise fonts 
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d92f :                       init_fonts
d92f : 78               [ 2] 	sei
d930 : a61b             [ 3] 	ldx vdp_base+vdp_addr_pat
d932 : a51c             [ 3] 	lda vdp_base+vdp_addr_pat+1
d934 : 20e5c5           [ 6] 	jsr vdp_wr_addr				; Write the address
d937 : 2049d9           [ 6] 	jsr init_fonts_sub
d93a : 58               [ 2] 	cli
d93b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_sprtpat_g1
                             ;* Initialise fonts for sprites
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d93c :                       init_sprtpat_g1
d93c : 78               [ 2] 	sei
d93d : a61f             [ 3] 	ldx vdp_base+vdp_addr_spp
d93f : a520             [ 3] 	lda vdp_base+vdp_addr_spp+1
d941 : 20e5c5           [ 6] 	jsr vdp_wr_addr				; Write the address
d944 : 2049d9           [ 6] 	jsr init_fonts_sub
d947 : 58               [ 2] 	cli
d948 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* init_fonts_sub
                             ;* Initialise fonts common subroutine
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;* INTERRUPTS MUST HAVE BEEN DISABLED BY CALLER!!
                             ;****************************************
d949 :                       init_fonts_sub
AS65 Assembler for R6502 [1.42].                                     Page  104
-------------------------------- bank\bank0.s --------------------------------

d949 : 6441             [ 3] 	stz tmp_a				; XOR with zero = no change
d94b : a000             [ 2] 	ldy #0					; byte within page
d94d :                       init_write_fonts
d94d : a900             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
d94f : 853f             [ 3] 	sta tmp_v1
d951 : a9d4             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
d953 : 8540             [ 3] 	sta tmp_v1+1
d955 : a204             [ 2] 	ldx #0x04				; 4 pages = 1024 bytes
d957 :                       init_pattern
d957 : 98               [ 2] 	tya
d958 : b13f             [ 5] 	lda (tmp_v1),y			; Get byte from font table
d95a : 4541             [ 3] 	eor tmp_a				; Invert if tmp_a is 0xff
d95c : 200bc6           [ 6] 	jsr vdp_wr_vram			; Write the byte to VRAM
d95f : c8               [ 2] 	iny
d960 : d0f5             [ 3] 	bne init_pattern		; keep going for 1 page
d962 : e640             [ 5] 	inc tmp_v1+1			; only need to increment high byt
d964 : ca               [ 2] 	dex						; page counter
d965 : d0f0             [ 3] 	bne init_pattern		; keep going for 4 pages
d967 : a541             [ 3] 	lda tmp_a				; get the current eor mask
d969 : 49ff             [ 2] 	eor	#0xff				; Invert the EOR mask
d96b : 8541             [ 3] 	sta tmp_a				; And save for next go around
d96d : d0de             [ 3] 	bne init_write_fonts
d96f : 60               [ 6] 	rts
                             
                             ;**** BASE TABLES ****
d970 :                       vdp_base_table
d970 :                       vdp_base_table_g1
d970 : 02                    	db	VDP_LONGDELAY	; Long delay
d971 : 00                    	db	%00000000		; R0 - No-extvid
d972 : e0                    	db	%11100000		; R1 - 16K,Disp-enable,Int-enable,
d973 : 0010                  	dw	0x1000			; Name table address
d975 : 04                    	db	0x1000>>10		; R2 Name table value
d976 : 8013                  	dw	0x1380			; Colour table
d978 : 4e                    	db	0x1380>>6		; R3 Colour table value
d979 : 0000                  	dw	0x0000			; Pattern table
d97b : 00                    	db	0x0000>>11		; R4 Pattern table value
d97c : 0013                  	dw	0x1300			; Sprite attribute table
d97e : 26                    	db	0x1300>>7		; R5 Sprite attribute table value
d97f : 0008                  	dw	0x0800			; Sprite pattern table
d981 : 01                    	db	0x0800>>11		; R6 Sprite pattern table value
d982 : f4                    	db	0xf4			; R7 White f/gnd, blue background
                             
d983 :                       vdp_base_table_g2
d983 : 02                    	db	VDP_LONGDELAY	; Long delay
d984 : 02                    	db	%00000010		; R0 - GR2HiRes,No-extvid
d985 : e0                    	db	%11100000		; R1 - 16K,Disp-enable,Int-enable,
d986 : 0038                  	dw	0x3800			; Name table address
d988 : 0e                    	db	0x3800>>10		; R2 Name table value
d989 : 0020                  	dw	0x2000			; Colour table
d98b : 9f                    	db	0x9f			; R3 Colour table magic value 0x9f
d98c : 0000                  	dw	0x0000			; Pattern table
d98e : 00                    	db	0x0000>>11		; R4 Pattern table value
d98f : 003b                  	dw	0x3b00			; Sprite attribute table
d991 : 76                    	db	0x3b00>>7		; R5 Sprite attribute table value
d992 : 0018                  	dw	0x1800			; Sprite pattern table
d994 : 03                    	db	0x1800>>11		; R6 Sprite pattern table value
d995 : fc                    	db	0xfc			; R7 White f/gnd, green background
                             
d996 :                       vdp_base_table_hi
d996 : 02                    	db	VDP_LONGDELAY	; Long delay
d997 : 02                    	db	%00000010		; R0 - GR2HiRes,No-extvid
d998 : e0                    	db	%11100000		; R1 - 16K,Disp-enable,Int-enable,
AS65 Assembler for R6502 [1.42].                                     Page  105
-------------------------------- bank\bank0.s --------------------------------

d999 : 0038                  	dw	0x3800			; Name table
d99b : 0e                    	db	0x3800>>10		; R2 Name table value
d99c : 0020                  	dw	0x2000			; Colour table
d99e : ff                    	db	0xff			; R3 Colour table value - always 0xff
d99f : 0000                  	dw	0x0000			; Pattern table
d9a1 : 03                    	db	0x03			; R4 Pattern table value - always 0x03
d9a2 : 003b                  	dw	0x3b00			; Sprite attribute table
d9a4 : 76                    	db	0x3b00>>7		; R5 Sprite attribute table value
d9a5 : 0018                  	dw	0x1800			; Sprite pattern table
d9a7 : 03                    	db	0x1800>>11		; R6 Sprite pattern table value
d9a8 : f1                    	db	0xf1			; R7 White f/gnd, black background
                             
d9a9 :                       vdp_base_table_txt
d9a9 : 01                    	db	VDP_SHORTDELAY	; Short delay
d9aa : 00                    	db	%00000000		; R0 - No-extvid
d9ab : f0                    	db	%11110000		; R1 - 16K,Disp-enable,Int-enable,
d9ac : 0008                  	dw	0x0800			; Name table
d9ae : 02                    	db	0x0800>>10		; R2 Name table value
d9af : 0000                  	dw	0				; Colour table NA
d9b1 : 00                    	db	0				; R3 Colour table value
d9b2 : 0000                  	dw	0x0000			; Pattern table
d9b4 : 00                    	db	0x0000>>11		; R4 Pattern table value
d9b5 : 0000                  	dw	0				; Sprite attribute table NA
d9b7 : 00                    	db	0				; R5 Sprite attribute table value
d9b8 : 0000                  	dw	0				; Sprite pattern table NA
d9ba : 00                    	db	0				; R6 Sprite pattern table value
d9bb : fd                    	db	0xfd			; R7 White f/gnd, magenta background
                             
d9bc :                       mod_sz_vdp_e
                             
                             	include "vdp\graph.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.  On startup, the BBC DIP settings d
                             ;*  whether the computer will go in to 32 or 40 c
                             ;*  screen mode.  The kernel code calls the right
                             ;*  initialisation code.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d9bc :                       mod_sz_graph_s
                             
                             ;****************************************
                             ;* gr_init_screen_common
                             ;* Common screen initialisation code
AS65 Assembler for R6502 [1.42].                                     Page  106
-------------------------------- bank\bank0.s --------------------------------

                             ;* A = Blank character
                             ;****************************************
d9bc :                       gr_init_screen_common
                             	; Store blank char
d9bc : 8515             [ 3] 	sta vdp_blank
                             	; Save value for cursor
d9be : 8514             [ 3] 	sta vdp_curval
                             	
                             	; VRAM address of screen data
d9c0 : a517             [ 3] 	lda vdp_base+vdp_addr_nme
d9c2 : 8523             [ 3] 	sta gr_scrngeom+gr_screen_start
d9c4 : a518             [ 3] 	lda vdp_base+vdp_addr_nme+1
d9c6 : 8524             [ 3] 	sta gr_scrngeom+gr_screen_start+1
                             
                             	; Top left cursor position 0,0
d9c8 : a200             [ 2] 	ldx #0
d9ca : 862a             [ 3] 	stx gr_scrngeom+gr_cur_x
d9cc : a000             [ 2] 	ldy #0
d9ce : 842b             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Clear screen
d9d0 : 206cda           [ 6] 	jsr gr_cls
                             
                             	; Cursor pointer in to screen
d9d3 : 20fada           [ 6] 	jsr gr_set_cur	
                             	
d9d6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_screen_32 g1 if A=1 else g2 if A=2
                             ;* initialise the screen in graphic mode 1/2
                             ;****************************************
d9d7 :                       gr_init_screen_32
d9d7 : c901             [ 2] 	cmp #1
d9d9 : d005             [ 3] 	bne gr_init_screen_skip_g1
d9db : 20b9d8           [ 6] 	jsr init_vdp_g1
d9de : 8003             [ 3] 	bra gr_init_screen_cont
                             
d9e0 :                       gr_init_screen_skip_g1
d9e0 : 20c6d8           [ 6] 	jsr init_vdp_g2
                             
d9e3 :                       gr_init_screen_cont	
                             	; Size of screen in bytes
d9e3 : a900             [ 2] 	lda #lo(768)					
d9e5 : 8525             [ 3] 	sta gr_scrngeom+gr_screen_size
d9e7 : a903             [ 2] 	lda #hi(768)	
d9e9 : 8526             [ 3] 	sta gr_scrngeom+gr_screen_size+1
                             
                             	; Width and height
d9eb : a920             [ 2] 	lda #32
d9ed : 8527             [ 3] 	sta gr_scrngeom+gr_screen_w
d9ef : a918             [ 2] 	lda #24
d9f1 : 8528             [ 3] 	sta gr_scrngeom+gr_screen_h
d9f3 : 6429             [ 3] 	stz gr_scrngeom+gr_cur_off		; No cursor offset
                             
d9f5 : a920             [ 2] 	lda #' '						; Blank is SPACE
d9f7 : 20bcd9           [ 6] 	jsr gr_init_screen_common
d9fa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
AS65 Assembler for R6502 [1.42].                                     Page  107
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
d9fb :                       gr_init_screen_txt
d9fb : 20dcd8           [ 6] 	jsr init_vdp_txt
                             
                             	; Size of screen in bytes
d9fe : a9c0             [ 2] 	lda #lo(960)					
da00 : 8525             [ 3] 	sta gr_scrngeom+gr_screen_size
da02 : a903             [ 2] 	lda #hi(960)	
da04 : 8526             [ 3] 	sta gr_scrngeom+gr_screen_size+1
                             
                             	; Width and height
da06 : a928             [ 2] 	lda #40
da08 : 8527             [ 3] 	sta gr_scrngeom+gr_screen_w
da0a : a918             [ 2] 	lda #24
da0c : 8528             [ 3] 	sta gr_scrngeom+gr_screen_h
da0e : 6429             [ 3] 	stz gr_scrngeom+gr_cur_off		; No cursor offset
                             
da10 : a920             [ 2] 	lda #' '						; Blank is SPACE
da12 : 20bcd9           [ 6] 	jsr gr_init_screen_common
                             
da15 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : A = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
da16 :                       gr_init_hires
da16 : 8530             [ 3] 	sta gr_scrngeom+gr_pixcol		; Save pixel colour
                             
da18 : e612             [ 5] 	inc vdp_curoff					; Switch cursor off
                             	
da1a : 20d3d8           [ 6] 	jsr init_vdp_hires
                             
                             	; Size of screen in bytes
da1d : a900             [ 2] 	lda #lo(6144)					
da1f : 8525             [ 3] 	sta gr_scrngeom+gr_screen_size
da21 : a918             [ 2] 	lda #hi(6144)	
da23 : 8526             [ 3] 	sta gr_scrngeom+gr_screen_size+1
                             
                             	; Width and height
da25 : a920             [ 2] 	lda #32
da27 : 8527             [ 3] 	sta gr_scrngeom+gr_screen_w
da29 : a9c0             [ 2] 	lda #192
da2b : 8528             [ 3] 	sta gr_scrngeom+gr_screen_h
da2d : a907             [ 2] 	lda #7
da2f : 8529             [ 3] 	sta gr_scrngeom+gr_cur_off		; Cursor on bottom r
                             
                             	; default pixel mode and mask
da31 : a901             [ 2] 	lda #1
da33 : 852e             [ 3] 	sta gr_scrngeom+gr_pixmode
da35 : a9ff             [ 2] 	lda #255
da37 : 852f             [ 3] 	sta gr_scrngeom+gr_pixmask
                             	
da39 : 78               [ 2] 	sei
                             	; point to colour table
da3a : a619             [ 3] 	ldx vdp_base+vdp_addr_col
da3c : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
da3e : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	; set colour for 0x18 pages (6144) bytes
da41 : a530             [ 3] 	lda gr_scrngeom+gr_pixcol		; Get the colour valu
da43 : a200             [ 2] 	ldx #0							; And fill 18 pages
AS65 Assembler for R6502 [1.42].                                     Page  108
-------------------------------- bank\bank0.s --------------------------------

da45 : a018             [ 2] 	ldy #0x18						
da47 : 20dfd8           [ 6] 	jsr vdp_fill_vram
                             
da4a : 58               [ 2] 	cli
                             	
                             	; Now point screen at pattern for HIRES
da4b : a51b             [ 3] 	lda vdp_base+vdp_addr_pat
da4d : 8517             [ 3] 	sta vdp_base+vdp_addr_nme
da4f : a51c             [ 3] 	lda vdp_base+vdp_addr_pat+1
da51 : 8518             [ 3] 	sta vdp_base+vdp_addr_nme+1
                             	
da53 : a900             [ 2] 	lda #0							; Blank is ZERO
da55 : 20bcd9           [ 6] 	jsr gr_init_screen_common
                             	
                             
da58 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_screen
                             ;* A = Mode (0,1,2,>=0x10 for hires)
                             ;* initialise the screen in text mode
                             ;****************************************
da59 :                       gr_init_screen
da59 : 8522             [ 3] 	sta vdp_base+vdp_gmode
da5b : c910             [ 2] 	cmp #0x10				; Hires mode?
da5d : b00a             [ 3] 	bcs gr_init_screen_hires
da5f : c900             [ 2] 	cmp #0
da61 : d003             [ 3] 	bne gr_init_skip_txt
da63 : 4cfbd9           [ 3] 	jmp gr_init_screen_txt
da66 :                       gr_init_skip_txt
da66 : 4cd7d9           [ 3] 	jmp gr_init_screen_32
da69 :                       gr_init_screen_hires
da69 : 4c16da           [ 3] 	jmp gr_init_hires
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the screen
                             ;****************************************
da6c :                       gr_cls
da6c : 48               [ 3] 	pha
da6d : da               [ 3] 	phx
da6e : 5a               [ 3] 	phy
                             
                             	; Set VDP Address
da6f : 78               [ 2] 	sei
da70 : a623             [ 3] 	ldx gr_scrngeom+gr_screen_start
da72 : a524             [ 3] 	lda gr_scrngeom+gr_screen_start+1
da74 : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             
                             	; X and Y count bytes to fill
da77 : a200             [ 2] 	ldx #0
da79 : a000             [ 2] 	ldy #0
da7b : a515             [ 3] 	lda vdp_blank
da7d :                       gr_cls_loop
da7d : 200bc6           [ 6] 	jsr vdp_wr_vram
da80 : e8               [ 2] 	inx
da81 : d001             [ 3] 	bne gr_cls_skipy
da83 : c8               [ 2] 	iny
da84 :                       gr_cls_skipy
da84 : e425             [ 3] 	cpx gr_scrngeom+gr_screen_size
da86 : d0f5             [ 3] 	bne gr_cls_loop
da88 : c426             [ 3] 	cpy gr_scrngeom+gr_screen_size+1
AS65 Assembler for R6502 [1.42].                                     Page  109
-------------------------------- bank\bank0.s --------------------------------

da8a : d0f1             [ 3] 	bne gr_cls_loop
                             	
da8c : 58               [ 2] 	cli
                             	
da8d : 7a               [ 4] 	ply
da8e : fa               [ 4] 	plx
da8f : 68               [ 4] 	pla
                             	
da90 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* gr_getXY_ptr
                             ;* Get VRAM address of screen from X,Y
                             ;* Input : X, Y = coords
                             ;* Output : X,Y = low and high VRAM address
                             ;* Regs affected : A
                             ;****************************************
da91 :                       gr_getXY_ptr
                             	; 32 or 40 columns table selection
da91 : a527             [ 3] 	lda gr_scrngeom+gr_screen_w
da93 : c928             [ 2] 	cmp #40
da95 : d011             [ 3] 	bne gr_set_skip_40
                             
da97 : 18               [ 2] 	clc
da98 : b9e0df           [ 4] 	lda gr_offset_40lo, y
da9b : 6523             [ 3] 	adc gr_scrngeom+gr_screen_start
da9d : 8531             [ 3] 	sta gr_scrngeom+gr_geom_tmp
da9f : b9f8df           [ 4] 	lda gr_offset_40hi, y
daa2 : 6524             [ 3] 	adc gr_scrngeom+gr_screen_start+1
daa4 : 8532             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
daa6 : 8013             [ 3] 	bra gr_add_x_offset
                             
daa8 :                       gr_set_skip_40
                             	; 32 byte width window - but what if hi-res (bec
daa8 : a529             [ 3] 	lda gr_scrngeom+gr_cur_off
daaa : d01a             [ 3] 	bne gr_calc_hires_ptr
daac : 18               [ 2] 	clc
daad : b910e0           [ 4] 	lda gr_offset_32lo, y
dab0 : 6523             [ 3] 	adc gr_scrngeom+gr_screen_start
dab2 : 8531             [ 3] 	sta gr_scrngeom+gr_geom_tmp
dab4 : b928e0           [ 4] 	lda gr_offset_32hi, y
dab7 : 6524             [ 3] 	adc gr_scrngeom+gr_screen_start+1
dab9 : 8532             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
dabb :                       gr_add_x_offset	
dabb : 18               [ 2] 	clc
dabc : 8a               [ 2] 	txa
dabd : 6531             [ 3] 	adc gr_scrngeom+gr_geom_tmp
dabf : aa               [ 2] 	tax								; vram addr lo in X
dac0 : a532             [ 3] 	lda gr_scrngeom+gr_geom_tmp+1
dac2 : 6900             [ 2] 	adc #0
dac4 : a8               [ 2] 	tay								; vram addr hi in Y
dac5 : 60               [ 6] 	rts
                             	
dac6 :                       gr_calc_hires_ptr
                             	; Low byte = X&F8 | Y&07
dac6 : 8a               [ 2] 	txa
dac7 : 29f8             [ 2] 	and #0xf8
dac9 : 8531             [ 3] 	sta gr_scrngeom+gr_geom_tmp
dacb : 98               [ 2] 	tya
dacc : 2907             [ 2] 	and #0x07
dace : 0531             [ 3] 	ora gr_scrngeom+gr_geom_tmp
AS65 Assembler for R6502 [1.42].                                     Page  110
-------------------------------- bank\bank0.s --------------------------------

dad0 : aa               [ 2] 	tax			; Low address in X
                             	; High byte = Y>>3
dad1 : 98               [ 2] 	tya
dad2 : 4a               [ 2] 	lsr a
dad3 : 4a               [ 2] 	lsr a
dad4 : 4a               [ 2] 	lsr a
dad5 : a8               [ 2] 	tay			; High address in Y
dad6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input : X,Y = coord, A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dad7 :                       gr_plot
dad7 : 48               [ 3] 	pha					; Save byte to put
dad8 : 2091da           [ 6] 	jsr gr_getXY_ptr	; vram addr in x,y
dadb : 68               [ 4] 	pla					; Get byte to put
dadc : 2010c6           [ 6] 	jsr vdp_poke
dadf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dae0 :                       gr_put
dae0 : e612             [ 5] 	inc vdp_curoff		; Disable cusror
dae2 : 8514             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Load cursor address
dae4 : a62c             [ 3] 	ldx gr_scrngeom+gr_cur_ptr
dae6 : a42d             [ 3] 	ldy gr_scrngeom+gr_cur_ptr+1
dae8 : 2010c6           [ 6] 	jsr vdp_poke
                             	; Reset cursor
daeb : a901             [ 2] 	lda #1
daed : 8513             [ 3] 	sta vdp_curstat
daef : c612             [ 5] 	dec vdp_curoff		; Allow cursor flashing
daf1 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : X,Y = coord
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
daf2 :                       gr_get
daf2 : 2091da           [ 6] 	jsr gr_getXY_ptr	; vram addr in x,y
daf5 : 98               [ 2] 	tya					; hi needs to be in A for peek
daf6 : 201cc6           [ 6] 	jsr vdp_peek
daf9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page  111
-------------------------------- bank\bank0.s --------------------------------

                             ;* Regs affected : None
                             ;****************************************
dafa :                       gr_set_cur
dafa : e612             [ 5] 	inc vdp_curoff				; Disable cursor
                             	
                             	; Save new cursor position
dafc : 862a             [ 3] 	stx gr_scrngeom+gr_cur_x
dafe : 842b             [ 3] 	sty gr_scrngeom+gr_cur_y
                             	
                             	; First restore what is under the cursor
db00 : a514             [ 3] 	lda vdp_curval
db02 : 20e0da           [ 6] 	jsr gr_put
                             
                             	; Now calculate the new cursor vram address
db05 : a62a             [ 3] 	ldx gr_scrngeom+gr_cur_x
db07 : a42b             [ 3] 	ldy gr_scrngeom+gr_cur_y
db09 : 20f2da           [ 6] 	jsr gr_get					; X,Y=address,A=vram contents
db0c : 862c             [ 3] 	stx gr_scrngeom+gr_cur_ptr
db0e : 842d             [ 3] 	sty gr_scrngeom+gr_cur_ptr+1
db10 : 8514             [ 3] 	sta vdp_curval
                             
db12 : c612             [ 5] 	dec vdp_curoff
                             	
db14 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot a char to hires X,Y coordinates with char
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
db15 :                       gr_hchar
db15 : 8643             [ 3] 	stx tmp_b				; Save X coord
db17 : 8444             [ 3] 	sty tmp_b+1				; Save Y coord
                             	
                             	; Calculate font address of char code A in to tm
db19 : 853d             [ 3] 	sta tmp_c
db1b : 643e             [ 3] 	stz tmp_c+1
                             	; Multiply by 8
db1d : 063d             [ 5] 	asl tmp_c
db1f : 263e             [ 5] 	rol tmp_c+1
db21 : 063d             [ 5] 	asl tmp_c
db23 : 263e             [ 5] 	rol tmp_c+1
db25 : 063d             [ 5] 	asl tmp_c
db27 : 263e             [ 5] 	rol tmp_c+1
                             	; Add font ROM address
db29 : a900             [ 2] 	lda #lo(vdp_font)
db2b : 653d             [ 3] 	adc tmp_c
db2d : 853d             [ 3] 	sta tmp_c
db2f : a9d4             [ 2] 	lda #hi(vdp_font)
db31 : 653e             [ 3] 	adc tmp_c+1
db33 : 853e             [ 3] 	sta tmp_c+1
                             
                             	; Save 3LSB of x coord
db35 : 8a               [ 2] 	txa
db36 : 2907             [ 2] 	and #7
db38 : 8541             [ 3] 	sta tmp_a
                             	
                             	; Generate the shifted character for each line (
                             	; 16 bytes to store a 2x8 byte shifted image of 
AS65 Assembler for R6502 [1.42].                                     Page  112
-------------------------------- bank\bank0.s --------------------------------

db3a : a200             [ 2] 	ldx #0	
db3c :                       gr_hchar_shiftline
                             	; load up a line of font in to 16 bits, left jus
db3c : b23d             [ 5] 	lda (tmp_c)
db3e : e63d             [ 5] 	inc tmp_c
db40 : 748d             [ 4] 	stz ztmp_16+8,x
                             	; Get 3LSB of x coord in to Y = number of column
db42 : a441             [ 3] 	ldy tmp_a
db44 :                       gr_hchar_shiftcol
db44 : f006             [ 3] 	beq gr_hchar_shiftdone		; Branch on Y = 0
db46 : 4a               [ 2] 	lsr a
db47 : 768d             [ 6] 	ror ztmp_16+8,x
db49 : 88               [ 2] 	dey
db4a : 80f8             [ 3] 	bra gr_hchar_shiftcol
db4c :                       gr_hchar_shiftdone
db4c : 9585             [ 4] 	sta ztmp_16,x
db4e : e8               [ 2] 	inx
db4f : e008             [ 2] 	cpx #8						; Do 8 lines each 16 bits wide
db51 : d0e9             [ 3] 	bne gr_hchar_shiftline
                             
                             	; Ok we have a char image in dram ztmp_16, need 
                             
db53 : e612             [ 5] 	inc vdp_curoff				; Disable cursor
                             	
                             	; do 8 lines of left image
db55 : a200             [ 2] 	ldx #0
db57 :                       gr_hchar_getimage
db57 : da               [ 3] 	phx					; Save index
                             	; Get x,y coord and calc address in to tmp_v1
db58 : a643             [ 3] 	ldx tmp_b
db5a : a444             [ 3] 	ldy tmp_b+1
db5c : 2091da           [ 6] 	jsr gr_getXY_ptr
db5f : 863f             [ 3] 	stx tmp_v1
db61 : 8440             [ 3] 	sty tmp_v1+1
                             
                             	; high need to be in A for peek
db63 : 98               [ 2] 	tya
db64 : 201cc6           [ 6] 	jsr vdp_peek		; Get image byte from vram
db67 : 853d             [ 3] 	sta tmp_c			; Save in temp c
db69 : fa               [ 4] 	plx					; Restore index but don't lose it
db6a : da               [ 3] 	phx
db6b : b585             [ 4] 	lda ztmp_16,x		; Get cached image
db6d : a42e             [ 3] 	ldy gr_scrngeom+gr_pixmode		; Get the mode to pl
db6f : f008             [ 3] 	beq gr_hchar_getimage_plot		; If erase then blat
db71 : 453d             [ 3] 	eor tmp_c			; First assume EOR with vram
db73 : c002             [ 2] 	cpy #2				; Is that the mode
db75 : f002             [ 3] 	beq gr_hchar_getimage_plot
db77 : 053d             [ 3] 	ora tmp_c			; Else OR VRAM with Image
db79 :                       gr_hchar_getimage_plot
                             	; Get vram address from tmp_v1
db79 : a63f             [ 3] 	ldx tmp_v1
db7b : a440             [ 3] 	ldy tmp_v1+1
db7d : 2010c6           [ 6] 	jsr vdp_poke		; Put image on
                             
db80 : a42e             [ 3] 	ldy gr_scrngeom+gr_pixmode
db82 : c002             [ 2] 	cpy #2
db84 : f010             [ 3] 	beq gr_hchar_skipcol
                             	; if not xor mode put in the right colour
                             	; add the x,y offset in to the colour table
db86 : 18               [ 2] 	clc
db87 : a519             [ 3] 	lda vdp_base+vdp_addr_col
db89 : 653f             [ 3] 	adc tmp_v1
AS65 Assembler for R6502 [1.42].                                     Page  113
-------------------------------- bank\bank0.s --------------------------------

db8b : aa               [ 2] 	tax
db8c : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
db8e : 6540             [ 3] 	adc tmp_v1+1
db90 : a8               [ 2] 	tay
db91 : a530             [ 3] 	lda gr_scrngeom+gr_pixcol
db93 : 2010c6           [ 6] 	jsr vdp_poke
                             
db96 :                       gr_hchar_skipcol
db96 : e644             [ 5] 	inc tmp_b+1			; Update y coord
db98 : fa               [ 4] 	plx					; Restore index
db99 : e8               [ 2] 	inx
db9a : e008             [ 2] 	cpx #8				; Done all of left side?
db9c : f006             [ 3] 	beq gr_hchar_prepright
db9e : e010             [ 2] 	cpx #16				; We've done all of right side?
dba0 : f016             [ 3] 	beq gr_hchar_imagedone
dba2 : d0b3             [ 3] 	bne gr_hchar_getimage	; Else keep going // alway
dba4 :                       gr_hchar_prepright
                             	; Done left but prepare to do right
                             	; X=8 which is the right side of the image cache
dba4 : a541             [ 3] 	lda tmp_a			; Check if anything on the right
dba6 : f010             [ 3] 	beq gr_hchar_imagedone	; If not, then don't do i
dba8 : 38               [ 2] 	sec					; Re-adjust y coord back to top
dba9 : a544             [ 3] 	lda tmp_b+1
dbab : e908             [ 2] 	sbc #8
dbad : 8544             [ 3] 	sta tmp_b+1
dbaf : 18               [ 2] 	clc					; Move x coord across to RHS by adding 8
dbb0 : a543             [ 3] 	lda tmp_b
dbb2 : 6908             [ 2] 	adc #8
dbb4 : 8543             [ 3] 	sta tmp_b
dbb6 : 909f             [ 3] 	bcc gr_hchar_getimage	; Only do right if in boun
dbb8 :                       gr_hchar_imagedone
dbb8 : c612             [ 5] 	dec vdp_curoff				; Enable cursor
                             
dbba : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_point
                             ;* Write a point to the X,Y coordinates
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
dbbb :                       gr_point
                             	; Save A and X for later
dbbb : da               [ 3] 	phx
                             
                             	; Get hires address from X,Y coordinates
dbbc : 2091da           [ 6] 	jsr gr_getXY_ptr
dbbf : 863f             [ 3] 	stx tmp_v1
dbc1 : 8440             [ 3] 	sty tmp_v1+1
                             
                             	; A is hi byte for peek
dbc3 : 98               [ 2] 	tya
                             	
dbc4 : 201cc6           [ 6] 	jsr vdp_peek
                             	; Save in temp
dbc7 : 8543             [ 3] 	sta tmp_b
                             
                             	; Get X back and mask off 3 LSBs
dbc9 : 68               [ 4] 	pla
dbca : 2907             [ 2] 	and #0x07
                             	; Use this to find the bit number mask and save 
AS65 Assembler for R6502 [1.42].                                     Page  114
-------------------------------- bank\bank0.s --------------------------------

dbcc : aa               [ 2] 	tax
dbcd : bdfedb           [ 4] 	lda gr_point_mask,x
dbd0 : 8544             [ 3] 	sta tmp_b+1
                             	; Get the mode number in to X
dbd2 : a62e             [ 3] 	ldx gr_scrngeom+gr_pixmode
                             	; load VRAM byte
dbd4 : a543             [ 3] 	lda tmp_b
                             	; first assume that we want to set a bit - OR wi
dbd6 : 0544             [ 3] 	ora tmp_b+1
                             	; if that is correct then done
dbd8 : e001             [ 2] 	cpx #1
dbda : f00a             [ 3] 	beq gr_point_done
                             	; now assume that actually we want to erase but 
dbdc : 4544             [ 3] 	eor tmp_b+1
                             	; if that is correct then done
dbde : e000             [ 2] 	cpx #0
dbe0 : f004             [ 3] 	beq gr_point_done
                             	; else we want to really just do an eor of VRAM 
dbe2 : a543             [ 3] 	lda tmp_b
dbe4 : 4544             [ 3] 	eor tmp_b+1
                             	; so now we have the VRAM bit set properly in te
dbe6 :                       gr_point_done
dbe6 : a63f             [ 3] 	ldx tmp_v1
dbe8 : a440             [ 3] 	ldy tmp_v1+1
dbea : 2010c6           [ 6] 	jsr vdp_poke
                             
                             	; now put in the right colour
                             	; add the x,y offset in to the colour table
dbed : 18               [ 2] 	clc
dbee : a519             [ 3] 	lda vdp_base+vdp_addr_col
dbf0 : 653f             [ 3] 	adc tmp_v1
dbf2 : aa               [ 2] 	tax
dbf3 : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
dbf5 : 6540             [ 3] 	adc tmp_v1+1
dbf7 : a8               [ 2] 	tay
dbf8 : a530             [ 3] 	lda gr_scrngeom+gr_pixcol
dbfa : 2010c6           [ 6] 	jsr vdp_poke
                             
dbfd : 60               [ 6] 	rts
dbfe :                       gr_point_mask
dbfe : 8040201008040201      	db 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
                             
                             
                             ;****************************************
                             ;* gr_box
                             ;* Draw a box from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
dc06 :                       gr_box
dc06 : a585             [ 3] 	lda num_a					; If x0,x1 in same byte column
dc08 : 29f8             [ 2] 	and #0xf8					; then special handling
dc0a : 8543             [ 3] 	sta tmp_b
dc0c : a587             [ 3] 	lda num_a+2
dc0e : 29f8             [ 2] 	and #0xf8
dc10 : c543             [ 3] 	cmp tmp_b
dc12 : f05f             [ 3] 	beq gr_box_tiny_width
                             	; x0, x1 in different byte columns
AS65 Assembler for R6502 [1.42].                                     Page  115
-------------------------------- bank\bank0.s --------------------------------

dc14 : a585             [ 3] 	lda num_a					; Get lhs mask
dc16 : 2907             [ 2] 	and #7
dc18 : aa               [ 2] 	tax
dc19 : bd01dd           [ 4] 	lda gr_box_lmask,x
dc1c : 8543             [ 3] 	sta tmp_b
dc1e : a685             [ 3] 	ldx num_a					; Do top left
dc20 : a486             [ 3] 	ldy num_a+1
dc22 : 20cfdc           [ 6] 	jsr gr_box_plot
dc25 : a543             [ 3] 	lda tmp_b
dc27 : a685             [ 3] 	ldx num_a					; Do bottom left
dc29 : a488             [ 3] 	ldy num_a+3
dc2b : 20cfdc           [ 6] 	jsr gr_box_plot
dc2e : a587             [ 3] 	lda num_a+2					; Get rhs mask
dc30 : 2907             [ 2] 	and #7
dc32 : aa               [ 2] 	tax
dc33 : bd09dd           [ 4] 	lda gr_box_rmask,x
dc36 : 8543             [ 3] 	sta tmp_b
dc38 : a687             [ 3] 	ldx num_a+2					; Do top right
dc3a : a486             [ 3] 	ldy num_a+1
dc3c : 20cfdc           [ 6] 	jsr gr_box_plot
dc3f : a543             [ 3] 	lda tmp_b
dc41 : a687             [ 3] 	ldx num_a+2					; Do bottom right
dc43 : a488             [ 3] 	ldy num_a+3
dc45 : 20cfdc           [ 6] 	jsr gr_box_plot
                             	; Do fast horz lines if x0,x1
                             	; are in different byte columns
dc48 : a585             [ 3] 	lda num_a					; Byte align x0
dc4a : 29f8             [ 2] 	and #0xf8
dc4c : 8543             [ 3] 	sta tmp_b
dc4e : a587             [ 3] 	lda num_a+2					; Byte align x1
dc50 : 29f8             [ 2] 	and #0xf8
dc52 : 8544             [ 3] 	sta tmp_b+1
dc54 :                       gr_box_8line
dc54 : a544             [ 3] 	lda tmp_b+1					; Move left 1 column
dc56 : 38               [ 2] 	sec
dc57 : e908             [ 2] 	sbc #8
dc59 : 8544             [ 3] 	sta tmp_b+1
dc5b : c543             [ 3] 	cmp tmp_b
dc5d : f039             [ 3] 	beq gr_box_do_vert			; if columns same then done
dc5f : a644             [ 3] 	ldx tmp_b+1					; Do top from right to left
dc61 : a486             [ 3] 	ldy num_a+1
dc63 : a9ff             [ 2] 	lda #0xff
dc65 : 20cfdc           [ 6] 	jsr gr_box_plot
dc68 : a644             [ 3] 	ldx tmp_b+1					; Do top from right to left
dc6a : a488             [ 3] 	ldy num_a+3
dc6c : a9ff             [ 2] 	lda #0xff
dc6e : 20cfdc           [ 6] 	jsr gr_box_plot
dc71 : 80e1             [ 3] 	bra gr_box_8line			; Looping
dc73 :                       gr_box_tiny_width
dc73 : a585             [ 3] 	lda num_a
dc75 : 2907             [ 2] 	and #7
dc77 : 48               [ 3] 	pha
dc78 : a587             [ 3] 	lda num_a+2
dc7a : 2907             [ 2] 	and #7
dc7c : aa               [ 2] 	tax
dc7d : bd09dd           [ 4] 	lda gr_box_rmask,x			; Get rhs mask
dc80 : fa               [ 4] 	plx
dc81 : 3d01dd           [ 4] 	and gr_box_lmask,x			; AND with lhs mask
dc84 : 8543             [ 3] 	sta tmp_b					; This is the intra column mask
dc86 : a685             [ 3] 	ldx num_a					; Plot top
dc88 : a486             [ 3] 	ldy num_a+1
dc8a : 20cfdc           [ 6] 	jsr gr_box_plot
AS65 Assembler for R6502 [1.42].                                     Page  116
-------------------------------- bank\bank0.s --------------------------------

dc8d : a687             [ 3] 	ldx num_a+2					; Plot bottom
dc8f : a488             [ 3] 	ldy num_a+3
dc91 : c486             [ 3] 	cpy num_a+1					; but only if different from top
dc93 : f039             [ 3] 	beq gr_box_done				; if top=bottom then finished
dc95 : 20cfdc           [ 6] 	jsr gr_box_plot
dc98 :                       gr_box_do_vert
                             	; Do the vertical sides of the box
dc98 : a585             [ 3] 	lda num_a					; Find bit position of x0 (left)
dc9a : 2907             [ 2] 	and #7
dc9c : aa               [ 2] 	tax							; And get value to write
dc9d : bdfedb           [ 4] 	lda gr_point_mask,x
dca0 : 8543             [ 3] 	sta tmp_b
                             	
dca2 : a587             [ 3] 	lda num_a+2					; Find bit position of x1 (right
dca4 : 2907             [ 2] 	and #7
dca6 : aa               [ 2] 	tax							; And get value to write
dca7 : bdfedb           [ 4] 	lda gr_point_mask,x
dcaa : 8544             [ 3] 	sta tmp_b+1
                             
dcac : a486             [ 3] 	ldy num_a+1					; Get y0 coord and save
dcae : 8491             [ 3] 	sty num_tmp
dcb0 :                       gr_box_vert
dcb0 : e691             [ 5] 	inc num_tmp					; Increment y first
dcb2 : a491             [ 3] 	ldy num_tmp
dcb4 : c488             [ 3] 	cpy num_a+3					; if thisY>=y1 then done
dcb6 : b016             [ 3] 	bcs gr_box_vert_done
dcb8 : a685             [ 3] 	ldx num_a					; Do left side
dcba : a543             [ 3] 	lda tmp_b
dcbc : 20cfdc           [ 6] 	jsr gr_box_plot
dcbf : a687             [ 3] 	ldx num_a+2					; Do right line
dcc1 : e485             [ 3] 	cpx num_a					; Only if not same as lhs
dcc3 : f007             [ 3] 	beq gr_box_skip_rhs
dcc5 : a491             [ 3] 	ldy num_tmp
dcc7 : a544             [ 3] 	lda tmp_b+1
dcc9 : 20cfdc           [ 6] 	jsr gr_box_plot
dccc :                       gr_box_skip_rhs
dccc : 80e2             [ 3] 	bra gr_box_vert				; looping
dcce :                       gr_box_vert_done
dcce :                       gr_box_done
dcce : 60               [ 6] 	rts
                             
                             ; Box draw common draw routine
                             ; x,y is pixel coord
                             ; a is the value to write
dccf :                       gr_box_plot
dccf : 853d             [ 3] 	sta tmp_c					; Save mask to write
dcd1 : 8a               [ 2] 	txa
dcd2 : 98               [ 2] 	tya
dcd3 : 2091da           [ 6] 	jsr gr_getXY_ptr
dcd6 : da               [ 3] 	phx
dcd7 : 98               [ 2] 	tya							; A=high byte for peek
dcd8 : 201cc6           [ 6] 	jsr vdp_peek				; Get current screen byte
dcdb : 853e             [ 3] 	sta tmp_c+1
dcdd : a62e             [ 3] 	ldx gr_scrngeom+gr_pixmode	; Use screen mode
dcdf : 053d             [ 3] 	ora tmp_c					; Assume mode 1 (or)
dce1 : e001             [ 2] 	cpx #1						; Done if correct
dce3 : f00a             [ 3] 	beq gr_box_write
dce5 : 453d             [ 3] 	eor tmp_c					; Assume mode 0 (eor erases or)
dce7 : e000             [ 2] 	cpx #0						; Done if correct
dce9 : f004             [ 3] 	beq gr_box_write
dceb : a53e             [ 3] 	lda tmp_c+1					; Else eor with source
dced : 453d             [ 3] 	eor tmp_c
AS65 Assembler for R6502 [1.42].                                     Page  117
-------------------------------- bank\bank0.s --------------------------------

dcef :                       gr_box_write
dcef : fa               [ 4] 	plx							; Restore x, y is intact
dcf0 : 2010c6           [ 6] 	jsr vdp_poke				; Poke the value
dcf3 : 18               [ 2] 	clc							; Calculate the colour table offset
dcf4 : 8a               [ 2] 	txa							; Low byte
dcf5 : 6519             [ 3] 	adc vdp_base+vdp_addr_col
dcf7 : aa               [ 2] 	tax
dcf8 : 98               [ 2] 	tya							; High byte
dcf9 : 651a             [ 3] 	adc vdp_base+vdp_addr_col+1
dcfb : a8               [ 2] 	tay
dcfc : a530             [ 3] 	lda gr_scrngeom+gr_pixcol	; Colour
dcfe : 4c10c6           [ 3] 	jmp vdp_poke
                             
dd01 :                       gr_box_lmask
dd01 : ff7f3f1f0f070301      	db 0xff,0x7f,0x3f,0x1f,0x0f,0x07,0x03,0x01
dd09 :                       gr_box_rmask
dd09 : 80c0e0f0f8fcfeff      	db 0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0xfe,0xff
                             
                             	
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
dd11 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
0085 =                       grc_x0 	= (num_a)
0086 =                       grc_y0 	= (num_a+1)
0087 =                       grc_r 	= (num_a+2)
0088 =                       grc_x 	= (num_a+3)
008a =                       grc_y	= (num_b+1)
008b =                       grc_d	= (num_b+2)
                             
                             	;x = radius
dd11 : a587             [ 3] 	lda grc_r
dd13 : 8588             [ 3] 	sta grc_x
                             	;y = 0
dd15 : 648a             [ 3] 	stz grc_y
                             	;decision = 1 - x
dd17 : a901             [ 2] 	lda #1
dd19 : 38               [ 2] 	sec
dd1a : e588             [ 3] 	sbc grc_x
dd1c : 858b             [ 3] 	sta grc_d
dd1e :                       gr_circle_plot
                             	;while(x >= y)
dd1e : a588             [ 3] 	lda grc_x
dd20 : c58a             [ 3] 	cmp grc_y
dd22 : 9028             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
dd24 : 204ddd           [ 6] 	jsr gr_circle_points
                             	;y++
dd27 : e68a             [ 5] 	inc grc_y
                             	;if d<=0
dd29 : a58b             [ 3] 	lda grc_d
dd2b : f013             [ 3] 	beq gr_circle_d_lte0
dd2d : 3011             [ 3] 	bmi gr_circle_d_lte0
                             	;else
AS65 Assembler for R6502 [1.42].                                     Page  118
-------------------------------- bank\bank0.s --------------------------------

                             	;x--
dd2f : c688             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
dd31 : a58a             [ 3] 	lda grc_y
dd33 : 38               [ 2] 	sec
dd34 : e588             [ 3] 	sbc grc_x
dd36 : 0a               [ 2] 	asl a
dd37 : 18               [ 2] 	clc
dd38 : 6901             [ 2] 	adc #1
dd3a : 658b             [ 3] 	adc grc_d
dd3c : 858b             [ 3] 	sta grc_d
dd3e : 80de             [ 3] 	bra gr_circle_plot	
dd40 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
dd40 : a58a             [ 3] 	lda grc_y
dd42 : 0a               [ 2] 	asl a
dd43 : 18               [ 2] 	clc
dd44 : 6901             [ 2] 	adc #1
dd46 : 658b             [ 3] 	adc grc_d
dd48 : 858b             [ 3] 	sta grc_d
dd4a : 80d2             [ 3] 	bra gr_circle_plot	
dd4c :                       gr_circle_done
dd4c : 60               [ 6] 	rts
dd4d :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
dd4d : a588             [ 3] 	lda grc_x
dd4f : 18               [ 2] 	clc
dd50 : 6585             [ 3] 	adc grc_x0
dd52 : aa               [ 2] 	tax
dd53 : a58a             [ 3] 	lda grc_y
dd55 : 18               [ 2] 	clc
dd56 : 6586             [ 3] 	adc grc_y0
dd58 : a8               [ 2] 	tay
dd59 : 20bbdb           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
dd5c : a58a             [ 3] 	lda grc_y
dd5e : 18               [ 2] 	clc
dd5f : 6585             [ 3] 	adc grc_x0
dd61 : aa               [ 2] 	tax
dd62 : a588             [ 3] 	lda grc_x
dd64 : 18               [ 2] 	clc
dd65 : 6586             [ 3] 	adc grc_y0
dd67 : a8               [ 2] 	tay
dd68 : 20bbdb           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
dd6b : a585             [ 3] 	lda grc_x0
dd6d : 38               [ 2] 	sec
dd6e : e588             [ 3] 	sbc grc_x
dd70 : aa               [ 2] 	tax
dd71 : a58a             [ 3] 	lda grc_y
dd73 : 18               [ 2] 	clc
dd74 : 6586             [ 3] 	adc grc_y0
dd76 : a8               [ 2] 	tay
dd77 : 20bbdb           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
dd7a : a585             [ 3] 	lda grc_x0
dd7c : 38               [ 2] 	sec
dd7d : e58a             [ 3] 	sbc grc_y
dd7f : aa               [ 2] 	tax
dd80 : a588             [ 3] 	lda grc_x
AS65 Assembler for R6502 [1.42].                                     Page  119
-------------------------------- bank\bank0.s --------------------------------

dd82 : 18               [ 2] 	clc
dd83 : 6586             [ 3] 	adc grc_y0
dd85 : a8               [ 2] 	tay
dd86 : 20bbdb           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
dd89 : a585             [ 3] 	lda grc_x0
dd8b : 38               [ 2] 	sec
dd8c : e588             [ 3] 	sbc grc_x
dd8e : aa               [ 2] 	tax
dd8f : a586             [ 3] 	lda grc_y0
dd91 : 38               [ 2] 	sec
dd92 : e58a             [ 3] 	sbc grc_y
dd94 : a8               [ 2] 	tay
dd95 : 20bbdb           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
dd98 : a585             [ 3] 	lda grc_x0
dd9a : 38               [ 2] 	sec
dd9b : e58a             [ 3] 	sbc grc_y
dd9d : aa               [ 2] 	tax
dd9e : a586             [ 3] 	lda grc_y0
dda0 : 38               [ 2] 	sec
dda1 : e588             [ 3] 	sbc grc_x
dda3 : a8               [ 2] 	tay
dda4 : 20bbdb           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
dda7 : a588             [ 3] 	lda grc_x
dda9 : 18               [ 2] 	clc
ddaa : 6585             [ 3] 	adc grc_x0
ddac : aa               [ 2] 	tax
ddad : a586             [ 3] 	lda grc_y0
ddaf : 38               [ 2] 	sec
ddb0 : e58a             [ 3] 	sbc grc_y
ddb2 : a8               [ 2] 	tay
ddb3 : 20bbdb           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
ddb6 : a58a             [ 3] 	lda grc_y
ddb8 : 18               [ 2] 	clc
ddb9 : 6585             [ 3] 	adc grc_x0
ddbb : aa               [ 2] 	tax
ddbc : a586             [ 3] 	lda grc_y0
ddbe : 38               [ 2] 	sec
ddbf : e588             [ 3] 	sbc grc_x
ddc1 : a8               [ 2] 	tay
ddc2 : 20bbdb           [ 6] 	jsr gr_point
ddc5 : 60               [ 6] 	rts
                             
                             	
                             	
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ddc6 :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
AS65 Assembler for R6502 [1.42].                                     Page  120
-------------------------------- bank\bank0.s --------------------------------

0085 =                       grl_x0 	= (num_a)
0086 =                       grl_y0 	= (num_a+1)
0087 =                       grl_x1 	= (num_a+2)
0088 =                       grl_y1 	= (num_a+3)
008a =                       grl_dx	= (num_b+1)
008b =                       grl_dy	= (num_b+2)
008c =                       grl_xyyx= (num_b+3)
008d =                       grl_2dx	= (num_x)
008f =                       grl_2dy	= (num_x+2)
0091 =                       grl_2dxy= (num_tmp)
0093 =                       grl_inx	= (num_tmp+2)
0094 =                       grl_iny = (num_tmp+3)
0095 =                       grl_p	= (num_buf)
                             
ddc6 : 648c             [ 3] 	stz grl_xyyx				; Assume normal xy axis
                             	
                             ;    int dx, dy, p, x, y;
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
ddc8 : 38               [ 2] 	sec
ddc9 : a587             [ 3] 	lda grl_x1
ddcb : e585             [ 3] 	sbc grl_x0
ddcd : b003             [ 3] 	bcs gr_line_skip_dx_neg
ddcf : 49ff             [ 2] 	eor #0xff
ddd1 : 1a               [ 2] 	inc a
ddd2 :                       gr_line_skip_dx_neg
ddd2 : 858a             [ 3] 	sta grl_dx
ddd4 : 38               [ 2] 	sec
ddd5 : a588             [ 3] 	lda grl_y1
ddd7 : e586             [ 3] 	sbc grl_y0
ddd9 : b003             [ 3] 	bcs gr_line_skip_dy_neg
dddb : 49ff             [ 2] 	eor #0xff
dddd : 1a               [ 2] 	inc a
ddde :                       gr_line_skip_dy_neg
ddde : 858b             [ 3] 	sta grl_dy
dde0 : c58a             [ 3] 	cmp grl_dx
dde2 : 901a             [ 3] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
dde4 : a585             [ 3] 	lda grl_x0					; swap x0 and y0
dde6 : a686             [ 3] 	ldx grl_y0
dde8 : 8586             [ 3] 	sta grl_y0
ddea : 8685             [ 3] 	stx grl_x0
ddec : a587             [ 3] 	lda grl_x1					; swap x1 and y1
ddee : a688             [ 3] 	ldx grl_y1
ddf0 : 8588             [ 3] 	sta grl_y1
ddf2 : 8687             [ 3] 	stx grl_x1
ddf4 : a58a             [ 3] 	lda grl_dx					; swap dy and dx
ddf6 : a68b             [ 3] 	ldx grl_dy
ddf8 : 858b             [ 3] 	sta grl_dy
ddfa : 868a             [ 3] 	stx grl_dx
ddfc : e68c             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             	
ddfe :                       gr_line_skip_xy_swap	
                             	; assume going from left to right
ddfe : a901             [ 2] 	lda #1
de00 : 8593             [ 3] 	sta grl_inx
de02 : a585             [ 3] 	lda grl_x0
de04 : c587             [ 3] 	cmp grl_x1
de06 : 9004             [ 3] 	bcc gr_line_skip_x_swap
de08 : a9ff             [ 2] 	lda #0xff					; make x increment negative
de0a : 8593             [ 3] 	sta grl_inx
                             	
AS65 Assembler for R6502 [1.42].                                     Page  121
-------------------------------- bank\bank0.s --------------------------------

de0c :                       gr_line_skip_x_swap
                             	; assume going from top to bottom
de0c : a901             [ 2] 	lda #1
de0e : 8594             [ 3] 	sta grl_iny
de10 : a586             [ 3] 	lda grl_y0
de12 : c588             [ 3] 	cmp grl_y1
de14 : 9004             [ 3] 	bcc gr_line_skip_y_up
de16 : a9ff             [ 2] 	lda #0xff					; make y increment negative
de18 : 8594             [ 3] 	sta grl_iny
                             
de1a :                       gr_line_skip_y_up
de1a : a58a             [ 3] 	lda grl_dx
de1c : 0a               [ 2] 	asl a
de1d : 858d             [ 3] 	sta grl_2dx					; 2*dx (word)
de1f : 648e             [ 3] 	stz grl_2dx+1
de21 : 268e             [ 5] 	rol grl_2dx+1
                             
de23 : a58b             [ 3] 	lda grl_dy
de25 : 0a               [ 2] 	asl a
de26 : 858f             [ 3] 	sta grl_2dy					; 2*dy (word)
de28 : 6490             [ 3] 	stz grl_2dy+1
de2a : 2690             [ 5] 	rol grl_2dy+1
                             	
                             ;    p=2*dy-dx;					; p (word)
de2c : 38               [ 2] 	sec
de2d : a58f             [ 3] 	lda grl_2dy
de2f : e58a             [ 3] 	sbc grl_dx
de31 : 8595             [ 3] 	sta grl_p
de33 : a590             [ 3] 	lda grl_2dy+1
de35 : e900             [ 2] 	sbc #0
de37 : 8596             [ 3] 	sta grl_p+1
                             	
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
de39 : 38               [ 2] 	sec
de3a : a58f             [ 3] 	lda grl_2dy
de3c : e58d             [ 3] 	sbc grl_2dx
de3e : 8591             [ 3] 	sta grl_2dxy
de40 : a590             [ 3] 	lda grl_2dy+1
de42 : e58e             [ 3] 	sbc grl_2dx+1
de44 : 8592             [ 3] 	sta grl_2dxy+1
                             
de46 :                       gr_line_pixel
                             	; plot the current pixel position
de46 : a685             [ 3] 	ldx grl_x0
de48 : a486             [ 3] 	ldy grl_y0
de4a : a58c             [ 3] 	lda grl_xyyx				; is xy swapped?
de4c : f004             [ 3] 	beq gr_skip_xy_swap2
de4e : a686             [ 3] 	ldx grl_y0
de50 : a485             [ 3] 	ldy grl_x0	
de52 :                       gr_skip_xy_swap2
de52 : 20bbdb           [ 6] 	jsr gr_point
                             	
de55 : a585             [ 3] 	lda grl_x0					; Check if done
de57 : c587             [ 3] 	cmp grl_x1
de59 : f030             [ 3] 	beq gr_line_done
                             
                             	; check sign of p
de5b : a596             [ 3] 	lda grl_p+1
de5d : 3016             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             	
AS65 Assembler for R6502 [1.42].                                     Page  122
-------------------------------- bank\bank0.s --------------------------------

                             	; y=y+increment
de5f : 18               [ 2] 	clc
de60 : a586             [ 3] 	lda grl_y0
de62 : 6594             [ 3] 	adc grl_iny
de64 : 8586             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
                             	_addZPWord grl_p,grl_2dxy
                             
de73 : 800d             [ 3] 	bra gr_line_incx
                             
de75 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             	
de82 :                       gr_line_incx
de82 : 18               [ 2] 	clc
de83 : a585             [ 3] 	lda grl_x0
de85 : 6593             [ 3] 	adc grl_inx
de87 : 8585             [ 3] 	sta grl_x0
de89 : 80bb             [ 3] 	bra gr_line_pixel
de8b :                       gr_line_done
de8b : 60               [ 6] 	rts
                             	
                             
                             ;    while(x<x1)
                             ;    {
                             ;        if(p>=0)
                             ;        {
                             ;            putpixel(x,y,7);
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            putpixel(x,y,7);
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
de8c :                       gr_scroll_up
de8c : e612             [ 5] 	inc vdp_curoff
                             	
                             	; Get VDP Address of line + 1 line (source addr)
de8e : 18               [ 2] 	clc
de8f : a523             [ 3] 	lda gr_scrngeom+gr_screen_start
de91 : 6527             [ 3] 	adc gr_scrngeom+gr_screen_w
de93 : 853f             [ 3] 	sta tmp_v1
de95 : a524             [ 3] 	lda gr_scrngeom+gr_screen_start+1
de97 : 6900             [ 2] 	adc #0
de99 : 8540             [ 3] 	sta tmp_v1+1
                             	
                             	; Get destinaton address = first line of screen
de9b : a523             [ 3] 	lda gr_scrngeom+gr_screen_start
AS65 Assembler for R6502 [1.42].                                     Page  123
-------------------------------- bank\bank0.s --------------------------------

de9d : 8543             [ 3] 	sta tmp_b
de9f : a524             [ 3] 	lda gr_scrngeom+gr_screen_start+1
dea1 : 8544             [ 3] 	sta tmp_b+1
                             	
dea3 : a428             [ 3] 	ldy gr_scrngeom+gr_screen_h
dea5 : 88               [ 2] 	dey
                             	
dea6 : 78               [ 2] 	sei						; Stop IRQ as it messes with VDP
                             	; Only use vdp primitives inside sei,cli
                             
                             	; Restore what was underneath cursor
dea7 : a62c             [ 3] 	ldx gr_scrngeom+gr_cur_ptr
dea9 : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
deab : 20e5c5           [ 6] 	jsr vdp_wr_addr
deae : a514             [ 3] 	lda vdp_curval
deb0 : 200bc6           [ 6] 	jsr vdp_wr_vram
                             
deb3 :                       gr_scroll_cpy_ln
                             	; Set VDP with source address to read
deb3 : a63f             [ 3] 	ldx tmp_v1
deb5 : a540             [ 3] 	lda tmp_v1+1
deb7 : 20fcc5           [ 6] 	jsr vdp_rd_addr
                             
                             	; Read in a line worth of screen
deba : a627             [ 3] 	ldx gr_scrngeom+gr_screen_w
debc :                       gr_scroll_read_ln
debc : 2006c6           [ 6] 	jsr vdp_rd_vram
debf : 9d8009           [ 5] 	sta scratch+128,x			; +128 to avoid string corru
dec2 : ca               [ 2] 	dex
dec3 : d0f7             [ 3] 	bne gr_scroll_read_ln
                             
                             	; Set VDP with destinaton to write
dec5 : a643             [ 3] 	ldx tmp_b
dec7 : a544             [ 3] 	lda tmp_b+1
dec9 : 20e5c5           [ 6] 	jsr vdp_wr_addr
                             	
                             	; Write out a line worth of screen
decc : a627             [ 3] 	ldx gr_scrngeom+gr_screen_w
dece :                       gr_scroll_write_ln
dece : bd8009           [ 4] 	lda scratch+128,x
ded1 : 200bc6           [ 6] 	jsr vdp_wr_vram
ded4 : ca               [ 2] 	dex
ded5 : d0f7             [ 3] 	bne gr_scroll_write_ln
                             
                             	; Update source address
ded7 : 18               [ 2] 	clc
ded8 : a53f             [ 3] 	lda tmp_v1
deda : 6527             [ 3] 	adc gr_scrngeom+gr_screen_w
dedc : 853f             [ 3] 	sta tmp_v1
dede : a540             [ 3] 	lda tmp_v1+1
dee0 : 6900             [ 2] 	adc #0
dee2 : 8540             [ 3] 	sta tmp_v1+1
                             	; Update destinaton address
dee4 : 18               [ 2] 	clc
dee5 : a543             [ 3] 	lda tmp_b
dee7 : 6527             [ 3] 	adc gr_scrngeom+gr_screen_w
dee9 : 8543             [ 3] 	sta tmp_b
deeb : a544             [ 3] 	lda tmp_b+1
deed : 6900             [ 2] 	adc #0
deef : 8544             [ 3] 	sta tmp_b+1
                             
                             	; One line complete
AS65 Assembler for R6502 [1.42].                                     Page  124
-------------------------------- bank\bank0.s --------------------------------

def1 : 88               [ 2] 	dey
def2 : d0bf             [ 3] 	bne gr_scroll_cpy_ln
                             	
                             	; VDP is pointing at last line
                             	; Needs to be filled with blank
def4 : a515             [ 3] 	lda vdp_blank
def6 : 8514             [ 3] 	sta vdp_curval			; Also this is the cursor value
def8 : a627             [ 3] 	ldx gr_scrngeom+gr_screen_w
defa :                       gr_scroll_erase_ln
defa : 200bc6           [ 6] 	jsr vdp_wr_vram
defd : ca               [ 2] 	dex
defe : d0fa             [ 3] 	bne gr_scroll_erase_ln
                             
df00 : 58               [ 2] 	cli			; Enable IRQ
                             
df01 : c612             [ 5] 	dec vdp_curoff
                             
df03 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
df04 :                       gr_cur_right
                             	_pushAXY
                             
                             	; Load cursor x,y position
df07 : a62a             [ 3] 	ldx gr_scrngeom+gr_cur_x
df09 : a42b             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
df0b : e8               [ 2] 	inx
                             	; Check if reached past edge of line
df0c : e427             [ 3] 	cpx gr_scrngeom+gr_screen_w
df0e : d00f             [ 3] 	bne gr_adv_skip_nl
                             	; If got here then wrap to next line
df10 : a200             [ 2] 	ldx #0
df12 : c8               [ 2] 	iny
df13 : c428             [ 3] 	cpy gr_scrngeom+gr_screen_h
df15 : d008             [ 3] 	bne gr_adv_skip_nl
                             	; If got here then screen needs to scroll
df17 : 88               [ 2] 	dey					; First put y back in bound
df18 : da               [ 3] 	phx
df19 : 5a               [ 3] 	phy
df1a : 208cde           [ 6] 	jsr gr_scroll_up
df1d : 7a               [ 4] 	ply
df1e : fa               [ 4] 	plx
df1f :                       gr_adv_skip_nl
df1f : 20fada           [ 6] 	jsr gr_set_cur
                             	_pullAXY
                             
df25 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page  125
-------------------------------- bank\bank0.s --------------------------------

                             ;****************************************
df26 :                       gr_cur_left
                             	_pushAXY
                             
                             	; Load cursor x,y position, load X last to check
df29 : a42b             [ 3] 	ldy gr_scrngeom+gr_cur_y
df2b : a62a             [ 3] 	ldx gr_scrngeom+gr_cur_x
                             	
                             	; Decrement screen pointer
                             	; Move cursor left
df2d : d007             [ 3] 	bne gr_cur_skip_at_left		; If already at the lef
df2f : c000             [ 2] 	cpy #0						; If already at the top left
df31 : f007             [ 3] 	beq gr_cur_skip_at_tl
df33 : 88               [ 2] 	dey
df34 : a627             [ 3] 	ldx gr_scrngeom+gr_screen_w
df36 :                       gr_cur_skip_at_left
df36 : ca               [ 2] 	dex
df37 : 20fada           [ 6] 	jsr gr_set_cur
                             
df3a :                       gr_cur_skip_at_tl	
                             	_pullAXY
                             
df3d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
df3e :                       gr_cur_up
                             	_pushAXY
                             
                             	; Load cursor x,y position, load Y last to check
df41 : a62a             [ 3] 	ldx gr_scrngeom+gr_cur_x
df43 : a42b             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	
df45 : f004             [ 3] 	beq gr_cur_skip_at_top	; If already at the top, 
df47 : 88               [ 2] 	dey
df48 : 20fada           [ 6] 	jsr gr_set_cur
                             	
df4b :                       gr_cur_skip_at_top	
                             	_pullAXY
                             
df4e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
df4f :                       gr_cur_down
                             	_pushAXY
                             
                             	; Load cursor x,y position
df52 : a62a             [ 3] 	ldx gr_scrngeom+gr_cur_x
df54 : a42b             [ 3] 	ldy gr_scrngeom+gr_cur_y
df56 : c8               [ 2] 	iny
df57 : c428             [ 3] 	cpy gr_scrngeom+gr_screen_h			; If already at  b
AS65 Assembler for R6502 [1.42].                                     Page  126
-------------------------------- bank\bank0.s --------------------------------

df59 : f003             [ 3] 	beq gr_cur_skip_at_bot				; then don't do anythi
                             	
df5b : 20fada           [ 6] 	jsr gr_set_cur
                             
df5e :                       gr_cur_skip_at_bot
                             	_pullAXY
                             
df61 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
df62 :                       gr_new_ln
                             	_pushAXY
                             
                             	; X pos is zero, Y needs to increment
df65 : a200             [ 2] 	ldx #0
df67 : a42b             [ 3] 	ldy gr_scrngeom+gr_cur_y
df69 : c8               [ 2] 	iny
df6a : c428             [ 3] 	cpy gr_scrngeom+gr_screen_h
df6c : d008             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
df6e : 88               [ 2] 	dey
df6f : da               [ 3] 	phx
df70 : 5a               [ 3] 	phy
df71 : 208cde           [ 6] 	jsr gr_scroll_up
df74 : 7a               [ 4] 	ply
df75 : fa               [ 4] 	plx
df76 :                       gr_nl_skip_nl
df76 : 20fada           [ 6] 	jsr gr_set_cur
                             	_pullAXY
                             
df7c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
df7d :                       gr_del
                             	_pushAXY
                             
df80 : 2026df           [ 6] 	jsr gr_cur_left
df83 : a920             [ 2] 	lda #' '							; Put a space
df85 : 20e0da           [ 6] 	jsr gr_put
                             	_pullAXY
                             
df8b : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  127
-------------------------------- bank\bank0.s --------------------------------

df8c :                       gr_get_key
df8c : 200fd0           [ 6] 	jsr kb_get_key
df8f : b007             [ 3] 	bcs gr_key_no_key
df91 : c906             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
df93 : d002             [ 3] 	bne gr_not_copy
df95 : a514             [ 3] 	lda vdp_curval						; If yes the get char under 
df97 :                       gr_not_copy
df97 : 18               [ 2] 	clc
df98 :                       gr_key_no_key
df98 : 60               [ 6] 	rts	
                             	
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
df99 :                       gr_put_byte
df99 : c97f             [ 2] 	cmp #UTF_DEL			; Del key
df9b : f004             [ 3] 	beq gr_process_special
df9d : c920             [ 2] 	cmp #32					; Special char?
df9f : b032             [ 3] 	bcs gr_pb_notspecial	; >=32 == carry clear
                             
dfa1 :                       gr_process_special
dfa1 : c90d             [ 2] 	cmp #UTF_CR				; New line?
dfa3 : d003             [ 3] 	bne gr_skip_new_ln
dfa5 : 4c62df           [ 3] 	jmp gr_new_ln
dfa8 :                       gr_skip_new_ln
dfa8 : c97f             [ 2] 	cmp #UTF_DEL			; Delete?
dfaa : d003             [ 3] 	bne gr_skip_del
dfac : 4c7ddf           [ 3] 	jmp gr_del
dfaf :                       gr_skip_del
dfaf : c908             [ 2] 	cmp #CRSR_LEFT
dfb1 : d003             [ 3] 	bne gr_skip_left
dfb3 : 4c26df           [ 3] 	jmp gr_cur_left
dfb6 :                       gr_skip_left
dfb6 : c909             [ 2] 	cmp #CRSR_RIGHT
dfb8 : d003             [ 3] 	bne gr_skip_right
dfba : 4c04df           [ 3] 	jmp gr_cur_right
dfbd :                       gr_skip_right
dfbd : c90b             [ 2] 	cmp #CRSR_UP
dfbf : d003             [ 3] 	bne gr_skip_up
dfc1 : 4c3edf           [ 3] 	jmp gr_cur_up
dfc4 :                       gr_skip_up
dfc4 : c90a             [ 2] 	cmp #CRSR_DOWN
dfc6 : d003             [ 3] 	bne gr_skip_down
dfc8 : 4c4fdf           [ 3] 	jmp gr_cur_down
dfcb :                       gr_skip_down
dfcb : c90c             [ 2] 	cmp #UTF_FF
dfcd : d003             [ 3] 	bne gr_skip_cls
dfcf : 4c6cda           [ 3] 	jmp gr_cls
dfd2 :                       gr_skip_cls
dfd2 : 60               [ 6] 	rts
                             
                             ;	Normal caracter processing here.
dfd3 :                       gr_pb_notspecial
                             	_pushAXY
                             
                             	
                             	; Place in current position and move right
dfd6 : 20e0da           [ 6] 	jsr gr_put
AS65 Assembler for R6502 [1.42].                                     Page  128
-------------------------------- bank\bank0.s --------------------------------

dfd9 : 2004df           [ 6] 	jsr gr_cur_right
                             
                             	_pullAXY
                             
                             	
dfdf : 60               [ 6] 	rts
                             
                             ;* These tables are to speed up calculating the 
                             ;* offset for plot commands, rather than using
                             ;* a series of left shifts and additions.
                             ;* Not sure if it is worth the 96 bytes :-O
dfe0 :                       gr_offset_40lo
dfe0 : 00285078              	db lo(0*40), lo(1*40), lo(2*40), lo(3*40)
dfe4 : a0c8f018              	db lo(4*40), lo(5*40), lo(6*40), lo(7*40)
dfe8 : 406890b8              	db lo(8*40), lo(9*40), lo(10*40), lo(11*40)
dfec : e0083058              	db lo(12*40), lo(13*40), lo(14*40), lo(15*40)
dff0 : 80a8d0f8              	db lo(16*40), lo(17*40), lo(18*40), lo(19*40)
dff4 : 20487098              	db lo(20*40), lo(21*40), lo(22*40), lo(23*40)
dff8 :                       gr_offset_40hi
dff8 : 00000000              	db hi(0*40), hi(1*40), hi(2*40), hi(3*40)
dffc : 00000001              	db hi(4*40), hi(5*40), hi(6*40), hi(7*40)
e000 : 01010101              	db hi(8*40), hi(9*40), hi(10*40), hi(11*40)
e004 : 01020202              	db hi(12*40), hi(13*40), hi(14*40), hi(15*40)
e008 : 02020202              	db hi(16*40), hi(17*40), hi(18*40), hi(19*40)
e00c : 03030303              	db hi(20*40), hi(21*40), hi(22*40), hi(23*40)
e010 :                       gr_offset_32lo
e010 : 00204060              	db lo(0*32), lo(1*32), lo(2*32), lo(3*32)
e014 : 80a0c0e0              	db lo(4*32), lo(5*32), lo(6*32), lo(7*32)
e018 : 00204060              	db lo(8*32), lo(9*32), lo(10*32), lo(11*32)
e01c : 80a0c0e0              	db lo(12*32), lo(13*32), lo(14*32), lo(15*32)
e020 : 00204060              	db lo(16*32), lo(17*32), lo(18*32), lo(19*32)
e024 : 80a0c0e0              	db lo(20*32), lo(21*32), lo(22*32), lo(23*32)
e028 :                       gr_offset_32hi
e028 : 00000000              	db hi(0*32), hi(1*32), hi(2*32), hi(3*32)
e02c : 00000000              	db hi(4*32), hi(5*32), hi(6*32), hi(7*32)
e030 : 01010101              	db hi(8*32), hi(9*32), hi(10*32), hi(11*32)
e034 : 01010101              	db hi(12*32), hi(13*32), hi(14*32), hi(15*32)
e038 : 02020202              	db hi(16*32), hi(17*32), hi(18*32), hi(19*32)
e03c : 02020202              	db hi(20*32), hi(21*32), hi(22*32), hi(23*32)
                             	
e040 :                       mod_sz_graph_e
                             
                             
                             	; End of Code
e040 :                       _code_end
e040 :                       _bank0_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
