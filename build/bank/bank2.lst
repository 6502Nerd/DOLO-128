AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank2.s -----------------------------------

5841 lines read, no errors in pass 1.
c000 =                       _bank2_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank2.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank2.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank2.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank2.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank2.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank2.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank2.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank2.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank2.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank2.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank2.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank2.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank2.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank2.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank2.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank2.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank2.s -----------------------------------

                             ; Serial FIFO buffer pointers
0002 =                       ser_first	ds	1		; Pointer to first byte in buffer
0003 =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0004 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0006 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0007 =                       vdp_curstat	ds	1		; Cursor status
0008 =                       vdp_curval	ds	1		; Cursor value on screen
0009 =                       vdp_blank	ds	1		; Screen blank value normally 32
000a =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
000b =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0017 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0027 =                       kb_raw  	ds	1		; Raw keyboard code
0028 =                       kb_last		ds	1		; Raw code of last key
0029 =                       kb_code 	ds	1		; Converted keyboard code
002a =                       kb_stat		ds	1		; Keyboard status for caps and shi
002b =                       kb_deb		ds	1		; VB periods since last KB spike
002c =                       kb_rep		ds	1		; Keyboard repeat timer
002d =                       kb_rep_tim 	ds	1		; Default repeat speed
002e =                       kb_rep_del 	ds	1		; Default repeat delay timing
002f =                       kb_debounce ds	1		; Default repeat debounce
0030 =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
0031 =                       tmp_c		ds	2		; Temp address c
0033 =                       tmp_v1		ds	2		; VDP temp addresses
0035 =                       tmp_a		ds	2		; Temp storage a
0037 =                       tmp_b 		ds	2		; Temp address b
0039 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
003b =                       buf_adr		ds	2		; Line buffer address
003d =                       buf_sz		ds	1		; Buffer size
003e =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
003f =                       sd_status	ds	1		; SD card status
0040 =                       sd_slo		ds	1		; Sector pointer low
0041 =                       sd_shi		ds	1		; Sector pointer high
0042 =                       sd_sect		ds	4		; SD Card sector address
0046 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
004a =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0079 =                       ztmp_16					; Start of 16 byte scratch area (all 
0079 =                       num_a		ds	4		; 4 byte primary accumulator
007d =                       num_b		ds	4		; 4 byte secondary accumulator
0081 =                       num_x		ds	4		; 4 byte x register
0085 =                       num_tmp		ds	4		; 4 byte temp space
0089 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
0091 =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank2.s -----------------------------------

0091 =                       dflat_zp_save_s			; ZP save dflat from here
0091 =                       df_checkkey	ds	1		; Key check interval counter
0092 =                       df_checkmsk	ds	1		; Mask for check key
0093 =                       errno		ds	1		; General error condition status
0094 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
0095 =                       df_sp		ds	1		; Stack pointer after error to resto
0096 =                       df_pc		ds	2		; PC after error to return to
0098 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
009a =                       df_brkval	ds	1		; Byte after BRK instruction
009b =                       df_prgstrt	ds	2		; Start of program code
009d =                       df_prgend	ds	2		; End of program code
009f =                       df_vntstrt	ds	2		; Variable name table start
00a1 =                       df_vntend	ds	2		; Variable name table end
00a3 =                       df_vvtstrt	ds	2		; Variable value table start
00a5 =                       df_vvtend	ds	2		; Variable value table end
00a7 =                       df_varcnt	ds	1		; Variable counter
00a8 =                       df_starstrt	ds	2		; String and array table start
00aa =                       df_starend	ds	2		; String and array table end
00ac =                       df_rtstop	ds	1		; Runtime stack pointer
00ad =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ae =                       df_strbuff	ds	1		; String expression buffer
00af =                       df_stridx	ds	1		; Top of string buffer (grows dow
00b0 =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00b2 =                       df_linoff	ds	1		; Offset in to line buffer
00b3 =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00b4 =                       df_eolidx	ds	1		; End of line index (i.e length)
00b5 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00b6 =                       df_curstidx	ds	1		; Offset to the start of curren
00b7 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00b9 =                       df_symoff	ds	1		; Offset in to token table
00ba =                       df_symini	ds	2		; Start of symtab
00bc =                       df_currlin	ds	2		; Execution current line pointer
00be =                       df_exeoff	ds	1		; Execution line buffer offset
00bf =                       df_nextlin	ds	2		; Next line to execute
00c1 =                       df_procmode	ds	1		; Only used during tokenisation
00c2 =                       df_procargs	ds	1		; Only used during tokenisation
00c3 =                       df_procloc	ds	1		; Counts the number of local par
00c4 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00c6 =                       df_lineptr	ds	2		; Pointer to line during searche
00c8 =                       df_lineidx	ds	1		; Pointer to line index during s
00c9 =                       df_ifnest	ds	1		; Global nested if counter
00ca =                       df_currdat	ds	2		; Data current line pointer
00cc =                       df_datoff	ds	1		; Data line buffer offset
00cd =                       df_rnd		ds	2		; Random number seed
                             
00cf =                       df_asmpc	ds	2		; Assembler program counter
00d1 =                       df_asmopt	ds	1		; Assembler current option
00d2 =                       df_asmadmd	ds	1		; Addressing mode
00d3 =                       df_asmopcde	ds	1		; Current opcode
00d4 =                       df_asmoprnd	ds	2		; Current operand
00d6 =                       df_asmlen	ds	1		; Instruction length
                             
00d7 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00d7 =                       df_tmpptra	ds	2		; Temp pointer a
00d9 =                       df_tmpptrb	ds	2		; Temp pointer b
00db =                       df_tmpptrc	ds	2		; Temp pointer c
00dd =                       df_tmpptrd	ds	2		; Temp pointer d
00df =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank2.s -----------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00e1 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
0c00 =                       	org 0x0c00			; Page 11 = non-zero page variables
                             ; Interrupt routine addresses
0c00 =                       int_nmi		 ds 2		; Master NMI handler
0c02 =                       int_irq		 ds	2		; Master IRQ handler
0c04 =                       int_brk		 ds	2		; Master BRK handler
0c06 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
0c08 =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
0c0a =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Self-modifying code or code that needs to run w
0c0c =                       ram_code	ds  64		; 64 bytes of RAM code space
0c4c =                       pt3_int		ds	1		; =1 when PT3 interrupt routine is
                             
                             
                             ; Active IO device settings
0c4d =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c4e =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c5e =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank2.s -----------------------------------

                             ; Filesystem parameters
0c7e =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c82 =                       fs_fatsect	ds	4		; Start of FAT tables
0c86 =                       fs_rootsect	ds	4		; Start of Root Directory
0c8a =                       fs_datasect	ds	4		; Start of Data Area
0c8e =                       fs_dirsect	ds	4		; Current directory sector numbe
0c92 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c94 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0cb4 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0cb6 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : 77c7                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : 8acb                  	fcw init			; 0xfffc : Reset Vector
fffe : b4c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
c000 : 40                    	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank2.s -----------------------------------

                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4cc0c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4cbdc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4c50c6           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c8ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c97c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4cf9c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4ca1c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4c5dc6           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c75c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f337, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d877, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d5ed, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d680, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d589, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d548, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d265, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank2.s -----------------------------------

c0d6 :                       _fs_open_read_w
                              _bankjsr $d434, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d4f8, 2
                             
c106 :                       _fs_put_byte_w
                              _bankjsr $d3c1, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $d0a8, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d0de, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $d063, 2
                             
c166 :                       _get_byte
                              _bankjsr $d2ad, 0
                             
c17e :                       _put_byte
                              _bankjsr $d2c2, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e390, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e39d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $de59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d2cf, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d25a, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d28b, 0
                             
c226 :                       _init_fs
                              _bankjsr $cf40, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cc3a, 2
                             
c256 :                       _init_snd
                              _bankjsr $d698, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d2e1, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d2f0, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d35b, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cc43, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank2.s -----------------------------------

                             
c2ce :                       _gr_cls
                              _bankjsr $de6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $de16, 0
                             
c2fe :                       _gr_line
                              _bankjsr $e1ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $e00a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e115, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ded7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $df15, 0
                             
c376 :                       _gr_point
                              _bankjsr $dfbb, 0
                             
c38e :                       _gr_get
                              _bankjsr $def2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $defa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d691, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c6f9, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c6a1, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c697, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c68a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $dc00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d4b7, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d61d, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d56e, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d688, 0
                             
c4ae :                       _rtc_nvwrite
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank2.s -----------------------------------

                              _bankjsr $d670, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d694, 2
                             
c4de :                       _sd_sendcmd17
                              _bankjsr $ce12, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $ce8b, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cc3a, 0
                             
c526 :                       _PT3INIT
                              _bankjsr $cc43, 3
                             
c53e :                       _PT3START
                              _bankjsr $cc3a, 3
                             
c556 :                       _PT3PAUSE
                              _bankjsr $cc3d, 3
                             
c56e :                       _PT3RESUME
                              _bankjsr $cc40, 3
                             
c586 :                       mod_sz_autogen_e
                             
                             	
c586 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c586 :                       mod_sz_io_s
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank2.s -----------------------------------

                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c586 :                       io_init
c586 : a900             [ 2] 	lda #0				; Assume it's serial
c588 : 48               [ 3] 	pha
c589 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c58c : 2910             [ 2] 	and #0x10
c58e : d00b             [ 3] 	bne io_init_set_default
c590 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c593 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c595 : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c597 : 68               [ 4] 	pla
c598 : a901             [ 2] 	lda #1
c59a : 48               [ 3] 	pha
c59b :                       io_init_set_default
c59b : 68               [ 4] 	pla
c59c : 8d4d0c           [ 4] 	sta io_default
c59f : 4ca2c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c5a2 :                       io_set_default			; Entry point for default
c5a2 : ad4d0c           [ 4] 	lda io_default
c5a5 :                       io_active_device		; Entry point for A set
c5a5 : 0a               [ 2] 	asl	a				; x16 the Block number
c5a6 : 0a               [ 2] 	asl a
c5a7 : 0a               [ 2] 	asl a
c5a8 : 0a               [ 2] 	asl a
c5a9 : a8               [ 2] 	tay
c5aa : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c5ac :                       io_copy_data
c5ac : b920c6           [ 4] 	lda io_devices,y
c5af : 9d4e0c           [ 5] 	sta io_block,x
c5b2 : c8               [ 2] 	iny
c5b3 : e8               [ 2] 	inx
c5b4 : e010             [ 2] 	cpx #io_struct
c5b6 : d0f4             [ 3] 	bne io_copy_data
                             	
c5b8 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c5ba : 853e             [ 3] 	sta buf_ef
c5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
c5bd :                       io_get_ch
c5bd : 6c4e0c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c5c0 :                       io_put_ch
c5c0 : 6c500c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c3 :                       io_open_read
c5c3 : 6c520c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c6 :                       io_open_write
c5c6 : 6c540c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c9 :                       io_close
c5c9 : 6c560c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5cc :                       io_delete
c5cc : 6c580c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
c5cf :                       io_read_line
c5cf : 863b             [ 3] 	stx buf_adr			; Save pointer to storage
c5d1 : 853c             [ 3] 	sta buf_adr+1
c5d3 : 843d             [ 3] 	sty buf_sz			; Max length
c5d5 : 08               [ 3] 	php					; Save echo state
c5d6 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c5d8 :                       io_get_line_byte
c5d8 : 38               [ 2] 	sec					; Getting bytes synchronously
c5d9 : 20bdc5           [ 6] 	jsr io_get_ch		; Get a byte
c5dc : b026             [ 4] 	bcs io_get_line_done; Got nothing then finish
c5de : 28               [ 4] 	plp					; Get echo state
c5df : 08               [ 3] 	php					; Instantly save it back
c5e0 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c5e2 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c5e4 : d005             [ 3] 	bne io_do_echo
c5e6 : c000             [ 2] 	cpy #0				; Already at beginning?
c5e8 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c5ea : 88               [ 2] 	dey					; Else decrement length
c5eb :                       io_do_echo
c5eb : 20c0c5           [ 6] 	jsr io_put_ch		; Echo it
c5ee :                       io_skip_echo
c5ee : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c5f0 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c5f2 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c5f4 : f003             [ 3] 	beq io_skip_special
c5f6 : 913b             [ 5] 	sta (buf_adr),y		; Save it
c5f8 : c8               [ 2] 	iny					; Increase length
c5f9 :                       io_skip_special
c5f9 : c53e             [ 3] 	cmp buf_ef			; Is it the terminating char?
c5fb : f007             [ 4] 	beq io_get_line_done	; If yes then done
c5fd : c43d             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c5ff : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c601 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c602 : 38               [ 2] 	sec					; Yes, set carry flag
c603 : 60               [ 6] 	rts					; And done
c604 :                       io_get_line_done
c604 : a900             [ 2] 	lda #0
c606 : 913b             [ 5] 	sta (buf_adr),y		; Terminate with 0
c608 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c609 : 18               [ 2] 	clc					; Clear carry flag
c60a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c60b :                       io_print_line
c60b : 48               [ 3] 	pha
                             
c60c : 8631             [ 3] 	stx tmp_c					; Store the string pointer
c60e : 8532             [ 3] 	sta tmp_c+1					; lo and hi
c610 : a000             [ 2] 	ldy #0						; Start at the beginning!
c612 :                       io_print_line_byte
c612 : b131             [ 5] 	lda (tmp_c),y				; Copy byte to
c614 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c616 : 20c0c5           [ 6] 	jsr io_put_ch				; Transmit
c619 : c8               [ 2] 	iny
c61a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank2.s -----------------------------------

c61c :                       io_print_done
c61c : 68               [ 4] 	pla
c61d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c61e :                       io_null_op
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c620 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c620 :                       io_device0					; Serial device, input = Ser, outp
c620 : 66c1                  	dw	_get_byte			; io_get_ch
c622 : 7ec1                  	dw	_put_byte			; io_put_ch
c624 : 1ec6                  	dw	io_null_op			; io_open_r
c626 : 1ec6                  	dw	io_null_op			; io_open_w
c628 : 1ec6                  	dw	io_null_op			; io_close_f
c62a : 1ec6                  	dw	io_null_op			; io_del_f
c62c : 1ec6                  	dw	io_null_op			; io_ext1
c62e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c630 :                       io_device1					; Default device, input = screen e
c630 : 96c1                  	dw	_gr_get_key			; io_get_ch
c632 : aec1                  	dw	_gr_put_byte		; io_put_ch
c634 : 1ec6                  	dw	io_null_op			; io_open_r
c636 : 1ec6                  	dw	io_null_op			; io_open_w
c638 : 1ec6                  	dw	io_null_op			; io_close_f
c63a : 1ec6                  	dw	io_null_op			; io_del_f
c63c : 1ec6                  	dw	io_null_op			; io_ext1
c63e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c640 :                       io_device2					; SD device, input = SD, output = 
c640 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c642 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c644 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c646 : eec0                  	dw	_fs_open_write_w	; io_open_w
c648 : a6c0                  	dw	_fs_close_w			; io_close_f
c64a : 8ec0                  	dw	_fs_delete_w		; io_del_f
c64c : 1ec6                  	dw	io_null_op			; io_ext1
c64e : 1ec6                  	dw	io_null_op			; io_ext2
                             
c650 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank2.s -----------------------------------

                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c650 :                       vdp_wr_reg
c650 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c653 : ea               [ 2] 	nop
c654 : ea               [ 2] 	nop
c655 : 0980             [ 2] 	ora #0x80
c657 : 8d0105           [ 4] 	sta VDP_MODE1
c65a : 4980             [ 2] 	eor #0x80
c65c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c65d :                       vdp_wr_addr
c65d : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c660 : ea               [ 2] 	nop
c661 : ea               [ 2] 	nop
c662 : ea               [ 2] 	nop
c663 : 0940             [ 2] 	ora #0x40		; Required by VDP
c665 : 8d0105           [ 4] 	sta VDP_MODE1
c668 : 4940             [ 2] 	eor #0x40		; Undo that bit
c66a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c66b :                       vdp_mem_wait
c66b : da               [ 3] 	phx								; 3
c66c : a60a             [ 3] 	ldx vdp_delay					; 3
c66e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c670 :                       vdp_mem_wait_loop
c670 : ca               [ 2] 	dex								; 2
c671 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c673 :                       vdp_mem_wait_end
c673 : fa               [ 4] 	plx								; 3
c674 : 60               [ 6] 	rts								; 6
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank2.s -----------------------------------

                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c675 :                       vdp_rd_addr
c675 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c678 : ea               [ 2] 	nop
c679 : ea               [ 2] 	nop
c67a : ea               [ 2] 	nop
c67b : 8d0105           [ 4] 	sta VDP_MODE1
c67e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c680 :                       vdp_rd_vram
c680 : ad0005           [ 4] 	lda VDP_VRAM
c683 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c685 :                       vdp_wr_vram
c685 : 8d0005           [ 4] 	sta VDP_VRAM
c688 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c68a :                       vdp_poke
c68a : 08               [ 3] 	php
c68b : 48               [ 3] 	pha
c68c : 98               [ 2] 	tya
c68d : 78               [ 2] 	sei
c68e : 205dc6           [ 6] 	jsr vdp_wr_addr
c691 : 68               [ 4] 	pla
c692 : 2085c6           [ 6] 	jsr vdp_wr_vram
c695 : 28               [ 4] 	plp
c696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank2.s -----------------------------------

                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c697 :                       vdp_peek
c697 : 08               [ 3] 	php
c698 : 78               [ 2] 	sei
c699 : 2075c6           [ 6] 	jsr vdp_rd_addr
c69c : 2080c6           [ 6] 	jsr vdp_rd_vram
c69f : 28               [ 4] 	plp
c6a0 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6a1 :                       snd_set
c6a1 : 48               [ 3] 	pha
                             
c6a2 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6a4 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6a7 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6aa : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6ad : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6af : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6b1 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6b4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6b6 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c6b9 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c6bc : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c6be : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c6c1 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6c3 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6c6 : 68               [ 4] 	pla
                             	
c6c7 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank2.s -----------------------------------

                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c6c8 :                       snd_get
c6c8 : 48               [ 3] 	pha
                             
c6c9 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6cb : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6ce : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6d1 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6d4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6d6 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6d8 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6db : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6dd : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6e0 : a900             [ 2] 	lda #0x00				; Set Port A to input
c6e2 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6e5 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6e8 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6ea : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c6ec : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6ef : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c6f2 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6f4 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6f7 : 68               [ 4] 	pla
                             	
c6f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c6f9 :                       snd_get_joy0
c6f9 : 48               [ 3] 	pha
c6fa : 48               [ 3] 	pha
c6fb :                       snd_get_joy0_retry
c6fb : 7a               [ 4] 	ply
c6fc : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c6fe : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c701 : 5a               [ 3] 	phy						; Put on stack
c702 : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c705 : 98               [ 2] 	tya
c706 : ba               [ 2] 	tsx						; Get stack pointer
c707 : dd0101           [ 4] 	cmp 0x101,x				; Compare with stack value
c70a : d0ef             [ 4] 	bne snd_get_joy0_retry	; If not equal, try again
c70c : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank2.s -----------------------------------

c70d : 68               [ 4] 	pla
c70e : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c70f :                       main
                             
c70f :                       infinity
c70f : 2046c0           [ 6] 	jsr _df_pg_dflat
c712 : 4c0fc7           [ 3] 	jmp infinity
                             
c715 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c715 : 4275696c64203a..       db "Build : 09-06-2025\r"
c728 : 3132384b204272..       db "128K Breadboard Computer\r"
c741 : 42792040363530..       db "By @6502Nerd\r"
c74e : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c762 :                       init_nmi
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank2.s -----------------------------------

                             	; Core IRQ handler
c762 : a977             [ 2] 	lda #lo(nmi)
c764 : 8d000c           [ 4] 	sta int_nmi
c767 : a9c7             [ 2] 	lda #hi(nmi)
c769 : 8d010c           [ 4] 	sta int_nmi+1
                             
c76c : a9c4             [ 2] 	lda #lo(null_handler)
c76e : 8d0a0c           [ 4] 	sta int_usercia1
c771 : a9c7             [ 2] 	lda #hi(null_handler)
c773 : 8d0b0c           [ 4] 	sta int_usercia1+1
                             
c776 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c777 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* 6551 uses this - fills the receive buffer
                             ;* VIA 2 uses this- user interrupt
c777 :                       nmi
c777 : 48               [ 3] 	pha
                             
c778 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c77b : 100c             [ 3] 	bpl	nmi_skip_acia			; If no interrupt don't do a
                             
c77d : 5a               [ 3] 	phy
c77e : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c781 : a403             [ 3] 	ldy ser_last				; Put byte in last position of F
c783 : 990008           [ 5] 	sta ser_buf,y
c786 : e603             [ 5] 	inc ser_last				; Advance position of last
                             
c788 : 7a               [ 4] 	ply
c789 :                       nmi_skip_acia
c789 :                       nmi_fin
c789 : 68               [ 4] 	pla
c78a : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c78b :                       init_irq
                             	; Core IRQ handler
c78b : a9c5             [ 2] 	lda #lo(irq)
c78d : 8d020c           [ 4] 	sta int_irq
c790 : a9c7             [ 2] 	lda #hi(irq)
c792 : 8d030c           [ 4] 	sta int_irq+1
                             	
                             	; Core BRK handler
c795 : a919             [ 2] 	lda #lo(irq_brk)
c797 : 8d040c           [ 4] 	sta int_brk
c79a : a9c8             [ 2] 	lda #hi(irq_brk)
c79c : 8d050c           [ 4] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0 interrupts
c79f : a9c4             [ 2] 	lda #lo(null_handler)
c7a1 : 8d060c           [ 4] 	sta int_uservdp
c7a4 : a9c7             [ 2] 	lda #hi(null_handler)
c7a6 : 8d070c           [ 4] 	sta int_uservdp+1
                             
c7a9 : a9c4             [ 2] 	lda #lo(null_handler)
c7ab : 8d080c           [ 4] 	sta int_usercia0
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank2.s -----------------------------------

c7ae : a9c7             [ 2] 	lda #hi(null_handler)
c7b0 : 8d090c           [ 4] 	sta int_usercia0+1
                             
c7b3 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c7b4 :                       call_irq_master
c7b4 : 6c020c           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c7b7 :                       call_irq_brk
c7b7 : 6c040c           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c7ba :                       call_irq_uservdp
c7ba : 6c060c           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c7bd :                       call_irq_usercia0
c7bd : 6c080c           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c7c0 :                       call_irq_usercia1
c7c0 : 6c0a0c           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c7c3 :                       null_irq
c7c3 : 40               [ 6] 	rti
                             
                             ;* null handler
c7c4 :                       null_handler
c7c4 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c7c5 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c7c8 : ba               [ 2] 	tsx
c7c9 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c7cc : 2910             [ 2] 	and #0x10
c7ce : d0e7             [ 3] 	bne call_irq_brk
                             	
c7d0 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	;* Try PIA1 first for rapid Timer handling
c7d1 : ad8d04           [ 4] 	lda IO_1 + IFR
c7d4 : 1029             [ 3] 	bpl irq_check_vdp		; Skip if no interrupt
                             	; Reset interrupt by reading T1C-L
c7d6 : ad8404           [ 4] 	lda IO_1+T1CL
c7d9 : 5a               [ 3] 	phy
c7da : da               [ 3] 	phx
                             	; Swtich to RAM bank 2 don't touch anything else
c7db : ad0004           [ 4] 	lda IO_0+PRB
c7de : 48               [ 3] 	pha                     ; Remember the bank #
c7df : 29cf             [ 2] 	and #0b11001111
c7e1 : 0920             [ 2] 	ora #0b00100000
c7e3 : 8d0004           [ 4] 	sta IO_0+PRB
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank2.s -----------------------------------

                             	; Switch out ROM for RAM
c7e6 : ad8004           [ 4] 	lda IO_1+PRB                    ; Get current RO
c7e9 : 48               [ 3] 	pha
c7ea : 29df             [ 2] 	and #(0xff ^ MM_DIS)            ; Switch off ROM
c7ec : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
c7ef : ee4c0c           [ 6] 	inc pt3_int 				  	; Set PT3 interrupt flag
c7f2 : 20c0c7           [ 6] 	jsr call_irq_usercia1			; Call user cia1 handler
                             	; Restore ROM
c7f5 : 68               [ 4] 	pla                             ; Get original p
c7f6 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
                             	; Restore RAM bank
c7f9 : 68               [ 4] 	pla                             ; Get original p
c7fa : 8d0004           [ 4] 	sta IO_0+PRB                    ; Update port to
c7fd : fa               [ 4] 	plx
c7fe : 7a               [ 4] 	ply
                             
                             	;* Try VDP next
c7ff :                       irq_check_vdp	
c7ff : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c802 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c804 : 20bac7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c807 : 2066c8           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c80a : 2044c8           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c80d :                       irq_check_cia0
c80d : ad0d04           [ 4] 	lda IO_0 + IFR
c810 : 1003             [ 3] 	bpl irq_fin
c812 : 20bdc7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c815 :                       irq_fin
                             	_pullAXY
                             
c818 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c819 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c819 : 38               [ 2] 	sec
c81a : bd0501           [ 4] 	lda 0x0105,x
c81d : e902             [ 2] 	sbc #2
c81f : 8598             [ 3] 	sta df_brkpc
c821 : bd0601           [ 4] 	lda 0x0106,x
c824 : e900             [ 2] 	sbc #0
c826 : 8599             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c828 : a001             [ 2] 	ldy #1
c82a : b198             [ 5] 	lda (df_brkpc),y
c82c : 859a             [ 3] 	sta df_brkval
c82e : 8593             [ 3] 	sta errno
                             	; now update the return address
c830 : a596             [ 3] 	lda df_pc
c832 : 9d0501           [ 5] 	sta 0x105,x
c835 : a597             [ 3] 	lda df_pc+1
c837 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c83d : 8579             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank2.s -----------------------------------

c83f : 867a             [ 3] 	stx num_a+1
c841 : 847b             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c843 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c844 :                       int_kb_handler	
c844 : a52b             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c846 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c848 : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c84b : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c84d : f00c             [ 3] 	beq int_keys_up
c84f :                       int_do_read
c84f : 8530             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c851 : a52f             [ 3] 	lda kb_debounce			; Set debounce
c853 : 852b             [ 3] 	sta kb_deb
c855 :                       int_skip_scan
c855 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c857 : 8d0d04           [ 4] 	sta IO_0 + IFR
c85a : 60               [ 6] 	rts
c85b :                       int_keys_up					; No key pressed
c85b : 6427             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c85d : 6428             [ 3] 	stz kb_last
c85f : 6429             [ 3] 	stz kb_code
c861 : 642b             [ 3] 	stz kb_deb
c863 : 642c             [ 3] 	stz kb_rep
c865 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c866 :                       int_vdp_handler
c866 : 2092c8           [ 6] 	jsr update_timers	; If it is then update system 
                             
c869 : a506             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c86b : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c86d : c607             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c86f : a507             [ 3] 	lda vdp_curstat		; Check it
c871 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c873 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c875 : a507             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c877 : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c879 : 8507             [ 3] 	sta vdp_curstat		
                             
c87b : 18               [ 2] 	clc					; Add offset for cursor address in vram
c87c : a520             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c87e : 651d             [ 3] 	adc gr_scrngeom+gr_cur_off
c880 : aa               [ 2] 	tax
c881 : a521             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c883 : 6900             [ 2] 	adc #0
                             
c885 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
c888 : a507             [ 3] 	lda vdp_curstat
c88a : 2980             [ 2] 	and #0x80
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank2.s -----------------------------------

c88c : 4508             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c88e : 2085c6           [ 6] 	jsr vdp_wr_vram
c891 :                       int_vdp_fin	
c891 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c892 :                       update_timers
c892 : e604             [ 5] 	inc vdp_int_cnt
c894 : d002             [ 3] 	bne inc_kb_timers
c896 : e605             [ 5] 	inc vdp_int_cnt+1
c898 :                       inc_kb_timers
c898 : a62b             [ 3] 	ldx kb_deb			; Is debounce 0?
c89a : f002             [ 3] 	beq skip_kb_deb
c89c : c62b             [ 5] 	dec kb_deb
c89e :                       skip_kb_deb
c89e : a62c             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c8a0 : f002             [ 3] 	beq skip_kb_rep
c8a2 : c62c             [ 5] 	dec kb_rep
c8a4 :                       skip_kb_rep
c8a4 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c8a5 :                       long_delay
c8a5 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c8a9 : a000             [ 2] 	ldy #0x00
c8ab :                       long_delay_1
c8ab : ea               [ 2] 	nop
c8ac : ea               [ 2] 	nop
c8ad : ea               [ 2] 	nop
c8ae : ea               [ 2] 	nop
c8af : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank2.s -----------------------------------

c8b0 : d0f9             [ 3] 	bne long_delay_1
c8b2 : ca               [ 2] 	dex
c8b3 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c8b8 : 28               [ 4] 	plp
                             	
c8b9 : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c8ba :                       utilPrintSPC
c8ba : 48               [ 3] 	pha
c8bb : a920             [ 2] 	lda #' '
c8bd : 20c0c5           [ 6] 	jsr io_put_ch
c8c0 : 68               [ 4] 	pla
c8c1 : 60               [ 6] 	rts
                             
c8c2 :                       utilPrintCRLF
c8c2 : 48               [ 3] 	pha
c8c3 : a90d             [ 2] 	lda #UTF_CR
c8c5 : 20c0c5           [ 6] 	jsr io_put_ch
c8c8 : 68               [ 4] 	pla
c8c9 : 60               [ 6] 	rts
                             
c8ca :                       utilPrintA
c8ca : 8539             [ 3] 	sta tmp_d
c8cc : 48               [ 3] 	pha
c8cd : 8a               [ 2] 	txa
c8ce : 48               [ 3] 	pha
c8cf : a539             [ 3] 	lda tmp_d
c8d1 : 20efc8           [ 6] 	jsr str_a_to_x
c8d4 : 20c0c5           [ 6] 	jsr io_put_ch
c8d7 : 8a               [ 2] 	txa
c8d8 : 20c0c5           [ 6] 	jsr io_put_ch
c8db : 68               [ 4] 	pla
c8dc : aa               [ 2] 	tax
c8dd : 68               [ 4] 	pla
c8de : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank2.s -----------------------------------

                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c8df :                       util_clr_mem
c8df : 48               [ 3] 	pha
c8e0 : 5a               [ 3] 	phy
c8e1 : 8633             [ 3] 	stx tmp_v1
c8e3 : 8534             [ 3] 	sta tmp_v1+1
c8e5 : a900             [ 2] 	lda #0
c8e7 :                       mem_clr_byte
c8e7 : 88               [ 2] 	dey
c8e8 : 9133             [ 5] 	sta (tmp_v1),y
c8ea : d0fb             [ 3] 	bne mem_clr_byte
c8ec : 7a               [ 4] 	ply
c8ed : 68               [ 4] 	pla
c8ee : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c8ef :                       str_a_to_x
c8ef : 48               [ 3] 	pha					; Save the byte using later on
c8f0 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c8f2 : 18               [ 2] 	clc
c8f3 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8f5 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8f7 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c8f9 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8fb :                       skip_a_f_1
c8fb : aa               [ 2] 	tax					; Low char is in X
c8fc : 68               [ 4] 	pla					; Get byte back
c8fd : 4a               [ 2] 	lsr a				; Make high nibble low
c8fe : 4a               [ 2] 	lsr a
c8ff : 4a               [ 2] 	lsr a
c900 : 4a               [ 2] 	lsr a
c901 : 18               [ 2] 	clc
c902 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c904 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c906 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c908 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c90a :                       skip_a_f_2
                             
c90a : 18               [ 2] 	clc					; No error
c90b : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c90c :                       str_x_to_a
c90c : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c90e : 38               [ 2] 	sec					; Process high char in A
c90f : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c911 : c90a             [ 2] 	cmp #10				; If A < 10 then
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank2.s -----------------------------------

c913 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c915 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c917 :                       skip_x_f_1
c917 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c919 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c91b : 0a               [ 2] 	asl a				; This is the high nibble
c91c : 0a               [ 2] 	asl a
c91d : 0a               [ 2] 	asl a
c91e : 0a               [ 2] 	asl a
c91f : 48               [ 3] 	pha					; Save the high nibble
c920 : 8a               [ 2] 	txa					; Now process the low char in X
c921 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c923 : 38               [ 2] 	sec
c924 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c926 : c90a             [ 2] 	cmp #10				; If A < 10 then
c928 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c92a : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c92c :                       skip_x_f_2
c92c : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c92e : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c930 : 8579             [ 3] 	sta num_a			; Store low nibble in temp
c932 : 68               [ 4] 	pla					; Get high nibble
c933 : 0579             [ 3] 	ora num_a			; OR with low nibble
                             
c935 : 18               [ 2] 	clc					; No error
c936 : 60               [ 6] 	rts					; A contains value
                             
c937 :                       str_x_to_a_errl
c937 : 68               [ 4] 	pla
c938 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c93a :                       con_n_to_a
c93a : 8685             [ 3] 	stx num_tmp
c93c : 8586             [ 3] 	sta num_tmp+1
c93e : 6479             [ 3] 	stz num_a
c940 : 647a             [ 3] 	stz num_a+1
c942 : c000             [ 2] 	cpy #NUM_ANY
c944 : f014             [ 3] 	beq con_n_to_a_detect
c946 : 88               [ 2] 	dey
c947 : d003             [ 3] 	bne con_n_not_dec
c949 :                       con_dec_jmp
c949 : 4cddc9           [ 3] 	jmp con_dec_to_a_int
c94c :                       con_n_not_dec
c94c : 88               [ 2] 	dey
c94d : d003             [ 3] 	bne con_n_not_hex
c94f :                       con_hex_jmp
c94f : 4c74c9           [ 3] 	jmp con_hex_to_a_int
c952 :                       con_n_not_hex
c952 : 88               [ 2] 	dey
c953 : d003             [ 3] 	bne con_n_err
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank2.s -----------------------------------

c955 :                       con_bin_jmp
c955 : 4cb3c9           [ 3] 	jmp con_bin_to_a_int
c958 :                       con_n_err
c958 : 38               [ 2] 	sec
c959 : 60               [ 6] 	rts
c95a :                       con_n_to_a_detect
c95a : b285             [ 5] 	lda (num_tmp)
c95c : c930             [ 2] 	cmp #'0'
c95e : d0e9             [ 3] 	bne con_dec_jmp
c960 : a001             [ 2] 	ldy #1
c962 : b185             [ 5] 	lda (num_tmp),y
c964 : 0920             [ 2] 	ora #0x20
c966 : c978             [ 2] 	cmp #'x'
c968 : f0e5             [ 3] 	beq con_hex_jmp
c96a : c962             [ 2] 	cmp #'b'
c96c : f0e7             [ 3] 	beq con_bin_jmp
c96e : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c970 :                       con_hex_to_a
c970 : 8685             [ 3] 	stx num_tmp
c972 : 8586             [ 3] 	sta num_tmp+1
c974 :                       con_hex_to_a_int
c974 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c976 : a002             [ 2] 	ldy #2			; start at first digit
c978 :                       con_hex_digit
c978 : b185             [ 5] 	lda (num_tmp),y
c97a : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c97c : 38               [ 2] 	sec							; Process high char in A
c97d : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c97f : c90a             [ 2] 	cmp #10						; If A < 10 then
c981 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c983 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c985 :                       con_hex_skip_x_f_1
c985 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c987 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c989 : 48               [ 3] 	pha
                             	; make room for lo nibble
c98a : 0679             [ 5] 	asl num_a
c98c : 267a             [ 5] 	rol num_a+1
c98e : 0679             [ 5] 	asl num_a
c990 : 267a             [ 5] 	rol num_a+1
c992 : 0679             [ 5] 	asl num_a
c994 : 267a             [ 5] 	rol num_a+1
c996 : 0679             [ 5] 	asl num_a
c998 : 267a             [ 5] 	rol num_a+1
                             	; save in low nibble
c99a : 68               [ 4] 	pla
c99b : 0579             [ 3] 	ora num_a
c99d : 8579             [ 3] 	sta num_a
c99f : c8               [ 2] 	iny
c9a0 : ca               [ 2] 	dex
c9a1 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c9a3 :                       con_hex_err
c9a3 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank2.s -----------------------------------

c9a4 : 60               [ 6] 	rts
                             	; found a non-hex digit
c9a5 :                       con_hex_done
                             	; if no digits processed then error
c9a5 : c002             [ 2] 	cpy #2
c9a7 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c9a9 : 98               [ 2] 	tya
c9aa : aa               [ 2] 	tax
c9ab : a902             [ 2] 	lda #NUM_HEX
c9ad : 18               [ 2] 	clc
c9ae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c9af :                       con_bin_to_a
c9af : 8685             [ 3] 	stx num_tmp
c9b1 : 8586             [ 3] 	sta num_tmp+1
c9b3 :                       con_bin_to_a_int
c9b3 : a002             [ 2] 	ldy #2
c9b5 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c9b7 :                       con_bin_digit
c9b7 : b185             [ 5] 	lda (num_tmp),y
c9b9 : c930             [ 2] 	cmp #'0'
c9bb : 9010             [ 3] 	bcc con_bin_done
c9bd : c932             [ 2] 	cmp #'1'+1
c9bf : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c9c1 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c9c3 : 2679             [ 5] 	rol num_a
c9c5 : 267a             [ 5] 	rol num_a+1
c9c7 : c8               [ 2] 	iny
c9c8 : ca               [ 2] 	dex
c9c9 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c9cb : 800a             [ 3] 	bra con_bin_err
c9cd :                       con_bin_done
                             	; didn't process any digit = error
c9cd : c002             [ 2] 	cpy #2
c9cf : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c9d1 : 98               [ 2] 	tya
c9d2 : aa               [ 2] 	tax
c9d3 : a903             [ 2] 	lda #NUM_BIN
c9d5 : 18               [ 2] 	clc
c9d6 : 60               [ 6] 	rts
c9d7 :                       con_bin_err
c9d7 : 38               [ 2] 	sec
c9d8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
c9d9 :                       con_dec_to_a
c9d9 : 8685             [ 3] 	stx num_tmp
c9db : 8586             [ 3] 	sta num_tmp+1
c9dd :                       con_dec_to_a_int
c9dd : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c9df : b285             [ 5] 	lda (num_tmp)
c9e1 : c92d             [ 2] 	cmp #'-'
c9e3 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c9e5 : c8               [ 2] 	iny
c9e6 :                       str_d_find_end
c9e6 : b185             [ 5] 	lda (num_tmp),y
c9e8 : c930             [ 2] 	cmp #'0'
c9ea : 9007             [ 3] 	bcc str_d_found_end
c9ec : c93a             [ 2] 	cmp #'9'+1
c9ee : b003             [ 3] 	bcs str_d_found_end
c9f0 : c8               [ 2] 	iny
c9f1 : 80f3             [ 3] 	bra str_d_find_end
c9f3 :                       str_d_found_end
c9f3 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c9f5 : b052             [ 4] 	bcs str_d_error		; e.g. -32767 including minus
c9f7 : 8488             [ 3] 	sty num_tmp+3
c9f9 : 6487             [ 3] 	stz num_tmp+2
c9fb : 6479             [ 3] 	stz num_a
c9fd : 647a             [ 3] 	stz num_a+1
c9ff :                       str_d_process_digit
c9ff : 88               [ 2] 	dey
ca00 : 3026             [ 3] 	bmi str_d_digits_done
                             
ca02 : b185             [ 5] 	lda (num_tmp),y
                             
ca04 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
ca06 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
ca08 : 38               [ 2] 	sec
ca09 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
ca0b : 18               [ 2] 	clc
ca0c : 0a               [ 2] 	asl a
ca0d : 6587             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
ca0f : aa               [ 2] 	tax
ca10 : a579             [ 3] 	lda num_a
ca12 : 7d4bca           [ 4] 	adc str_d_powers,x
ca15 : 8579             [ 3] 	sta num_a
ca17 : a57a             [ 3] 	lda num_a+1
ca19 : 7d4cca           [ 4] 	adc str_d_powers+1,x
ca1c : 857a             [ 3] 	sta num_a+1
ca1e : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
ca20 : a587             [ 3] 	lda num_tmp+2
ca22 : 6914             [ 2] 	adc #20
ca24 : 8587             [ 3] 	sta num_tmp+2
ca26 : 80d7             [ 4] 	bra str_d_process_digit
ca28 :                       str_d_digits_done
                             	; check if minus
ca28 : b285             [ 5] 	lda (num_tmp)
ca2a : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank2.s -----------------------------------

ca2c : d011             [ 3] 	bne str_d_skip_neg
ca2e : a688             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
ca30 : e002             [ 2] 	cpx #2				; else it's an error
ca32 : 9015             [ 3] 	bcc str_d_error
ca34 : a679             [ 3] 	ldx num_a
ca36 : a57a             [ 3] 	lda num_a+1
ca38 : 20afca           [ 6] 	jsr twos_complement
ca3b : 8679             [ 3] 	stx num_a
ca3d : 857a             [ 3] 	sta num_a+1
ca3f :                       str_d_skip_neg
ca3f : a688             [ 3] 	ldx num_tmp+3
ca41 : e001             [ 2] 	cpx #1				; must be at least 1 char
ca43 : 9004             [ 3] 	bcc str_d_error
ca45 : a901             [ 2] 	lda #NUM_DEC
ca47 : 18               [ 2] 	clc
ca48 : 60               [ 6] 	rts
ca49 :                       str_d_error
ca49 : 38               [ 2] 	sec
ca4a : 60               [ 6] 	rts
                             
ca4b :                       str_d_powers
ca4b : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
ca5f : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
ca73 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
ca87 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
ca9b : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
caaf :                       twos_complement
caaf : 49ff             [ 2] 	eor #0xff
cab1 : 48               [ 3] 	pha
cab2 : 8a               [ 2] 	txa
cab3 : 49ff             [ 2] 	eor #0xff
cab5 : aa               [ 2] 	tax
cab6 : 68               [ 4] 	pla
cab7 : e8               [ 2] 	inx
cab8 : d001             [ 3] 	bne twos_complement_skip_X
caba : 1a               [ 2] 	inc a
cabb :                       twos_complement_skip_X
cabb : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
cabc :                       int_to_bcd
cabc : 08               [ 3] 	php
cabd : 48               [ 3] 	pha
cabe : da               [ 3] 	phx
                             
cabf : 8685             [ 3] 	stx num_tmp
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank2.s -----------------------------------

cac1 : 8586             [ 3] 	sta num_tmp+1
cac3 : c980             [ 2] 	cmp #0x80			; Negative?
cac5 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
cac7 : 20afca           [ 6] 	jsr twos_complement
caca :                       int_to_bcd_skip_neg
caca : 6479             [ 3] 	stz num_a
cacc : 647a             [ 3] 	stz num_a+1
cace : 647b             [ 3] 	stz num_a+2
cad0 : 647c             [ 3] 	stz num_a+3
cad2 : a210             [ 2] 	ldx #16
cad4 : f8               [ 2] 	sed
cad5 :                       int_to_bcd_bit
cad5 : 0685             [ 5] 	asl num_tmp
cad7 : 2686             [ 5] 	rol num_tmp+1
cad9 : a579             [ 3] 	lda num_a
cadb : 6579             [ 3] 	adc num_a
cadd : 8579             [ 3] 	sta num_a
cadf : a57a             [ 3] 	lda num_a+1
cae1 : 657a             [ 3] 	adc num_a+1
cae3 : 857a             [ 3] 	sta num_a+1
cae5 : a57b             [ 3] 	lda num_a+2
cae7 : 657b             [ 3] 	adc num_a+2
cae9 : 857b             [ 3] 	sta num_a+2
caeb : ca               [ 2] 	dex
caec : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
caee : fa               [ 4] 	plx
caef : 68               [ 4] 	pla
caf0 : 28               [ 4] 	plp
caf1 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
caf2 :                       word_to_bcd
caf2 : 08               [ 3] 	php
caf3 : 48               [ 3] 	pha
caf4 : da               [ 3] 	phx
                             
caf5 : 8685             [ 3] 	stx num_tmp
caf7 : 8586             [ 3] 	sta num_tmp+1
caf9 : 6479             [ 3] 	stz num_a
cafb : 647a             [ 3] 	stz num_a+1
cafd : 647b             [ 3] 	stz num_a+2
caff : 647c             [ 3] 	stz num_a+3
cb01 : a210             [ 2] 	ldx #16			; 16 binary bits
cb03 : f8               [ 2] 	sed
cb04 :                       word_to_bcd_bit
cb04 : 0685             [ 5] 	asl num_tmp
cb06 : 2686             [ 5] 	rol num_tmp+1
cb08 : a579             [ 3] 	lda num_a
cb0a : 6579             [ 3] 	adc num_a
cb0c : 8579             [ 3] 	sta num_a
cb0e : a57a             [ 3] 	lda num_a+1
cb10 : 657a             [ 3] 	adc num_a+1
cb12 : 857a             [ 3] 	sta num_a+1
cb14 : a57b             [ 3] 	lda num_a+2
cb16 : 657b             [ 3] 	adc num_a+2
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank2.s -----------------------------------

cb18 : 857b             [ 3] 	sta num_a+2
cb1a : ca               [ 2] 	dex
cb1b : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
cb1d : fa               [ 4] 	plx
cb1e : 68               [ 4] 	pla
cb1f : 28               [ 4] 	plp
cb20 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
cb21 :                       int_to_str_ch
cb21 : 290f             [ 2] 	and #0xf
cb23 : 0930             [ 2] 	ora #0x30					; Convert to ascii
cb25 : 4930             [ 2] 	eor #0x30					; Check if zero digit
cb27 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
cb29 : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
cb2b : 4930             [ 2] 	eor #0x30					; Restore A
cb2d : 60               [ 6] 	rts							; Return without storing anything
cb2e :                       int_to_str_nz
cb2e : 4930             [ 2] 	eor #0x30					; Restore A
cb30 : 998900           [ 5] 	sta num_buf,y
cb33 : c8               [ 2] 	iny
cb34 : 38               [ 2] 	sec							; Set C as a non-zero encountered
cb35 :                       int_to_str_ch_fin
cb35 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
cb36 :                       int_to_str
                             	_pushAXY
                             
cb39 : a000             [ 2] 	ldy #0						; first pos of num_buf
cb3b : 0900             [ 2] 	ora #0						; Test A for sign bit
cb3d : 08               [ 3] 	php							; Remember C bit of P
cb3e : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
cb40 : 20afca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
cb43 : 48               [ 3] 	pha							; Remember A
cb44 : a92d             [ 2] 	lda #'-'					; Put in negative sign
cb46 : 8589             [ 3] 	sta num_buf
cb48 : c8               [ 2] 	iny							; Start at second buffer pos
cb49 : 68               [ 4] 	pla							; Restore A
cb4a :                       int_to_str_skip_neg
cb4a : 20f2ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
cb4d : a202             [ 2] 	ldx #2						; Start at BCD high byte
cb4f :                       int_str
cb4f : 28               [ 4] 	plp							; Get C but immediately
cb50 : 08               [ 3] 	php							; Save C (due to loop check later)
cb51 : b579             [ 4] 	lda num_a,x					; Get BCD digit
cb53 : 8590             [ 3] 	sta num_buf+7				; Save A it for the units later
cb55 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cb56 : 4a               [ 2] 	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank2.s -----------------------------------

cb57 : 4a               [ 2] 	lsr a
cb58 : 4a               [ 2] 	lsr a
cb59 : 28               [ 4] 	plp							; Get C
cb5a : 2021cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb5d : a590             [ 3] 	lda num_buf+7				; Get A for the units
cb5f : 2021cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb62 : 08               [ 3] 	php							; Save C
cb63 : ca               [ 2] 	dex
cb64 : 10e9             [ 3] 	bpl int_str
cb66 : 28               [ 4] 	plp							; Check C
cb67 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cb69 : a930             [ 2] 	lda #'0'					; Stuff a zero
cb6b : 8589             [ 3] 	sta num_buf					; Must be in first position..
cb6d : c8               [ 2] 	iny
cb6e :                       int_to_str_fin
cb6e : a900             [ 2] 	lda #0						; Terminator
cb70 : 998900           [ 5] 	sta num_buf,y
cb73 : c8               [ 2] 	iny
                             	_pullAXY
                             
cb77 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank2.s -----------------------------------

                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb78 :                       str_a_to_d
cb78 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb79 :                       print_a_to_d
cb79 : 2036cb           [ 6] 	jsr int_to_str
cb7c : a000             [ 2] 	ldy #0
cb7e :                       print_a_to_d_ch
cb7e : b98900           [ 4] 	lda num_buf,y
cb81 : f006             [ 3] 	beq print_a_to_d_fin
cb83 : 20c0c5           [ 6] 	jsr io_put_ch
cb86 : c8               [ 2] 	iny
cb87 : d0f5             [ 3] 	bne print_a_to_d_ch
cb89 :                       print_a_to_d_fin
cb89 : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cb8a :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cb8a : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cb8c : 9a               [ 2] 	txs
cb8d : 4ce8cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cb90 :                       init_2					; init_ram will jump back to here
                             	
cb90 : 2096cb           [ 6] 	jsr kernel_init
                             
cb93 : 4c0fc7           [ 3] 	jmp main
                             
cb96 :                       kernel_init
cb96 : 2062c7           [ 6] 	jsr init_nmi		; Initialise NMI handling
cb99 : 208bc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cb9c : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cb9f : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cba2 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
cba5 : 2026c5           [ 6] 	jsr _PT3INIT		; Load PT3 player code into shadow
cba8 :                       kernel_test
cba8 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cbab : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cbae : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cbb1 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cbb3 : 48               [ 3] 	pha
cbb4 : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cbb6 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cbb9 : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cbbb : aa               [ 2] 	tax					; Save the mode temporarily
cbbc : 68               [ 4] 	pla					; Get the default mode from stack
cbbd : 8a               [ 2] 	txa					; And push the NV mode that was read
cbbe : 48               [ 3] 	pha
cbbf : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cbc1 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cbc4 : 8515             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank2.s -----------------------------------

cbc6 :                       kernel_skip_nv	
cbc6 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cbc7 : 20c6c1           [ 6] 	jsr _gr_init_screen
cbca : 2086c5           [ 6] 	jsr io_init			; Set default input/output device
cbcd : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cbdb : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cbde : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cbe1 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cbe4 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cbe7 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cbe8 :                       init_ram
cbe8 : 6400             [ 3] 	stz 0x00			; Start at page 0
cbea : 6401             [ 3] 	stz 0x01
cbec : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cbee : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cbf0 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cbf2 :                       init_ram_1
cbf2 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cbf4 : 9004             [ 3] 	bcc init_ram_fill
cbf6 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cbf8 : 9005             [ 3] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cbfa :                       init_ram_fill
cbfa : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cbfc : c8               [ 2] 	iny
cbfd : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cbff :                       init_ram_skip
cbff : e8               [ 2] 	inx					; Increment page counter
cc00 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cc02 : d0ee             [ 4] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cc04 : 4c90cb           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ;* Copy code to ram_code that enables copying of 
cc07 :                       init_ram_code
cc07 : a000             [ 2] 	ldy #0
cc09 :                       ram_code_copycode
cc09 : b915cc           [ 4] 	lda ram_code_s,y
cc0c : 990c0c           [ 5] 	sta ram_code,y
cc0f : c8               [ 2] 	iny
cc10 : c025             [ 2] 	cpy #(ram_code_e-ram_code_s)
cc12 : d0f5             [ 3] 	bne ram_code_copycode
cc14 : 60               [ 6] 	rts
                             
                             ; This code gets copied to RAM to do the actual p
                             ; Stack must contain:
                             ;	101,x = disable ROM value
                             ;	102,x = original ROM value
                             ;	103,x = new RAM bank select value
                             ;	104,x = original RAM bank select value
                             ; tmp_a = address to poke to
cc15 :                       ram_code_s
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank2.s -----------------------------------

cc15 : 08               [ 3] 	php							; Save processor status
cc16 : 78               [ 2] 	sei							; Disable VDP interrupts
cc17 : 48               [ 3] 	pha
cc18 : ba               [ 2] 	tsx
cc19 : e8               [ 2] 	inx
cc1a : e8               [ 2] 	inx
cc1b : e8               [ 2] 	inx
cc1c : e8               [ 2] 	inx
cc1d : bd0101           [ 4] 	lda 0x101,x					; Get disable ROM value
cc20 : 8d8004           [ 4] 	sta IO_1+PRB				; Disable ROM
cc23 : bd0301           [ 4] 	lda 0x103,x					; Get new RAM bank select value
cc26 : 8d0004           [ 4] 	sta IO_0+PRB				; Select bank 2
cc29 : 68               [ 4] 	pla
cc2a : 9135             [ 5] 	sta (tmp_a),y				; Actually poke the byte to mem
cc2c : bd0201           [ 4] 	lda 0x102,x					; Get original ROM value
cc2f : 8d8004           [ 4] 	sta IO_1+PRB				; Enable ROM
cc32 : bd0401           [ 4] 	lda 0x104,x					; Get original RAM bank select v
cc35 : 8d0004           [ 4] 	sta IO_0+PRB				; Restore RAM bank select	
cc38 : 28               [ 4] 	plp							; Restore processor status
cc39 : 60               [ 6] 	rts
cc3a :                       ram_code_e
                             
                             
cc3a :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "sdcard\sdcard.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SDCARD.S
                             ;*  Low level SD card driver routines.  This modu
                             ;*  software bit banging through VIA 2 port B of 
                             ;*  interface.  So the card is clocked in softwar
                             ;*  not great for performance but fast enough for
                             ;*  purposes.  I think we can get around 8.5KB/s 
                             ;*  read/write speed, translating to around 5.5KB
                             ;*  throughput using the filesystem.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cc3a :                       mod_sz_sdcard_s
                             
                             ;****************************************
                             ;* init_sdcard
                             ;* Initialise SD card interface after CIA2!
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc3a :                       init_sdcard
cc3a : ad8004           [ 4] 	lda IO_1+PRB					; Detect card
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank2.s -----------------------------------

cc3d : 2904             [ 2] 	and #0x04						; Bit 2 of PRB = 0
cc3f : 853f             [ 3] 	sta sd_status
cc41 : d046             [ 3] 	bne init_sd_failed				; If not zero then no card
                             	_println sd_msg_initialising
                             
cc50 :                       init_sdcard_try
cc50 : a908             [ 2] 	lda #SD_CS						; Unselect device
cc52 : 0c8004           [ 3] 	tsb SD_REG
cc55 : a901             [ 2] 	lda #SD_CLK						; Set clock low
cc57 : 1c8004           [ 3] 	trb SD_REG
cc5a : a910             [ 2] 	lda #SD_MOSI					; DI/MOSI high
cc5c : 0c8004           [ 3] 	tsb SD_REG
cc5f : a208             [ 2] 	ldx #8							; 8*0.125ms = 1ms
cc61 : 20a5c8           [ 6] 	jsr long_delay
                             
cc64 : a208             [ 2] 	ldx #8							; 10 bytes of 0xff
cc66 : a9ff             [ 2] 	lda #0xff
cc68 :                       init_sd_pulse
cc68 : 20c1cc           [ 6] 	jsr sd_sendbyte					; Send the 0xff byte
cc6b : ca               [ 2] 	dex
cc6c : d0fa             [ 3] 	bne init_sd_pulse
cc6e : a908             [ 2] 	lda #SD_CS						; Unselect device
cc70 : 0c8004           [ 3] 	tsb SD_REG
                             
cc73 :                       init_cmd0
cc73 : 2082cd           [ 6] 	jsr sd_sendcmd0
cc76 : c9ff             [ 2] 	cmp #0xff						; 0xff is not a valid response
cc78 : d002             [ 3] 	bne init_sd_next
cc7a : f0d4             [ 3] 	beq init_sdcard_try
                             	
cc7c :                       init_sd_next
cc7c :                       init_acmd41
cc7c : 20a4cd           [ 6] 	jsr sd_sendcmd55
                             
cc7f : 20c6cd           [ 6] 	jsr sd_sendcmd41
                             	
cc82 : c900             [ 2] 	cmp #0							; Was R1 = 0
cc84 : d0f6             [ 3] 	bne init_acmd41					; Retry if not
                             	
cc86 :                       init_cmd16
cc86 : 4ce8cd           [ 3] 	jmp sd_sendcmd16
cc89 :                       init_sd_failed
                             	; Got here then the card didn't initialise
                             	_println sd_msg_failed
                             
cc96 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_startcmd
                             ;* Start a cmd frame by sending CS high to low
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc97 :                       sd_startcmd
cc97 : 48               [ 3] 	pha								; Save A
cc98 : ad0004           [ 4] 	lda IO_0 + PRB					; Get current led status
cc9b : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
cc9d : 4902             [ 2] 	eor #KB_LED0					; Switch on if C=1
cc9f : 8d0004           [ 4] 	sta IO_0 + PRB					; Set the leds
                             
cca2 : a9ff             [ 2] 	lda #0xff						; Send 0xff
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank2.s -----------------------------------

cca4 : 20c1cc           [ 6] 	jsr sd_sendbyte					; Delay / synch pulses
cca7 : 20c1cc           [ 6] 	jsr sd_sendbyte					; With CS not asserted
                             
ccaa : a908             [ 2] 	lda #SD_CS						; Chip select bit
ccac : 1c8004           [ 3] 	trb SD_REG						; Now set it low
                             
ccaf : 68               [ 4] 	pla								; Restore A
ccb0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_endcmd
                             ;* End a cmd frame by sending CS high
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ccb1 :                       sd_endcmd
ccb1 : 48               [ 3] 	pha
                             
ccb2 : ad0004           [ 4] 	lda IO_0 + PRB					; Get current led status
ccb5 : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
ccb7 : 8d0004           [ 4] 	sta IO_0 + PRB					; Set the leds
                             
ccba : a908             [ 2] 	lda #SD_CS						; Chip select bit
ccbc : 0c8004           [ 3] 	tsb SD_REG						; First set it high
                             
ccbf : 68               [ 4] 	pla
ccc0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendbyte
                             ;* Low level byte send routine
                             ;* Input : A = byte to send
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ccc1 :                       sd_sendbyte
ccc1 : 48               [ 3] 	pha
ccc2 : 5a               [ 3] 	phy
                             
ccc3 : 8535             [ 3] 	sta tmp_a						; For shifting out
                             
ccc5 : a008             [ 2] 	ldy #8							; 8 bits to shift out
ccc7 : ad8004           [ 4] 	lda SD_REG						; Load the SD register to A
ccca :                       sd_shiftoutbit
ccca : 0910             [ 2] 	ora #SD_MOSI					; And initially set output bit 
cccc : 0635             [ 5] 	asl tmp_a						; Unless the bit to transmit is '
ccce : b002             [ 3] 	bcs sd_shiftskiplo				; so then EOR the bit back
ccd0 : 4910             [ 2] 	eor #SD_MOSI
ccd2 :                       sd_shiftskiplo
ccd2 : 8d8004           [ 4] 	sta SD_REG						; Save data bit first, it seems,
                             	
ccd5 : ee8004           [ 6] 	inc SD_REG						; Set bit 1 of clock
                             ;	dec SD_REG						; Reset bit 1 of clock
ccd8 : 8d8004           [ 4] 	sta SD_REG						; Reset bit 1 of clock
                             
ccdb : 88               [ 2] 	dey								; Count bits
ccdc : d0ec             [ 3] 	bne sd_shiftoutbit				; Until no more bits to se
                             
ccde : 7a               [ 4] 	ply
ccdf : 68               [ 4] 	pla
                             
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank2.s -----------------------------------

cce0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getbyte
                             ;* Low level get a byte
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
                             
cce1 :                       sd_getbyte
cce1 : 5a               [ 3] 	phy
cce2 : da               [ 3] 	phx
                             
cce3 : ad8004           [ 4] 	lda SD_REG
cce6 : 0910             [ 2] 	ora #SD_MOSI					; Set MOSI high
cce8 : 8d8004           [ 4] 	sta SD_REG
cceb : a8               [ 2] 	tay								; Same as A with clock high
ccec : c8               [ 2] 	iny
cced : aa               [ 2] 	tax								; Same as A with clock low
                             	
                             	; Unroll the code almost 20% faster than looping
                             	; bit 7
ccee : 8c8004           [ 4] 	sty SD_REG
ccf1 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
ccf4 : 8e8004           [ 4] 	stx SD_REG
ccf7 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
ccf9 : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 6
ccfb : 8c8004           [ 4] 	sty SD_REG
ccfe : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cd01 : 8e8004           [ 4] 	stx SD_REG
cd04 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cd06 : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 5
cd08 : 8c8004           [ 4] 	sty SD_REG
cd0b : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cd0e : 8e8004           [ 4] 	stx SD_REG
cd11 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cd13 : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 4
cd15 : 8c8004           [ 4] 	sty SD_REG
cd18 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cd1b : 8e8004           [ 4] 	stx SD_REG
cd1e : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cd20 : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 3
cd22 : 8c8004           [ 4] 	sty SD_REG
cd25 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cd28 : 8e8004           [ 4] 	stx SD_REG
cd2b : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cd2d : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 2
cd2f : 8c8004           [ 4] 	sty SD_REG
cd32 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cd35 : 8e8004           [ 4] 	stx SD_REG
cd38 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cd3a : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 1
cd3c : 8c8004           [ 4] 	sty SD_REG
cd3f : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cd42 : 8e8004           [ 4] 	stx SD_REG
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank2.s -----------------------------------

cd45 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cd47 : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 0
cd49 : 8c8004           [ 4] 	sty SD_REG
cd4c : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cd4f : 8e8004           [ 4] 	stx SD_REG
cd52 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cd54 : 2635             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             
cd56 : a535             [ 3] 	lda tmp_a						; Return response in A
                             
cd58 : fa               [ 4] 	plx
cd59 : 7a               [ 4] 	ply
                             
cd5a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespbyte
                             ;* Low level get response routine
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd5b :                       sd_getrespbyte
cd5b : da               [ 3] 	phx
cd5c : a200             [ 2] 	ldx #0							; Try up to 256 times
cd5e :                       sd_respff
cd5e : e8               [ 2] 	inx								; Retry counter
cd5f : f007             [ 3] 	beq sd_resptimeout
cd61 : 20e1cc           [ 6] 	jsr sd_getbyte
cd64 : c9ff             [ 2] 	cmp #0xff						; Keep reading MISO until not FF
cd66 : f0f6             [ 3] 	beq sd_respff
cd68 :                       sd_resptimeout
cd68 : fa               [ 4] 	plx
cd69 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_busy
                             ;* Low level busy check routine
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd6a :                       sd_busy
cd6a : 48               [ 3] 	pha
cd6b : a53f             [ 3] 	lda sd_status					; If no card then fall out
cd6d : d007             [ 3] 	bne sd_isbusy_fin
cd6f :                       sd_isbusy
cd6f : 20e1cc           [ 6] 	jsr sd_getbyte
cd72 : c9ff             [ 2] 	cmp #0xff						; Keep reading MISO until FF
cd74 : d0f9             [ 3] 	bne sd_isbusy
cd76 :                       sd_isbusy_fin
cd76 : 68               [ 4] 	pla
cd77 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_waitforn0byte
                             ;* Low level routine waits for card to be ready
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank2.s -----------------------------------

cd78 :                       sd_waitforn0byte
cd78 : a53f             [ 3] 	lda sd_status
cd7a : d005             [ 3] 	bne sd_waitforn0byte_fin
cd7c : 205bcd           [ 6] 	jsr sd_getrespbyte
cd7f : f0f7             [ 3] 	beq sd_waitforn0byte					; Zero byte means not r
cd81 :                       sd_waitforn0byte_fin
cd81 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd0
                             ;* Send CMD0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd82 :                       sd_sendcmd0
cd82 : 2097cc           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40, 0x00, 0x00, 0x00, 0x00, 0x95
cd85 : a940             [ 2] 	lda #0x40
cd87 : 20c1cc           [ 6] 	jsr sd_sendbyte
cd8a : a900             [ 2] 	lda #0x00
cd8c : 20c1cc           [ 6] 	jsr sd_sendbyte
cd8f : 20c1cc           [ 6] 	jsr sd_sendbyte
cd92 : 20c1cc           [ 6] 	jsr sd_sendbyte
cd95 : 20c1cc           [ 6] 	jsr sd_sendbyte
cd98 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cd9a : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
cd9d : 200ece           [ 6] 	jsr sd_getrespR1				; Get the response
                             
cda0 : 20b1cc           [ 6] 	jsr sd_endcmd
                             	
cda3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd55
                             ;* Send CMD55
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cda4 :                       sd_sendcmd55
cda4 : 2097cc           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+55, 0x00, 0x00, 0x00, 0x00, 0x95
cda7 : a977             [ 2] 	lda #0x40+55
cda9 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdac : a900             [ 2] 	lda #0x00
cdae : 20c1cc           [ 6] 	jsr sd_sendbyte
cdb1 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdb4 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdb7 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdba : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cdbc : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
cdbf : 200ece           [ 6] 	jsr sd_getrespR1				; Get the response
                             
cdc2 : 20b1cc           [ 6] 	jsr sd_endcmd
                             	
cdc5 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
                             ;* sd_sendcmd41
                             ;* Send ACMD41
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cdc6 :                       sd_sendcmd41
cdc6 : 2097cc           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+41, 0x00, 0x00, 0x00, 0x00, 0x95
cdc9 : a969             [ 2] 	lda #0x40+41
cdcb : 20c1cc           [ 6] 	jsr sd_sendbyte
cdce : a900             [ 2] 	lda #0x00
cdd0 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdd3 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdd6 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdd9 : 20c1cc           [ 6] 	jsr sd_sendbyte
cddc : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cdde : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
cde1 : 200ece           [ 6] 	jsr sd_getrespR1				; Get the response
                             
cde4 : 20b1cc           [ 6] 	jsr sd_endcmd
                             	
cde7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd16
                             ;* Send CMD16
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cde8 :                       sd_sendcmd16
cde8 : 2097cc           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+16, 0x00, 0x00, 0x02, 0x00, 0x95
cdeb : a950             [ 2] 	lda #0x40+16
cded : 20c1cc           [ 6] 	jsr sd_sendbyte
cdf0 : a900             [ 2] 	lda #0x00
cdf2 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdf5 : 20c1cc           [ 6] 	jsr sd_sendbyte
cdf8 : a902             [ 2] 	lda #0x02						; 0x200 block size = 512 bytes
cdfa : 20c1cc           [ 6] 	jsr sd_sendbyte
cdfd : a900             [ 2] 	lda #0x00
cdff : 20c1cc           [ 6] 	jsr sd_sendbyte
ce02 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
ce04 : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
ce07 : 200ece           [ 6] 	jsr sd_getrespR1				; Get the response
                             
ce0a : 20b1cc           [ 6] 	jsr sd_endcmd
                             	
ce0d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespR1
                             ;* Low level get response R1
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
ce0e :                       sd_getrespR1
ce0e : 205bcd           [ 6] 	jsr sd_getrespbyte
ce11 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd17
                             ;* Send CMD17
                             ;* Input : sd_sect = 4 bytes of sector offset lit
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce12 :                       sd_sendcmd17
ce12 : da               [ 3] 	phx
ce13 : 48               [ 3] 	pha								; A is the page to write to
                             	
ce14 : 2097cc           [ 6] 	jsr sd_startcmd
                             
                             	; Convert sector address to byte address
                             	; Sector address is little endian
                             	; Byte address is big endian
ce17 : 6449             [ 3] 	stz sd_addr+3					; LSB of address is always 0
ce19 : a542             [ 3] 	lda sd_sect+0					; LSB of sector goes to addres
ce1b : 8548             [ 3] 	sta sd_addr+2					; Equivalent of * 256
ce1d : a543             [ 3] 	lda sd_sect+1
ce1f : 8547             [ 3] 	sta sd_addr+1
ce21 : a544             [ 3] 	lda sd_sect+2
ce23 : 8546             [ 3] 	sta sd_addr+0
ce25 : 18               [ 2] 	clc								; Now addr*2 so equiv to sect*512
ce26 : 0649             [ 5] 	asl sd_addr+3
ce28 : 2648             [ 5] 	rol sd_addr+2
ce2a : 2647             [ 5] 	rol sd_addr+1
ce2c : 2646             [ 5] 	rol sd_addr+0
                             
ce2e :                       sd_cmd17addr
                             	; Send 0x40+17, 0xA3, 0xA2, 0xA1, 0xA0, 0x95
ce2e : a951             [ 2] 	lda #0x40+17
ce30 : 20c1cc           [ 6] 	jsr sd_sendbyte
ce33 : a546             [ 3] 	lda sd_addr+0
ce35 : 20c1cc           [ 6] 	jsr sd_sendbyte
ce38 : a547             [ 3] 	lda sd_addr+1
ce3a : 20c1cc           [ 6] 	jsr sd_sendbyte
ce3d : a548             [ 3] 	lda sd_addr+2
ce3f : 20c1cc           [ 6] 	jsr sd_sendbyte
ce42 : a549             [ 3] 	lda sd_addr+3
ce44 : 20c1cc           [ 6] 	jsr sd_sendbyte
ce47 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
ce49 : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
ce4c : 205bcd           [ 6] 	jsr sd_getrespbyte
ce4f : aa               [ 2] 	tax								; Save response in X for return
                             
ce50 : 68               [ 4] 	pla								; Get the A param
ce51 : 205dce           [ 6] 	jsr sd_getrespR17				; Get the response
                             
ce54 : 206acd           [ 6] 	jsr sd_busy						; Wait for card to be ready
                             	
ce57 : 20b1cc           [ 6] 	jsr sd_endcmd
                             
ce5a : 8a               [ 2] 	txa								; Restore the response byte
ce5b : fa               [ 4] 	plx
                             	
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank2.s -----------------------------------

ce5c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespR17
                             ;* Low level get response R17
                             ;* Input : A = R1 response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce5d :                       sd_getrespR17
ce5d : 48               [ 3] 	pha
ce5e : 5a               [ 3] 	phy
                             
ce5f : a43f             [ 3] 	ldy sd_status
ce61 : d025             [ 3] 	bne sd_getrespR17_fin
                             
ce63 : 8534             [ 3] 	sta tmp_v1+1					; Page to read in to
ce65 : 6433             [ 3] 	stz tmp_v1						; Always a page boundary
ce67 :                       sd_getrespR17token
ce67 : 20e1cc           [ 6] 	jsr sd_getbyte					; Get a byte
ce6a : c9fe             [ 2] 	cmp #0xfe						; Is it the token?
ce6c : d0f9             [ 3] 	bne sd_getrespR17token			; No
                             	
ce6e : a000             [ 2] 	ldy #0							; read 1st 256 bytes
ce70 :                       sd_getrespR17block1
ce70 : 20e1cc           [ 6] 	jsr sd_getbyte					; get a byte
ce73 : 9133             [ 5] 	sta (tmp_v1),y					; Save the byte
ce75 : c8               [ 2] 	iny								; Keep going
ce76 : d0f8             [ 3] 	bne sd_getrespR17block1			; Until all bytes read
                             
ce78 : e634             [ 5] 	inc tmp_v1+1					; Next page
ce7a :                       sd_getrespR17block2
ce7a : 20e1cc           [ 6] 	jsr sd_getbyte					; get a byet
ce7d : 9133             [ 5] 	sta (tmp_v1),y					; Save the byte
ce7f : c8               [ 2] 	iny								; Keep going
ce80 : d0f8             [ 3] 	bne sd_getrespR17block2			; Until all bytes read
                             
ce82 : 20e1cc           [ 6] 	jsr sd_getbyte					; CRC
ce85 : 20e1cc           [ 6] 	jsr sd_getbyte					; CRC
                             	
ce88 :                       sd_getrespR17_fin
ce88 : 7a               [ 4] 	ply
ce89 : 68               [ 4] 	pla
                             
ce8a : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* sd_sendcmd24
                             ;* Send CMD24
                             ;* Input : sd_sect = 4 bytes of sector offset lit
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce8b :                       sd_sendcmd24
ce8b : 5a               [ 3] 	phy
ce8c : 48               [ 3] 	pha
                             
ce8d : 2097cc           [ 6] 	jsr sd_startcmd
                             
                             	; Convert sector address to byte address
                             	; Sector address is little endian
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank2.s -----------------------------------

                             	; Byte address is big endian
ce90 : 6449             [ 3] 	stz sd_addr+3					; LSB of address is always 0
ce92 : a542             [ 3] 	lda sd_sect+0					; LSB of sector goes to addres
ce94 : 8548             [ 3] 	sta sd_addr+2					; Equivalent of * 256
ce96 : a543             [ 3] 	lda sd_sect+1
ce98 : 8547             [ 3] 	sta sd_addr+1
ce9a : a545             [ 3] 	lda sd_sect+3
ce9c : 8546             [ 3] 	sta sd_addr+0
ce9e : 18               [ 2] 	clc								; Now addr*2 so equiv to sect*512
ce9f : 0649             [ 5] 	asl sd_addr+3
cea1 : 2648             [ 5] 	rol sd_addr+2
cea3 : 2647             [ 5] 	rol sd_addr+1
cea5 : 2646             [ 5] 	rol sd_addr+0
                             
                             	; Send 0x40+24, 0xA0, 0xA1, 0xA2, 0xA3, 0x95
cea7 : a958             [ 2] 	lda #0x40+24
cea9 : 20c1cc           [ 6] 	jsr sd_sendbyte
ceac : a546             [ 3] 	lda sd_addr+0
ceae : 20c1cc           [ 6] 	jsr sd_sendbyte
ceb1 : a547             [ 3] 	lda sd_addr+1
ceb3 : 20c1cc           [ 6] 	jsr sd_sendbyte
ceb6 : a548             [ 3] 	lda sd_addr+2
ceb8 : 20c1cc           [ 6] 	jsr sd_sendbyte
cebb : a549             [ 3] 	lda sd_addr+3
cebd : 20c1cc           [ 6] 	jsr sd_sendbyte
cec0 : a995             [ 2] 	lda #0x95					; Checksum needs to be right
cec2 : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
cec5 : 205bcd           [ 6] 	jsr sd_getrespbyte			; Get response
                             
cec8 : 20e1cc           [ 6] 	jsr sd_getbyte
                             	
cecb : a9fe             [ 2] 	lda #0xfe					; Start of data token
cecd : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
ced0 : 68               [ 4] 	pla							; Retrieve the address high byte
ced1 : 8534             [ 3] 	sta tmp_v1+1
ced3 : 6433             [ 3] 	stz tmp_v1					; Address is always page boundary
                             
ced5 : a000             [ 2] 	ldy #00
ced7 :                       sd_writeblock_1					; Send first 256 bytes
ced7 : b133             [ 5] 	lda (tmp_v1), y
ced9 : 20c1cc           [ 6] 	jsr sd_sendbyte
cedc : c8               [ 2] 	iny
cedd : d0f8             [ 3] 	bne sd_writeblock_1
cedf : e634             [ 5] 	inc tmp_v1+1				; Next page for second 256 bytes
cee1 :                       sd_writeblock_2					; Send second 256 bytes
cee1 : b133             [ 5] 	lda (tmp_v1), y
cee3 : 20c1cc           [ 6] 	jsr sd_sendbyte
cee6 : c8               [ 2] 	iny
cee7 : d0f8             [ 3] 	bne sd_writeblock_2
                             
cee9 : a9aa             [ 2] 	lda #0xaa					; Arbitrary CRC bytes
ceeb : 20c1cc           [ 6] 	jsr sd_sendbyte
ceee : 20c1cc           [ 6] 	jsr sd_sendbyte
                             
cef1 : 20e1cc           [ 6] 	jsr sd_getbyte				; Get data response byte
cef4 : 48               [ 3] 	pha							; Save it to return
                             
cef5 :                       sd_waitforwritecomplete
cef5 : 206acd           [ 6] 	jsr sd_busy					; Wait for card to be ready
                             	
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank2.s -----------------------------------

cef8 : 20b1cc           [ 6] 	jsr sd_endcmd				; Release the card
                             
cefb : 68               [ 4] 	pla
cefc : 7a               [ 4] 	ply
cefd : 60               [ 6] 	rts
                             
                             	
cefe :                       sd_msg_initialising
cefe : 0d496e69746961..      	db "\rInitialising SD Card\r", 0
cf15 :                       sd_msg_failed
cf15 : 0d426164206f72..      	db "\rBad or missing SD Card\r", 0
                             
cf2e :                       sd_cmd55
cf2e : 770000000095          	db (0x40+55), 0x00, 0x00, 0x00, 0x00, 0x95
cf34 :                       sd_cmd58
cf34 : 7a0000000095          	db (0x40+58), 0x00, 0x00, 0x00, 0x00, 0x95
cf3a :                       sd_acmd41
cf3a : 690000000095          	db (0x40+41), 0x00, 0x00, 0x00, 0x00, 0x95
                             	
cf40 :                       mod_sz_sdcard_e
                             
                             	include "sdcard\sd_fs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SD_FS.S
                             ;*  FAT16 filesystem module.  Implements a basic 
                             ;*  filesystem to enable mass storage support.
                             ;*  I've been a bit naughty in that I have assume
                             ;*  sd card size and sector 0 is the MBR.  This i
                             ;*  always the case, but it works for me so I cou
                             ;*  the time be asked to sort it out. I may fix t
                             ;*  more general use at some point..
                             ;*  The filesystem now supports sub directories a
                             ;*  implements the folling:
                             ;*  - load a file
                             ;*  - save a file
                             ;*  - delete a file from the card
                             ;*  - perform a directory listing
                             ;*  - change to subdirectory
                             ;*  I have to say I am pretty pleased with this, 
                             ;*  of reading and research!
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
cf40 :                       mod_sz_sd_fs_s
                             
                             	include "sdcard\sd_fs.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank2.s -----------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SD_FS.I
                             ;*  FAT16 filesystem definitions.  Nothing to see
                             ;*
                             ;************************************************
0001 =                       FS_FILEMODER    =   0x01
0080 =                       FS_FILEMODEW    =   0x80
002f =                       FS_FOLDERCH     =   '/'
                             
                             
                             ;****************************************
                             ;* init_fs
                             ;* Initialise filesystem - after sd card!
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf40 :                       init_fs
cf40 : a63f             [ 3] 	ldx sd_status
cf42 : f00e             [ 3] 	beq init_fs_do
                             	_println msg_noinit_fs
                             
cf51 : 60               [ 6] 	rts
                             
cf52 :                       init_fs_do
                             	_println msg_initialising_fs
                             
                             
                             	;Load MBR sector 0
cf5f : a203             [ 2] 	ldx #0x03					; Init sector to 0 (MBR)
cf61 :                       init_fs_clr_sect
cf61 : 7442             [ 4] 	stz sd_sect,x
cf63 : ca               [ 2] 	dex
cf64 : 10fb             [ 3] 	bpl init_fs_clr_sect
                             
cf66 : a902             [ 2] 	lda #hi(sd_buf)				; Read in to the buffer
cf68 : 2012ce           [ 6] 	jsr sd_sendcmd17			; Call read block
                             
                             	;Find sector of partition 1
cf6b : a203             [ 2] 	ldx #0x03					; Get partition 1
cf6d :                       init_fs_get_part1
cf6d : bdc603           [ 4] 	lda sd_buf+MBR_BootPart1,x
cf70 : 9542             [ 4] 	sta sd_sect,x
cf72 : 9d7e0c           [ 5] 	sta fs_bootsect,x			; This is also the 'bootsect
cf75 : ca               [ 2] 	dex
cf76 : 10f5             [ 3] 	bpl init_fs_get_part1
                             	; Get partition 1 sector
cf78 : a902             [ 2] 	lda #hi(sd_buf)				; Read in to the buffer
cf7a : 2012ce           [ 6] 	jsr sd_sendcmd17			; Call read block
                             
                             	; Calculate start of FAT tables
                             	; Assuming there are about 64k clusters
                             	; Each cluster assumed to be 32k sectors
                             	; Each sector is 512 bytes (0.5k)
                             	; Giving 64k x 32k x 0.5 ~ 1GB storage
cf7d : 18               [ 2] 	clc
cf7e : ad7e0c           [ 4] 	lda fs_bootsect
cf81 : 6d0e02           [ 4] 	adc sd_buf+MBR_ResvSect
cf84 : 8d820c           [ 4] 	sta fs_fatsect
cf87 : ad7f0c           [ 4] 	lda fs_bootsect+1
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank2.s -----------------------------------

cf8a : 6d0f02           [ 4] 	adc sd_buf+MBR_ResvSect+1
cf8d : 8d830c           [ 4] 	sta fs_fatsect+1
cf90 : 9c840c           [ 4] 	stz fs_fatsect+2
cf93 : 9c850c           [ 4] 	stz fs_fatsect+3
                             	
                             	; Calculate start of Root Directory
cf96 : ad1602           [ 4] 	lda sd_buf+MBR_SectPerFAT	; Initialise to 2 * Se
cf99 : 0a               [ 2] 	asl a
cf9a : 8d860c           [ 4] 	sta fs_rootsect
cf9d : ad1702           [ 4] 	lda sd_buf+MBR_SectPerFAT+1
cfa0 : 2a               [ 2] 	rol a
cfa1 : 8d870c           [ 4] 	sta fs_rootsect+1
cfa4 : 9c880c           [ 4] 	stz fs_rootsect+2
cfa7 : 9c890c           [ 4] 	stz fs_rootsect+3
                             
                             	; Now add FAT offset
cfaa : 18               [ 2] 	clc
cfab : a200             [ 2] 	ldx #0x00
cfad : a004             [ 2] 	ldy #4
cfaf :                       fs_init_add_fat
cfaf : bd820c           [ 4] 	lda fs_fatsect,x
cfb2 : 7d860c           [ 4] 	adc fs_rootsect,x
cfb5 : 9d860c           [ 5] 	sta fs_rootsect,x
cfb8 : e8               [ 2] 	inx
cfb9 : 88               [ 2] 	dey
cfba : d0f3             [ 3] 	bne fs_init_add_fat
                             	
                             	; Calculate start of data area
                             	; Assuming 512 root dir entries
                             	; Each entry = 32 bytes
                             	; Divided by bytes per sector
                             	; to get sector count
cfbc : a920             [ 2] 	lda #32						; (512*32)/512 = 32
cfbe : 8d8a0c           [ 4] 	sta fs_datasect
cfc1 : 9c8b0c           [ 4] 	stz fs_datasect+1
cfc4 : 9c8c0c           [ 4] 	stz fs_datasect+2
cfc7 : 9c8d0c           [ 4] 	stz fs_datasect+3
                             
                             	; Now add root directory offset
cfca : 18               [ 2] 	clc
cfcb : a200             [ 2] 	ldx #0x00
cfcd : a004             [ 2] 	ldy #4
cfcf :                       fs_init_data
cfcf : bd860c           [ 4] 	lda fs_rootsect,x
cfd2 : 7d8a0c           [ 4] 	adc fs_datasect,x
cfd5 : 9d8a0c           [ 5] 	sta fs_datasect,x
cfd8 : e8               [ 2] 	inx
cfd9 : 88               [ 2] 	dey
cfda : d0f3             [ 3] 	bne fs_init_data
                             
cfdc : 38               [ 2] 	sec							; Now subtract 2 clusters worth of sec
cfdd : ad8a0c           [ 4] 	lda fs_datasect+0			; to enable easy use of clus
cfe0 : e940             [ 2] 	sbc #0x40					; FS handling routines
cfe2 : 8d8a0c           [ 4] 	sta fs_datasect+0			; Each cluster = 32 sectors
cfe5 : ad8b0c           [ 4] 	lda fs_datasect+1			; Therefore take off 0x40 se
cfe8 : e900             [ 2] 	sbc #0
cfea : 8d8b0c           [ 4] 	sta fs_datasect+1
cfed : ad8c0c           [ 4] 	lda fs_datasect+2
cff0 : e900             [ 2] 	sbc #0
cff2 : 8d8c0c           [ 4] 	sta fs_datasect+2
cff5 : ad8d0c           [ 4] 	lda fs_datasect+3
cff8 : e900             [ 2] 	sbc #0
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank2.s -----------------------------------

cffa : 8d8d0c           [ 4] 	sta fs_datasect+3
                             
                             	; Go to root directory using zero cluster #
cffd : 646d             [ 3] 	stz fh_handle+FH_FirstClust
cfff : 646e             [ 3] 	stz fh_handle+FH_FirstClust+1
d001 : 2097d5           [ 6] 	jsr fs_chdir_direct
                             	
d004 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_getbyte_sd_buf
                             ;* Given a populated SD buffer, get byte
                             ;* Indexed by X,Y (X=lo,Y=hi) 
                             ;* Input : X,Y make 9 bit index
                             ;* Output : A=Byte
                             ;* Regs affected : None
                             ;****************************************
d005 :                       fs_getbyte_sd_buf
                             	; if bit 9<>0 then 2nd half of sd_buf
d005 : 98               [ 2] 	tya
d006 : 2901             [ 2] 	and #1
d008 : d004             [ 3] 	bne fs_getbyte_sd_buf_hi
d00a : bd0002           [ 4] 	lda sd_buf,x
d00d : 60               [ 6] 	rts
d00e :                       fs_getbyte_sd_buf_hi
d00e : bd0003           [ 4] 	lda sd_buf+0x100,x
d011 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_putbyte_sd_buf
                             ;* Given a populated SD buffer, put byte
                             ;* Indexed by X,Y (X=lo,Y=hi), A=Val 
                             ;* Input : X,Y make 9 bit index, A=byte
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d012 :                       fs_putbyte_sd_buf
d012 : 48               [ 3] 	pha
                             	; if bit 9<>0 then 2nd half of sd_buf
d013 : 98               [ 2] 	tya
d014 : 2901             [ 2] 	and #1
d016 : d005             [ 3] 	bne fs_putbyte_sd_buf_hi
d018 : 68               [ 4] 	pla
d019 : 9d0002           [ 5] 	sta sd_buf,x
d01c : 60               [ 6] 	rts
d01d :                       fs_putbyte_sd_buf_hi
d01d : 68               [ 4] 	pla
d01e : 9d0003           [ 5] 	sta sd_buf+0x100,x
d021 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_getword_sd_buf
                             ;* Given a populated SD buffer, get word
                             ;* Indexed by Y which is word aligned 
                             ;* Input : Y=Word offset in to sd_buf
                             ;* Output : X,A=Word
                             ;* Regs affected : Y
                             ;****************************************
d022 :                       fs_getword_sd_buf
d022 : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank2.s -----------------------------------

d023 : 0a               [ 2] 	asl a
d024 : a8               [ 2] 	tay
d025 : b007             [ 3] 	bcs fs_getword_sd_buf_hi
d027 : be0002           [ 4] 	ldx sd_buf,y
d02a : b90102           [ 4] 	lda sd_buf+1,y
d02d : 60               [ 6] 	rts
d02e :                       fs_getword_sd_buf_hi
d02e : be0003           [ 4] 	ldx sd_buf+0x100,y
d031 : b90103           [ 4] 	lda sd_buf+0x100+1,y
d034 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_putword_sd_buf
                             ;* Given a populated SD buffer, put word
                             ;* Indexed by Y which is word aligned 
                             ;* Input : Y=Word offset in to sd_buf
                             ;*         X,A=Word
                             ;* Regs affected : Y
                             ;****************************************
d035 :                       fs_putword_sd_buf
d035 : 48               [ 3] 	pha
d036 : 98               [ 2] 	tya
d037 : 0a               [ 2] 	asl a
d038 : a8               [ 2] 	tay
d039 : b009             [ 3] 	bcs fs_putword_sd_buf_hi
d03b : 8a               [ 2] 	txa
d03c : 990002           [ 5] 	sta sd_buf,y
d03f : 68               [ 4] 	pla
d040 : 990102           [ 5] 	sta sd_buf+1,y
d043 : 60               [ 6] 	rts
d044 :                       fs_putword_sd_buf_hi
d044 : 8a               [ 2] 	txa
d045 : 990003           [ 5] 	sta sd_buf+0x100,y
d048 : 68               [ 4] 	pla
d049 : 990103           [ 5] 	sta sd_buf+0x100+1,y
d04c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_root_start
                             ;* Initialise ready to read root directory
                             ;* Input : dirsect is current directory pointer
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d04d :                       fs_dir_root_start
                             	; Set SD sector to root directory
d04d : a203             [ 2] 	ldx #0x03
d04f :                       fs_dir_set_sd
d04f : bd8e0c           [ 4] 	lda fs_dirsect,x
d052 : 9542             [ 4] 	sta sd_sect,x
d054 : ca               [ 2] 	dex
d055 : 10f8             [ 3] 	bpl fs_dir_set_sd
                             
                             	; SD buffer is where blocks will be read to
d057 : 6440             [ 3] 	stz sd_slo
d059 : a902             [ 2] 	lda #hi(sd_buf)
d05b : 8541             [ 3] 	sta sd_shi
                             
                             	; Load up first sector in to SD buf
d05d : a902             [ 2] 	lda #hi(sd_buf)
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank2.s -----------------------------------

d05f : 2012ce           [ 6] 	jsr sd_sendcmd17
                             
d062 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper function preserving A,X,Y
d063 :                       fs_dir_root_start_w
d063 : 48               [ 3] 	pha
d064 : da               [ 3] 	phx
d065 : 5a               [ 3] 	phy
                             	
d066 : 204dd0           [ 6] 	jsr fs_dir_root_start
                             	
d069 : 7a               [ 4] 	ply
d06a : fa               [ 4] 	plx
d06b : 68               [ 4] 	pla
d06c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_find_entry
                             ;* Read directory entry
                             ;* Input : sd_slo, sd_shi : Pointer to directory 
                             ;* Input : C = 0 only find active files.  C = 1 f
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d06d :                       fs_dir_find_entry
d06d : 08               [ 3] 	php							; Save C state for checking later
d06e :                       fs_dir_check_entry
                             	; Not LFN aware
d06e : a00b             [ 2] 	ldy #FAT_Attr				; Check attribute
d070 : a9ce             [ 2] 	lda #0xce					; Any of H, S, V, I then skip
d072 : 3140             [ 5] 	and (sd_slo),y
d074 : d01a             [ 3] 	bne fs_dir_find_another
d076 : a000             [ 2] 	ldy #FAT_Name				; Examine 1st byte of name
d078 : b140             [ 5] 	lda (sd_slo),y
d07a : 28               [ 4] 	plp							; Check C
d07b : 08               [ 3] 	php
d07c : 900a             [ 3] 	bcc	fs_find_active_slot		; Looking to find an ac
d07e : c900             [ 2] 	cmp #0						; Else looking for 0 or 0xe5
d080 : f020             [ 3] 	beq fs_dir_found_empty
d082 : c9e5             [ 2] 	cmp #0xe5
d084 : f01c             [ 3] 	beq fs_dir_found_empty
d086 : 8008             [ 3] 	bra fs_dir_find_another		; Else not an entry we'
d088 :                       fs_find_active_slot
d088 : c900             [ 2] 	cmp #0
d08a : f009             [ 3] 	beq fs_dir_notfound			; If zero then no more ent
d08c : c9e5             [ 2] 	cmp #0xe5					; Deleted entry?
d08e : d008             [ 3] 	bne fs_dir_found_active
d090 :                       fs_dir_find_another
d090 : 20b2d0           [ 6] 	jsr fs_dir_next_entry		; Advance read for next i
d093 : 80d9             [ 3] 	bra fs_dir_check_entry
                             
d095 :                       fs_dir_notfound					; No more entries
d095 : 28               [ 4] 	plp							; Remove temp P from stack
d096 : 38               [ 2] 	sec							; Set carry to indicate no more
d097 : 60               [ 6] 	rts
                             
d098 :                       fs_dir_found_active
d098 : a01f             [ 2] 	ldy #FATFileDesc-1			; Cache the sd entry to fs_
d09a :                       fs_dir_copy_sd_entry_byte
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank2.s -----------------------------------

d09a : b140             [ 5] 	lda (sd_slo),y
d09c : 995e0c           [ 5] 	sta fs_direntry,y
d09f : 88               [ 2] 	dey
d0a0 : 10f8             [ 3] 	bpl fs_dir_copy_sd_entry_byte
d0a2 :                       fs_dir_found_empty
d0a2 : 20e8d0           [ 6] 	jsr fs_dir_entry_to_fhandle	; Now copy to file h
d0a5 : 28               [ 4] 	plp							; Remove temp P from stack
d0a6 : 18               [ 2] 	clc							; Clear carry to indicate found
d0a7 :                       fs_dir_fin						; Finalise
d0a7 : 60               [ 6] 	rts
                             
                             ;* Wrapper function preserving A,X,Y
d0a8 :                       fs_dir_find_entry_w
d0a8 : 48               [ 3] 	pha
d0a9 : da               [ 3] 	phx
d0aa : 5a               [ 3] 	phy
                             	
d0ab : 206dd0           [ 6] 	jsr fs_dir_find_entry
                             	
d0ae : 7a               [ 4] 	ply
d0af : fa               [ 4] 	plx
d0b0 : 68               [ 4] 	pla
d0b1 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_dir_next_entry
                             ;* Jump to next directory entry (32 bytes)
                             ;* Load next sector if required
                             ;* Input : sd_slo, sd_shi : Pointer to directory 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d0b2 :                       fs_dir_next_entry
d0b2 : 18               [ 2] 	clc							; Jump to next 32 byte entry
d0b3 : a540             [ 3] 	lda sd_slo					; Update sd_slo, sd_shi
d0b5 : 6920             [ 2] 	adc #32
d0b7 : 8540             [ 3] 	sta sd_slo
d0b9 : a541             [ 3] 	lda sd_shi
d0bb : 6900             [ 2] 	adc #0
d0bd : 8541             [ 3] 	sta sd_shi
d0bf : c904             [ 2] 	cmp #hi(sd_buf+0x200)		; If not at end of sector
d0c1 : d01a             [ 3] 	bne fs_dir_next_done		; then don't load next sec
                             
                             	; Advance the sector
d0c3 : a200             [ 2] 	ldx #0x00
d0c5 : a004             [ 2] 	ldy #0x04
d0c7 : 38               [ 2] 	sec
d0c8 :                       fs_dir_inc_sect
d0c8 : b542             [ 4] 	lda sd_sect,x
d0ca : 6900             [ 2] 	adc #0
d0cc : 9542             [ 4] 	sta sd_sect,x
d0ce : e8               [ 2] 	inx
d0cf : 88               [ 2] 	dey
d0d0 : d0f6             [ 3] 	bne fs_dir_inc_sect
                             	
                             	; Reset SD buffer  where blocks will be read to
d0d2 : 6440             [ 3] 	stz sd_slo
d0d4 : a902             [ 2] 	lda #hi(sd_buf)
d0d6 : 8541             [ 3] 	sta sd_shi
                             
d0d8 : a902             [ 2] 	lda #hi(sd_buf)				; Goes in to sd_buf
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank2.s -----------------------------------

d0da : 2012ce           [ 6] 	jsr sd_sendcmd17			; Load it
                             
d0dd :                       fs_dir_next_done
d0dd : 60               [ 6] 	rts
                             
                             ;* Wrapper function preserving A,X,Y
d0de :                       fs_dir_entry_next_w
d0de : 48               [ 3] 	pha
d0df : da               [ 3] 	phx
d0e0 : 5a               [ 3] 	phy
                             	
d0e1 : 20b2d0           [ 6] 	jsr fs_dir_next_entry
                             	
d0e4 : 7a               [ 4] 	ply
d0e5 : fa               [ 4] 	plx
d0e6 : 68               [ 4] 	pla
d0e7 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_entry_to_fhandle
                             ;* Copy directory entry from fs_direntry to fh_ha
                             ;* Input : fs_direntry (32 bytes file descriptor 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d0e8 :                       fs_dir_entry_to_fhandle
                             	;* Translate name to a string in fhandle
d0e8 : a200             [ 2] 	ldx #FH_Name				; Destination
d0ea : a000             [ 2] 	ldy #FAT_Name				; Source
d0ec :                       fs_dir_get_fs_name_ch
d0ec : b95e0c           [ 4] 	lda fs_direntry,y			; Get name char
d0ef : c920             [ 2] 	cmp #' '					; Don't copy space
d0f1 : f00e             [ 4] 	beq	fs_dir_skip_fs_name_ch
d0f3 : c008             [ 2] 	cpy #FAT_Ext				; At extension?
d0f5 : d007             [ 3] 	bne fs_dir_skip_fs_dot_ch
d0f7 : 48               [ 3] 	pha
d0f8 : a92e             [ 2] 	lda #'.'					; Inject dot into handle
d0fa : 954a             [ 4] 	sta fh_handle,x
d0fc : 68               [ 4] 	pla
d0fd : e8               [ 2] 	inx							; Advance past dot separator
d0fe :                       fs_dir_skip_fs_dot_ch
d0fe : 954a             [ 4] 	sta fh_handle,x				; Copy char to handle
d100 : e8               [ 2] 	inx							; Advance handle
d101 :                       fs_dir_skip_fs_name_ch
d101 : c8               [ 2] 	iny							; Source
d102 : c00b             [ 2] 	cpy #FAT_Attr				; Passed end of name?
d104 : d0e6             [ 4] 	bne fs_dir_get_fs_name_ch
d106 : 744a             [ 4] 	stz fh_handle,x				; Put 0 (terminator)
                             
                             	;* Attribute byte
d108 : a20d             [ 2] 	ldx #FH_Attr				; Point to where attribute will 
d10a : a00b             [ 2] 	ldy #FAT_Attr				; Point to where attribute come
d10c : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* File size
d10f : a20e             [ 2] 	ldx #FH_Size				; Point to where size will go
d111 : a01c             [ 2] 	ldy #FAT_FileSize			; Point to get size from
d113 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 4 bytes
d116 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte
d119 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte
d11c : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank2.s -----------------------------------

                             
                             	;* First cluster
d11f : a223             [ 2] 	ldx #FH_FirstClust
d121 : a01a             [ 2] 	ldy	#FAT_FirstClust
d123 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 2 bytes
d126 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* Time and date - ignore ms and use modified da
d129 : a227             [ 2] 	ldx #FH_TimeDate
d12b : 744a             [ 4] 	stz fh_handle,x
d12d : e8               [ 2] 	inx							; Skip ms to time/date 4 bytes
d12e : a016             [ 2] 	ldy	#FAT_ModTime			; Get modified time/date entr
d130 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 4 bytes (2 by
d133 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte 
d136 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte ; (2 bytes for date)
d139 : 204fd1           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             	
                             	; Meta data - remember the parent directory
d13c : a203             [ 2] 	ldx #0x03
d13e :                       fs_dir_dirsect_fh_byte
d13e : bd8e0c           [ 4] 	lda fs_dirsect,x
d141 : 9567             [ 4] 	sta fh_handle+FH_DirSect,x
d143 : ca               [ 2] 	dex
d144 : 10f8             [ 3] 	bpl fs_dir_dirsect_fh_byte
                             
                             	; Meta data - remember the offset in to the sd b
d146 : a540             [ 3] 	lda sd_slo
d148 : 856b             [ 3] 	sta fh_handle+FH_DirOffset
d14a : a541             [ 3] 	lda sd_shi
d14c : 856c             [ 3] 	sta fh_handle+FH_DirOffset+1
                             	
d14e : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_dir_entry_to_fh_byte
                             ;* Copy fs_direntry bytes to fh_handle area
                             ;* Input 	: y = offset in directory entry
                             ;*		 	: x = offset in handle entry
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d14f :                       fs_dir_entry_to_fh_byte
d14f : b95e0c           [ 4] 	lda fs_direntry,y
d152 : 954a             [ 4] 	sta fh_handle,x
d154 : c8               [ 2] 	iny
d155 : e8               [ 2] 	inx
d156 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_entry_to_sd
                             ;* Copy fs_direntry bytes to sd card area
                             ;* Index by sd_lo, sd_hi
                             ;* Input	: None
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d157 :                       fs_dir_entry_to_sd
d157 : a21f             [ 2] 	ldx #FATFileDesc-1
d159 :                       fs_dir_entry_to_sd_byte
d159 : b95e0c           [ 4] 	lda fs_direntry,y
d15c : 954a             [ 4] 	sta fh_handle,x
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank2.s -----------------------------------

d15e : c8               [ 2] 	iny
d15f : e8               [ 2] 	inx
d160 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* fs_dir_fhandle_to_entry
                             ;* Copy directory entry from fh_handle to fs_dire
                             ;* Input : fs_fhandle 
                             ;* Output : fs_direntry updated
                             ;* Regs affected : None
                             ;****************************************
d161 :                       fs_dir_fhandle_to_entry
                             	; Set to spaces (11 in total)
d161 : a00a             [ 2] 	ldy #10
d163 : a920             [ 2] 	lda #' '
d165 :                       fs_dir_clear_entry
d165 : 995e0c           [ 5] 	sta fs_direntry+FAT_Name,y
d168 : 88               [ 2] 	dey
d169 : 10fa             [ 3] 	bpl fs_dir_clear_entry
                             	;* Translate name to a string in direntry
d16b : a200             [ 2] 	ldx #FH_Name				; Source
d16d : a000             [ 2] 	ldy #FAT_Name				; Destination
d16f :                       fs_dir_get_fh_name_ch
d16f : b54a             [ 4] 	lda fh_handle,x				; Get name char
d171 : f021             [ 3] 	beq	fs_dir_do_attr			; Process attribute if end 
d173 : 206dd2           [ 6] 	jsr fs_to_upper				; Case insensitive
d176 : c92e             [ 2] 	cmp #'.'					; Extension separator?
d178 : d011             [ 3] 	bne fs_dir_skip_ext			; No, then normal char
d17a : e000             [ 2] 	cpx #0						; If dot is first char
d17c : f00d             [ 3] 	beq fs_dir_skip_ext			; Then treat as normal cha
d17e : e001             [ 2] 	cpx #1						; If dot is not second char
d180 : d004             [ 3] 	bne fs_dir_get_fh_dot		; Then treat as dot
d182 : c54a             [ 3] 	cmp fh_handle				; Was the first char dot?
d184 : f005             [ 3] 	beq fs_dir_skip_ext			; Yes then treat as normal
d186 :                       fs_dir_get_fh_dot
d186 : a008             [ 2] 	ldy #FAT_Ext				; Move to ext position
d188 : e8               [ 2] 	inx							; Jump over the dot
d189 : 80e4             [ 3] 	bra fs_dir_get_fh_name_ch	; Try more chars
d18b :                       fs_dir_skip_ext					; Normal char processing
d18b : 995e0c           [ 5] 	sta fs_direntry,y			; Save it to direntry
d18e : c8               [ 2] 	iny							; Advance entry index
d18f : e8               [ 2] 	inx							; Advance string index
d190 : c00b             [ 2] 	cpy #FAT_Attr				; All name + ext done?
d192 : d0db             [ 3] 	bne fs_dir_get_fh_name_ch	; Try for another norm
                             	;* Attribute byte
d194 :                       fs_dir_do_attr
d194 : a20d             [ 2] 	ldx #FH_Attr				; Point to where attribute will 
d196 : a00b             [ 2] 	ldy #FAT_Attr				; Point to where attribute come
d198 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* File size
d19b :                       fs_dir_fh_size
d19b : a20e             [ 2] 	ldx #FH_Size				; Point to where size will go
d19d : a01c             [ 2] 	ldy #FAT_FileSize			; Point to get size from
d19f : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte	; Copy 4 bytes
d1a2 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte
d1a5 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte
d1a8 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* First cluster
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank2.s -----------------------------------

d1ab :                       fs_dir_entry_clust
d1ab : a223             [ 2] 	ldx #FH_FirstClust
d1ad : a01a             [ 2] 	ldy	#FAT_FirstClust
d1af : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte	; Copy 2 bytes
d1b2 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* Time and date
d1b5 : a227             [ 2] 	ldx #FH_TimeDate
d1b7 : a00d             [ 2] 	ldy	#FAT_Createms
d1b9 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte	; ms
d1bc : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte ; time
d1bf : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte
d1c2 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte ; date
d1c5 : 20dad1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             	
                             	; Meta data - remember the parent directory
d1c8 : a203             [ 2] 	ldx #0x03
d1ca :                       fs_dir_fh_dirsect_byte
d1ca : b567             [ 4] 	lda fh_handle+FH_DirSect,x
d1cc : 9542             [ 4] 	sta sd_sect,x
d1ce : ca               [ 2] 	dex
d1cf : 10f9             [ 3] 	bpl fs_dir_fh_dirsect_byte
                             
                             	; Meta data - remember the offset in to the sd b
d1d1 : a56b             [ 3] 	lda fh_handle+FH_DirOffset
d1d3 : 8540             [ 3] 	sta sd_slo
d1d5 : a56c             [ 3] 	lda fh_handle+FH_DirOffset+1
d1d7 : 8541             [ 3] 	sta sd_shi
                             	
d1d9 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_dir_fh_to_entry_byte
                             ;* Copy fh_handle byte to fs_direntry area
                             ;* Input 	: y = offset in directory entry
                             ;*		 	: x = offset in handle entry
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d1da :                       fs_dir_fh_to_entry_byte
d1da : b54a             [ 4] 	lda fh_handle,x
d1dc : 995e0c           [ 5] 	sta fs_direntry,y
d1df : e8               [ 2] 	inx
d1e0 : c8               [ 2] 	iny
d1e1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_get_next_cluster
                             ;* Given current cluster, find the next
                             ;* Input : fh_handle
                             ;* Output : 
                             ;* Regs affected : None
                             ;****************************************
d1e2 :                       fs_get_next_cluster
                             	; Get the FAT sector that current clust is in
d1e2 : 2032d3           [ 6] 	jsr fs_get_FAT_clust_sect
                             
                             	; Get next from this cluster index need low byte
                             	; as each FAT cluster contains 256 cluster entri
d1e5 : a45c             [ 3] 	ldy fh_handle+FH_CurrClust
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank2.s -----------------------------------

                             	; X = Low byte, A = High byte of cluster
d1e7 : 2022d0           [ 6] 	jsr fs_getword_sd_buf
                             
                             	; Calculate the sector address and make current 
d1ea : 207fd2           [ 6] 	jsr fs_get_start_sect_data
d1ed : a920             [ 2] 	lda #0x20					; 32 sector per cluster countdown	
d1ef : 855e             [ 3] 	sta fh_handle+FH_SectCounter
                             
d1f1 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* fs_IsEOF
                             ;* End of File check (compare file pointer to fil
                             ;* Input : fh_handle
                             ;* Output : C=1 if EOF
                             ;* Regs affected : None
                             ;****************************************
d1f2 :                       fs_isEOF
d1f2 : a203             [ 2] 	ldx #0x03
d1f4 :                       fs_is_eof_cmp
d1f4 : b563             [ 4] 	lda fh_handle+FH_Pointer,x
d1f6 : d558             [ 4] 	cmp fh_handle+FH_Size,x
d1f8 : d005             [ 3] 	bne fs_notEOF
d1fa : ca               [ 2] 	dex
d1fb : 10f7             [ 3] 	bpl fs_is_eof_cmp
d1fd :                       fs_setEOF	
d1fd : 38               [ 2] 	sec							; C = 1 for EOF
d1fe : 60               [ 6] 	rts
d1ff :                       fs_notEOF	
d1ff : 18               [ 2] 	clc							; C = 0 for not EOF
d200 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper than preserves A,X,Y
d201 :                       fs_isEOF_w
d201 : 48               [ 3] 	pha
d202 : da               [ 3] 	phx
d203 : 5a               [ 3] 	phy
                             	
d204 : 20f2d1           [ 6] 	jsr fs_isEOF
                             
d207 : 7a               [ 4] 	ply
d208 : fa               [ 4] 	plx
d209 : 68               [ 4] 	pla
d20a : 60               [ 6] 	rts
                             	
                             	
                             	
                             ;****************************************
                             ;* fs_inc_pointer
                             ;* Increment file point, loading sectors and clus
                             ;* This results in sd_buf containing the sector t
                             ;* Input : fh_handle
                             ;* Output : 
                             ;* Regs affected : None
                             ;****************************************
d20b :                       fs_inc_pointer
                             	;Increment pointer
d20b : a200             [ 2] 	ldx #0x00
d20d : a004             [ 2] 	ldy #0x04
d20f : 38               [ 2] 	sec									; Always adds 1 first
d210 :                       fs_inc_pointer_byte
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank2.s -----------------------------------

d210 : b563             [ 4] 	lda fh_handle+FH_Pointer,x
d212 : 6900             [ 2] 	adc #0x00
d214 : 9563             [ 4] 	sta fh_handle+FH_Pointer,x
d216 : e8               [ 2] 	inx
d217 : 88               [ 2] 	dey
d218 : d0f6             [ 3] 	bne fs_inc_pointer_byte
                             
d21a : a563             [ 3] 	lda fh_handle+FH_Pointer			; If low order == 0
d21c : f001             [ 3] 	beq fs_inc_sector_ov				; Then sector 8 bits has
d21e :                       fs_inc_fin
d21e : 60               [ 6] 	rts
d21f :                       fs_inc_sector_ov						; Check if sector bit 8 has
d21f : a564             [ 3] 	lda fh_handle+FH_Pointer+1			; Load up next high
d221 : 2901             [ 2] 	and #1								; If bit zero = 0 then must have
d223 : d0f9             [ 3] 	bne fs_inc_fin						; overflowed.
                             	;Sector change required
d225 : a200             [ 2] 	ldx #0x00
d227 : a004             [ 2] 	ldy #0x04
d229 : 38               [ 2] 	sec									; Always adds 1 first
d22a :                       fs_inc_fh_sect
d22a : b55f             [ 4] 	lda fh_handle+FH_CurrSec,x
d22c : 6900             [ 2] 	adc #0x00
d22e : 955f             [ 4] 	sta fh_handle+FH_CurrSec,x
d230 : e8               [ 2] 	inx
d231 : 88               [ 2] 	dey
d232 : d0f6             [ 3] 	bne fs_inc_fh_sect
d234 :                       fs_inc_skip_sec_wrap
d234 : c65e             [ 5] 	dec fh_handle+FH_SectCounter		; If reached the e
d236 : d003             [ 3] 	bne fs_inc_load_sector				; Then get next cluste
                             	; Cluster change required
d238 : 20e2d1           [ 6] 	jsr fs_get_next_cluster				; Get next cluster ba
d23b :                       fs_inc_load_sector
d23b : 20f2d1           [ 6] 	jsr fs_isEOF						; Check not EOF
d23e : b003             [ 3] 	bcs fs_skip_load_sect				; if so then don't load
d240 : 20b9d2           [ 6] 	jsr fs_load_curr_sect				; Load the sector
d243 :                       fs_skip_load_sect
d243 : 60               [ 6] 	rts
                             
                             
                             	
                             ;****************************************
                             ;* fs_get_byte
                             ;* Get a byte and advance pointer
                             ;* Input : fh_handle
                             ;* Output : A = char, C = 1 (EOF or file not open
                             ;* Regs affected : None
                             ;****************************************
d244 :                       fs_get_byte
                             	; First check that file is open to read
d244 : a901             [ 2] 	lda #FS_FILEMODER
d246 : 2576             [ 3] 	and fh_handle+FH_FileMode
d248 : f005             [ 3] 	beq fs_get_set_EOF
                             
d24a : 20f2d1           [ 6] 	jsr fs_isEOF						; If at EOF then error
d24d : 9006             [ 3] 	bcc fs_get_skip_EOF
                             
d24f :                       fs_get_set_EOF
d24f : a901             [ 2] 	lda #FS_ERR_EOF
d251 : 8593             [ 3] 	sta errno
d253 : 38               [ 2] 	sec
d254 : 60               [ 6] 	rts
d255 :                       fs_get_skip_EOF
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank2.s -----------------------------------

d255 : a663             [ 3] 	ldx fh_handle+FH_Pointer			; Low 8 bits of secto
d257 : a464             [ 3] 	ldy fh_handle+FH_Pointer+1			; Which half of sec
                             	; A=SD buffer byte
d259 : 2005d0           [ 6] 	jsr fs_getbyte_sd_buf
d25c : 48               [ 3] 	pha									; Remember the byte!
d25d : 200bd2           [ 6] 	jsr fs_inc_pointer					; Increment file pointers
d260 : 68               [ 4] 	pla
                             
d261 : 18               [ 2] 	clc									; No error
d262 : 6493             [ 3] 	stz errno
d264 : 60               [ 6] 	rts
                             
                             ;* Wrapper function that preserves X,Y (A=return 
d265 :                       fs_get_byte_w
d265 : da               [ 3] 	phx
d266 : 5a               [ 3] 	phy
                             
d267 : 2044d2           [ 6] 	jsr fs_get_byte
                             	
d26a : 7a               [ 4] 	ply
d26b : fa               [ 4] 	plx
d26c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; With ASCII code in A, make upper
                             ;****************************************
d26d :                       fs_to_upper
d26d : c92f             [ 2] 	cmp #FS_FOLDERCH
d26f : d003             [ 3] 	bne fs_to_upper_nz
d271 : a900             [ 2] 	lda #0
d273 : 60               [ 6] 	rts
d274 :                       fs_to_upper_nz
d274 : c961             [ 2] 	cmp #'a'				; If >='a'
d276 : 9006             [ 3] 	bcc fs_to_upper_done
d278 : c97b             [ 2] 	cmp #'z'+1				; If <='z'
d27a : b002             [ 3] 	bcs fs_to_upper_done
d27c : e91f             [ 2] 	sbc #0x1f				; Sub 0x1f+1 (C=0)
d27e :                       fs_to_upper_done
d27e : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ; Given the cluster #, find sector #
                             ; Given clust in X,A
                             ; Outputs to fh_handle->FH_CurrSec
                             ;            fh_handle->FH_CurrClust
                             ; Special case if X,A==0 then sector is
                             ; the root sector
                             ;****************************************
d27f :                       fs_get_start_sect_data
d27f : 865c             [ 3] 	stx fh_handle+FH_CurrClust
d281 : 865f             [ 3] 	stx fh_handle+FH_CurrSec+0
d283 : 855d             [ 3] 	sta fh_handle+FH_CurrClust+1
d285 : 8560             [ 3] 	sta fh_handle+FH_CurrSec+1
                             	
                             	; If cluster # == 0 then root directory
d287 : 055f             [ 3] 	ora fh_handle+FH_CurrSec+0
d289 : f023             [ 3] 	beq fs_get_start_sect_root
                             	
                             	; Initialise to input sector
d28b : 6461             [ 3] 	stz fh_handle+FH_CurrSec+2
d28d : 6462             [ 3] 	stz fh_handle+FH_CurrSec+3
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank2.s -----------------------------------

                             	
                             	; Sector = Cluster * 32
                             	; Shift left 5 times
d28f : a005             [ 2] 	ldy #5
d291 :                       fs_get_data_sect_m5
d291 : 18               [ 2] 	clc
d292 : 065f             [ 5] 	asl fh_handle+FH_CurrSec+0
d294 : 2660             [ 5] 	rol fh_handle+FH_CurrSec+1
d296 : 2661             [ 5] 	rol fh_handle+FH_CurrSec+2
d298 : 2662             [ 5] 	rol fh_handle+FH_CurrSec+3
d29a : 88               [ 2] 	dey
d29b : d0f4             [ 3] 	bne fs_get_data_sect_m5
                             
                             	; Add data sector offset
d29d : a200             [ 2] 	ldx #0x00
d29f : a004             [ 2] 	ldy #0x04
d2a1 : 18               [ 2] 	clc
d2a2 :                       fs_get_start_data
d2a2 : b55f             [ 4] 	lda fh_handle+FH_CurrSec,x
d2a4 : 7d8a0c           [ 4] 	adc fs_datasect,x
d2a7 : 955f             [ 4] 	sta fh_handle+FH_CurrSec,x
d2a9 : e8               [ 2] 	inx
d2aa : 88               [ 2] 	dey
d2ab : d0f5             [ 3] 	bne fs_get_start_data
d2ad : 60               [ 6] 	rts
d2ae :                       fs_get_start_sect_root
d2ae : a203             [ 2] 	ldx #3
d2b0 :                       fs_get_root_sect
d2b0 : bd860c           [ 4] 	lda fs_rootsect,x
d2b3 : 955f             [ 4] 	sta fh_handle+FH_CurrSec,x
d2b5 : ca               [ 2] 	dex
d2b6 : 10f8             [ 3] 	bpl fs_get_root_sect
d2b8 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ; Load the current sector in FH
                             ;****************************************
d2b9 :                       fs_load_curr_sect
d2b9 : 48               [ 3] 	pha
d2ba : da               [ 3] 	phx
                             
d2bb : a203             [ 2] 	ldx #0x03
d2bd :                       fs_load_cpy_sect
d2bd : b55f             [ 4] 	lda fh_handle+FH_CurrSec,x
d2bf : 9542             [ 4] 	sta sd_sect,x
d2c1 : ca               [ 2] 	dex
d2c2 : 10f9             [ 3] 	bpl fs_load_cpy_sect
d2c4 : a902             [ 2] 	lda #hi(sd_buf)
d2c6 : 2012ce           [ 6] 	jsr sd_sendcmd17
                             
d2c9 : fa               [ 4] 	plx
d2ca : 68               [ 4] 	pla
d2cb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; Flush the current sector
                             ;****************************************
d2cc :                       fs_flush_curr_sect
d2cc : 48               [ 3] 	pha
d2cd : da               [ 3] 	phx
                             
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank2.s -----------------------------------

d2ce : a203             [ 2] 	ldx #0x03
d2d0 :                       fs_flush_cpy_sect
d2d0 : b55f             [ 4] 	lda fh_handle+FH_CurrSec,x
d2d2 : 9542             [ 4] 	sta sd_sect,x
d2d4 : ca               [ 2] 	dex
d2d5 : 10f9             [ 3] 	bpl fs_flush_cpy_sect
d2d7 : a902             [ 2] 	lda #hi(sd_buf)				; Sending data in sd_buf
d2d9 : 208bce           [ 6] 	jsr sd_sendcmd24
                             	
d2dc : fa               [ 4] 	plx
d2dd : 68               [ 4] 	pla
d2de : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_find_empty_clust
                             ;* Find an empty cluster to write to
                             ;* Input : None
                             ;* Output : fh_handle->FH_CurrClust is the empty 
                             ;* Regs affected : None
                             ;****************************************
d2df :                       fs_find_empty_clust
                             	; Starting at cluster 0x0002
d2df : a902             [ 2] 	lda #02
d2e1 : 855c             [ 3] 	sta fh_handle+FH_CurrClust
d2e3 : 645d             [ 3] 	stz fh_handle+FH_CurrClust+1
                             
                             	; Start at the first FAT sector
d2e5 : a203             [ 2] 	ldx #0x03
d2e7 :                       fs_find_init_fat
d2e7 : bd820c           [ 4] 	lda fs_fatsect,x
d2ea : 955f             [ 4] 	sta fh_handle+FH_CurrSec,x
d2ec : ca               [ 2] 	dex
d2ed : 10f8             [ 3] 	bpl fs_find_init_fat
                             
                             	; There is only enough room for 512/2 = 256 clus
                             	; There are 256 sectors of FAT entries
                             
d2ef :                       fs_check_empty_sector
d2ef : 20b9d2           [ 6] 	jsr fs_load_curr_sect			; Load a FAT sector
d2f2 :                       fs_check_curr_clust
d2f2 : a45c             [ 3] 	ldy fh_handle+FH_CurrClust		; Index in to this F
d2f4 : 2022d0           [ 6] 	jsr fs_getword_sd_buf
d2f7 : e000             [ 2] 	cpx #0
d2f9 : d018             [ 4] 	bne fs_next_fat_entry
d2fb : c900             [ 2] 	cmp #0
d2fd : d014             [ 4] 	bne fs_next_fat_entry
                             	
                             	; If got here then empty cluster found
                             	; fh_handle->FH_CurrClust is the empty cluster
                             	
                             	; Mark this cluster as used
d2ff : a2ff             [ 2] 	ldx #0xff
d301 : a9ff             [ 2] 	lda #0xff
d303 : 2035d0           [ 6] 	jsr fs_putword_sd_buf
                             
                             	; flush this FAT entry back so this cluster is s
d306 : 20ccd2           [ 6] 	jsr fs_flush_curr_sect
                             	
d309 : 645e             [ 3] 	stz fh_handle+FH_SectCounter	; Zero the sector c
d30b : a65c             [ 3] 	ldx fh_handle+FH_CurrClust
d30d : a55d             [ 3] 	lda fh_handle+FH_CurrClust+1
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank2.s -----------------------------------

d30f : 207fd2           [ 6] 	jsr fs_get_start_sect_data		; Initialise the sec
d312 : 60               [ 6] 	rts
                             	; If got here then need to find another cluster
d313 :                       fs_next_fat_entry
                             	_incZPWord fh_handle+FH_CurrClust	; Increment th
                             
                             	; Only 256 FAT entries in a sector of 512 bytes
d319 : a55c             [ 3] 	lda fh_handle+FH_CurrClust		; Check low byte of 
d31b : d0d5             [ 4] 	bne fs_check_curr_clust			; Else keep checking c
                             	; Every 256 FAT entries, need to get a new FAT s
d31d :                       fs_next_fat_sect
d31d : 2022d3           [ 6] 	jsr fs_inc_curr_sec				; Increment to the next F
d320 : 80cd             [ 4] 	bra fs_check_empty_sector		; Go an load the new 
                             	
                             
                             ;****************************************
                             ;* fs_inc_curr_sec
                             ;* Increment sector by 1
                             ;* Input : fh_handle has the sector
                             ;****************************************
d322 :                       fs_inc_curr_sec
                             	; add 1 to LSB as sector address is little endia
d322 : a200             [ 2] 	ldx #0x00
d324 : a004             [ 2] 	ldy #0x04
d326 : 38               [ 2] 	sec
d327 :                       fs_inc_sec_byte
d327 : b55f             [ 4] 	lda fh_handle+FH_CurrSec,x
d329 : 6900             [ 2] 	adc #0x00
d32b : 955f             [ 4] 	sta fh_handle+FH_CurrSec,x
d32d : e8               [ 2] 	inx
d32e : 88               [ 2] 	dey
d32f : d0f6             [ 3] 	bne fs_inc_sec_byte
                             
d331 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_get_FAT_clust_sect
                             ;* Given FH_CurrClust, set FH_CurrSec so that
                             ;* the sector contains the FAT entry
                             ;* Input : fh_handle has the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d332 :                       fs_get_FAT_clust_sect
                             	; Sector offset in to FAT = high byte
                             	; because a sector can hold 256 FAT entries
d332 : a55d             [ 3] 	lda fh_handle+FH_CurrClust+1
d334 : 855f             [ 3] 	sta fh_handle+FH_CurrSec
d336 : 6460             [ 3] 	stz fh_handle+FH_CurrSec+1
d338 : 6461             [ 3] 	stz fh_handle+FH_CurrSec+2
d33a : 6462             [ 3] 	stz fh_handle+FH_CurrSec+3
                             	
                             	; Add the FAT offset
d33c : 18               [ 2] 	clc
d33d : a200             [ 2] 	ldx #0x00
d33f : a004             [ 2] 	ldy #0x04
d341 :                       fs_get_add_fat
d341 : b55f             [ 4] 	lda fh_handle+FH_CurrSec,x
d343 : 7d820c           [ 4] 	adc fs_fatsect,x
d346 : 955f             [ 4] 	sta fh_handle+FH_CurrSec,x
d348 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank2.s -----------------------------------

d349 : 88               [ 2] 	dey
d34a : d0f5             [ 3] 	bne fs_get_add_fat
                             
                             	; Now load the sector containing this cluster en
d34c : 20b9d2           [ 6] 	jsr fs_load_curr_sect
                             
d34f : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_update_FAT_entry
                             ;* FH_LastClust updated with FH_CurrClust
                             ;* Input : fh_handle has the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d350 :                       fs_update_FAT_entry
d350 : 48               [ 3] 	pha
d351 : da               [ 3] 	phx
d352 : 5a               [ 3] 	phy
                             	
d353 : a55c             [ 3] 	lda fh_handle+FH_CurrClust+0	; Save current clus
d355 : 48               [ 3] 	pha
d356 : a55d             [ 3] 	lda fh_handle+FH_CurrClust+1	; Save current clus
d358 : 48               [ 3] 	pha
                             	; Move back to the last cluster entry
                             	_cpyZPWord fh_handle+FH_LastClust,fh_handle+FH_C
                             
                             
d361 : 2032d3           [ 6] 	jsr fs_get_FAT_clust_sect		; Get the FAT sector 
                             	; Index in to the FAT sector
d364 : a46f             [ 3] 	ldy fh_handle+FH_LastClust
                             	; Get current cluster hi,lo from stack
d366 : 68               [ 4] 	pla
d367 : fa               [ 4] 	plx
d368 : 865c             [ 3] 	stx fh_handle+FH_CurrClust		; Make it the curren
d36a : 855d             [ 3] 	sta fh_handle+FH_CurrClust+1	; Make it the curre
                             
                             	; Update FAT entry Y with current cluster X,A
d36c : 2035d0           [ 6] 	jsr fs_putword_sd_buf
                             
                             	; The appropriate FAT sector has been updated
                             	; Now flush that sector back	
d36f : 20ccd2           [ 6] 	jsr fs_flush_curr_sect
                             	
d372 : 7a               [ 4] 	ply
d373 : fa               [ 4] 	plx
d374 : 68               [ 4] 	pla
d375 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_put_byte
                             ;* Put out a byte, incrementing size
                             ;* and committing clusters as necessary
                             ;* including reflecting this in the FAT table
                             ;* Input : fh_handle has the details, A = Byte to
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d376 :                       fs_put_byte
d376 : 48               [ 3] 	pha			; Save A until needed later
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank2.s -----------------------------------

                             	; First check that file is open to write
d377 : a980             [ 2] 	lda #FS_FILEMODEW
d379 : 2576             [ 3] 	and fh_handle+FH_FileMode
d37b : d003             [ 3] 	bne fs_put_skip_err
                             	; C=1 means error
d37d : 68               [ 4] 	pla
d37e : 38               [ 2] 	sec
d37f : 60               [ 6] 	rts
d380 :                       fs_put_skip_err
                             	; Before writing a byte, need to check if the cu
                             	; sector is full.
                             	; Check low 9 bits of size and if zero size (i.e
d380 : a558             [ 3] 	lda fh_handle+FH_Size
d382 : d024             [ 3] 	bne fs_put_do_put
d384 : a559             [ 3] 	lda fh_handle+FH_Size+1
d386 : f020             [ 3] 	beq fs_put_do_put
d388 : 2901             [ 2] 	and #1
d38a : d01c             [ 3] 	bne fs_put_do_put
                             	; Got here then current sector is full
                             	; We need to flush this sector to disk
d38c : 20ccd2           [ 6] 	jsr fs_flush_curr_sect
                             	; Move to next sector in the cluster
d38f : 2022d3           [ 6] 	jsr fs_inc_curr_sec
                             	; Bump the sector counter
d392 : e65e             [ 5] 	inc fh_handle+FH_SectCounter
                             	; Check if counter at sectors per cluster limit
d394 : a55e             [ 3] 	lda fh_handle+FH_SectCounter
d396 : c920             [ 2] 	cmp #0x20
d398 : d00e             [ 3] 	bne fs_put_do_put
                             	; We need to find a new cluster now
                             	; But first update the FAT chain
                             	; so that the last cluster points to this
d39a : 2050d3           [ 6] 	jsr fs_update_FAT_entry
                             	; Before finding a new cluster
                             	; make the current the last
                             	_cpyZPWord fh_handle+FH_CurrClust,fh_handle+FH_L
                             
                             	; Go find a new empty clust
                             	; starts at sector 0
d3a5 : 20dfd2           [ 6] 	jsr fs_find_empty_clust
                             	; Finally, can write a byte to the
                             	; SD buffer in memory
d3a8 :                       fs_put_do_put	
d3a8 : a658             [ 3] 	ldx fh_handle+FH_Size			; Load size low as index
d3aa : a459             [ 3] 	ldy fh_handle+FH_Size+1			; Check which half
d3ac : 68               [ 4] 	pla								; Get A off stack
d3ad : 2012d0           [ 6] 	jsr fs_putbyte_sd_buf
d3b0 :                       fs_put_inc_size
d3b0 : 38               [ 2] 	sec
d3b1 : a200             [ 2] 	ldx #0x00
d3b3 : a004             [ 2] 	ldy #0x04
d3b5 :                       fs_put_inc_size_byte
d3b5 : b558             [ 4] 	lda fh_handle+FH_Size,x
d3b7 : 6900             [ 2] 	adc #0
d3b9 : 9558             [ 4] 	sta fh_handle+FH_Size,x
d3bb : e8               [ 2] 	inx
d3bc : 88               [ 2] 	dey
d3bd : d0f6             [ 3] 	bne fs_put_inc_size_byte
d3bf :                       fs_put_fin
d3bf : 18               [ 2] 	clc
d3c0 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank2.s -----------------------------------

                             
                             ;* Wrapper function to save A,X,Y
d3c1 :                       fs_put_byte_w
d3c1 : da               [ 3] 	phx
d3c2 : 5a               [ 3] 	phy
d3c3 : 48               [ 3] 	pha
                             
d3c4 : 2076d3           [ 6] 	jsr fs_put_byte
                             	
d3c7 : 68               [ 4] 	pla
d3c8 : 7a               [ 4] 	ply
d3c9 : fa               [ 4] 	plx
d3ca : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_save_entry
                             ;* Save dir entry back to disk
                             ;* Input : fh_handle has all the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d3cb :                       fs_dir_save_entry
                             	; Retrieve the sector where the file entry goes
d3cb : a203             [ 2] 	ldx #0x03
d3cd :                       fs_dir_curr_sect
d3cd : b567             [ 4] 	lda fh_handle+FH_DirSect,x
d3cf : 955f             [ 4] 	sta fh_handle+FH_CurrSec,x
d3d1 : ca               [ 2] 	dex
d3d2 : 10f9             [ 3] 	bpl fs_dir_curr_sect
                             	
d3d4 : 20b9d2           [ 6] 	jsr fs_load_curr_sect
                             
                             	; Restore index in to the correct entry
d3d7 : a56b             [ 3] 	lda fh_handle+FH_DirOffset
d3d9 : 8540             [ 3] 	sta sd_slo
d3db : a56c             [ 3] 	lda fh_handle+FH_DirOffset+1
d3dd : 8541             [ 3] 	sta sd_shi
                             	
                             	; Copy FAT file desc cache to sd position
d3df : a01f             [ 2] 	ldy #FATFileDesc-1			; Cache the fs_direntry sd_
d3e1 :                       fs_dir_copy_entry_sd_byte
d3e1 : b95e0c           [ 4] 	lda fs_direntry,y
d3e4 : 9140             [ 5] 	sta (sd_slo),y
d3e6 : 88               [ 2] 	dey
d3e7 : 10f8             [ 3] 	bpl fs_dir_copy_entry_sd_byte
                             	
                             	; Now flush this back to disk
                             	
d3e9 : 20ccd2           [ 6] 	jsr fs_flush_curr_sect
                             	
                             	; Phew we are done
d3ec : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_find_named
                             ;* Find named file in current directory
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d3ed :                       fs_find_named
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank2.s -----------------------------------

d3ed : 18               [ 2] 	clc								; Find active file
d3ee : 206dd0           [ 6] 	jsr fs_dir_find_entry			; Find entry from curren
d3f1 : b01c             [ 4] 	bcs	fs_name_not_found			; If C then no more entr
d3f3 : a000             [ 2] 	ldy #0							; Index to filespec
d3f5 : a200             [ 2] 	ldx #0							; Index to filename
d3f7 :                       fs_find_check_name
d3f7 : b177             [ 5] 	lda (fh_handle+FH_FSpecPtr),y	; File spec char
d3f9 : 206dd2           [ 6] 	jsr fs_to_upper					; Case insensitive
d3fc : d54a             [ 4] 	cmp fh_handle,x					; compare with this filehand
d3fe : d008             [ 4] 	bne fs_find_next
d400 : c900             [ 2] 	cmp #0							; If no more bytes in name to check
d402 : f009             [ 3] 	beq fs_name_found
d404 : e8               [ 2] 	inx
d405 : c8               [ 2] 	iny
d406 : 80ef             [ 4] 	bra fs_find_check_name
d408 :                       fs_find_next
d408 : 20b2d0           [ 6] 	jsr fs_dir_next_entry			; Get next entry to chec
d40b : 80e0             [ 4] 	bra fs_find_named
d40d :                       fs_name_found
d40d : 18               [ 2] 	clc								; C=0 file found
                             	; Y=index to terminating ch, A=terminating ch
d40e : 60               [ 6] 	rts
d40f :                       fs_name_not_found					; If C already set then not
d40f : 38               [ 2] 	sec
d410 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_open_read
                             ;* Open a file for reading
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d411 :                       fs_open_read
d411 : 204dd0           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
d414 : 20edd3           [ 6] 	jsr fs_find_named			; Try to find the file
d417 : b01a             [ 3] 	bcs fs_open_not_found		; C=1 not found
d419 :                       fs_open_found
d419 : a920             [ 2] 	lda #0x20					; 32 sector per cluster countdown	
d41b : 855e             [ 3] 	sta fh_handle+FH_SectCounter
                             
d41d : a66d             [ 3] 	ldx fh_handle+FH_FirstClust	; Load up first clus
d41f : a56e             [ 3] 	lda fh_handle+FH_FirstClust+1
                             
d421 : 207fd2           [ 6] 	jsr fs_get_start_sect_data	; Calc the first sect
d424 : 20b9d2           [ 6] 	jsr fs_load_curr_sect		; Load it in to sd_buf
                             
                             
d427 : a203             [ 2] 	ldx #0x03					; Initialise pointer to beginning
d429 :                       fs_open_init_pointer
d429 : 7463             [ 4] 	stz fh_handle+FH_Pointer,x
d42b : ca               [ 2] 	dex
d42c : 10fb             [ 3] 	bpl fs_open_init_pointer
                             
                             	; Set file mode to read
d42e : a901             [ 2] 	lda #FS_FILEMODER
d430 : 8576             [ 3] 	sta fh_handle+FH_FileMode
                             
d432 : 18               [ 2] 	clc
d433 :                       fs_open_not_found
d433 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank2.s -----------------------------------

                             
                             ;* Wrapper function that saves A,X,Y *
                             ;* X,A = file spec ptr
d434 :                       fs_open_read_w
d434 : 48               [ 3] 	pha
d435 : da               [ 3] 	phx
d436 : 5a               [ 3] 	phy
                             
                             	; Save file name pointer
d437 : 8677             [ 3] 	stx fh_handle+FH_FSpecPtr
d439 : 8578             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d43b : 2011d4           [ 6] 	jsr fs_open_read
                             	
d43e : 7a               [ 4] 	ply
d43f : fa               [ 4] 	plx
d440 : 68               [ 4] 	pla
d441 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_stamptimedate
                             ;* Stamp date and time to fhandle
                             ;* Input : None (reads RTC)
                             ;* Output : None
                             ;* Regs affected : all
                             ;****************************************
d442 :                       fs_stamptimedate
                             	; Point to temp space
d442 : a294             [ 2] 	ldx #lo(fs_scratch)
d444 : a90c             [ 2] 	lda #hi(fs_scratch)
                             	; Get the current time and date - 6 bytes
d446 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Now convert from hhmmssddmmyy format to FAT16
                             	; Byte bit and byte order as follows
                             	; byte 0 = milliseconds
                             	; byte 1 = mmmsssss
                             	; byte 2 = hhhhhmmm
                             	; byte 3 = MMMDDDDD
                             	; byte 4 = YYYYYYYM
                             	; First decide on milliseconds
d449 : a200             [ 2] 	ldx #0								; Assume 0 milliseconds
d44b : ad960c           [ 4] 	lda fs_scratch+2					; Seconds
d44e : 2901             [ 2] 	and #1
d450 : d002             [ 3] 	bne fs_stamptimedate_ms
d452 : a264             [ 2] 	ldx #100							; 10x100 milliseconds = 1 second
d454 :                       fs_stamptimedate_ms
d454 : 8671             [ 3] 	stx fh_handle+FH_TimeDate			; Save milliseconds
                             	
d456 : ad940c           [ 4] 	lda fs_scratch+0					; Get hours
d459 : 0a               [ 2] 	asl a								; Move to top 5 bits
d45a : 0a               [ 2] 	asl a
d45b : 0a               [ 2] 	asl a
d45c : 8573             [ 3] 	sta fh_handle+FH_TimeDate+2			; Put in time fiel
                             
d45e : ad950c           [ 4] 	lda fs_scratch+1					; Get minutes
d461 : 4a               [ 2] 	lsr a								; Put top 3 bits in to LSB
d462 : 4a               [ 2] 	lsr a
d463 : 4a               [ 2] 	lsr a
d464 : 0573             [ 3] 	ora fh_handle+FH_TimeDate+2			; Combine with hou
d466 : 8573             [ 3] 	sta fh_handle+FH_TimeDate+2			; Put in time fiel
                             
d468 : ad950c           [ 4] 	lda fs_scratch+1					; Get minutes
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank2.s -----------------------------------

d46b : 0a               [ 2] 	asl a								; Get bottom 3 bits of mins to top 
d46c : 0a               [ 2] 	asl a
d46d : 0a               [ 2] 	asl a
d46e : 0a               [ 2] 	asl a
d46f : 0a               [ 2] 	asl a
d470 : 8572             [ 3] 	sta fh_handle+FH_TimeDate+1			; Save in time fie
                             	
d472 : ad960c           [ 4] 	lda fs_scratch+2					; Get seconds again
d475 : 4a               [ 2] 	lsr a								; Divide by 2
d476 : 0572             [ 3] 	ora fh_handle+FH_TimeDate+1			; Combine with tim
d478 : 8572             [ 3] 	sta fh_handle+FH_TimeDate+1			; Save back to tim
                             	
d47a : ad990c           [ 4] 	lda fs_scratch+5					; Get year
d47d : 18               [ 2] 	clc									; Add 20 to get offset from 1980
d47e : 6914             [ 2] 	adc #20
d480 : 0a               [ 2] 	asl a								; Shift up
d481 : 8575             [ 3] 	sta fh_handle+FH_TimeDate+4			; Put in date fiel
                             
d483 : ad980c           [ 4] 	lda fs_scratch+4					; Get months
d486 : 4a               [ 2] 	lsr a								; Bit 3 in to bit 0
d487 : 4a               [ 2] 	lsr a
d488 : 4a               [ 2] 	lsr a
d489 : 0575             [ 3] 	ora fh_handle+FH_TimeDate+4			; Combine with dat
d48b : 8575             [ 3] 	sta fh_handle+FH_TimeDate+4			; Put in date fiel
                             
d48d : ad980c           [ 4] 	lda fs_scratch+4					; Get months
d490 : 0a               [ 2] 	asl a								; 3 LSBs in to MSB of A (discard MS
d491 : 0a               [ 2] 	asl a
d492 : 0a               [ 2] 	asl a
d493 : 0a               [ 2] 	asl a
d494 : 0a               [ 2] 	asl a
d495 : 0d970c           [ 4] 	ora fs_scratch+3					; Combine with day
d498 : 8574             [ 3] 	sta fh_handle+FH_TimeDate+3			; And save in date
                             
d49a : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_create_filedir
                             ;* Create a file or directory
                             ;* Input : fh_handle has the name and type attrib
                             ;*		 : new file / directory will be created.
                             ;*		 : Careful to check filename is *unique*
                             ;*		 : before calling this routine.
                             ;*		 : File will be in write mode, needs to be
                             ;*		 : closed to be properly saved
                             ;*		 : C=0 means file, C=1 meand directory
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d49b :                       fs_create_filedir
d49b : 48               [ 3] 	pha
d49c : da               [ 3] 	phx
d49d : 5a               [ 3] 	phy
d49e : 08               [ 3] 	php							; Save file or dir request for later
                             
d49f : 204dd0           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
d4a2 : 38               [ 2] 	sec							; Find an empty file entry
d4a3 : 206dd0           [ 6] 	jsr fs_dir_find_entry		; Find a valid entry
d4a6 : b036             [ 3] 	bcs	fs_create_fd_err		; Error, didn't find!
                             
d4a8 : a900             [ 2] 	lda #0						; Assume creating file
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank2.s -----------------------------------

d4aa : 28               [ 4] 	plp							; Unless C=1
d4ab : 9002             [ 3] 	bcc fh_create_skip_dir
                             	; Set attribute for directory
d4ad : a910             [ 2] 	lda #FAT_Attr_Dir
d4af :                       fh_create_skip_dir
d4af : 8557             [ 3] 	sta fh_handle+FH_Attr
                             
                             	; Copy filespec to file handle
d4b1 : a000             [ 2] 	ldy #0
d4b3 : a200             [ 2] 	ldx #FH_Name
d4b5 :                       fs_create_copy_fspec
d4b5 : b177             [ 5] 	lda (fh_handle+FH_FSpecPtr),y
d4b7 : 954a             [ 4] 	sta fh_handle,x
d4b9 : f004             [ 3] 	beq fs_create_copy_fspec_done
d4bb : e8               [ 2] 	inx
d4bc : c8               [ 2] 	iny
d4bd : 80f6             [ 3] 	bra fs_create_copy_fspec
                             
d4bf :                       fs_create_copy_fspec_done
d4bf : 6458             [ 3] 	stz fh_handle+FH_Size+0		; Size is zero
d4c1 : 6459             [ 3] 	stz fh_handle+FH_Size+1
d4c3 : 645a             [ 3] 	stz fh_handle+FH_Size+2
d4c5 : 645b             [ 3] 	stz fh_handle+FH_Size+3
                             
d4c7 : 2042d4           [ 6] 	jsr fs_stamptimedate		; Put date time stamp in t
                             	
d4ca : 20dfd2           [ 6] 	jsr fs_find_empty_clust		; Find + record its fir
                             	
                             	; Set current, last and first cluster to the sam
d4cd : a55c             [ 3] 	lda fh_handle+FH_CurrClust
d4cf : 856d             [ 3] 	sta fh_handle+FH_FirstClust
d4d1 : 856f             [ 3] 	sta fh_handle+FH_LastClust
d4d3 : a55d             [ 3] 	lda fh_handle+FH_CurrClust+1
d4d5 : 856e             [ 3] 	sta fh_handle+FH_FirstClust+1
d4d7 : 8570             [ 3] 	sta fh_handle+FH_LastClust+1
                             
                             	; Set file mode to write
d4d9 : a980             [ 2] 	lda #FS_FILEMODEW
d4db : 8576             [ 3] 	sta fh_handle+FH_FileMode
                             
d4dd : 18               [ 2] 	clc
d4de :                       fs_create_fd_err
d4de : 7a               [ 4] 	ply
d4df : fa               [ 4] 	plx
d4e0 : 68               [ 4] 	pla
d4e1 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_create_dirptr
                             ;* Create a file that is a pointer to a directory
                             ;* Input : fh_handle has the name and type attrib
                             ;*		 : Entry will be created pointing tp the
                             ;*		 : cluster in FH_CurrClust.
                             ;*		 : Careful to check filename is *unique*
                             ;*		 : before calling this routine.
                             ;*		 : File will be in write mode, needs to be
                             ;*		 : closed to be properly saved
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d4e2 :                       fs_create_dirptr
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank2.s -----------------------------------

d4e2 : a910             [ 2] 	lda #FAT_Attr_Dir
d4e4 : 8557             [ 3] 	sta fh_handle+FH_Attr		; Make it a directory
                             
d4e6 : 6458             [ 3] 	stz fh_handle+FH_Size+0		; Size is zero
d4e8 : 6459             [ 3] 	stz fh_handle+FH_Size+1
d4ea : 645a             [ 3] 	stz fh_handle+FH_Size+2
d4ec : 645b             [ 3] 	stz fh_handle+FH_Size+3
                             
d4ee : 18               [ 2] 	clc
d4ef : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_open_write
                             ;* Open a file for writing
                             ;* Input : fh_handle has the name
                             ;*		 : existing file will overwritten
                             ;*		 : new file will be created
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d4f0 :                       fs_open_write
                             	; try and delete any file with the same name fir
d4f0 : 2052d5           [ 6] 	jsr fs_delete
d4f3 : 18               [ 2] 	clc
d4f4 : 209bd4           [ 6] 	jsr fs_create_filedir		; Ok go create this file 
                             
d4f7 : 60               [ 6] 	rts
                             
                             ;* Wrapper function that saves A,X,Y *
d4f8 :                       fs_open_write_w
d4f8 : 48               [ 3] 	pha
d4f9 : da               [ 3] 	phx
d4fa : 5a               [ 3] 	phy
                             
d4fb : 8677             [ 3] 	stx fh_handle+FH_FSpecPtr
d4fd : 8578             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d4ff : 20f0d4           [ 6] 	jsr fs_open_write
                             	
d502 : 7a               [ 4] 	ply
d503 : fa               [ 4] 	plx
d504 : 68               [ 4] 	pla
d505 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_close_filedir
                             ;* Close a file/dir, important for new files
                             ;* Input : fh_handle details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d506 :                       fs_close_filedir
                             	; Only need to close down stuff in write mode
d506 : a576             [ 3] 	lda fh_handle+FH_FileMode
                             	; Zero out file mode
d508 : 6476             [ 3] 	stz fh_handle+FH_FileMode
                             	; If filemode N bit clear then done
d50a : 103b             [ 3] 	bpl fs_close_done
                             		
                             	; Flush the current sector
d50c : 20ccd2           [ 6] 	jsr fs_flush_curr_sect
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank2.s -----------------------------------

                             
                             	; Update the chain from the last cluster
d50f : 2050d3           [ 6] 	jsr fs_update_FAT_entry
                             
                             	; Make current sector = last
d512 : a55c             [ 3] 	lda fh_handle+FH_CurrClust
d514 : 856f             [ 3] 	sta fh_handle+FH_LastClust
d516 : a55d             [ 3] 	lda fh_handle+FH_CurrClust+1
d518 : 8570             [ 3] 	sta fh_handle+FH_LastClust+1
                             	; Need to update the FAT entry
                             	; to show this cluster is last
d51a : a9ff             [ 2] 	lda #0xff
d51c : 855c             [ 3] 	sta fh_handle+FH_CurrClust
d51e : 855d             [ 3] 	sta fh_handle+FH_CurrClust+1
                             	; Now update the FAT entry to mark the last clus
d520 : 2050d3           [ 6] 	jsr fs_update_FAT_entry
                             	; Then finally save the directory entry
                             	; First fhandle to FATFileDesc
d523 : 2061d1           [ 6] 	jsr fs_dir_fhandle_to_entry
                             
                             	; Update modified date and time to be same as cr
d526 : ad6e0c           [ 4] 	lda fs_direntry+FAT_CreateDate
d529 : 8d760c           [ 4] 	sta fs_direntry+FAT_ModDate
d52c : 8d700c           [ 4] 	sta fs_direntry+FAT_AccessDate
d52f : ad6f0c           [ 4] 	lda fs_direntry+FAT_CreateDate+1
d532 : 8d770c           [ 4] 	sta fs_direntry+FAT_ModDate+1
d535 : 8d710c           [ 4] 	sta fs_direntry+FAT_AccessDate+1
d538 : ad6c0c           [ 4] 	lda fs_direntry+FAT_CreateTime
d53b : 8d740c           [ 4] 	sta fs_direntry+FAT_ModTime
d53e : ad6d0c           [ 4] 	lda fs_direntry+FAT_CreateTime+1
d541 : 8d750c           [ 4] 	sta fs_direntry+FAT_ModTime+1
                             	
d544 : 20cbd3           [ 6] 	jsr fs_dir_save_entry
                             
d547 :                       fs_close_done
d547 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper function preserving A,X,Y *
d548 :                       fs_close_w
d548 : 48               [ 3] 	pha
d549 : da               [ 3] 	phx
d54a : 5a               [ 3] 	phy
                             	
d54b : 2006d5           [ 6] 	jsr fs_close_filedir
                             	
d54e : 7a               [ 4] 	ply
d54f : fa               [ 4] 	plx
d550 : 68               [ 4] 	pla
d551 : 60               [ 6] 	rts
                             	
                             	
                             
                             
                             ;****************************************
                             ;* fs_delete
                             ;* Delete a file
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d552 :                       fs_delete
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank2.s -----------------------------------

d552 : 2011d4           [ 6] 	jsr fs_open_read			; Try and open the file
d555 : b031             [ 3] 	bcs fs_delete_fin			; If not found then fin
                             	
                             	; Mark first char with deleted indicator
d557 : a9e5             [ 2] 	lda #0xe5
d559 : 854a             [ 3] 	sta fh_handle+FH_Name
                             
                             	; Save this back to directory table
                             	; First fhandle to FATFileDesc
d55b : 2061d1           [ 6] 	jsr fs_dir_fhandle_to_entry	
d55e : 20cbd3           [ 6] 	jsr fs_dir_save_entry
                             
                             	; Now mark all related clusters as free
d561 : a66d             [ 3] 	ldx fh_handle+FH_FirstClust
d563 : 865c             [ 3] 	stx fh_handle+FH_CurrClust
d565 : a46e             [ 3] 	ldy fh_handle+FH_FirstClust+1
d567 : 845d             [ 3] 	sty fh_handle+FH_CurrClust+1
d569 :                       fs_delete_clust
                             	; X and Y always contain current cluster
                             	; Make last = current
d569 : 866f             [ 3] 	stx fh_handle+FH_LastClust
d56b : 8470             [ 3] 	sty fh_handle+FH_LastClust+1
                             
                             	; Given current cluster, find next
                             	; save in X,Y
d56d : 20e2d1           [ 6] 	jsr fs_get_next_cluster
                             	; load X,Y with the next cluster
d570 : a65c             [ 3] 	ldx fh_handle+FH_CurrClust
d572 : a45d             [ 3] 	ldy fh_handle+FH_CurrClust+1
                             	
                             	; Zero out the cluster number
d574 : 645c             [ 3] 	stz fh_handle+FH_CurrClust
d576 : 645d             [ 3] 	stz fh_handle+FH_CurrClust+1
                             
                             	; Update FAT entry of Last Cluster with zero
d578 : 2050d3           [ 6] 	jsr fs_update_FAT_entry
                             
                             	; Restore the next cluster found earlier
d57b : 865c             [ 3] 	stx fh_handle+FH_CurrClust
d57d : 845d             [ 3] 	sty fh_handle+FH_CurrClust+1
                             
                             	; If the next cluster is not 0xffff
                             	; then continue
d57f : e0ff             [ 2] 	cpx #0xff
d581 : d0e6             [ 3] 	bne fs_delete_clust
d583 : c0ff             [ 2] 	cpy #0xff
d585 : d0e2             [ 3] 	bne fs_delete_clust
d587 : 18               [ 2] 	clc
d588 :                       fs_delete_fin
d588 : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d589 :                       fs_delete_w
d589 : 48               [ 3] 	pha
d58a : da               [ 3] 	phx
d58b : 5a               [ 3] 	phy
                             
d58c : 8677             [ 3] 	stx fh_handle+FH_FSpecPtr
d58e : 8578             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d590 : 2052d5           [ 6] 	jsr fs_delete
                             	
d593 : 7a               [ 4] 	ply
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank2.s -----------------------------------

d594 : fa               [ 4] 	plx
d595 : 68               [ 4] 	pla
d596 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* fs_chdir_direct
                             ;* Change root directory directly using cluster
                             ;* Input : FH_FirstClust has cluster number of di
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d597 :                       fs_chdir_direct
                             	; Calculate sector from this directory cluster
d597 : a66d             [ 3] 	ldx fh_handle+FH_FirstClust
d599 : a56e             [ 3] 	lda fh_handle+FH_FirstClust+1
                             	
                             	; Also record the directory cluster #
d59b : 8e920c           [ 4] 	stx fs_dirclust
d59e : 8d930c           [ 4] 	sta fs_dirclust+1
                             	
d5a1 : 207fd2           [ 6] 	jsr fs_get_start_sect_data	; Calc the first sect
                             	
d5a4 : a203             [ 2] 	ldx #3						; Copy sector to dirsect
d5a6 :                       fs_chdir_direct_sect
d5a6 : b55f             [ 4] 	lda fh_handle+FH_CurrSec,x
d5a8 : 9d8e0c           [ 5] 	sta fs_dirsect,x
d5ab : ca               [ 2] 	dex
d5ac : 10f8             [ 3] 	bpl fs_chdir_direct_sect
d5ae : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_chdir
                             ;* Change root directory
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d5af :                       fs_chdir
d5af : b277             [ 5] 	lda (fh_handle+FH_FSpecPtr)		; First byte of nam
d5b1 : f004             [ 3] 	beq fs_chdir_root				; If zero then goto root fo
d5b3 : c92f             [ 2] 	cmp #FS_FOLDERCH				; Is it '/'
d5b5 : d016             [ 3] 	bne fs_chdir_find				; If not then find the file
d5b7 :                       fs_chdir_root
d5b7 : 48               [ 3] 	pha								; Remember the 1st char
d5b8 : 646d             [ 3] 	stz fh_handle+FH_FirstClust		; Else use zero to 
d5ba : 646e             [ 3] 	stz fh_handle+FH_FirstClust+1
d5bc : 2097d5           [ 6] 	jsr fs_chdir_direct
d5bf : 68               [ 4] 	pla								; If 1st char is zero then done
d5c0 : f029             [ 3] 	beq fs_chdir_fin
d5c2 : 18               [ 2] 	clc								; Add 1 to filespec pointer base
d5c3 : a577             [ 3] 	lda fh_handle+FH_FSpecPtr
d5c5 : 6901             [ 2] 	adc #1
d5c7 : 8577             [ 3] 	sta fh_handle+FH_FSpecPtr
d5c9 : a578             [ 3] 	lda fh_handle+FH_FSpecPtr+1
d5cb : 8578             [ 3] 	sta fh_handle+FH_FSpecPtr+1
                             	; Drop through to processing rest of file spec
                             	
d5cd :                       fs_chdir_find
d5cd : 204dd0           [ 6] 	jsr fs_dir_root_start			; Start at root of curre
d5d0 : 20edd3           [ 6] 	jsr fs_find_named				; Try to find the file
d5d3 : b017             [ 3] 	bcs fs_chdir_not_found			; C=1 not found
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank2.s -----------------------------------

d5d5 : 5a               [ 3] 	phy								; Remember where we got to in filespe
d5d6 : 2097d5           [ 6] 	jsr fs_chdir_direct				; Go to the found folder
d5d9 : 7a               [ 4] 	ply
d5da : b177             [ 5] 	lda (fh_handle+FH_FSpecPtr),y	; What was the las
d5dc : f00d             [ 3] 	beq fs_chdir_fin				; If an actual zero then we'
d5de : c8               [ 2] 	iny								; Else move past '/'
d5df : 98               [ 2] 	tya								; Pull index but into A
d5e0 : 18               [ 2] 	clc								; Add this index to filespec pointer 
d5e1 : 6577             [ 3] 	adc fh_handle+FH_FSpecPtr
d5e3 : 8577             [ 3] 	sta fh_handle+FH_FSpecPtr
d5e5 : a578             [ 3] 	lda fh_handle+FH_FSpecPtr+1
d5e7 : 8578             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d5e9 : 80e2             [ 3] 	bra fs_chdir_find				; And go and try to navigat
                             
d5eb :                       fs_chdir_fin
d5eb : 18               [ 2] 	clc
d5ec :                       fs_chdir_not_found
d5ec : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d5ed :                       fs_chdir_w
d5ed : 48               [ 3] 	pha
d5ee : da               [ 3] 	phx
d5ef : 5a               [ 3] 	phy
                             	
d5f0 : 8677             [ 3] 	stx fh_handle+FH_FSpecPtr
d5f2 : 8578             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d5f4 : 20afd5           [ 6] 	jsr fs_chdir
                             	
d5f7 : 7a               [ 4] 	ply
d5f8 : fa               [ 4] 	plx
d5f9 : 68               [ 4] 	pla
d5fa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_mkdir
                             ;* Create a file
                             ;* Input : fh_handle has the name
                             ;*		 : checks if file already exists
                             ;*		 : new directory will be created
                             ;*       : including . and .. entries
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d5fb :                       fs_mkdir
d5fb : 204dd0           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
                             
                             	; If file or directory with same name exists, th
d5fe : 20edd3           [ 6] 	jsr fs_find_named			; Try to find the file
d601 : b002             [ 3] 	bcs fs_mkdir_ok				; C=1 then no file found - ok
                             
d603 : 38               [ 2] 	sec							; Indicate fail
d604 : 60               [ 6] 	rts
                             
d605 :                       fs_mkdir_ok	
                             	; Remember parent directory ".." cluster #
d605 : ad920c           [ 4] 	lda fs_dirclust
d608 : 48               [ 3] 	pha
d609 : ad930c           [ 4] 	lda fs_dirclust+1
d60c : 48               [ 3] 	pha
                             
d60d : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank2.s -----------------------------------

d60e : 209bd4           [ 6] 	jsr fs_create_filedir		; Go create the directory
d611 : 2006d5           [ 6] 	jsr fs_close_filedir		; Commit
                             	
                             	; Remember this directory "." cluster #
d614 : a56d             [ 3] 	lda fh_handle+FH_FirstClust
d616 : 48               [ 3] 	pha
d617 : a56e             [ 3] 	lda fh_handle+FH_FirstClust+1
d619 : 48               [ 3] 	pha
                             	
                             	; Need to zero the directory cluster
                             	; First create a zero filled buffer 512 bytes
d61a : a900             [ 2] 	lda #0
d61c : aa               [ 2] 	tax
d61d : a000             [ 2] 	ldy #0
d61f :                       fs_mkdir_zero_sector
d61f : 2012d0           [ 6] 	jsr fs_putbyte_sd_buf
d622 : ca               [ 2] 	dex 
d623 : d0fa             [ 3] 	bne fs_mkdir_zero_sector
d625 : c8               [ 2] 	iny
d626 : c002             [ 2] 	cpy #2
d628 : d0f5             [ 3] 	bne fs_mkdir_zero_sector
                             	; Now fill a cluster's worth of sectors with zer
                             	; Cluster = 16k, buffer = 512 bytes => 32 sector
                             	
                             	; Get directory cluster # in to X,A and calculat
d62a : a66d             [ 3] 	ldx fh_handle+FH_FirstClust
d62c : a56e             [ 3] 	lda fh_handle+FH_FirstClust+1
d62e : 207fd2           [ 6] 	jsr fs_get_start_sect_data
                             	
                             	; Now write cluster worth of sectors
d631 : a220             [ 2] 	ldx #32
d633 :                       fs_mkdir_zero_cluster
d633 : da               [ 3] 	phx
d634 : 20ccd2           [ 6] 	jsr fs_flush_curr_sect
d637 : 2022d3           [ 6] 	jsr fs_inc_curr_sec
d63a : fa               [ 4] 	plx
d63b : ca               [ 2] 	dex
d63c : d0f5             [ 3] 	bne fs_mkdir_zero_cluster
                             	
                             	; Goto newly created directory (it's empty)
                             	; Use cluster number
d63e : 20afd5           [ 6] 	jsr fs_chdir
d641 : 204dd0           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
                             	; Go and find first available slot in directory 
d644 : 38               [ 2] 	sec
d645 : 206dd0           [ 6] 	jsr fs_dir_find_entry
                             	; Restore current directory cluster - it's rever
d648 : 68               [ 4] 	pla
d649 : 856e             [ 3] 	sta fh_handle+FH_FirstClust+1
d64b : 68               [ 4] 	pla
d64c : 856d             [ 3] 	sta fh_handle+FH_FirstClust
d64e : 20e2d4           [ 6] 	jsr fs_create_dirptr		; Go create the '.' file e
                             	; Create name for entry "."
d651 : a92e             [ 2] 	lda #'.'
d653 : 854a             [ 3] 	sta fh_handle+0
d655 : 644b             [ 3] 	stz fh_handle+1
                             	; Convert fhandle to FATFileDesc
d657 : 2061d1           [ 6] 	jsr fs_dir_fhandle_to_entry	
d65a : 20cbd3           [ 6] 	jsr fs_dir_save_entry		; Save it to to the direc
                             
                             	; Go and find next available slot in directory C
d65d : 20b2d0           [ 6] 	jsr fs_dir_next_entry
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank2.s -----------------------------------

d660 : 38               [ 2] 	sec
d661 : 206dd0           [ 6] 	jsr fs_dir_find_entry
                             	; Restore parent directory cluster - it's revers
d664 : 68               [ 4] 	pla
d665 : 856e             [ 3] 	sta fh_handle+FH_FirstClust+1
d667 : 68               [ 4] 	pla
d668 : 856d             [ 3] 	sta fh_handle+FH_FirstClust
d66a : 20e2d4           [ 6] 	jsr fs_create_dirptr		; Go create the '..' file 
                             	; Create name for entry ".."
d66d : a92e             [ 2] 	lda #'.'
d66f : 854a             [ 3] 	sta fh_handle+0
d671 : 854b             [ 3] 	sta fh_handle+1
d673 : 644c             [ 3] 	stz fh_handle+2
                             	; Convert fhandle to FATFileDesc
d675 : 2061d1           [ 6] 	jsr fs_dir_fhandle_to_entry	
d678 : 20cbd3           [ 6] 	jsr fs_dir_save_entry		; Save it to to the direc
                             
                             	; FH_FirstClust points to parent - go to it
d67b : 2097d5           [ 6] 	jsr fs_chdir_direct
                             	
d67e : 18               [ 2] 	clc							; Indicate success
                             
d67f :                       fs_mkdir_fin
d67f : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d680 :                       fs_mkdir_w
d680 : 48               [ 3] 	pha
d681 : da               [ 3] 	phx
d682 : 5a               [ 3] 	phy
                             	
d683 : 8677             [ 3] 	stx fh_handle+FH_FSpecPtr
d685 : 8578             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d687 : 20fbd5           [ 6] 	jsr fs_mkdir
                             
d68a : 7a               [ 4] 	ply
d68b : fa               [ 4] 	plx
d68c : 68               [ 4] 	pla
d68d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_fhandle_to_str
                             ;* Unpack contents of fhandle to a string 
                             ;* Input : fs_fhandle, A,X=pointer to string
                             ;* Output : 43 bytes of string (inc, zero pointer
                             ;* Column	Len	Offset	Desc
                             ;*	name	12	0 		8.3 space padded to right
                             ;*	type	3	13		DIR if directory else FIL
                             ;*	date	8	19		DD/MM/YY
                             ;*	time	8	28		hh/mm/ss
                             ;*	size	5	37		right justified no leading zeros
                             ;* Regs affected : None
                             ;****************************************
d68e :                       fs_dir_str
d68e : 444952                	db "DIR"
d691 :                       fs_dir_fil
d691 : 202020                	db "   "
d694 :                       fs_dir_fhandle_str
d694 : 8633             [ 3] 	stx tmp_v1
d696 : 8534             [ 3] 	sta tmp_v1+1
                             	; Put zero terminator at pos 41
d698 : a028             [ 2] 	ldy #40
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank2.s -----------------------------------

d69a : a900             [ 2] 	lda #0
d69c : 9133             [ 5] 	sta (tmp_v1),y
                             	; Pre-fill with spaces
d69e : 88               [ 2] 	dey
d69f : a920             [ 2] 	lda #' '
d6a1 :                       fs_dir_fhandle_pad_spc
d6a1 : 9133             [ 5] 	sta (tmp_v1),y
d6a3 : 88               [ 2] 	dey
d6a4 : 10fb             [ 3] 	bpl fs_dir_fhandle_pad_spc
                             	; Put '/' separator for date
d6a6 : a92f             [ 2] 	lda #'/'
d6a8 : a013             [ 2] 	ldy #19
d6aa : 9133             [ 5] 	sta (tmp_v1),y
d6ac : a016             [ 2] 	ldy #22
d6ae : 9133             [ 5] 	sta (tmp_v1),y
                             	; Put ':' separator for time
d6b0 : a93a             [ 2] 	lda #':'
d6b2 : a01c             [ 2] 	ldy #28
d6b4 : 9133             [ 5] 	sta (tmp_v1),y
d6b6 : a01f             [ 2] 	ldy #31
d6b8 : 9133             [ 5] 	sta (tmp_v1),y
                             	;* Unpack name - copy 8.3 (12 chars) until zero
d6ba : a200             [ 2] 	ldx #FH_Name				; Source
d6bc : a000             [ 2] 	ldy #0						; Name offset
d6be :                       fs_dir_fhandle_name
d6be : b54a             [ 4] 	lda fh_handle,x				; Get name char
d6c0 : f00b             [ 3] 	beq	fs_dir_fhandle_dotype	; Process attribute if
d6c2 : 206dd2           [ 6] 	jsr fs_to_upper				; Case insensitive
d6c5 : 9133             [ 5] 	sta (tmp_v1),y
d6c7 : e8               [ 2] 	inx
d6c8 : c8               [ 2] 	iny
d6c9 : c00c             [ 2] 	cpy #12
d6cb : d0f1             [ 3] 	bne fs_dir_fhandle_name		; Max 12 chars for a fi
d6cd :                       fs_dir_fhandle_dotype
d6cd : a557             [ 3] 	lda fh_handle+FH_Attr		; Check the type
d6cf : a00d             [ 2] 	ldy #13						; Point to column for type
d6d1 : a200             [ 2] 	ldx #0						; Point to DIR string
d6d3 : c910             [ 2] 	cmp #FAT_Attr_Dir			; Directory?
d6d5 : f002             [ 3] 	beq fs_dir_fhandle_type
d6d7 : a203             [ 2] 	ldx #3						; Point to FIL string
d6d9 :                       fs_dir_fhandle_type				; copy 3 chars
d6d9 : bd8ed6           [ 4] 	lda fs_dir_str,x
d6dc : 9133             [ 5] 	sta (tmp_v1),y
d6de : e8               [ 2] 	inx
d6df : c8               [ 2] 	iny
d6e0 : c010             [ 2] 	cpy #16
d6e2 : d0f5             [ 3] 	bne fs_dir_fhandle_type
                             
                             	;* Date
                             	; Extract year
d6e4 : a575             [ 3] 	lda fh_handle+FH_TimeDate+4 ; Top 7 bits is year
d6e6 : 4a               [ 2] 	lsr a
d6e7 : 38               [ 2] 	sec							; Remove offset from 1980 (-20)
d6e8 : e914             [ 2] 	sbc #20
d6ea : a017             [ 2] 	ldy #23						; Save to date field
d6ec : 205ed7           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract month
d6ef : a575             [ 3] 	lda fh_handle+FH_TimeDate+4 ; Bottom bit is bit 
d6f1 : 4a               [ 2] 	lsr a						; Put in to C
d6f2 : a574             [ 3] 	lda fh_handle+FH_TimeDate+3	; Top 3 bits are mon
d6f4 : 6a               [ 2] 	ror a						; Rotate in C for bit 3 (now have 4 b
d6f5 : 4a               [ 2] 	lsr a						; Bring to low nibble
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank2.s -----------------------------------

d6f6 : 4a               [ 2] 	lsr a
d6f7 : 4a               [ 2] 	lsr a
d6f8 : 4a               [ 2] 	lsr a
d6f9 : a014             [ 2] 	ldy #20						; Month field position
d6fb : 205ed7           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract days
d6fe : a574             [ 3] 	lda fh_handle+FH_TimeDate+3 ; Bottom bottom 5 bi
d700 : 291f             [ 2] 	and #0x1f					; So mask that
d702 : a011             [ 2] 	ldy #17						; Day field position
d704 : 205ed7           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             
                             	;* Time
                             	; Extract hours
d707 : a573             [ 3] 	lda fh_handle+FH_TimeDate+2	; Ignore ms. Top5 bi
d709 : 4a               [ 2] 	lsr a
d70a : 4a               [ 2] 	lsr a
d70b : 4a               [ 2] 	lsr a
d70c : a01a             [ 2] 	ldy #26						; Hours field
d70e : 205ed7           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract minutes
d711 : a572             [ 3] 	lda fh_handle+FH_TimeDate+1	; Top 3 bits is bit 
d713 : 4a               [ 2] 	lsr a						; Shift it to bottom
d714 : 4a               [ 2] 	lsr a
d715 : 4a               [ 2] 	lsr a
d716 : 4a               [ 2] 	lsr a
d717 : 4a               [ 2] 	lsr a
d718 : 8d940c           [ 4] 	sta fs_scratch				; Save partial result
d71b : a573             [ 3] 	lda fh_handle+FH_TimeDate+2	; Bottom 3 bits is b
d71d : 2907             [ 2] 	and #0x07					; Mask for those bits
d71f : 0a               [ 2] 	asl a						; Shift up in to position 3,4,5
d720 : 0a               [ 2] 	asl a
d721 : 0a               [ 2] 	asl a
d722 : 0d940c           [ 4] 	ora fs_scratch				; Combine with top 3 bits
d725 : a01d             [ 2] 	ldy #29						; Minutes field
d727 : 205ed7           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract seconds
d72a : a572             [ 3] 	lda fh_handle+FH_TimeDate+1	; Bottom 5 bits is s
d72c : 291f             [ 2] 	and #0x1f					; Mask for those
d72e : 0a               [ 2] 	asl a						; x2
d72f : a020             [ 2] 	ldy #32						; Seconds field
d731 : 205ed7           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract size
d734 : a559             [ 3] 	lda fh_handle+FH_Size+1		; Only taking 16 bits o
d736 : a658             [ 3] 	ldx fh_handle+FH_Size+0		; X=Low
d738 : 20f2ca           [ 6] 	jsr word_to_bcd				; X,A to BCD in num_a (3 byte
d73b : a57b             [ 3] 	lda num_a+2					; 100k and 10k digits
d73d : a023             [ 2] 	ldy #35						; Position of size field
d73f : 2074d7           [ 6] 	jsr fs_util_num_bcd_a		; Put only 10k digit
d742 : a57a             [ 3] 	lda num_a+1					; 1k and hundreds digits
d744 : 2066d7           [ 6] 	jsr fs_util_num_bcd_xa		; Put digits in AX
d747 : a579             [ 3] 	lda num_a+0					; tens and units digits
d749 : 2066d7           [ 6] 	jsr fs_util_num_bcd_xa		; Put digits in AX
d74c : a023             [ 2] 	ldy #35						; Check for leading zeros
d74e :                       fs_dir_fhandle_zeros
d74e : b133             [ 5] 	lda (tmp_v1),y
d750 : c930             [ 2] 	cmp #'0'
d752 : d009             [ 3] 	bne fs_dir_fhandle_done
d754 : a920             [ 2] 	lda #' '
d756 : 9133             [ 5] 	sta (tmp_v1),y
d758 :                       fs_dir_fhandle_zskip
d758 : c8               [ 2] 	iny
d759 : c027             [ 2] 	cpy #39						; Last zero can stay
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank2.s -----------------------------------

d75b : d0f1             [ 3] 	bne fs_dir_fhandle_zeros
                             	; byte 0 = milliseconds
                             	; byte 1 = mmmsssss
                             	; byte 2 = hhhhhmmm
                             	; byte 3 = MMMDDDDD
                             	; byte 4 = YYYYYYYM
d75d :                       fs_dir_fhandle_done
d75d : 60               [ 6] 	rts
                             
d75e :                       fs_util_num_bcd
d75e : aa               [ 2] 	tax							; Only can do 00-99
d75f : a900             [ 2] 	lda #0						; So high byte = 0
d761 : 20f2ca           [ 6] 	jsr word_to_bcd				; X,A to BCD in num_a
d764 : a579             [ 3] 	lda num_a+0					; Two least significant BCD digi
d766 :                       fs_util_num_bcd_xa				; Enter here if bcd convers
d766 : 48               [ 3] 	pha
d767 : aa               [ 2] 	tax							; X contains this
d768 : 68               [ 4] 	pla							; Two least significant BCD digits (00
d769 : 4a               [ 2] 	lsr a						; Get tens digit 
d76a : 4a               [ 2] 	lsr a
d76b : 4a               [ 2] 	lsr a
d76c : 4a               [ 2] 	lsr a
d76d : 18               [ 2] 	clc
d76e : 6930             [ 2] 	adc #'0'					; Convert to ascii
d770 : 9133             [ 5] 	sta (tmp_v1),y				; Save in string position (2 c
d772 : c8               [ 2] 	iny
d773 : 8a               [ 2] 	txa
d774 :                       fs_util_num_bcd_a				; Enter here if only units n
d774 : 290f             [ 2] 	and #0x0f					; Get units digit
d776 : 18               [ 2] 	clc
d777 : 6930             [ 2] 	adc #'0'					; Convert to ascii
d779 : 9133             [ 5] 	sta (tmp_v1),y
d77b : c8               [ 2] 	iny
d77c : 60               [ 6] 	rts
                             
                             
                             	
d77d :                       msg_initialising_fs
d77d : 4d6f756e74696e..      	db "Mounting filesystem\r\r",0
d793 :                       msg_noinit_fs
d793 : 4e6f2066696c65..      	db "No filesystem available\r\r",0
d7ad :                       mod_sz_sd_fs_e
                             
                             
                             	; End of Code
d7ad :                       _code_end
d7ad :                       _bank2_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
