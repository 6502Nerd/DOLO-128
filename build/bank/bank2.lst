AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank2.s -----------------------------------

5747 lines read, no errors in pass 1.
c000 =                       _bank2_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank2.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank2.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank2.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank2.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank2.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank2.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank2.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank2.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank2.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank2.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank2.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank2.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank2.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank2.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank2.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank2.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank2.s -----------------------------------

                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank2.s -----------------------------------

008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank2.s -----------------------------------

                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank2.s -----------------------------------

0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : fbc6                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : e8ca                  	fcw init			; 0xfffc : Reset Vector
fffe : 38c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
c000 : 40                    	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank2.s -----------------------------------

                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c60c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c5dc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4cf0c5           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c2ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c37c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c99c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c41c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4cfdc5           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c15c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f1e1, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d785, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d515, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d5a8, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d4b1, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d470, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d18d, 2
                             
c0d6 :                       _fs_open_read_w
                              _bankjsr $d35c, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d420, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank2.s -----------------------------------

c106 :                       _fs_put_byte_w
                              _bankjsr $d2e9, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $cfd0, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d006, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $cf8b, 2
                             
c166 :                       _get_byte
                              _bankjsr $d1d5, 0
                             
c17e :                       _put_byte
                              _bankjsr $d1ea, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e290, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e29d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $dd59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d1f7, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d182, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d1b3, 0
                             
c226 :                       _init_fs
                              _bankjsr $ce68, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cb62, 2
                             
c256 :                       _init_snd
                              _bankjsr $d5c0, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d209, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d218, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d283, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cb6b, 0
                             
c2ce :                       _gr_cls
                              _bankjsr $dd6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $dd16, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank2.s -----------------------------------

                             
c2fe :                       _gr_line
                              _bankjsr $e0ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $df0a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e015, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ddd7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $de15, 0
                             
c376 :                       _gr_point
                              _bankjsr $debb, 0
                             
c38e :                       _gr_get
                              _bankjsr $ddf2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $ddfa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d5b9, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c699, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c641, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c637, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c62a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $db00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d3df, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d545, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d496, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d5b0, 0
                             
c4ae :                       _rtc_nvwrite
                              _bankjsr $d598, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d5bc, 2
                             
c4de :                       _sd_sendcmd17
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank2.s -----------------------------------

                              _bankjsr $cd3a, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $cdb3, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cb62, 0
                             
c526 :                       mod_sz_autogen_e
                             
                             	
c526 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c526 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c526 :                       io_init
c526 : a900             [ 2] 	lda #0				; Assume it's serial
c528 : 48               [ 3] 	pha
c529 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c52c : 2910             [ 2] 	and #0x10
c52e : d00b             [ 3] 	bne io_init_set_default
c530 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c533 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c535 : f004             [ 3] 	beq io_init_set_default
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank2.s -----------------------------------

                             	; Else set to KB/screen for IO
c537 : 68               [ 4] 	pla
c538 : a901             [ 2] 	lda #1
c53a : 48               [ 3] 	pha
c53b :                       io_init_set_default
c53b : 68               [ 4] 	pla
c53c : 8d000c           [ 4] 	sta io_default
c53f : 4c42c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c542 :                       io_set_default			; Entry point for default
c542 : ad000c           [ 4] 	lda io_default
c545 :                       io_active_device		; Entry point for A set
c545 : 0a               [ 2] 	asl	a				; x16 the Block number
c546 : 0a               [ 2] 	asl a
c547 : 0a               [ 2] 	asl a
c548 : 0a               [ 2] 	asl a
c549 : a8               [ 2] 	tay
c54a : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c54c :                       io_copy_data
c54c : b9c0c5           [ 4] 	lda io_devices,y
c54f : 9d010c           [ 5] 	sta io_block,x
c552 : c8               [ 2] 	iny
c553 : e8               [ 2] 	inx
c554 : e010             [ 2] 	cpx #io_struct
c556 : d0f4             [ 3] 	bne io_copy_data
                             	
c558 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c55a : 854a             [ 3] 	sta buf_ef
c55c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c55d :                       io_get_ch
c55d : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c560 :                       io_put_ch
c560 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank2.s -----------------------------------

                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c563 :                       io_open_read
c563 : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c566 :                       io_open_write
c566 : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c569 :                       io_close
c569 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c56c :                       io_delete
c56c : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c56f :                       io_read_line
c56f : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c571 : 8548             [ 3] 	sta buf_adr+1
c573 : 8449             [ 3] 	sty buf_sz			; Max length
c575 : 08               [ 3] 	php					; Save echo state
c576 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c578 :                       io_get_line_byte
c578 : 38               [ 2] 	sec					; Getting bytes synchronously
c579 : 205dc5           [ 6] 	jsr io_get_ch		; Get a byte
c57c : b026             [ 3] 	bcs io_get_line_done; Got nothing then finish
c57e : 28               [ 4] 	plp					; Get echo state
c57f : 08               [ 3] 	php					; Instantly save it back
c580 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c582 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c584 : d005             [ 3] 	bne io_do_echo
c586 : c000             [ 2] 	cpy #0				; Already at beginning?
c588 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank2.s -----------------------------------

c58a : 88               [ 2] 	dey					; Else decrement length
c58b :                       io_do_echo
c58b : 2060c5           [ 6] 	jsr io_put_ch		; Echo it
c58e :                       io_skip_echo
c58e : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c590 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c592 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c594 : f003             [ 3] 	beq io_skip_special
c596 : 9147             [ 5] 	sta (buf_adr),y		; Save it
c598 : c8               [ 2] 	iny					; Increase length
c599 :                       io_skip_special
c599 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c59b : f007             [ 3] 	beq io_get_line_done	; If yes then done
c59d : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c59f : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c5a1 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c5a2 : 38               [ 2] 	sec					; Yes, set carry flag
c5a3 : 60               [ 6] 	rts					; And done
c5a4 :                       io_get_line_done
c5a4 : a900             [ 2] 	lda #0
c5a6 : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c5a8 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c5a9 : 18               [ 2] 	clc					; Clear carry flag
c5aa : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c5ab :                       io_print_line
c5ab : 48               [ 3] 	pha
                             
c5ac : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c5ae : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c5b0 : a000             [ 2] 	ldy #0						; Start at the beginning!
c5b2 :                       io_print_line_byte
c5b2 : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c5b4 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c5b6 : 2060c5           [ 6] 	jsr io_put_ch				; Transmit
c5b9 : c8               [ 2] 	iny
c5ba : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c5bc :                       io_print_done
c5bc : 68               [ 4] 	pla
c5bd : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c5be :                       io_null_op
c5be : 18               [ 2] 	clc
c5bf : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c5c0 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c5c0 :                       io_device0					; Serial device, input = Ser, outp
c5c0 : 66c1                  	dw	_get_byte			; io_get_ch
c5c2 : 7ec1                  	dw	_put_byte			; io_put_ch
c5c4 : bec5                  	dw	io_null_op			; io_open_r
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank2.s -----------------------------------

c5c6 : bec5                  	dw	io_null_op			; io_open_w
c5c8 : bec5                  	dw	io_null_op			; io_close_f
c5ca : bec5                  	dw	io_null_op			; io_del_f
c5cc : bec5                  	dw	io_null_op			; io_ext1
c5ce : bec5                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c5d0 :                       io_device1					; Default device, input = screen e
c5d0 : 96c1                  	dw	_gr_get_key			; io_get_ch
c5d2 : aec1                  	dw	_gr_put_byte		; io_put_ch
c5d4 : bec5                  	dw	io_null_op			; io_open_r
c5d6 : bec5                  	dw	io_null_op			; io_open_w
c5d8 : bec5                  	dw	io_null_op			; io_close_f
c5da : bec5                  	dw	io_null_op			; io_del_f
c5dc : bec5                  	dw	io_null_op			; io_ext1
c5de : bec5                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c5e0 :                       io_device2					; SD device, input = SD, output = 
c5e0 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c5e2 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c5e4 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c5e6 : eec0                  	dw	_fs_open_write_w	; io_open_w
c5e8 : a6c0                  	dw	_fs_close_w			; io_close_f
c5ea : 8ec0                  	dw	_fs_delete_w		; io_del_f
c5ec : bec5                  	dw	io_null_op			; io_ext1
c5ee : bec5                  	dw	io_null_op			; io_ext2
                             
c5f0 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5f0 :                       vdp_wr_reg
c5f0 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5f3 : ea               [ 2] 	nop
c5f4 : ea               [ 2] 	nop
c5f5 : 0980             [ 2] 	ora #0x80
c5f7 : 8d0105           [ 4] 	sta VDP_MODE1
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank2.s -----------------------------------

c5fa : 4980             [ 2] 	eor #0x80
c5fc : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5fd :                       vdp_wr_addr
c5fd : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c600 : ea               [ 2] 	nop
c601 : ea               [ 2] 	nop
c602 : ea               [ 2] 	nop
c603 : 0940             [ 2] 	ora #0x40		; Required by VDP
c605 : 8d0105           [ 4] 	sta VDP_MODE1
c608 : 4940             [ 2] 	eor #0x40		; Undo that bit
c60a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c60b :                       vdp_mem_wait
c60b : da               [ 3] 	phx								; 3
c60c : a616             [ 3] 	ldx vdp_delay					; 3
c60e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c610 :                       vdp_mem_wait_loop
c610 : ca               [ 2] 	dex								; 2
c611 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c613 :                       vdp_mem_wait_end
c613 : fa               [ 4] 	plx								; 3
c614 : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c615 :                       vdp_rd_addr
c615 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c618 : ea               [ 2] 	nop
c619 : ea               [ 2] 	nop
c61a : ea               [ 2] 	nop
c61b : 8d0105           [ 4] 	sta VDP_MODE1
c61e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank2.s -----------------------------------

                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c620 :                       vdp_rd_vram
c620 : ad0005           [ 4] 	lda VDP_VRAM
c623 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c625 :                       vdp_wr_vram
c625 : 8d0005           [ 4] 	sta VDP_VRAM
c628 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c62a :                       vdp_poke
c62a : 08               [ 3] 	php
c62b : 48               [ 3] 	pha
c62c : 98               [ 2] 	tya
c62d : 78               [ 2] 	sei
c62e : 20fdc5           [ 6] 	jsr vdp_wr_addr
c631 : 68               [ 4] 	pla
c632 : 2025c6           [ 6] 	jsr vdp_wr_vram
c635 : 28               [ 4] 	plp
c636 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c637 :                       vdp_peek
c637 : 08               [ 3] 	php
c638 : 78               [ 2] 	sei
c639 : 2015c6           [ 6] 	jsr vdp_rd_addr
c63c : 2020c6           [ 6] 	jsr vdp_rd_vram
c63f : 28               [ 4] 	plp
c640 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank2.s -----------------------------------

                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c641 :                       snd_set
c641 : 48               [ 3] 	pha
                             
c642 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c644 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c647 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c64a : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c64d : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c64f : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c651 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c654 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c656 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c659 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c65c : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c65e : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c661 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c663 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c666 : 68               [ 4] 	pla
                             	
c667 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c668 :                       snd_get
c668 : 48               [ 3] 	pha
                             
c669 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c66b : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c66e : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c671 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c674 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank2.s -----------------------------------

c676 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c678 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c67b : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c67d : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c680 : a900             [ 2] 	lda #0x00				; Set Port A to input
c682 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c685 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c688 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c68a : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c68c : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c68f : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c692 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c694 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c697 : 68               [ 4] 	pla
                             	
c698 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c699 :                       snd_get_joy0
c699 : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c69b : 2068c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c69e : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c69f :                       main
                             
c69f :                       infinity
c69f : 2046c0           [ 6] 	jsr _df_pg_dflat
c6a2 : 4c9fc6           [ 3] 	jmp infinity
                             
c6a5 :                       msg_hello_world
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank2.s -----------------------------------

                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c6a5 : 4275696c64203a..       db "Build : 05-01-2025\r"
c6b8 : 3132384b204272..       db "128K Breadboard Computer\r"
c6d1 : 42792040363530..       db "By @6502Nerd\r"
c6de : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c6f2 :                       init_nmi
                             	; Core IRQ handler
c6f2 : a9fb             [ 2] 	lda #lo(nmi)
c6f4 : 8502             [ 3] 	sta int_nmi
c6f6 : a9c6             [ 2] 	lda #hi(nmi)
c6f8 : 8503             [ 3] 	sta int_nmi+1
c6fa : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c6fb :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* Only the 6551 uses this - fills the receive bu
c6fb :                       nmi
c6fb : 48               [ 3] 	pha
                             
c6fc : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c6ff : 100c             [ 4] 	bpl	nmi_fin					; If no interrupt don't do anyth
                             
c701 : 5a               [ 3] 	phy
c702 : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c705 : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c707 : 990008           [ 5] 	sta ser_buf,y
c70a : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c70c : 7a               [ 4] 	ply
c70d :                       nmi_fin
                             
c70d : 68               [ 4] 	pla
c70e : 40               [ 6] 	rti
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank2.s -----------------------------------

                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c70f :                       init_irq
                             	; Core IRQ handler
c70f : a949             [ 2] 	lda #lo(irq)
c711 : 8504             [ 3] 	sta int_irq
c713 : a9c7             [ 2] 	lda #hi(irq)
c715 : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c717 : a977             [ 2] 	lda #lo(irq_brk)
c719 : 8506             [ 3] 	sta int_brk
c71b : a9c7             [ 2] 	lda #hi(irq_brk)
c71d : 8507             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c71f : a948             [ 2] 	lda #lo(null_handler)
c721 : 8508             [ 3] 	sta int_uservdp
c723 : a9c7             [ 2] 	lda #hi(null_handler)
c725 : 8509             [ 3] 	sta int_uservdp+1
                             
c727 : a948             [ 2] 	lda #lo(null_handler)
c729 : 850a             [ 3] 	sta int_usercia0
c72b : a9c7             [ 2] 	lda #hi(null_handler)
c72d : 850b             [ 3] 	sta int_usercia0+1
                             
c72f : a948             [ 2] 	lda #lo(null_handler)
c731 : 850c             [ 3] 	sta int_usercia1
c733 : a9c7             [ 2] 	lda #hi(null_handler)
c735 : 850d             [ 3] 	sta int_usercia1+1
                             
c737 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c738 :                       call_irq_master
c738 : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c73b :                       call_irq_brk
c73b : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c73e :                       call_irq_uservdp
c73e : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c741 :                       call_irq_usercia0
c741 : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c744 :                       call_irq_usercia1
c744 : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c747 :                       null_irq
c747 : 40               [ 6] 	rti
                             
                             ;* null handler
c748 :                       null_handler
c748 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank2.s -----------------------------------

                             	
                             
                             ;* Master IRQ handler
c749 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c74c : ba               [ 2] 	tsx
c74d : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c750 : 2910             [ 2] 	and #0x10
c752 : d0e7             [ 3] 	bne call_irq_brk
                             	
c754 : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c755 : ad8d04           [ 4] 	lda IO_1 + IFR
c758 : 1003             [ 3] 	bpl irq_check_vdp
c75a : 2044c7           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c75d :                       irq_check_vdp	
c75d : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c760 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c762 : 203ec7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c765 : 20c4c7           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c768 : 20a2c7           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c76b :                       irq_check_cia0
c76b : ad0d04           [ 4] 	lda IO_0 + IFR
c76e : 1003             [ 3] 	bpl irq_fin
c770 : 2041c7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c773 :                       irq_fin
                             	_pullAXY
                             
c776 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c777 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c777 : 38               [ 2] 	sec
c778 : bd0501           [ 4] 	lda 0x0105,x
c77b : e902             [ 2] 	sbc #2
c77d : 85a4             [ 3] 	sta df_brkpc
c77f : bd0601           [ 4] 	lda 0x0106,x
c782 : e900             [ 2] 	sbc #0
c784 : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c786 : a001             [ 2] 	ldy #1
c788 : b1a4             [ 5] 	lda (df_brkpc),y
c78a : 85a6             [ 3] 	sta df_brkval
c78c : 859f             [ 3] 	sta errno
                             	; now update the return address
c78e : a5a2             [ 3] 	lda df_pc
c790 : 9d0501           [ 5] 	sta 0x105,x
c793 : a5a3             [ 3] 	lda df_pc+1
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank2.s -----------------------------------

c795 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c79b : 8585             [ 3] 	sta num_a
c79d : 8686             [ 3] 	stx num_a+1
c79f : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c7a1 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c7a2 :                       int_kb_handler	
c7a2 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c7a4 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c7a6 : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c7a9 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c7ab : f00c             [ 3] 	beq int_keys_up
c7ad :                       int_do_read
c7ad : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c7af : a53b             [ 3] 	lda kb_debounce			; Set debounce
c7b1 : 8537             [ 3] 	sta kb_deb
c7b3 :                       int_skip_scan
c7b3 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c7b5 : 8d0d04           [ 4] 	sta IO_0 + IFR
c7b8 : 60               [ 6] 	rts
c7b9 :                       int_keys_up					; No key pressed
c7b9 : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c7bb : 6434             [ 3] 	stz kb_last
c7bd : 6435             [ 3] 	stz kb_code
c7bf : 6437             [ 3] 	stz kb_deb
c7c1 : 6438             [ 3] 	stz kb_rep
c7c3 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c7c4 :                       int_vdp_handler
c7c4 : 20f0c7           [ 6] 	jsr update_timers	; If it is then update system 
                             
c7c7 : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c7c9 : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c7cb : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c7cd : a513             [ 3] 	lda vdp_curstat		; Check it
c7cf : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c7d1 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c7d3 : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c7d5 : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c7d7 : 8513             [ 3] 	sta vdp_curstat		
                             
c7d9 : 18               [ 2] 	clc					; Add offset for cursor address in vram
c7da : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c7dc : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c7de : aa               [ 2] 	tax
c7df : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank2.s -----------------------------------

c7e1 : 6900             [ 2] 	adc #0
                             
c7e3 : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	
c7e6 : a513             [ 3] 	lda vdp_curstat
c7e8 : 2980             [ 2] 	and #0x80
c7ea : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c7ec : 2025c6           [ 6] 	jsr vdp_wr_vram
c7ef :                       int_vdp_fin	
c7ef : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c7f0 :                       update_timers
c7f0 : e610             [ 5] 	inc vdp_int_cnt
c7f2 : d002             [ 3] 	bne inc_kb_timers
c7f4 : e611             [ 5] 	inc vdp_int_cnt+1
c7f6 :                       inc_kb_timers
c7f6 : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c7f8 : f002             [ 3] 	beq skip_kb_deb
c7fa : c637             [ 5] 	dec kb_deb
c7fc :                       skip_kb_deb
c7fc : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c7fe : f002             [ 4] 	beq skip_kb_rep
c800 : c638             [ 5] 	dec kb_rep
c802 :                       skip_kb_rep
c802 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c803 :                       long_delay
c803 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c807 : a000             [ 2] 	ldy #0x00
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank2.s -----------------------------------

c809 :                       long_delay_1
c809 : ea               [ 2] 	nop
c80a : ea               [ 2] 	nop
c80b : ea               [ 2] 	nop
c80c : ea               [ 2] 	nop
c80d : 88               [ 2] 	dey
c80e : d0f9             [ 3] 	bne long_delay_1
c810 : ca               [ 2] 	dex
c811 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c816 : 28               [ 4] 	plp
                             	
c817 : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c818 :                       utilPrintSPC
c818 : 48               [ 3] 	pha
c819 : a920             [ 2] 	lda #' '
c81b : 2060c5           [ 6] 	jsr io_put_ch
c81e : 68               [ 4] 	pla
c81f : 60               [ 6] 	rts
                             
c820 :                       utilPrintCRLF
c820 : 48               [ 3] 	pha
c821 : a90d             [ 2] 	lda #UTF_CR
c823 : 2060c5           [ 6] 	jsr io_put_ch
c826 : 68               [ 4] 	pla
c827 : 60               [ 6] 	rts
                             
c828 :                       utilPrintA
c828 : 8545             [ 3] 	sta tmp_d
c82a : 48               [ 3] 	pha
c82b : 8a               [ 2] 	txa
c82c : 48               [ 3] 	pha
c82d : a545             [ 3] 	lda tmp_d
c82f : 204dc8           [ 6] 	jsr str_a_to_x
c832 : 2060c5           [ 6] 	jsr io_put_ch
c835 : 8a               [ 2] 	txa
c836 : 2060c5           [ 6] 	jsr io_put_ch
c839 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank2.s -----------------------------------

c83a : aa               [ 2] 	tax
c83b : 68               [ 4] 	pla
c83c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c83d :                       util_clr_mem
c83d : 48               [ 3] 	pha
c83e : 5a               [ 3] 	phy
c83f : 863f             [ 3] 	stx tmp_v1
c841 : 8540             [ 3] 	sta tmp_v1+1
c843 : a900             [ 2] 	lda #0
c845 :                       mem_clr_byte
c845 : 88               [ 2] 	dey
c846 : 913f             [ 5] 	sta (tmp_v1),y
c848 : d0fb             [ 3] 	bne mem_clr_byte
c84a : 7a               [ 4] 	ply
c84b : 68               [ 4] 	pla
c84c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c84d :                       str_a_to_x
c84d : 48               [ 3] 	pha					; Save the byte using later on
c84e : 290f             [ 2] 	and #0x0f			; Mask low nibble
c850 : 18               [ 2] 	clc
c851 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c853 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c855 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c857 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c859 :                       skip_a_f_1
c859 : aa               [ 2] 	tax					; Low char is in X
c85a : 68               [ 4] 	pla					; Get byte back
c85b : 4a               [ 2] 	lsr a				; Make high nibble low
c85c : 4a               [ 2] 	lsr a
c85d : 4a               [ 2] 	lsr a
c85e : 4a               [ 2] 	lsr a
c85f : 18               [ 2] 	clc
c860 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c862 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c864 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c866 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c868 :                       skip_a_f_2
                             
c868 : 18               [ 2] 	clc					; No error
c869 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
c86a :                       str_x_to_a
c86a : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c86c : 38               [ 2] 	sec					; Process high char in A
c86d : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c86f : c90a             [ 2] 	cmp #10				; If A < 10 then
c871 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c873 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c875 :                       skip_x_f_1
c875 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c877 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c879 : 0a               [ 2] 	asl a				; This is the high nibble
c87a : 0a               [ 2] 	asl a
c87b : 0a               [ 2] 	asl a
c87c : 0a               [ 2] 	asl a
c87d : 48               [ 3] 	pha					; Save the high nibble
c87e : 8a               [ 2] 	txa					; Now process the low char in X
c87f : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c881 : 38               [ 2] 	sec
c882 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c884 : c90a             [ 2] 	cmp #10				; If A < 10 then
c886 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c888 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c88a :                       skip_x_f_2
c88a : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c88c : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c88e : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c890 : 68               [ 4] 	pla					; Get high nibble
c891 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c893 : 18               [ 2] 	clc					; No error
c894 : 60               [ 6] 	rts					; A contains value
                             
c895 :                       str_x_to_a_errl
c895 : 68               [ 4] 	pla
c896 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c898 :                       con_n_to_a
c898 : 8691             [ 3] 	stx num_tmp
c89a : 8592             [ 3] 	sta num_tmp+1
c89c : 6485             [ 3] 	stz num_a
c89e : 6486             [ 3] 	stz num_a+1
c8a0 : c000             [ 2] 	cpy #NUM_ANY
c8a2 : f014             [ 3] 	beq con_n_to_a_detect
c8a4 : 88               [ 2] 	dey
c8a5 : d003             [ 3] 	bne con_n_not_dec
c8a7 :                       con_dec_jmp
c8a7 : 4c3bc9           [ 3] 	jmp con_dec_to_a_int
c8aa :                       con_n_not_dec
c8aa : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank2.s -----------------------------------

c8ab : d003             [ 3] 	bne con_n_not_hex
c8ad :                       con_hex_jmp
c8ad : 4cd2c8           [ 3] 	jmp con_hex_to_a_int
c8b0 :                       con_n_not_hex
c8b0 : 88               [ 2] 	dey
c8b1 : d003             [ 3] 	bne con_n_err
c8b3 :                       con_bin_jmp
c8b3 : 4c11c9           [ 3] 	jmp con_bin_to_a_int
c8b6 :                       con_n_err
c8b6 : 38               [ 2] 	sec
c8b7 : 60               [ 6] 	rts
c8b8 :                       con_n_to_a_detect
c8b8 : b291             [ 5] 	lda (num_tmp)
c8ba : c930             [ 2] 	cmp #'0'
c8bc : d0e9             [ 3] 	bne con_dec_jmp
c8be : a001             [ 2] 	ldy #1
c8c0 : b191             [ 5] 	lda (num_tmp),y
c8c2 : 0920             [ 2] 	ora #0x20
c8c4 : c978             [ 2] 	cmp #'x'
c8c6 : f0e5             [ 3] 	beq con_hex_jmp
c8c8 : c962             [ 2] 	cmp #'b'
c8ca : f0e7             [ 3] 	beq con_bin_jmp
c8cc : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8ce :                       con_hex_to_a
c8ce : 8691             [ 3] 	stx num_tmp
c8d0 : 8592             [ 3] 	sta num_tmp+1
c8d2 :                       con_hex_to_a_int
c8d2 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c8d4 : a002             [ 2] 	ldy #2			; start at first digit
c8d6 :                       con_hex_digit
c8d6 : b191             [ 5] 	lda (num_tmp),y
c8d8 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c8da : 38               [ 2] 	sec							; Process high char in A
c8db : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c8dd : c90a             [ 2] 	cmp #10						; If A < 10 then
c8df : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c8e1 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c8e3 :                       con_hex_skip_x_f_1
c8e3 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c8e5 : b01c             [ 4] 	bcs	con_hex_done			; Potentially done if not
c8e7 : 48               [ 3] 	pha
                             	; make room for lo nibble
c8e8 : 0685             [ 5] 	asl num_a
c8ea : 2686             [ 5] 	rol num_a+1
c8ec : 0685             [ 5] 	asl num_a
c8ee : 2686             [ 5] 	rol num_a+1
c8f0 : 0685             [ 5] 	asl num_a
c8f2 : 2686             [ 5] 	rol num_a+1
c8f4 : 0685             [ 5] 	asl num_a
c8f6 : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c8f8 : 68               [ 4] 	pla
c8f9 : 0585             [ 3] 	ora num_a
c8fb : 8585             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank2.s -----------------------------------

c8fd : c8               [ 2] 	iny
c8fe : ca               [ 2] 	dex
c8ff : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c901 :                       con_hex_err
c901 : 38               [ 2] 	sec
c902 : 60               [ 6] 	rts
                             	; found a non-hex digit
c903 :                       con_hex_done
                             	; if no digits processed then error
c903 : c002             [ 2] 	cpy #2
c905 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c907 : 98               [ 2] 	tya
c908 : aa               [ 2] 	tax
c909 : a902             [ 2] 	lda #NUM_HEX
c90b : 18               [ 2] 	clc
c90c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c90d :                       con_bin_to_a
c90d : 8691             [ 3] 	stx num_tmp
c90f : 8592             [ 3] 	sta num_tmp+1
c911 :                       con_bin_to_a_int
c911 : a002             [ 2] 	ldy #2
c913 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c915 :                       con_bin_digit
c915 : b191             [ 5] 	lda (num_tmp),y
c917 : c930             [ 2] 	cmp #'0'
c919 : 9010             [ 3] 	bcc con_bin_done
c91b : c932             [ 2] 	cmp #'1'+1
c91d : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c91f : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c921 : 2685             [ 5] 	rol num_a
c923 : 2686             [ 5] 	rol num_a+1
c925 : c8               [ 2] 	iny
c926 : ca               [ 2] 	dex
c927 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c929 : 800a             [ 3] 	bra con_bin_err
c92b :                       con_bin_done
                             	; didn't process any digit = error
c92b : c002             [ 2] 	cpy #2
c92d : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c92f : 98               [ 2] 	tya
c930 : aa               [ 2] 	tax
c931 : a903             [ 2] 	lda #NUM_BIN
c933 : 18               [ 2] 	clc
c934 : 60               [ 6] 	rts
c935 :                       con_bin_err
c935 : 38               [ 2] 	sec
c936 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c937 :                       con_dec_to_a
c937 : 8691             [ 3] 	stx num_tmp
c939 : 8592             [ 3] 	sta num_tmp+1
c93b :                       con_dec_to_a_int
c93b : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c93d : b291             [ 5] 	lda (num_tmp)
c93f : c92d             [ 2] 	cmp #'-'
c941 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c943 : c8               [ 2] 	iny
c944 :                       str_d_find_end
c944 : b191             [ 5] 	lda (num_tmp),y
c946 : c930             [ 2] 	cmp #'0'
c948 : 9007             [ 3] 	bcc str_d_found_end
c94a : c93a             [ 2] 	cmp #'9'+1
c94c : b003             [ 3] 	bcs str_d_found_end
c94e : c8               [ 2] 	iny
c94f : 80f3             [ 3] 	bra str_d_find_end
c951 :                       str_d_found_end
c951 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c953 : b052             [ 3] 	bcs str_d_error		; e.g. -32767 including minus
c955 : 8494             [ 3] 	sty num_tmp+3
c957 : 6493             [ 3] 	stz num_tmp+2
c959 : 6485             [ 3] 	stz num_a
c95b : 6486             [ 3] 	stz num_a+1
c95d :                       str_d_process_digit
c95d : 88               [ 2] 	dey
c95e : 3026             [ 3] 	bmi str_d_digits_done
                             
c960 : b191             [ 5] 	lda (num_tmp),y
                             
c962 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c964 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c966 : 38               [ 2] 	sec
c967 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c969 : 18               [ 2] 	clc
c96a : 0a               [ 2] 	asl a
c96b : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c96d : aa               [ 2] 	tax
c96e : a585             [ 3] 	lda num_a
c970 : 7da9c9           [ 4] 	adc str_d_powers,x
c973 : 8585             [ 3] 	sta num_a
c975 : a586             [ 3] 	lda num_a+1
c977 : 7daac9           [ 4] 	adc str_d_powers+1,x
c97a : 8586             [ 3] 	sta num_a+1
c97c : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c97e : a593             [ 3] 	lda num_tmp+2
c980 : 6914             [ 2] 	adc #20
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank2.s -----------------------------------

c982 : 8593             [ 3] 	sta num_tmp+2
c984 : 80d7             [ 3] 	bra str_d_process_digit
c986 :                       str_d_digits_done
                             	; check if minus
c986 : b291             [ 5] 	lda (num_tmp)
c988 : c92d             [ 2] 	cmp #'-'
c98a : d011             [ 3] 	bne str_d_skip_neg
c98c : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c98e : e002             [ 2] 	cpx #2				; else it's an error
c990 : 9015             [ 3] 	bcc str_d_error
c992 : a685             [ 3] 	ldx num_a
c994 : a586             [ 3] 	lda num_a+1
c996 : 200dca           [ 6] 	jsr twos_complement
c999 : 8685             [ 3] 	stx num_a
c99b : 8586             [ 3] 	sta num_a+1
c99d :                       str_d_skip_neg
c99d : a694             [ 3] 	ldx num_tmp+3
c99f : e001             [ 2] 	cpx #1				; must be at least 1 char
c9a1 : 9004             [ 3] 	bcc str_d_error
c9a3 : a901             [ 2] 	lda #NUM_DEC
c9a5 : 18               [ 2] 	clc
c9a6 : 60               [ 6] 	rts
c9a7 :                       str_d_error
c9a7 : 38               [ 2] 	sec
c9a8 : 60               [ 6] 	rts
                             
c9a9 :                       str_d_powers
c9a9 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c9bd : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c9d1 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c9e5 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c9f9 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
ca0d :                       twos_complement
ca0d : 49ff             [ 2] 	eor #0xff
ca0f : 48               [ 3] 	pha
ca10 : 8a               [ 2] 	txa
ca11 : 49ff             [ 2] 	eor #0xff
ca13 : aa               [ 2] 	tax
ca14 : 68               [ 4] 	pla
ca15 : e8               [ 2] 	inx
ca16 : d001             [ 3] 	bne twos_complement_skip_X
ca18 : 1a               [ 2] 	inc a
ca19 :                       twos_complement_skip_X
ca19 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank2.s -----------------------------------

ca1a :                       int_to_bcd
ca1a : 08               [ 3] 	php
ca1b : 48               [ 3] 	pha
ca1c : da               [ 3] 	phx
                             
ca1d : 8691             [ 3] 	stx num_tmp
ca1f : 8592             [ 3] 	sta num_tmp+1
ca21 : c980             [ 2] 	cmp #0x80			; Negative?
ca23 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
ca25 : 200dca           [ 6] 	jsr twos_complement
ca28 :                       int_to_bcd_skip_neg
ca28 : 6485             [ 3] 	stz num_a
ca2a : 6486             [ 3] 	stz num_a+1
ca2c : 6487             [ 3] 	stz num_a+2
ca2e : 6488             [ 3] 	stz num_a+3
ca30 : a210             [ 2] 	ldx #16
ca32 : f8               [ 2] 	sed
ca33 :                       int_to_bcd_bit
ca33 : 0691             [ 5] 	asl num_tmp
ca35 : 2692             [ 5] 	rol num_tmp+1
ca37 : a585             [ 3] 	lda num_a
ca39 : 6585             [ 3] 	adc num_a
ca3b : 8585             [ 3] 	sta num_a
ca3d : a586             [ 3] 	lda num_a+1
ca3f : 6586             [ 3] 	adc num_a+1
ca41 : 8586             [ 3] 	sta num_a+1
ca43 : a587             [ 3] 	lda num_a+2
ca45 : 6587             [ 3] 	adc num_a+2
ca47 : 8587             [ 3] 	sta num_a+2
ca49 : ca               [ 2] 	dex
ca4a : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
ca4c : fa               [ 4] 	plx
ca4d : 68               [ 4] 	pla
ca4e : 28               [ 4] 	plp
ca4f : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
ca50 :                       word_to_bcd
ca50 : 08               [ 3] 	php
ca51 : 48               [ 3] 	pha
ca52 : da               [ 3] 	phx
                             
ca53 : 8691             [ 3] 	stx num_tmp
ca55 : 8592             [ 3] 	sta num_tmp+1
ca57 : 6485             [ 3] 	stz num_a
ca59 : 6486             [ 3] 	stz num_a+1
ca5b : 6487             [ 3] 	stz num_a+2
ca5d : 6488             [ 3] 	stz num_a+3
ca5f : a210             [ 2] 	ldx #16			; 16 binary bits
ca61 : f8               [ 2] 	sed
ca62 :                       word_to_bcd_bit
ca62 : 0691             [ 5] 	asl num_tmp
ca64 : 2692             [ 5] 	rol num_tmp+1
ca66 : a585             [ 3] 	lda num_a
ca68 : 6585             [ 3] 	adc num_a
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank2.s -----------------------------------

ca6a : 8585             [ 3] 	sta num_a
ca6c : a586             [ 3] 	lda num_a+1
ca6e : 6586             [ 3] 	adc num_a+1
ca70 : 8586             [ 3] 	sta num_a+1
ca72 : a587             [ 3] 	lda num_a+2
ca74 : 6587             [ 3] 	adc num_a+2
ca76 : 8587             [ 3] 	sta num_a+2
ca78 : ca               [ 2] 	dex
ca79 : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
ca7b : fa               [ 4] 	plx
ca7c : 68               [ 4] 	pla
ca7d : 28               [ 4] 	plp
ca7e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
ca7f :                       int_to_str_ch
ca7f : 290f             [ 2] 	and #0xf
ca81 : 0930             [ 2] 	ora #0x30					; Convert to ascii
ca83 : 4930             [ 2] 	eor #0x30					; Check if zero digit
ca85 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
ca87 : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
ca89 : 4930             [ 2] 	eor #0x30					; Restore A
ca8b : 60               [ 6] 	rts							; Return without storing anything
ca8c :                       int_to_str_nz
ca8c : 4930             [ 2] 	eor #0x30					; Restore A
ca8e : 999500           [ 5] 	sta num_buf,y
ca91 : c8               [ 2] 	iny
ca92 : 38               [ 2] 	sec							; Set C as a non-zero encountered
ca93 :                       int_to_str_ch_fin
ca93 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
ca94 :                       int_to_str
                             	_pushAXY
                             
ca97 : a000             [ 2] 	ldy #0						; first pos of num_buf
ca99 : 0900             [ 2] 	ora #0						; Test A for sign bit
ca9b : 08               [ 3] 	php							; Remember C bit of P
ca9c : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
ca9e : 200dca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
caa1 : 48               [ 3] 	pha							; Remember A
caa2 : a92d             [ 2] 	lda #'-'					; Put in negative sign
caa4 : 8595             [ 3] 	sta num_buf
caa6 : c8               [ 2] 	iny							; Start at second buffer pos
caa7 : 68               [ 4] 	pla							; Restore A
caa8 :                       int_to_str_skip_neg
caa8 : 2050ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
caab : a202             [ 2] 	ldx #2						; Start at BCD high byte
caad :                       int_str
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank2.s -----------------------------------

caad : 28               [ 4] 	plp							; Get C but immediately
caae : 08               [ 3] 	php							; Save C (due to loop check later)
caaf : b585             [ 4] 	lda num_a,x					; Get BCD digit
cab1 : 859c             [ 3] 	sta num_buf+7				; Save A it for the units later
cab3 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cab4 : 4a               [ 2] 	lsr a
cab5 : 4a               [ 2] 	lsr a
cab6 : 4a               [ 2] 	lsr a
cab7 : 28               [ 4] 	plp							; Get C
cab8 : 207fca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cabb : a59c             [ 3] 	lda num_buf+7				; Get A for the units
cabd : 207fca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cac0 : 08               [ 3] 	php							; Save C
cac1 : ca               [ 2] 	dex
cac2 : 10e9             [ 3] 	bpl int_str
cac4 : 28               [ 4] 	plp							; Check C
cac5 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cac7 : a930             [ 2] 	lda #'0'					; Stuff a zero
cac9 : 8595             [ 3] 	sta num_buf					; Must be in first position..
cacb : c8               [ 2] 	iny
cacc :                       int_to_str_fin
cacc : a900             [ 2] 	lda #0						; Terminator
cace : 999500           [ 5] 	sta num_buf,y
cad1 : c8               [ 2] 	iny
                             	_pullAXY
                             
cad5 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank2.s -----------------------------------

                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank2.s -----------------------------------

                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cad6 :                       str_a_to_d
cad6 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cad7 :                       print_a_to_d
cad7 : 2094ca           [ 6] 	jsr int_to_str
cada : a000             [ 2] 	ldy #0
cadc :                       print_a_to_d_ch
cadc : b99500           [ 4] 	lda num_buf,y
cadf : f006             [ 3] 	beq print_a_to_d_fin
cae1 : 2060c5           [ 6] 	jsr io_put_ch
cae4 : c8               [ 2] 	iny
cae5 : d0f5             [ 3] 	bne print_a_to_d_ch
cae7 :                       print_a_to_d_fin
cae7 : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cae8 :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cae8 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
caea : 9a               [ 2] 	txs
caeb : 4c43cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
caee :                       init_2					; init_ram will jump back to here
                             	
caee : 20f4ca           [ 6] 	jsr kernel_init
                             
caf1 : 4c9fc6           [ 3] 	jmp main
                             
caf4 :                       kernel_init
caf4 : 20f2c6           [ 6] 	jsr init_nmi		; Initialise NMI handling
caf7 : 200fc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cafa : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cafd : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cb00 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
cb03 :                       kernel_test
cb03 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cb06 : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cb09 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cb0c : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cb0e : 48               [ 3] 	pha
cb0f : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cb11 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cb14 : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cb16 : aa               [ 2] 	tax					; Save the mode temporarily
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank2.s -----------------------------------

cb17 : 68               [ 4] 	pla					; Get the default mode from stack
cb18 : 8a               [ 2] 	txa					; And push the NV mode that was read
cb19 : 48               [ 3] 	pha
cb1a : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cb1c : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cb1f : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cb21 :                       kernel_skip_nv	
cb21 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cb22 : 20c6c1           [ 6] 	jsr _gr_init_screen
cb25 : 2026c5           [ 6] 	jsr io_init			; Set default input/output device
cb28 : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cb36 : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cb39 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cb3c : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cb3f : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cb42 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cb43 :                       init_ram
cb43 : 6400             [ 3] 	stz 0x00			; Start at page 0
cb45 : 6401             [ 3] 	stz 0x01
cb47 : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cb49 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cb4b : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cb4d :                       init_ram_1
cb4d : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cb4f : 9004             [ 3] 	bcc init_ram_fill
cb51 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cb53 : 9005             [ 3] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cb55 :                       init_ram_fill
cb55 : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cb57 : c8               [ 2] 	iny
cb58 : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cb5a :                       init_ram_skip
cb5a : e8               [ 2] 	inx					; Increment page counter
cb5b : 8601             [ 3] 	stx 0x01			; Save to address pointer
cb5d : d0ee             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cb5f : 4ceeca           [ 3] 	jmp init_2			; Carry on initialisation
                             
cb62 :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "sdcard\sdcard.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank2.s -----------------------------------

                             ;*
                             ;*  SDCARD.S
                             ;*  Low level SD card driver routines.  This modu
                             ;*  software bit banging through VIA 2 port B of 
                             ;*  interface.  So the card is clocked in softwar
                             ;*  not great for performance but fast enough for
                             ;*  purposes.  I think we can get around 8.5KB/s 
                             ;*  read/write speed, translating to around 5.5KB
                             ;*  throughput using the filesystem.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cb62 :                       mod_sz_sdcard_s
                             
                             ;****************************************
                             ;* init_sdcard
                             ;* Initialise SD card interface after CIA2!
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cb62 :                       init_sdcard
cb62 : ad8004           [ 4] 	lda IO_1+PRB					; Detect card
cb65 : 2904             [ 2] 	and #0x04						; Bit 2 of PRB = 0
cb67 : 854b             [ 3] 	sta sd_status
cb69 : d046             [ 3] 	bne init_sd_failed				; If not zero then no card
                             	_println sd_msg_initialising
                             
cb78 :                       init_sdcard_try
cb78 : a908             [ 2] 	lda #SD_CS						; Unselect device
cb7a : 0c8004           [ 3] 	tsb SD_REG
cb7d : a901             [ 2] 	lda #SD_CLK						; Set clock low
cb7f : 1c8004           [ 3] 	trb SD_REG
cb82 : a910             [ 2] 	lda #SD_MOSI					; DI/MOSI high
cb84 : 0c8004           [ 3] 	tsb SD_REG
cb87 : a208             [ 2] 	ldx #8							; 8*0.125ms = 1ms
cb89 : 2003c8           [ 6] 	jsr long_delay
                             
cb8c : a208             [ 2] 	ldx #8							; 10 bytes of 0xff
cb8e : a9ff             [ 2] 	lda #0xff
cb90 :                       init_sd_pulse
cb90 : 20e9cb           [ 6] 	jsr sd_sendbyte					; Send the 0xff byte
cb93 : ca               [ 2] 	dex
cb94 : d0fa             [ 3] 	bne init_sd_pulse
cb96 : a908             [ 2] 	lda #SD_CS						; Unselect device
cb98 : 0c8004           [ 3] 	tsb SD_REG
                             
cb9b :                       init_cmd0
cb9b : 20aacc           [ 6] 	jsr sd_sendcmd0
cb9e : c9ff             [ 2] 	cmp #0xff						; 0xff is not a valid response
cba0 : d002             [ 3] 	bne init_sd_next
cba2 : f0d4             [ 3] 	beq init_sdcard_try
                             	
cba4 :                       init_sd_next
cba4 :                       init_acmd41
cba4 : 20cccc           [ 6] 	jsr sd_sendcmd55
                             
cba7 : 20eecc           [ 6] 	jsr sd_sendcmd41
                             	
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank2.s -----------------------------------

cbaa : c900             [ 2] 	cmp #0							; Was R1 = 0
cbac : d0f6             [ 3] 	bne init_acmd41					; Retry if not
                             	
cbae :                       init_cmd16
cbae : 4c10cd           [ 3] 	jmp sd_sendcmd16
cbb1 :                       init_sd_failed
                             	; Got here then the card didn't initialise
                             	_println sd_msg_failed
                             
cbbe : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_startcmd
                             ;* Start a cmd frame by sending CS high to low
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cbbf :                       sd_startcmd
cbbf : 48               [ 3] 	pha								; Save A
cbc0 : ad0004           [ 4] 	lda IO_0 + PRB					; Get current led status
cbc3 : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
cbc5 : 4902             [ 2] 	eor #KB_LED0					; Switch on if C=1
cbc7 : 8d0004           [ 4] 	sta IO_0 + PRB					; Set the leds
                             
cbca : a9ff             [ 2] 	lda #0xff						; Send 0xff
cbcc : 20e9cb           [ 6] 	jsr sd_sendbyte					; Delay / synch pulses
cbcf : 20e9cb           [ 6] 	jsr sd_sendbyte					; With CS not asserted
                             
cbd2 : a908             [ 2] 	lda #SD_CS						; Chip select bit
cbd4 : 1c8004           [ 3] 	trb SD_REG						; Now set it low
                             
cbd7 : 68               [ 4] 	pla								; Restore A
cbd8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_endcmd
                             ;* End a cmd frame by sending CS high
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cbd9 :                       sd_endcmd
cbd9 : 48               [ 3] 	pha
                             
cbda : ad0004           [ 4] 	lda IO_0 + PRB					; Get current led status
cbdd : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
cbdf : 8d0004           [ 4] 	sta IO_0 + PRB					; Set the leds
                             
cbe2 : a908             [ 2] 	lda #SD_CS						; Chip select bit
cbe4 : 0c8004           [ 3] 	tsb SD_REG						; First set it high
                             
cbe7 : 68               [ 4] 	pla
cbe8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendbyte
                             ;* Low level byte send routine
                             ;* Input : A = byte to send
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank2.s -----------------------------------

cbe9 :                       sd_sendbyte
cbe9 : 48               [ 3] 	pha
cbea : 5a               [ 3] 	phy
                             
cbeb : 8541             [ 3] 	sta tmp_a						; For shifting out
                             
cbed : a008             [ 2] 	ldy #8							; 8 bits to shift out
cbef : ad8004           [ 4] 	lda SD_REG						; Load the SD register to A
cbf2 :                       sd_shiftoutbit
cbf2 : 0910             [ 2] 	ora #SD_MOSI					; And initially set output bit 
cbf4 : 0641             [ 5] 	asl tmp_a						; Unless the bit to transmit is '
cbf6 : b002             [ 3] 	bcs sd_shiftskiplo				; so then EOR the bit back
cbf8 : 4910             [ 2] 	eor #SD_MOSI
cbfa :                       sd_shiftskiplo
cbfa : 8d8004           [ 4] 	sta SD_REG						; Save data bit first, it seems,
                             	
cbfd : ee8004           [ 6] 	inc SD_REG						; Set bit 1 of clock
                             ;	dec SD_REG						; Reset bit 1 of clock
cc00 : 8d8004           [ 4] 	sta SD_REG						; Reset bit 1 of clock
                             
cc03 : 88               [ 2] 	dey								; Count bits
cc04 : d0ec             [ 4] 	bne sd_shiftoutbit				; Until no more bits to se
                             
cc06 : 7a               [ 4] 	ply
cc07 : 68               [ 4] 	pla
                             
cc08 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getbyte
                             ;* Low level get a byte
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
                             
cc09 :                       sd_getbyte
cc09 : 5a               [ 3] 	phy
cc0a : da               [ 3] 	phx
                             
cc0b : ad8004           [ 4] 	lda SD_REG
cc0e : 0910             [ 2] 	ora #SD_MOSI					; Set MOSI high
cc10 : 8d8004           [ 4] 	sta SD_REG
cc13 : a8               [ 2] 	tay								; Same as A with clock high
cc14 : c8               [ 2] 	iny
cc15 : aa               [ 2] 	tax								; Same as A with clock low
                             	
                             	; Unroll the code almost 20% faster than looping
                             	; bit 7
cc16 : 8c8004           [ 4] 	sty SD_REG
cc19 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc1c : 8e8004           [ 4] 	stx SD_REG
cc1f : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc21 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 6
cc23 : 8c8004           [ 4] 	sty SD_REG
cc26 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc29 : 8e8004           [ 4] 	stx SD_REG
cc2c : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc2e : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 5
cc30 : 8c8004           [ 4] 	sty SD_REG
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank2.s -----------------------------------

cc33 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc36 : 8e8004           [ 4] 	stx SD_REG
cc39 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc3b : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 4
cc3d : 8c8004           [ 4] 	sty SD_REG
cc40 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc43 : 8e8004           [ 4] 	stx SD_REG
cc46 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc48 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 3
cc4a : 8c8004           [ 4] 	sty SD_REG
cc4d : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc50 : 8e8004           [ 4] 	stx SD_REG
cc53 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc55 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 2
cc57 : 8c8004           [ 4] 	sty SD_REG
cc5a : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc5d : 8e8004           [ 4] 	stx SD_REG
cc60 : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc62 : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 1
cc64 : 8c8004           [ 4] 	sty SD_REG
cc67 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc6a : 8e8004           [ 4] 	stx SD_REG
cc6d : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc6f : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             	; bit 0
cc71 : 8c8004           [ 4] 	sty SD_REG
cc74 : ad8004           [ 4] 	lda SD_REG						; Sample SD card lines (MISO is 
cc77 : 8e8004           [ 4] 	stx SD_REG
cc7a : c980             [ 2] 	cmp #SD_MISO					; Trial subtract A-MISO, C=1 if
cc7c : 2641             [ 5] 	rol tmp_a						; Rotate carry state in to tmp_a
                             
cc7e : a541             [ 3] 	lda tmp_a						; Return response in A
                             
cc80 : fa               [ 4] 	plx
cc81 : 7a               [ 4] 	ply
                             
cc82 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespbyte
                             ;* Low level get response routine
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc83 :                       sd_getrespbyte
cc83 : da               [ 3] 	phx
cc84 : a200             [ 2] 	ldx #0							; Try up to 256 times
cc86 :                       sd_respff
cc86 : e8               [ 2] 	inx								; Retry counter
cc87 : f007             [ 3] 	beq sd_resptimeout
cc89 : 2009cc           [ 6] 	jsr sd_getbyte
cc8c : c9ff             [ 2] 	cmp #0xff						; Keep reading MISO until not FF
cc8e : f0f6             [ 3] 	beq sd_respff
cc90 :                       sd_resptimeout
cc90 : fa               [ 4] 	plx
cc91 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
                             ;* sd_busy
                             ;* Low level busy check routine
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cc92 :                       sd_busy
cc92 : 48               [ 3] 	pha
cc93 : a54b             [ 3] 	lda sd_status					; If no card then fall out
cc95 : d007             [ 3] 	bne sd_isbusy_fin
cc97 :                       sd_isbusy
cc97 : 2009cc           [ 6] 	jsr sd_getbyte
cc9a : c9ff             [ 2] 	cmp #0xff						; Keep reading MISO until FF
cc9c : d0f9             [ 3] 	bne sd_isbusy
cc9e :                       sd_isbusy_fin
cc9e : 68               [ 4] 	pla
cc9f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_waitforn0byte
                             ;* Low level routine waits for card to be ready
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cca0 :                       sd_waitforn0byte
cca0 : a54b             [ 3] 	lda sd_status
cca2 : d005             [ 3] 	bne sd_waitforn0byte_fin
cca4 : 2083cc           [ 6] 	jsr sd_getrespbyte
cca7 : f0f7             [ 3] 	beq sd_waitforn0byte					; Zero byte means not r
cca9 :                       sd_waitforn0byte_fin
cca9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd0
                             ;* Send CMD0
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ccaa :                       sd_sendcmd0
ccaa : 20bfcb           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40, 0x00, 0x00, 0x00, 0x00, 0x95
ccad : a940             [ 2] 	lda #0x40
ccaf : 20e9cb           [ 6] 	jsr sd_sendbyte
ccb2 : a900             [ 2] 	lda #0x00
ccb4 : 20e9cb           [ 6] 	jsr sd_sendbyte
ccb7 : 20e9cb           [ 6] 	jsr sd_sendbyte
ccba : 20e9cb           [ 6] 	jsr sd_sendbyte
ccbd : 20e9cb           [ 6] 	jsr sd_sendbyte
ccc0 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
ccc2 : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
ccc5 : 2036cd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
ccc8 : 20d9cb           [ 6] 	jsr sd_endcmd
                             	
cccb : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank2.s -----------------------------------

                             ;* sd_sendcmd55
                             ;* Send CMD55
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cccc :                       sd_sendcmd55
cccc : 20bfcb           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+55, 0x00, 0x00, 0x00, 0x00, 0x95
cccf : a977             [ 2] 	lda #0x40+55
ccd1 : 20e9cb           [ 6] 	jsr sd_sendbyte
ccd4 : a900             [ 2] 	lda #0x00
ccd6 : 20e9cb           [ 6] 	jsr sd_sendbyte
ccd9 : 20e9cb           [ 6] 	jsr sd_sendbyte
ccdc : 20e9cb           [ 6] 	jsr sd_sendbyte
ccdf : 20e9cb           [ 6] 	jsr sd_sendbyte
cce2 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cce4 : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
cce7 : 2036cd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
ccea : 20d9cb           [ 6] 	jsr sd_endcmd
                             	
cced : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd41
                             ;* Send ACMD41
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ccee :                       sd_sendcmd41
ccee : 20bfcb           [ 6] 	jsr sd_startcmd
                             
                             	; Send 0x40+41, 0x00, 0x00, 0x00, 0x00, 0x95
ccf1 : a969             [ 2] 	lda #0x40+41
ccf3 : 20e9cb           [ 6] 	jsr sd_sendbyte
ccf6 : a900             [ 2] 	lda #0x00
ccf8 : 20e9cb           [ 6] 	jsr sd_sendbyte
ccfb : 20e9cb           [ 6] 	jsr sd_sendbyte
ccfe : 20e9cb           [ 6] 	jsr sd_sendbyte
cd01 : 20e9cb           [ 6] 	jsr sd_sendbyte
cd04 : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cd06 : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
cd09 : 2036cd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
cd0c : 20d9cb           [ 6] 	jsr sd_endcmd
                             	
cd0f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd16
                             ;* Send CMD16
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd10 :                       sd_sendcmd16
cd10 : 20bfcb           [ 6] 	jsr sd_startcmd
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank2.s -----------------------------------

                             
                             	; Send 0x40+16, 0x00, 0x00, 0x02, 0x00, 0x95
cd13 : a950             [ 2] 	lda #0x40+16
cd15 : 20e9cb           [ 6] 	jsr sd_sendbyte
cd18 : a900             [ 2] 	lda #0x00
cd1a : 20e9cb           [ 6] 	jsr sd_sendbyte
cd1d : 20e9cb           [ 6] 	jsr sd_sendbyte
cd20 : a902             [ 2] 	lda #0x02						; 0x200 block size = 512 bytes
cd22 : 20e9cb           [ 6] 	jsr sd_sendbyte
cd25 : a900             [ 2] 	lda #0x00
cd27 : 20e9cb           [ 6] 	jsr sd_sendbyte
cd2a : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cd2c : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
cd2f : 2036cd           [ 6] 	jsr sd_getrespR1				; Get the response
                             
cd32 : 20d9cb           [ 6] 	jsr sd_endcmd
                             	
cd35 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespR1
                             ;* Low level get response R1
                             ;* Input : A = response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd36 :                       sd_getrespR1
cd36 : 2083cc           [ 6] 	jsr sd_getrespbyte
cd39 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_sendcmd17
                             ;* Send CMD17
                             ;* Input : sd_sect = 4 bytes of sector offset lit
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd3a :                       sd_sendcmd17
cd3a : da               [ 3] 	phx
cd3b : 48               [ 3] 	pha								; A is the page to write to
                             	
cd3c : 20bfcb           [ 6] 	jsr sd_startcmd
                             
                             	; Convert sector address to byte address
                             	; Sector address is little endian
                             	; Byte address is big endian
cd3f : 6455             [ 3] 	stz sd_addr+3					; LSB of address is always 0
cd41 : a54e             [ 3] 	lda sd_sect+0					; LSB of sector goes to addres
cd43 : 8554             [ 3] 	sta sd_addr+2					; Equivalent of * 256
cd45 : a54f             [ 3] 	lda sd_sect+1
cd47 : 8553             [ 3] 	sta sd_addr+1
cd49 : a550             [ 3] 	lda sd_sect+2
cd4b : 8552             [ 3] 	sta sd_addr+0
cd4d : 18               [ 2] 	clc								; Now addr*2 so equiv to sect*512
cd4e : 0655             [ 5] 	asl sd_addr+3
cd50 : 2654             [ 5] 	rol sd_addr+2
cd52 : 2653             [ 5] 	rol sd_addr+1
cd54 : 2652             [ 5] 	rol sd_addr+0
                             
cd56 :                       sd_cmd17addr
                             	; Send 0x40+17, 0xA3, 0xA2, 0xA1, 0xA0, 0x95
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank2.s -----------------------------------

cd56 : a951             [ 2] 	lda #0x40+17
cd58 : 20e9cb           [ 6] 	jsr sd_sendbyte
cd5b : a552             [ 3] 	lda sd_addr+0
cd5d : 20e9cb           [ 6] 	jsr sd_sendbyte
cd60 : a553             [ 3] 	lda sd_addr+1
cd62 : 20e9cb           [ 6] 	jsr sd_sendbyte
cd65 : a554             [ 3] 	lda sd_addr+2
cd67 : 20e9cb           [ 6] 	jsr sd_sendbyte
cd6a : a555             [ 3] 	lda sd_addr+3
cd6c : 20e9cb           [ 6] 	jsr sd_sendbyte
cd6f : a995             [ 2] 	lda #0x95						; Checksum needs to be right
cd71 : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
cd74 : 2083cc           [ 6] 	jsr sd_getrespbyte
cd77 : aa               [ 2] 	tax								; Save response in X for return
                             
cd78 : 68               [ 4] 	pla								; Get the A param
cd79 : 2085cd           [ 6] 	jsr sd_getrespR17				; Get the response
                             
cd7c : 2092cc           [ 6] 	jsr sd_busy						; Wait for card to be ready
                             	
cd7f : 20d9cb           [ 6] 	jsr sd_endcmd
                             
cd82 : 8a               [ 2] 	txa								; Restore the response byte
cd83 : fa               [ 4] 	plx
                             	
cd84 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* sd_getrespR17
                             ;* Low level get response R17
                             ;* Input : A = R1 response byte received
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cd85 :                       sd_getrespR17
cd85 : 48               [ 3] 	pha
cd86 : 5a               [ 3] 	phy
                             
cd87 : a44b             [ 3] 	ldy sd_status
cd89 : d025             [ 3] 	bne sd_getrespR17_fin
                             
cd8b : 8540             [ 3] 	sta tmp_v1+1					; Page to read in to
cd8d : 643f             [ 3] 	stz tmp_v1						; Always a page boundary
cd8f :                       sd_getrespR17token
cd8f : 2009cc           [ 6] 	jsr sd_getbyte					; Get a byte
cd92 : c9fe             [ 2] 	cmp #0xfe						; Is it the token?
cd94 : d0f9             [ 3] 	bne sd_getrespR17token			; No
                             	
cd96 : a000             [ 2] 	ldy #0							; read 1st 256 bytes
cd98 :                       sd_getrespR17block1
cd98 : 2009cc           [ 6] 	jsr sd_getbyte					; get a byte
cd9b : 913f             [ 5] 	sta (tmp_v1),y					; Save the byte
cd9d : c8               [ 2] 	iny								; Keep going
cd9e : d0f8             [ 3] 	bne sd_getrespR17block1			; Until all bytes read
                             
cda0 : e640             [ 5] 	inc tmp_v1+1					; Next page
cda2 :                       sd_getrespR17block2
cda2 : 2009cc           [ 6] 	jsr sd_getbyte					; get a byet
cda5 : 913f             [ 5] 	sta (tmp_v1),y					; Save the byte
cda7 : c8               [ 2] 	iny								; Keep going
cda8 : d0f8             [ 3] 	bne sd_getrespR17block2			; Until all bytes read
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank2.s -----------------------------------

                             
cdaa : 2009cc           [ 6] 	jsr sd_getbyte					; CRC
cdad : 2009cc           [ 6] 	jsr sd_getbyte					; CRC
                             	
cdb0 :                       sd_getrespR17_fin
cdb0 : 7a               [ 4] 	ply
cdb1 : 68               [ 4] 	pla
                             
cdb2 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* sd_sendcmd24
                             ;* Send CMD24
                             ;* Input : sd_sect = 4 bytes of sector offset lit
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cdb3 :                       sd_sendcmd24
cdb3 : 5a               [ 3] 	phy
cdb4 : 48               [ 3] 	pha
                             
cdb5 : 20bfcb           [ 6] 	jsr sd_startcmd
                             
                             	; Convert sector address to byte address
                             	; Sector address is little endian
                             	; Byte address is big endian
cdb8 : 6455             [ 3] 	stz sd_addr+3					; LSB of address is always 0
cdba : a54e             [ 3] 	lda sd_sect+0					; LSB of sector goes to addres
cdbc : 8554             [ 3] 	sta sd_addr+2					; Equivalent of * 256
cdbe : a54f             [ 3] 	lda sd_sect+1
cdc0 : 8553             [ 3] 	sta sd_addr+1
cdc2 : a551             [ 3] 	lda sd_sect+3
cdc4 : 8552             [ 3] 	sta sd_addr+0
cdc6 : 18               [ 2] 	clc								; Now addr*2 so equiv to sect*512
cdc7 : 0655             [ 5] 	asl sd_addr+3
cdc9 : 2654             [ 5] 	rol sd_addr+2
cdcb : 2653             [ 5] 	rol sd_addr+1
cdcd : 2652             [ 5] 	rol sd_addr+0
                             
                             	; Send 0x40+24, 0xA0, 0xA1, 0xA2, 0xA3, 0x95
cdcf : a958             [ 2] 	lda #0x40+24
cdd1 : 20e9cb           [ 6] 	jsr sd_sendbyte
cdd4 : a552             [ 3] 	lda sd_addr+0
cdd6 : 20e9cb           [ 6] 	jsr sd_sendbyte
cdd9 : a553             [ 3] 	lda sd_addr+1
cddb : 20e9cb           [ 6] 	jsr sd_sendbyte
cdde : a554             [ 3] 	lda sd_addr+2
cde0 : 20e9cb           [ 6] 	jsr sd_sendbyte
cde3 : a555             [ 3] 	lda sd_addr+3
cde5 : 20e9cb           [ 6] 	jsr sd_sendbyte
cde8 : a995             [ 2] 	lda #0x95					; Checksum needs to be right
cdea : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
cded : 2083cc           [ 6] 	jsr sd_getrespbyte			; Get response
                             
cdf0 : 2009cc           [ 6] 	jsr sd_getbyte
                             	
cdf3 : a9fe             [ 2] 	lda #0xfe					; Start of data token
cdf5 : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
cdf8 : 68               [ 4] 	pla							; Retrieve the address high byte
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank2.s -----------------------------------

cdf9 : 8540             [ 3] 	sta tmp_v1+1
cdfb : 643f             [ 3] 	stz tmp_v1					; Address is always page boundary
                             
cdfd : a000             [ 2] 	ldy #00
cdff :                       sd_writeblock_1					; Send first 256 bytes
cdff : b13f             [ 5] 	lda (tmp_v1), y
ce01 : 20e9cb           [ 6] 	jsr sd_sendbyte
ce04 : c8               [ 2] 	iny
ce05 : d0f8             [ 4] 	bne sd_writeblock_1
ce07 : e640             [ 5] 	inc tmp_v1+1				; Next page for second 256 bytes
ce09 :                       sd_writeblock_2					; Send second 256 bytes
ce09 : b13f             [ 5] 	lda (tmp_v1), y
ce0b : 20e9cb           [ 6] 	jsr sd_sendbyte
ce0e : c8               [ 2] 	iny
ce0f : d0f8             [ 3] 	bne sd_writeblock_2
                             
ce11 : a9aa             [ 2] 	lda #0xaa					; Arbitrary CRC bytes
ce13 : 20e9cb           [ 6] 	jsr sd_sendbyte
ce16 : 20e9cb           [ 6] 	jsr sd_sendbyte
                             
ce19 : 2009cc           [ 6] 	jsr sd_getbyte				; Get data response byte
ce1c : 48               [ 3] 	pha							; Save it to return
                             
ce1d :                       sd_waitforwritecomplete
ce1d : 2092cc           [ 6] 	jsr sd_busy					; Wait for card to be ready
                             	
ce20 : 20d9cb           [ 6] 	jsr sd_endcmd				; Release the card
                             
ce23 : 68               [ 4] 	pla
ce24 : 7a               [ 4] 	ply
ce25 : 60               [ 6] 	rts
                             
                             	
ce26 :                       sd_msg_initialising
ce26 : 0d496e69746961..      	db "\rInitialising SD Card\r", 0
ce3d :                       sd_msg_failed
ce3d : 0d426164206f72..      	db "\rBad or missing SD Card\r", 0
                             
ce56 :                       sd_cmd55
ce56 : 770000000095          	db (0x40+55), 0x00, 0x00, 0x00, 0x00, 0x95
ce5c :                       sd_cmd58
ce5c : 7a0000000095          	db (0x40+58), 0x00, 0x00, 0x00, 0x00, 0x95
ce62 :                       sd_acmd41
ce62 : 690000000095          	db (0x40+41), 0x00, 0x00, 0x00, 0x00, 0x95
                             	
ce68 :                       mod_sz_sdcard_e
                             
                             	include "sdcard\sd_fs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SD_FS.S
                             ;*  FAT16 filesystem module.  Implements a basic 
                             ;*  filesystem to enable mass storage support.
                             ;*  I've been a bit naughty in that I have assume
                             ;*  sd card size and sector 0 is the MBR.  This i
                             ;*  always the case, but it works for me so I cou
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank2.s -----------------------------------

                             ;*  the time be asked to sort it out. I may fix t
                             ;*  more general use at some point..
                             ;*  The filesystem now supports sub directories a
                             ;*  implements the folling:
                             ;*  - load a file
                             ;*  - save a file
                             ;*  - delete a file from the card
                             ;*  - perform a directory listing
                             ;*  - change to subdirectory
                             ;*  I have to say I am pretty pleased with this, 
                             ;*  of reading and research!
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
ce68 :                       mod_sz_sd_fs_s
                             
                             	include "sdcard\sd_fs.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SD_FS.I
                             ;*  FAT16 filesystem definitions.  Nothing to see
                             ;*
                             ;************************************************
0001 =                       FS_FILEMODER    =   0x01
0080 =                       FS_FILEMODEW    =   0x80
002f =                       FS_FOLDERCH     =   '/'
                             
                             
                             ;****************************************
                             ;* init_fs
                             ;* Initialise filesystem - after sd card!
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ce68 :                       init_fs
ce68 : a64b             [ 3] 	ldx sd_status
ce6a : f00e             [ 3] 	beq init_fs_do
                             	_println msg_noinit_fs
                             
ce79 : 60               [ 6] 	rts
                             
ce7a :                       init_fs_do
                             	_println msg_initialising_fs
                             
                             
                             	;Load MBR sector 0
ce87 : a203             [ 2] 	ldx #0x03					; Init sector to 0 (MBR)
ce89 :                       init_fs_clr_sect
ce89 : 744e             [ 4] 	stz sd_sect,x
ce8b : ca               [ 2] 	dex
ce8c : 10fb             [ 3] 	bpl init_fs_clr_sect
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank2.s -----------------------------------

                             
ce8e : a902             [ 2] 	lda #hi(sd_buf)				; Read in to the buffer
ce90 : 203acd           [ 6] 	jsr sd_sendcmd17			; Call read block
                             
                             	;Find sector of partition 1
ce93 : a203             [ 2] 	ldx #0x03					; Get partition 1
ce95 :                       init_fs_get_part1
ce95 : bdc603           [ 4] 	lda sd_buf+MBR_BootPart1,x
ce98 : 954e             [ 4] 	sta sd_sect,x
ce9a : 9d310c           [ 5] 	sta fs_bootsect,x			; This is also the 'bootsect
ce9d : ca               [ 2] 	dex
ce9e : 10f5             [ 3] 	bpl init_fs_get_part1
                             	; Get partition 1 sector
cea0 : a902             [ 2] 	lda #hi(sd_buf)				; Read in to the buffer
cea2 : 203acd           [ 6] 	jsr sd_sendcmd17			; Call read block
                             
                             	; Calculate start of FAT tables
                             	; Assuming there are about 64k clusters
                             	; Each cluster assumed to be 32k sectors
                             	; Each sector is 512 bytes (0.5k)
                             	; Giving 64k x 32k x 0.5 ~ 1GB storage
cea5 : 18               [ 2] 	clc
cea6 : ad310c           [ 4] 	lda fs_bootsect
cea9 : 6d0e02           [ 4] 	adc sd_buf+MBR_ResvSect
ceac : 8d350c           [ 4] 	sta fs_fatsect
ceaf : ad320c           [ 4] 	lda fs_bootsect+1
ceb2 : 6d0f02           [ 4] 	adc sd_buf+MBR_ResvSect+1
ceb5 : 8d360c           [ 4] 	sta fs_fatsect+1
ceb8 : 9c370c           [ 4] 	stz fs_fatsect+2
cebb : 9c380c           [ 4] 	stz fs_fatsect+3
                             	
                             	; Calculate start of Root Directory
cebe : ad1602           [ 4] 	lda sd_buf+MBR_SectPerFAT	; Initialise to 2 * Se
cec1 : 0a               [ 2] 	asl a
cec2 : 8d390c           [ 4] 	sta fs_rootsect
cec5 : ad1702           [ 4] 	lda sd_buf+MBR_SectPerFAT+1
cec8 : 2a               [ 2] 	rol a
cec9 : 8d3a0c           [ 4] 	sta fs_rootsect+1
cecc : 9c3b0c           [ 4] 	stz fs_rootsect+2
cecf : 9c3c0c           [ 4] 	stz fs_rootsect+3
                             
                             	; Now add FAT offset
ced2 : 18               [ 2] 	clc
ced3 : a200             [ 2] 	ldx #0x00
ced5 : a004             [ 2] 	ldy #4
ced7 :                       fs_init_add_fat
ced7 : bd350c           [ 4] 	lda fs_fatsect,x
ceda : 7d390c           [ 4] 	adc fs_rootsect,x
cedd : 9d390c           [ 5] 	sta fs_rootsect,x
cee0 : e8               [ 2] 	inx
cee1 : 88               [ 2] 	dey
cee2 : d0f3             [ 3] 	bne fs_init_add_fat
                             	
                             	; Calculate start of data area
                             	; Assuming 512 root dir entries
                             	; Each entry = 32 bytes
                             	; Divided by bytes per sector
                             	; to get sector count
cee4 : a920             [ 2] 	lda #32						; (512*32)/512 = 32
cee6 : 8d3d0c           [ 4] 	sta fs_datasect
cee9 : 9c3e0c           [ 4] 	stz fs_datasect+1
ceec : 9c3f0c           [ 4] 	stz fs_datasect+2
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank2.s -----------------------------------

ceef : 9c400c           [ 4] 	stz fs_datasect+3
                             
                             	; Now add root directory offset
cef2 : 18               [ 2] 	clc
cef3 : a200             [ 2] 	ldx #0x00
cef5 : a004             [ 2] 	ldy #4
cef7 :                       fs_init_data
cef7 : bd390c           [ 4] 	lda fs_rootsect,x
cefa : 7d3d0c           [ 4] 	adc fs_datasect,x
cefd : 9d3d0c           [ 5] 	sta fs_datasect,x
cf00 : e8               [ 2] 	inx
cf01 : 88               [ 2] 	dey
cf02 : d0f3             [ 4] 	bne fs_init_data
                             
cf04 : 38               [ 2] 	sec							; Now subtract 2 clusters worth of sec
cf05 : ad3d0c           [ 4] 	lda fs_datasect+0			; to enable easy use of clus
cf08 : e940             [ 2] 	sbc #0x40					; FS handling routines
cf0a : 8d3d0c           [ 4] 	sta fs_datasect+0			; Each cluster = 32 sectors
cf0d : ad3e0c           [ 4] 	lda fs_datasect+1			; Therefore take off 0x40 se
cf10 : e900             [ 2] 	sbc #0
cf12 : 8d3e0c           [ 4] 	sta fs_datasect+1
cf15 : ad3f0c           [ 4] 	lda fs_datasect+2
cf18 : e900             [ 2] 	sbc #0
cf1a : 8d3f0c           [ 4] 	sta fs_datasect+2
cf1d : ad400c           [ 4] 	lda fs_datasect+3
cf20 : e900             [ 2] 	sbc #0
cf22 : 8d400c           [ 4] 	sta fs_datasect+3
                             
                             	; Go to root directory using zero cluster #
cf25 : 6479             [ 3] 	stz fh_handle+FH_FirstClust
cf27 : 647a             [ 3] 	stz fh_handle+FH_FirstClust+1
cf29 : 20bfd4           [ 6] 	jsr fs_chdir_direct
                             	
cf2c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_getbyte_sd_buf
                             ;* Given a populated SD buffer, get byte
                             ;* Indexed by X,Y (X=lo,Y=hi) 
                             ;* Input : X,Y make 9 bit index
                             ;* Output : A=Byte
                             ;* Regs affected : None
                             ;****************************************
cf2d :                       fs_getbyte_sd_buf
                             	; if bit 9<>0 then 2nd half of sd_buf
cf2d : 98               [ 2] 	tya
cf2e : 2901             [ 2] 	and #1
cf30 : d004             [ 3] 	bne fs_getbyte_sd_buf_hi
cf32 : bd0002           [ 4] 	lda sd_buf,x
cf35 : 60               [ 6] 	rts
cf36 :                       fs_getbyte_sd_buf_hi
cf36 : bd0003           [ 4] 	lda sd_buf+0x100,x
cf39 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_putbyte_sd_buf
                             ;* Given a populated SD buffer, put byte
                             ;* Indexed by X,Y (X=lo,Y=hi), A=Val 
                             ;* Input : X,Y make 9 bit index, A=byte
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank2.s -----------------------------------

                             ;* Regs affected : None
                             ;****************************************
cf3a :                       fs_putbyte_sd_buf
cf3a : 48               [ 3] 	pha
                             	; if bit 9<>0 then 2nd half of sd_buf
cf3b : 98               [ 2] 	tya
cf3c : 2901             [ 2] 	and #1
cf3e : d005             [ 3] 	bne fs_putbyte_sd_buf_hi
cf40 : 68               [ 4] 	pla
cf41 : 9d0002           [ 5] 	sta sd_buf,x
cf44 : 60               [ 6] 	rts
cf45 :                       fs_putbyte_sd_buf_hi
cf45 : 68               [ 4] 	pla
cf46 : 9d0003           [ 5] 	sta sd_buf+0x100,x
cf49 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_getword_sd_buf
                             ;* Given a populated SD buffer, get word
                             ;* Indexed by Y which is word aligned 
                             ;* Input : Y=Word offset in to sd_buf
                             ;* Output : X,A=Word
                             ;* Regs affected : Y
                             ;****************************************
cf4a :                       fs_getword_sd_buf
cf4a : 98               [ 2] 	tya
cf4b : 0a               [ 2] 	asl a
cf4c : a8               [ 2] 	tay
cf4d : b007             [ 3] 	bcs fs_getword_sd_buf_hi
cf4f : be0002           [ 4] 	ldx sd_buf,y
cf52 : b90102           [ 4] 	lda sd_buf+1,y
cf55 : 60               [ 6] 	rts
cf56 :                       fs_getword_sd_buf_hi
cf56 : be0003           [ 4] 	ldx sd_buf+0x100,y
cf59 : b90103           [ 4] 	lda sd_buf+0x100+1,y
cf5c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_putword_sd_buf
                             ;* Given a populated SD buffer, put word
                             ;* Indexed by Y which is word aligned 
                             ;* Input : Y=Word offset in to sd_buf
                             ;*         X,A=Word
                             ;* Regs affected : Y
                             ;****************************************
cf5d :                       fs_putword_sd_buf
cf5d : 48               [ 3] 	pha
cf5e : 98               [ 2] 	tya
cf5f : 0a               [ 2] 	asl a
cf60 : a8               [ 2] 	tay
cf61 : b009             [ 3] 	bcs fs_putword_sd_buf_hi
cf63 : 8a               [ 2] 	txa
cf64 : 990002           [ 5] 	sta sd_buf,y
cf67 : 68               [ 4] 	pla
cf68 : 990102           [ 5] 	sta sd_buf+1,y
cf6b : 60               [ 6] 	rts
cf6c :                       fs_putword_sd_buf_hi
cf6c : 8a               [ 2] 	txa
cf6d : 990003           [ 5] 	sta sd_buf+0x100,y
cf70 : 68               [ 4] 	pla
cf71 : 990103           [ 5] 	sta sd_buf+0x100+1,y
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank2.s -----------------------------------

cf74 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_root_start
                             ;* Initialise ready to read root directory
                             ;* Input : dirsect is current directory pointer
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf75 :                       fs_dir_root_start
                             	; Set SD sector to root directory
cf75 : a203             [ 2] 	ldx #0x03
cf77 :                       fs_dir_set_sd
cf77 : bd410c           [ 4] 	lda fs_dirsect,x
cf7a : 954e             [ 4] 	sta sd_sect,x
cf7c : ca               [ 2] 	dex
cf7d : 10f8             [ 3] 	bpl fs_dir_set_sd
                             
                             	; SD buffer is where blocks will be read to
cf7f : 644c             [ 3] 	stz sd_slo
cf81 : a902             [ 2] 	lda #hi(sd_buf)
cf83 : 854d             [ 3] 	sta sd_shi
                             
                             	; Load up first sector in to SD buf
cf85 : a902             [ 2] 	lda #hi(sd_buf)
cf87 : 203acd           [ 6] 	jsr sd_sendcmd17
                             
cf8a : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper function preserving A,X,Y
cf8b :                       fs_dir_root_start_w
cf8b : 48               [ 3] 	pha
cf8c : da               [ 3] 	phx
cf8d : 5a               [ 3] 	phy
                             	
cf8e : 2075cf           [ 6] 	jsr fs_dir_root_start
                             	
cf91 : 7a               [ 4] 	ply
cf92 : fa               [ 4] 	plx
cf93 : 68               [ 4] 	pla
cf94 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_find_entry
                             ;* Read directory entry
                             ;* Input : sd_slo, sd_shi : Pointer to directory 
                             ;* Input : C = 0 only find active files.  C = 1 f
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cf95 :                       fs_dir_find_entry
cf95 : 08               [ 3] 	php							; Save C state for checking later
cf96 :                       fs_dir_check_entry
                             	; Not LFN aware
cf96 : a00b             [ 2] 	ldy #FAT_Attr				; Check attribute
cf98 : a9ce             [ 2] 	lda #0xce					; Any of H, S, V, I then skip
cf9a : 314c             [ 5] 	and (sd_slo),y
cf9c : d01a             [ 3] 	bne fs_dir_find_another
cf9e : a000             [ 2] 	ldy #FAT_Name				; Examine 1st byte of name
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank2.s -----------------------------------

cfa0 : b14c             [ 5] 	lda (sd_slo),y
cfa2 : 28               [ 4] 	plp							; Check C
cfa3 : 08               [ 3] 	php
cfa4 : 900a             [ 3] 	bcc	fs_find_active_slot		; Looking to find an ac
cfa6 : c900             [ 2] 	cmp #0						; Else looking for 0 or 0xe5
cfa8 : f020             [ 3] 	beq fs_dir_found_empty
cfaa : c9e5             [ 2] 	cmp #0xe5
cfac : f01c             [ 3] 	beq fs_dir_found_empty
cfae : 8008             [ 3] 	bra fs_dir_find_another		; Else not an entry we'
cfb0 :                       fs_find_active_slot
cfb0 : c900             [ 2] 	cmp #0
cfb2 : f009             [ 3] 	beq fs_dir_notfound			; If zero then no more ent
cfb4 : c9e5             [ 2] 	cmp #0xe5					; Deleted entry?
cfb6 : d008             [ 3] 	bne fs_dir_found_active
cfb8 :                       fs_dir_find_another
cfb8 : 20dacf           [ 6] 	jsr fs_dir_next_entry		; Advance read for next i
cfbb : 80d9             [ 3] 	bra fs_dir_check_entry
                             
cfbd :                       fs_dir_notfound					; No more entries
cfbd : 28               [ 4] 	plp							; Remove temp P from stack
cfbe : 38               [ 2] 	sec							; Set carry to indicate no more
cfbf : 60               [ 6] 	rts
                             
cfc0 :                       fs_dir_found_active
cfc0 : a01f             [ 2] 	ldy #FATFileDesc-1			; Cache the sd entry to fs_
cfc2 :                       fs_dir_copy_sd_entry_byte
cfc2 : b14c             [ 5] 	lda (sd_slo),y
cfc4 : 99110c           [ 5] 	sta fs_direntry,y
cfc7 : 88               [ 2] 	dey
cfc8 : 10f8             [ 3] 	bpl fs_dir_copy_sd_entry_byte
cfca :                       fs_dir_found_empty
cfca : 2010d0           [ 6] 	jsr fs_dir_entry_to_fhandle	; Now copy to file h
cfcd : 28               [ 4] 	plp							; Remove temp P from stack
cfce : 18               [ 2] 	clc							; Clear carry to indicate found
cfcf :                       fs_dir_fin						; Finalise
cfcf : 60               [ 6] 	rts
                             
                             ;* Wrapper function preserving A,X,Y
cfd0 :                       fs_dir_find_entry_w
cfd0 : 48               [ 3] 	pha
cfd1 : da               [ 3] 	phx
cfd2 : 5a               [ 3] 	phy
                             	
cfd3 : 2095cf           [ 6] 	jsr fs_dir_find_entry
                             	
cfd6 : 7a               [ 4] 	ply
cfd7 : fa               [ 4] 	plx
cfd8 : 68               [ 4] 	pla
cfd9 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_dir_next_entry
                             ;* Jump to next directory entry (32 bytes)
                             ;* Load next sector if required
                             ;* Input : sd_slo, sd_shi : Pointer to directory 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
cfda :                       fs_dir_next_entry
cfda : 18               [ 2] 	clc							; Jump to next 32 byte entry
cfdb : a54c             [ 3] 	lda sd_slo					; Update sd_slo, sd_shi
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank2.s -----------------------------------

cfdd : 6920             [ 2] 	adc #32
cfdf : 854c             [ 3] 	sta sd_slo
cfe1 : a54d             [ 3] 	lda sd_shi
cfe3 : 6900             [ 2] 	adc #0
cfe5 : 854d             [ 3] 	sta sd_shi
cfe7 : c904             [ 2] 	cmp #hi(sd_buf+0x200)		; If not at end of sector
cfe9 : d01a             [ 4] 	bne fs_dir_next_done		; then don't load next sec
                             
                             	; Advance the sector
cfeb : a200             [ 2] 	ldx #0x00
cfed : a004             [ 2] 	ldy #0x04
cfef : 38               [ 2] 	sec
cff0 :                       fs_dir_inc_sect
cff0 : b54e             [ 4] 	lda sd_sect,x
cff2 : 6900             [ 2] 	adc #0
cff4 : 954e             [ 4] 	sta sd_sect,x
cff6 : e8               [ 2] 	inx
cff7 : 88               [ 2] 	dey
cff8 : d0f6             [ 3] 	bne fs_dir_inc_sect
                             	
                             	; Reset SD buffer  where blocks will be read to
cffa : 644c             [ 3] 	stz sd_slo
cffc : a902             [ 2] 	lda #hi(sd_buf)
cffe : 854d             [ 3] 	sta sd_shi
                             
d000 : a902             [ 2] 	lda #hi(sd_buf)				; Goes in to sd_buf
d002 : 203acd           [ 6] 	jsr sd_sendcmd17			; Load it
                             
d005 :                       fs_dir_next_done
d005 : 60               [ 6] 	rts
                             
                             ;* Wrapper function preserving A,X,Y
d006 :                       fs_dir_entry_next_w
d006 : 48               [ 3] 	pha
d007 : da               [ 3] 	phx
d008 : 5a               [ 3] 	phy
                             	
d009 : 20dacf           [ 6] 	jsr fs_dir_next_entry
                             	
d00c : 7a               [ 4] 	ply
d00d : fa               [ 4] 	plx
d00e : 68               [ 4] 	pla
d00f : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_dir_entry_to_fhandle
                             ;* Copy directory entry from fs_direntry to fh_ha
                             ;* Input : fs_direntry (32 bytes file descriptor 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d010 :                       fs_dir_entry_to_fhandle
                             	;* Translate name to a string in fhandle
d010 : a200             [ 2] 	ldx #FH_Name				; Destination
d012 : a000             [ 2] 	ldy #FAT_Name				; Source
d014 :                       fs_dir_get_fs_name_ch
d014 : b9110c           [ 4] 	lda fs_direntry,y			; Get name char
d017 : c920             [ 2] 	cmp #' '					; Don't copy space
d019 : f00e             [ 3] 	beq	fs_dir_skip_fs_name_ch
d01b : c008             [ 2] 	cpy #FAT_Ext				; At extension?
d01d : d007             [ 3] 	bne fs_dir_skip_fs_dot_ch
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank2.s -----------------------------------

d01f : 48               [ 3] 	pha
d020 : a92e             [ 2] 	lda #'.'					; Inject dot into handle
d022 : 9556             [ 4] 	sta fh_handle,x
d024 : 68               [ 4] 	pla
d025 : e8               [ 2] 	inx							; Advance past dot separator
d026 :                       fs_dir_skip_fs_dot_ch
d026 : 9556             [ 4] 	sta fh_handle,x				; Copy char to handle
d028 : e8               [ 2] 	inx							; Advance handle
d029 :                       fs_dir_skip_fs_name_ch
d029 : c8               [ 2] 	iny							; Source
d02a : c00b             [ 2] 	cpy #FAT_Attr				; Passed end of name?
d02c : d0e6             [ 3] 	bne fs_dir_get_fs_name_ch
d02e : 7456             [ 4] 	stz fh_handle,x				; Put 0 (terminator)
                             
                             	;* Attribute byte
d030 : a20d             [ 2] 	ldx #FH_Attr				; Point to where attribute will 
d032 : a00b             [ 2] 	ldy #FAT_Attr				; Point to where attribute come
d034 : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* File size
d037 : a20e             [ 2] 	ldx #FH_Size				; Point to where size will go
d039 : a01c             [ 2] 	ldy #FAT_FileSize			; Point to get size from
d03b : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 4 bytes
d03e : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
d041 : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
d044 : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* First cluster
d047 : a223             [ 2] 	ldx #FH_FirstClust
d049 : a01a             [ 2] 	ldy	#FAT_FirstClust
d04b : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 2 bytes
d04e : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             
                             	;* Time and date - ignore ms and use modified da
d051 : a227             [ 2] 	ldx #FH_TimeDate
d053 : 7456             [ 4] 	stz fh_handle,x
d055 : e8               [ 2] 	inx							; Skip ms to time/date 4 bytes
d056 : a016             [ 2] 	ldy	#FAT_ModTime			; Get modified time/date entr
d058 : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte	; Copy 4 bytes (2 by
d05b : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte 
d05e : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte ; (2 bytes for date)
d061 : 2077d0           [ 6] 	jsr fs_dir_entry_to_fh_byte
                             	
                             	; Meta data - remember the parent directory
d064 : a203             [ 2] 	ldx #0x03
d066 :                       fs_dir_dirsect_fh_byte
d066 : bd410c           [ 4] 	lda fs_dirsect,x
d069 : 9573             [ 4] 	sta fh_handle+FH_DirSect,x
d06b : ca               [ 2] 	dex
d06c : 10f8             [ 3] 	bpl fs_dir_dirsect_fh_byte
                             
                             	; Meta data - remember the offset in to the sd b
d06e : a54c             [ 3] 	lda sd_slo
d070 : 8577             [ 3] 	sta fh_handle+FH_DirOffset
d072 : a54d             [ 3] 	lda sd_shi
d074 : 8578             [ 3] 	sta fh_handle+FH_DirOffset+1
                             	
d076 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_dir_entry_to_fh_byte
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank2.s -----------------------------------

                             ;* Copy fs_direntry bytes to fh_handle area
                             ;* Input 	: y = offset in directory entry
                             ;*		 	: x = offset in handle entry
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d077 :                       fs_dir_entry_to_fh_byte
d077 : b9110c           [ 4] 	lda fs_direntry,y
d07a : 9556             [ 4] 	sta fh_handle,x
d07c : c8               [ 2] 	iny
d07d : e8               [ 2] 	inx
d07e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_entry_to_sd
                             ;* Copy fs_direntry bytes to sd card area
                             ;* Index by sd_lo, sd_hi
                             ;* Input	: None
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d07f :                       fs_dir_entry_to_sd
d07f : a21f             [ 2] 	ldx #FATFileDesc-1
d081 :                       fs_dir_entry_to_sd_byte
d081 : b9110c           [ 4] 	lda fs_direntry,y
d084 : 9556             [ 4] 	sta fh_handle,x
d086 : c8               [ 2] 	iny
d087 : e8               [ 2] 	inx
d088 : 60               [ 6] 	rts
                             
                             
                             
                             ;****************************************
                             ;* fs_dir_fhandle_to_entry
                             ;* Copy directory entry from fh_handle to fs_dire
                             ;* Input : fs_fhandle 
                             ;* Output : fs_direntry updated
                             ;* Regs affected : None
                             ;****************************************
d089 :                       fs_dir_fhandle_to_entry
                             	; Set to spaces (11 in total)
d089 : a00a             [ 2] 	ldy #10
d08b : a920             [ 2] 	lda #' '
d08d :                       fs_dir_clear_entry
d08d : 99110c           [ 5] 	sta fs_direntry+FAT_Name,y
d090 : 88               [ 2] 	dey
d091 : 10fa             [ 3] 	bpl fs_dir_clear_entry
                             	;* Translate name to a string in direntry
d093 : a200             [ 2] 	ldx #FH_Name				; Source
d095 : a000             [ 2] 	ldy #FAT_Name				; Destination
d097 :                       fs_dir_get_fh_name_ch
d097 : b556             [ 4] 	lda fh_handle,x				; Get name char
d099 : f021             [ 3] 	beq	fs_dir_do_attr			; Process attribute if end 
d09b : 2095d1           [ 6] 	jsr fs_to_upper				; Case insensitive
d09e : c92e             [ 2] 	cmp #'.'					; Extension separator?
d0a0 : d011             [ 3] 	bne fs_dir_skip_ext			; No, then normal char
d0a2 : e000             [ 2] 	cpx #0						; If dot is first char
d0a4 : f00d             [ 3] 	beq fs_dir_skip_ext			; Then treat as normal cha
d0a6 : e001             [ 2] 	cpx #1						; If dot is not second char
d0a8 : d004             [ 3] 	bne fs_dir_get_fh_dot		; Then treat as dot
d0aa : c556             [ 3] 	cmp fh_handle				; Was the first char dot?
d0ac : f005             [ 3] 	beq fs_dir_skip_ext			; Yes then treat as normal
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank2.s -----------------------------------

d0ae :                       fs_dir_get_fh_dot
d0ae : a008             [ 2] 	ldy #FAT_Ext				; Move to ext position
d0b0 : e8               [ 2] 	inx							; Jump over the dot
d0b1 : 80e4             [ 3] 	bra fs_dir_get_fh_name_ch	; Try more chars
d0b3 :                       fs_dir_skip_ext					; Normal char processing
d0b3 : 99110c           [ 5] 	sta fs_direntry,y			; Save it to direntry
d0b6 : c8               [ 2] 	iny							; Advance entry index
d0b7 : e8               [ 2] 	inx							; Advance string index
d0b8 : c00b             [ 2] 	cpy #FAT_Attr				; All name + ext done?
d0ba : d0db             [ 3] 	bne fs_dir_get_fh_name_ch	; Try for another norm
                             	;* Attribute byte
d0bc :                       fs_dir_do_attr
d0bc : a20d             [ 2] 	ldx #FH_Attr				; Point to where attribute will 
d0be : a00b             [ 2] 	ldy #FAT_Attr				; Point to where attribute come
d0c0 : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* File size
d0c3 :                       fs_dir_fh_size
d0c3 : a20e             [ 2] 	ldx #FH_Size				; Point to where size will go
d0c5 : a01c             [ 2] 	ldy #FAT_FileSize			; Point to get size from
d0c7 : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte	; Copy 4 bytes
d0ca : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte
d0cd : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte
d0d0 : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* First cluster
d0d3 :                       fs_dir_entry_clust
d0d3 : a223             [ 2] 	ldx #FH_FirstClust
d0d5 : a01a             [ 2] 	ldy	#FAT_FirstClust
d0d7 : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte	; Copy 2 bytes
d0da : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             
                             	;* Time and date
d0dd : a227             [ 2] 	ldx #FH_TimeDate
d0df : a00d             [ 2] 	ldy	#FAT_Createms
d0e1 : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte	; ms
d0e4 : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte ; time
d0e7 : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte
d0ea : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte ; date
d0ed : 2002d1           [ 6] 	jsr fs_dir_fh_to_entry_byte
                             	
                             	; Meta data - remember the parent directory
d0f0 : a203             [ 2] 	ldx #0x03
d0f2 :                       fs_dir_fh_dirsect_byte
d0f2 : b573             [ 4] 	lda fh_handle+FH_DirSect,x
d0f4 : 954e             [ 4] 	sta sd_sect,x
d0f6 : ca               [ 2] 	dex
d0f7 : 10f9             [ 3] 	bpl fs_dir_fh_dirsect_byte
                             
                             	; Meta data - remember the offset in to the sd b
d0f9 : a577             [ 3] 	lda fh_handle+FH_DirOffset
d0fb : 854c             [ 3] 	sta sd_slo
d0fd : a578             [ 3] 	lda fh_handle+FH_DirOffset+1
d0ff : 854d             [ 3] 	sta sd_shi
                             	
d101 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_dir_fh_to_entry_byte
                             ;* Copy fh_handle byte to fs_direntry area
                             ;* Input 	: y = offset in directory entry
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank2.s -----------------------------------

                             ;*		 	: x = offset in handle entry
                             ;* Output 	: None
                             ;* Regs affected : All
                             ;****************************************
d102 :                       fs_dir_fh_to_entry_byte
d102 : b556             [ 4] 	lda fh_handle,x
d104 : 99110c           [ 5] 	sta fs_direntry,y
d107 : e8               [ 2] 	inx
d108 : c8               [ 2] 	iny
d109 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_get_next_cluster
                             ;* Given current cluster, find the next
                             ;* Input : fh_handle
                             ;* Output : 
                             ;* Regs affected : None
                             ;****************************************
d10a :                       fs_get_next_cluster
                             	; Get the FAT sector that current clust is in
d10a : 205ad2           [ 6] 	jsr fs_get_FAT_clust_sect
                             
                             	; Get next from this cluster index need low byte
                             	; as each FAT cluster contains 256 cluster entri
d10d : a468             [ 3] 	ldy fh_handle+FH_CurrClust
                             	; X = Low byte, A = High byte of cluster
d10f : 204acf           [ 6] 	jsr fs_getword_sd_buf
                             
                             	; Calculate the sector address and make current 
d112 : 20a7d1           [ 6] 	jsr fs_get_start_sect_data
d115 : a920             [ 2] 	lda #0x20					; 32 sector per cluster countdown	
d117 : 856a             [ 3] 	sta fh_handle+FH_SectCounter
                             
d119 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* fs_IsEOF
                             ;* End of File check (compare file pointer to fil
                             ;* Input : fh_handle
                             ;* Output : C=1 if EOF
                             ;* Regs affected : None
                             ;****************************************
d11a :                       fs_isEOF
d11a : a203             [ 2] 	ldx #0x03
d11c :                       fs_is_eof_cmp
d11c : b56f             [ 4] 	lda fh_handle+FH_Pointer,x
d11e : d564             [ 4] 	cmp fh_handle+FH_Size,x
d120 : d005             [ 3] 	bne fs_notEOF
d122 : ca               [ 2] 	dex
d123 : 10f7             [ 3] 	bpl fs_is_eof_cmp
d125 :                       fs_setEOF	
d125 : 38               [ 2] 	sec							; C = 1 for EOF
d126 : 60               [ 6] 	rts
d127 :                       fs_notEOF	
d127 : 18               [ 2] 	clc							; C = 0 for not EOF
d128 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper than preserves A,X,Y
d129 :                       fs_isEOF_w
d129 : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank2.s -----------------------------------

d12a : da               [ 3] 	phx
d12b : 5a               [ 3] 	phy
                             	
d12c : 201ad1           [ 6] 	jsr fs_isEOF
                             
d12f : 7a               [ 4] 	ply
d130 : fa               [ 4] 	plx
d131 : 68               [ 4] 	pla
d132 : 60               [ 6] 	rts
                             	
                             	
                             	
                             ;****************************************
                             ;* fs_inc_pointer
                             ;* Increment file point, loading sectors and clus
                             ;* This results in sd_buf containing the sector t
                             ;* Input : fh_handle
                             ;* Output : 
                             ;* Regs affected : None
                             ;****************************************
d133 :                       fs_inc_pointer
                             	;Increment pointer
d133 : a200             [ 2] 	ldx #0x00
d135 : a004             [ 2] 	ldy #0x04
d137 : 38               [ 2] 	sec									; Always adds 1 first
d138 :                       fs_inc_pointer_byte
d138 : b56f             [ 4] 	lda fh_handle+FH_Pointer,x
d13a : 6900             [ 2] 	adc #0x00
d13c : 956f             [ 4] 	sta fh_handle+FH_Pointer,x
d13e : e8               [ 2] 	inx
d13f : 88               [ 2] 	dey
d140 : d0f6             [ 3] 	bne fs_inc_pointer_byte
                             
d142 : a56f             [ 3] 	lda fh_handle+FH_Pointer			; If low order == 0
d144 : f001             [ 3] 	beq fs_inc_sector_ov				; Then sector 8 bits has
d146 :                       fs_inc_fin
d146 : 60               [ 6] 	rts
d147 :                       fs_inc_sector_ov						; Check if sector bit 8 has
d147 : a570             [ 3] 	lda fh_handle+FH_Pointer+1			; Load up next high
d149 : 2901             [ 2] 	and #1								; If bit zero = 0 then must have
d14b : d0f9             [ 3] 	bne fs_inc_fin						; overflowed.
                             	;Sector change required
d14d : a200             [ 2] 	ldx #0x00
d14f : a004             [ 2] 	ldy #0x04
d151 : 38               [ 2] 	sec									; Always adds 1 first
d152 :                       fs_inc_fh_sect
d152 : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d154 : 6900             [ 2] 	adc #0x00
d156 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d158 : e8               [ 2] 	inx
d159 : 88               [ 2] 	dey
d15a : d0f6             [ 3] 	bne fs_inc_fh_sect
d15c :                       fs_inc_skip_sec_wrap
d15c : c66a             [ 5] 	dec fh_handle+FH_SectCounter		; If reached the e
d15e : d003             [ 3] 	bne fs_inc_load_sector				; Then get next cluste
                             	; Cluster change required
d160 : 200ad1           [ 6] 	jsr fs_get_next_cluster				; Get next cluster ba
d163 :                       fs_inc_load_sector
d163 : 201ad1           [ 6] 	jsr fs_isEOF						; Check not EOF
d166 : b003             [ 3] 	bcs fs_skip_load_sect				; if so then don't load
d168 : 20e1d1           [ 6] 	jsr fs_load_curr_sect				; Load the sector
d16b :                       fs_skip_load_sect
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank2.s -----------------------------------

d16b : 60               [ 6] 	rts
                             
                             
                             	
                             ;****************************************
                             ;* fs_get_byte
                             ;* Get a byte and advance pointer
                             ;* Input : fh_handle
                             ;* Output : A = char, C = 1 (EOF or file not open
                             ;* Regs affected : None
                             ;****************************************
d16c :                       fs_get_byte
                             	; First check that file is open to read
d16c : a901             [ 2] 	lda #FS_FILEMODER
d16e : 2582             [ 3] 	and fh_handle+FH_FileMode
d170 : f005             [ 3] 	beq fs_get_set_EOF
                             
d172 : 201ad1           [ 6] 	jsr fs_isEOF						; If at EOF then error
d175 : 9006             [ 3] 	bcc fs_get_skip_EOF
                             
d177 :                       fs_get_set_EOF
d177 : a901             [ 2] 	lda #FS_ERR_EOF
d179 : 859f             [ 3] 	sta errno
d17b : 38               [ 2] 	sec
d17c : 60               [ 6] 	rts
d17d :                       fs_get_skip_EOF
d17d : a66f             [ 3] 	ldx fh_handle+FH_Pointer			; Low 8 bits of secto
d17f : a470             [ 3] 	ldy fh_handle+FH_Pointer+1			; Which half of sec
                             	; A=SD buffer byte
d181 : 202dcf           [ 6] 	jsr fs_getbyte_sd_buf
d184 : 48               [ 3] 	pha									; Remember the byte!
d185 : 2033d1           [ 6] 	jsr fs_inc_pointer					; Increment file pointers
d188 : 68               [ 4] 	pla
                             
d189 : 18               [ 2] 	clc									; No error
d18a : 649f             [ 3] 	stz errno
d18c : 60               [ 6] 	rts
                             
                             ;* Wrapper function that preserves X,Y (A=return 
d18d :                       fs_get_byte_w
d18d : da               [ 3] 	phx
d18e : 5a               [ 3] 	phy
                             
d18f : 206cd1           [ 6] 	jsr fs_get_byte
                             	
d192 : 7a               [ 4] 	ply
d193 : fa               [ 4] 	plx
d194 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; With ASCII code in A, make upper
                             ;****************************************
d195 :                       fs_to_upper
d195 : c92f             [ 2] 	cmp #FS_FOLDERCH
d197 : d003             [ 3] 	bne fs_to_upper_nz
d199 : a900             [ 2] 	lda #0
d19b : 60               [ 6] 	rts
d19c :                       fs_to_upper_nz
d19c : c961             [ 2] 	cmp #'a'				; If >='a'
d19e : 9006             [ 3] 	bcc fs_to_upper_done
d1a0 : c97b             [ 2] 	cmp #'z'+1				; If <='z'
d1a2 : b002             [ 3] 	bcs fs_to_upper_done
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank2.s -----------------------------------

d1a4 : e91f             [ 2] 	sbc #0x1f				; Sub 0x1f+1 (C=0)
d1a6 :                       fs_to_upper_done
d1a6 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ; Given the cluster #, find sector #
                             ; Given clust in X,A
                             ; Outputs to fh_handle->FH_CurrSec
                             ;            fh_handle->FH_CurrClust
                             ; Special case if X,A==0 then sector is
                             ; the root sector
                             ;****************************************
d1a7 :                       fs_get_start_sect_data
d1a7 : 8668             [ 3] 	stx fh_handle+FH_CurrClust
d1a9 : 866b             [ 3] 	stx fh_handle+FH_CurrSec+0
d1ab : 8569             [ 3] 	sta fh_handle+FH_CurrClust+1
d1ad : 856c             [ 3] 	sta fh_handle+FH_CurrSec+1
                             	
                             	; If cluster # == 0 then root directory
d1af : 056b             [ 3] 	ora fh_handle+FH_CurrSec+0
d1b1 : f023             [ 3] 	beq fs_get_start_sect_root
                             	
                             	; Initialise to input sector
d1b3 : 646d             [ 3] 	stz fh_handle+FH_CurrSec+2
d1b5 : 646e             [ 3] 	stz fh_handle+FH_CurrSec+3
                             	
                             	; Sector = Cluster * 32
                             	; Shift left 5 times
d1b7 : a005             [ 2] 	ldy #5
d1b9 :                       fs_get_data_sect_m5
d1b9 : 18               [ 2] 	clc
d1ba : 066b             [ 5] 	asl fh_handle+FH_CurrSec+0
d1bc : 266c             [ 5] 	rol fh_handle+FH_CurrSec+1
d1be : 266d             [ 5] 	rol fh_handle+FH_CurrSec+2
d1c0 : 266e             [ 5] 	rol fh_handle+FH_CurrSec+3
d1c2 : 88               [ 2] 	dey
d1c3 : d0f4             [ 3] 	bne fs_get_data_sect_m5
                             
                             	; Add data sector offset
d1c5 : a200             [ 2] 	ldx #0x00
d1c7 : a004             [ 2] 	ldy #0x04
d1c9 : 18               [ 2] 	clc
d1ca :                       fs_get_start_data
d1ca : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d1cc : 7d3d0c           [ 4] 	adc fs_datasect,x
d1cf : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d1d1 : e8               [ 2] 	inx
d1d2 : 88               [ 2] 	dey
d1d3 : d0f5             [ 3] 	bne fs_get_start_data
d1d5 : 60               [ 6] 	rts
d1d6 :                       fs_get_start_sect_root
d1d6 : a203             [ 2] 	ldx #3
d1d8 :                       fs_get_root_sect
d1d8 : bd390c           [ 4] 	lda fs_rootsect,x
d1db : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d1dd : ca               [ 2] 	dex
d1de : 10f8             [ 3] 	bpl fs_get_root_sect
d1e0 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank2.s -----------------------------------

                             ; Load the current sector in FH
                             ;****************************************
d1e1 :                       fs_load_curr_sect
d1e1 : 48               [ 3] 	pha
d1e2 : da               [ 3] 	phx
                             
d1e3 : a203             [ 2] 	ldx #0x03
d1e5 :                       fs_load_cpy_sect
d1e5 : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d1e7 : 954e             [ 4] 	sta sd_sect,x
d1e9 : ca               [ 2] 	dex
d1ea : 10f9             [ 3] 	bpl fs_load_cpy_sect
d1ec : a902             [ 2] 	lda #hi(sd_buf)
d1ee : 203acd           [ 6] 	jsr sd_sendcmd17
                             
d1f1 : fa               [ 4] 	plx
d1f2 : 68               [ 4] 	pla
d1f3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; Flush the current sector
                             ;****************************************
d1f4 :                       fs_flush_curr_sect
d1f4 : 48               [ 3] 	pha
d1f5 : da               [ 3] 	phx
                             
d1f6 : a203             [ 2] 	ldx #0x03
d1f8 :                       fs_flush_cpy_sect
d1f8 : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d1fa : 954e             [ 4] 	sta sd_sect,x
d1fc : ca               [ 2] 	dex
d1fd : 10f9             [ 3] 	bpl fs_flush_cpy_sect
d1ff : a902             [ 2] 	lda #hi(sd_buf)				; Sending data in sd_buf
d201 : 20b3cd           [ 6] 	jsr sd_sendcmd24
                             	
d204 : fa               [ 4] 	plx
d205 : 68               [ 4] 	pla
d206 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_find_empty_clust
                             ;* Find an empty cluster to write to
                             ;* Input : None
                             ;* Output : fh_handle->FH_CurrClust is the empty 
                             ;* Regs affected : None
                             ;****************************************
d207 :                       fs_find_empty_clust
                             	; Starting at cluster 0x0002
d207 : a902             [ 2] 	lda #02
d209 : 8568             [ 3] 	sta fh_handle+FH_CurrClust
d20b : 6469             [ 3] 	stz fh_handle+FH_CurrClust+1
                             
                             	; Start at the first FAT sector
d20d : a203             [ 2] 	ldx #0x03
d20f :                       fs_find_init_fat
d20f : bd350c           [ 4] 	lda fs_fatsect,x
d212 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d214 : ca               [ 2] 	dex
d215 : 10f8             [ 3] 	bpl fs_find_init_fat
                             
                             	; There is only enough room for 512/2 = 256 clus
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank2.s -----------------------------------

                             	; There are 256 sectors of FAT entries
                             
d217 :                       fs_check_empty_sector
d217 : 20e1d1           [ 6] 	jsr fs_load_curr_sect			; Load a FAT sector
d21a :                       fs_check_curr_clust
d21a : a468             [ 3] 	ldy fh_handle+FH_CurrClust		; Index in to this F
d21c : 204acf           [ 6] 	jsr fs_getword_sd_buf
d21f : e000             [ 2] 	cpx #0
d221 : d018             [ 3] 	bne fs_next_fat_entry
d223 : c900             [ 2] 	cmp #0
d225 : d014             [ 3] 	bne fs_next_fat_entry
                             	
                             	; If got here then empty cluster found
                             	; fh_handle->FH_CurrClust is the empty cluster
                             	
                             	; Mark this cluster as used
d227 : a2ff             [ 2] 	ldx #0xff
d229 : a9ff             [ 2] 	lda #0xff
d22b : 205dcf           [ 6] 	jsr fs_putword_sd_buf
                             
                             	; flush this FAT entry back so this cluster is s
d22e : 20f4d1           [ 6] 	jsr fs_flush_curr_sect
                             	
d231 : 646a             [ 3] 	stz fh_handle+FH_SectCounter	; Zero the sector c
d233 : a668             [ 3] 	ldx fh_handle+FH_CurrClust
d235 : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d237 : 20a7d1           [ 6] 	jsr fs_get_start_sect_data		; Initialise the sec
d23a : 60               [ 6] 	rts
                             	; If got here then need to find another cluster
d23b :                       fs_next_fat_entry
                             	_incZPWord fh_handle+FH_CurrClust	; Increment th
                             
                             	; Only 256 FAT entries in a sector of 512 bytes
d241 : a568             [ 3] 	lda fh_handle+FH_CurrClust		; Check low byte of 
d243 : d0d5             [ 3] 	bne fs_check_curr_clust			; Else keep checking c
                             	; Every 256 FAT entries, need to get a new FAT s
d245 :                       fs_next_fat_sect
d245 : 204ad2           [ 6] 	jsr fs_inc_curr_sec				; Increment to the next F
d248 : 80cd             [ 3] 	bra fs_check_empty_sector		; Go an load the new 
                             	
                             
                             ;****************************************
                             ;* fs_inc_curr_sec
                             ;* Increment sector by 1
                             ;* Input : fh_handle has the sector
                             ;****************************************
d24a :                       fs_inc_curr_sec
                             	; add 1 to LSB as sector address is little endia
d24a : a200             [ 2] 	ldx #0x00
d24c : a004             [ 2] 	ldy #0x04
d24e : 38               [ 2] 	sec
d24f :                       fs_inc_sec_byte
d24f : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d251 : 6900             [ 2] 	adc #0x00
d253 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d255 : e8               [ 2] 	inx
d256 : 88               [ 2] 	dey
d257 : d0f6             [ 3] 	bne fs_inc_sec_byte
                             
d259 : 60               [ 6] 	rts
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank2.s -----------------------------------

                             ;****************************************
                             ;* fs_get_FAT_clust_sect
                             ;* Given FH_CurrClust, set FH_CurrSec so that
                             ;* the sector contains the FAT entry
                             ;* Input : fh_handle has the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d25a :                       fs_get_FAT_clust_sect
                             	; Sector offset in to FAT = high byte
                             	; because a sector can hold 256 FAT entries
d25a : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d25c : 856b             [ 3] 	sta fh_handle+FH_CurrSec
d25e : 646c             [ 3] 	stz fh_handle+FH_CurrSec+1
d260 : 646d             [ 3] 	stz fh_handle+FH_CurrSec+2
d262 : 646e             [ 3] 	stz fh_handle+FH_CurrSec+3
                             	
                             	; Add the FAT offset
d264 : 18               [ 2] 	clc
d265 : a200             [ 2] 	ldx #0x00
d267 : a004             [ 2] 	ldy #0x04
d269 :                       fs_get_add_fat
d269 : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d26b : 7d350c           [ 4] 	adc fs_fatsect,x
d26e : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d270 : e8               [ 2] 	inx
d271 : 88               [ 2] 	dey
d272 : d0f5             [ 3] 	bne fs_get_add_fat
                             
                             	; Now load the sector containing this cluster en
d274 : 20e1d1           [ 6] 	jsr fs_load_curr_sect
                             
d277 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_update_FAT_entry
                             ;* FH_LastClust updated with FH_CurrClust
                             ;* Input : fh_handle has the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d278 :                       fs_update_FAT_entry
d278 : 48               [ 3] 	pha
d279 : da               [ 3] 	phx
d27a : 5a               [ 3] 	phy
                             	
d27b : a568             [ 3] 	lda fh_handle+FH_CurrClust+0	; Save current clus
d27d : 48               [ 3] 	pha
d27e : a569             [ 3] 	lda fh_handle+FH_CurrClust+1	; Save current clus
d280 : 48               [ 3] 	pha
                             	; Move back to the last cluster entry
                             	_cpyZPWord fh_handle+FH_LastClust,fh_handle+FH_C
                             
                             
d289 : 205ad2           [ 6] 	jsr fs_get_FAT_clust_sect		; Get the FAT sector 
                             	; Index in to the FAT sector
d28c : a47b             [ 3] 	ldy fh_handle+FH_LastClust
                             	; Get current cluster hi,lo from stack
d28e : 68               [ 4] 	pla
d28f : fa               [ 4] 	plx
d290 : 8668             [ 3] 	stx fh_handle+FH_CurrClust		; Make it the curren
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank2.s -----------------------------------

d292 : 8569             [ 3] 	sta fh_handle+FH_CurrClust+1	; Make it the curre
                             
                             	; Update FAT entry Y with current cluster X,A
d294 : 205dcf           [ 6] 	jsr fs_putword_sd_buf
                             
                             	; The appropriate FAT sector has been updated
                             	; Now flush that sector back	
d297 : 20f4d1           [ 6] 	jsr fs_flush_curr_sect
                             	
d29a : 7a               [ 4] 	ply
d29b : fa               [ 4] 	plx
d29c : 68               [ 4] 	pla
d29d : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_put_byte
                             ;* Put out a byte, incrementing size
                             ;* and committing clusters as necessary
                             ;* including reflecting this in the FAT table
                             ;* Input : fh_handle has the details, A = Byte to
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d29e :                       fs_put_byte
d29e : 48               [ 3] 	pha			; Save A until needed later
                             	; First check that file is open to write
d29f : a980             [ 2] 	lda #FS_FILEMODEW
d2a1 : 2582             [ 3] 	and fh_handle+FH_FileMode
d2a3 : d003             [ 3] 	bne fs_put_skip_err
                             	; C=1 means error
d2a5 : 68               [ 4] 	pla
d2a6 : 38               [ 2] 	sec
d2a7 : 60               [ 6] 	rts
d2a8 :                       fs_put_skip_err
                             	; Before writing a byte, need to check if the cu
                             	; sector is full.
                             	; Check low 9 bits of size and if zero size (i.e
d2a8 : a564             [ 3] 	lda fh_handle+FH_Size
d2aa : d024             [ 3] 	bne fs_put_do_put
d2ac : a565             [ 3] 	lda fh_handle+FH_Size+1
d2ae : f020             [ 3] 	beq fs_put_do_put
d2b0 : 2901             [ 2] 	and #1
d2b2 : d01c             [ 3] 	bne fs_put_do_put
                             	; Got here then current sector is full
                             	; We need to flush this sector to disk
d2b4 : 20f4d1           [ 6] 	jsr fs_flush_curr_sect
                             	; Move to next sector in the cluster
d2b7 : 204ad2           [ 6] 	jsr fs_inc_curr_sec
                             	; Bump the sector counter
d2ba : e66a             [ 5] 	inc fh_handle+FH_SectCounter
                             	; Check if counter at sectors per cluster limit
d2bc : a56a             [ 3] 	lda fh_handle+FH_SectCounter
d2be : c920             [ 2] 	cmp #0x20
d2c0 : d00e             [ 3] 	bne fs_put_do_put
                             	; We need to find a new cluster now
                             	; But first update the FAT chain
                             	; so that the last cluster points to this
d2c2 : 2078d2           [ 6] 	jsr fs_update_FAT_entry
                             	; Before finding a new cluster
                             	; make the current the last
                             	_cpyZPWord fh_handle+FH_CurrClust,fh_handle+FH_L
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank2.s -----------------------------------

                             
                             	; Go find a new empty clust
                             	; starts at sector 0
d2cd : 2007d2           [ 6] 	jsr fs_find_empty_clust
                             	; Finally, can write a byte to the
                             	; SD buffer in memory
d2d0 :                       fs_put_do_put	
d2d0 : a664             [ 3] 	ldx fh_handle+FH_Size			; Load size low as index
d2d2 : a465             [ 3] 	ldy fh_handle+FH_Size+1			; Check which half
d2d4 : 68               [ 4] 	pla								; Get A off stack
d2d5 : 203acf           [ 6] 	jsr fs_putbyte_sd_buf
d2d8 :                       fs_put_inc_size
d2d8 : 38               [ 2] 	sec
d2d9 : a200             [ 2] 	ldx #0x00
d2db : a004             [ 2] 	ldy #0x04
d2dd :                       fs_put_inc_size_byte
d2dd : b564             [ 4] 	lda fh_handle+FH_Size,x
d2df : 6900             [ 2] 	adc #0
d2e1 : 9564             [ 4] 	sta fh_handle+FH_Size,x
d2e3 : e8               [ 2] 	inx
d2e4 : 88               [ 2] 	dey
d2e5 : d0f6             [ 3] 	bne fs_put_inc_size_byte
d2e7 :                       fs_put_fin
d2e7 : 18               [ 2] 	clc
d2e8 : 60               [ 6] 	rts
                             
                             
                             ;* Wrapper function to save A,X,Y
d2e9 :                       fs_put_byte_w
d2e9 : da               [ 3] 	phx
d2ea : 5a               [ 3] 	phy
d2eb : 48               [ 3] 	pha
                             
d2ec : 209ed2           [ 6] 	jsr fs_put_byte
                             	
d2ef : 68               [ 4] 	pla
d2f0 : 7a               [ 4] 	ply
d2f1 : fa               [ 4] 	plx
d2f2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_save_entry
                             ;* Save dir entry back to disk
                             ;* Input : fh_handle has all the details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d2f3 :                       fs_dir_save_entry
                             	; Retrieve the sector where the file entry goes
d2f3 : a203             [ 2] 	ldx #0x03
d2f5 :                       fs_dir_curr_sect
d2f5 : b573             [ 4] 	lda fh_handle+FH_DirSect,x
d2f7 : 956b             [ 4] 	sta fh_handle+FH_CurrSec,x
d2f9 : ca               [ 2] 	dex
d2fa : 10f9             [ 3] 	bpl fs_dir_curr_sect
                             	
d2fc : 20e1d1           [ 6] 	jsr fs_load_curr_sect
                             
                             	; Restore index in to the correct entry
d2ff : a577             [ 3] 	lda fh_handle+FH_DirOffset
d301 : 854c             [ 3] 	sta sd_slo
d303 : a578             [ 3] 	lda fh_handle+FH_DirOffset+1
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank2.s -----------------------------------

d305 : 854d             [ 3] 	sta sd_shi
                             	
                             	; Copy FAT file desc cache to sd position
d307 : a01f             [ 2] 	ldy #FATFileDesc-1			; Cache the fs_direntry sd_
d309 :                       fs_dir_copy_entry_sd_byte
d309 : b9110c           [ 4] 	lda fs_direntry,y
d30c : 914c             [ 5] 	sta (sd_slo),y
d30e : 88               [ 2] 	dey
d30f : 10f8             [ 3] 	bpl fs_dir_copy_entry_sd_byte
                             	
                             	; Now flush this back to disk
                             	
d311 : 20f4d1           [ 6] 	jsr fs_flush_curr_sect
                             	
                             	; Phew we are done
d314 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_find_named
                             ;* Find named file in current directory
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d315 :                       fs_find_named
d315 : 18               [ 2] 	clc								; Find active file
d316 : 2095cf           [ 6] 	jsr fs_dir_find_entry			; Find entry from curren
d319 : b01c             [ 3] 	bcs	fs_name_not_found			; If C then no more entr
d31b : a000             [ 2] 	ldy #0							; Index to filespec
d31d : a200             [ 2] 	ldx #0							; Index to filename
d31f :                       fs_find_check_name
d31f : b183             [ 5] 	lda (fh_handle+FH_FSpecPtr),y	; File spec char
d321 : 2095d1           [ 6] 	jsr fs_to_upper					; Case insensitive
d324 : d556             [ 4] 	cmp fh_handle,x					; compare with this filehand
d326 : d008             [ 3] 	bne fs_find_next
d328 : c900             [ 2] 	cmp #0							; If no more bytes in name to check
d32a : f009             [ 3] 	beq fs_name_found
d32c : e8               [ 2] 	inx
d32d : c8               [ 2] 	iny
d32e : 80ef             [ 3] 	bra fs_find_check_name
d330 :                       fs_find_next
d330 : 20dacf           [ 6] 	jsr fs_dir_next_entry			; Get next entry to chec
d333 : 80e0             [ 3] 	bra fs_find_named
d335 :                       fs_name_found
d335 : 18               [ 2] 	clc								; C=0 file found
                             	; Y=index to terminating ch, A=terminating ch
d336 : 60               [ 6] 	rts
d337 :                       fs_name_not_found					; If C already set then not
d337 : 38               [ 2] 	sec
d338 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* fs_open_read
                             ;* Open a file for reading
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d339 :                       fs_open_read
d339 : 2075cf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank2.s -----------------------------------

d33c : 2015d3           [ 6] 	jsr fs_find_named			; Try to find the file
d33f : b01a             [ 3] 	bcs fs_open_not_found		; C=1 not found
d341 :                       fs_open_found
d341 : a920             [ 2] 	lda #0x20					; 32 sector per cluster countdown	
d343 : 856a             [ 3] 	sta fh_handle+FH_SectCounter
                             
d345 : a679             [ 3] 	ldx fh_handle+FH_FirstClust	; Load up first clus
d347 : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
                             
d349 : 20a7d1           [ 6] 	jsr fs_get_start_sect_data	; Calc the first sect
d34c : 20e1d1           [ 6] 	jsr fs_load_curr_sect		; Load it in to sd_buf
                             
                             
d34f : a203             [ 2] 	ldx #0x03					; Initialise pointer to beginning
d351 :                       fs_open_init_pointer
d351 : 746f             [ 4] 	stz fh_handle+FH_Pointer,x
d353 : ca               [ 2] 	dex
d354 : 10fb             [ 3] 	bpl fs_open_init_pointer
                             
                             	; Set file mode to read
d356 : a901             [ 2] 	lda #FS_FILEMODER
d358 : 8582             [ 3] 	sta fh_handle+FH_FileMode
                             
d35a : 18               [ 2] 	clc
d35b :                       fs_open_not_found
d35b : 60               [ 6] 	rts
                             
                             ;* Wrapper function that saves A,X,Y *
                             ;* X,A = file spec ptr
d35c :                       fs_open_read_w
d35c : 48               [ 3] 	pha
d35d : da               [ 3] 	phx
d35e : 5a               [ 3] 	phy
                             
                             	; Save file name pointer
d35f : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d361 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d363 : 2039d3           [ 6] 	jsr fs_open_read
                             	
d366 : 7a               [ 4] 	ply
d367 : fa               [ 4] 	plx
d368 : 68               [ 4] 	pla
d369 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_stamptimedate
                             ;* Stamp date and time to fhandle
                             ;* Input : None (reads RTC)
                             ;* Output : None
                             ;* Regs affected : all
                             ;****************************************
d36a :                       fs_stamptimedate
                             	; Point to temp space
d36a : a247             [ 2] 	ldx #lo(fs_scratch)
d36c : a90c             [ 2] 	lda #hi(fs_scratch)
                             	; Get the current time and date - 6 bytes
d36e : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Now convert from hhmmssddmmyy format to FAT16
                             	; Byte bit and byte order as follows
                             	; byte 0 = milliseconds
                             	; byte 1 = mmmsssss
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank2.s -----------------------------------

                             	; byte 2 = hhhhhmmm
                             	; byte 3 = MMMDDDDD
                             	; byte 4 = YYYYYYYM
                             	; First decide on milliseconds
d371 : a200             [ 2] 	ldx #0								; Assume 0 milliseconds
d373 : ad490c           [ 4] 	lda fs_scratch+2					; Seconds
d376 : 2901             [ 2] 	and #1
d378 : d002             [ 3] 	bne fs_stamptimedate_ms
d37a : a264             [ 2] 	ldx #100							; 10x100 milliseconds = 1 second
d37c :                       fs_stamptimedate_ms
d37c : 867d             [ 3] 	stx fh_handle+FH_TimeDate			; Save milliseconds
                             	
d37e : ad470c           [ 4] 	lda fs_scratch+0					; Get hours
d381 : 0a               [ 2] 	asl a								; Move to top 5 bits
d382 : 0a               [ 2] 	asl a
d383 : 0a               [ 2] 	asl a
d384 : 857f             [ 3] 	sta fh_handle+FH_TimeDate+2			; Put in time fiel
                             
d386 : ad480c           [ 4] 	lda fs_scratch+1					; Get minutes
d389 : 4a               [ 2] 	lsr a								; Put top 3 bits in to LSB
d38a : 4a               [ 2] 	lsr a
d38b : 4a               [ 2] 	lsr a
d38c : 057f             [ 3] 	ora fh_handle+FH_TimeDate+2			; Combine with hou
d38e : 857f             [ 3] 	sta fh_handle+FH_TimeDate+2			; Put in time fiel
                             
d390 : ad480c           [ 4] 	lda fs_scratch+1					; Get minutes
d393 : 0a               [ 2] 	asl a								; Get bottom 3 bits of mins to top 
d394 : 0a               [ 2] 	asl a
d395 : 0a               [ 2] 	asl a
d396 : 0a               [ 2] 	asl a
d397 : 0a               [ 2] 	asl a
d398 : 857e             [ 3] 	sta fh_handle+FH_TimeDate+1			; Save in time fie
                             	
d39a : ad490c           [ 4] 	lda fs_scratch+2					; Get seconds again
d39d : 4a               [ 2] 	lsr a								; Divide by 2
d39e : 057e             [ 3] 	ora fh_handle+FH_TimeDate+1			; Combine with tim
d3a0 : 857e             [ 3] 	sta fh_handle+FH_TimeDate+1			; Save back to tim
                             	
d3a2 : ad4c0c           [ 4] 	lda fs_scratch+5					; Get year
d3a5 : 18               [ 2] 	clc									; Add 20 to get offset from 1980
d3a6 : 6914             [ 2] 	adc #20
d3a8 : 0a               [ 2] 	asl a								; Shift up
d3a9 : 8581             [ 3] 	sta fh_handle+FH_TimeDate+4			; Put in date fiel
                             
d3ab : ad4b0c           [ 4] 	lda fs_scratch+4					; Get months
d3ae : 4a               [ 2] 	lsr a								; Bit 3 in to bit 0
d3af : 4a               [ 2] 	lsr a
d3b0 : 4a               [ 2] 	lsr a
d3b1 : 0581             [ 3] 	ora fh_handle+FH_TimeDate+4			; Combine with dat
d3b3 : 8581             [ 3] 	sta fh_handle+FH_TimeDate+4			; Put in date fiel
                             
d3b5 : ad4b0c           [ 4] 	lda fs_scratch+4					; Get months
d3b8 : 0a               [ 2] 	asl a								; 3 LSBs in to MSB of A (discard MS
d3b9 : 0a               [ 2] 	asl a
d3ba : 0a               [ 2] 	asl a
d3bb : 0a               [ 2] 	asl a
d3bc : 0a               [ 2] 	asl a
d3bd : 0d4a0c           [ 4] 	ora fs_scratch+3					; Combine with day
d3c0 : 8580             [ 3] 	sta fh_handle+FH_TimeDate+3			; And save in date
                             
d3c2 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank2.s -----------------------------------

                             
                             ;****************************************
                             ;* fs_create_filedir
                             ;* Create a file or directory
                             ;* Input : fh_handle has the name and type attrib
                             ;*		 : new file / directory will be created.
                             ;*		 : Careful to check filename is *unique*
                             ;*		 : before calling this routine.
                             ;*		 : File will be in write mode, needs to be
                             ;*		 : closed to be properly saved
                             ;*		 : C=0 means file, C=1 meand directory
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d3c3 :                       fs_create_filedir
d3c3 : 48               [ 3] 	pha
d3c4 : da               [ 3] 	phx
d3c5 : 5a               [ 3] 	phy
d3c6 : 08               [ 3] 	php							; Save file or dir request for later
                             
d3c7 : 2075cf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
d3ca : 38               [ 2] 	sec							; Find an empty file entry
d3cb : 2095cf           [ 6] 	jsr fs_dir_find_entry		; Find a valid entry
d3ce : b036             [ 4] 	bcs	fs_create_fd_err		; Error, didn't find!
                             
d3d0 : a900             [ 2] 	lda #0						; Assume creating file
d3d2 : 28               [ 4] 	plp							; Unless C=1
d3d3 : 9002             [ 3] 	bcc fh_create_skip_dir
                             	; Set attribute for directory
d3d5 : a910             [ 2] 	lda #FAT_Attr_Dir
d3d7 :                       fh_create_skip_dir
d3d7 : 8563             [ 3] 	sta fh_handle+FH_Attr
                             
                             	; Copy filespec to file handle
d3d9 : a000             [ 2] 	ldy #0
d3db : a200             [ 2] 	ldx #FH_Name
d3dd :                       fs_create_copy_fspec
d3dd : b183             [ 5] 	lda (fh_handle+FH_FSpecPtr),y
d3df : 9556             [ 4] 	sta fh_handle,x
d3e1 : f004             [ 3] 	beq fs_create_copy_fspec_done
d3e3 : e8               [ 2] 	inx
d3e4 : c8               [ 2] 	iny
d3e5 : 80f6             [ 3] 	bra fs_create_copy_fspec
                             
d3e7 :                       fs_create_copy_fspec_done
d3e7 : 6464             [ 3] 	stz fh_handle+FH_Size+0		; Size is zero
d3e9 : 6465             [ 3] 	stz fh_handle+FH_Size+1
d3eb : 6466             [ 3] 	stz fh_handle+FH_Size+2
d3ed : 6467             [ 3] 	stz fh_handle+FH_Size+3
                             
d3ef : 206ad3           [ 6] 	jsr fs_stamptimedate		; Put date time stamp in t
                             	
d3f2 : 2007d2           [ 6] 	jsr fs_find_empty_clust		; Find + record its fir
                             	
                             	; Set current, last and first cluster to the sam
d3f5 : a568             [ 3] 	lda fh_handle+FH_CurrClust
d3f7 : 8579             [ 3] 	sta fh_handle+FH_FirstClust
d3f9 : 857b             [ 3] 	sta fh_handle+FH_LastClust
d3fb : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d3fd : 857a             [ 3] 	sta fh_handle+FH_FirstClust+1
d3ff : 857c             [ 3] 	sta fh_handle+FH_LastClust+1
                             
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank2.s -----------------------------------

                             	; Set file mode to write
d401 : a980             [ 2] 	lda #FS_FILEMODEW
d403 : 8582             [ 3] 	sta fh_handle+FH_FileMode
                             
d405 : 18               [ 2] 	clc
d406 :                       fs_create_fd_err
d406 : 7a               [ 4] 	ply
d407 : fa               [ 4] 	plx
d408 : 68               [ 4] 	pla
d409 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_create_dirptr
                             ;* Create a file that is a pointer to a directory
                             ;* Input : fh_handle has the name and type attrib
                             ;*		 : Entry will be created pointing tp the
                             ;*		 : cluster in FH_CurrClust.
                             ;*		 : Careful to check filename is *unique*
                             ;*		 : before calling this routine.
                             ;*		 : File will be in write mode, needs to be
                             ;*		 : closed to be properly saved
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d40a :                       fs_create_dirptr
d40a : a910             [ 2] 	lda #FAT_Attr_Dir
d40c : 8563             [ 3] 	sta fh_handle+FH_Attr		; Make it a directory
                             
d40e : 6464             [ 3] 	stz fh_handle+FH_Size+0		; Size is zero
d410 : 6465             [ 3] 	stz fh_handle+FH_Size+1
d412 : 6466             [ 3] 	stz fh_handle+FH_Size+2
d414 : 6467             [ 3] 	stz fh_handle+FH_Size+3
                             
d416 : 18               [ 2] 	clc
d417 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_open_write
                             ;* Open a file for writing
                             ;* Input : fh_handle has the name
                             ;*		 : existing file will overwritten
                             ;*		 : new file will be created
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d418 :                       fs_open_write
                             	; try and delete any file with the same name fir
d418 : 207ad4           [ 6] 	jsr fs_delete
d41b : 18               [ 2] 	clc
d41c : 20c3d3           [ 6] 	jsr fs_create_filedir		; Ok go create this file 
                             
d41f : 60               [ 6] 	rts
                             
                             ;* Wrapper function that saves A,X,Y *
d420 :                       fs_open_write_w
d420 : 48               [ 3] 	pha
d421 : da               [ 3] 	phx
d422 : 5a               [ 3] 	phy
                             
d423 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank2.s -----------------------------------

d425 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d427 : 2018d4           [ 6] 	jsr fs_open_write
                             	
d42a : 7a               [ 4] 	ply
d42b : fa               [ 4] 	plx
d42c : 68               [ 4] 	pla
d42d : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* fs_close_filedir
                             ;* Close a file/dir, important for new files
                             ;* Input : fh_handle details
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d42e :                       fs_close_filedir
                             	; Only need to close down stuff in write mode
d42e : a582             [ 3] 	lda fh_handle+FH_FileMode
                             	; Zero out file mode
d430 : 6482             [ 3] 	stz fh_handle+FH_FileMode
                             	; If filemode N bit clear then done
d432 : 103b             [ 3] 	bpl fs_close_done
                             		
                             	; Flush the current sector
d434 : 20f4d1           [ 6] 	jsr fs_flush_curr_sect
                             
                             	; Update the chain from the last cluster
d437 : 2078d2           [ 6] 	jsr fs_update_FAT_entry
                             
                             	; Make current sector = last
d43a : a568             [ 3] 	lda fh_handle+FH_CurrClust
d43c : 857b             [ 3] 	sta fh_handle+FH_LastClust
d43e : a569             [ 3] 	lda fh_handle+FH_CurrClust+1
d440 : 857c             [ 3] 	sta fh_handle+FH_LastClust+1
                             	; Need to update the FAT entry
                             	; to show this cluster is last
d442 : a9ff             [ 2] 	lda #0xff
d444 : 8568             [ 3] 	sta fh_handle+FH_CurrClust
d446 : 8569             [ 3] 	sta fh_handle+FH_CurrClust+1
                             	; Now update the FAT entry to mark the last clus
d448 : 2078d2           [ 6] 	jsr fs_update_FAT_entry
                             	; Then finally save the directory entry
                             	; First fhandle to FATFileDesc
d44b : 2089d0           [ 6] 	jsr fs_dir_fhandle_to_entry
                             
                             	; Update modified date and time to be same as cr
d44e : ad210c           [ 4] 	lda fs_direntry+FAT_CreateDate
d451 : 8d290c           [ 4] 	sta fs_direntry+FAT_ModDate
d454 : 8d230c           [ 4] 	sta fs_direntry+FAT_AccessDate
d457 : ad220c           [ 4] 	lda fs_direntry+FAT_CreateDate+1
d45a : 8d2a0c           [ 4] 	sta fs_direntry+FAT_ModDate+1
d45d : 8d240c           [ 4] 	sta fs_direntry+FAT_AccessDate+1
d460 : ad1f0c           [ 4] 	lda fs_direntry+FAT_CreateTime
d463 : 8d270c           [ 4] 	sta fs_direntry+FAT_ModTime
d466 : ad200c           [ 4] 	lda fs_direntry+FAT_CreateTime+1
d469 : 8d280c           [ 4] 	sta fs_direntry+FAT_ModTime+1
                             	
d46c : 20f3d2           [ 6] 	jsr fs_dir_save_entry
                             
d46f :                       fs_close_done
d46f : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank2.s -----------------------------------

                             
                             
                             ;* Wrapper function preserving A,X,Y *
d470 :                       fs_close_w
d470 : 48               [ 3] 	pha
d471 : da               [ 3] 	phx
d472 : 5a               [ 3] 	phy
                             	
d473 : 202ed4           [ 6] 	jsr fs_close_filedir
                             	
d476 : 7a               [ 4] 	ply
d477 : fa               [ 4] 	plx
d478 : 68               [ 4] 	pla
d479 : 60               [ 6] 	rts
                             	
                             	
                             
                             
                             ;****************************************
                             ;* fs_delete
                             ;* Delete a file
                             ;* Input : fh_handle has the name
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d47a :                       fs_delete
d47a : 2039d3           [ 6] 	jsr fs_open_read			; Try and open the file
d47d : b031             [ 3] 	bcs fs_delete_fin			; If not found then fin
                             	
                             	; Mark first char with deleted indicator
d47f : a9e5             [ 2] 	lda #0xe5
d481 : 8556             [ 3] 	sta fh_handle+FH_Name
                             
                             	; Save this back to directory table
                             	; First fhandle to FATFileDesc
d483 : 2089d0           [ 6] 	jsr fs_dir_fhandle_to_entry	
d486 : 20f3d2           [ 6] 	jsr fs_dir_save_entry
                             
                             	; Now mark all related clusters as free
d489 : a679             [ 3] 	ldx fh_handle+FH_FirstClust
d48b : 8668             [ 3] 	stx fh_handle+FH_CurrClust
d48d : a47a             [ 3] 	ldy fh_handle+FH_FirstClust+1
d48f : 8469             [ 3] 	sty fh_handle+FH_CurrClust+1
d491 :                       fs_delete_clust
                             	; X and Y always contain current cluster
                             	; Make last = current
d491 : 867b             [ 3] 	stx fh_handle+FH_LastClust
d493 : 847c             [ 3] 	sty fh_handle+FH_LastClust+1
                             
                             	; Given current cluster, find next
                             	; save in X,Y
d495 : 200ad1           [ 6] 	jsr fs_get_next_cluster
                             	; load X,Y with the next cluster
d498 : a668             [ 3] 	ldx fh_handle+FH_CurrClust
d49a : a469             [ 3] 	ldy fh_handle+FH_CurrClust+1
                             	
                             	; Zero out the cluster number
d49c : 6468             [ 3] 	stz fh_handle+FH_CurrClust
d49e : 6469             [ 3] 	stz fh_handle+FH_CurrClust+1
                             
                             	; Update FAT entry of Last Cluster with zero
d4a0 : 2078d2           [ 6] 	jsr fs_update_FAT_entry
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank2.s -----------------------------------

                             
                             	; Restore the next cluster found earlier
d4a3 : 8668             [ 3] 	stx fh_handle+FH_CurrClust
d4a5 : 8469             [ 3] 	sty fh_handle+FH_CurrClust+1
                             
                             	; If the next cluster is not 0xffff
                             	; then continue
d4a7 : e0ff             [ 2] 	cpx #0xff
d4a9 : d0e6             [ 3] 	bne fs_delete_clust
d4ab : c0ff             [ 2] 	cpy #0xff
d4ad : d0e2             [ 3] 	bne fs_delete_clust
d4af : 18               [ 2] 	clc
d4b0 :                       fs_delete_fin
d4b0 : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d4b1 :                       fs_delete_w
d4b1 : 48               [ 3] 	pha
d4b2 : da               [ 3] 	phx
d4b3 : 5a               [ 3] 	phy
                             
d4b4 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d4b6 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d4b8 : 207ad4           [ 6] 	jsr fs_delete
                             	
d4bb : 7a               [ 4] 	ply
d4bc : fa               [ 4] 	plx
d4bd : 68               [ 4] 	pla
d4be : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* fs_chdir_direct
                             ;* Change root directory directly using cluster
                             ;* Input : FH_FirstClust has cluster number of di
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d4bf :                       fs_chdir_direct
                             	; Calculate sector from this directory cluster
d4bf : a679             [ 3] 	ldx fh_handle+FH_FirstClust
d4c1 : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
                             	
                             	; Also record the directory cluster #
d4c3 : 8e450c           [ 4] 	stx fs_dirclust
d4c6 : 8d460c           [ 4] 	sta fs_dirclust+1
                             	
d4c9 : 20a7d1           [ 6] 	jsr fs_get_start_sect_data	; Calc the first sect
                             	
d4cc : a203             [ 2] 	ldx #3						; Copy sector to dirsect
d4ce :                       fs_chdir_direct_sect
d4ce : b56b             [ 4] 	lda fh_handle+FH_CurrSec,x
d4d0 : 9d410c           [ 5] 	sta fs_dirsect,x
d4d3 : ca               [ 2] 	dex
d4d4 : 10f8             [ 3] 	bpl fs_chdir_direct_sect
d4d6 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* fs_chdir
                             ;* Change root directory
                             ;* Input : fh_handle has the name
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank2.s -----------------------------------

                             ;* Regs affected : None
                             ;****************************************
d4d7 :                       fs_chdir
d4d7 : b283             [ 5] 	lda (fh_handle+FH_FSpecPtr)		; First byte of nam
d4d9 : f004             [ 3] 	beq fs_chdir_root				; If zero then goto root fo
d4db : c92f             [ 2] 	cmp #FS_FOLDERCH				; Is it '/'
d4dd : d016             [ 3] 	bne fs_chdir_find				; If not then find the file
d4df :                       fs_chdir_root
d4df : 48               [ 3] 	pha								; Remember the 1st char
d4e0 : 6479             [ 3] 	stz fh_handle+FH_FirstClust		; Else use zero to 
d4e2 : 647a             [ 3] 	stz fh_handle+FH_FirstClust+1
d4e4 : 20bfd4           [ 6] 	jsr fs_chdir_direct
d4e7 : 68               [ 4] 	pla								; If 1st char is zero then done
d4e8 : f029             [ 4] 	beq fs_chdir_fin
d4ea : 18               [ 2] 	clc								; Add 1 to filespec pointer base
d4eb : a583             [ 3] 	lda fh_handle+FH_FSpecPtr
d4ed : 6901             [ 2] 	adc #1
d4ef : 8583             [ 3] 	sta fh_handle+FH_FSpecPtr
d4f1 : a584             [ 3] 	lda fh_handle+FH_FSpecPtr+1
d4f3 : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
                             	; Drop through to processing rest of file spec
                             	
d4f5 :                       fs_chdir_find
d4f5 : 2075cf           [ 6] 	jsr fs_dir_root_start			; Start at root of curre
d4f8 : 2015d3           [ 6] 	jsr fs_find_named				; Try to find the file
d4fb : b017             [ 4] 	bcs fs_chdir_not_found			; C=1 not found
d4fd : 5a               [ 3] 	phy								; Remember where we got to in filespe
d4fe : 20bfd4           [ 6] 	jsr fs_chdir_direct				; Go to the found folder
d501 : 7a               [ 4] 	ply
d502 : b183             [ 5] 	lda (fh_handle+FH_FSpecPtr),y	; What was the las
d504 : f00d             [ 3] 	beq fs_chdir_fin				; If an actual zero then we'
d506 : c8               [ 2] 	iny								; Else move past '/'
d507 : 98               [ 2] 	tya								; Pull index but into A
d508 : 18               [ 2] 	clc								; Add this index to filespec pointer 
d509 : 6583             [ 3] 	adc fh_handle+FH_FSpecPtr
d50b : 8583             [ 3] 	sta fh_handle+FH_FSpecPtr
d50d : a584             [ 3] 	lda fh_handle+FH_FSpecPtr+1
d50f : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d511 : 80e2             [ 4] 	bra fs_chdir_find				; And go and try to navigat
                             
d513 :                       fs_chdir_fin
d513 : 18               [ 2] 	clc
d514 :                       fs_chdir_not_found
d514 : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d515 :                       fs_chdir_w
d515 : 48               [ 3] 	pha
d516 : da               [ 3] 	phx
d517 : 5a               [ 3] 	phy
                             	
d518 : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d51a : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d51c : 20d7d4           [ 6] 	jsr fs_chdir
                             	
d51f : 7a               [ 4] 	ply
d520 : fa               [ 4] 	plx
d521 : 68               [ 4] 	pla
d522 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_mkdir
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank2.s -----------------------------------

                             ;* Create a file
                             ;* Input : fh_handle has the name
                             ;*		 : checks if file already exists
                             ;*		 : new directory will be created
                             ;*       : including . and .. entries
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d523 :                       fs_mkdir
d523 : 2075cf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
                             
                             	; If file or directory with same name exists, th
d526 : 2015d3           [ 6] 	jsr fs_find_named			; Try to find the file
d529 : b002             [ 3] 	bcs fs_mkdir_ok				; C=1 then no file found - ok
                             
d52b : 38               [ 2] 	sec							; Indicate fail
d52c : 60               [ 6] 	rts
                             
d52d :                       fs_mkdir_ok	
                             	; Remember parent directory ".." cluster #
d52d : ad450c           [ 4] 	lda fs_dirclust
d530 : 48               [ 3] 	pha
d531 : ad460c           [ 4] 	lda fs_dirclust+1
d534 : 48               [ 3] 	pha
                             
d535 : 38               [ 2] 	sec
d536 : 20c3d3           [ 6] 	jsr fs_create_filedir		; Go create the directory
d539 : 202ed4           [ 6] 	jsr fs_close_filedir		; Commit
                             	
                             	; Remember this directory "." cluster #
d53c : a579             [ 3] 	lda fh_handle+FH_FirstClust
d53e : 48               [ 3] 	pha
d53f : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
d541 : 48               [ 3] 	pha
                             	
                             	; Need to zero the directory cluster
                             	; First create a zero filled buffer 512 bytes
d542 : a900             [ 2] 	lda #0
d544 : aa               [ 2] 	tax
d545 : a000             [ 2] 	ldy #0
d547 :                       fs_mkdir_zero_sector
d547 : 203acf           [ 6] 	jsr fs_putbyte_sd_buf
d54a : ca               [ 2] 	dex 
d54b : d0fa             [ 3] 	bne fs_mkdir_zero_sector
d54d : c8               [ 2] 	iny
d54e : c002             [ 2] 	cpy #2
d550 : d0f5             [ 3] 	bne fs_mkdir_zero_sector
                             	; Now fill a cluster's worth of sectors with zer
                             	; Cluster = 16k, buffer = 512 bytes => 32 sector
                             	
                             	; Get directory cluster # in to X,A and calculat
d552 : a679             [ 3] 	ldx fh_handle+FH_FirstClust
d554 : a57a             [ 3] 	lda fh_handle+FH_FirstClust+1
d556 : 20a7d1           [ 6] 	jsr fs_get_start_sect_data
                             	
                             	; Now write cluster worth of sectors
d559 : a220             [ 2] 	ldx #32
d55b :                       fs_mkdir_zero_cluster
d55b : da               [ 3] 	phx
d55c : 20f4d1           [ 6] 	jsr fs_flush_curr_sect
d55f : 204ad2           [ 6] 	jsr fs_inc_curr_sec
d562 : fa               [ 4] 	plx
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank2.s -----------------------------------

d563 : ca               [ 2] 	dex
d564 : d0f5             [ 3] 	bne fs_mkdir_zero_cluster
                             	
                             	; Goto newly created directory (it's empty)
                             	; Use cluster number
d566 : 20d7d4           [ 6] 	jsr fs_chdir
d569 : 2075cf           [ 6] 	jsr fs_dir_root_start		; Start at root of curren
                             	; Go and find first available slot in directory 
d56c : 38               [ 2] 	sec
d56d : 2095cf           [ 6] 	jsr fs_dir_find_entry
                             	; Restore current directory cluster - it's rever
d570 : 68               [ 4] 	pla
d571 : 857a             [ 3] 	sta fh_handle+FH_FirstClust+1
d573 : 68               [ 4] 	pla
d574 : 8579             [ 3] 	sta fh_handle+FH_FirstClust
d576 : 200ad4           [ 6] 	jsr fs_create_dirptr		; Go create the '.' file e
                             	; Create name for entry "."
d579 : a92e             [ 2] 	lda #'.'
d57b : 8556             [ 3] 	sta fh_handle+0
d57d : 6457             [ 3] 	stz fh_handle+1
                             	; Convert fhandle to FATFileDesc
d57f : 2089d0           [ 6] 	jsr fs_dir_fhandle_to_entry	
d582 : 20f3d2           [ 6] 	jsr fs_dir_save_entry		; Save it to to the direc
                             
                             	; Go and find next available slot in directory C
d585 : 20dacf           [ 6] 	jsr fs_dir_next_entry
d588 : 38               [ 2] 	sec
d589 : 2095cf           [ 6] 	jsr fs_dir_find_entry
                             	; Restore parent directory cluster - it's revers
d58c : 68               [ 4] 	pla
d58d : 857a             [ 3] 	sta fh_handle+FH_FirstClust+1
d58f : 68               [ 4] 	pla
d590 : 8579             [ 3] 	sta fh_handle+FH_FirstClust
d592 : 200ad4           [ 6] 	jsr fs_create_dirptr		; Go create the '..' file 
                             	; Create name for entry ".."
d595 : a92e             [ 2] 	lda #'.'
d597 : 8556             [ 3] 	sta fh_handle+0
d599 : 8557             [ 3] 	sta fh_handle+1
d59b : 6458             [ 3] 	stz fh_handle+2
                             	; Convert fhandle to FATFileDesc
d59d : 2089d0           [ 6] 	jsr fs_dir_fhandle_to_entry	
d5a0 : 20f3d2           [ 6] 	jsr fs_dir_save_entry		; Save it to to the direc
                             
                             	; FH_FirstClust points to parent - go to it
d5a3 : 20bfd4           [ 6] 	jsr fs_chdir_direct
                             	
d5a6 : 18               [ 2] 	clc							; Indicate success
                             
d5a7 :                       fs_mkdir_fin
d5a7 : 60               [ 6] 	rts
                             
                             ;** Wrapper function which saves A,X,Y **
d5a8 :                       fs_mkdir_w
d5a8 : 48               [ 3] 	pha
d5a9 : da               [ 3] 	phx
d5aa : 5a               [ 3] 	phy
                             	
d5ab : 8683             [ 3] 	stx fh_handle+FH_FSpecPtr
d5ad : 8584             [ 3] 	sta fh_handle+FH_FSpecPtr+1
d5af : 2023d5           [ 6] 	jsr fs_mkdir
                             
d5b2 : 7a               [ 4] 	ply
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank2.s -----------------------------------

d5b3 : fa               [ 4] 	plx
d5b4 : 68               [ 4] 	pla
d5b5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* fs_dir_fhandle_to_str
                             ;* Unpack contents of fhandle to a string 
                             ;* Input : fs_fhandle, A,X=pointer to string
                             ;* Output : 43 bytes of string (inc, zero pointer
                             ;* Column	Len	Offset	Desc
                             ;*	name	12	0 		8.3 space padded to right
                             ;*	type	3	13		DIR if directory else FIL
                             ;*	date	8	19		DD/MM/YY
                             ;*	time	8	28		hh/mm/ss
                             ;*	size	5	37		right justified no leading zeros
                             ;* Regs affected : None
                             ;****************************************
d5b6 :                       fs_dir_str
d5b6 : 444952                	db "DIR"
d5b9 :                       fs_dir_fil
d5b9 : 202020                	db "   "
d5bc :                       fs_dir_fhandle_str
d5bc : 863f             [ 3] 	stx tmp_v1
d5be : 8540             [ 3] 	sta tmp_v1+1
                             	; Put zero terminator at pos 41
d5c0 : a028             [ 2] 	ldy #40
d5c2 : a900             [ 2] 	lda #0
d5c4 : 913f             [ 5] 	sta (tmp_v1),y
                             	; Pre-fill with spaces
d5c6 : 88               [ 2] 	dey
d5c7 : a920             [ 2] 	lda #' '
d5c9 :                       fs_dir_fhandle_pad_spc
d5c9 : 913f             [ 5] 	sta (tmp_v1),y
d5cb : 88               [ 2] 	dey
d5cc : 10fb             [ 3] 	bpl fs_dir_fhandle_pad_spc
                             	; Put '/' separator for date
d5ce : a92f             [ 2] 	lda #'/'
d5d0 : a013             [ 2] 	ldy #19
d5d2 : 913f             [ 5] 	sta (tmp_v1),y
d5d4 : a016             [ 2] 	ldy #22
d5d6 : 913f             [ 5] 	sta (tmp_v1),y
                             	; Put ':' separator for time
d5d8 : a93a             [ 2] 	lda #':'
d5da : a01c             [ 2] 	ldy #28
d5dc : 913f             [ 5] 	sta (tmp_v1),y
d5de : a01f             [ 2] 	ldy #31
d5e0 : 913f             [ 5] 	sta (tmp_v1),y
                             	;* Unpack name - copy 8.3 (12 chars) until zero
d5e2 : a200             [ 2] 	ldx #FH_Name				; Source
d5e4 : a000             [ 2] 	ldy #0						; Name offset
d5e6 :                       fs_dir_fhandle_name
d5e6 : b556             [ 4] 	lda fh_handle,x				; Get name char
d5e8 : f00b             [ 3] 	beq	fs_dir_fhandle_dotype	; Process attribute if
d5ea : 2095d1           [ 6] 	jsr fs_to_upper				; Case insensitive
d5ed : 913f             [ 5] 	sta (tmp_v1),y
d5ef : e8               [ 2] 	inx
d5f0 : c8               [ 2] 	iny
d5f1 : c00c             [ 2] 	cpy #12
d5f3 : d0f1             [ 3] 	bne fs_dir_fhandle_name		; Max 12 chars for a fi
d5f5 :                       fs_dir_fhandle_dotype
d5f5 : a563             [ 3] 	lda fh_handle+FH_Attr		; Check the type
d5f7 : a00d             [ 2] 	ldy #13						; Point to column for type
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank2.s -----------------------------------

d5f9 : a200             [ 2] 	ldx #0						; Point to DIR string
d5fb : c910             [ 2] 	cmp #FAT_Attr_Dir			; Directory?
d5fd : f002             [ 4] 	beq fs_dir_fhandle_type
d5ff : a203             [ 2] 	ldx #3						; Point to FIL string
d601 :                       fs_dir_fhandle_type				; copy 3 chars
d601 : bdb6d5           [ 4] 	lda fs_dir_str,x
d604 : 913f             [ 5] 	sta (tmp_v1),y
d606 : e8               [ 2] 	inx
d607 : c8               [ 2] 	iny
d608 : c010             [ 2] 	cpy #16
d60a : d0f5             [ 3] 	bne fs_dir_fhandle_type
                             
                             	;* Date
                             	; Extract year
d60c : a581             [ 3] 	lda fh_handle+FH_TimeDate+4 ; Top 7 bits is year
d60e : 4a               [ 2] 	lsr a
d60f : 38               [ 2] 	sec							; Remove offset from 1980 (-20)
d610 : e914             [ 2] 	sbc #20
d612 : a017             [ 2] 	ldy #23						; Save to date field
d614 : 2086d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract month
d617 : a581             [ 3] 	lda fh_handle+FH_TimeDate+4 ; Bottom bit is bit 
d619 : 4a               [ 2] 	lsr a						; Put in to C
d61a : a580             [ 3] 	lda fh_handle+FH_TimeDate+3	; Top 3 bits are mon
d61c : 6a               [ 2] 	ror a						; Rotate in C for bit 3 (now have 4 b
d61d : 4a               [ 2] 	lsr a						; Bring to low nibble
d61e : 4a               [ 2] 	lsr a
d61f : 4a               [ 2] 	lsr a
d620 : 4a               [ 2] 	lsr a
d621 : a014             [ 2] 	ldy #20						; Month field position
d623 : 2086d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract days
d626 : a580             [ 3] 	lda fh_handle+FH_TimeDate+3 ; Bottom bottom 5 bi
d628 : 291f             [ 2] 	and #0x1f					; So mask that
d62a : a011             [ 2] 	ldy #17						; Day field position
d62c : 2086d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             
                             	;* Time
                             	; Extract hours
d62f : a57f             [ 3] 	lda fh_handle+FH_TimeDate+2	; Ignore ms. Top5 bi
d631 : 4a               [ 2] 	lsr a
d632 : 4a               [ 2] 	lsr a
d633 : 4a               [ 2] 	lsr a
d634 : a01a             [ 2] 	ldy #26						; Hours field
d636 : 2086d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract minutes
d639 : a57e             [ 3] 	lda fh_handle+FH_TimeDate+1	; Top 3 bits is bit 
d63b : 4a               [ 2] 	lsr a						; Shift it to bottom
d63c : 4a               [ 2] 	lsr a
d63d : 4a               [ 2] 	lsr a
d63e : 4a               [ 2] 	lsr a
d63f : 4a               [ 2] 	lsr a
d640 : 8d470c           [ 4] 	sta fs_scratch				; Save partial result
d643 : a57f             [ 3] 	lda fh_handle+FH_TimeDate+2	; Bottom 3 bits is b
d645 : 2907             [ 2] 	and #0x07					; Mask for those bits
d647 : 0a               [ 2] 	asl a						; Shift up in to position 3,4,5
d648 : 0a               [ 2] 	asl a
d649 : 0a               [ 2] 	asl a
d64a : 0d470c           [ 4] 	ora fs_scratch				; Combine with top 3 bits
d64d : a01d             [ 2] 	ldy #29						; Minutes field
d64f : 2086d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract seconds
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank2.s -----------------------------------

d652 : a57e             [ 3] 	lda fh_handle+FH_TimeDate+1	; Bottom 5 bits is s
d654 : 291f             [ 2] 	and #0x1f					; Mask for those
d656 : 0a               [ 2] 	asl a						; x2
d657 : a020             [ 2] 	ldy #32						; Seconds field
d659 : 2086d6           [ 6] 	jsr fs_util_num_bcd			; Put digits
                             	; Extract size
d65c : a565             [ 3] 	lda fh_handle+FH_Size+1		; Only taking 16 bits o
d65e : a664             [ 3] 	ldx fh_handle+FH_Size+0		; X=Low
d660 : 2050ca           [ 6] 	jsr word_to_bcd				; X,A to BCD in num_a (3 byte
d663 : a587             [ 3] 	lda num_a+2					; 100k and 10k digits
d665 : a023             [ 2] 	ldy #35						; Position of size field
d667 : 209cd6           [ 6] 	jsr fs_util_num_bcd_a		; Put only 10k digit
d66a : a586             [ 3] 	lda num_a+1					; 1k and hundreds digits
d66c : 208ed6           [ 6] 	jsr fs_util_num_bcd_xa		; Put digits in AX
d66f : a585             [ 3] 	lda num_a+0					; tens and units digits
d671 : 208ed6           [ 6] 	jsr fs_util_num_bcd_xa		; Put digits in AX
d674 : a023             [ 2] 	ldy #35						; Check for leading zeros
d676 :                       fs_dir_fhandle_zeros
d676 : b13f             [ 5] 	lda (tmp_v1),y
d678 : c930             [ 2] 	cmp #'0'
d67a : d009             [ 3] 	bne fs_dir_fhandle_done
d67c : a920             [ 2] 	lda #' '
d67e : 913f             [ 5] 	sta (tmp_v1),y
d680 :                       fs_dir_fhandle_zskip
d680 : c8               [ 2] 	iny
d681 : c027             [ 2] 	cpy #39						; Last zero can stay
d683 : d0f1             [ 3] 	bne fs_dir_fhandle_zeros
                             	; byte 0 = milliseconds
                             	; byte 1 = mmmsssss
                             	; byte 2 = hhhhhmmm
                             	; byte 3 = MMMDDDDD
                             	; byte 4 = YYYYYYYM
d685 :                       fs_dir_fhandle_done
d685 : 60               [ 6] 	rts
                             
d686 :                       fs_util_num_bcd
d686 : aa               [ 2] 	tax							; Only can do 00-99
d687 : a900             [ 2] 	lda #0						; So high byte = 0
d689 : 2050ca           [ 6] 	jsr word_to_bcd				; X,A to BCD in num_a
d68c : a585             [ 3] 	lda num_a+0					; Two least significant BCD digi
d68e :                       fs_util_num_bcd_xa				; Enter here if bcd convers
d68e : 48               [ 3] 	pha
d68f : aa               [ 2] 	tax							; X contains this
d690 : 68               [ 4] 	pla							; Two least significant BCD digits (00
d691 : 4a               [ 2] 	lsr a						; Get tens digit 
d692 : 4a               [ 2] 	lsr a
d693 : 4a               [ 2] 	lsr a
d694 : 4a               [ 2] 	lsr a
d695 : 18               [ 2] 	clc
d696 : 6930             [ 2] 	adc #'0'					; Convert to ascii
d698 : 913f             [ 5] 	sta (tmp_v1),y				; Save in string position (2 c
d69a : c8               [ 2] 	iny
d69b : 8a               [ 2] 	txa
d69c :                       fs_util_num_bcd_a				; Enter here if only units n
d69c : 290f             [ 2] 	and #0x0f					; Get units digit
d69e : 18               [ 2] 	clc
d69f : 6930             [ 2] 	adc #'0'					; Convert to ascii
d6a1 : 913f             [ 5] 	sta (tmp_v1),y
d6a3 : c8               [ 2] 	iny
d6a4 : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank2.s -----------------------------------

                             	
d6a5 :                       msg_initialising_fs
d6a5 : 4d6f756e74696e..      	db "Mounting filesystem\r\r",0
d6bb :                       msg_noinit_fs
d6bb : 4e6f2066696c65..      	db "No filesystem available\r\r",0
d6d5 :                       mod_sz_sd_fs_e
                             
                             
                             	; End of Code
d6d5 :                       _code_end
d6d5 :                       _bank2_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
