AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank0.s -----------------------------------

8344 lines read, no errors in pass 1.
c000 =                       _bank0_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank0.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank0.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank0.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank0.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank0.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank0.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank0.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank0.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank0.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank0.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank0.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank0.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank0.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank0.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank0.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank0.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank0.s -----------------------------------

                             ; Serial FIFO buffer pointers
0002 =                       ser_first	ds	1		; Pointer to first byte in buffer
0003 =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0004 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0006 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0007 =                       vdp_curstat	ds	1		; Cursor status
0008 =                       vdp_curval	ds	1		; Cursor value on screen
0009 =                       vdp_blank	ds	1		; Screen blank value normally 32
000a =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
000b =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0017 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0027 =                       kb_raw  	ds	1		; Raw keyboard code
0028 =                       kb_last		ds	1		; Raw code of last key
0029 =                       kb_code 	ds	1		; Converted keyboard code
002a =                       kb_stat		ds	1		; Keyboard status for caps and shi
002b =                       kb_deb		ds	1		; VB periods since last KB spike
002c =                       kb_rep		ds	1		; Keyboard repeat timer
002d =                       kb_rep_tim 	ds	1		; Default repeat speed
002e =                       kb_rep_del 	ds	1		; Default repeat delay timing
002f =                       kb_debounce ds	1		; Default repeat debounce
0030 =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
0031 =                       tmp_c		ds	2		; Temp address c
0033 =                       tmp_v1		ds	2		; VDP temp addresses
0035 =                       tmp_a		ds	2		; Temp storage a
0037 =                       tmp_b 		ds	2		; Temp address b
0039 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
003b =                       buf_adr		ds	2		; Line buffer address
003d =                       buf_sz		ds	1		; Buffer size
003e =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
003f =                       sd_status	ds	1		; SD card status
0040 =                       sd_slo		ds	1		; Sector pointer low
0041 =                       sd_shi		ds	1		; Sector pointer high
0042 =                       sd_sect		ds	4		; SD Card sector address
0046 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
004a =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0079 =                       ztmp_16					; Start of 16 byte scratch area (all 
0079 =                       num_a		ds	4		; 4 byte primary accumulator
007d =                       num_b		ds	4		; 4 byte secondary accumulator
0081 =                       num_x		ds	4		; 4 byte x register
0085 =                       num_tmp		ds	4		; 4 byte temp space
0089 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
0091 =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank0.s -----------------------------------

0091 =                       dflat_zp_save_s			; ZP save dflat from here
0091 =                       df_checkkey	ds	1		; Key check interval counter
0092 =                       df_checkmsk	ds	1		; Mask for check key
0093 =                       errno		ds	1		; General error condition status
0094 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
0095 =                       df_sp		ds	1		; Stack pointer after error to resto
0096 =                       df_pc		ds	2		; PC after error to return to
0098 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
009a =                       df_brkval	ds	1		; Byte after BRK instruction
009b =                       df_prgstrt	ds	2		; Start of program code
009d =                       df_prgend	ds	2		; End of program code
009f =                       df_vntstrt	ds	2		; Variable name table start
00a1 =                       df_vntend	ds	2		; Variable name table end
00a3 =                       df_vvtstrt	ds	2		; Variable value table start
00a5 =                       df_vvtend	ds	2		; Variable value table end
00a7 =                       df_varcnt	ds	1		; Variable counter
00a8 =                       df_starstrt	ds	2		; String and array table start
00aa =                       df_starend	ds	2		; String and array table end
00ac =                       df_rtstop	ds	1		; Runtime stack pointer
00ad =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ae =                       df_strbuff	ds	1		; String expression buffer
00af =                       df_stridx	ds	1		; Top of string buffer (grows dow
00b0 =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00b2 =                       df_linoff	ds	1		; Offset in to line buffer
00b3 =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00b4 =                       df_eolidx	ds	1		; End of line index (i.e length)
00b5 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00b6 =                       df_curstidx	ds	1		; Offset to the start of curren
00b7 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00b9 =                       df_symoff	ds	1		; Offset in to token table
00ba =                       df_symini	ds	2		; Start of symtab
00bc =                       df_currlin	ds	2		; Execution current line pointer
00be =                       df_exeoff	ds	1		; Execution line buffer offset
00bf =                       df_nextlin	ds	2		; Next line to execute
00c1 =                       df_procmode	ds	1		; Only used during tokenisation
00c2 =                       df_procargs	ds	1		; Only used during tokenisation
00c3 =                       df_procloc	ds	1		; Counts the number of local par
00c4 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00c6 =                       df_lineptr	ds	2		; Pointer to line during searche
00c8 =                       df_lineidx	ds	1		; Pointer to line index during s
00c9 =                       df_ifnest	ds	1		; Global nested if counter
00ca =                       df_currdat	ds	2		; Data current line pointer
00cc =                       df_datoff	ds	1		; Data line buffer offset
00cd =                       df_rnd		ds	2		; Random number seed
                             
00cf =                       df_asmpc	ds	2		; Assembler program counter
00d1 =                       df_asmopt	ds	1		; Assembler current option
00d2 =                       df_asmadmd	ds	1		; Addressing mode
00d3 =                       df_asmopcde	ds	1		; Current opcode
00d4 =                       df_asmoprnd	ds	2		; Current operand
00d6 =                       df_asmlen	ds	1		; Instruction length
                             
00d7 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00d7 =                       df_tmpptra	ds	2		; Temp pointer a
00d9 =                       df_tmpptrb	ds	2		; Temp pointer b
00db =                       df_tmpptrc	ds	2		; Temp pointer c
00dd =                       df_tmpptrd	ds	2		; Temp pointer d
00df =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank0.s -----------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00e1 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
0c00 =                       	org 0x0c00			; Page 11 = non-zero page variables
                             ; Interrupt routine addresses
0c00 =                       int_nmi		 ds 2		; Master NMI handler
0c02 =                       int_irq		 ds	2		; Master IRQ handler
0c04 =                       int_brk		 ds	2		; Master BRK handler
0c06 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
0c08 =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
0c0a =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Self-modifying code or code that needs to run w
0c0c =                       ram_code	ds  64		; 64 bytes of RAM code space
0c4c =                       pt3_int		ds	1		; =1 when PT3 interrupt routine is
                             
                             
                             ; Active IO device settings
0c4d =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c4e =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c5e =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank0.s -----------------------------------

                             ; Filesystem parameters
0c7e =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c82 =                       fs_fatsect	ds	4		; Start of FAT tables
0c86 =                       fs_rootsect	ds	4		; Start of Root Directory
0c8a =                       fs_datasect	ds	4		; Start of Data Area
0c8e =                       fs_dirsect	ds	4		; Current directory sector numbe
0c92 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c94 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0cb4 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0cb6 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : 77c7                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : 8dcb                  	fcw init			; 0xfffc : Reset Vector
fffe : e5c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
c000 : c0                    	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank0.s -----------------------------------

                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4cc0c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4cbdc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4c50c6           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c8ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c97c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4cf9c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4ca1c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4c5dc6           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c75c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f330, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d847, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d5bd, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d650, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d559, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d518, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d235, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank0.s -----------------------------------

c0d6 :                       _fs_open_read_w
                              _bankjsr $d404, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d4c8, 2
                             
c106 :                       _fs_put_byte_w
                              _bankjsr $d391, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $d078, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d0ae, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $d033, 2
                             
c166 :                       _get_byte
                              _bankjsr $d27d, 0
                             
c17e :                       _put_byte
                              _bankjsr $d292, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e390, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e39d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $de59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d29f, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d22a, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d25b, 0
                             
c226 :                       _init_fs
                              _bankjsr $cf10, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cc0a, 2
                             
c256 :                       _init_snd
                              _bankjsr $d668, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d2b1, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d2c0, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d32b, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cc13, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank0.s -----------------------------------

                             
c2ce :                       _gr_cls
                              _bankjsr $de6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $de16, 0
                             
c2fe :                       _gr_line
                              _bankjsr $e1ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $e00a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e115, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ded7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $df15, 0
                             
c376 :                       _gr_point
                              _bankjsr $dfbb, 0
                             
c38e :                       _gr_get
                              _bankjsr $def2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $defa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d661, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c6f9, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c6a1, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c697, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c68a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $dc00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d487, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d5ed, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d53e, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d658, 0
                             
c4ae :                       _rtc_nvwrite
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank0.s -----------------------------------

                              _bankjsr $d640, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d664, 2
                             
c4de :                       _sd_sendcmd17
                              _bankjsr $cde2, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $ce5b, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cc0a, 0
                             
c526 :                       _PT3INIT
                              _bankjsr $cc13, 3
                             
c53e :                       _PT3START
                              _bankjsr $cc0a, 3
                             
c556 :                       _PT3PAUSE
                              _bankjsr $cc0d, 3
                             
c56e :                       _PT3RESUME
                              _bankjsr $cc10, 3
                             
c586 :                       mod_sz_autogen_e
                             
                             	
c586 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c586 :                       mod_sz_io_s
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank0.s -----------------------------------

                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c586 :                       io_init
c586 : a900             [ 2] 	lda #0				; Assume it's serial
c588 : 48               [ 3] 	pha
c589 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c58c : 2910             [ 2] 	and #0x10
c58e : d00b             [ 3] 	bne io_init_set_default
c590 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c593 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c595 : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c597 : 68               [ 4] 	pla
c598 : a901             [ 2] 	lda #1
c59a : 48               [ 3] 	pha
c59b :                       io_init_set_default
c59b : 68               [ 4] 	pla
c59c : 8d4d0c           [ 4] 	sta io_default
c59f : 4ca2c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c5a2 :                       io_set_default			; Entry point for default
c5a2 : ad4d0c           [ 4] 	lda io_default
c5a5 :                       io_active_device		; Entry point for A set
c5a5 : 0a               [ 2] 	asl	a				; x16 the Block number
c5a6 : 0a               [ 2] 	asl a
c5a7 : 0a               [ 2] 	asl a
c5a8 : 0a               [ 2] 	asl a
c5a9 : a8               [ 2] 	tay
c5aa : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c5ac :                       io_copy_data
c5ac : b920c6           [ 4] 	lda io_devices,y
c5af : 9d4e0c           [ 5] 	sta io_block,x
c5b2 : c8               [ 2] 	iny
c5b3 : e8               [ 2] 	inx
c5b4 : e010             [ 2] 	cpx #io_struct
c5b6 : d0f4             [ 3] 	bne io_copy_data
                             	
c5b8 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c5ba : 853e             [ 3] 	sta buf_ef
c5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
c5bd :                       io_get_ch
c5bd : 6c4e0c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c5c0 :                       io_put_ch
c5c0 : 6c500c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c3 :                       io_open_read
c5c3 : 6c520c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c6 :                       io_open_write
c5c6 : 6c540c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c9 :                       io_close
c5c9 : 6c560c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5cc :                       io_delete
c5cc : 6c580c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
c5cf :                       io_read_line
c5cf : 863b             [ 3] 	stx buf_adr			; Save pointer to storage
c5d1 : 853c             [ 3] 	sta buf_adr+1
c5d3 : 843d             [ 3] 	sty buf_sz			; Max length
c5d5 : 08               [ 3] 	php					; Save echo state
c5d6 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c5d8 :                       io_get_line_byte
c5d8 : 38               [ 2] 	sec					; Getting bytes synchronously
c5d9 : 20bdc5           [ 6] 	jsr io_get_ch		; Get a byte
c5dc : b026             [ 4] 	bcs io_get_line_done; Got nothing then finish
c5de : 28               [ 4] 	plp					; Get echo state
c5df : 08               [ 3] 	php					; Instantly save it back
c5e0 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c5e2 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c5e4 : d005             [ 3] 	bne io_do_echo
c5e6 : c000             [ 2] 	cpy #0				; Already at beginning?
c5e8 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c5ea : 88               [ 2] 	dey					; Else decrement length
c5eb :                       io_do_echo
c5eb : 20c0c5           [ 6] 	jsr io_put_ch		; Echo it
c5ee :                       io_skip_echo
c5ee : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c5f0 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c5f2 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c5f4 : f003             [ 3] 	beq io_skip_special
c5f6 : 913b             [ 5] 	sta (buf_adr),y		; Save it
c5f8 : c8               [ 2] 	iny					; Increase length
c5f9 :                       io_skip_special
c5f9 : c53e             [ 3] 	cmp buf_ef			; Is it the terminating char?
c5fb : f007             [ 4] 	beq io_get_line_done	; If yes then done
c5fd : c43d             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c5ff : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c601 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c602 : 38               [ 2] 	sec					; Yes, set carry flag
c603 : 60               [ 6] 	rts					; And done
c604 :                       io_get_line_done
c604 : a900             [ 2] 	lda #0
c606 : 913b             [ 5] 	sta (buf_adr),y		; Terminate with 0
c608 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c609 : 18               [ 2] 	clc					; Clear carry flag
c60a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c60b :                       io_print_line
c60b : 48               [ 3] 	pha
                             
c60c : 8631             [ 3] 	stx tmp_c					; Store the string pointer
c60e : 8532             [ 3] 	sta tmp_c+1					; lo and hi
c610 : a000             [ 2] 	ldy #0						; Start at the beginning!
c612 :                       io_print_line_byte
c612 : b131             [ 5] 	lda (tmp_c),y				; Copy byte to
c614 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c616 : 20c0c5           [ 6] 	jsr io_put_ch				; Transmit
c619 : c8               [ 2] 	iny
c61a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank0.s -----------------------------------

c61c :                       io_print_done
c61c : 68               [ 4] 	pla
c61d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c61e :                       io_null_op
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c620 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c620 :                       io_device0					; Serial device, input = Ser, outp
c620 : 66c1                  	dw	_get_byte			; io_get_ch
c622 : 7ec1                  	dw	_put_byte			; io_put_ch
c624 : 1ec6                  	dw	io_null_op			; io_open_r
c626 : 1ec6                  	dw	io_null_op			; io_open_w
c628 : 1ec6                  	dw	io_null_op			; io_close_f
c62a : 1ec6                  	dw	io_null_op			; io_del_f
c62c : 1ec6                  	dw	io_null_op			; io_ext1
c62e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c630 :                       io_device1					; Default device, input = screen e
c630 : 96c1                  	dw	_gr_get_key			; io_get_ch
c632 : aec1                  	dw	_gr_put_byte		; io_put_ch
c634 : 1ec6                  	dw	io_null_op			; io_open_r
c636 : 1ec6                  	dw	io_null_op			; io_open_w
c638 : 1ec6                  	dw	io_null_op			; io_close_f
c63a : 1ec6                  	dw	io_null_op			; io_del_f
c63c : 1ec6                  	dw	io_null_op			; io_ext1
c63e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c640 :                       io_device2					; SD device, input = SD, output = 
c640 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c642 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c644 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c646 : eec0                  	dw	_fs_open_write_w	; io_open_w
c648 : a6c0                  	dw	_fs_close_w			; io_close_f
c64a : 8ec0                  	dw	_fs_delete_w		; io_del_f
c64c : 1ec6                  	dw	io_null_op			; io_ext1
c64e : 1ec6                  	dw	io_null_op			; io_ext2
                             
c650 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank0.s -----------------------------------

                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c650 :                       vdp_wr_reg
c650 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c653 : ea               [ 2] 	nop
c654 : ea               [ 2] 	nop
c655 : 0980             [ 2] 	ora #0x80
c657 : 8d0105           [ 4] 	sta VDP_MODE1
c65a : 4980             [ 2] 	eor #0x80
c65c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c65d :                       vdp_wr_addr
c65d : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c660 : ea               [ 2] 	nop
c661 : ea               [ 2] 	nop
c662 : ea               [ 2] 	nop
c663 : 0940             [ 2] 	ora #0x40		; Required by VDP
c665 : 8d0105           [ 4] 	sta VDP_MODE1
c668 : 4940             [ 2] 	eor #0x40		; Undo that bit
c66a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c66b :                       vdp_mem_wait
c66b : da               [ 3] 	phx								; 3
c66c : a60a             [ 3] 	ldx vdp_delay					; 3
c66e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c670 :                       vdp_mem_wait_loop
c670 : ca               [ 2] 	dex								; 2
c671 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c673 :                       vdp_mem_wait_end
c673 : fa               [ 4] 	plx								; 3
c674 : 60               [ 6] 	rts								; 6
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank0.s -----------------------------------

                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c675 :                       vdp_rd_addr
c675 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c678 : ea               [ 2] 	nop
c679 : ea               [ 2] 	nop
c67a : ea               [ 2] 	nop
c67b : 8d0105           [ 4] 	sta VDP_MODE1
c67e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c680 :                       vdp_rd_vram
c680 : ad0005           [ 4] 	lda VDP_VRAM
c683 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c685 :                       vdp_wr_vram
c685 : 8d0005           [ 4] 	sta VDP_VRAM
c688 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c68a :                       vdp_poke
c68a : 08               [ 3] 	php
c68b : 48               [ 3] 	pha
c68c : 98               [ 2] 	tya
c68d : 78               [ 2] 	sei
c68e : 205dc6           [ 6] 	jsr vdp_wr_addr
c691 : 68               [ 4] 	pla
c692 : 2085c6           [ 6] 	jsr vdp_wr_vram
c695 : 28               [ 4] 	plp
c696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank0.s -----------------------------------

                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c697 :                       vdp_peek
c697 : 08               [ 3] 	php
c698 : 78               [ 2] 	sei
c699 : 2075c6           [ 6] 	jsr vdp_rd_addr
c69c : 2080c6           [ 6] 	jsr vdp_rd_vram
c69f : 28               [ 4] 	plp
c6a0 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6a1 :                       snd_set
c6a1 : 48               [ 3] 	pha
                             
c6a2 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6a4 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6a7 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6aa : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6ad : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6af : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6b1 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6b4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6b6 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c6b9 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c6bc : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c6be : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c6c1 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6c3 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6c6 : 68               [ 4] 	pla
                             	
c6c7 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c6c8 :                       snd_get
c6c8 : 48               [ 3] 	pha
                             
c6c9 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6cb : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6ce : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6d1 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6d4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6d6 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6d8 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6db : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6dd : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6e0 : a900             [ 2] 	lda #0x00				; Set Port A to input
c6e2 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6e5 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6e8 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6ea : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c6ec : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6ef : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c6f2 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6f4 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6f7 : 68               [ 4] 	pla
                             	
c6f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c6f9 :                       snd_get_joy0
c6f9 : 48               [ 3] 	pha
c6fa : 48               [ 3] 	pha
c6fb :                       snd_get_joy0_retry
c6fb : 7a               [ 4] 	ply
c6fc : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c6fe : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c701 : 5a               [ 3] 	phy						; Put on stack
c702 : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c705 : 98               [ 2] 	tya
c706 : ba               [ 2] 	tsx						; Get stack pointer
c707 : dd0101           [ 4] 	cmp 0x101,x				; Compare with stack value
c70a : d0ef             [ 4] 	bne snd_get_joy0_retry	; If not equal, try again
c70c : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank0.s -----------------------------------

c70d : 68               [ 4] 	pla
c70e : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c70f :                       main
                             
c70f :                       infinity
c70f : 2046c0           [ 6] 	jsr _df_pg_dflat
c712 : 4c0fc7           [ 3] 	jmp infinity
                             
c715 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c715 : 4275696c64203a..       db "Build : 28-01-2025\r"
c728 : 3132384b204272..       db "128K Breadboard Computer\r"
c741 : 42792040363530..       db "By @6502Nerd\r"
c74e : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c762 :                       init_nmi
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank0.s -----------------------------------

                             	; Core IRQ handler
c762 : a977             [ 2] 	lda #lo(nmi)
c764 : 8d000c           [ 4] 	sta int_nmi
c767 : a9c7             [ 2] 	lda #hi(nmi)
c769 : 8d010c           [ 4] 	sta int_nmi+1
                             
c76c : a9f5             [ 2] 	lda #lo(null_handler)
c76e : 8d0a0c           [ 4] 	sta int_usercia1
c771 : a9c7             [ 2] 	lda #hi(null_handler)
c773 : 8d0b0c           [ 4] 	sta int_usercia1+1
                             
c776 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c777 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* 6551 uses this - fills the receive buffer
                             ;* VIA 2 uses this- user interrupt
c777 :                       nmi
c777 : 48               [ 3] 	pha
                             
c778 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c77b : 100c             [ 3] 	bpl	nmi_skip_acia			; If no interrupt don't do a
                             
c77d : 5a               [ 3] 	phy
c77e : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c781 : a403             [ 3] 	ldy ser_last				; Put byte in last position of F
c783 : 990008           [ 5] 	sta ser_buf,y
c786 : e603             [ 5] 	inc ser_last				; Advance position of last
                             
c788 : 7a               [ 4] 	ply
c789 :                       nmi_skip_acia
                             	;* Try PIA1 first for rapid Timer handling
c789 : ad8d04           [ 4] 	lda IO_1 + IFR
c78c : 102c             [ 3] 	bpl nmi_fin
c78e : 5a               [ 3] 	phy
c78f : da               [ 3] 	phx
                             	; Reset interrupt by reading T1C-L
c790 : ad8404           [ 4] 	lda IO_1+T1CL
                             	; Swtich to RAM bank 2 don't touch anything else
c793 : ad0004           [ 4] 	lda IO_0+PRB
c796 : 48               [ 3] 	pha                     ; Remember the bank #
c797 : 29cf             [ 2] 	and #0b11001111
c799 : 0920             [ 2] 	ora #0b00100000
c79b : 8d0004           [ 4] 	sta IO_0+PRB
                             	; Switch out ROM for RAM
c79e : ad8004           [ 4] 	lda IO_1+PRB                    ; Get current RO
c7a1 : 48               [ 3] 	pha
c7a2 : 29df             [ 2] 	and #(0xff ^ MM_DIS)            ; Switch off ROM
c7a4 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
c7a7 : ee4c0c           [ 6] 	inc pt3_int 				  	; Set PT3 interrupt flag
c7aa : 20f1c7           [ 6] 	jsr call_irq_usercia1			; Call user cia1 handler
c7ad : 9c4c0c           [ 4] 	stz pt3_int 				  	; Clear PT3 interrupt flag
                             	; Restore ROM
c7b0 : 68               [ 4] 	pla                             ; Get original p
c7b1 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
                             	; Restore RAM bank
c7b4 : 68               [ 4] 	pla                             ; Get original p
c7b5 : 8d0004           [ 4] 	sta IO_0+PRB                    ; Update port to
c7b8 : fa               [ 4] 	plx
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank0.s -----------------------------------

c7b9 : 7a               [ 4] 	ply
c7ba :                       nmi_fin
c7ba : 68               [ 4] 	pla
c7bb : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c7bc :                       init_irq
                             	; Core IRQ handler
c7bc : a9f6             [ 2] 	lda #lo(irq)
c7be : 8d020c           [ 4] 	sta int_irq
c7c1 : a9c7             [ 2] 	lda #hi(irq)
c7c3 : 8d030c           [ 4] 	sta int_irq+1
                             	
                             	; Core BRK handler
c7c6 : a91c             [ 2] 	lda #lo(irq_brk)
c7c8 : 8d040c           [ 4] 	sta int_brk
c7cb : a9c8             [ 2] 	lda #hi(irq_brk)
c7cd : 8d050c           [ 4] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0 interrupts
c7d0 : a9f5             [ 2] 	lda #lo(null_handler)
c7d2 : 8d060c           [ 4] 	sta int_uservdp
c7d5 : a9c7             [ 2] 	lda #hi(null_handler)
c7d7 : 8d070c           [ 4] 	sta int_uservdp+1
                             
c7da : a9f5             [ 2] 	lda #lo(null_handler)
c7dc : 8d080c           [ 4] 	sta int_usercia0
c7df : a9c7             [ 2] 	lda #hi(null_handler)
c7e1 : 8d090c           [ 4] 	sta int_usercia0+1
                             
c7e4 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c7e5 :                       call_irq_master
c7e5 : 6c020c           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c7e8 :                       call_irq_brk
c7e8 : 6c040c           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c7eb :                       call_irq_uservdp
c7eb : 6c060c           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c7ee :                       call_irq_usercia0
c7ee : 6c080c           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c7f1 :                       call_irq_usercia1
c7f1 : 6c0a0c           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c7f4 :                       null_irq
c7f4 : 40               [ 6] 	rti
                             
                             ;* null handler
c7f5 :                       null_handler
c7f5 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank0.s -----------------------------------

                             
                             ;* Master IRQ handler
c7f6 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c7f9 : ba               [ 2] 	tsx
c7fa : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c7fd : 2910             [ 2] 	and #0x10
c7ff : d0e7             [ 3] 	bne call_irq_brk
                             	
c801 : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try VDP next
c802 :                       irq_check_vdp	
c802 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c805 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c807 : 20ebc7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c80a : 2069c8           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c80d : 2047c8           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c810 :                       irq_check_cia0
c810 : ad0d04           [ 4] 	lda IO_0 + IFR
c813 : 1003             [ 3] 	bpl irq_fin
c815 : 20eec7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c818 :                       irq_fin
                             	_pullAXY
                             
c81b : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c81c :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c81c : 38               [ 2] 	sec
c81d : bd0501           [ 4] 	lda 0x0105,x
c820 : e902             [ 2] 	sbc #2
c822 : 8598             [ 3] 	sta df_brkpc
c824 : bd0601           [ 4] 	lda 0x0106,x
c827 : e900             [ 2] 	sbc #0
c829 : 8599             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c82b : a001             [ 2] 	ldy #1
c82d : b198             [ 5] 	lda (df_brkpc),y
c82f : 859a             [ 3] 	sta df_brkval
c831 : 8593             [ 3] 	sta errno
                             	; now update the return address
c833 : a596             [ 3] 	lda df_pc
c835 : 9d0501           [ 5] 	sta 0x105,x
c838 : a597             [ 3] 	lda df_pc+1
c83a : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c840 : 8579             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank0.s -----------------------------------

c842 : 867a             [ 3] 	stx num_a+1
c844 : 847b             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c846 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c847 :                       int_kb_handler	
c847 : a52b             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c849 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c84b : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c84e : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c850 : f00c             [ 3] 	beq int_keys_up
c852 :                       int_do_read
c852 : 8530             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c854 : a52f             [ 3] 	lda kb_debounce			; Set debounce
c856 : 852b             [ 3] 	sta kb_deb
c858 :                       int_skip_scan
c858 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c85a : 8d0d04           [ 4] 	sta IO_0 + IFR
c85d : 60               [ 6] 	rts
c85e :                       int_keys_up					; No key pressed
c85e : 6427             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c860 : 6428             [ 3] 	stz kb_last
c862 : 6429             [ 3] 	stz kb_code
c864 : 642b             [ 3] 	stz kb_deb
c866 : 642c             [ 3] 	stz kb_rep
c868 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c869 :                       int_vdp_handler
c869 : 2095c8           [ 6] 	jsr update_timers	; If it is then update system 
                             
c86c : a506             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c86e : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c870 : c607             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c872 : a507             [ 3] 	lda vdp_curstat		; Check it
c874 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c876 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c878 : a507             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c87a : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c87c : 8507             [ 3] 	sta vdp_curstat		
                             
c87e : 18               [ 2] 	clc					; Add offset for cursor address in vram
c87f : a520             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c881 : 651d             [ 3] 	adc gr_scrngeom+gr_cur_off
c883 : aa               [ 2] 	tax
c884 : a521             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c886 : 6900             [ 2] 	adc #0
                             
c888 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
c88b : a507             [ 3] 	lda vdp_curstat
c88d : 2980             [ 2] 	and #0x80
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank0.s -----------------------------------

c88f : 4508             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c891 : 2085c6           [ 6] 	jsr vdp_wr_vram
c894 :                       int_vdp_fin	
c894 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c895 :                       update_timers
c895 : e604             [ 5] 	inc vdp_int_cnt
c897 : d002             [ 3] 	bne inc_kb_timers
c899 : e605             [ 5] 	inc vdp_int_cnt+1
c89b :                       inc_kb_timers
c89b : a62b             [ 3] 	ldx kb_deb			; Is debounce 0?
c89d : f002             [ 3] 	beq skip_kb_deb
c89f : c62b             [ 5] 	dec kb_deb
c8a1 :                       skip_kb_deb
c8a1 : a62c             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c8a3 : f002             [ 3] 	beq skip_kb_rep
c8a5 : c62c             [ 5] 	dec kb_rep
c8a7 :                       skip_kb_rep
c8a7 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c8a8 :                       long_delay
c8a8 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c8ac : a000             [ 2] 	ldy #0x00
c8ae :                       long_delay_1
c8ae : ea               [ 2] 	nop
c8af : ea               [ 2] 	nop
c8b0 : ea               [ 2] 	nop
c8b1 : ea               [ 2] 	nop
c8b2 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank0.s -----------------------------------

c8b3 : d0f9             [ 3] 	bne long_delay_1
c8b5 : ca               [ 2] 	dex
c8b6 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c8bb : 28               [ 4] 	plp
                             	
c8bc : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c8bd :                       utilPrintSPC
c8bd : 48               [ 3] 	pha
c8be : a920             [ 2] 	lda #' '
c8c0 : 20c0c5           [ 6] 	jsr io_put_ch
c8c3 : 68               [ 4] 	pla
c8c4 : 60               [ 6] 	rts
                             
c8c5 :                       utilPrintCRLF
c8c5 : 48               [ 3] 	pha
c8c6 : a90d             [ 2] 	lda #UTF_CR
c8c8 : 20c0c5           [ 6] 	jsr io_put_ch
c8cb : 68               [ 4] 	pla
c8cc : 60               [ 6] 	rts
                             
c8cd :                       utilPrintA
c8cd : 8539             [ 3] 	sta tmp_d
c8cf : 48               [ 3] 	pha
c8d0 : 8a               [ 2] 	txa
c8d1 : 48               [ 3] 	pha
c8d2 : a539             [ 3] 	lda tmp_d
c8d4 : 20f2c8           [ 6] 	jsr str_a_to_x
c8d7 : 20c0c5           [ 6] 	jsr io_put_ch
c8da : 8a               [ 2] 	txa
c8db : 20c0c5           [ 6] 	jsr io_put_ch
c8de : 68               [ 4] 	pla
c8df : aa               [ 2] 	tax
c8e0 : 68               [ 4] 	pla
c8e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank0.s -----------------------------------

                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c8e2 :                       util_clr_mem
c8e2 : 48               [ 3] 	pha
c8e3 : 5a               [ 3] 	phy
c8e4 : 8633             [ 3] 	stx tmp_v1
c8e6 : 8534             [ 3] 	sta tmp_v1+1
c8e8 : a900             [ 2] 	lda #0
c8ea :                       mem_clr_byte
c8ea : 88               [ 2] 	dey
c8eb : 9133             [ 5] 	sta (tmp_v1),y
c8ed : d0fb             [ 3] 	bne mem_clr_byte
c8ef : 7a               [ 4] 	ply
c8f0 : 68               [ 4] 	pla
c8f1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c8f2 :                       str_a_to_x
c8f2 : 48               [ 3] 	pha					; Save the byte using later on
c8f3 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c8f5 : 18               [ 2] 	clc
c8f6 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8f8 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8fa : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c8fc : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8fe :                       skip_a_f_1
c8fe : aa               [ 2] 	tax					; Low char is in X
c8ff : 68               [ 4] 	pla					; Get byte back
c900 : 4a               [ 2] 	lsr a				; Make high nibble low
c901 : 4a               [ 2] 	lsr a
c902 : 4a               [ 2] 	lsr a
c903 : 4a               [ 2] 	lsr a
c904 : 18               [ 2] 	clc
c905 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c907 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c909 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c90b : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c90d :                       skip_a_f_2
                             
c90d : 18               [ 2] 	clc					; No error
c90e : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c90f :                       str_x_to_a
c90f : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c911 : 38               [ 2] 	sec					; Process high char in A
c912 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c914 : c90a             [ 2] 	cmp #10				; If A < 10 then
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank0.s -----------------------------------

c916 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c918 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c91a :                       skip_x_f_1
c91a : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c91c : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c91e : 0a               [ 2] 	asl a				; This is the high nibble
c91f : 0a               [ 2] 	asl a
c920 : 0a               [ 2] 	asl a
c921 : 0a               [ 2] 	asl a
c922 : 48               [ 3] 	pha					; Save the high nibble
c923 : 8a               [ 2] 	txa					; Now process the low char in X
c924 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c926 : 38               [ 2] 	sec
c927 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c929 : c90a             [ 2] 	cmp #10				; If A < 10 then
c92b : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c92d : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c92f :                       skip_x_f_2
c92f : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c931 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c933 : 8579             [ 3] 	sta num_a			; Store low nibble in temp
c935 : 68               [ 4] 	pla					; Get high nibble
c936 : 0579             [ 3] 	ora num_a			; OR with low nibble
                             
c938 : 18               [ 2] 	clc					; No error
c939 : 60               [ 6] 	rts					; A contains value
                             
c93a :                       str_x_to_a_errl
c93a : 68               [ 4] 	pla
c93b :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c93d :                       con_n_to_a
c93d : 8685             [ 3] 	stx num_tmp
c93f : 8586             [ 3] 	sta num_tmp+1
c941 : 6479             [ 3] 	stz num_a
c943 : 647a             [ 3] 	stz num_a+1
c945 : c000             [ 2] 	cpy #NUM_ANY
c947 : f014             [ 3] 	beq con_n_to_a_detect
c949 : 88               [ 2] 	dey
c94a : d003             [ 3] 	bne con_n_not_dec
c94c :                       con_dec_jmp
c94c : 4ce0c9           [ 3] 	jmp con_dec_to_a_int
c94f :                       con_n_not_dec
c94f : 88               [ 2] 	dey
c950 : d003             [ 3] 	bne con_n_not_hex
c952 :                       con_hex_jmp
c952 : 4c77c9           [ 3] 	jmp con_hex_to_a_int
c955 :                       con_n_not_hex
c955 : 88               [ 2] 	dey
c956 : d003             [ 3] 	bne con_n_err
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank0.s -----------------------------------

c958 :                       con_bin_jmp
c958 : 4cb6c9           [ 3] 	jmp con_bin_to_a_int
c95b :                       con_n_err
c95b : 38               [ 2] 	sec
c95c : 60               [ 6] 	rts
c95d :                       con_n_to_a_detect
c95d : b285             [ 5] 	lda (num_tmp)
c95f : c930             [ 2] 	cmp #'0'
c961 : d0e9             [ 3] 	bne con_dec_jmp
c963 : a001             [ 2] 	ldy #1
c965 : b185             [ 5] 	lda (num_tmp),y
c967 : 0920             [ 2] 	ora #0x20
c969 : c978             [ 2] 	cmp #'x'
c96b : f0e5             [ 3] 	beq con_hex_jmp
c96d : c962             [ 2] 	cmp #'b'
c96f : f0e7             [ 3] 	beq con_bin_jmp
c971 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c973 :                       con_hex_to_a
c973 : 8685             [ 3] 	stx num_tmp
c975 : 8586             [ 3] 	sta num_tmp+1
c977 :                       con_hex_to_a_int
c977 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c979 : a002             [ 2] 	ldy #2			; start at first digit
c97b :                       con_hex_digit
c97b : b185             [ 5] 	lda (num_tmp),y
c97d : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c97f : 38               [ 2] 	sec							; Process high char in A
c980 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c982 : c90a             [ 2] 	cmp #10						; If A < 10 then
c984 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c986 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c988 :                       con_hex_skip_x_f_1
c988 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c98a : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c98c : 48               [ 3] 	pha
                             	; make room for lo nibble
c98d : 0679             [ 5] 	asl num_a
c98f : 267a             [ 5] 	rol num_a+1
c991 : 0679             [ 5] 	asl num_a
c993 : 267a             [ 5] 	rol num_a+1
c995 : 0679             [ 5] 	asl num_a
c997 : 267a             [ 5] 	rol num_a+1
c999 : 0679             [ 5] 	asl num_a
c99b : 267a             [ 5] 	rol num_a+1
                             	; save in low nibble
c99d : 68               [ 4] 	pla
c99e : 0579             [ 3] 	ora num_a
c9a0 : 8579             [ 3] 	sta num_a
c9a2 : c8               [ 2] 	iny
c9a3 : ca               [ 2] 	dex
c9a4 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c9a6 :                       con_hex_err
c9a6 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank0.s -----------------------------------

c9a7 : 60               [ 6] 	rts
                             	; found a non-hex digit
c9a8 :                       con_hex_done
                             	; if no digits processed then error
c9a8 : c002             [ 2] 	cpy #2
c9aa : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c9ac : 98               [ 2] 	tya
c9ad : aa               [ 2] 	tax
c9ae : a902             [ 2] 	lda #NUM_HEX
c9b0 : 18               [ 2] 	clc
c9b1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c9b2 :                       con_bin_to_a
c9b2 : 8685             [ 3] 	stx num_tmp
c9b4 : 8586             [ 3] 	sta num_tmp+1
c9b6 :                       con_bin_to_a_int
c9b6 : a002             [ 2] 	ldy #2
c9b8 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c9ba :                       con_bin_digit
c9ba : b185             [ 5] 	lda (num_tmp),y
c9bc : c930             [ 2] 	cmp #'0'
c9be : 9010             [ 3] 	bcc con_bin_done
c9c0 : c932             [ 2] 	cmp #'1'+1
c9c2 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c9c4 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c9c6 : 2679             [ 5] 	rol num_a
c9c8 : 267a             [ 5] 	rol num_a+1
c9ca : c8               [ 2] 	iny
c9cb : ca               [ 2] 	dex
c9cc : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c9ce : 800a             [ 3] 	bra con_bin_err
c9d0 :                       con_bin_done
                             	; didn't process any digit = error
c9d0 : c002             [ 2] 	cpy #2
c9d2 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c9d4 : 98               [ 2] 	tya
c9d5 : aa               [ 2] 	tax
c9d6 : a903             [ 2] 	lda #NUM_BIN
c9d8 : 18               [ 2] 	clc
c9d9 : 60               [ 6] 	rts
c9da :                       con_bin_err
c9da : 38               [ 2] 	sec
c9db : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
c9dc :                       con_dec_to_a
c9dc : 8685             [ 3] 	stx num_tmp
c9de : 8586             [ 3] 	sta num_tmp+1
c9e0 :                       con_dec_to_a_int
c9e0 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c9e2 : b285             [ 5] 	lda (num_tmp)
c9e4 : c92d             [ 2] 	cmp #'-'
c9e6 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c9e8 : c8               [ 2] 	iny
c9e9 :                       str_d_find_end
c9e9 : b185             [ 5] 	lda (num_tmp),y
c9eb : c930             [ 2] 	cmp #'0'
c9ed : 9007             [ 3] 	bcc str_d_found_end
c9ef : c93a             [ 2] 	cmp #'9'+1
c9f1 : b003             [ 3] 	bcs str_d_found_end
c9f3 : c8               [ 2] 	iny
c9f4 : 80f3             [ 3] 	bra str_d_find_end
c9f6 :                       str_d_found_end
c9f6 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c9f8 : b052             [ 4] 	bcs str_d_error		; e.g. -32767 including minus
c9fa : 8488             [ 3] 	sty num_tmp+3
c9fc : 6487             [ 3] 	stz num_tmp+2
c9fe : 6479             [ 3] 	stz num_a
ca00 : 647a             [ 3] 	stz num_a+1
ca02 :                       str_d_process_digit
ca02 : 88               [ 2] 	dey
ca03 : 3026             [ 3] 	bmi str_d_digits_done
                             
ca05 : b185             [ 5] 	lda (num_tmp),y
                             
ca07 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
ca09 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
ca0b : 38               [ 2] 	sec
ca0c : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
ca0e : 18               [ 2] 	clc
ca0f : 0a               [ 2] 	asl a
ca10 : 6587             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
ca12 : aa               [ 2] 	tax
ca13 : a579             [ 3] 	lda num_a
ca15 : 7d4eca           [ 4] 	adc str_d_powers,x
ca18 : 8579             [ 3] 	sta num_a
ca1a : a57a             [ 3] 	lda num_a+1
ca1c : 7d4fca           [ 4] 	adc str_d_powers+1,x
ca1f : 857a             [ 3] 	sta num_a+1
ca21 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
ca23 : a587             [ 3] 	lda num_tmp+2
ca25 : 6914             [ 2] 	adc #20
ca27 : 8587             [ 3] 	sta num_tmp+2
ca29 : 80d7             [ 3] 	bra str_d_process_digit
ca2b :                       str_d_digits_done
                             	; check if minus
ca2b : b285             [ 5] 	lda (num_tmp)
ca2d : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank0.s -----------------------------------

ca2f : d011             [ 3] 	bne str_d_skip_neg
ca31 : a688             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
ca33 : e002             [ 2] 	cpx #2				; else it's an error
ca35 : 9015             [ 3] 	bcc str_d_error
ca37 : a679             [ 3] 	ldx num_a
ca39 : a57a             [ 3] 	lda num_a+1
ca3b : 20b2ca           [ 6] 	jsr twos_complement
ca3e : 8679             [ 3] 	stx num_a
ca40 : 857a             [ 3] 	sta num_a+1
ca42 :                       str_d_skip_neg
ca42 : a688             [ 3] 	ldx num_tmp+3
ca44 : e001             [ 2] 	cpx #1				; must be at least 1 char
ca46 : 9004             [ 3] 	bcc str_d_error
ca48 : a901             [ 2] 	lda #NUM_DEC
ca4a : 18               [ 2] 	clc
ca4b : 60               [ 6] 	rts
ca4c :                       str_d_error
ca4c : 38               [ 2] 	sec
ca4d : 60               [ 6] 	rts
                             
ca4e :                       str_d_powers
ca4e : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
ca62 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
ca76 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
ca8a : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
ca9e : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
cab2 :                       twos_complement
cab2 : 49ff             [ 2] 	eor #0xff
cab4 : 48               [ 3] 	pha
cab5 : 8a               [ 2] 	txa
cab6 : 49ff             [ 2] 	eor #0xff
cab8 : aa               [ 2] 	tax
cab9 : 68               [ 4] 	pla
caba : e8               [ 2] 	inx
cabb : d001             [ 3] 	bne twos_complement_skip_X
cabd : 1a               [ 2] 	inc a
cabe :                       twos_complement_skip_X
cabe : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
cabf :                       int_to_bcd
cabf : 08               [ 3] 	php
cac0 : 48               [ 3] 	pha
cac1 : da               [ 3] 	phx
                             
cac2 : 8685             [ 3] 	stx num_tmp
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank0.s -----------------------------------

cac4 : 8586             [ 3] 	sta num_tmp+1
cac6 : c980             [ 2] 	cmp #0x80			; Negative?
cac8 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
caca : 20b2ca           [ 6] 	jsr twos_complement
cacd :                       int_to_bcd_skip_neg
cacd : 6479             [ 3] 	stz num_a
cacf : 647a             [ 3] 	stz num_a+1
cad1 : 647b             [ 3] 	stz num_a+2
cad3 : 647c             [ 3] 	stz num_a+3
cad5 : a210             [ 2] 	ldx #16
cad7 : f8               [ 2] 	sed
cad8 :                       int_to_bcd_bit
cad8 : 0685             [ 5] 	asl num_tmp
cada : 2686             [ 5] 	rol num_tmp+1
cadc : a579             [ 3] 	lda num_a
cade : 6579             [ 3] 	adc num_a
cae0 : 8579             [ 3] 	sta num_a
cae2 : a57a             [ 3] 	lda num_a+1
cae4 : 657a             [ 3] 	adc num_a+1
cae6 : 857a             [ 3] 	sta num_a+1
cae8 : a57b             [ 3] 	lda num_a+2
caea : 657b             [ 3] 	adc num_a+2
caec : 857b             [ 3] 	sta num_a+2
caee : ca               [ 2] 	dex
caef : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
caf1 : fa               [ 4] 	plx
caf2 : 68               [ 4] 	pla
caf3 : 28               [ 4] 	plp
caf4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
caf5 :                       word_to_bcd
caf5 : 08               [ 3] 	php
caf6 : 48               [ 3] 	pha
caf7 : da               [ 3] 	phx
                             
caf8 : 8685             [ 3] 	stx num_tmp
cafa : 8586             [ 3] 	sta num_tmp+1
cafc : 6479             [ 3] 	stz num_a
cafe : 647a             [ 3] 	stz num_a+1
cb00 : 647b             [ 3] 	stz num_a+2
cb02 : 647c             [ 3] 	stz num_a+3
cb04 : a210             [ 2] 	ldx #16			; 16 binary bits
cb06 : f8               [ 2] 	sed
cb07 :                       word_to_bcd_bit
cb07 : 0685             [ 5] 	asl num_tmp
cb09 : 2686             [ 5] 	rol num_tmp+1
cb0b : a579             [ 3] 	lda num_a
cb0d : 6579             [ 3] 	adc num_a
cb0f : 8579             [ 3] 	sta num_a
cb11 : a57a             [ 3] 	lda num_a+1
cb13 : 657a             [ 3] 	adc num_a+1
cb15 : 857a             [ 3] 	sta num_a+1
cb17 : a57b             [ 3] 	lda num_a+2
cb19 : 657b             [ 3] 	adc num_a+2
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank0.s -----------------------------------

cb1b : 857b             [ 3] 	sta num_a+2
cb1d : ca               [ 2] 	dex
cb1e : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
cb20 : fa               [ 4] 	plx
cb21 : 68               [ 4] 	pla
cb22 : 28               [ 4] 	plp
cb23 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
cb24 :                       int_to_str_ch
cb24 : 290f             [ 2] 	and #0xf
cb26 : 0930             [ 2] 	ora #0x30					; Convert to ascii
cb28 : 4930             [ 2] 	eor #0x30					; Check if zero digit
cb2a : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
cb2c : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
cb2e : 4930             [ 2] 	eor #0x30					; Restore A
cb30 : 60               [ 6] 	rts							; Return without storing anything
cb31 :                       int_to_str_nz
cb31 : 4930             [ 2] 	eor #0x30					; Restore A
cb33 : 998900           [ 5] 	sta num_buf,y
cb36 : c8               [ 2] 	iny
cb37 : 38               [ 2] 	sec							; Set C as a non-zero encountered
cb38 :                       int_to_str_ch_fin
cb38 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
cb39 :                       int_to_str
                             	_pushAXY
                             
cb3c : a000             [ 2] 	ldy #0						; first pos of num_buf
cb3e : 0900             [ 2] 	ora #0						; Test A for sign bit
cb40 : 08               [ 3] 	php							; Remember C bit of P
cb41 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
cb43 : 20b2ca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
cb46 : 48               [ 3] 	pha							; Remember A
cb47 : a92d             [ 2] 	lda #'-'					; Put in negative sign
cb49 : 8589             [ 3] 	sta num_buf
cb4b : c8               [ 2] 	iny							; Start at second buffer pos
cb4c : 68               [ 4] 	pla							; Restore A
cb4d :                       int_to_str_skip_neg
cb4d : 20f5ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
cb50 : a202             [ 2] 	ldx #2						; Start at BCD high byte
cb52 :                       int_str
cb52 : 28               [ 4] 	plp							; Get C but immediately
cb53 : 08               [ 3] 	php							; Save C (due to loop check later)
cb54 : b579             [ 4] 	lda num_a,x					; Get BCD digit
cb56 : 8590             [ 3] 	sta num_buf+7				; Save A it for the units later
cb58 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cb59 : 4a               [ 2] 	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank0.s -----------------------------------

cb5a : 4a               [ 2] 	lsr a
cb5b : 4a               [ 2] 	lsr a
cb5c : 28               [ 4] 	plp							; Get C
cb5d : 2024cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb60 : a590             [ 3] 	lda num_buf+7				; Get A for the units
cb62 : 2024cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb65 : 08               [ 3] 	php							; Save C
cb66 : ca               [ 2] 	dex
cb67 : 10e9             [ 3] 	bpl int_str
cb69 : 28               [ 4] 	plp							; Check C
cb6a : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cb6c : a930             [ 2] 	lda #'0'					; Stuff a zero
cb6e : 8589             [ 3] 	sta num_buf					; Must be in first position..
cb70 : c8               [ 2] 	iny
cb71 :                       int_to_str_fin
cb71 : a900             [ 2] 	lda #0						; Terminator
cb73 : 998900           [ 5] 	sta num_buf,y
cb76 : c8               [ 2] 	iny
                             	_pullAXY
                             
cb7a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank0.s -----------------------------------

                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb7b :                       str_a_to_d
cb7b : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb7c :                       print_a_to_d
cb7c : 2039cb           [ 6] 	jsr int_to_str
cb7f : a000             [ 2] 	ldy #0
cb81 :                       print_a_to_d_ch
cb81 : b98900           [ 4] 	lda num_buf,y
cb84 : f006             [ 3] 	beq print_a_to_d_fin
cb86 : 20c0c5           [ 6] 	jsr io_put_ch
cb89 : c8               [ 2] 	iny
cb8a : d0f5             [ 3] 	bne print_a_to_d_ch
cb8c :                       print_a_to_d_fin
cb8c : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cb8d :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cb8d : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cb8f : 9a               [ 2] 	txs
cb90 : 4cebcb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cb93 :                       init_2					; init_ram will jump back to here
                             	
cb93 : 2099cb           [ 6] 	jsr kernel_init
                             
cb96 : 4c0fc7           [ 3] 	jmp main
                             
cb99 :                       kernel_init
cb99 : 2062c7           [ 6] 	jsr init_nmi		; Initialise NMI handling
cb9c : 20bcc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cb9f : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cba2 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cba5 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
cba8 : 2026c5           [ 6] 	jsr _PT3INIT		; Load PT3 player code into shadow
cbab :                       kernel_test
cbab : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cbae : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cbb1 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cbb4 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cbb6 : 48               [ 3] 	pha
cbb7 : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cbb9 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cbbc : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cbbe : aa               [ 2] 	tax					; Save the mode temporarily
cbbf : 68               [ 4] 	pla					; Get the default mode from stack
cbc0 : 8a               [ 2] 	txa					; And push the NV mode that was read
cbc1 : 48               [ 3] 	pha
cbc2 : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cbc4 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cbc7 : 8515             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank0.s -----------------------------------

cbc9 :                       kernel_skip_nv	
cbc9 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cbca : 20c6c1           [ 6] 	jsr _gr_init_screen
cbcd : 2086c5           [ 6] 	jsr io_init			; Set default input/output device
cbd0 : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cbde : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cbe1 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cbe4 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cbe7 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cbea : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cbeb :                       init_ram
cbeb : 6400             [ 3] 	stz 0x00			; Start at page 0
cbed : 6401             [ 3] 	stz 0x01
cbef : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cbf1 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cbf3 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cbf5 :                       init_ram_1
cbf5 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cbf7 : 9004             [ 3] 	bcc init_ram_fill
cbf9 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cbfb : 9005             [ 4] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cbfd :                       init_ram_fill
cbfd : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cbff : c8               [ 2] 	iny
cc00 : d0fb             [ 4] 	bne init_ram_fill	; Do a whole page
cc02 :                       init_ram_skip
cc02 : e8               [ 2] 	inx					; Increment page counter
cc03 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cc05 : d0ee             [ 4] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cc07 : 4c93cb           [ 3] 	jmp init_2			; Carry on initialisation
                             
cc0a :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "monitor\cmd.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  CMD.S
                             ;*	Simple monitor.
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank0.s -----------------------------------

0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
00ca =                       cmd_lo					= df_currdat
00cb =                       cmd_hi					= (df_currdat+1)
00cc =                       cmd_mem					= df_datoff
00c6 =                       cmd_msg_ptr				= df_lineptr
                             
                             	; ROM code
                             	code  
                             
                             ; Immediate call to monitor from outside of monit
cc0a :                       cmd_immediate
cc0a : 2074cc           [ 6] 	jsr cmd_parse				; Find command and execute
cc0d : b001             [ 3] 	bcs cmd_imerror				; Carry set = error condition
cc0f : 60               [ 6] 	rts
cc10 :                       cmd_imerror
cc10 : 4c4ccc           [ 3] 	jmp cmd_print_error
                             
cc13 :                       command_line
cc13 : a900             [ 2] 	lda #0						; Initialise monitor
cc15 : 85ca             [ 3] 	sta cmd_lo					; Monitor address lo
cc17 : 85cb             [ 3] 	sta cmd_hi					; Monitor address hi
cc19 : 85cc             [ 3] 	sta cmd_mem					; Memory = 0 RAM, 1 = VRAM
cc1b : a0a0             [ 2] 	ldy #160					; Maximum line length
cc1d : 843d             [ 3] 	sty buf_sz
                             
cc1f :                       cmd_ready
                             	_println msg_ready
                             
                             
cc2c : 38               [ 2] 	sec							; Set carry flag = echo characters
cc2d : a200             [ 2] 	ldx #lo(df_linbuff)
cc2f : a90a             [ 2] 	lda #hi(df_linbuff)
cc31 : a050             [ 2] 	ldy #80
cc33 : 20cfc5           [ 6] 	jsr io_read_line			; Get a command line
cc36 : 2074cc           [ 6] 	jsr cmd_parse				; Find command and execute
cc39 : b003             [ 3] 	bcs cmd_error				; Carry set = error condition
cc3b : 4c1fcc           [ 3] 	jmp cmd_ready
                             
cc3e :                       cmd_error
cc3e : a593             [ 3] 	lda errno
cc40 : 1004             [ 3] 	bpl cmd_skip_quit
cc42 : 6493             [ 3] 	stz errno					; Clear error
cc44 : 18               [ 2] 	clc							; Clear carry
cc45 : 60               [ 6] 	rts							; Return to caller
cc46 :                       cmd_skip_quit	
cc46 : 204ccc           [ 6] 	jsr cmd_print_error
cc49 : 4c1fcc           [ 3] 	jmp cmd_ready
                             
                             ;****************************************
                             ;* cmd_print_error
                             ;* Given error code and Y offset in to buffer
                             ;* print the error message
                             ;* Input : errno, Y
                             ;* Regs affected :
                             ;****************************************
cc4c :                       cmd_print_error
cc4c : 48               [ 3] 	pha
cc4d : 5a               [ 3] 	phy
cc4e : a593             [ 3] 	lda errno
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank0.s -----------------------------------

cc50 : 0a               [ 2] 	asl a
cc51 : a8               [ 2] 	tay
cc52 : be3dcf           [ 4] 	ldx cmd_error_messages,y
cc55 : b93ecf           [ 4] 	lda cmd_error_messages+1,y
cc58 : 200bc6           [ 6] 	jsr io_print_line
cc5b : a920             [ 2] 	lda #' '
cc5d : 20c0c5           [ 6] 	jsr io_put_ch
cc60 : 68               [ 4] 	pla								; Pull Y off stack
cc61 : 48               [ 3] 	pha								; And put it back
cc62 : 20f2c8           [ 6] 	jsr str_a_to_x
cc65 : 20c0c5           [ 6] 	jsr io_put_ch
cc68 : 8a               [ 2] 	txa
cc69 : 20c0c5           [ 6] 	jsr io_put_ch
cc6c : a90d             [ 2] 	lda #UTF_CR
cc6e : 20c0c5           [ 6] 	jsr io_put_ch
                             	
cc71 : 7a               [ 4] 	ply
cc72 : 68               [ 4] 	pla
cc73 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* cmd_parse
                             ;* Parse the command line in the io buffer
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
cc74 :                       cmd_parse
cc74 : 48               [ 3] 	pha
cc75 : da               [ 3] 	phx
                             	
cc76 : a200             [ 2] 	ldx #0
cc78 :                       find_cmd_loop
cc78 : a000             [ 2] 	ldy #0
cc7a : b9000a           [ 4] 	lda df_linbuff,y		; Need to check for ! now
cc7d : c921             [ 2] 	cmp #'!'
cc7f : d001             [ 3] 	bne find_cmd_byte
cc81 : c8               [ 2] 	iny						; Skip over ! if needed
cc82 :                       find_cmd_byte
cc82 : bdecce           [ 4] 	lda cmd_list,x			; Check the command list
cc85 : c980             [ 2] 	cmp #0x80				; If not end of this command in lis
cc87 : d009             [ 3] 	bne cmd_do_match		; then do the check
cc89 : b9000a           [ 4] 	lda df_linbuff,y		; Check the command line
cc8c : f02d             [ 3] 	beq cmd_found			; If zero then found
cc8e : c920             [ 2] 	cmp #' '				; If space then
cc90 : f029             [ 3] 	beq cmd_found			; also found
cc92 :                       cmd_do_match				; If here then line <> 0/space an
cc92 : b9000a           [ 4] 	lda df_linbuff,y		; Get char from command buffer
cc95 : 0920             [ 2] 	ora #0x20				; Make lower case
cc97 : ddecce           [ 4] 	cmp cmd_list,x			; Compare with char from comman
cc9a : d004             [ 3] 	bne cmd_no_match		; Different = command does not
cc9c : c8               [ 2] 	iny						; Advance command buffer and list
cc9d : e8               [ 2] 	inx
cc9e : 80e2             [ 3] 	bra find_cmd_byte		; Go check the next bytes
cca0 :                       cmd_no_match				; A command didn't match, so find
cca0 : bdecce           [ 4] 	lda cmd_list,x			; Get the non-matching command 
cca3 : c980             [ 2] 	cmp #0x80				; If already at command terminator 
cca5 : f007             [ 3] 	beq cmd_next_cmd		; set up for next command
cca7 : c9ff             [ 2] 	cmp #0xff				; If end of command list
cca9 : f008             [ 3] 	beq cmd_not_found		; then not found
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank0.s -----------------------------------

ccab : e8               [ 2] 	inx						; Else check next char
ccac : 80f2             [ 3] 	bra cmd_no_match
ccae :                       cmd_next_cmd
ccae : e8               [ 2] 	inx						; Jump over 0x80
ccaf : e8               [ 2] 	inx						; Jump over command address
ccb0 : e8               [ 2] 	inx
ccb1 : 80c5             [ 3] 	bra find_cmd_loop		; Check for match again
                             
ccb3 :                       cmd_not_found
ccb3 : a901             [ 2] 	lda #CMD_ERR_NOTFOUND
ccb5 : 8593             [ 3] 	sta errno
ccb7 : 68               [ 4] 	pla
ccb8 : fa               [ 4] 	plx
ccb9 : 38               [ 2] 	sec
ccba : 60               [ 6] 	rts
                             	
ccbb :                       cmd_found					; Found the command
ccbb : bdedce           [ 4] 	lda cmd_list+1,x		; Low byte of jump pointer
ccbe : 8533             [ 3] 	sta tmp_v1				; Store in temp location
ccc0 : bdeece           [ 4] 	lda cmd_list+2,x		; High byte of jump pointer
ccc3 : 8534             [ 3] 	sta tmp_v1+1			; Store in temp location
ccc5 : 68               [ 4] 	pla
ccc6 : fa               [ 4] 	plx
ccc7 : 6c3300           [ 6] 	jmp (tmp_v1)			; Jump to command (Y points at la
                             	
                             ;****************************************
                             ;* cmd_memtype
                             ;* Set the memory type to V or M
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
ccca :                       cmd_memtype
ccca : 48               [ 3] 	pha
cccb : 18               [ 2] 	clc
cccc : 208bce           [ 6] 	jsr cmd_parse_next_parm
cccf : a902             [ 2] 	lda #CMD_ERR_PARM
ccd1 : b01c             [ 3] 	bcs cmd_memtype_err
ccd3 : b9000a           [ 4] 	lda df_linbuff,y
ccd6 : 0920             [ 2] 	ora #0x20
ccd8 : c976             [ 2] 	cmp #'v'
ccda : f008             [ 3] 	beq cmd_setmemtypeV
ccdc : c96d             [ 2] 	cmp #'m'
ccde : f00a             [ 3] 	beq cmd_setmemtypeM
cce0 : a903             [ 2] 	lda #CMD_ERR_VAL
cce2 : 800b             [ 3] 	bra cmd_memtype_err
cce4 :                       cmd_setmemtypeV
cce4 : a901             [ 2] 	lda #1
cce6 : 85cc             [ 3] 	sta cmd_mem
cce8 : 8002             [ 3] 	bra cmd_memtypeFin
ccea :                       cmd_setmemtypeM
ccea : 64cc             [ 3] 	stz cmd_mem
ccec :                       cmd_memtypeFin
ccec : 68               [ 4] 	pla
cced : 18               [ 2] 	clc
ccee : 60               [ 6] 	rts
ccef :                       cmd_memtype_err
ccef : 8593             [ 3] 	sta errno
ccf1 : 38               [ 2] 	sec
ccf2 : 68               [ 4] 	pla
ccf3 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank0.s -----------------------------------

                             	
                             ;****************************************
                             ;* cmd_setmem
                             ;* Set the memory at address AAAA to byte string
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;*          x = index to routine pointer
                             ;* Regs affected : A
                             ;****************************************
ccf4 :                       cmd_setmem
ccf4 : 48               [ 3] 	pha
ccf5 : da               [ 3] 	phx
                             	
ccf6 : 18               [ 2] 	clc
ccf7 : 208bce           [ 6] 	jsr cmd_parse_next_parm
ccfa : b022             [ 4] 	bcs cmd_setmem_err
ccfc : 2070ce           [ 6] 	jsr cmd_parse_word
ccff : b01d             [ 4] 	bcs cmd_setmem_err
cd01 : 86ca             [ 3] 	stx cmd_lo
cd03 : 85cb             [ 3] 	sta cmd_hi
cd05 : 208bce           [ 6] 	jsr cmd_parse_next_parm		; Should be at least 1 
cd08 : b014             [ 3] 	bcs cmd_setmem_err
cd0a :                       cmd_setmem_byte
cd0a : 204dce           [ 6] 	jsr cmd_parse_byte
cd0d : b00f             [ 3] 	bcs cmd_setmem_err
cd0f : 2033ce           [ 6] 	jsr cmd_poke				; Poke A in to cmd_lo, hi
cd12 : 201bce           [ 6] 	jsr cmd_incmem
cd15 : 208bce           [ 6] 	jsr cmd_parse_next_parm		; Try and find another 
cd18 : 90f0             [ 3] 	bcc cmd_setmem_byte			; Process if found, else f
cd1a :                       cmd_setmemFin
cd1a : 18               [ 2] 	clc
cd1b : fa               [ 4] 	plx
cd1c : 68               [ 4] 	pla
cd1d : 60               [ 6] 	rts
cd1e :                       cmd_setmem_err
cd1e : 38               [ 2] 	sec
cd1f : fa               [ 4] 	plx
cd20 : 68               [ 4] 	pla
cd21 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_dumpmem
                             ;* Dump memory at address AAAA
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
cd22 :                       cmd_dumpmem
cd22 : 48               [ 3] 	pha
cd23 : da               [ 3] 	phx
cd24 : 5a               [ 3] 	phy
                             
cd25 : 18               [ 2] 	clc
cd26 : 208bce           [ 6] 	jsr cmd_parse_next_parm
cd29 : b014             [ 3] 	bcs cmd_dumpmem_err
cd2b : 2070ce           [ 6] 	jsr cmd_parse_word			; Get hi byte of word
cd2e : b00f             [ 3] 	bcs cmd_dumpmem_err
cd30 : 208bce           [ 6] 	jsr cmd_parse_next_parm		; Should cause error, n
cd33 : 9006             [ 3] 	bcc cmd_dumpmem_parm_err
cd35 : 86ca             [ 3] 	stx cmd_lo
cd37 : 85cb             [ 3] 	sta cmd_hi
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank0.s -----------------------------------

cd39 : 8009             [ 3] 	bra cmd_dumpmem_block		; Skip over error code to
cd3b :                       cmd_dumpmem_parm_err
cd3b : a902             [ 2] 	lda #CMD_ERR_PARM
cd3d : 8593             [ 3] 	sta errno
cd3f :                       cmd_dumpmem_err
cd3f : 7a               [ 4] 	ply
cd40 : fa               [ 4] 	plx
cd41 : 68               [ 4] 	pla
cd42 : 38               [ 2] 	sec
cd43 : 60               [ 6] 	rts
cd44 :                       cmd_dumpmem_block
cd44 : a5cb             [ 3] 	lda cmd_hi					; Show the address
cd46 : 20f2c8           [ 6] 	jsr str_a_to_x
cd49 : 20c0c5           [ 6] 	jsr io_put_ch
cd4c : 8a               [ 2] 	txa
cd4d : 20c0c5           [ 6] 	jsr io_put_ch
cd50 : a5ca             [ 3] 	lda cmd_lo
cd52 : 20f2c8           [ 6] 	jsr str_a_to_x
cd55 : 20c0c5           [ 6] 	jsr io_put_ch
cd58 : 8a               [ 2] 	txa
cd59 : 20c0c5           [ 6] 	jsr io_put_ch
cd5c : a920             [ 2] 	lda #' '
cd5e : 20c0c5           [ 6] 	jsr io_put_ch
                             	
cd61 : a008             [ 2] 	ldy #8						; 8 Bytes per line
cd63 :                       cmd_dumpmem_byte
cd63 : 2022ce           [ 6] 	jsr cmd_peek
cd66 : 20f2c8           [ 6] 	jsr str_a_to_x
cd69 : 20c0c5           [ 6] 	jsr io_put_ch
cd6c : 8a               [ 2] 	txa
cd6d : 20c0c5           [ 6] 	jsr io_put_ch
cd70 : a920             [ 2] 	lda #' '
cd72 : 20c0c5           [ 6] 	jsr io_put_ch
cd75 : 201bce           [ 6] 	jsr cmd_incmem
cd78 : 88               [ 2] 	dey
cd79 : d0e8             [ 3] 	bne cmd_dumpmem_byte
cd7b :                       cmd_dumpmemASCII
cd7b : 38               [ 2] 	sec
cd7c : a5ca             [ 3] 	lda cmd_lo
cd7e : e908             [ 2] 	sbc #8
cd80 : 85ca             [ 3] 	sta cmd_lo
cd82 : a5cb             [ 3] 	lda cmd_hi
cd84 : e900             [ 2] 	sbc #0
cd86 : 85cb             [ 3] 	sta cmd_hi
                             	
cd88 : a920             [ 2] 	lda #' '
cd8a : 20c0c5           [ 6] 	jsr io_put_ch
cd8d : 20c0c5           [ 6] 	jsr io_put_ch
cd90 : a008             [ 2] 	ldy #8						; 8 Bytes per line
cd92 :                       cmd_dumpmem_ascii
cd92 : 2022ce           [ 6] 	jsr cmd_peek
cd95 : c920             [ 2] 	cmp #' '					; <32 is unprintable
cd97 : b002             [ 3] 	bcs cmd_dump_skip_ctrl
cd99 : a92e             [ 2] 	lda #'.'					; Replace with dot
cd9b :                       cmd_dump_skip_ctrl
cd9b : c97f             [ 2] 	cmp #UTF_DEL				; >= DEL is unprintable
cd9d : 9002             [ 3] 	bcc cmd_dump_skip_del
cd9f : a92e             [ 2] 	lda #'.'					; Replace with dot
cda1 :                       cmd_dump_skip_del	
cda1 : 20c0c5           [ 6] 	jsr io_put_ch
cda4 : 201bce           [ 6] 	jsr cmd_incmem
cda7 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank0.s -----------------------------------

cda8 : d0e8             [ 3] 	bne cmd_dumpmem_ascii
cdaa : 38               [ 2] 	sec
cdab : 20bdc5           [ 6] 	jsr io_get_ch
cdae : c90d             [ 2] 	cmp #UTF_CR
cdb0 : d005             [ 3] 	bne cmd_dumpmemFin
cdb2 : 20c0c5           [ 6] 	jsr io_put_ch
cdb5 : 808d             [ 3] 	bra cmd_dumpmem_block
cdb7 :                       cmd_dumpmemFin
cdb7 : a90d             [ 2] 	lda #UTF_CR
cdb9 : 20c0c5           [ 6] 	jsr io_put_ch
cdbc : 7a               [ 4] 	ply
cdbd : fa               [ 4] 	plx
cdbe : 68               [ 4] 	pla
cdbf : 18               [ 2] 	clc
cdc0 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* cmd_sector
                             ;* Load sector
                             ;* Input : buflo, bufhi
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
cdc1 :                       cmd_sector
cdc1 : 48               [ 3] 	pha
cdc2 : da               [ 3] 	phx
cdc3 : 5a               [ 3] 	phy
                             
cdc4 : 18               [ 2] 	clc
                             	
cdc5 : 204dce           [ 6] 	jsr cmd_parse_byte			; Get read or write indicat
cdc8 : b044             [ 4] 	bcs cmd_sector_err
cdca : 48               [ 3] 	pha							; Save the indicator
                             	
cdcb : 2070ce           [ 6] 	jsr cmd_parse_word			; Get hi byte of word
cdce : b03d             [ 4] 	bcs cmd_sector_errl
                             
cdd0 : 8642             [ 3] 	stx sd_sect+0				; Initialise the sector
cdd2 : 8543             [ 3] 	sta sd_sect+1
cdd4 : 6444             [ 3] 	stz sd_sect+2
cdd6 : 6445             [ 3] 	stz sd_sect+3
                             
cdd8 : 208bce           [ 6] 	jsr cmd_parse_next_parm		; Should cause error, n
cddb : 9030             [ 4] 	bcc cmd_sector_errl
                             
cddd : a902             [ 2] 	lda #hi(sd_buf)				; Save/Load from sd_buf
                             
cddf : fa               [ 4] 	plx							; Read or write?
cde0 : e000             [ 2] 	cpx #0x00
cde2 : d005             [ 3] 	bne cmd_sector_skip00
cde4 : 20dec4           [ 6] 	jsr _sd_sendcmd17
cde7 : 801f             [ 4] 	bra cmd_sector_done
cde9 :                       cmd_sector_skip00
cde9 : e001             [ 2] 	cpx #0x01
cdeb : d005             [ 3] 	bne cmd_sector_skip01
cded : 20f6c4           [ 6] 	jsr _sd_sendcmd24
cdf0 : 8016             [ 4] 	bra cmd_sector_done
cdf2 :                       cmd_sector_skip01
cdf2 : e0ff             [ 2] 	cpx #0xff
cdf4 : d008             [ 3] 	bne cmd_sector_skipff
cdf6 : 20dec4           [ 6] 	jsr _sd_sendcmd17
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank0.s -----------------------------------

cdf9 : 20f6c4           [ 6] 	jsr _sd_sendcmd24
cdfc : 800a             [ 4] 	bra cmd_sector_done
cdfe :                       cmd_sector_skipff
cdfe : e0fe             [ 2] 	cpx #0xfe
ce00 : d006             [ 3] 	bne cmd_sector_done
ce02 : 20f6c4           [ 6] 	jsr _sd_sendcmd24
ce05 : 20dec4           [ 6] 	jsr _sd_sendcmd17
                             	
ce08 :                       cmd_sector_done	
ce08 : 7a               [ 4] 	ply
ce09 : fa               [ 4] 	plx
ce0a : 68               [ 4] 	pla
ce0b : 18               [ 2] 	clc
ce0c : 60               [ 6] 	rts
ce0d :                       cmd_sector_errl
ce0d : 68               [ 4] 	pla
ce0e :                       cmd_sector_err
ce0e : 8593             [ 3] 	sta errno
ce10 : 7a               [ 4] 	ply
ce11 : fa               [ 4] 	plx
ce12 : 68               [ 4] 	pla
ce13 : 38               [ 2] 	sec
ce14 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* cmd_quit
                             ;* To quit set err=255 and C=1
                             ;****************************************
ce15 :                       cmd_dflat
ce15 : a9ff             [ 2] 	lda #0xff
ce17 : 8593             [ 3] 	sta errno
ce19 : 38               [ 2] 	sec
ce1a : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_incmem
                             ;* Increment pointer
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : cmd_lo, cmd_hi
                             ;* Regs affected : 
                             ;****************************************
ce1b :                       cmd_incmem
ce1b : e6ca             [ 5] 	inc cmd_lo
ce1d : d002             [ 3] 	bne cmd_skipincmemhi
ce1f : e6cb             [ 5] 	inc cmd_hi
ce21 :                       cmd_skipincmemhi
ce21 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_peek
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
ce22 :                       cmd_peek
ce22 : a5cc             [ 3] 	lda cmd_mem
ce24 : d003             [ 3] 	bne cmd_peek_vram
ce26 : b2ca             [ 5] 	lda (cmd_lo)
ce28 : 60               [ 6] 	rts
ce29 :                       cmd_peek_vram
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank0.s -----------------------------------

ce29 : da               [ 3] 	phx
ce2a : a6ca             [ 3] 	ldx cmd_lo
ce2c : a5cb             [ 3] 	lda cmd_hi
ce2e : 2006c4           [ 6] 	jsr _vdp_peek
ce31 : fa               [ 4] 	plx
ce32 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* cmd_poke
                             ;* Read byte
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : A
                             ;* Regs affected : 
                             ;****************************************
ce33 :                       cmd_poke
ce33 : 48               [ 3] 	pha
ce34 : a5cc             [ 3] 	lda cmd_mem
ce36 : d004             [ 3] 	bne cmd_poke_vram
ce38 : 68               [ 4] 	pla
ce39 : 92ca             [ 5] 	sta (cmd_lo)
ce3b : 60               [ 6] 	rts
ce3c :                       cmd_poke_vram
ce3c : 68               [ 4] 	pla
ce3d : da               [ 3] 	phx
ce3e : 5a               [ 3] 	phy
ce3f : a6ca             [ 3] 	ldx cmd_lo
ce41 : a4cb             [ 3] 	ldy cmd_hi
ce43 : 201ec4           [ 6] 	jsr _vdp_poke
ce46 : 7a               [ 4] 	ply
ce47 : fa               [ 4] 	plx
ce48 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* cmd_time
                             ;* Set date and time
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : None
                             ;* Regs affected : 
                             ;****************************************
ce49 :                       cmd_time
ce49 : 207ec4           [ 6] 	jsr _rtc_setdatetime
ce4c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_byte
                             ;* Find 2 char hex byte
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = value
                             ;* Regs affected : A,Y
                             ;****************************************
ce4d :                       cmd_parse_byte
ce4d : da               [ 3] 	phx
ce4e : 208bce           [ 6] 	jsr cmd_parse_next_parm	; Find the next paramete
ce51 : b016             [ 3] 	bcs cmd_parse_byte_err
ce53 : b9000a           [ 4] 	lda df_linbuff,y		; Get hi nibble of high byte
ce56 : 48               [ 3] 	pha						; Save on stack
ce57 : c8               [ 2] 	iny
ce58 : b9000a           [ 4] 	lda df_linbuff,y		; Get lo nibble of high byte
ce5b : f00b             [ 3] 	beq cmd_parse_byte_errl	; If no char then error 
ce5d : aa               [ 2] 	tax						; Lo nibble goes to X
ce5e : 68               [ 4] 	pla						; Restore hi nibble
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank0.s -----------------------------------

ce5f : 200fc9           [ 6] 	jsr str_x_to_a			; Convert from hex to A
ce62 : b005             [ 3] 	bcs cmd_parse_byte_err	; If error then stop
ce64 : c8               [ 2] 	iny						; Point to next char
ce65 : 18               [ 2] 	clc
ce66 : fa               [ 4] 	plx
ce67 : 60               [ 6] 	rts
ce68 :                       cmd_parse_byte_errl
ce68 : 68               [ 4] 	pla						; Pull low nibble off
ce69 :                       cmd_parse_byte_err
ce69 : a903             [ 2] 	lda #CMD_ERR_VAL		; Basic value error
ce6b : 8593             [ 3] 	sta errno
ce6d : 38               [ 2] 	sec
ce6e : fa               [ 4] 	plx
ce6f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_word
                             ;* Find 4 char hex word
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = char after hex byte, A = hi, X = 
                             ;* Regs affected : A,X,Y
                             ;****************************************
ce70 :                       cmd_parse_word
ce70 : 208bce           [ 6] 	jsr cmd_parse_next_parm		; Find the next paramet
ce73 : b010             [ 3] 	bcs cmd_word_err
ce75 : 204dce           [ 6] 	jsr cmd_parse_byte			; Get hi byte of word
ce78 : b00b             [ 3] 	bcs cmd_word_err
ce7a : 48               [ 3] 	pha							; Save hi byte of word
ce7b : 204dce           [ 6] 	jsr cmd_parse_byte			; Get lo byte of word
ce7e : b004             [ 3] 	bcs cmd_word_errl
ce80 : aa               [ 2] 	tax							; Put in X
ce81 : 68               [ 4] 	pla							; Get high byte back
ce82 : 18               [ 2] 	clc
ce83 : 60               [ 6] 	rts
ce84 :                       cmd_word_errl
ce84 : 68               [ 4] 	pla							; Pull off stack
ce85 :                       cmd_word_err
ce85 : a903             [ 2] 	lda #CMD_ERR_VAL
ce87 : 8593             [ 3] 	sta errno
ce89 : 38               [ 2] 	sec
ce8a : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_parse_next_parm
                             ;* Find next non-white space
                             ;* Input : buflo, bufhi, y offset
                             ;* Output : y = start of first parm byte
                             ;* Regs affected : A
                             ;****************************************
ce8b :                       cmd_parse_next_parm
ce8b : 48               [ 3] 	pha
ce8c :                       cmd_find_parm
ce8c : b9000a           [ 4] 	lda df_linbuff,y
ce8f : c8               [ 2] 	iny
ce90 : c900             [ 2] 	cmp #0					; End of command line?
ce92 : f008             [ 3] 	beq cmd_next_parm_err	; ie no parms
ce94 : c920             [ 2] 	cmp #' '				; Ignore space
ce96 : f0f4             [ 3] 	beq cmd_find_parm
ce98 : 88               [ 2] 	dey						; Go back 1 to parm start
ce99 : 68               [ 4] 	pla
ce9a : 18               [ 2] 	clc
ce9b : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank0.s -----------------------------------

ce9c :                       cmd_next_parm_err
ce9c : 88               [ 2] 	dey						; Go back 1 to end of line
ce9d : a902             [ 2] 	lda #CMD_ERR_PARM
ce9f : 8593             [ 3] 	sta errno
cea1 : 68               [ 4] 	pla
cea2 : 38               [ 2] 	sec
cea3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_dcolour
                             ;* Set default boot up colour
                             ;****************************************
cea4 :                       cmd_dcolour
cea4 : da               [ 3] 	phx
cea5 : 48               [ 3] 	pha
cea6 : 204dce           [ 6] 	jsr cmd_parse_byte
cea9 : b006             [ 3] 	bcs cmd_dcolour_fin
ceab : a20f             [ 2] 	ldx #NV_COLOUR
cead : 20aec4           [ 6] 	jsr _rtc_nvwrite
ceb0 : 18               [ 2] 	clc
ceb1 :                       cmd_dcolour_fin
ceb1 : 68               [ 4] 	pla
ceb2 : fa               [ 4] 	plx
ceb3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_dmode
                             ;* Set default boot up mode
                             ;****************************************
ceb4 :                       cmd_dmode
ceb4 : da               [ 3] 	phx
ceb5 : 48               [ 3] 	pha
ceb6 : 204dce           [ 6] 	jsr cmd_parse_byte
ceb9 : b006             [ 3] 	bcs cmd_dmode_fin
cebb : a20f             [ 2] 	ldx #NV_COLOUR
cebd : 20aec4           [ 6] 	jsr _rtc_nvwrite
cec0 : 18               [ 2] 	clc
cec1 :                       cmd_dmode_fin
cec1 : 68               [ 4] 	pla
cec2 : fa               [ 4] 	plx
cec3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* cmd_help
                             ;* Display help text
                             ;****************************************
cec4 :                       cmd_help
cec4 : a981             [ 2] 	lda #lo(msg_help)
cec6 : 85c6             [ 3] 	sta cmd_msg_ptr
cec8 : a9cf             [ 2] 	lda #hi(msg_help)
ceca : 85c7             [ 3] 	sta cmd_msg_ptr+1
cecc : a000             [ 2] 	ldy #0
cece :                       cmd_msg_char
cece : b1c6             [ 5] 	lda (cmd_msg_ptr),y
ced0 : f006             [ 3] 	beq cmd_msg_line_done
ced2 : 20c0c5           [ 6] 	jsr io_put_ch
ced5 : c8               [ 2] 	iny
ced6 : d0f6             [ 3] 	bne cmd_msg_char
ced8 :                       cmd_msg_line_done
ced8 : c8               [ 2] 	iny
ced9 : 18               [ 2] 	clc
ceda : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank0.s -----------------------------------

cedb : 65c6             [ 3] 	adc cmd_msg_ptr
cedd : 85c6             [ 3] 	sta cmd_msg_ptr
cedf : a5c7             [ 3] 	lda cmd_msg_ptr+1
cee1 : 6900             [ 2] 	adc #0
cee3 : 85c7             [ 3] 	sta cmd_msg_ptr+1
cee5 : a000             [ 2] 	ldy #0
cee7 : b1c6             [ 5] 	lda (cmd_msg_ptr),y
cee9 : d0e3             [ 3] 	bne cmd_msg_char
ceeb : 60               [ 6] 	rts
                             
                             
ceec :                       cmd_list
ceec : 6d656d74797065..      	db "memtype",	0x80,	lo(cmd_memtype), 	hi(cmd_mem
cef6 : 64756d708022cd        	db "dump", 		0x80, 	lo(cmd_dumpmem), 	hi(cmd_dum
cefd : 73657480f4cc          	db "set", 		0x80,	lo(cmd_setmem), 	hi(cmd_setmem
cf03 : 736563746f7280..      	db "sector",	0x80,	lo(cmd_sector),		hi(cmd_secto
cf0c : 717569748015ce        	db "quit",		0x80,	lo(cmd_dflat),		hi(cmd_dflat)
cf13 : 74696d658049ce        	db "time",		0x80,	lo(cmd_time),		hi(cmd_time)
cf1a : 7265637680d4d0        	db "recv",		0x80,	lo(cmd_recv),		hi(cmd_recv)
cf21 : 646d6f646580b4ce      	db "dmode",		0x80,	lo(cmd_dmode),		hi(cmd_dmode)
cf29 : 64636f6c6f7572..      	db "dcolour",	0x80,	lo(cmd_dcolour),	hi(cmd_dcol
cf33 : 68656c7080c4ce        	db "help",		0x80,	lo(cmd_help),		hi(cmd_help)
cf3a : 0000ff                	db 0x00,		0x00,	0xff
                             
                             
cf3d :                       cmd_error_messages
cf3d : 48cf                  	dw msg_errmsg_none
cf3f : 51cf                  	dw msg_errmsg_notfound
cf41 : 63cf                  	dw msg_errmsg_parm
cf43 : 73cf                  	dw msg_errmsg_val
                             
cf45 : 233e00                msg_ready				db "#>",0
cf48 : 4e6f206572726f..      msg_errmsg_none			db "No error",0
cf51 : 436f6d6d616e64..      msg_errmsg_notfound		db "Command not found",0
cf63 : 506172616d6574..      msg_errmsg_parm			db "Parameter error",0
cf73 : 496c6c6567616c..      msg_errmsg_val			db "Illegal value",0
                             
cf81 : 4d6f6e69746f72..      msg_help				db "Monitor commands:",UTF_CR,0
cf94 : 72656376202020..      						db "recv            RX file from PC",UTF_CR
cfb5 : 6d656d74797065..      						db "memtype v|m     Select VRAM|RAM",UTF_CR
cfd6 : 64756d70207878..      						db "dump xxxx       Dump memory",UTF_CR,0
cff3 : 73657420207878..      						db "set  xxxx [zz]* Set memory",UTF_CR,0
d00f : 74696d65202020..      						db "time            Set clock",UTF_CR,0
d02a : 646d6f64652078..      						db "dmode xx        Default mode",UTF_CR,0
d048 : 64636f6c6f7572..      						db "dcolour xx      Default colour",UTF_CR,
d068 : 736563746f7220..      						db "sector rw xxxx  SD sector",UTF_CR,0
d083 : 71756974202020..      						db "quit            Have a guess",UTF_CR,0,
                             
                             
                             
                             	include "monitor\recv.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RECV.S
                             ;*	Part of monitor - receive file from serial
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank0.s -----------------------------------

                             ;************************************************
                             
0b00 =                       recv_buffer				= df_rtstck
0a00 =                       recv_csum				= df_linbuff
0a01 =                       recv_fopen				= df_linbuff+1
0a02 =                       recv_szlo				= df_linbuff+2
0a03 =                       recv_szhi				= df_linbuff+3
                             
                             
                             ; This is what a block looks like
0000 =                       	struct recv_block
0000 =                       	ds recv_block_number,1
0001 =                       	ds recv_block_payload_sz,1
0002 =                       	ds recv_block_payload,250
00fc =                       	ds recv_block_csum,1
                             	end struct
                             
                             
d0a2 :                       recv_wait_msg
d0a2 : 3f0800                	db "?",CRSR_LEFT,0
d0a5 :                       recv_done_msg
d0a5 : 0d00                  	db UTF_CR,0
d0a7 :                       recv_error_msg
d0a7 : 0d524543562065..      	db UTF_CR,"RECV error",UTF_CR,0
d0b4 :                       recv_col1_msg
d0b4 : 0b0d2000              	db CRSR_UP,UTF_CR," ",0
d0b8 :                       recv_8blanks_msg
d0b8 : 20202020202020..      	db "        ",0
d0c1 :                       recv_closed_file_msg
d0c1 : 0b0d2b00              	db CRSR_UP,UTF_CR,"+",0
                             
                             
                             ; Macro to load X,A with message address then pri
                             _recv_print macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             ; Macro to switch to serial
                             _serial macro
                             	; Switch to serial
                             	lda #0
                             	jsr io_active_device
                             	endm
                             
                             ; Macro to switch to default
                             _default macro
                             	; Switch to serial
                             	jsr io_set_default
                             	endm
                             
                             
                             ; Print block number in X,A
d0c5 :                       recv_print_block
d0c5 : da               [ 3] 	phx
d0c6 : 48               [ 3] 	pha
                             	_recv_print recv_col1_msg
                             
d0ce : 68               [ 4] 	pla
d0cf : fa               [ 4] 	plx
d0d0 : 18               [ 2] 	clc					; Leading zeros=false
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank0.s -----------------------------------

d0d1 : 4c7ccb           [ 3] 	jmp print_a_to_d
                             
                             ;****************************************
                             ;* cmd_recv
                             ;* Receive file from serial and save to sd card
                             ;* Input : cmd_lo, cmd_hi, A
                             ;* Output : None
                             ;* Regs affected : 
                             ;****************************************
d0d4 :                       cmd_recv
                             	; Initialise file handle flag to nothing open
d0d4 : 9c010a           [ 4] 	stz recv_fopen
                             	; Zero out bytes received count
d0d7 : 9c020a           [ 4] 	stz recv_szlo
d0da : 9c030a           [ 4] 	stz recv_szhi
                             	; Flush the buffer - means that homebrew receive
d0dd : 201ad1           [ 6] 	jsr recv_flush
                             	_recv_print recv_wait_msg
                             
d0e7 :                       cmd_recv_get_block
                             	; Get header byte
d0e7 : 2029d1           [ 6] 	jsr recv_get_block_start
                             	; Check if ETB (done)
d0ea : c917             [ 2] 	cmp #UTF_ETB
d0ec : f014             [ 4] 	beq cmd_recv_done
                             	; Else must be SOH to get the block
d0ee : 2045d1           [ 6] 	jsr recv_get_block
                             	; If bad then don't process the block
d0f1 : b008             [ 3] 	bcs cmd_recv_error
d0f3 : 207bd1           [ 6] 	jsr recv_process_block
                             	; If processed block bad then error
d0f6 : b003             [ 3] 	bcs cmd_recv_error
                             	; Else to get another block header
d0f8 : 4ce7d0           [ 3] 	jmp cmd_recv_get_block
d0fb :                       cmd_recv_error
                             	_recv_print recv_error_msg
                             
d102 :                       cmd_recv_done
                             	; Only close a file if it was open
d102 : ad010a           [ 4] 	lda recv_fopen
d105 : f00a             [ 3] 	beq cmd_recv_skip_close
                             	_recv_print recv_closed_file_msg
                             
d10e : 20a6c0           [ 6] 	jsr _fs_close_w
d111 :                       cmd_recv_skip_close
                             	_recv_print recv_done_msg
                             
d118 : 18               [ 2] 	clc
d119 : 60               [ 6] 	rts
                             
                             ; Keep getting bytes from the serial device until
d11a :                       recv_flush
                             	_serial
                             
d11f :                       recv_flush_byte
                             	; C=0 means asynchronous
d11f : 18               [ 2] 	clc
d120 : 20bdc5           [ 6] 	jsr io_get_ch
d123 : 90fa             [ 3] 	bcc recv_flush_byte
                             	; until C=1
                             	_default
                             
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank0.s -----------------------------------

d128 : 60               [ 6] 	rts
                             
                             ; Wait for start or end of transmission (SOH, ETB
d129 :                       recv_get_block_start
                             	_serial
                             
d12e :                       recv_get_block_start_byte
                             	; C=1 means synchronous
d12e : 38               [ 2] 	sec
d12f : 20bdc5           [ 6] 	jsr io_get_ch
d132 : c901             [ 2] 	cmp #UTF_SOH				; if SOH then reply with ACk to 
d134 : f004             [ 3] 	beq recv_get_block_fin
d136 : c917             [ 2] 	cmp #UTF_ETB				; if not ETB then keep checking!
d138 : d0f4             [ 3] 	bne recv_get_block_start_byte
d13a :                       recv_get_block_fin
d13a : 48               [ 3] 	pha
d13b : a906             [ 2] 	lda #UTF_ACK
d13d : 20c0c5           [ 6] 	jsr io_put_ch
                             	_default
                             
                             	; SOH or ETB byte returned to caller
d143 : 68               [ 4] 	pla
d144 : 60               [ 6] 	rts
                             
                             ; Get block
d145 :                       recv_get_block
                             	_serial
                             
                             	; Initialise running checksum
d14a : 9c000a           [ 4] 	stz recv_csum
d14d : a200             [ 2] 	ldx #0
d14f :                       recv_get_block_byte
                             	; Get byte, C=1 means synchronous
d14f : 38               [ 2] 	sec
d150 : 20bdc5           [ 6] 	jsr io_get_ch
d153 : 9d000b           [ 5] 	sta recv_buffer,x
                             	; Add to checksum total
d156 : 18               [ 2] 	clc
d157 : 6d000a           [ 4] 	adc recv_csum
d15a : 8d000a           [ 4] 	sta recv_csum
d15d : e8               [ 2] 	inx
                             	; Keep going for the size of a block structure
d15e : e0fd             [ 2] 	cpx #recv_block
d160 : d0ed             [ 3] 	bne recv_get_block_byte
                             	; check running csum = 0
d162 : ad000a           [ 4] 	lda recv_csum
                             	; if Z=1 then block is ok so send ACK
d165 : d00a             [ 3] 	bne recv_bad_block
d167 : a906             [ 2] 	lda #UTF_ACK
d169 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_default
                             
                             	; C=0 means good block received
d16f : 18               [ 2] 	clc
d170 : 60               [ 6] 	rts
d171 :                       recv_bad_block
                             	; If not Z then block is bad so send NACK
d171 : a915             [ 2] 	lda #UTF_NACK
d173 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_default
                             
                             	; C=1 means bad block received
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank0.s -----------------------------------

d179 : 38               [ 2] 	sec
d17a : 60               [ 6] 	rts
                             
                             
                             ; Process received block
                             ; Block zero is meta data block, else data block
d17b :                       recv_process_block
d17b : ae000b           [ 4] 	ldx recv_buffer+recv_block_number
d17e : f003             [ 3] 	beq recv_process_block0
d180 : 4cd7d1           [ 3] 	jmp recv_process_blockn
                             
                             
                             ; Process block zero meta data
                             ; After block # and payload size:
                             ;  zero terminated file name starting at position
                             ;  zero terminated directory from root
                             ;  final additional zero to indicate no more dire
d183 :                       recv_process_block0
                             	_recv_print recv_8blanks_msg
                             
d18a : a002             [ 2] 	ldy #recv_block_payload
                             	; Jump over the filename
d18c :                       recv_find_fname_end
d18c : b9000b           [ 4] 	lda recv_buffer,y
d18f : c8               [ 2] 	iny
d190 : c900             [ 2] 	cmp #0
d192 : d0f8             [ 3] 	bne recv_find_fname_end
d194 :                       recv_process_path
                             	; Load X,A with recv_buffer pointer indexed by Y
                             	; This gives the directory name to change to
d194 : 98               [ 2] 	tya
d195 : 18               [ 2] 	clc
d196 : 6900             [ 2] 	adc #lo(recv_buffer)
d198 : aa               [ 2] 	tax
d199 : a90b             [ 2] 	lda #hi(recv_buffer)
d19b : 6900             [ 2] 	adc #0
                             	; Print this directory name
d19d : 48               [ 3] 	pha
d19e : da               [ 3] 	phx
d19f : 5a               [ 3] 	phy
d1a0 : 200bc6           [ 6] 	jsr io_print_line
                             
d1a3 : a92f             [ 2] 	lda #'/'
d1a5 : 20c0c5           [ 6] 	jsr io_put_ch	; Forward slash after dir name
d1a8 : 7a               [ 4] 	ply
d1a9 : fa               [ 4] 	plx
d1aa : 68               [ 4] 	pla
                             	; Change to this directory
d1ab : 205ec0           [ 6] 	jsr _fs_chdir_w
d1ae : b026             [ 3] 	bcs block0_error
                             	; Now find end of this directory
d1b0 :                       recv_find_dir_end
d1b0 : b9000b           [ 4] 	lda recv_buffer,y
d1b3 : c8               [ 2] 	iny
d1b4 : c900             [ 2] 	cmp #0
d1b6 : d0f8             [ 3] 	bne recv_find_dir_end
                             	; If next byte is zero then done
d1b8 : b9000b           [ 4] 	lda recv_buffer,y
d1bb : d0d7             [ 3] 	bne recv_process_path
                             	; Now we are in the right folder to write the fi
                             	; Need to open the file using the filename at st
                             	; Get X,A to point to this
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank0.s -----------------------------------

d1bd : 18               [ 2] 	clc
d1be : a902             [ 2] 	lda #recv_block_payload
d1c0 : 6900             [ 2] 	adc #lo(recv_buffer)
d1c2 : aa               [ 2] 	tax
d1c3 : a90b             [ 2] 	lda #hi(recv_buffer)
d1c5 : 6900             [ 2] 	adc #0
                             	; Print filename
d1c7 : 48               [ 3] 	pha
d1c8 : da               [ 3] 	phx
d1c9 : 200bc6           [ 6] 	jsr io_print_line
d1cc : fa               [ 4] 	plx
d1cd : 68               [ 4] 	pla
                             	; Now open for write
d1ce : 20eec0           [ 6] 	jsr _fs_open_write_w
d1d1 : b003             [ 3] 	bcs block0_error
                             	; Set flag indicating file is opened
d1d3 : ee010a           [ 6] 	inc recv_fopen
d1d6 :                       block0_error
d1d6 : 60               [ 6] 	rts
                             
                             ; Process data block payload
d1d7 :                       recv_process_blockn
                             ;	_recv_print recv_got_block_msg
d1d7 : 18               [ 2] 	clc
d1d8 : ad010b           [ 4] 	lda recv_buffer+recv_block_payload_sz
d1db : 6d020a           [ 4] 	adc recv_szlo
d1de : 8d020a           [ 4] 	sta recv_szlo
d1e1 : aa               [ 2] 	tax
d1e2 : ad030a           [ 4] 	lda recv_szhi
d1e5 : 6900             [ 2] 	adc #0
d1e7 : 8d030a           [ 4] 	sta recv_szhi	
d1ea : 20c5d0           [ 6] 	jsr recv_print_block
d1ed : a200             [ 2] 	ldx #0
d1ef :                       recv_process_blockn_byte
                             	; Get byte from buffer
d1ef : bd020b           [ 4] 	lda recv_buffer+recv_block_payload,x
                             	; Write to file previously opened for write
d1f2 : 2006c1           [ 6] 	jsr _fs_put_byte_w
d1f5 : e8               [ 2] 	inx
                             	; Processed all bytes?
d1f6 : ec010b           [ 4] 	cpx recv_buffer+recv_block_payload_sz
d1f9 : d0f4             [ 3] 	bne recv_process_blockn_byte
d1fb : 18               [ 2] 	clc
d1fc : 60               [ 6] 	rts
                             
                             
                             
                             	include "cia\cia.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  CIA.S
                             ;*  Code to initialise and utilise the two WDC65c
                             ;*
                             ;*  VIA1 is for keyboard, LEDs and RAM memory ban
                             ;*		Port A
                             ;*			PA0 to PA7 	- All output to keyboard
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank0.s -----------------------------------

                             ;*		Port B
                             ;*			PB0			- Input from BBC keyboard to sense mat
                             ;*			PB1			- Output - Led 0 (cassette motor Led)
                             ;*			PB2			- Output - Led 1 (caps lock Led)
                             ;*			PB3			- Output - Led 2 (shift lock Led)
                             ;*			PB4			- Output bit X0 RAM bank selector
                             ;*			PB5			- Output bit X1 RAM bank selector
                             ;*			PB6			- Output bit Y0 ROM bank selector
                             ;*			PB7			- Output bit Y1 ROM bank selector
                             ;*						- IRQ is connected to 6502 **IRQ** line
                             ;*
                             ;*  VIA2 is for AY-3-8910 sound chip, SD Card int
                             ;*		Port A
                             ;*			PA0 to PA7	- Connected to 8910 data bus for 
                             ;*		Port B
                             ;*			PB0			- Output to SD card clock
                             ;*			PB1			- Output - Sound write select
                             ;*			PB2			- Input - SD Card detect
                             ;*			PB3			- Output - SD Card chip select
                             ;*			PB4			- Output - Data out from VIA to SD Car
                             ;*			PB5			- Output - ROM Disable (active low)
                             ;*			PB6			- Output - Sound read select
                             ;*			PB7			- Input - Data in to VIA from SD Card
                             ;*						- IRQ is connected to 6502 **NMI** line
                             ;*
                             ;* On startup;
                             ;* 	 		VIA0 PB4..7 are high (with weak pull-ups)
                             ;* 	 		VIA1 PB5 is high (with weak pull-ups)
                             ;*
                             ;*  This file is called cia.s because the origina
                             ;*  used a MOS 6526 from a C64.  However I update
                             ;*  design to use two 6522 chips, but never got a
                             ;*  renaming the file ;-)
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d1fd :                       mod_sz_cia_s
                             	
                             ;********************************
                             ;* set_led0
                             ;* Set the LED0 (cassette motor)
                             ;* Input : C = status (1 = on, 0 = off)
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d1fd :                       set_led0
d1fd : 48               [ 3] 	pha							; Save A
d1fe : ad0004           [ 4] 	lda IO_0 + PRB				; Get current led status
d201 : 0902             [ 2] 	ora #KB_LED0					; Initially assume off
d203 : 9002             [ 3] 	bcc skip_led0_on
d205 : 4902             [ 2] 	eor #KB_LED0					; Switch on if C=1
d207 :                       skip_led0_on
d207 : 8d0004           [ 4] 	sta IO_0 + PRB				; Set the leds
d20a : 68               [ 4] 	pla							; Restore A
d20b : 60               [ 6] 	rts
                             
                             ;********************************
                             ;* set_led1
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank0.s -----------------------------------

                             ;* Set the LED1 (caps lock)
                             ;* Input : C = status (1 = on, 0 = off)
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d20c :                       set_led1
d20c : 48               [ 3] 	pha							; Save A
d20d : ad0004           [ 4] 	lda IO_0 + PRB				; Get current led status
d210 : 0904             [ 2] 	ora #KB_LED1				; Initially assume off
d212 : 9002             [ 3] 	bcc skip_led1_on
d214 : 4904             [ 2] 	eor #KB_LED1				; Switch on if C=1
d216 :                       skip_led1_on
d216 : 8d0004           [ 4] 	sta IO_0 + PRB				; Set the leds
d219 : 68               [ 4] 	pla							; Restore A
d21a : 60               [ 6] 	rts
                             
                             ;********************************
                             ;* set_led2
                             ;* Set the LED2 (shift lock)
                             ;* Input : C = status (1 = on, 0 = off)
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d21b :                       set_led2
d21b : 48               [ 3] 	pha							; Save A
d21c : ad0004           [ 4] 	lda IO_0 + PRB				; Get current led status
d21f : 0908             [ 2] 	ora #KB_LED2				; Initially assume off
d221 : 9002             [ 3] 	bcc skip_led2_on
d223 : 4908             [ 2] 	eor #KB_LED2				; Switch on if C=1
d225 :                       skip_led2_on
d225 : 8d0004           [ 4] 	sta IO_0 + PRB				; Set the leds
d228 : 68               [ 4] 	pla							; Restore A
d229 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_cia0
                             ;* Initialise cia 0, controls the BBC keyboard
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
d22a :                       init_cia0
d22a : a97f             [ 2] 	lda #0x7f					; Disable all interrupts
d22c : 8d0e04           [ 4] 	sta IO_0 + IER
d22f : a9ff             [ 2] 	lda #0xff					; Clear IFR
d231 : 8d0d04           [ 4] 	sta IO_0 + IFR				; Set IFR to clear flags
                             	
                             
d234 : a9ff             [ 2] 	lda #0xff			
d236 : 8d0304           [ 4] 	sta IO_0 + DDRA				; Port A all output
                             
d239 : a9fe             [ 2] 	lda #0xfe					; Make sure all outputs are high!
d23b : 8d0004           [ 4] 	sta IO_0 + PRB
                             	
d23e : 8d0204           [ 4] 	sta IO_0 + DDRB				; Port B output for leds and 
                             
d241 : a900             [ 2] 	lda #0x00					; Init control register - nothing 
d243 : 8d0b04           [ 4] 	sta IO_0 + ACR
d246 : a902             [ 2] 	lda #0x02					; CA2 independent interrupt
d248 : 8d0c04           [ 4] 	sta IO_0 + PCR
                             
d24b : a980             [ 2] 	lda #KB_EN 					; Set KB_EN bit to allow h/w str
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank0.s -----------------------------------

d24d : 8d0104           [ 4] 	sta IO_0 + PRA
                             	
                             	; LEDS off
d250 : 18               [ 2] 	clc
d251 : 20fdd1           [ 6] 	jsr set_led0
d254 : 200cd2           [ 6] 	jsr set_led1
d257 : 201bd2           [ 6] 	jsr set_led2
                             
d25a : 60               [ 6] 	rts							; return from sub
                             	
                             ;****************************************
                             ;* init_cia1
                             ;* Initialise cia 1, controls the sound chip
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : A
                             ;****************************************
d25b :                       init_cia1
d25b : a97f             [ 2] 	lda #0x7f					; Disable all interrupts
d25d : 8d8e04           [ 4] 	sta IO_1 + IER
                             	
d260 : a9ff             [ 2] 	lda #0xff					; Port A all output (AY-3 data bus
d262 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             	
d265 : a920             [ 2] 	lda #MM_DIS					; Make sure ROM is enabled in po
d267 : 8d8004           [ 4] 	sta IO_1+PRB				; setting the data direction reg
                             	
d26a : a97b             [ 2] 	lda #0b01111011				; Set Port B input/output SD,
d26c : 8d8204           [ 4] 	sta IO_1+DDRB
                             	
d26f : a900             [ 2] 	lda #0x00					; Init control register - nothing 
d271 : 8d8b04           [ 4] 	sta IO_1 + ACR
d274 : 8d8c04           [ 4] 	sta IO_1 + PCR
                             
d277 : a9ff             [ 2] 	lda #0xff					; Clear IFR
d279 : 8d8d04           [ 4] 	sta IO_1 + IFR				; Read ICR to clear flags
                             	
d27c : 60               [ 6] 	rts							; return from sub
                             
d27d :                       mod_sz_cia_e
                             
                             	include "serial\serial.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SERIAL.S
                             ;*  Serial input/output handler - driving a 6551 
                             ;*  To handle WDC65c51 bug on transmit, use a del
                             ;*  to ensure byte is transmitted before the next
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank0.s -----------------------------------

                             ;* get_byte
                             ;* Get a byte (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 1 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
d27d :                       get_byte
d27d : a502             [ 3] 	lda ser_first			; if first==last then buffer emp
d27f : 4503             [ 3] 	eor ser_last
d281 : d004             [ 3] 	bne got_byte
d283 : b0f8             [ 3] 	bcs get_byte
d285 : 38               [ 2] 	sec
d286 : 60               [ 6] 	rts
d287 :                       got_byte
d287 : 5a               [ 3] 	phy
d288 : a402             [ 3] 	ldy ser_first			; Get first byte in FIFO
d28a : b90008           [ 4] 	lda ser_buf,y
d28d : e602             [ 5] 	inc ser_first			; Advance first byte of FIFO
d28f : 7a               [ 4] 	ply
d290 : 18               [ 2] 	clc						; Indicate byte was got
d291 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d292 :                       put_byte
d292 : 48               [ 3] 	pha						; Save A
                             ;	phx
                             ;	ldx #112				; Loop 112 times
d293 :                       put_byte_wait				; Delay 2512 cycles (19200bps, 1
                             ;	nop						; For 5.36Mhz clock
                             ;	nop						; ~25 cycles per loop (10xnop+dex+bne)
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	nop						; 
                             ;	dex						;
d293 : ad8105           [ 4] 	lda SER_STATUS			; Check status register
d296 : 2910             [ 2] 	and #SER_TDRE			; Is transmit reg empty?
d298 : f0f9             [ 3] 	beq put_byte_wait		; Keep waiting if not
                             ;	plx						; restore X
d29a : 68               [ 4] 	pla						; Get A back
d29b : 8d8005           [ 4] 	sta SER_DATA			; Write the data
d29e : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* init_acia
                             ;* ACIA initialisation (this is IO_2)
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : X
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank0.s -----------------------------------

d29f :                       init_acia
d29f : a21f             [ 2] 	ldx #0b00011111			; 19200 baud, 8 bits, 1 stop b
d2a1 : 8e8305           [ 4] 	stx SER_CTL
d2a4 : a209             [ 2] 	ldx #0b00001001			; No parity, no TX int plus RT
d2a6 : 8e8205           [ 4] 	stx SER_CMD
d2a9 : ae8105           [ 4] 	ldx SER_STATUS			; Read status reg to clear stuf
                             
d2ac : 6402             [ 3] 	stz ser_first			; Initialise FIFO buffer pointer
d2ae : 6403             [ 3] 	stz ser_last
                             
d2b0 : 60               [ 6] 	rts
                             
                             	include "keyboard\keyboard.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KEYBOARD.S
                             ;*  This is the keyboard module to enable interfa
                             ;*  BBC keyboard using a 65c22.  The BBC keyboard
                             ;*  in that it provides a signal to know if somet
                             ;*  pressed in hardware, so the more cycle heavy 
                             ;*  actually check which key etc can be done only
                             ;*  necessary.  Debouncing is necessary to not sc
                             ;*  often, with the timing for this happening dur
                             ;*  interrupt cycle.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* init_keyboard
                             ;* Initialise the keyboard settings
                             ;****************************************
d2b1 :                       init_keyboard
d2b1 : a914             [ 2] 	lda #KB_REP_DEL
d2b3 : 852e             [ 3] 	sta kb_rep_del
d2b5 : a903             [ 2] 	lda #KB_REP_TIM
d2b7 : 852d             [ 3] 	sta kb_rep_tim
d2b9 : a902             [ 2] 	lda #KB_DEBOUNCE
d2bb : 852f             [ 3] 	sta kb_debounce
d2bd : 642a             [ 3] 	stz kb_stat
d2bf : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* kb_read_raw
                             ;* Read keyboard (not shift+ctrl)
                             ;* X = Keyboard code
                             ;* Carry = 1 means key found, 0 = no keys found
                             ;****************************************
d2c0 :                       kb_read_raw
d2c0 : 48               [ 3] 	pha
d2c1 : 5a               [ 3] 	phy
                             
d2c2 : a901             [ 2] 	lda #KB_W				; This is the mask to look for
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank0.s -----------------------------------

d2c4 : a000             [ 2] 	ldy #0					; Start at row 1, column 0, KB_EN is 
d2c6 :                       kb_check_w_col
d2c6 : a207             [ 2] 	ldx #7					; Only 7 rows as row zero is skipped
d2c8 : c8               [ 2] 	iny						; Increment past row 0
d2c9 :                       kb_check_w_key
d2c9 : 8c0104           [ 4] 	sty IO_0 + PRA			; Set the row and column with K
d2cc : ea               [ 2] 	nop						; Short delay for fast CPU
d2cd : ea               [ 2] 	nop						; Short delay for fast CPU
d2ce : 2c0004           [ 4] 	bit IO_0 + PRB			; Bit test for the W status
d2d1 : d00b             [ 3] 	bne got_key				; Found key
d2d3 : c8               [ 2] 	iny						; Advance row
d2d4 : ca               [ 2] 	dex						; Do each row
d2d5 : d0f2             [ 3] 	bne kb_check_w_key
d2d7 : c050             [ 2] 	cpy #0b01010000			; If not got to column 10 then
d2d9 : d0eb             [ 3] 	bne kb_check_w_col
                             
d2db :                       kb_no_key
                             	; no key found
d2db : 18               [ 2] 	clc						; Clear carry flag = no keys found
d2dc : 8045             [ 4] 	bra kb_raw_done			; Exit nicely
                             
d2de :                       got_key
d2de : 8427             [ 3] 	sty kb_raw				; Save the raw key code
d2e0 : bec1d3           [ 4] 	ldx kb_table_std,y		; Load up standard key code 
d2e3 : a900             [ 2] 	lda #0b00000000			; Check shift pressed (row=0, 
d2e5 : 8d0104           [ 4] 	sta IO_0 + PRA
d2e8 : ea               [ 2] 	nop						; Short delay for fast CPU
d2e9 : ea               [ 2] 	nop						; Short delay for fast CPU
d2ea : ad0004           [ 4] 	lda IO_0 + PRB			; Read w
d2ed : 2901             [ 2] 	and #KB_W
d2ef : d006             [ 3] 	bne do_shifted_key
d2f1 : a52a             [ 3] 	lda kb_stat
d2f3 : 2902             [ 2] 	and #KB_SHIFTLK			; Check shift lock
d2f5 : f003             [ 3] 	beq skip_shifted_key	
d2f7 :                       do_shifted_key
d2f7 : be12d4           [ 4] 	ldx kb_table_shift,y	; Overwrite X with shifted 
d2fa :                       skip_shifted_key
d2fa : a908             [ 2] 	lda #0b00001000			; Check ctrl pressed (row=0, c
d2fc : 8d0104           [ 4] 	sta IO_0 + PRA
d2ff : ea               [ 2] 	nop						; Short delay for fast CPU
d300 : ea               [ 2] 	nop						; Short delay for fast CPU
d301 : ad0004           [ 4] 	lda IO_0 + PRB			; Read w
d304 : 2901             [ 2] 	and #KB_W
d306 : f006             [ 3] 	beq skip_ctrl_key
d308 : 8a               [ 2] 	txa						; If ctrl pressed then only take bottom
d309 : 291f             [ 2] 	and #0x1f				; Which will result in codes 0 to 3
d30b : aa               [ 2] 	tax
d30c : 8012             [ 3] 	bra skip_caps_lock		; no point in checking caps 
d30e :                       skip_ctrl_key
d30e : a52a             [ 3] 	lda kb_stat				; Check caps lock
d310 : 2901             [ 2] 	and #KB_CAPSLK
d312 : f00c             [ 3] 	beq skip_caps_lock
d314 : 8a               [ 2] 	txa						; Easier to modify in A
d315 : c961             [ 2] 	cmp #'a'				; If < 'a' then skip
d317 : 9007             [ 3] 	bcc skip_caps_lock
d319 : c97b             [ 2] 	cmp #'z'+1				; If > 'z' then skip
d31b : b003             [ 3] 	bcs skip_caps_lock
d31d : 4920             [ 2] 	eor #0x20				; Switch off bit 0x20
d31f : aa               [ 2] 	tax						; to make upper case
d320 :                       skip_caps_lock
d320 : 8629             [ 3] 	stx kb_code				; Store mapped key code
d322 : 38               [ 2] 	sec						; Set carry flag = key found
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank0.s -----------------------------------

                             	
d323 :                       kb_raw_done
d323 : a080             [ 2] 	ldy #KB_EN				; Re-enable h/w strobe
d325 : 8c0104           [ 4] 	sty IO_0 + PRA
d328 : 7a               [ 4] 	ply
d329 : 68               [ 4] 	pla
d32a : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* kb_read_dip
                             ;* Scans options dip switch
                             ;* A = Options code for all 8 bits
                             ;****************************************
d32b :                       kb_read_dip
d32b : 5a               [ 3] 	phy
                             
d32c : a000             [ 2] 	ldy #0
d32e : 6435             [ 3] 	stz tmp_a
d330 :                       kb_check_dip
d330 : b963d4           [ 4] 	lda kb_dip_code, y		; Binary dip code, row = 0, 
d333 : 8d0104           [ 4] 	sta IO_0 + PRA
d336 : ea               [ 2] 	nop						; Short delay for fast CPU
d337 : ea               [ 2] 	nop						; Short delay for fast CPU
d338 : ad0004           [ 4] 	lda IO_0 + PRB			; Read w
d33b : 2901             [ 2] 	and #KB_W
d33d : f007             [ 3] 	beq kb_skip_dip
d33f : a535             [ 3] 	lda tmp_a
d341 : 196bd4           [ 4] 	ora kb_dip_bit, y		; Set the bit if option on
d344 : 8535             [ 3] 	sta tmp_a
d346 :                       kb_skip_dip
d346 : c8               [ 2] 	iny
d347 : c008             [ 2] 	cpy #8
d349 : d0e5             [ 3] 	bne kb_check_dip
d34b : a535             [ 3] 	lda tmp_a
                             
d34d : a080             [ 2] 	ldy #KB_EN				; Re-enable h/w strobe
d34f : 8c0104           [ 4] 	sty IO_0 + PRA
                             
d352 : 7a               [ 4] 	ply
d353 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* kb_scan_key
                             ;* Scans for a key, returns zero for no key found
                             ;* Processes caps and shift lock but these don't 
                             ;* A = Key code
                             ;****************************************
d354 :                       kb_scan_key
d354 : a530             [ 3] 	lda kb_pressed			; or if interrupt handler didn'
d356 : f01d             [ 3] 	beq kb_scan_zero			
d358 : 6430             [ 3] 	stz kb_pressed			; Zero the flag to indicate a s
d35a : 5a               [ 3] 	phy
d35b : da               [ 3] 	phx
                             	
d35c : a42e             [ 3] 	ldy kb_rep_del			; Initially, assuming normal re
d35e : 20c0d2           [ 6] 	jsr kb_read_raw			; H/W scan of keyboard
d361 : 9010             [ 3] 	bcc kb_scan_nothing		; C clear means nothing fou
d363 : e080             [ 2] 	cpx #0x80				; Was it a special key (caps/shift 
d365 : b01a             [ 3] 	bcs kb_special			; If so process
d367 : a527             [ 3] 	lda kb_raw
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank0.s -----------------------------------

d369 : c528             [ 3] 	cmp kb_last
d36b : d00b             [ 3] 	bne kb_return_code		; This key different from la
d36d : a42d             [ 3] 	ldy kb_rep_tim
d36f : a62c             [ 3] 	ldx kb_rep				; If repeat timer is zero then emi
d371 : f005             [ 3] 	beq kb_return_code
                             
d373 :                       kb_scan_nothing
d373 : fa               [ 4] 	plx
d374 : 7a               [ 4] 	ply
d375 :                       kb_scan_zero
d375 : a900             [ 2] 	lda #0					; 0 = no key	
d377 : 60               [ 6] 	rts
d378 :                       kb_return_code				; Return a key because raw != l
d378 : 842c             [ 3] 	sty kb_rep				; Delay before the same key is emi
d37a : 8528             [ 3] 	sta kb_last				; Now make last = raw
                             	
d37c : fa               [ 4] 	plx
d37d : 7a               [ 4] 	ply
                             	
d37e : a529             [ 3] 	lda kb_code				; Get the actual code
                             	
d380 : 60               [ 6] 	rts
                             
d381 :                       kb_special					; Process special keys
d381 : e428             [ 3] 	cpx kb_last				; If last is not zero then don't 
d383 : f0ee             [ 3] 	beq kb_scan_nothing		; special keys don't obey r
d385 : 8628             [ 3] 	stx kb_last				; Update last
d387 : e08a             [ 2] 	cpx #0x8a				; CAPS?
d389 : f015             [ 3] 	beq kb_caps_lock		; Yes
d38b : e08b             [ 2] 	cpx #0x8b				; Shift Lock?
d38d : d0e4             [ 3] 	bne kb_scan_nothing		; No, then found nothing (F
                             	;Process shift lock
d38f : a52a             [ 3] 	lda kb_stat
d391 : 4902             [ 2] 	eor #KB_SHIFTLK
d393 : 852a             [ 3] 	sta kb_stat
d395 : 18               [ 2] 	clc
d396 : 2902             [ 2] 	and #KB_SHIFTLK
d398 : f001             [ 3] 	beq kb_skip_shiftlk
d39a : 38               [ 2] 	sec
d39b :                       kb_skip_shiftlk
d39b : 201bd2           [ 6] 	jsr set_led2
d39e : 80d3             [ 3] 	bra kb_scan_nothing
                             	;Process caps lock
d3a0 :                       kb_caps_lock
d3a0 : a52a             [ 3] 	lda kb_stat
d3a2 : 4901             [ 2] 	eor #KB_CAPSLK
d3a4 : 852a             [ 3] 	sta kb_stat
d3a6 : 18               [ 2] 	clc
d3a7 : 2901             [ 2] 	and #KB_CAPSLK
d3a9 : f001             [ 3] 	beq kb_skip_capslk
d3ab : 38               [ 2] 	sec
d3ac :                       kb_skip_capslk
d3ac : 200cd2           [ 6] 	jsr set_led1
d3af : 80c2             [ 3] 	bra kb_scan_nothing
                             
                             ;****************************************
                             ;* kb_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code
                             ;****************************************
d3b1 :                       kb_get_key
d3b1 : 08               [ 3] 	php
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank0.s -----------------------------------

d3b2 : 2054d3           [ 6] 	jsr kb_scan_key
d3b5 : c900             [ 2] 	cmp #0
d3b7 : d005             [ 3] 	bne kb_scan_got_key
d3b9 : 28               [ 4] 	plp						; No key, so check C
d3ba : b0f5             [ 3] 	bcs kb_get_key			; Keep looking if C
d3bc : 38               [ 2] 	sec						; Indicate key not got
d3bd : 60               [ 6] 	rts
d3be :                       kb_scan_got_key
d3be : 28               [ 4] 	plp						; Pull stack
d3bf : 18               [ 2] 	clc						; Indicate key valid
d3c0 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* kb_table_std (no shift)
                             ;* Keyboard table - zero indicates nothing
                             ;****************************************
d3c1 :                       kb_table_std
d3c1 : 00                    	db 0x00								; Zero entry means nothing
d3c2 : 7180318a8b091b        	db 'q',0x80, '1',0x8a,0x8b,   9, 27	; Q, F0, 1, 
d3c9 : 00                    	db 0x00								; Skip row 0
d3ca : 33773261737a81        	db '3', 'w', '2', 'a', 's', 'z',0x81; 3, W, 2, A
d3d1 : 00                    	db 0x00								; Skip row 0
d3d2 : 34656478632082        	db '4', 'e', 'd', 'x', 'c', ' ',0x82; 4, E, D, X
d3d9 : 00                    	db 0x00								; Skip row 0
d3da : 35747266677683        	db '5', 't', 'r', 'f', 'g', 'v',0x83; 5, T, R, F
d3e1 : 00                    	db 0x00								; Skip row 0
d3e2 : 84373679686285        	db 0x84,'7', '6', 'y', 'h', 'b',0x85; F4, 7, 6, 
d3e9 : 00                    	db 0x00								; Skip row 0
d3ea : 3869756a6e6d86        	db '8', 'i', 'u', 'j', 'n', 'm',0x86; 8, I, U, J
d3f1 : 00                    	db 0x00								; Skip row 0
d3f2 : 87396f6b6c2c88        	db 0x87,'9', 'o', 'k', 'l', ',',0x88; F7, 9, O, 
d3f9 : 00                    	db 0x00								; Skip row 0
d3fa : 2d3070403b2e89        	db '-', '0', 'p', '@', ';', '.',0x89; -, 0, P, @
d401 : 00                    	db 0x00								; Skip row 0
d402 : 5e5f5b3a5d2f5c        	db '^', '_', '[', ':', ']', '/', 92	; ^, _, [, :
d409 : 00                    	db 0x00								; Skip row 0
d40a : 080a0b0d7f0609        	db   8,  10,  11,  13, 127,   6,  9	; Left, Down
d411 : 00                    	db 0x00								; Skip row 0
                             
                             ;****************************************
                             ;* kb_table_shift (with shift)
                             ;* Keyboard table - zero indicates nothing
                             ;****************************************
d412 :                       kb_table_shift
d412 : 00                    	db 0x00								; Zero entry means nothing
d413 : 51c0218a8b091b        	db 'Q',0xc0, '!',0x8a,0x8b,   9, 27	; Q, F0, 1, 
d41a : 00                    	db 0x00								; Skip row 0
d41b : 23572241535ac1        	db '#', 'W', '"', 'A', 'S', 'Z',0xc1; 3, W, 2, A
d422 : 00                    	db 0x00								; Skip row 0
d423 : 244544584320c2        	db '$', 'E', 'D', 'X', 'C', ' ',0xc2; 4, E, D, X
d42a : 00                    	db 0x00								; Skip row 0
d42b : 255452464756c3        	db '%', 'T', 'R', 'F', 'G', 'V',0xc3; 5, T, R, F
d432 : 00                    	db 0x00								; Skip row 0
d433 : 842726594842c5        	db 0x84, 39, '&', 'Y', 'H', 'B',0xc5; F4, 7, 6, 
d43a : 00                    	db 0x00								; Skip row 0
d43b : 2849554a4e4dc6        	db '(', 'I', 'U', 'J', 'N', 'M',0xc6; 8, I, U, J
d442 : 00                    	db 0x00								; Skip row 0
d443 : 87294f4b4c3cc8        	db 0x87,')', 'O', 'K', 'L', '<',0xc8; F7, 9, O, 
d44a : 00                    	db 0x00								; Skip row 0
d44b : 3d3050402b3ec9        	db '=', '0', 'P', '@', '+', '>',0xc9; -, 0, P, @
d452 : 00                    	db 0x00								; Skip row 0
d453 : 7e607b2a7d3f7c        	db '~', 96, '{', '*', '}', '?', '|'	; ^, _, [, :
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank0.s -----------------------------------

d45a : 00                    	db 0x00								; Skip row 0
d45b : 080a0b0d7f0609        	db   8,  10,  11,  13, 127,   6,  9	; Left, Down
d462 : 00                    	db 0x00								; Skip row 0
                             
                             ; Option switches
d463 :                       kb_dip_code
d463 : 10                    	db 0b00010000
d464 : 18                    	db 0b00011000
d465 : 20                    	db 0b00100000
d466 : 28                    	db 0b00101000
d467 : 30                    	db 0b00110000
d468 : 38                    	db 0b00111000
d469 : 40                    	db 0b01000000
d46a : 48                    	db 0b01001000
d46b :                       kb_dip_bit
d46b : 0102040810204080      	db 0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80
                             	
                             
                             	include "rtc\rtc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.S
                             ;*	Real time clock support.  Uses the DS12887 to 
                             ;*	time functions for use by the rest of the syst
                             ;*	notably for file date-time stamps.
                             ;*	Just basic functions supported so far.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d473 :                       mod_sz_rtc_s
                             
                             
                             ;****************************************
                             ;* rtc_write
                             ;* Low level routine to write to a RTC location
                             ;* Inputs; X=location, A=Value
                             ;****************************************
d473 :                       rtc_write
d473 : 08               [ 3] 	php
d474 : 78               [ 2] 	sei
d475 : 8e0006           [ 4] 	stx RTC_ADDR
d478 : 8d0106           [ 4] 	sta RTC_DATA
d47b : 28               [ 4] 	plp
d47c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* rtc_read
                             ;* Low level routine to write to a RTC location
                             ;* Inputs; X=location
                             ;* Output; A=Value
                             ;****************************************
d47d :                       rtc_read
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank0.s -----------------------------------

d47d : 08               [ 3] 	php
d47e : 78               [ 2] 	sei
d47f : 8e0006           [ 4] 	stx RTC_ADDR
d482 : ad0106           [ 4] 	lda RTC_DATA
d485 : 28               [ 4] 	plp
d486 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* rtc_init
                             ;* Initialise the RTC.  Check the VRT
                             ;* and if suspect then offer option to
                             ;* set date-time.
                             ;* Check NV ram and warn if bad
                             ;****************************************
d487 :                       rtc_init
                             	; No interrupts
d487 : a20c             [ 2] 	ldx #RTC_REGC
d489 : a900             [ 2] 	lda #0
d48b : 2073d4           [ 6] 	jsr rtc_write
                             	
                             ;	; Clear alarm bytes
                             ;	lda #0
                             ;	ldx #RTC_SECA
                             ;	jsr rtc_write
                             ;	ldx #RTC_MINA
                             ;	jsr rtc_write
                             ;	ldx #RTC_HRA
                             ;	jsr rtc_write
                             ;	; Also clear day of week (not used yet)
                             ;	ldx #RTC_DOW
                             ;	jsr rtc_write
                             
                             	; Default is binary mode, 24 hour clock, no dayl
d48e : a20b             [ 2] 	ldx #RTC_REGB
d490 : a906             [ 2] 	lda #RTC_DM | RTC_2412
d492 : 2073d4           [ 6] 	jsr rtc_write
                             
                             	; Make sure clock is ticking
d495 : a20a             [ 2] 	ldx #RTC_REGA
d497 : a920             [ 2] 	lda #0b00100000			; Magic number to start the os
d499 : 2073d4           [ 6] 	jsr rtc_write
                             	
                             	; Check VRT - if zero then bad battery / RAM!
d49c : a20d             [ 2] 	ldx #RTC_REGD
d49e : 207dd4           [ 6] 	jsr rtc_read
d4a1 : 2980             [ 2] 	and #RTC_VRT
d4a3 : d003             [ 3] 	bne rtc_badbattery_ok
d4a5 : 20cbd4           [ 6] 	jsr rtc_badbattery
d4a8 :                       rtc_badbattery_ok
                             	; Check NV ram - if C=1 then corrupted!
d4a8 : 2028d6           [ 6] 	jsr rtc_nvvalid
d4ab : b046             [ 3] 	bcs rtc_badnvram
                             	
                             	;C=0
d4ad : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* rtc_badbattery
                             ;* Warn of bad battery and choice to set date/tim
                             ;****************************************
d4ae :                       rtc_badbattery_msg
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank0.s -----------------------------------

d4ae : 5761726e696e67..      	db "Warning, RTC battery issue.",UTF_CR,0
                             	
d4cb :                       rtc_badbattery
                             	; Print message
d4cb : a2ae             [ 2] 	ldx #lo(rtc_badbattery_msg)
d4cd : a9d4             [ 2] 	lda #hi(rtc_badbattery_msg)
d4cf :                       rtc_printerror
d4cf : 200bc6           [ 6] 	jsr io_print_line
                             	; Signifiy bad battery
d4d2 : 38               [ 2] 	sec
d4d3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* rtc_badnvram
                             ;* Warn of bad NV ram
                             ;****************************************
d4d4 :                       rtc_badnvram_msg
d4d4 : 5761726e696e67..      	db "Warning, NV RAM checksum bad.",UTF_CR,0
                             
d4f3 :                       rtc_badnvram
                             	; Print message
d4f3 : a2d4             [ 2] 	ldx #lo(rtc_badnvram_msg)
d4f5 : a9d4             [ 2] 	lda #hi(rtc_badnvram_msg)
d4f7 : 80d6             [ 3] 	bra rtc_printerror
                             
                             
                             ;****************************************
                             ;* rtc_freezeupdate
                             ;* Stop time and date buffer updating
                             ;****************************************
d4f9 :                       rtc_freezeupdate
d4f9 : a20b             [ 2] 	ldx #RTC_REGB
d4fb : a986             [ 2] 	lda #RTC_SET | RTC_DM | RTC_2412
d4fd : 4c73d4           [ 3] 	jmp rtc_write
                             
                             
                             ;****************************************
                             ;* rtc_resumeupdate
                             ;* Resume time and date buffer updating
                             ;****************************************
d500 :                       rtc_resumeupdate
d500 : a20b             [ 2] 	ldx #RTC_REGB
d502 : a906             [ 2] 	lda #RTC_DM | RTC_2412
d504 : 4c73d4           [ 3] 	jmp rtc_write
                             
                             
                             ;****************************************
                             ;* rtc_setdatetime
                             ;* Set the date and time
                             ;****************************************
d507 :                       rtc_date_msg
d507 : 456e7465722064..      	db "Enter date dd/mm/yy : ",0
d51e :                       rtc_time_msg
d51e : 456e7465722074..      	db "Enter time hh/mm/ss : ",0
d535 :                       rtc_notset_msg
d535 : 4e6f7420736574..      	db "Not set",UTF_CR,0
d53e :                       rtc_setdatetime
d53e : 20f9d4           [ 6] 	jsr rtc_freezeupdate
                             	; Message for get date
d541 : a207             [ 2] 	ldx #lo(rtc_date_msg)
d543 : a9d5             [ 2] 	lda #hi(rtc_date_msg)
d545 : 200bc6           [ 6] 	jsr io_print_line
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank0.s -----------------------------------

                             	; Input date to the scratch buffer
d548 : 38               [ 2] 	sec								; Echo
d549 : a200             [ 2] 	ldx #lo(scratch)				; Serial input buffer for th
d54b : a909             [ 2] 	lda #hi(scratch)
d54d : a00a             [ 2] 	ldy #10
d54f : 20cfc5           [ 6] 	jsr io_read_line
d552 : c008             [ 2] 	cpy #8							; Must be 8 characters
d554 : d056             [ 3] 	bne rtc_dtnotset				; else don't set
d556 : a200             [ 2] 	ldx #0							; Buffer is page aligned, pos 0=day
d558 : a53c             [ 3] 	lda buf_adr+1
d55a : 20c7d5           [ 6] 	jsr rtc_dtstringconvert
d55d : b04d             [ 3] 	bcs rtc_dtnotset
                             	; Ok now update the date from tmp_b,+1,+2
d55f : a207             [ 2] 	ldx #RTC_DAY
d561 : a537             [ 3] 	lda tmp_b
d563 : 2073d4           [ 6] 	jsr rtc_write
d566 : a208             [ 2] 	ldx #RTC_MTH
d568 : a538             [ 3] 	lda tmp_b+1
d56a : 2073d4           [ 6] 	jsr rtc_write
d56d : a209             [ 2] 	ldx #RTC_YR
d56f : a539             [ 3] 	lda tmp_b+2
d571 : 2073d4           [ 6] 	jsr rtc_write
                             
                             	; Message for get time
d574 : a21e             [ 2] 	ldx #lo(rtc_time_msg)
d576 : a9d5             [ 2] 	lda #hi(rtc_time_msg)
d578 : 200bc6           [ 6] 	jsr io_print_line
                             	; Input date to the scratch buffer
d57b : 38               [ 2] 	sec								; Echo
d57c : a200             [ 2] 	ldx #lo(scratch)				; Serial input buffer for th
d57e : a909             [ 2] 	lda #hi(scratch)
d580 : a00a             [ 2] 	ldy #10
d582 : 20cfc5           [ 6] 	jsr io_read_line
d585 : c008             [ 2] 	cpy #8							; Must be 8 characters
d587 : d023             [ 3] 	bne rtc_dtnotset				; else don't set
d589 : a200             [ 2] 	ldx #0							; Buffer is page aligned, pos 0=hr
d58b : a53c             [ 3] 	lda buf_adr+1
d58d : 20c7d5           [ 6] 	jsr rtc_dtstringconvert
d590 : b01a             [ 3] 	bcs rtc_dtnotset
                             	; Ok now update the time from tmp_b,+1,+2
d592 : a204             [ 2] 	ldx #RTC_HR
d594 : a537             [ 3] 	lda tmp_b
d596 : 2073d4           [ 6] 	jsr rtc_write
d599 : a202             [ 2] 	ldx #RTC_MIN
d59b : a538             [ 3] 	lda tmp_b+1
d59d : 2073d4           [ 6] 	jsr rtc_write
d5a0 : a200             [ 2] 	ldx #RTC_SEC
d5a2 : a539             [ 3] 	lda tmp_b+2
d5a4 : 2073d4           [ 6] 	jsr rtc_write
d5a7 : 2000d5           [ 6] 	jsr rtc_resumeupdate
                             	; Signify time set OK
d5aa : 18               [ 2] 	clc
d5ab : 60               [ 6] 	rts
d5ac :                       rtc_dtnotset
                             	; Message for get date
d5ac : a235             [ 2] 	ldx #lo(rtc_notset_msg)
d5ae : a9d5             [ 2] 	lda #hi(rtc_notset_msg)
d5b0 : 200bc6           [ 6] 	jsr io_print_line
d5b3 : 2000d5           [ 6] 	jsr rtc_resumeupdate
                             	; Signify time not set
d5b6 : 38               [ 2] 	sec
d5b7 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank0.s -----------------------------------

                             
                             
                             ;****************************************
                             ;* rtc_ptrplus3
                             ;* Add 3 to tmp_v1 ptr, result in tmp_v1 + X,A
                             ;****************************************
d5b8 :                       rtc_ptrplus3
d5b8 : 18               [ 2] 	clc
d5b9 : a533             [ 3] 	lda tmp_v1
d5bb : 6903             [ 2] 	adc #3
d5bd : 8533             [ 3] 	sta tmp_v1
d5bf : aa               [ 2] 	tax
d5c0 : a534             [ 3] 	lda tmp_v1+1
d5c2 : 6900             [ 2] 	adc #0
d5c4 : 8534             [ 3] 	sta tmp_v1+1
d5c6 : 60               [ 6] 	rts
                             
                             
                             ;**************************************
                             ;* rtc_dtstringconvert
                             ;* Convert a PP:QQ:RR string
                             ;* Starting at X,A
                             ;****************************************
d5c7 :                       rtc_dtstringconvert
                             	; X,A is base of string pointer
d5c7 : 8633             [ 3] 	stx tmp_v1						
d5c9 : 8534             [ 3] 	sta tmp_v1+1
d5cb : 20dcc9           [ 6] 	jsr con_dec_to_a				; Convert day of month
d5ce : b01c             [ 3] 	bcs rtc_dtbadstring
d5d0 : a579             [ 3] 	lda num_a						; Get converted number
d5d2 : 8537             [ 3] 	sta tmp_b						; Save day of month
                             
d5d4 : 20b8d5           [ 6] 	jsr rtc_ptrplus3				; +3 to base for month
d5d7 : 20dcc9           [ 6] 	jsr con_dec_to_a				; Convert month
d5da : b010             [ 3] 	bcs rtc_dtbadstring
d5dc : a579             [ 3] 	lda num_a						; Get converted number
d5de : 8538             [ 3] 	sta tmp_b+1						; Save month
                             
d5e0 : 20b8d5           [ 6] 	jsr rtc_ptrplus3				; +3 to base for month
d5e3 : 20dcc9           [ 6] 	jsr con_dec_to_a				; Convert year
d5e6 : b004             [ 3] 	bcs rtc_dtbadstring
d5e8 : a579             [ 3] 	lda num_a						; Get converted number
d5ea : 8539             [ 3] 	sta tmp_b+2						; Save year
d5ec :                       rtc_dtbadstring
d5ec : 60               [ 6] 	rts
                             
                             
                             ;**************************************
                             ;* rtc_gettimedate
                             ;* Get time and put in to 6 bytes in location X,A
                             ;* Order is : HMSDMY
                             ;**************************************
d5ed :                       rtc_gettimedate
d5ed : 8633             [ 3] 	stx tmp_v1
d5ef : 8534             [ 3] 	sta tmp_v1+1
d5f1 : a000             [ 2] 	ldy #0
d5f3 : 20f9d4           [ 6] 	jsr rtc_freezeupdate
d5f6 : a204             [ 2] 	ldx #RTC_HR
d5f8 : 207dd4           [ 6] 	jsr rtc_read
d5fb : 9133             [ 5] 	sta (tmp_v1),y
d5fd : c8               [ 2] 	iny
d5fe : a202             [ 2] 	ldx #RTC_MIN
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank0.s -----------------------------------

d600 : 207dd4           [ 6] 	jsr rtc_read
d603 : 9133             [ 5] 	sta (tmp_v1),y
d605 : c8               [ 2] 	iny
d606 : a200             [ 2] 	ldx #RTC_SEC
d608 : 207dd4           [ 6] 	jsr rtc_read
d60b : 9133             [ 5] 	sta (tmp_v1),y
d60d : c8               [ 2] 	iny
d60e : a207             [ 2] 	ldx #RTC_DAY
d610 : 207dd4           [ 6] 	jsr rtc_read
d613 : 9133             [ 5] 	sta (tmp_v1),y
d615 : c8               [ 2] 	iny
d616 : a208             [ 2] 	ldx #RTC_MTH
d618 : 207dd4           [ 6] 	jsr rtc_read
d61b : 9133             [ 5] 	sta (tmp_v1),y
d61d : c8               [ 2] 	iny
d61e : a209             [ 2] 	ldx #RTC_YR
d620 : 207dd4           [ 6] 	jsr rtc_read
d623 : 9133             [ 5] 	sta (tmp_v1),y
d625 : 4c00d5           [ 3] 	jmp rtc_resumeupdate
                             
                             ;**************************************
                             ;* rtc_nvvalid
                             ;* Validate nvram checksum
                             ;* C=1 means ERROR
                             ;* Simple 8 bit sum of all bytes should
                             ;* result in a zero. Partial sum carry
                             ;* is used.
                             ;* Uses A,X
                             ;**************************************
d628 :                       rtc_nvvalid
d628 : a20e             [ 2] 	ldx #14
d62a : a900             [ 2] 	lda #0
d62c : 8533             [ 3] 	sta tmp_v1
d62e :                       rtc_nvvalid_loop
d62e : 207dd4           [ 6] 	jsr rtc_read
d631 : 18               [ 2] 	clc
d632 : 6533             [ 3] 	adc tmp_v1
d634 : 8533             [ 3] 	sta tmp_v1
d636 : e8               [ 2] 	inx
d637 : e040             [ 2] 	cpx #NV_RAMSZ+1
d639 : d0f3             [ 3] 	bne rtc_nvvalid_loop
d63b : a533             [ 3] 	lda tmp_v1
                             	; A-1 will be C=1 if A>=1
d63d : c901             [ 2] 	cmp #1
d63f : 60               [ 6] 	rts
                             
                             ;**************************************
                             ;* rtc_nvwrite
                             ;* Write to nvram location X, value A
                             ;* Checksum (byte 127) is also updated
                             ;**************************************
d640 :                       rtc_nvwrite
                             	; Write to required nv location
d640 : 2073d4           [ 6] 	jsr rtc_write
                             	; Zero out checksum location
d643 : a23f             [ 2] 	ldx #NV_RAMSZ
d645 : a900             [ 2] 	lda #0
d647 : 2073d4           [ 6] 	jsr rtc_write
                             	; Get new checksum by calling validator
d64a : 2028d6           [ 6] 	jsr rtc_nvvalid
                             	; Calculate checksum by making 2s complement
d64d : 49ff             [ 2] 	eor #0xff
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank0.s -----------------------------------

d64f : 18               [ 2] 	clc
d650 : 6901             [ 2] 	adc #1
                             	; Write new checksum
d652 : a23f             [ 2] 	ldx #NV_RAMSZ
d654 : 2073d4           [ 6] 	jsr rtc_write
d657 : 60               [ 6] 	rts
                             
                             ;**************************************
                             ;* rtc_nvread
                             ;* Read from nvram location X
                             ;* Value in A
                             ;* C=1 if checksum failed
                             ;**************************************
d658 :                       rtc_nvread
                             	; Read nv location
d658 : 207dd4           [ 6] 	jsr rtc_read
                             	; Remember while validating checksum
d65b : 48               [ 3] 	pha
                             	; Validate checksum (C=0 if OK)
d65c : 2028d6           [ 6] 	jsr rtc_nvvalid
                             	; Retrieve the location read
d65f : 68               [ 4] 	pla
                             	; C=0 if OK and A is valid
d660 : 60               [ 6] 	rts
                             
d661 :                       mod_sz_rtc_e
                             
                             
                             	include "sound\sound.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SOUND.S
                             ;*  Sound driver module - routines to access the 
                             ;*  This sound chip was found in a number of popu
                             ;*  in the early to mid 80s, including my first c
                             ;*  the Oric-1, as well as the MSX range.  Interf
                             ;*  chip is through port A of VIA 2 because it ca
                             ;*  connected directly to the 6502 bus.  This mea
                             ;*  is a bit clunky to drive, but this is how the
                             ;*  did it, so even though I came up with this in
                             ;*  I guess I can't be too wrong with this approa
                             ;*  The AY doesn't only produce sound, it also ha
                             ;*  of 8 bit IO port - one of them I am using for
                             ;*
                             ;*  NOTE:	As part of the ROM banking strategy, th
                             ;*			lowest level routines have been factored out
                             ;*			to the 'kernel' which means they are present
                             ;*			in every code bank.
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code
                             
d661 :                       mod_sz_sound_s
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank0.s -----------------------------------

                             
                             
                             ;****************************************
                             ;* snd_get_note
                             ;* Get a note from the music scale table
                             ;* Input : Y
                             ;* Output : A,X = Value hi,lo
                             ;* Regs affected : X
                             ;****************************************
d661 :                       snd_get_note
d661 : be86d6           [ 4] 	ldx snd_music_tab,y
d664 : b987d6           [ 4] 	lda snd_music_tab+1,y
d667 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_snd
                             ;* Initialise sound - after cia 1 has been initia
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
d668 :                       init_snd
d668 : a200             [ 2] 	ldx #0x00
d66a :                       init_snd_regs
d66a : bc76d6           [ 4] 	ldy snd_init_tab,x
d66d : 20a1c6           [ 6] 	jsr snd_set				; Set X to Y
d670 : e8               [ 2] 	inx
d671 : e010             [ 2] 	cpx #16					; Done 16?
d673 : d0f5             [ 3] 	bne init_snd_regs		; Nope	
                             	
d675 : 60               [ 6] 	rts						; return from sub
                             
                             	; Register array initialisation values
                             	; Assuming 1.34Mhz input clock
d676 :                       snd_init_tab
d676 : 80                    	db 0x80				; R0 = Channel A Tone Low
d677 : 00                    	db 0x00				; R1 = Channel A Tone High
d678 : 00                    	db 0x00				; R2 = Channel B Tone Low
d679 : 01                    	db 0x01				; R3 = Channel B Tone High
d67a : 00                    	db 0x00				; R4 = Channel C Tone Low
d67b : 02                    	db 0x02				; R5 = Channel C Tone High
d67c : 00                    	db 0x00				; R6 = Noise period
d67d : 3e                    	db 0b00111110		; R7 = Control : IOB input, IOA i
d67e : 1f                    	db 0x1f				; R8 = Channel A Vol
d67f : 1f                    	db 0x1f				; R9 = Channel B Vol
d680 : 1f                    	db 0x1f				; R10 = Channel C Vol
d681 : 00                    	db 0x00				; R11 = Envelope Period Low
d682 : 09                    	db 0x09				; R12 = Envelope Period High
d683 : 00                    	db 0b00000000		; R13 = Envelope Shape : 0000
d684 : 00                    	db 0x00				; R14 = IO Port A
d685 : 00                    	db 0x00				; R15 = IO Port B ; Initialise to 0
                             
d686 :                       snd_music_tab
d686 : 050a                  	dw 2565				; C		0
d688 : 7509                  	dw 2421				; C#	1
d68a : ee08                  	dw 2286				; D		2
d68c : 6d08                  	dw 2157				; D#	3
d68e : f407                  	dw 2036				; E		4
d690 : 8207                  	dw 1922				; F		5
d692 : 1607                  	dw 1814				; F#	6
d694 : b006                  	dw 1712				; G		7
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank0.s -----------------------------------

d696 : 5006                  	dw 1616				; G#	8
d698 : f505                  	dw 1525				; A		9
d69a : a005                  	dw 1440				; A#	10
d69c : 4f05                  	dw 1359				; B		11
                             	
d69e : 0305                  	dw 1283				; C
d6a0 : bb04                  	dw 1211				; C#
d6a2 : 7704                  	dw 1143				; D
d6a4 : 3704                  	dw 1079				; D#
d6a6 : fa03                  	dw 1018				; E
d6a8 : c103                  	dw 961 				; F
d6aa : 8b03                  	dw 907 				; F#
d6ac : 5803                  	dw 856 				; G
d6ae : 2803                  	dw 808 				; G#
d6b0 : fb02                  	dw 763 				; A
d6b2 : d002                  	dw 720 				; A#
d6b4 : a702                  	dw 679 				; B
                             
d6b6 : 8102                  	dw 641				; C
d6b8 : 5d02                  	dw 605				; C#
d6ba : 3b02                  	dw 571				; D
d6bc : 1b02                  	dw 539				; D#
d6be : fd01                  	dw 509				; E
d6c0 : e001                  	dw 480				; F
d6c2 : c501                  	dw 453				; F#
d6c4 : ac01                  	dw 428				; G
d6c6 : 9401                  	dw 404				; G#
d6c8 : 7d01                  	dw 381				; A
d6ca : 6801                  	dw 360				; A#
d6cc : 5401                  	dw 340				; B
                             
d6ce : 4101                  	dw 321				; C
d6d0 : 2f01                  	dw 303				; C#
d6d2 : 1e01                  	dw 286				; D
d6d4 : 0e01                  	dw 270				; D#
d6d6 : fe00                  	dw 254				; E
d6d8 : f000                  	dw 240				; F
d6da : e300                  	dw 227				; F#
d6dc : d600                  	dw 214				; G
d6de : ca00                  	dw 202				; G#
d6e0 : bf00                  	dw 191				; A
d6e2 : b400                  	dw 180				; A#
d6e4 : aa00                  	dw 170				; B
                             
d6e6 : a000                  	dw 160				; C
d6e8 : 9700                  	dw 151				; C#
d6ea : 8f00                  	dw 143				; D
d6ec : 8700                  	dw 135				; D#
d6ee : 7f00                  	dw 127				; E
d6f0 : 7800                  	dw 120				; F
d6f2 : 7100                  	dw 113				; F#
d6f4 : 6b00                  	dw 107				; G
d6f6 : 6500                  	dw 101				; G#
d6f8 : 5f00                  	dw 95 				; A
d6fa : 5a00                  	dw 90 				; A#
d6fc : 5500                  	dw 85 				; B
                             
d6fe : 5000                  	dw 80				; C
d700 : 4c00                  	dw 76				; C#
d702 : 4700                  	dw 71				; D
d704 : 4300                  	dw 67				; D#
d706 : 4000                  	dw 64				; E
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank0.s -----------------------------------

d708 : 3c00                  	dw 60				; F
d70a : 3900                  	dw 57				; F#
d70c : 3600                  	dw 54				; G
d70e : 3300                  	dw 51				; G#
d710 : 3000                  	dw 48				; A
d712 : 2d00                  	dw 45				; A#
d714 : 2a00                  	dw 42				; B
                             
d716 : 2800                  	dw 40				; C
d718 : 2600                  	dw 38				; C#
d71a : 2400                  	dw 36				; D
d71c : 2200                  	dw 34				; D#
d71e : 2000                  	dw 32				; E
d720 : 1e00                  	dw 30				; F
d722 : 1c00                  	dw 28				; F#
d724 : 1b00                  	dw 27				; G
d726 : 1900                  	dw 25				; G#
d728 : 1800                  	dw 24				; A
d72a : 1600                  	dw 22				; A#
d72c : 1500                  	dw 21				; B
                             
d72e :                       mod_sz_sound_e
                             
                             	include "vdp\vdp.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP.S
                             ;*  This module implements the drivers of the VDP
                             ;*  a TMS9918a.  The VDP is interfaced to the 650
                             ;*  through a memory mapped IO (that's how the 65
                             ;*  There are only two bytes in the IO space that
                             ;*  and the 6502 needs to poke or read from these
                             ;*  delay to allow the VDP to detect and respond 
                             ;*  request.  It's interesting that delays are ne
                             ;*  MSX computer also used a TMS9918a but with Z8
                             ;*  CPU, which actually didn't need delays.  The 
                             ;*  a simple processor but a write instruction on
                             ;*  4 cycles, hence needing delays.
                             ;*  Considering it came out in the late 70s, the 
                             ;*  series of VDP are pretty impressive - 2 text 
                             ;*  a hires mode too ('a' variant).  Plus 32 hard
                             ;*  sprites and 15 colours - very good indeed. Al
                             ;*  uses its own memory so doesn't eat 6502 space
                             ;*  Downside to having its own memory is that it 
                             ;*  slow to do large updates e.g. scrolling.  Ok 
                             ;*  column screen can be scrolled and it looks ok
                             ;*  no way would I try to scroll a hires screen. 
                             ;*  why many games on the MSX didn't do smooth sc
                             ;*
                             ;*  NOTE:	As part of the ROM banking strategy, th
                             ;*			lowest level routines have been factored out
                             ;*			to the 'kernel' which means they are present
                             ;*			in every code bank.
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank0.s -----------------------------------

                             
                             	; ROM code
                             	code
                             
d72e :                       mod_sz_vdp_s
                             
                             	include "vdp\font.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  FONT.S
                             ;*  This is the font definition, used to initiali
                             ;*  character set.  The normal char 1 is either a
                             ;*  but I have set the default to be a little spa
                             ;*  This character set is a combination of the MS
                             ;*  special characters outside of the normal ASCI
                             ;*  and Oric-1 for letters, numbers, punctuation 
                             ;*  Oric was my first computer hence the nostalgi
                             ;*
                             ;************************************************
                             
d72e : 00000000000000..      	align 256
                             	
d800 :                       vdp_font
                             ; char 0
d800 : 00                    	db %00000000
d801 : 00                    	db %00000000
d802 : 00                    	db %00000000
d803 : 00                    	db %00000000
d804 : 00                    	db %00000000
d805 : 00                    	db %00000000
d806 : 00                    	db %00000000
d807 : 00                    	db %00000000
                             ; char 1 standard
                             ;	db %00000000
                             ;	db %00100000
                             ;	db %01110000
                             ;	db %11111000
                             ;	db %01110000
                             ;	db %00100000
                             ;	db %00000000
                             ;	db %00000000
                             ; char 1 space invader
d808 : 18                    	db %00011000
d809 : 3c                    	db %00111100
d80a : 7e                    	db %01111110
d80b : db                    	db %11011011
d80c : ff                    	db %11111111
d80d : 24                    	db %00100100
d80e : 5a                    	db %01011010
d80f : a5                    	db %10100101
                             ; char 2
d810 : a8                    	db %10101000
d811 : 54                    	db %01010100
d812 : a8                    	db %10101000
d813 : 54                    	db %01010100
d814 : a8                    	db %10101000
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank0.s -----------------------------------

d815 : 54                    	db %01010100
d816 : a8                    	db %10101000
d817 : 54                    	db %01010100
                             ; char 3
d818 : 20                    	db %00100000
d819 : 70                    	db %01110000
d81a : a8                    	db %10101000
d81b : 20                    	db %00100000
d81c : 20                    	db %00100000
d81d : 20                    	db %00100000
d81e : 20                    	db %00100000
d81f : 00                    	db %00000000
                             ; char 4
d820 : 20                    	db %00100000
d821 : 20                    	db %00100000
d822 : 20                    	db %00100000
d823 : 20                    	db %00100000
d824 : a8                    	db %10101000
d825 : 70                    	db %01110000
d826 : 20                    	db %00100000
d827 : 00                    	db %00000000
                             ; char 5
d828 : 00                    	db %00000000
d829 : 20                    	db %00100000
d82a : 40                    	db %01000000
d82b : f8                    	db %11111000
d82c : 40                    	db %01000000
d82d : 20                    	db %00100000
d82e : 00                    	db %00000000
d82f : 00                    	db %00000000
                             ; char 6
d830 : 00                    	db %00000000
d831 : 20                    	db %00100000
d832 : 10                    	db %00010000
d833 : f8                    	db %11111000
d834 : 10                    	db %00010000
d835 : 20                    	db %00100000
d836 : 00                    	db %00000000
d837 : 00                    	db %00000000
                             ; char 7
d838 : 60                    	db %01100000
d839 : 90                    	db %10010000
d83a : 90                    	db %10010000
d83b : 60                    	db %01100000
d83c : 00                    	db %00000000
d83d : 00                    	db %00000000
d83e : 00                    	db %00000000
d83f : 00                    	db %00000000
                             ; char 8
d840 : 20                    	db %00100000
d841 : 20                    	db %00100000
d842 : f8                    	db %11111000
d843 : 20                    	db %00100000
d844 : 20                    	db %00100000
d845 : 00                    	db %00000000
d846 : f8                    	db %11111000
d847 : 00                    	db %00000000
                             ; char 9
d848 : 00                    	db %00000000
d849 : 00                    	db %00000000
d84a : 00                    	db %00000000
d84b : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank0.s -----------------------------------

d84c : 00                    	db %00000000
d84d : 00                    	db %00000000
d84e : a8                    	db %10101000
d84f : 00                    	db %00000000
                             ; char 10
d850 : 00                    	db %00000000
d851 : 00                    	db %00000000
d852 : 08                    	db %00001000
d853 : 10                    	db %00010000
d854 : a0                    	db %10100000
d855 : 40                    	db %01000000
d856 : 00                    	db %00000000
d857 : 00                    	db %00000000
                             ; char 11
d858 : 30                    	db %00110000
d859 : 30                    	db %00110000
d85a : 30                    	db %00110000
d85b : f0                    	db %11110000
d85c : f0                    	db %11110000
d85d : 00                    	db %00000000
d85e : 00                    	db %00000000
d85f : 00                    	db %00000000
                             ; char 12
d860 : 00                    	db %00000000
d861 : 00                    	db %00000000
d862 : 00                    	db %00000000
d863 : f0                    	db %11110000
d864 : f0                    	db %11110000
d865 : 30                    	db %00110000
d866 : 30                    	db %00110000
d867 : 30                    	db %00110000
                             ; char 13
d868 : 00                    	db %00000000
d869 : 00                    	db %00000000
d86a : 00                    	db %00000000
d86b : 3c                    	db %00111100
d86c : 3c                    	db %00111100
d86d : 30                    	db %00110000
d86e : 30                    	db %00110000
d86f : 30                    	db %00110000
                             ; char 14
d870 : 30                    	db %00110000
d871 : 30                    	db %00110000
d872 : 30                    	db %00110000
d873 : 3c                    	db %00111100
d874 : 3c                    	db %00111100
d875 : 00                    	db %00000000
d876 : 00                    	db %00000000
d877 : 00                    	db %00000000
                             ; char 15
d878 : 30                    	db %00110000
d879 : 30                    	db %00110000
d87a : 30                    	db %00110000
d87b : fc                    	db %11111100
d87c : fc                    	db %11111100
d87d : 30                    	db %00110000
d87e : 30                    	db %00110000
d87f : 30                    	db %00110000
                             ; char 16
d880 : fc                    	db %11111100
d881 : fc                    	db %11111100
d882 : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank0.s -----------------------------------

d883 : 00                    	db %00000000
d884 : 00                    	db %00000000
d885 : 00                    	db %00000000
d886 : 00                    	db %00000000
d887 : 00                    	db %00000000
                             ; char 17
d888 : 00                    	db %00000000
d889 : 00                    	db %00000000
d88a : fc                    	db %11111100
d88b : fc                    	db %11111100
d88c : 00                    	db %00000000
d88d : 00                    	db %00000000
d88e : 00                    	db %00000000
d88f : 00                    	db %00000000
                             ; char 18
d890 : 00                    	db %00000000
d891 : 00                    	db %00000000
d892 : 00                    	db %00000000
d893 : fc                    	db %11111100
d894 : fc                    	db %11111100
d895 : 00                    	db %00000000
d896 : 00                    	db %00000000
d897 : 00                    	db %00000000
                             ; char 19
d898 : 00                    	db %00000000
d899 : 00                    	db %00000000
d89a : 00                    	db %00000000
d89b : 00                    	db %00000000
d89c : fc                    	db %11111100
d89d : fc                    	db %11111100
d89e : 00                    	db %00000000
d89f : 00                    	db %00000000
                             ; char 20
d8a0 : 00                    	db %00000000
d8a1 : 00                    	db %00000000
d8a2 : 00                    	db %00000000
d8a3 : 00                    	db %00000000
d8a4 : 00                    	db %00000000
d8a5 : 00                    	db %00000000
d8a6 : fc                    	db %11111100
d8a7 : fc                    	db %11111100
                             ; char 21
d8a8 : 30                    	db %00110000
d8a9 : 30                    	db %00110000
d8aa : 30                    	db %00110000
d8ab : 3c                    	db %00111100
d8ac : 3c                    	db %00111100
d8ad : 30                    	db %00110000
d8ae : 30                    	db %00110000
d8af : 30                    	db %00110000
                             ; char 22
d8b0 : 30                    	db %00110000
d8b1 : 30                    	db %00110000
d8b2 : 30                    	db %00110000
d8b3 : f0                    	db %11110000
d8b4 : f0                    	db %11110000
d8b5 : 30                    	db %00110000
d8b6 : 30                    	db %00110000
d8b7 : 30                    	db %00110000
                             ; char 23
d8b8 : 30                    	db %00110000
d8b9 : 30                    	db %00110000
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank0.s -----------------------------------

d8ba : 30                    	db %00110000
d8bb : fc                    	db %11111100
d8bc : fc                    	db %11111100
d8bd : 00                    	db %00000000
d8be : 00                    	db %00000000
d8bf : 00                    	db %00000000
                             ; char 24
d8c0 : 00                    	db %00000000
d8c1 : 00                    	db %00000000
d8c2 : 00                    	db %00000000
d8c3 : fc                    	db %11111100
d8c4 : fc                    	db %11111100
d8c5 : 30                    	db %00110000
d8c6 : 30                    	db %00110000
d8c7 : 30                    	db %00110000
                             ; char 25
d8c8 : 30                    	db %00110000
d8c9 : 30                    	db %00110000
d8ca : 30                    	db %00110000
d8cb : 30                    	db %00110000
d8cc : 30                    	db %00110000
d8cd : 30                    	db %00110000
d8ce : 30                    	db %00110000
d8cf : 30                    	db %00110000
                             ; char 26
d8d0 : 08                    	db %00001000
d8d1 : 30                    	db %00110000
d8d2 : c0                    	db %11000000
d8d3 : 30                    	db %00110000
d8d4 : 08                    	db %00001000
d8d5 : 00                    	db %00000000
d8d6 : f8                    	db %11111000
d8d7 : 00                    	db %00000000
                             ; char 27
d8d8 : 80                    	db %10000000
d8d9 : 60                    	db %01100000
d8da : 18                    	db %00011000
d8db : 60                    	db %01100000
d8dc : 80                    	db %10000000
d8dd : 00                    	db %00000000
d8de : f8                    	db %11111000
d8df : 00                    	db %00000000
                             ; char 28
d8e0 : 00                    	db %00000000
d8e1 : 00                    	db %00000000
d8e2 : f8                    	db %11111000
d8e3 : 50                    	db %01010000
d8e4 : 50                    	db %01010000
d8e5 : 50                    	db %01010000
d8e6 : 98                    	db %10011000
d8e7 : 00                    	db %00000000
                             ; char 29
d8e8 : 10                    	db %00010000
d8e9 : 10                    	db %00010000
d8ea : f8                    	db %11111000
d8eb : 20                    	db %00100000
d8ec : f8                    	db %11111000
d8ed : 40                    	db %01000000
d8ee : 40                    	db %01000000
d8ef : 00                    	db %00000000
                             ; char 30
d8f0 : 30                    	db %00110000
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank0.s -----------------------------------

d8f1 : 48                    	db %01001000
d8f2 : 40                    	db %01000000
d8f3 : e0                    	db %11100000
d8f4 : 40                    	db %01000000
d8f5 : 48                    	db %01001000
d8f6 : b0                    	db %10110000
d8f7 : 00                    	db %00000000
                             ; char 31
d8f8 : 00                    	db %00000000
d8f9 : 00                    	db %00000000
d8fa : 00                    	db %00000000
d8fb : 20                    	db %00100000
d8fc : 00                    	db %00000000
d8fd : 00                    	db %00000000
d8fe : 00                    	db %00000000
d8ff : 00                    	db %00000000
                             ; char 32
d900 : 00                    	db %00000000
d901 : 00                    	db %00000000
d902 : 00                    	db %00000000
d903 : 00                    	db %00000000
d904 : 00                    	db %00000000
d905 : 00                    	db %00000000
d906 : 00                    	db %00000000
d907 : 00                    	db %00000000
                             ; char 33
d908 : 20                    	db %00100000
d909 : 20                    	db %00100000
d90a : 20                    	db %00100000
d90b : 20                    	db %00100000
d90c : 20                    	db %00100000
d90d : 00                    	db %00000000
d90e : 20                    	db %00100000
d90f : 00                    	db %00000000
                             ; char 34
d910 : 50                    	db %01010000
d911 : 50                    	db %01010000
d912 : 50                    	db %01010000
d913 : 00                    	db %00000000
d914 : 00                    	db %00000000
d915 : 00                    	db %00000000
d916 : 00                    	db %00000000
d917 : 00                    	db %00000000
                             ; char 35
d918 : 50                    	db %01010000
d919 : 50                    	db %01010000
d91a : f8                    	db %11111000
d91b : 50                    	db %01010000
d91c : f8                    	db %11111000
d91d : 50                    	db %01010000
d91e : 50                    	db %01010000
d91f : 00                    	db %00000000
                             ; char 36
d920 : 20                    	db %00100000
d921 : 78                    	db %01111000
d922 : a0                    	db %10100000
d923 : 70                    	db %01110000
d924 : 28                    	db %00101000
d925 : f0                    	db %11110000
d926 : 20                    	db %00100000
d927 : 00                    	db %00000000
                             ; char 37
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank0.s -----------------------------------

d928 : c0                    	db %11000000
d929 : c8                    	db %11001000
d92a : 10                    	db %00010000
d92b : 20                    	db %00100000
d92c : 40                    	db %01000000
d92d : 98                    	db %10011000
d92e : 18                    	db %00011000
d92f : 00                    	db %00000000
                             ; char 38
d930 : 40                    	db %01000000
d931 : a0                    	db %10100000
d932 : a0                    	db %10100000
d933 : 40                    	db %01000000
d934 : a8                    	db %10101000
d935 : 90                    	db %10010000
d936 : 68                    	db %01101000
d937 : 00                    	db %00000000
                             ; char 39
d938 : 20                    	db %00100000
d939 : 20                    	db %00100000
d93a : 20                    	db %00100000
d93b : 00                    	db %00000000
d93c : 00                    	db %00000000
d93d : 00                    	db %00000000
d93e : 00                    	db %00000000
d93f : 00                    	db %00000000
                             ; char 40
d940 : 20                    	db %00100000
d941 : 40                    	db %01000000
d942 : 80                    	db %10000000
d943 : 80                    	db %10000000
d944 : 80                    	db %10000000
d945 : 40                    	db %01000000
d946 : 20                    	db %00100000
d947 : 00                    	db %00000000
                             ; char 41
d948 : 20                    	db %00100000
d949 : 10                    	db %00010000
d94a : 08                    	db %00001000
d94b : 08                    	db %00001000
d94c : 08                    	db %00001000
d94d : 10                    	db %00010000
d94e : 20                    	db %00100000
d94f : 00                    	db %00000000
                             ; char 42
d950 : 20                    	db %00100000
d951 : a8                    	db %10101000
d952 : 70                    	db %01110000
d953 : 20                    	db %00100000
d954 : 70                    	db %01110000
d955 : a8                    	db %10101000
d956 : 20                    	db %00100000
d957 : 00                    	db %00000000
                             ; char 43
d958 : 00                    	db %00000000
d959 : 20                    	db %00100000
d95a : 20                    	db %00100000
d95b : f8                    	db %11111000
d95c : 20                    	db %00100000
d95d : 20                    	db %00100000
d95e : 00                    	db %00000000
d95f : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank0.s -----------------------------------

                             ; char 44
d960 : 00                    	db %00000000
d961 : 00                    	db %00000000
d962 : 00                    	db %00000000
d963 : 00                    	db %00000000
d964 : 00                    	db %00000000
d965 : 20                    	db %00100000
d966 : 20                    	db %00100000
d967 : 40                    	db %01000000
                             ; char 45
d968 : 00                    	db %00000000
d969 : 00                    	db %00000000
d96a : 00                    	db %00000000
d96b : f8                    	db %11111000
d96c : 00                    	db %00000000
d96d : 00                    	db %00000000
d96e : 00                    	db %00000000
d96f : 00                    	db %00000000
                             ; char 46
d970 : 00                    	db %00000000
d971 : 00                    	db %00000000
d972 : 00                    	db %00000000
d973 : 00                    	db %00000000
d974 : 00                    	db %00000000
d975 : 10                    	db %00010000
d976 : 00                    	db %00000000
d977 : 00                    	db %00000000
                             ; char 47
d978 : 00                    	db %00000000
d979 : 08                    	db %00001000
d97a : 10                    	db %00010000
d97b : 20                    	db %00100000
d97c : 40                    	db %01000000
d97d : 80                    	db %10000000
d97e : 00                    	db %00000000
d97f : 00                    	db %00000000
                             ; char 48
d980 : 70                    	db %01110000
d981 : 88                    	db %10001000
d982 : 98                    	db %10011000
d983 : a8                    	db %10101000
d984 : c8                    	db %11001000
d985 : 88                    	db %10001000
d986 : 70                    	db %01110000
d987 : 00                    	db %00000000
                             ; char 49
d988 : 20                    	db %00100000
d989 : 60                    	db %01100000
d98a : 20                    	db %00100000
d98b : 20                    	db %00100000
d98c : 20                    	db %00100000
d98d : 20                    	db %00100000
d98e : 70                    	db %01110000
d98f : 00                    	db %00000000
                             ; char 50
d990 : 70                    	db %01110000
d991 : 88                    	db %10001000
d992 : 08                    	db %00001000
d993 : 10                    	db %00010000
d994 : 20                    	db %00100000
d995 : 40                    	db %01000000
d996 : f8                    	db %11111000
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank0.s -----------------------------------

d997 : 00                    	db %00000000
                             ; char 51
d998 : f8                    	db %11111000
d999 : 08                    	db %00001000
d99a : 10                    	db %00010000
d99b : 30                    	db %00110000
d99c : 08                    	db %00001000
d99d : 88                    	db %10001000
d99e : 70                    	db %01110000
d99f : 00                    	db %00000000
                             ; char 52
d9a0 : 10                    	db %00010000
d9a1 : 30                    	db %00110000
d9a2 : 50                    	db %01010000
d9a3 : 90                    	db %10010000
d9a4 : f8                    	db %11111000
d9a5 : 10                    	db %00010000
d9a6 : 10                    	db %00010000
d9a7 : 00                    	db %00000000
                             ; char 53
d9a8 : f8                    	db %11111000
d9a9 : 80                    	db %10000000
d9aa : f0                    	db %11110000
d9ab : 08                    	db %00001000
d9ac : 08                    	db %00001000
d9ad : 88                    	db %10001000
d9ae : 70                    	db %01110000
d9af : 00                    	db %00000000
                             ; char 54
d9b0 : 30                    	db %00110000
d9b1 : 40                    	db %01000000
d9b2 : 80                    	db %10000000
d9b3 : f0                    	db %11110000
d9b4 : 88                    	db %10001000
d9b5 : 88                    	db %10001000
d9b6 : 70                    	db %01110000
d9b7 : 00                    	db %00000000
                             ; char 55
d9b8 : f8                    	db %11111000
d9b9 : 08                    	db %00001000
d9ba : 10                    	db %00010000
d9bb : 20                    	db %00100000
d9bc : 40                    	db %01000000
d9bd : 40                    	db %01000000
d9be : 40                    	db %01000000
d9bf : 00                    	db %00000000
                             ; char 56
d9c0 : 70                    	db %01110000
d9c1 : 88                    	db %10001000
d9c2 : 88                    	db %10001000
d9c3 : 70                    	db %01110000
d9c4 : 88                    	db %10001000
d9c5 : 88                    	db %10001000
d9c6 : 70                    	db %01110000
d9c7 : 00                    	db %00000000
                             ; char 57
d9c8 : 70                    	db %01110000
d9c9 : 88                    	db %10001000
d9ca : 88                    	db %10001000
d9cb : 78                    	db %01111000
d9cc : 08                    	db %00001000
d9cd : 10                    	db %00010000
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------------------- bank0.s -----------------------------------

d9ce : 60                    	db %01100000
d9cf : 00                    	db %00000000
                             ; char 58
d9d0 : 00                    	db %00000000
d9d1 : 00                    	db %00000000
d9d2 : 20                    	db %00100000
d9d3 : 00                    	db %00000000
d9d4 : 00                    	db %00000000
d9d5 : 20                    	db %00100000
d9d6 : 00                    	db %00000000
d9d7 : 00                    	db %00000000
                             ; char 59
d9d8 : 00                    	db %00000000
d9d9 : 00                    	db %00000000
d9da : 20                    	db %00100000
d9db : 00                    	db %00000000
d9dc : 00                    	db %00000000
d9dd : 20                    	db %00100000
d9de : 20                    	db %00100000
d9df : 40                    	db %01000000
                             ; char 60
d9e0 : 10                    	db %00010000
d9e1 : 20                    	db %00100000
d9e2 : 40                    	db %01000000
d9e3 : 80                    	db %10000000
d9e4 : 40                    	db %01000000
d9e5 : 20                    	db %00100000
d9e6 : 10                    	db %00010000
d9e7 : 00                    	db %00000000
                             ; char 61
d9e8 : 00                    	db %00000000
d9e9 : 00                    	db %00000000
d9ea : f8                    	db %11111000
d9eb : 00                    	db %00000000
d9ec : f8                    	db %11111000
d9ed : 00                    	db %00000000
d9ee : 00                    	db %00000000
d9ef : 00                    	db %00000000
                             ; char 62
d9f0 : 40                    	db %01000000
d9f1 : 20                    	db %00100000
d9f2 : 10                    	db %00010000
d9f3 : 08                    	db %00001000
d9f4 : 10                    	db %00010000
d9f5 : 20                    	db %00100000
d9f6 : 40                    	db %01000000
d9f7 : 00                    	db %00000000
                             ; char 63
d9f8 : 70                    	db %01110000
d9f9 : 88                    	db %10001000
d9fa : 10                    	db %00010000
d9fb : 20                    	db %00100000
d9fc : 20                    	db %00100000
d9fd : 00                    	db %00000000
d9fe : 20                    	db %00100000
d9ff : 00                    	db %00000000
                             ; char 64
da00 : 70                    	db %01110000
da01 : 88                    	db %10001000
da02 : a8                    	db %10101000
da03 : b8                    	db %10111000
da04 : b0                    	db %10110000
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------------------- bank0.s -----------------------------------

da05 : 80                    	db %10000000
da06 : 78                    	db %01111000
da07 : 00                    	db %00000000
da08 :                       vdp_font_a
                             ; char 65
da08 : 20                    	db %00100000
da09 : 50                    	db %01010000
da0a : 88                    	db %10001000
da0b : 88                    	db %10001000
da0c : f8                    	db %11111000
da0d : 88                    	db %10001000
da0e : 88                    	db %10001000
da0f : 00                    	db %00000000
                             ; char 66
da10 : f0                    	db %11110000
da11 : 88                    	db %10001000
da12 : 88                    	db %10001000
da13 : f0                    	db %11110000
da14 : 88                    	db %10001000
da15 : 88                    	db %10001000
da16 : f0                    	db %11110000
da17 : 00                    	db %00000000
                             ; char 67
da18 : 70                    	db %01110000
da19 : 88                    	db %10001000
da1a : 80                    	db %10000000
da1b : 80                    	db %10000000
da1c : 80                    	db %10000000
da1d : 88                    	db %10001000
da1e : 70                    	db %01110000
da1f : 00                    	db %00000000
                             ; char 68
da20 : f0                    	db %11110000
da21 : 88                    	db %10001000
da22 : 88                    	db %10001000
da23 : 88                    	db %10001000
da24 : 88                    	db %10001000
da25 : 88                    	db %10001000
da26 : f0                    	db %11110000
da27 : 00                    	db %00000000
                             ; char 69
da28 : f8                    	db %11111000
da29 : 80                    	db %10000000
da2a : 80                    	db %10000000
da2b : f0                    	db %11110000
da2c : 80                    	db %10000000
da2d : 80                    	db %10000000
da2e : f8                    	db %11111000
da2f : 00                    	db %00000000
                             ; char 70
da30 : f8                    	db %11111000
da31 : 80                    	db %10000000
da32 : 80                    	db %10000000
da33 : f0                    	db %11110000
da34 : 80                    	db %10000000
da35 : 80                    	db %10000000
da36 : 80                    	db %10000000
da37 : 00                    	db %00000000
                             ; char 71
da38 : 78                    	db %01111000
da39 : 80                    	db %10000000
da3a : 80                    	db %10000000
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------------------- bank0.s -----------------------------------

da3b : 80                    	db %10000000
da3c : 98                    	db %10011000
da3d : 88                    	db %10001000
da3e : 78                    	db %01111000
da3f : 00                    	db %00000000
                             ; char 72
da40 : 88                    	db %10001000
da41 : 88                    	db %10001000
da42 : 88                    	db %10001000
da43 : f8                    	db %11111000
da44 : 88                    	db %10001000
da45 : 88                    	db %10001000
da46 : 88                    	db %10001000
da47 : 00                    	db %00000000
                             ; char 73
da48 : 70                    	db %01110000
da49 : 20                    	db %00100000
da4a : 20                    	db %00100000
da4b : 20                    	db %00100000
da4c : 20                    	db %00100000
da4d : 20                    	db %00100000
da4e : 70                    	db %01110000
da4f : 00                    	db %00000000
                             ; char 74
da50 : 08                    	db %00001000
da51 : 08                    	db %00001000
da52 : 08                    	db %00001000
da53 : 08                    	db %00001000
da54 : 08                    	db %00001000
da55 : 88                    	db %10001000
da56 : 70                    	db %01110000
da57 : 00                    	db %00000000
                             ; char 75
da58 : 88                    	db %10001000
da59 : 90                    	db %10010000
da5a : a0                    	db %10100000
da5b : c0                    	db %11000000
da5c : a0                    	db %10100000
da5d : 90                    	db %10010000
da5e : 88                    	db %10001000
da5f : 00                    	db %00000000
                             ; char 76
da60 : 80                    	db %10000000
da61 : 80                    	db %10000000
da62 : 80                    	db %10000000
da63 : 80                    	db %10000000
da64 : 80                    	db %10000000
da65 : 80                    	db %10000000
da66 : f8                    	db %11111000
da67 : 00                    	db %00000000
                             ; char 77
da68 : 88                    	db %10001000
da69 : d8                    	db %11011000
da6a : a8                    	db %10101000
da6b : a8                    	db %10101000
da6c : 88                    	db %10001000
da6d : 88                    	db %10001000
da6e : 88                    	db %10001000
da6f : 00                    	db %00000000
                             ; char 78
da70 : 88                    	db %10001000
da71 : 88                    	db %10001000
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------------------- bank0.s -----------------------------------

da72 : c8                    	db %11001000
da73 : a8                    	db %10101000
da74 : 98                    	db %10011000
da75 : 88                    	db %10001000
da76 : 88                    	db %10001000
da77 : 00                    	db %00000000
                             ; char 79
da78 : 70                    	db %01110000
da79 : 88                    	db %10001000
da7a : 88                    	db %10001000
da7b : 88                    	db %10001000
da7c : 88                    	db %10001000
da7d : 88                    	db %10001000
da7e : 70                    	db %01110000
da7f : 00                    	db %00000000
                             ; char 80
da80 : f0                    	db %11110000
da81 : 88                    	db %10001000
da82 : 88                    	db %10001000
da83 : f0                    	db %11110000
da84 : 80                    	db %10000000
da85 : 80                    	db %10000000
da86 : 80                    	db %10000000
da87 : 00                    	db %00000000
                             ; char 81
da88 : 70                    	db %01110000
da89 : 88                    	db %10001000
da8a : 88                    	db %10001000
da8b : 88                    	db %10001000
da8c : a8                    	db %10101000
da8d : 90                    	db %10010000
da8e : 68                    	db %01101000
da8f : 00                    	db %00000000
                             ; char 82
da90 : f0                    	db %11110000
da91 : 88                    	db %10001000
da92 : 88                    	db %10001000
da93 : f0                    	db %11110000
da94 : a0                    	db %10100000
da95 : 90                    	db %10010000
da96 : 88                    	db %10001000
da97 : 00                    	db %00000000
                             ; char 83
da98 : 70                    	db %01110000
da99 : 88                    	db %10001000
da9a : 80                    	db %10000000
da9b : 70                    	db %01110000
da9c : 08                    	db %00001000
da9d : 88                    	db %10001000
da9e : 70                    	db %01110000
da9f : 00                    	db %00000000
                             ; char 84
daa0 : f8                    	db %11111000
daa1 : 20                    	db %00100000
daa2 : 20                    	db %00100000
daa3 : 20                    	db %00100000
daa4 : 20                    	db %00100000
daa5 : 20                    	db %00100000
daa6 : 20                    	db %00100000
daa7 : 00                    	db %00000000
                             ; char 85
daa8 : 88                    	db %10001000
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------------------- bank0.s -----------------------------------

daa9 : 88                    	db %10001000
daaa : 88                    	db %10001000
daab : 88                    	db %10001000
daac : 88                    	db %10001000
daad : 88                    	db %10001000
daae : 70                    	db %01110000
daaf : 00                    	db %00000000
                             ; char 86
dab0 : 88                    	db %10001000
dab1 : 88                    	db %10001000
dab2 : 88                    	db %10001000
dab3 : 88                    	db %10001000
dab4 : 88                    	db %10001000
dab5 : 50                    	db %01010000
dab6 : 20                    	db %00100000
dab7 : 00                    	db %00000000
                             ; char 87
dab8 : 88                    	db %10001000
dab9 : 88                    	db %10001000
daba : 88                    	db %10001000
dabb : a8                    	db %10101000
dabc : a8                    	db %10101000
dabd : d8                    	db %11011000
dabe : 88                    	db %10001000
dabf : 00                    	db %00000000
                             ; char 88
dac0 : 88                    	db %10001000
dac1 : 88                    	db %10001000
dac2 : 50                    	db %01010000
dac3 : 20                    	db %00100000
dac4 : 50                    	db %01010000
dac5 : 88                    	db %10001000
dac6 : 88                    	db %10001000
dac7 : 00                    	db %00000000
                             ; char 89
dac8 : 88                    	db %10001000
dac9 : 88                    	db %10001000
daca : 50                    	db %01010000
dacb : 20                    	db %00100000
dacc : 20                    	db %00100000
dacd : 20                    	db %00100000
dace : 20                    	db %00100000
dacf : 00                    	db %00000000
                             ; char 90
dad0 : f8                    	db %11111000
dad1 : 08                    	db %00001000
dad2 : 10                    	db %00010000
dad3 : 20                    	db %00100000
dad4 : 40                    	db %01000000
dad5 : 80                    	db %10000000
dad6 : f8                    	db %11111000
dad7 : 00                    	db %00000000
                             ; char 91
dad8 : 78                    	db %01111000
dad9 : 40                    	db %01000000
dada : 40                    	db %01000000
dadb : 40                    	db %01000000
dadc : 40                    	db %01000000
dadd : 40                    	db %01000000
dade : 78                    	db %01111000
dadf : 00                    	db %00000000
                             ; char 92
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------------------- bank0.s -----------------------------------

dae0 : 00                    	db %00000000
dae1 : 80                    	db %10000000
dae2 : 40                    	db %01000000
dae3 : 20                    	db %00100000
dae4 : 10                    	db %00010000
dae5 : 08                    	db %00001000
dae6 : 00                    	db %00000000
dae7 : 00                    	db %00000000
                             ; char 93
dae8 : f0                    	db %11110000
dae9 : 10                    	db %00010000
daea : 10                    	db %00010000
daeb : 10                    	db %00010000
daec : 10                    	db %00010000
daed : 10                    	db %00010000
daee : f0                    	db %11110000
daef : 00                    	db %00000000
                             ; char 94
daf0 : 20                    	db %00100000
daf1 : 50                    	db %01010000
daf2 : a8                    	db %10101000
daf3 : 20                    	db %00100000
daf4 : 20                    	db %00100000
daf5 : 20                    	db %00100000
daf6 : 20                    	db %00100000
daf7 : 00                    	db %00000000
                             ; char 95
daf8 : 00                    	db %00000000
daf9 : 00                    	db %00000000
dafa : 00                    	db %00000000
dafb : 00                    	db %00000000
dafc : 00                    	db %00000000
dafd : 00                    	db %00000000
dafe : f8                    	db %11111000
daff : 00                    	db %00000000
                             ; char 96
db00 : 38                    	db %00111000
db01 : 40                    	db %01000000
db02 : 40                    	db %01000000
db03 : 40                    	db %01000000
db04 : f0                    	db %11110000
db05 : 40                    	db %01000000
db06 : f8                    	db %11111000
db07 : 00                    	db %00000000
                             ; char 97
db08 : 00                    	db %00000000
db09 : 00                    	db %00000000
db0a : 70                    	db %01110000
db0b : 08                    	db %00001000
db0c : 78                    	db %01111000
db0d : 88                    	db %10001000
db0e : 78                    	db %01111000
db0f : 00                    	db %00000000
                             ; char 98
db10 : 80                    	db %10000000
db11 : 80                    	db %10000000
db12 : f0                    	db %11110000
db13 : 88                    	db %10001000
db14 : 88                    	db %10001000
db15 : 88                    	db %10001000
db16 : f0                    	db %11110000
db17 : 00                    	db %00000000
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------------------- bank0.s -----------------------------------

                             ; char 99
db18 : 00                    	db %00000000
db19 : 00                    	db %00000000
db1a : 78                    	db %01111000
db1b : 80                    	db %10000000
db1c : 80                    	db %10000000
db1d : 80                    	db %10000000
db1e : 78                    	db %01111000
db1f : 00                    	db %00000000
                             ; char 100
db20 : 08                    	db %00001000
db21 : 08                    	db %00001000
db22 : 78                    	db %01111000
db23 : 88                    	db %10001000
db24 : 88                    	db %10001000
db25 : 88                    	db %10001000
db26 : 78                    	db %01111000
db27 : 00                    	db %00000000
                             ; char 101
db28 : 00                    	db %00000000
db29 : 00                    	db %00000000
db2a : 70                    	db %01110000
db2b : 88                    	db %10001000
db2c : f8                    	db %11111000
db2d : 80                    	db %10000000
db2e : 78                    	db %01111000
db2f : 00                    	db %00000000
                             ; char 102
db30 : 30                    	db %00110000
db31 : 48                    	db %01001000
db32 : 40                    	db %01000000
db33 : f0                    	db %11110000
db34 : 40                    	db %01000000
db35 : 40                    	db %01000000
db36 : 40                    	db %01000000
db37 : 00                    	db %00000000
                             ; char 103
db38 : 00                    	db %00000000
db39 : 00                    	db %00000000
db3a : 70                    	db %01110000
db3b : 88                    	db %10001000
db3c : 88                    	db %10001000
db3d : 78                    	db %01111000
db3e : 08                    	db %00001000
db3f : 70                    	db %01110000
                             ; char 104
db40 : 80                    	db %10000000
db41 : 80                    	db %10000000
db42 : f0                    	db %11110000
db43 : 88                    	db %10001000
db44 : 88                    	db %10001000
db45 : 88                    	db %10001000
db46 : 88                    	db %10001000
db47 : 00                    	db %00000000
                             ; char 105
db48 : 20                    	db %00100000
db49 : 00                    	db %00000000
db4a : 60                    	db %01100000
db4b : 20                    	db %00100000
db4c : 20                    	db %00100000
db4d : 20                    	db %00100000
db4e : 70                    	db %01110000
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------------------- bank0.s -----------------------------------

db4f : 00                    	db %00000000
                             ; char 106
db50 : 10                    	db %00010000
db51 : 00                    	db %00000000
db52 : 30                    	db %00110000
db53 : 10                    	db %00010000
db54 : 10                    	db %00010000
db55 : 10                    	db %00010000
db56 : 90                    	db %10010000
db57 : 60                    	db %01100000
                             ; char 107
db58 : 80                    	db %10000000
db59 : 80                    	db %10000000
db5a : 88                    	db %10001000
db5b : 90                    	db %10010000
db5c : e0                    	db %11100000
db5d : 90                    	db %10010000
db5e : 88                    	db %10001000
db5f : 00                    	db %00000000
                             ; char 108
db60 : 60                    	db %01100000
db61 : 20                    	db %00100000
db62 : 20                    	db %00100000
db63 : 20                    	db %00100000
db64 : 20                    	db %00100000
db65 : 20                    	db %00100000
db66 : 70                    	db %01110000
db67 : 00                    	db %00000000
                             ; char 109
db68 : 00                    	db %00000000
db69 : 00                    	db %00000000
db6a : d8                    	db %11011000
db6b : a8                    	db %10101000
db6c : a8                    	db %10101000
db6d : a8                    	db %10101000
db6e : 88                    	db %10001000
db6f : 00                    	db %00000000
                             ; char 110
db70 : 00                    	db %00000000
db71 : 00                    	db %00000000
db72 : f0                    	db %11110000
db73 : 88                    	db %10001000
db74 : 88                    	db %10001000
db75 : 88                    	db %10001000
db76 : 88                    	db %10001000
db77 : 00                    	db %00000000
                             ; char 111
db78 : 00                    	db %00000000
db79 : 00                    	db %00000000
db7a : 70                    	db %01110000
db7b : 88                    	db %10001000
db7c : 88                    	db %10001000
db7d : 88                    	db %10001000
db7e : 70                    	db %01110000
db7f : 00                    	db %00000000
                             ; char 112
db80 : 00                    	db %00000000
db81 : 00                    	db %00000000
db82 : f0                    	db %11110000
db83 : 88                    	db %10001000
db84 : 88                    	db %10001000
db85 : f0                    	db %11110000
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------------------- bank0.s -----------------------------------

db86 : 80                    	db %10000000
db87 : 80                    	db %10000000
                             ; char 113
db88 : 00                    	db %00000000
db89 : 00                    	db %00000000
db8a : 78                    	db %01111000
db8b : 88                    	db %10001000
db8c : 88                    	db %10001000
db8d : 78                    	db %01111000
db8e : 08                    	db %00001000
db8f : 08                    	db %00001000
                             ; char 114
db90 : 00                    	db %00000000
db91 : 00                    	db %00000000
db92 : b8                    	db %10111000
db93 : c0                    	db %11000000
db94 : 80                    	db %10000000
db95 : 80                    	db %10000000
db96 : 80                    	db %10000000
db97 : 00                    	db %00000000
                             ; char 115
db98 : 00                    	db %00000000
db99 : 00                    	db %00000000
db9a : 78                    	db %01111000
db9b : 80                    	db %10000000
db9c : 70                    	db %01110000
db9d : 08                    	db %00001000
db9e : f0                    	db %11110000
db9f : 00                    	db %00000000
                             ; char 116
dba0 : 40                    	db %01000000
dba1 : 40                    	db %01000000
dba2 : f0                    	db %11110000
dba3 : 40                    	db %01000000
dba4 : 40                    	db %01000000
dba5 : 48                    	db %01001000
dba6 : 30                    	db %00110000
dba7 : 00                    	db %00000000
                             ; char 117
dba8 : 00                    	db %00000000
dba9 : 00                    	db %00000000
dbaa : 88                    	db %10001000
dbab : 88                    	db %10001000
dbac : 88                    	db %10001000
dbad : 98                    	db %10011000
dbae : 68                    	db %01101000
dbaf : 00                    	db %00000000
                             ; char 118
dbb0 : 00                    	db %00000000
dbb1 : 00                    	db %00000000
dbb2 : 88                    	db %10001000
dbb3 : 88                    	db %10001000
dbb4 : 88                    	db %10001000
dbb5 : 50                    	db %01010000
dbb6 : 20                    	db %00100000
dbb7 : 00                    	db %00000000
                             ; char 119
dbb8 : 00                    	db %00000000
dbb9 : 00                    	db %00000000
dbba : 88                    	db %10001000
dbbb : 88                    	db %10001000
dbbc : a8                    	db %10101000
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------------------- bank0.s -----------------------------------

dbbd : a8                    	db %10101000
dbbe : d8                    	db %11011000
dbbf : 00                    	db %00000000
                             ; char 120
dbc0 : 00                    	db %00000000
dbc1 : 00                    	db %00000000
dbc2 : 88                    	db %10001000
dbc3 : 50                    	db %01010000
dbc4 : 20                    	db %00100000
dbc5 : 50                    	db %01010000
dbc6 : 88                    	db %10001000
dbc7 : 00                    	db %00000000
                             ; char 121
dbc8 : 00                    	db %00000000
dbc9 : 00                    	db %00000000
dbca : 88                    	db %10001000
dbcb : 88                    	db %10001000
dbcc : 88                    	db %10001000
dbcd : 78                    	db %01111000
dbce : 08                    	db %00001000
dbcf : 70                    	db %01110000
                             ; char 122
dbd0 : 00                    	db %00000000
dbd1 : 00                    	db %00000000
dbd2 : f8                    	db %11111000
dbd3 : 10                    	db %00010000
dbd4 : 20                    	db %00100000
dbd5 : 40                    	db %01000000
dbd6 : f8                    	db %11111000
dbd7 : 00                    	db %00000000
                             ; char 123
dbd8 : 38                    	db %00111000
dbd9 : 60                    	db %01100000
dbda : 60                    	db %01100000
dbdb : c0                    	db %11000000
dbdc : 60                    	db %01100000
dbdd : 60                    	db %01100000
dbde : 38                    	db %00111000
dbdf : 00                    	db %00000000
                             ; char 124
dbe0 : 20                    	db %00100000
dbe1 : 20                    	db %00100000
dbe2 : 20                    	db %00100000
dbe3 : 20                    	db %00100000
dbe4 : 20                    	db %00100000
dbe5 : 20                    	db %00100000
dbe6 : 20                    	db %00100000
dbe7 : 20                    	db %00100000
                             ; char 125
dbe8 : e0                    	db %11100000
dbe9 : 30                    	db %00110000
dbea : 30                    	db %00110000
dbeb : 18                    	db %00011000
dbec : 30                    	db %00110000
dbed : 30                    	db %00110000
dbee : e0                    	db %11100000
dbef : 00                    	db %00000000
                             ; char 126
dbf0 : 00                    	db %00000000
dbf1 : 00                    	db %00000000
dbf2 : 40                    	db %01000000
dbf3 : a8                    	db %10101000
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------------------- bank0.s -----------------------------------

dbf4 : 10                    	db %00010000
dbf5 : 00                    	db %00000000
dbf6 : 00                    	db %00000000
dbf7 : 00                    	db %00000000
                             ; char 127
dbf8 : f8                    	db %11111000
dbf9 : f8                    	db %11111000
dbfa : f8                    	db %11111000
dbfb : f8                    	db %11111000
dbfc : f8                    	db %11111000
dbfd : f8                    	db %11111000
dbfe : f8                    	db %11111000
dbff : 00                    	db %00000000
                             	
                             	
                             
                             
                             
                             ;****************************************
                             ;* vdp_init
                             ;* Initialise VDP
                             ;* Clears all of VRAM to zero
                             ;****************************************
dc00 :                       vdp_init
dc00 : 20e9dc           [ 6] 	jsr clear_vram
dc03 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_init_mode
                             ;* Initialise VDP  to required mode and addresses
                             ;* Input : Y = Offset in to VDP init table
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dc04 :                       vdp_init_mode
dc04 : 78               [ 2] 	sei
dc05 : be70dd           [ 4] 	ldx vdp_base_table+0,y		; Get delay
dc08 : 860a             [ 3] 	stx vdp_delay
                             
dc0a : a900             [ 2] 	lda	#0						; Do R0
dc0c : be71dd           [ 4] 	ldx vdp_base_table+1,y		; Get R0 value
dc0f : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
dc12 : a901             [ 2] 	lda	#1						; Do R1
dc14 : be72dd           [ 4] 	ldx vdp_base_table+2,y		; Get R1 value
dc17 : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
dc1a : be73dd           [ 4] 	ldx vdp_base_table+3,y		; Get name table low add
dc1d : 860b             [ 3] 	stx vdp_base+vdp_addr_nme	; Save in vdp_base
dc1f : be74dd           [ 4] 	ldx vdp_base_table+4,y		; Get name table high ad
dc22 : 860c             [ 3] 	stx vdp_base+vdp_addr_nme+1	; Save in vdp_base
dc24 : a902             [ 2] 	lda #2						; Do R2
dc26 : be75dd           [ 4] 	ldx vdp_base_table+5,y		; Get R2 value
dc29 : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
dc2c : be76dd           [ 4] 	ldx vdp_base_table+6,y		; Get col table low addr
dc2f : 860d             [ 3] 	stx vdp_base+vdp_addr_col	; Save in vdp_base
dc31 : be77dd           [ 4] 	ldx vdp_base_table+7,y		; Get col table high add
dc34 : 860e             [ 3] 	stx vdp_base+vdp_addr_col+1	; Save in vdp_base
dc36 : a903             [ 2] 	lda #3						; Do R3
dc38 : be78dd           [ 4] 	ldx vdp_base_table+8,y		; Get R3 value
dc3b : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------------------- bank0.s -----------------------------------

                             
dc3e : be79dd           [ 4] 	ldx vdp_base_table+9,y		; Get pat table low addr
dc41 : 860f             [ 3] 	stx vdp_base+vdp_addr_pat	; Save in vdp_base
dc43 : be7add           [ 4] 	ldx vdp_base_table+10,y		; Get pat table high ad
dc46 : 8610             [ 3] 	stx vdp_base+vdp_addr_pat+1	; Save in vdp_base
dc48 : a904             [ 2] 	lda #4						; Do R4
dc4a : be7bdd           [ 4] 	ldx vdp_base_table+11,y		; Get R4 value
dc4d : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
dc50 : be7cdd           [ 4] 	ldx vdp_base_table+12,y		; Get spr att table low
dc53 : 8611             [ 3] 	stx vdp_base+vdp_addr_spa	; Save in vdp_base
dc55 : be7ddd           [ 4] 	ldx vdp_base_table+13,y		; Get spr att table hig
dc58 : 8612             [ 3] 	stx vdp_base+vdp_addr_spa+1	; Save in vdp_base
dc5a : a905             [ 2] 	lda #5						; Do R5
dc5c : be7edd           [ 4] 	ldx vdp_base_table+14,y		; Get R5 value
dc5f : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
dc62 : be7fdd           [ 4] 	ldx vdp_base_table+15,y		; Get spr pat table low
dc65 : 8613             [ 3] 	stx vdp_base+vdp_addr_spp	; Save in vdp_base
dc67 : be80dd           [ 4] 	ldx vdp_base_table+16,y		; Get spr pat table hig
dc6a : 8614             [ 3] 	stx vdp_base+vdp_addr_spp+1	; Save in vdp_base
dc6c : a906             [ 2] 	lda #6						; Do R6
dc6e : be81dd           [ 4] 	ldx vdp_base_table+17,y		; Get R6 value
dc71 : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             
dc74 : a615             [ 3] 	ldx vdp_base+vdp_bord_col	; Get border colour
dc76 : d005             [ 3] 	bne vdp_init_skip_table		; If not zero (i.e. NV 
dc78 : be82dd           [ 4] 	ldx vdp_base_table+18,y		; Else get R7 value fro
dc7b : 8615             [ 3] 	stx vdp_base+vdp_bord_col	; Save border colour t
dc7d :                       vdp_init_skip_table
dc7d : a907             [ 2] 	lda #7						; Do R7, X contains colour
dc7f : 2050c6           [ 6] 	jsr vdp_wr_reg				; Write X to Reg A
                             	
dc82 : 58               [ 2] 	cli
                             
dc83 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* vdp_set_txt_mode
                             ;* Set up text mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dc84 :                       vdp_set_txt_mode
dc84 : a039             [ 2] 	ldy #vdp_base_table_txt-vdp_base_table
dc86 : 2004dc           [ 6] 	jsr vdp_init_mode
dc89 : 4c2fdd           [ 3] 	jmp init_fonts
                             
                             	
                             ;****************************************
                             ;* vdp_set_g1_mode
                             ;* Set up G1 mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dc8c :                       vdp_set_g1_mode
dc8c : a000             [ 2] 	ldy #vdp_base_table_g1-vdp_base_table
dc8e : 2004dc           [ 6] 	jsr vdp_init_mode
dc91 : 4c2fdd           [ 3] 	jmp init_fonts
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* vdp_set_g2_mode
                             ;* Set up G2 mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dc94 :                       vdp_set_g2_mode
dc94 : a013             [ 2] 	ldy #vdp_base_table_g2-vdp_base_table
dc96 : 2004dc           [ 6] 	jsr vdp_init_mode
dc99 : 4c2fdd           [ 3] 	jmp init_fonts
                             
                             ;****************************************
                             ;* vdp_set_hires
                             ;* Set up HI mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dc9c :                       vdp_set_hires
dc9c : a026             [ 2] 	ldy #vdp_base_table_hi-vdp_base_table
dc9e : 2004dc           [ 6] 	jsr vdp_init_mode
                             	
                             	; No fonts to init but pre-fill name table
                             	; to use all 3 character sets
dca1 : 78               [ 2] 	sei
                             
                             	; Point at name table
dca2 : a60b             [ 3] 	ldx vdp_base+vdp_addr_nme
dca4 : a50c             [ 3] 	lda vdp_base+vdp_addr_nme+1
dca6 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
                             	; set name for 3 pages (768)
dca9 : a200             [ 2] 	ldx #0
dcab : a003             [ 2] 	ldy #3
dcad :                       vdp_set_hires_fill_nme
dcad : 8a               [ 2] 	txa						; Name table is 0..255 for 3 pages
dcae : 2085c6           [ 6] 	jsr vdp_wr_vram
dcb1 : e8               [ 2] 	inx
dcb2 : d0f9             [ 3] 	bne vdp_set_hires_fill_nme
dcb4 : 88               [ 2] 	dey
dcb5 : d0f6             [ 3] 	bne vdp_set_hires_fill_nme
                             	
dcb7 : 58               [ 2] 	cli
                             	
dcb8 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* init_vdp_g1
                             ;* Initialise video processor graphics 1
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
dcb9 :                       init_vdp_g1
dcb9 : 208cdc           [ 6] 	jsr vdp_set_g1_mode
dcbc : 203cdd           [ 6] 	jsr init_sprtpat_g1
dcbf : 20f6dc           [ 6] 	jsr init_colours_g1
dcc2 : 201cdd           [ 6] 	jsr init_sprites_g1
dcc5 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------------------- bank0.s -----------------------------------

                             
                             ;****************************************
                             ;* init_vdp_g2
                             ;* Initialise video processor graphics 2
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
dcc6 :                       init_vdp_g2
dcc6 : 2094dc           [ 6] 	jsr vdp_set_g2_mode
dcc9 : 203cdd           [ 6] 	jsr init_sprtpat_g1		; Same as G1
dccc : 2009dd           [ 6] 	jsr init_colours_g2
dccf : 201cdd           [ 6] 	jsr init_sprites_g1		; Same as G1
dcd2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_vdp_hires
                             ;* Initialise video processor graphics 1
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
dcd3 :                       init_vdp_hires
dcd3 : 209cdc           [ 6] 	jsr vdp_set_hires
dcd6 : 203cdd           [ 6] 	jsr init_sprtpat_g1
dcd9 : 4c1cdd           [ 3] 	jmp init_sprites_g1
                             
                             
                             ;****************************************
                             ;* init_vdp_txt
                             ;* Initialise video processor text mode
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;***************************************
dcdc :                       init_vdp_txt
dcdc : 4c84dc           [ 3] 	jmp vdp_set_txt_mode
                             	
                             
                             ;****************************************
                             ;* fill_vram
                             ;* Fill a number of VRAM bytes with a value
                             ;* Input : X,Y = Fill length (lo,hi), A = Value
                             ;* Output : None
                             ;* Regs affected : All
                             ;* ASSUMES vdp_wr_vram already called
                             ;* Works for < 256 bytes as long as Y=1
                             ;* Else only use for WHOLE pages at a time so X m
                             ;* INTERRUPTS MUST HAVE BEEN DISABLED BY THE CALL
                             ;****************************************
dcdf :                       vdp_fill_vram
dcdf : 2085c6           [ 6] 	jsr vdp_wr_vram
dce2 : ca               [ 2] 	dex
dce3 : d0fa             [ 3] 	bne vdp_fill_vram
dce5 : 88               [ 2] 	dey
dce6 : d0f7             [ 3] 	bne vdp_fill_vram
dce8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* clear_vram
                             ;* Set all 16k VDP vram to 0x00
                             ;* Input : None
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------------------- bank0.s -----------------------------------

                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dce9 :                       clear_vram
                             ;	sei
dce9 : a200             [ 2] 	ldx #0x00			; Low byte of address
dceb : a900             [ 2] 	lda #0x00			; High byte of address
dced : 205dc6           [ 6] 	jsr vdp_wr_addr		; Write address to VDP
                             
dcf0 : a040             [ 2] 	ldy #0x40			; 0x40 pages = 16k (X already zero)
dcf2 : 20dfdc           [ 6] 	jsr vdp_fill_vram
                             ;	cli
dcf5 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* init_colours_g1
                             ;* Initialise colour table for graphics 1
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dcf6 :                       init_colours_g1
dcf6 : 78               [ 2] 	sei
dcf7 : a60d             [ 3] 	ldx vdp_base+vdp_addr_col
dcf9 : a50e             [ 3] 	lda vdp_base+vdp_addr_col+1
dcfb : 205dc6           [ 6] 	jsr vdp_wr_addr				; Set VDP address
                             	
dcfe : a220             [ 2] 	ldx #0x20					; 32 bytes to fill	
dd00 : a001             [ 2] 	ldy #0x01					; Only 1 pass through
dd02 : a515             [ 3] 	lda vdp_base+vdp_bord_col	; Border colour
dd04 : 20dfdc           [ 6] 	jsr vdp_fill_vram
dd07 : 58               [ 2] 	cli
dd08 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_colours_g2
                             ;* Initialise colour table for graphics 2
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dd09 :                       init_colours_g2
dd09 : 78               [ 2] 	sei
dd0a : a60d             [ 3] 	ldx vdp_base+vdp_addr_col
dd0c : a50e             [ 3] 	lda vdp_base+vdp_addr_col+1
dd0e : 205dc6           [ 6] 	jsr vdp_wr_addr				; Set VDP address
                             	
dd11 : a200             [ 2] 	ldx #0x00					; 2048 bytes to fill	
dd13 : a008             [ 2] 	ldy #0x08					; 8 pass through
dd15 : a515             [ 3] 	lda vdp_base+vdp_bord_col	; Border colour
dd17 : 20dfdc           [ 6] 	jsr vdp_fill_vram
dd1a : 58               [ 2] 	cli
dd1b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_sprites_g1
                             ;* Initialise sprite attribute table for graphics
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dd1c :                       init_sprites_g1
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------------------- bank0.s -----------------------------------

dd1c : 78               [ 2] 	sei
dd1d : a611             [ 3] 	ldx vdp_base+vdp_addr_spa
dd1f : a512             [ 3] 	lda vdp_base+vdp_addr_spa+1
dd21 : 205dc6           [ 6] 	jsr vdp_wr_addr				; Set VDP address
                             	
dd24 : a280             [ 2] 	ldx #0x80					; 128 bytes of attribute to fill
dd26 : a001             [ 2] 	ldy #0x01					; Only 1 pass
dd28 : a9d0             [ 2] 	lda #0xd0					; Sprite terminator
dd2a : 20dfdc           [ 6] 	jsr vdp_fill_vram
dd2d : 58               [ 2] 	cli
dd2e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_fonts
                             ;* Initialise fonts 
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dd2f :                       init_fonts
dd2f : 78               [ 2] 	sei
dd30 : a60f             [ 3] 	ldx vdp_base+vdp_addr_pat
dd32 : a510             [ 3] 	lda vdp_base+vdp_addr_pat+1
dd34 : 205dc6           [ 6] 	jsr vdp_wr_addr				; Write the address
dd37 : 2049dd           [ 6] 	jsr init_fonts_sub
dd3a : 58               [ 2] 	cli
dd3b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* init_sprtpat_g1
                             ;* Initialise fonts for sprites
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dd3c :                       init_sprtpat_g1
dd3c : 78               [ 2] 	sei
dd3d : a613             [ 3] 	ldx vdp_base+vdp_addr_spp
dd3f : a514             [ 3] 	lda vdp_base+vdp_addr_spp+1
dd41 : 205dc6           [ 6] 	jsr vdp_wr_addr				; Write the address
dd44 : 2049dd           [ 6] 	jsr init_fonts_sub
dd47 : 58               [ 2] 	cli
dd48 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* init_fonts_sub
                             ;* Initialise fonts common subroutine
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : All
                             ;* INTERRUPTS MUST HAVE BEEN DISABLED BY CALLER!!
                             ;****************************************
dd49 :                       init_fonts_sub
dd49 : 6435             [ 3] 	stz tmp_a				; XOR with zero = no change
dd4b : a000             [ 2] 	ldy #0					; byte within page
dd4d :                       init_write_fonts
dd4d : a900             [ 2] 	lda #lo(vdp_font)		; Low byte of fonts source
dd4f : 8533             [ 3] 	sta tmp_v1
dd51 : a9d8             [ 2] 	lda #hi(vdp_font)		; High byte of fonts source
dd53 : 8534             [ 3] 	sta tmp_v1+1
dd55 : a204             [ 2] 	ldx #0x04				; 4 pages = 1024 bytes
dd57 :                       init_pattern
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------------------- bank0.s -----------------------------------

dd57 : 98               [ 2] 	tya
dd58 : b133             [ 5] 	lda (tmp_v1),y			; Get byte from font table
dd5a : 4535             [ 3] 	eor tmp_a				; Invert if tmp_a is 0xff
dd5c : 2085c6           [ 6] 	jsr vdp_wr_vram			; Write the byte to VRAM
dd5f : c8               [ 2] 	iny
dd60 : d0f5             [ 3] 	bne init_pattern		; keep going for 1 page
dd62 : e634             [ 5] 	inc tmp_v1+1			; only need to increment high byt
dd64 : ca               [ 2] 	dex						; page counter
dd65 : d0f0             [ 3] 	bne init_pattern		; keep going for 4 pages
dd67 : a535             [ 3] 	lda tmp_a				; get the current eor mask
dd69 : 49ff             [ 2] 	eor	#0xff				; Invert the EOR mask
dd6b : 8535             [ 3] 	sta tmp_a				; And save for next go around
dd6d : d0de             [ 3] 	bne init_write_fonts
dd6f : 60               [ 6] 	rts
                             
                             ;**** BASE TABLES ****
dd70 :                       vdp_base_table
dd70 :                       vdp_base_table_g1
dd70 : 03                    	db	VDP_LONGDELAY	; Long delay
dd71 : 00                    	db	%00000000		; R0 - No-extvid
dd72 : e0                    	db	%11100000		; R1 - 16K,Disp-enable,Int-enable,
dd73 : 0010                  	dw	0x1000			; Name table address
dd75 : 04                    	db	0x1000>>10		; R2 Name table value
dd76 : 8013                  	dw	0x1380			; Colour table
dd78 : 4e                    	db	0x1380>>6		; R3 Colour table value
dd79 : 0000                  	dw	0x0000			; Pattern table
dd7b : 00                    	db	0x0000>>11		; R4 Pattern table value
dd7c : 0013                  	dw	0x1300			; Sprite attribute table
dd7e : 26                    	db	0x1300>>7		; R5 Sprite attribute table value
dd7f : 0008                  	dw	0x0800			; Sprite pattern table
dd81 : 01                    	db	0x0800>>11		; R6 Sprite pattern table value
dd82 : f4                    	db	0xf4			; R7 White f/gnd, blue background
                             
dd83 :                       vdp_base_table_g2
dd83 : 03                    	db	VDP_LONGDELAY	; Long delay
dd84 : 02                    	db	%00000010		; R0 - GR2HiRes,No-extvid
dd85 : e0                    	db	%11100000		; R1 - 16K,Disp-enable,Int-enable,
dd86 : 0038                  	dw	0x3800			; Name table address
dd88 : 0e                    	db	0x3800>>10		; R2 Name table value
dd89 : 0020                  	dw	0x2000			; Colour table
dd8b : 9f                    	db	0x9f			; R3 Colour table magic value 0x9f
dd8c : 0000                  	dw	0x0000			; Pattern table
dd8e : 00                    	db	0x0000>>11		; R4 Pattern table value
dd8f : 003b                  	dw	0x3b00			; Sprite attribute table
dd91 : 76                    	db	0x3b00>>7		; R5 Sprite attribute table value
dd92 : 0018                  	dw	0x1800			; Sprite pattern table
dd94 : 03                    	db	0x1800>>11		; R6 Sprite pattern table value
dd95 : fc                    	db	0xfc			; R7 White f/gnd, green background
                             
dd96 :                       vdp_base_table_hi
dd96 : 03                    	db	VDP_LONGDELAY	; Long delay
dd97 : 02                    	db	%00000010		; R0 - GR2HiRes,No-extvid
dd98 : e0                    	db	%11100000		; R1 - 16K,Disp-enable,Int-enable,
dd99 : 0038                  	dw	0x3800			; Name table
dd9b : 0e                    	db	0x3800>>10		; R2 Name table value
dd9c : 0020                  	dw	0x2000			; Colour table
dd9e : ff                    	db	0xff			; R3 Colour table value - always 0xff
dd9f : 0000                  	dw	0x0000			; Pattern table
dda1 : 03                    	db	0x03			; R4 Pattern table value - always 0x03
dda2 : 003b                  	dw	0x3b00			; Sprite attribute table
dda4 : 76                    	db	0x3b00>>7		; R5 Sprite attribute table value
dda5 : 0018                  	dw	0x1800			; Sprite pattern table
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------------------- bank0.s -----------------------------------

dda7 : 03                    	db	0x1800>>11		; R6 Sprite pattern table value
dda8 : f1                    	db	0xf1			; R7 White f/gnd, black background
                             
dda9 :                       vdp_base_table_txt
dda9 : 01                    	db	VDP_SHORTDELAY	; Short delay
ddaa : 00                    	db	%00000000		; R0 - No-extvid
ddab : f0                    	db	%11110000		; R1 - 16K,Disp-enable,Int-enable,
ddac : 0008                  	dw	0x0800			; Name table
ddae : 02                    	db	0x0800>>10		; R2 Name table value
ddaf : 0000                  	dw	0				; Colour table NA
ddb1 : 00                    	db	0				; R3 Colour table value
ddb2 : 0000                  	dw	0x0000			; Pattern table
ddb4 : 00                    	db	0x0000>>11		; R4 Pattern table value
ddb5 : 0000                  	dw	0				; Sprite attribute table NA
ddb7 : 00                    	db	0				; R5 Sprite attribute table value
ddb8 : 0000                  	dw	0				; Sprite pattern table NA
ddba : 00                    	db	0				; R6 Sprite pattern table value
ddbb : fd                    	db	0xfd			; R7 White f/gnd, magenta background
                             
ddbc :                       mod_sz_vdp_e
                             
                             	include "vdp\graph.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.S
                             ;*  This is the graphics module, to handle text a
                             ;*  graphics.  On startup, the BBC DIP settings d
                             ;*  whether the computer will go in to 32 or 40 c
                             ;*  screen mode.  The kernel code calls the right
                             ;*  initialisation code.
                             ;*  For text modes, this module keeps track of wh
                             ;*  next put a character, and also takes care of 
                             ;*  to the next line as well as scrolling the con
                             ;*  when the cursor has reached the bottom right.
                             ;*  module also enables text input which is echoe
                             ;*  screen, to allow interactive input and editin
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
ddbc :                       mod_sz_graph_s
                             
                             ;****************************************
                             ;* gr_init_screen_common
                             ;* Common screen initialisation code
                             ;* A = Blank character
                             ;****************************************
ddbc :                       gr_init_screen_common
                             	; Store blank char
ddbc : 8509             [ 3] 	sta vdp_blank
                             	; Save value for cursor
ddbe : 8508             [ 3] 	sta vdp_curval
                             	
                             	; VRAM address of screen data
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------------------- bank0.s -----------------------------------

ddc0 : a50b             [ 3] 	lda vdp_base+vdp_addr_nme
ddc2 : 8517             [ 3] 	sta gr_scrngeom+gr_screen_start
ddc4 : a50c             [ 3] 	lda vdp_base+vdp_addr_nme+1
ddc6 : 8518             [ 3] 	sta gr_scrngeom+gr_screen_start+1
                             
                             	; Top left cursor position 0,0
ddc8 : a200             [ 2] 	ldx #0
ddca : 861e             [ 3] 	stx gr_scrngeom+gr_cur_x
ddcc : a000             [ 2] 	ldy #0
ddce : 841f             [ 3] 	sty gr_scrngeom+gr_cur_y
                             
                             	; Clear screen
ddd0 : 206cde           [ 6] 	jsr gr_cls
                             
                             	; Cursor pointer in to screen
ddd3 : 20fade           [ 6] 	jsr gr_set_cur	
                             	
ddd6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_screen_32 g1 if A=1 else g2 if A=2
                             ;* initialise the screen in graphic mode 1/2
                             ;****************************************
ddd7 :                       gr_init_screen_32
ddd7 : c901             [ 2] 	cmp #1
ddd9 : d005             [ 3] 	bne gr_init_screen_skip_g1
dddb : 20b9dc           [ 6] 	jsr init_vdp_g1
ddde : 8003             [ 3] 	bra gr_init_screen_cont
                             
dde0 :                       gr_init_screen_skip_g1
dde0 : 20c6dc           [ 6] 	jsr init_vdp_g2
                             
dde3 :                       gr_init_screen_cont	
                             	; Size of screen in bytes
dde3 : a900             [ 2] 	lda #lo(768)					
dde5 : 8519             [ 3] 	sta gr_scrngeom+gr_screen_size
dde7 : a903             [ 2] 	lda #hi(768)	
dde9 : 851a             [ 3] 	sta gr_scrngeom+gr_screen_size+1
                             
                             	; Width and height
ddeb : a920             [ 2] 	lda #32
dded : 851b             [ 3] 	sta gr_scrngeom+gr_screen_w
ddef : a918             [ 2] 	lda #24
ddf1 : 851c             [ 3] 	sta gr_scrngeom+gr_screen_h
ddf3 : 641d             [ 3] 	stz gr_scrngeom+gr_cur_off		; No cursor offset
                             
ddf5 : a920             [ 2] 	lda #' '						; Blank is SPACE
ddf7 : 20bcdd           [ 6] 	jsr gr_init_screen_common
ddfa : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_screen_txt
                             ;* initialise the screen in text mode
                             ;****************************************
ddfb :                       gr_init_screen_txt
ddfb : 20dcdc           [ 6] 	jsr init_vdp_txt
                             
                             	; Size of screen in bytes
ddfe : a9c0             [ 2] 	lda #lo(960)					
de00 : 8519             [ 3] 	sta gr_scrngeom+gr_screen_size
de02 : a903             [ 2] 	lda #hi(960)	
de04 : 851a             [ 3] 	sta gr_scrngeom+gr_screen_size+1
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------------------- bank0.s -----------------------------------

                             
                             	; Width and height
de06 : a928             [ 2] 	lda #40
de08 : 851b             [ 3] 	sta gr_scrngeom+gr_screen_w
de0a : a918             [ 2] 	lda #24
de0c : 851c             [ 3] 	sta gr_scrngeom+gr_screen_h
de0e : 641d             [ 3] 	stz gr_scrngeom+gr_cur_off		; No cursor offset
                             
de10 : a920             [ 2] 	lda #' '						; Blank is SPACE
de12 : 20bcdd           [ 6] 	jsr gr_init_screen_common
                             
de15 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_hires
                             ;* Input : A = Colour table fill value
                             ;* initialise the screen in hires mode
                             ;****************************************
de16 :                       gr_init_hires
de16 : 8524             [ 3] 	sta gr_scrngeom+gr_pixcol		; Save pixel colour
                             
de18 : e606             [ 5] 	inc vdp_curoff					; Switch cursor off
                             	
de1a : 20d3dc           [ 6] 	jsr init_vdp_hires
                             
                             	; Size of screen in bytes
de1d : a900             [ 2] 	lda #lo(6144)					
de1f : 8519             [ 3] 	sta gr_scrngeom+gr_screen_size
de21 : a918             [ 2] 	lda #hi(6144)	
de23 : 851a             [ 3] 	sta gr_scrngeom+gr_screen_size+1
                             
                             	; Width and height
de25 : a920             [ 2] 	lda #32
de27 : 851b             [ 3] 	sta gr_scrngeom+gr_screen_w
de29 : a9c0             [ 2] 	lda #192
de2b : 851c             [ 3] 	sta gr_scrngeom+gr_screen_h
de2d : a907             [ 2] 	lda #7
de2f : 851d             [ 3] 	sta gr_scrngeom+gr_cur_off		; Cursor on bottom r
                             
                             	; default pixel mode and mask
de31 : a901             [ 2] 	lda #1
de33 : 8522             [ 3] 	sta gr_scrngeom+gr_pixmode
de35 : a9ff             [ 2] 	lda #255
de37 : 8523             [ 3] 	sta gr_scrngeom+gr_pixmask
                             	
de39 : 78               [ 2] 	sei
                             	; point to colour table
de3a : a60d             [ 3] 	ldx vdp_base+vdp_addr_col
de3c : a50e             [ 3] 	lda vdp_base+vdp_addr_col+1
de3e : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; set colour for 0x18 pages (6144) bytes
de41 : a524             [ 3] 	lda gr_scrngeom+gr_pixcol		; Get the colour valu
de43 : a200             [ 2] 	ldx #0							; And fill 18 pages
de45 : a018             [ 2] 	ldy #0x18						
de47 : 20dfdc           [ 6] 	jsr vdp_fill_vram
                             
de4a : 58               [ 2] 	cli
                             	
                             	; Now point screen at pattern for HIRES
de4b : a50f             [ 3] 	lda vdp_base+vdp_addr_pat
de4d : 850b             [ 3] 	sta vdp_base+vdp_addr_nme
de4f : a510             [ 3] 	lda vdp_base+vdp_addr_pat+1
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------------------- bank0.s -----------------------------------

de51 : 850c             [ 3] 	sta vdp_base+vdp_addr_nme+1
                             	
de53 : a900             [ 2] 	lda #0							; Blank is ZERO
de55 : 20bcdd           [ 6] 	jsr gr_init_screen_common
                             	
                             
de58 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_init_screen
                             ;* A = Mode (0,1,2,>=0x10 for hires)
                             ;* initialise the screen in text mode
                             ;****************************************
de59 :                       gr_init_screen
de59 : 8516             [ 3] 	sta vdp_base+vdp_gmode
de5b : c910             [ 2] 	cmp #0x10				; Hires mode?
de5d : b00a             [ 3] 	bcs gr_init_screen_hires
de5f : c900             [ 2] 	cmp #0
de61 : d003             [ 3] 	bne gr_init_skip_txt
de63 : 4cfbdd           [ 3] 	jmp gr_init_screen_txt
de66 :                       gr_init_skip_txt
de66 : 4cd7dd           [ 3] 	jmp gr_init_screen_32
de69 :                       gr_init_screen_hires
de69 : 4c16de           [ 3] 	jmp gr_init_hires
                             
                             ;****************************************
                             ;* gr_cls
                             ;* Clear the screen
                             ;****************************************
de6c :                       gr_cls
de6c : 48               [ 3] 	pha
de6d : da               [ 3] 	phx
de6e : 5a               [ 3] 	phy
                             
                             	; Set VDP Address
de6f : 78               [ 2] 	sei
de70 : a617             [ 3] 	ldx gr_scrngeom+gr_screen_start
de72 : a518             [ 3] 	lda gr_scrngeom+gr_screen_start+1
de74 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             
                             	; X and Y count bytes to fill
de77 : a200             [ 2] 	ldx #0
de79 : a000             [ 2] 	ldy #0
de7b : a509             [ 3] 	lda vdp_blank
de7d :                       gr_cls_loop
de7d : 2085c6           [ 6] 	jsr vdp_wr_vram
de80 : e8               [ 2] 	inx
de81 : d001             [ 3] 	bne gr_cls_skipy
de83 : c8               [ 2] 	iny
de84 :                       gr_cls_skipy
de84 : e419             [ 3] 	cpx gr_scrngeom+gr_screen_size
de86 : d0f5             [ 3] 	bne gr_cls_loop
de88 : c41a             [ 3] 	cpy gr_scrngeom+gr_screen_size+1
de8a : d0f1             [ 3] 	bne gr_cls_loop
                             	
de8c : 58               [ 2] 	cli
                             	
de8d : 7a               [ 4] 	ply
de8e : fa               [ 4] 	plx
de8f : 68               [ 4] 	pla
                             	
de90 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------------------- bank0.s -----------------------------------

                             	
                             ;****************************************
                             ;* gr_getXY_ptr
                             ;* Get VRAM address of screen from X,Y
                             ;* Input : X, Y = coords
                             ;* Output : X,Y = low and high VRAM address
                             ;* Regs affected : A
                             ;****************************************
de91 :                       gr_getXY_ptr
                             	; 32 or 40 columns table selection
de91 : a51b             [ 3] 	lda gr_scrngeom+gr_screen_w
de93 : c928             [ 2] 	cmp #40
de95 : d011             [ 3] 	bne gr_set_skip_40
                             
de97 : 18               [ 2] 	clc
de98 : b9e4e3           [ 4] 	lda gr_offset_40lo, y
de9b : 6517             [ 3] 	adc gr_scrngeom+gr_screen_start
de9d : 8525             [ 3] 	sta gr_scrngeom+gr_geom_tmp
de9f : b9fce3           [ 4] 	lda gr_offset_40hi, y
dea2 : 6518             [ 3] 	adc gr_scrngeom+gr_screen_start+1
dea4 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
dea6 : 8013             [ 3] 	bra gr_add_x_offset
                             
dea8 :                       gr_set_skip_40
                             	; 32 byte width window - but what if hi-res (bec
dea8 : a51d             [ 3] 	lda gr_scrngeom+gr_cur_off
deaa : d01a             [ 3] 	bne gr_calc_hires_ptr
deac : 18               [ 2] 	clc
dead : b914e4           [ 4] 	lda gr_offset_32lo, y
deb0 : 6517             [ 3] 	adc gr_scrngeom+gr_screen_start
deb2 : 8525             [ 3] 	sta gr_scrngeom+gr_geom_tmp
deb4 : b92ce4           [ 4] 	lda gr_offset_32hi, y
deb7 : 6518             [ 3] 	adc gr_scrngeom+gr_screen_start+1
deb9 : 8526             [ 3] 	sta gr_scrngeom+gr_geom_tmp+1
                             
debb :                       gr_add_x_offset	
debb : 18               [ 2] 	clc
debc : 8a               [ 2] 	txa
debd : 6525             [ 3] 	adc gr_scrngeom+gr_geom_tmp
debf : aa               [ 2] 	tax								; vram addr lo in X
dec0 : a526             [ 3] 	lda gr_scrngeom+gr_geom_tmp+1
dec2 : 6900             [ 2] 	adc #0
dec4 : a8               [ 2] 	tay								; vram addr hi in Y
dec5 : 60               [ 6] 	rts
                             	
dec6 :                       gr_calc_hires_ptr
                             	; Low byte = X&F8 | Y&07
dec6 : 8a               [ 2] 	txa
dec7 : 29f8             [ 2] 	and #0xf8
dec9 : 8525             [ 3] 	sta gr_scrngeom+gr_geom_tmp
decb : 98               [ 2] 	tya
decc : 2907             [ 2] 	and #0x07
dece : 0525             [ 3] 	ora gr_scrngeom+gr_geom_tmp
ded0 : aa               [ 2] 	tax			; Low address in X
                             	; High byte = Y>>3
ded1 : 98               [ 2] 	tya
ded2 : 4a               [ 2] 	lsr a
ded3 : 4a               [ 2] 	lsr a
ded4 : 4a               [ 2] 	lsr a
ded5 : a8               [ 2] 	tay			; High address in Y
ded6 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------------------- bank0.s -----------------------------------

                             ;****************************************
                             ;* gr_plot
                             ;* Write a byte in the screen pos
                             ;* Input : X,Y = coord, A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
ded7 :                       gr_plot
ded7 : 48               [ 3] 	pha					; Save byte to put
ded8 : 2091de           [ 6] 	jsr gr_getXY_ptr	; vram addr in x,y
dedb : 68               [ 4] 	pla					; Get byte to put
dedc : 208ac6           [ 6] 	jsr vdp_poke
dedf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_put
                             ;* Write a byte in the current cursor position
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : All
                             ;****************************************
dee0 :                       gr_put
dee0 : e606             [ 5] 	inc vdp_curoff		; Disable cusror
dee2 : 8508             [ 3] 	sta vdp_curval		; Update cursor value
                             	; Load cursor address
dee4 : a620             [ 3] 	ldx gr_scrngeom+gr_cur_ptr
dee6 : a421             [ 3] 	ldy gr_scrngeom+gr_cur_ptr+1
dee8 : 208ac6           [ 6] 	jsr vdp_poke
                             	; Reset cursor
deeb : a901             [ 2] 	lda #1
deed : 8507             [ 3] 	sta vdp_curstat
deef : c606             [ 5] 	dec vdp_curoff		; Allow cursor flashing
def1 : 60               [ 6] 	rts
                             	
                             	
                             ;****************************************
                             ;* gr_get
                             ;* Get the byte in the screen pos
                             ;* Input : X,Y = coord
                             ;* Output : X,Y = address, A = peeked byte
                             ;* Regs affected : All
                             ;****************************************
def2 :                       gr_get
def2 : 2091de           [ 6] 	jsr gr_getXY_ptr	; vram addr in x,y
def5 : 98               [ 2] 	tya					; hi needs to be in A for peek
def6 : 2097c6           [ 6] 	jsr vdp_peek
def9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_set_cur
                             ;* Set the cursor position
                             ;* Input : X, Y = position
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
defa :                       gr_set_cur
defa : e606             [ 5] 	inc vdp_curoff				; Disable cursor
                             	
                             	; Save new cursor position
defc : 861e             [ 3] 	stx gr_scrngeom+gr_cur_x
defe : 841f             [ 3] 	sty gr_scrngeom+gr_cur_y
                             	
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------------------- bank0.s -----------------------------------

                             	; First restore what is under the cursor
df00 : a508             [ 3] 	lda vdp_curval
df02 : 20e0de           [ 6] 	jsr gr_put
                             
                             	; Now calculate the new cursor vram address
df05 : a61e             [ 3] 	ldx gr_scrngeom+gr_cur_x
df07 : a41f             [ 3] 	ldy gr_scrngeom+gr_cur_y
df09 : 20f2de           [ 6] 	jsr gr_get					; X,Y=address,A=vram contents
df0c : 8620             [ 3] 	stx gr_scrngeom+gr_cur_ptr
df0e : 8421             [ 3] 	sty gr_scrngeom+gr_cur_ptr+1
df10 : 8508             [ 3] 	sta vdp_curval
                             
df12 : c606             [ 5] 	dec vdp_curoff
                             	
df14 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* gr_hchar
                             ;* Plot a char to hires X,Y coordinates with char
                             ;* Input : X,Y = coord, A = Char code
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
df15 :                       gr_hchar
df15 : 8637             [ 3] 	stx tmp_b				; Save X coord
df17 : 8438             [ 3] 	sty tmp_b+1				; Save Y coord
                             	
                             	; Calculate font address of char code A in to tm
df19 : 8531             [ 3] 	sta tmp_c
df1b : 6432             [ 3] 	stz tmp_c+1
                             	; Multiply by 8
df1d : 0631             [ 5] 	asl tmp_c
df1f : 2632             [ 5] 	rol tmp_c+1
df21 : 0631             [ 5] 	asl tmp_c
df23 : 2632             [ 5] 	rol tmp_c+1
df25 : 0631             [ 5] 	asl tmp_c
df27 : 2632             [ 5] 	rol tmp_c+1
                             	; Add font ROM address
df29 : a900             [ 2] 	lda #lo(vdp_font)
df2b : 6531             [ 3] 	adc tmp_c
df2d : 8531             [ 3] 	sta tmp_c
df2f : a9d8             [ 2] 	lda #hi(vdp_font)
df31 : 6532             [ 3] 	adc tmp_c+1
df33 : 8532             [ 3] 	sta tmp_c+1
                             
                             	; Save 3LSB of x coord
df35 : 8a               [ 2] 	txa
df36 : 2907             [ 2] 	and #7
df38 : 8535             [ 3] 	sta tmp_a
                             	
                             	; Generate the shifted character for each line (
                             	; 16 bytes to store a 2x8 byte shifted image of 
df3a : a200             [ 2] 	ldx #0	
df3c :                       gr_hchar_shiftline
                             	; load up a line of font in to 16 bits, left jus
df3c : b231             [ 5] 	lda (tmp_c)
df3e : e631             [ 5] 	inc tmp_c
df40 : 7481             [ 4] 	stz ztmp_16+8,x
                             	; Get 3LSB of x coord in to Y = number of column
df42 : a435             [ 3] 	ldy tmp_a
df44 :                       gr_hchar_shiftcol
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------------------- bank0.s -----------------------------------

df44 : f006             [ 3] 	beq gr_hchar_shiftdone		; Branch on Y = 0
df46 : 4a               [ 2] 	lsr a
df47 : 7681             [ 6] 	ror ztmp_16+8,x
df49 : 88               [ 2] 	dey
df4a : 80f8             [ 3] 	bra gr_hchar_shiftcol
df4c :                       gr_hchar_shiftdone
df4c : 9579             [ 4] 	sta ztmp_16,x
df4e : e8               [ 2] 	inx
df4f : e008             [ 2] 	cpx #8						; Do 8 lines each 16 bits wide
df51 : d0e9             [ 3] 	bne gr_hchar_shiftline
                             
                             	; Ok we have a char image in dram ztmp_16, need 
                             
df53 : e606             [ 5] 	inc vdp_curoff				; Disable cursor
                             	
                             	; do 8 lines of left image
df55 : a200             [ 2] 	ldx #0
df57 :                       gr_hchar_getimage
df57 : da               [ 3] 	phx					; Save index
                             	; Get x,y coord and calc address in to tmp_v1
df58 : a637             [ 3] 	ldx tmp_b
df5a : a438             [ 3] 	ldy tmp_b+1
df5c : 2091de           [ 6] 	jsr gr_getXY_ptr
df5f : 8633             [ 3] 	stx tmp_v1
df61 : 8434             [ 3] 	sty tmp_v1+1
                             
                             	; high need to be in A for peek
df63 : 98               [ 2] 	tya
df64 : 2097c6           [ 6] 	jsr vdp_peek		; Get image byte from vram
df67 : 8531             [ 3] 	sta tmp_c			; Save in temp c
df69 : fa               [ 4] 	plx					; Restore index but don't lose it
df6a : da               [ 3] 	phx
df6b : b579             [ 4] 	lda ztmp_16,x		; Get cached image
df6d : a422             [ 3] 	ldy gr_scrngeom+gr_pixmode		; Get the mode to pl
df6f : f008             [ 3] 	beq gr_hchar_getimage_plot		; If erase then blat
df71 : 4531             [ 3] 	eor tmp_c			; First assume EOR with vram
df73 : c002             [ 2] 	cpy #2				; Is that the mode
df75 : f002             [ 3] 	beq gr_hchar_getimage_plot
df77 : 0531             [ 3] 	ora tmp_c			; Else OR VRAM with Image
df79 :                       gr_hchar_getimage_plot
                             	; Get vram address from tmp_v1
df79 : a633             [ 3] 	ldx tmp_v1
df7b : a434             [ 3] 	ldy tmp_v1+1
df7d : 208ac6           [ 6] 	jsr vdp_poke		; Put image on
                             
df80 : a422             [ 3] 	ldy gr_scrngeom+gr_pixmode
df82 : c002             [ 2] 	cpy #2
df84 : f010             [ 3] 	beq gr_hchar_skipcol
                             	; if not xor mode put in the right colour
                             	; add the x,y offset in to the colour table
df86 : 18               [ 2] 	clc
df87 : a50d             [ 3] 	lda vdp_base+vdp_addr_col
df89 : 6533             [ 3] 	adc tmp_v1
df8b : aa               [ 2] 	tax
df8c : a50e             [ 3] 	lda vdp_base+vdp_addr_col+1
df8e : 6534             [ 3] 	adc tmp_v1+1
df90 : a8               [ 2] 	tay
df91 : a524             [ 3] 	lda gr_scrngeom+gr_pixcol
df93 : 208ac6           [ 6] 	jsr vdp_poke
                             
df96 :                       gr_hchar_skipcol
df96 : e638             [ 5] 	inc tmp_b+1			; Update y coord
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------------------- bank0.s -----------------------------------

df98 : fa               [ 4] 	plx					; Restore index
df99 : e8               [ 2] 	inx
df9a : e008             [ 2] 	cpx #8				; Done all of left side?
df9c : f006             [ 3] 	beq gr_hchar_prepright
df9e : e010             [ 2] 	cpx #16				; We've done all of right side?
dfa0 : f016             [ 3] 	beq gr_hchar_imagedone
dfa2 : d0b3             [ 3] 	bne gr_hchar_getimage	; Else keep going // alway
dfa4 :                       gr_hchar_prepright
                             	; Done left but prepare to do right
                             	; X=8 which is the right side of the image cache
dfa4 : a535             [ 3] 	lda tmp_a			; Check if anything on the right
dfa6 : f010             [ 3] 	beq gr_hchar_imagedone	; If not, then don't do i
dfa8 : 38               [ 2] 	sec					; Re-adjust y coord back to top
dfa9 : a538             [ 3] 	lda tmp_b+1
dfab : e908             [ 2] 	sbc #8
dfad : 8538             [ 3] 	sta tmp_b+1
dfaf : 18               [ 2] 	clc					; Move x coord across to RHS by adding 8
dfb0 : a537             [ 3] 	lda tmp_b
dfb2 : 6908             [ 2] 	adc #8
dfb4 : 8537             [ 3] 	sta tmp_b
dfb6 : 909f             [ 3] 	bcc gr_hchar_getimage	; Only do right if in boun
dfb8 :                       gr_hchar_imagedone
dfb8 : c606             [ 5] 	dec vdp_curoff				; Enable cursor
                             
dfba : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_point
                             ;* Write a point to the X,Y coordinates
                             ;* Input : X,Y = coord
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
dfbb :                       gr_point
                             	; Save A and X for later
dfbb : da               [ 3] 	phx
                             
                             	; Get hires address from X,Y coordinates
dfbc : 2091de           [ 6] 	jsr gr_getXY_ptr
dfbf : 8633             [ 3] 	stx tmp_v1
dfc1 : 8434             [ 3] 	sty tmp_v1+1
                             
                             	; A is hi byte for peek
dfc3 : 98               [ 2] 	tya
                             	
dfc4 : 2097c6           [ 6] 	jsr vdp_peek
                             	; Save in temp
dfc7 : 8537             [ 3] 	sta tmp_b
                             
                             	; Get X back and mask off 3 LSBs
dfc9 : 68               [ 4] 	pla
dfca : 2907             [ 2] 	and #0x07
                             	; Use this to find the bit number mask and save 
dfcc : aa               [ 2] 	tax
dfcd : bd02e0           [ 4] 	lda gr_point_mask,x
dfd0 : 8538             [ 3] 	sta tmp_b+1
                             	; Get the mode number in to X
dfd2 : a622             [ 3] 	ldx gr_scrngeom+gr_pixmode
                             	; load VRAM byte
dfd4 : a537             [ 3] 	lda tmp_b
                             	; first assume that we want to set a bit - OR wi
dfd6 : 0538             [ 3] 	ora tmp_b+1
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------------------- bank0.s -----------------------------------

                             	; if that is correct then done
dfd8 : e001             [ 2] 	cpx #1
dfda : f00a             [ 3] 	beq gr_point_done
                             	; now assume that actually we want to erase but 
dfdc : 4538             [ 3] 	eor tmp_b+1
                             	; if that is correct then done
dfde : e000             [ 2] 	cpx #0
dfe0 : f004             [ 3] 	beq gr_point_done
                             	; else we want to really just do an eor of VRAM 
dfe2 : a537             [ 3] 	lda tmp_b
dfe4 : 4538             [ 3] 	eor tmp_b+1
                             	; so now we have the VRAM bit set properly in te
dfe6 :                       gr_point_done
dfe6 : a633             [ 3] 	ldx tmp_v1
dfe8 : a434             [ 3] 	ldy tmp_v1+1
dfea : 208ac6           [ 6] 	jsr vdp_poke
                             
                             	; now put in the right colour
                             	; add the x,y offset in to the colour table
dfed : a524             [ 3] 	lda gr_scrngeom+gr_pixcol		; If pixcol zero don'
dfef : f010             [ 4] 	beq gr_point_exit
dff1 : 18               [ 2] 	clc
dff2 : a50d             [ 3] 	lda vdp_base+vdp_addr_col
dff4 : 6533             [ 3] 	adc tmp_v1
dff6 : aa               [ 2] 	tax
dff7 : a50e             [ 3] 	lda vdp_base+vdp_addr_col+1
dff9 : 6534             [ 3] 	adc tmp_v1+1
dffb : a8               [ 2] 	tay
dffc : a524             [ 3] 	lda gr_scrngeom+gr_pixcol
dffe : 4c8ac6           [ 3] 	jmp vdp_poke
e001 :                       gr_point_exit
e001 : 60               [ 6] 	rts
e002 :                       gr_point_mask
e002 : 8040201008040201      	db 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01
                             
                             
                             ;****************************************
                             ;* gr_box
                             ;* Draw a box from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e00a :                       gr_box
e00a : a579             [ 3] 	lda num_a					; If x0,x1 in same byte column
e00c : 29f8             [ 2] 	and #0xf8					; then special handling
e00e : 8537             [ 3] 	sta tmp_b
e010 : a57b             [ 3] 	lda num_a+2
e012 : 29f8             [ 2] 	and #0xf8
e014 : c537             [ 3] 	cmp tmp_b
e016 : f05f             [ 3] 	beq gr_box_tiny_width
                             	; x0, x1 in different byte columns
e018 : a579             [ 3] 	lda num_a					; Get lhs mask
e01a : 2907             [ 2] 	and #7
e01c : aa               [ 2] 	tax
e01d : bd05e1           [ 4] 	lda gr_box_lmask,x
e020 : 8537             [ 3] 	sta tmp_b
e022 : a679             [ 3] 	ldx num_a					; Do top left
e024 : a47a             [ 3] 	ldy num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------------------- bank0.s -----------------------------------

e026 : 20d3e0           [ 6] 	jsr gr_box_plot
e029 : a537             [ 3] 	lda tmp_b
e02b : a679             [ 3] 	ldx num_a					; Do bottom left
e02d : a47c             [ 3] 	ldy num_a+3
e02f : 20d3e0           [ 6] 	jsr gr_box_plot
e032 : a57b             [ 3] 	lda num_a+2					; Get rhs mask
e034 : 2907             [ 2] 	and #7
e036 : aa               [ 2] 	tax
e037 : bd0de1           [ 4] 	lda gr_box_rmask,x
e03a : 8537             [ 3] 	sta tmp_b
e03c : a67b             [ 3] 	ldx num_a+2					; Do top right
e03e : a47a             [ 3] 	ldy num_a+1
e040 : 20d3e0           [ 6] 	jsr gr_box_plot
e043 : a537             [ 3] 	lda tmp_b
e045 : a67b             [ 3] 	ldx num_a+2					; Do bottom right
e047 : a47c             [ 3] 	ldy num_a+3
e049 : 20d3e0           [ 6] 	jsr gr_box_plot
                             	; Do fast horz lines if x0,x1
                             	; are in different byte columns
e04c : a579             [ 3] 	lda num_a					; Byte align x0
e04e : 29f8             [ 2] 	and #0xf8
e050 : 8537             [ 3] 	sta tmp_b
e052 : a57b             [ 3] 	lda num_a+2					; Byte align x1
e054 : 29f8             [ 2] 	and #0xf8
e056 : 8538             [ 3] 	sta tmp_b+1
e058 :                       gr_box_8line
e058 : a538             [ 3] 	lda tmp_b+1					; Move left 1 column
e05a : 38               [ 2] 	sec
e05b : e908             [ 2] 	sbc #8
e05d : 8538             [ 3] 	sta tmp_b+1
e05f : c537             [ 3] 	cmp tmp_b
e061 : f039             [ 3] 	beq gr_box_do_vert			; if columns same then done
e063 : a638             [ 3] 	ldx tmp_b+1					; Do top from right to left
e065 : a47a             [ 3] 	ldy num_a+1
e067 : a9ff             [ 2] 	lda #0xff
e069 : 20d3e0           [ 6] 	jsr gr_box_plot
e06c : a638             [ 3] 	ldx tmp_b+1					; Do top from right to left
e06e : a47c             [ 3] 	ldy num_a+3
e070 : a9ff             [ 2] 	lda #0xff
e072 : 20d3e0           [ 6] 	jsr gr_box_plot
e075 : 80e1             [ 3] 	bra gr_box_8line			; Looping
e077 :                       gr_box_tiny_width
e077 : a579             [ 3] 	lda num_a
e079 : 2907             [ 2] 	and #7
e07b : 48               [ 3] 	pha
e07c : a57b             [ 3] 	lda num_a+2
e07e : 2907             [ 2] 	and #7
e080 : aa               [ 2] 	tax
e081 : bd0de1           [ 4] 	lda gr_box_rmask,x			; Get rhs mask
e084 : fa               [ 4] 	plx
e085 : 3d05e1           [ 4] 	and gr_box_lmask,x			; AND with lhs mask
e088 : 8537             [ 3] 	sta tmp_b					; This is the intra column mask
e08a : a679             [ 3] 	ldx num_a					; Plot top
e08c : a47a             [ 3] 	ldy num_a+1
e08e : 20d3e0           [ 6] 	jsr gr_box_plot
e091 : a67b             [ 3] 	ldx num_a+2					; Plot bottom
e093 : a47c             [ 3] 	ldy num_a+3
e095 : c47a             [ 3] 	cpy num_a+1					; but only if different from top
e097 : f039             [ 3] 	beq gr_box_done				; if top=bottom then finished
e099 : 20d3e0           [ 6] 	jsr gr_box_plot
e09c :                       gr_box_do_vert
                             	; Do the vertical sides of the box
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------------------- bank0.s -----------------------------------

e09c : a579             [ 3] 	lda num_a					; Find bit position of x0 (left)
e09e : 2907             [ 2] 	and #7
e0a0 : aa               [ 2] 	tax							; And get value to write
e0a1 : bd02e0           [ 4] 	lda gr_point_mask,x
e0a4 : 8537             [ 3] 	sta tmp_b
                             	
e0a6 : a57b             [ 3] 	lda num_a+2					; Find bit position of x1 (right
e0a8 : 2907             [ 2] 	and #7
e0aa : aa               [ 2] 	tax							; And get value to write
e0ab : bd02e0           [ 4] 	lda gr_point_mask,x
e0ae : 8538             [ 3] 	sta tmp_b+1
                             
e0b0 : a47a             [ 3] 	ldy num_a+1					; Get y0 coord and save
e0b2 : 8485             [ 3] 	sty num_tmp
e0b4 :                       gr_box_vert
e0b4 : e685             [ 5] 	inc num_tmp					; Increment y first
e0b6 : a485             [ 3] 	ldy num_tmp
e0b8 : c47c             [ 3] 	cpy num_a+3					; if thisY>=y1 then done
e0ba : b016             [ 3] 	bcs gr_box_vert_done
e0bc : a679             [ 3] 	ldx num_a					; Do left side
e0be : a537             [ 3] 	lda tmp_b
e0c0 : 20d3e0           [ 6] 	jsr gr_box_plot
e0c3 : a67b             [ 3] 	ldx num_a+2					; Do right line
e0c5 : e479             [ 3] 	cpx num_a					; Only if not same as lhs
e0c7 : f007             [ 3] 	beq gr_box_skip_rhs
e0c9 : a485             [ 3] 	ldy num_tmp
e0cb : a538             [ 3] 	lda tmp_b+1
e0cd : 20d3e0           [ 6] 	jsr gr_box_plot
e0d0 :                       gr_box_skip_rhs
e0d0 : 80e2             [ 3] 	bra gr_box_vert				; looping
e0d2 :                       gr_box_vert_done
e0d2 :                       gr_box_done
e0d2 : 60               [ 6] 	rts
                             
                             ; Box draw common draw routine
                             ; x,y is pixel coord
                             ; a is the value to write
e0d3 :                       gr_box_plot
e0d3 : 8531             [ 3] 	sta tmp_c					; Save mask to write
e0d5 : 8a               [ 2] 	txa
e0d6 : 98               [ 2] 	tya
e0d7 : 2091de           [ 6] 	jsr gr_getXY_ptr
e0da : da               [ 3] 	phx
e0db : 98               [ 2] 	tya							; A=high byte for peek
e0dc : 2097c6           [ 6] 	jsr vdp_peek				; Get current screen byte
e0df : 8532             [ 3] 	sta tmp_c+1
e0e1 : a622             [ 3] 	ldx gr_scrngeom+gr_pixmode	; Use screen mode
e0e3 : 0531             [ 3] 	ora tmp_c					; Assume mode 1 (or)
e0e5 : e001             [ 2] 	cpx #1						; Done if correct
e0e7 : f00a             [ 3] 	beq gr_box_write
e0e9 : 4531             [ 3] 	eor tmp_c					; Assume mode 0 (eor erases or)
e0eb : e000             [ 2] 	cpx #0						; Done if correct
e0ed : f004             [ 3] 	beq gr_box_write
e0ef : a532             [ 3] 	lda tmp_c+1					; Else eor with source
e0f1 : 4531             [ 3] 	eor tmp_c
e0f3 :                       gr_box_write
e0f3 : fa               [ 4] 	plx							; Restore x, y is intact
e0f4 : 208ac6           [ 6] 	jsr vdp_poke				; Poke the value
e0f7 : 18               [ 2] 	clc							; Calculate the colour table offset
e0f8 : 8a               [ 2] 	txa							; Low byte
e0f9 : 650d             [ 3] 	adc vdp_base+vdp_addr_col
e0fb : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------------------- bank0.s -----------------------------------

e0fc : 98               [ 2] 	tya							; High byte
e0fd : 650e             [ 3] 	adc vdp_base+vdp_addr_col+1
e0ff : a8               [ 2] 	tay
e100 : a524             [ 3] 	lda gr_scrngeom+gr_pixcol	; Colour
e102 : 4c8ac6           [ 3] 	jmp vdp_poke
                             
e105 :                       gr_box_lmask
e105 : ff7f3f1f0f070301      	db 0xff,0x7f,0x3f,0x1f,0x0f,0x07,0x03,0x01
e10d :                       gr_box_rmask
e10d : 80c0e0f0f8fcfeff      	db 0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0xfe,0xff
                             
                             	
                             ;****************************************
                             ;* gr_circle
                             ;* Draw a circle centre x0,y0, radius r
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = r
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e115 :                       gr_circle
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
0079 =                       grc_x0 	= (num_a)
007a =                       grc_y0 	= (num_a+1)
007b =                       grc_r 	= (num_a+2)
007c =                       grc_x 	= (num_a+3)
007e =                       grc_y	= (num_b+1)
007f =                       grc_d	= (num_b+2)
                             
                             	;x = radius
e115 : a57b             [ 3] 	lda grc_r
e117 : 857c             [ 3] 	sta grc_x
                             	;y = 0
e119 : 647e             [ 3] 	stz grc_y
                             	;decision = 1 - x
e11b : a901             [ 2] 	lda #1
e11d : 38               [ 2] 	sec
e11e : e57c             [ 3] 	sbc grc_x
e120 : 857f             [ 3] 	sta grc_d
e122 :                       gr_circle_plot
                             	;while(x >= y)
e122 : a57c             [ 3] 	lda grc_x
e124 : c57e             [ 3] 	cmp grc_y
e126 : 9028             [ 3] 	bcc gr_circle_done
                             	;plot 8 points on current x,y
e128 : 2051e1           [ 6] 	jsr gr_circle_points
                             	;y++
e12b : e67e             [ 5] 	inc grc_y
                             	;if d<=0
e12d : a57f             [ 3] 	lda grc_d
e12f : f013             [ 3] 	beq gr_circle_d_lte0
e131 : 3011             [ 3] 	bmi gr_circle_d_lte0
                             	;else
                             	;x--
e133 : c67c             [ 5] 	dec grc_x
                             	;decision += 2 * (y - x) + 1
e135 : a57e             [ 3] 	lda grc_y
e137 : 38               [ 2] 	sec
e138 : e57c             [ 3] 	sbc grc_x
e13a : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------------------- bank0.s -----------------------------------

e13b : 18               [ 2] 	clc
e13c : 6901             [ 2] 	adc #1
e13e : 657f             [ 3] 	adc grc_d
e140 : 857f             [ 3] 	sta grc_d
e142 : 80de             [ 3] 	bra gr_circle_plot	
e144 :                       gr_circle_d_lte0
                             	;decision += 2 * y + 1
e144 : a57e             [ 3] 	lda grc_y
e146 : 0a               [ 2] 	asl a
e147 : 18               [ 2] 	clc
e148 : 6901             [ 2] 	adc #1
e14a : 657f             [ 3] 	adc grc_d
e14c : 857f             [ 3] 	sta grc_d
e14e : 80d2             [ 3] 	bra gr_circle_plot	
e150 :                       gr_circle_done
e150 : 60               [ 6] 	rts
e151 :                       gr_circle_points
                             ; Local names of temp storage
                             ; to make code easier to read
                             	;DrawPixel( x + x0,  yh + y0);
e151 : a57c             [ 3] 	lda grc_x
e153 : 18               [ 2] 	clc
e154 : 6579             [ 3] 	adc grc_x0
e156 : aa               [ 2] 	tax
e157 : a57e             [ 3] 	lda grc_y
e159 : 18               [ 2] 	clc
e15a : 657a             [ 3] 	adc grc_y0
e15c : a8               [ 2] 	tay
e15d : 20bbdf           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0,  xh + y0);
e160 : a57e             [ 3] 	lda grc_y
e162 : 18               [ 2] 	clc
e163 : 6579             [ 3] 	adc grc_x0
e165 : aa               [ 2] 	tax
e166 : a57c             [ 3] 	lda grc_x
e168 : 18               [ 2] 	clc
e169 : 657a             [ 3] 	adc grc_y0
e16b : a8               [ 2] 	tay
e16c : 20bbdf           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0,  yh + y0);
e16f : a579             [ 3] 	lda grc_x0
e171 : 38               [ 2] 	sec
e172 : e57c             [ 3] 	sbc grc_x
e174 : aa               [ 2] 	tax
e175 : a57e             [ 3] 	lda grc_y
e177 : 18               [ 2] 	clc
e178 : 657a             [ 3] 	adc grc_y0
e17a : a8               [ 2] 	tay
e17b : 20bbdf           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0,  xh + y0);
e17e : a579             [ 3] 	lda grc_x0
e180 : 38               [ 2] 	sec
e181 : e57e             [ 3] 	sbc grc_y
e183 : aa               [ 2] 	tax
e184 : a57c             [ 3] 	lda grc_x
e186 : 18               [ 2] 	clc
e187 : 657a             [ 3] 	adc grc_y0
e189 : a8               [ 2] 	tay
e18a : 20bbdf           [ 6] 	jsr gr_point
                             	;DrawPixel(-x + x0, -yh + y0);
e18d : a579             [ 3] 	lda grc_x0
e18f : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------------------- bank0.s -----------------------------------

e190 : e57c             [ 3] 	sbc grc_x
e192 : aa               [ 2] 	tax
e193 : a57a             [ 3] 	lda grc_y0
e195 : 38               [ 2] 	sec
e196 : e57e             [ 3] 	sbc grc_y
e198 : a8               [ 2] 	tay
e199 : 20bbdf           [ 6] 	jsr gr_point
                             	;DrawPixel(-y + x0, -xh + y0);
e19c : a579             [ 3] 	lda grc_x0
e19e : 38               [ 2] 	sec
e19f : e57e             [ 3] 	sbc grc_y
e1a1 : aa               [ 2] 	tax
e1a2 : a57a             [ 3] 	lda grc_y0
e1a4 : 38               [ 2] 	sec
e1a5 : e57c             [ 3] 	sbc grc_x
e1a7 : a8               [ 2] 	tay
e1a8 : 20bbdf           [ 6] 	jsr gr_point
                             	;DrawPixel( x + x0, -yh + y0);
e1ab : a57c             [ 3] 	lda grc_x
e1ad : 18               [ 2] 	clc
e1ae : 6579             [ 3] 	adc grc_x0
e1b0 : aa               [ 2] 	tax
e1b1 : a57a             [ 3] 	lda grc_y0
e1b3 : 38               [ 2] 	sec
e1b4 : e57e             [ 3] 	sbc grc_y
e1b6 : a8               [ 2] 	tay
e1b7 : 20bbdf           [ 6] 	jsr gr_point
                             	;DrawPixel( y + x0, -xh + y0);
e1ba : a57e             [ 3] 	lda grc_y
e1bc : 18               [ 2] 	clc
e1bd : 6579             [ 3] 	adc grc_x0
e1bf : aa               [ 2] 	tax
e1c0 : a57a             [ 3] 	lda grc_y0
e1c2 : 38               [ 2] 	sec
e1c3 : e57c             [ 3] 	sbc grc_x
e1c5 : a8               [ 2] 	tay
e1c6 : 20bbdf           [ 6] 	jsr gr_point
e1c9 : 60               [ 6] 	rts
                             
                             	
                             	
                             ;****************************************
                             ;* gr_line
                             ;* Draw a line from x0,y0 -> x1,y1
                             ;* Input :	num_a   = x0
                             ;*			num_a+1 = y0
                             ;*			num_a+2 = x1
                             ;*			num_a+3 = y1
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e1ca :                       gr_line
                             
                             ; Local definitions of temp space to make
                             ; the rest of the code easier to read
0079 =                       grl_x0 	= (num_a)
007a =                       grl_y0 	= (num_a+1)
007b =                       grl_x1 	= (num_a+2)
007c =                       grl_y1 	= (num_a+3)
007e =                       grl_dx	= (num_b+1)
007f =                       grl_dy	= (num_b+2)
0080 =                       grl_xyyx= (num_b+3)
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------------------- bank0.s -----------------------------------

0081 =                       grl_2dx	= (num_x)
0083 =                       grl_2dy	= (num_x+2)
0085 =                       grl_2dxy= (num_tmp)
0087 =                       grl_inx	= (num_tmp+2)
0088 =                       grl_iny = (num_tmp+3)
0089 =                       grl_p	= (num_buf)
                             
e1ca : 6480             [ 3] 	stz grl_xyyx				; Assume normal xy axis
                             	
                             ;    int dx, dy, p, x, y;
                             	; check if abs(dy)>abs(dx) if so need to swap xy
                             	; num_b = abs(x), num_b+1 = abs(dy)
e1cc : 38               [ 2] 	sec
e1cd : a57b             [ 3] 	lda grl_x1
e1cf : e579             [ 3] 	sbc grl_x0
e1d1 : b003             [ 3] 	bcs gr_line_skip_dx_neg
e1d3 : 49ff             [ 2] 	eor #0xff
e1d5 : 1a               [ 2] 	inc a
e1d6 :                       gr_line_skip_dx_neg
e1d6 : 857e             [ 3] 	sta grl_dx
e1d8 : 38               [ 2] 	sec
e1d9 : a57c             [ 3] 	lda grl_y1
e1db : e57a             [ 3] 	sbc grl_y0
e1dd : b003             [ 3] 	bcs gr_line_skip_dy_neg
e1df : 49ff             [ 2] 	eor #0xff
e1e1 : 1a               [ 2] 	inc a
e1e2 :                       gr_line_skip_dy_neg
e1e2 : 857f             [ 3] 	sta grl_dy
e1e4 : c57e             [ 3] 	cmp grl_dx
e1e6 : 901a             [ 4] 	bcc gr_line_skip_xy_swap
                             	; swap xy axes and also dx and dy
e1e8 : a579             [ 3] 	lda grl_x0					; swap x0 and y0
e1ea : a67a             [ 3] 	ldx grl_y0
e1ec : 857a             [ 3] 	sta grl_y0
e1ee : 8679             [ 3] 	stx grl_x0
e1f0 : a57b             [ 3] 	lda grl_x1					; swap x1 and y1
e1f2 : a67c             [ 3] 	ldx grl_y1
e1f4 : 857c             [ 3] 	sta grl_y1
e1f6 : 867b             [ 3] 	stx grl_x1
e1f8 : a57e             [ 3] 	lda grl_dx					; swap dy and dx
e1fa : a67f             [ 3] 	ldx grl_dy
e1fc : 857f             [ 3] 	sta grl_dy
e1fe : 867e             [ 3] 	stx grl_dx
e200 : e680             [ 5] 	inc grl_xyyx				; set flag to Not Z to know abou
                             	
e202 :                       gr_line_skip_xy_swap	
                             	; assume going from left to right
e202 : a901             [ 2] 	lda #1
e204 : 8587             [ 3] 	sta grl_inx
e206 : a579             [ 3] 	lda grl_x0
e208 : c57b             [ 3] 	cmp grl_x1
e20a : 9004             [ 3] 	bcc gr_line_skip_x_swap
e20c : a9ff             [ 2] 	lda #0xff					; make x increment negative
e20e : 8587             [ 3] 	sta grl_inx
                             	
e210 :                       gr_line_skip_x_swap
                             	; assume going from top to bottom
e210 : a901             [ 2] 	lda #1
e212 : 8588             [ 3] 	sta grl_iny
e214 : a57a             [ 3] 	lda grl_y0
e216 : c57c             [ 3] 	cmp grl_y1
e218 : 9004             [ 3] 	bcc gr_line_skip_y_up
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------------------- bank0.s -----------------------------------

e21a : a9ff             [ 2] 	lda #0xff					; make y increment negative
e21c : 8588             [ 3] 	sta grl_iny
                             
e21e :                       gr_line_skip_y_up
e21e : a57e             [ 3] 	lda grl_dx
e220 : 0a               [ 2] 	asl a
e221 : 8581             [ 3] 	sta grl_2dx					; 2*dx (word)
e223 : 6482             [ 3] 	stz grl_2dx+1
e225 : 2682             [ 5] 	rol grl_2dx+1
                             
e227 : a57f             [ 3] 	lda grl_dy
e229 : 0a               [ 2] 	asl a
e22a : 8583             [ 3] 	sta grl_2dy					; 2*dy (word)
e22c : 6484             [ 3] 	stz grl_2dy+1
e22e : 2684             [ 5] 	rol grl_2dy+1
                             	
                             ;    p=2*dy-dx;					; p (word)
e230 : 38               [ 2] 	sec
e231 : a583             [ 3] 	lda grl_2dy
e233 : e57e             [ 3] 	sbc grl_dx
e235 : 8589             [ 3] 	sta grl_p
e237 : a584             [ 3] 	lda grl_2dy+1
e239 : e900             [ 2] 	sbc #0
e23b : 858a             [ 3] 	sta grl_p+1
                             	
                             ;   2*(dy-dx)					; num_tmp+2 = 2*(dy-dx)
e23d : 38               [ 2] 	sec
e23e : a583             [ 3] 	lda grl_2dy
e240 : e581             [ 3] 	sbc grl_2dx
e242 : 8585             [ 3] 	sta grl_2dxy
e244 : a584             [ 3] 	lda grl_2dy+1
e246 : e582             [ 3] 	sbc grl_2dx+1
e248 : 8586             [ 3] 	sta grl_2dxy+1
                             
e24a :                       gr_line_pixel
                             	; plot the current pixel position
e24a : a679             [ 3] 	ldx grl_x0
e24c : a47a             [ 3] 	ldy grl_y0
e24e : a580             [ 3] 	lda grl_xyyx				; is xy swapped?
e250 : f004             [ 3] 	beq gr_skip_xy_swap2
e252 : a67a             [ 3] 	ldx grl_y0
e254 : a479             [ 3] 	ldy grl_x0	
e256 :                       gr_skip_xy_swap2
e256 : 20bbdf           [ 6] 	jsr gr_point
                             	
e259 : a579             [ 3] 	lda grl_x0					; Check if done
e25b : c57b             [ 3] 	cmp grl_x1
e25d : f030             [ 3] 	beq gr_line_done
                             
                             	; check sign of p
e25f : a58a             [ 3] 	lda grl_p+1
e261 : 3016             [ 3] 	bmi gr_line_neg_p
                             
                             	; if p >=0
                             	
                             	; y=y+increment
e263 : 18               [ 2] 	clc
e264 : a57a             [ 3] 	lda grl_y0
e266 : 6588             [ 3] 	adc grl_iny
e268 : 857a             [ 3] 	sta grl_y0
                             
                             	; p=p+2*dy-2*dx
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------------------- bank0.s -----------------------------------

                             	_addZPWord grl_p,grl_2dxy
                             
e277 : 800d             [ 3] 	bra gr_line_incx
                             
e279 :                       gr_line_neg_p
                             	; if p < 0
                             	; p=p+2*dy
                             	_addZPWord grl_p,grl_2dy
                             
                             	
e286 :                       gr_line_incx
e286 : 18               [ 2] 	clc
e287 : a579             [ 3] 	lda grl_x0
e289 : 6587             [ 3] 	adc grl_inx
e28b : 8579             [ 3] 	sta grl_x0
e28d : 80bb             [ 3] 	bra gr_line_pixel
e28f :                       gr_line_done
e28f : 60               [ 6] 	rts
                             	
                             
                             ;    while(x<x1)
                             ;    {
                             ;        if(p>=0)
                             ;        {
                             ;            putpixel(x,y,7);
                             ;            y=y+1;
                             ;            p=p+2*dy-2*dx;
                             ;        }
                             ;        else
                             ;        {
                             ;            putpixel(x,y,7);
                             ;            p=p+2*dy;
                             ;        }
                             ;        x=x+1;
                             ;    }
                             
                             
                             ;****************************************
                             ;* gr_scroll_up
                             ;* Scroll screen one line up
                             ;****************************************
e290 :                       gr_scroll_up
e290 : e606             [ 5] 	inc vdp_curoff
                             	
                             	; Get VDP Address of line + 1 line (source addr)
e292 : 18               [ 2] 	clc
e293 : a517             [ 3] 	lda gr_scrngeom+gr_screen_start
e295 : 651b             [ 3] 	adc gr_scrngeom+gr_screen_w
e297 : 8533             [ 3] 	sta tmp_v1
e299 : a518             [ 3] 	lda gr_scrngeom+gr_screen_start+1
e29b : 6900             [ 2] 	adc #0
e29d : 8534             [ 3] 	sta tmp_v1+1
                             	
                             	; Get destinaton address = first line of screen
e29f : a517             [ 3] 	lda gr_scrngeom+gr_screen_start
e2a1 : 8537             [ 3] 	sta tmp_b
e2a3 : a518             [ 3] 	lda gr_scrngeom+gr_screen_start+1
e2a5 : 8538             [ 3] 	sta tmp_b+1
                             	
e2a7 : a41c             [ 3] 	ldy gr_scrngeom+gr_screen_h
e2a9 : 88               [ 2] 	dey
                             	
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------------------- bank0.s -----------------------------------

e2aa : 78               [ 2] 	sei						; Stop IRQ as it messes with VDP
                             	; Only use vdp primitives inside sei,cli
                             
                             	; Restore what was underneath cursor
e2ab : a620             [ 3] 	ldx gr_scrngeom+gr_cur_ptr
e2ad : a521             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
e2af : 205dc6           [ 6] 	jsr vdp_wr_addr
e2b2 : a508             [ 3] 	lda vdp_curval
e2b4 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             
e2b7 :                       gr_scroll_cpy_ln
                             	; Set VDP with source address to read
e2b7 : a633             [ 3] 	ldx tmp_v1
e2b9 : a534             [ 3] 	lda tmp_v1+1
e2bb : 2075c6           [ 6] 	jsr vdp_rd_addr
                             
                             	; Read in a line worth of screen
e2be : a61b             [ 3] 	ldx gr_scrngeom+gr_screen_w
e2c0 :                       gr_scroll_read_ln
e2c0 : 2080c6           [ 6] 	jsr vdp_rd_vram
e2c3 : 9d8009           [ 5] 	sta scratch+128,x			; +128 to avoid string corru
e2c6 : ca               [ 2] 	dex
e2c7 : d0f7             [ 3] 	bne gr_scroll_read_ln
                             
                             	; Set VDP with destinaton to write
e2c9 : a637             [ 3] 	ldx tmp_b
e2cb : a538             [ 3] 	lda tmp_b+1
e2cd : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
                             	; Write out a line worth of screen
e2d0 : a61b             [ 3] 	ldx gr_scrngeom+gr_screen_w
e2d2 :                       gr_scroll_write_ln
e2d2 : bd8009           [ 4] 	lda scratch+128,x
e2d5 : 2085c6           [ 6] 	jsr vdp_wr_vram
e2d8 : ca               [ 2] 	dex
e2d9 : d0f7             [ 3] 	bne gr_scroll_write_ln
                             
                             	; Update source address
e2db : 18               [ 2] 	clc
e2dc : a533             [ 3] 	lda tmp_v1
e2de : 651b             [ 3] 	adc gr_scrngeom+gr_screen_w
e2e0 : 8533             [ 3] 	sta tmp_v1
e2e2 : a534             [ 3] 	lda tmp_v1+1
e2e4 : 6900             [ 2] 	adc #0
e2e6 : 8534             [ 3] 	sta tmp_v1+1
                             	; Update destinaton address
e2e8 : 18               [ 2] 	clc
e2e9 : a537             [ 3] 	lda tmp_b
e2eb : 651b             [ 3] 	adc gr_scrngeom+gr_screen_w
e2ed : 8537             [ 3] 	sta tmp_b
e2ef : a538             [ 3] 	lda tmp_b+1
e2f1 : 6900             [ 2] 	adc #0
e2f3 : 8538             [ 3] 	sta tmp_b+1
                             
                             	; One line complete
e2f5 : 88               [ 2] 	dey
e2f6 : d0bf             [ 3] 	bne gr_scroll_cpy_ln
                             	
                             	; VDP is pointing at last line
                             	; Needs to be filled with blank
e2f8 : a509             [ 3] 	lda vdp_blank
e2fa : 8508             [ 3] 	sta vdp_curval			; Also this is the cursor value
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------------------- bank0.s -----------------------------------

e2fc : a61b             [ 3] 	ldx gr_scrngeom+gr_screen_w
e2fe :                       gr_scroll_erase_ln
e2fe : 2085c6           [ 6] 	jsr vdp_wr_vram
e301 : ca               [ 2] 	dex
e302 : d0fa             [ 4] 	bne gr_scroll_erase_ln
                             
e304 : 58               [ 2] 	cli			; Enable IRQ
                             
e305 : c606             [ 5] 	dec vdp_curoff
                             
e307 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_right
                             ;* Advance cursor position
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e308 :                       gr_cur_right
                             	_pushAXY
                             
                             	; Load cursor x,y position
e30b : a61e             [ 3] 	ldx gr_scrngeom+gr_cur_x
e30d : a41f             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             
                             	; Move cursor right
e30f : e8               [ 2] 	inx
                             	; Check if reached past edge of line
e310 : e41b             [ 3] 	cpx gr_scrngeom+gr_screen_w
e312 : d00f             [ 3] 	bne gr_adv_skip_nl
                             	; If got here then wrap to next line
e314 : a200             [ 2] 	ldx #0
e316 : c8               [ 2] 	iny
e317 : c41c             [ 3] 	cpy gr_scrngeom+gr_screen_h
e319 : d008             [ 3] 	bne gr_adv_skip_nl
                             	; If got here then screen needs to scroll
e31b : 88               [ 2] 	dey					; First put y back in bound
e31c : da               [ 3] 	phx
e31d : 5a               [ 3] 	phy
e31e : 2090e2           [ 6] 	jsr gr_scroll_up
e321 : 7a               [ 4] 	ply
e322 : fa               [ 4] 	plx
e323 :                       gr_adv_skip_nl
e323 : 20fade           [ 6] 	jsr gr_set_cur
                             	_pullAXY
                             
e329 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_left
                             ;* Advance cursor left
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e32a :                       gr_cur_left
                             	_pushAXY
                             
                             	; Load cursor x,y position, load X last to check
e32d : a41f             [ 3] 	ldy gr_scrngeom+gr_cur_y
e32f : a61e             [ 3] 	ldx gr_scrngeom+gr_cur_x
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------------------- bank0.s -----------------------------------

                             	
                             	; Decrement screen pointer
                             	; Move cursor left
e331 : d007             [ 3] 	bne gr_cur_skip_at_left		; If already at the lef
e333 : c000             [ 2] 	cpy #0						; If already at the top left
e335 : f007             [ 3] 	beq gr_cur_skip_at_tl
e337 : 88               [ 2] 	dey
e338 : a61b             [ 3] 	ldx gr_scrngeom+gr_screen_w
e33a :                       gr_cur_skip_at_left
e33a : ca               [ 2] 	dex
e33b : 20fade           [ 6] 	jsr gr_set_cur
                             
e33e :                       gr_cur_skip_at_tl	
                             	_pullAXY
                             
e341 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_up
                             ;* Advance cursor up
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e342 :                       gr_cur_up
                             	_pushAXY
                             
                             	; Load cursor x,y position, load Y last to check
e345 : a61e             [ 3] 	ldx gr_scrngeom+gr_cur_x
e347 : a41f             [ 3] 	ldy gr_scrngeom+gr_cur_y
                             	
e349 : f004             [ 3] 	beq gr_cur_skip_at_top	; If already at the top, 
e34b : 88               [ 2] 	dey
e34c : 20fade           [ 6] 	jsr gr_set_cur
                             	
e34f :                       gr_cur_skip_at_top	
                             	_pullAXY
                             
e352 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* gr_cur_down
                             ;* Advance cursor down
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e353 :                       gr_cur_down
                             	_pushAXY
                             
                             	; Load cursor x,y position
e356 : a61e             [ 3] 	ldx gr_scrngeom+gr_cur_x
e358 : a41f             [ 3] 	ldy gr_scrngeom+gr_cur_y
e35a : c8               [ 2] 	iny
e35b : c41c             [ 3] 	cpy gr_scrngeom+gr_screen_h			; If already at  b
e35d : f003             [ 3] 	beq gr_cur_skip_at_bot				; then don't do anythi
                             	
e35f : 20fade           [ 6] 	jsr gr_set_cur
                             
e362 :                       gr_cur_skip_at_bot
                             	_pullAXY
                             
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------------------- bank0.s -----------------------------------

e365 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_new_ln
                             ;* Carry out a new line
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e366 :                       gr_new_ln
                             	_pushAXY
                             
                             	; X pos is zero, Y needs to increment
e369 : a200             [ 2] 	ldx #0
e36b : a41f             [ 3] 	ldy gr_scrngeom+gr_cur_y
e36d : c8               [ 2] 	iny
e36e : c41c             [ 3] 	cpy gr_scrngeom+gr_screen_h
e370 : d008             [ 3] 	bne gr_nl_skip_nl
                             	; If got here then screen needs to scroll
e372 : 88               [ 2] 	dey
e373 : da               [ 3] 	phx
e374 : 5a               [ 3] 	phy
e375 : 2090e2           [ 6] 	jsr gr_scroll_up
e378 : 7a               [ 4] 	ply
e379 : fa               [ 4] 	plx
e37a :                       gr_nl_skip_nl
e37a : 20fade           [ 6] 	jsr gr_set_cur
                             	_pullAXY
                             
e380 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* gr_del
                             ;* Action del
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e381 :                       gr_del
                             	_pushAXY
                             
e384 : 202ae3           [ 6] 	jsr gr_cur_left
e387 : a920             [ 2] 	lda #' '							; Put a space
e389 : 20e0de           [ 6] 	jsr gr_put
                             	_pullAXY
                             
e38f : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* gr_get_key
                             ;* Waits for a key press, C=1 synchronous
                             ;* A = Key code
                             ;****************************************
e390 :                       gr_get_key
e390 : 20b1d3           [ 6] 	jsr kb_get_key
e393 : b007             [ 3] 	bcs gr_key_no_key
e395 : c906             [ 2] 	cmp #UTF_ACK						; Copy key pressed?
e397 : d002             [ 3] 	bne gr_not_copy
e399 : a508             [ 3] 	lda vdp_curval						; If yes the get char under 
e39b :                       gr_not_copy
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------------------- bank0.s -----------------------------------

e39b : 18               [ 2] 	clc
e39c :                       gr_key_no_key
e39c : 60               [ 6] 	rts	
                             	
                             ;****************************************
                             ;* gr_put_byte
                             ;* Put a byte out
                             ;* Input : A = Byte to put
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
e39d :                       gr_put_byte
e39d : c97f             [ 2] 	cmp #UTF_DEL			; Del key
e39f : f004             [ 3] 	beq gr_process_special
e3a1 : c920             [ 2] 	cmp #32					; Special char?
e3a3 : b032             [ 3] 	bcs gr_pb_notspecial	; >=32 == carry clear
                             
e3a5 :                       gr_process_special
e3a5 : c90d             [ 2] 	cmp #UTF_CR				; New line?
e3a7 : d003             [ 3] 	bne gr_skip_new_ln
e3a9 : 4c66e3           [ 3] 	jmp gr_new_ln
e3ac :                       gr_skip_new_ln
e3ac : c97f             [ 2] 	cmp #UTF_DEL			; Delete?
e3ae : d003             [ 3] 	bne gr_skip_del
e3b0 : 4c81e3           [ 3] 	jmp gr_del
e3b3 :                       gr_skip_del
e3b3 : c908             [ 2] 	cmp #CRSR_LEFT
e3b5 : d003             [ 3] 	bne gr_skip_left
e3b7 : 4c2ae3           [ 3] 	jmp gr_cur_left
e3ba :                       gr_skip_left
e3ba : c909             [ 2] 	cmp #CRSR_RIGHT
e3bc : d003             [ 3] 	bne gr_skip_right
e3be : 4c08e3           [ 3] 	jmp gr_cur_right
e3c1 :                       gr_skip_right
e3c1 : c90b             [ 2] 	cmp #CRSR_UP
e3c3 : d003             [ 3] 	bne gr_skip_up
e3c5 : 4c42e3           [ 3] 	jmp gr_cur_up
e3c8 :                       gr_skip_up
e3c8 : c90a             [ 2] 	cmp #CRSR_DOWN
e3ca : d003             [ 3] 	bne gr_skip_down
e3cc : 4c53e3           [ 3] 	jmp gr_cur_down
e3cf :                       gr_skip_down
e3cf : c90c             [ 2] 	cmp #UTF_FF
e3d1 : d003             [ 3] 	bne gr_skip_cls
e3d3 : 4c6cde           [ 3] 	jmp gr_cls
e3d6 :                       gr_skip_cls
e3d6 : 60               [ 6] 	rts
                             
                             ;	Normal caracter processing here.
e3d7 :                       gr_pb_notspecial
                             	_pushAXY
                             
                             	
                             	; Place in current position and move right
e3da : 20e0de           [ 6] 	jsr gr_put
e3dd : 2008e3           [ 6] 	jsr gr_cur_right
                             
                             	_pullAXY
                             
                             	
e3e3 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------------------- bank0.s -----------------------------------

                             ;* These tables are to speed up calculating the 
                             ;* offset for plot commands, rather than using
                             ;* a series of left shifts and additions.
                             ;* Not sure if it is worth the 96 bytes :-O
e3e4 :                       gr_offset_40lo
e3e4 : 00285078              	db lo(0*40), lo(1*40), lo(2*40), lo(3*40)
e3e8 : a0c8f018              	db lo(4*40), lo(5*40), lo(6*40), lo(7*40)
e3ec : 406890b8              	db lo(8*40), lo(9*40), lo(10*40), lo(11*40)
e3f0 : e0083058              	db lo(12*40), lo(13*40), lo(14*40), lo(15*40)
e3f4 : 80a8d0f8              	db lo(16*40), lo(17*40), lo(18*40), lo(19*40)
e3f8 : 20487098              	db lo(20*40), lo(21*40), lo(22*40), lo(23*40)
e3fc :                       gr_offset_40hi
e3fc : 00000000              	db hi(0*40), hi(1*40), hi(2*40), hi(3*40)
e400 : 00000001              	db hi(4*40), hi(5*40), hi(6*40), hi(7*40)
e404 : 01010101              	db hi(8*40), hi(9*40), hi(10*40), hi(11*40)
e408 : 01020202              	db hi(12*40), hi(13*40), hi(14*40), hi(15*40)
e40c : 02020202              	db hi(16*40), hi(17*40), hi(18*40), hi(19*40)
e410 : 03030303              	db hi(20*40), hi(21*40), hi(22*40), hi(23*40)
e414 :                       gr_offset_32lo
e414 : 00204060              	db lo(0*32), lo(1*32), lo(2*32), lo(3*32)
e418 : 80a0c0e0              	db lo(4*32), lo(5*32), lo(6*32), lo(7*32)
e41c : 00204060              	db lo(8*32), lo(9*32), lo(10*32), lo(11*32)
e420 : 80a0c0e0              	db lo(12*32), lo(13*32), lo(14*32), lo(15*32)
e424 : 00204060              	db lo(16*32), lo(17*32), lo(18*32), lo(19*32)
e428 : 80a0c0e0              	db lo(20*32), lo(21*32), lo(22*32), lo(23*32)
e42c :                       gr_offset_32hi
e42c : 00000000              	db hi(0*32), hi(1*32), hi(2*32), hi(3*32)
e430 : 00000000              	db hi(4*32), hi(5*32), hi(6*32), hi(7*32)
e434 : 01010101              	db hi(8*32), hi(9*32), hi(10*32), hi(11*32)
e438 : 01010101              	db hi(12*32), hi(13*32), hi(14*32), hi(15*32)
e43c : 02020202              	db hi(16*32), hi(17*32), hi(18*32), hi(19*32)
e440 : 02020202              	db hi(20*32), hi(21*32), hi(22*32), hi(23*32)
                             	
e444 :                       mod_sz_graph_e
                             
                             
                             	; End of Code
e444 :                       _code_end
e444 :                       _bank0_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
