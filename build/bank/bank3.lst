AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank3.s -----------------------------------

5507 lines read, no errors in pass 1.
c000 =                       _bank0_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank3.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank3.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank3.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank3.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank3.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank3.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank3.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank3.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank3.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank3.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank3.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank3.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank3.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank3.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank3.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank3.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank3.s -----------------------------------

                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank3.s -----------------------------------

008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank3.s -----------------------------------

                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank3.s -----------------------------------

0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : 63c7                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : 6bcb                  	fcw init			; 0xfffc : Reset Vector
fffe : c3c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
c000 : 00                    	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank3.s -----------------------------------

                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4cc0c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4cbdc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4c50c6           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c8ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c97c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4cf9c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4ca1c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4c5dc6           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c75c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f267, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d80b, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d59b, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d62e, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d537, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d4f6, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d213, 2
                             
c0d6 :                       _fs_open_read_w
                              _bankjsr $d3e2, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d4a6, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank3.s -----------------------------------

c106 :                       _fs_put_byte_w
                              _bankjsr $d36f, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $d056, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d08c, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $d011, 2
                             
c166 :                       _get_byte
                              _bankjsr $d25b, 0
                             
c17e :                       _put_byte
                              _bankjsr $d270, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e390, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e39d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $de59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d27d, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d208, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d239, 0
                             
c226 :                       _init_fs
                              _bankjsr $ceee, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cbe8, 2
                             
c256 :                       _init_snd
                              _bankjsr $d646, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d28f, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d29e, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d309, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cbf1, 0
                             
c2ce :                       _gr_cls
                              _bankjsr $de6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $de16, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank3.s -----------------------------------

                             
c2fe :                       _gr_line
                              _bankjsr $e1ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $e00a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e115, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ded7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $df15, 0
                             
c376 :                       _gr_point
                              _bankjsr $dfbb, 0
                             
c38e :                       _gr_get
                              _bankjsr $def2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $defa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d63f, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c6f9, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c6a1, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c697, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c68a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $dc00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d465, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d5cb, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d51c, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d636, 0
                             
c4ae :                       _rtc_nvwrite
                              _bankjsr $d61e, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d642, 2
                             
c4de :                       _sd_sendcmd17
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank3.s -----------------------------------

                              _bankjsr $cdc0, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $ce39, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cbe8, 0
                             
c526 :                       _PT3INIT
                              _bankjsr $e009, 3
                             
c53e :                       _PT3START
                              _bankjsr $e000, 3
                             
c556 :                       _PT3PAUSE
                              _bankjsr $e003, 3
                             
c56e :                       _PT3RESUME
                              _bankjsr $e006, 3
                             
c586 :                       mod_sz_autogen_e
                             
                             	
c586 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c586 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank3.s -----------------------------------

                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c586 :                       io_init
c586 : a900             [ 2] 	lda #0				; Assume it's serial
c588 : 48               [ 3] 	pha
c589 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c58c : 2910             [ 2] 	and #0x10
c58e : d00b             [ 3] 	bne io_init_set_default
c590 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c593 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c595 : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c597 : 68               [ 4] 	pla
c598 : a901             [ 2] 	lda #1
c59a : 48               [ 3] 	pha
c59b :                       io_init_set_default
c59b : 68               [ 4] 	pla
c59c : 8d000c           [ 4] 	sta io_default
c59f : 4ca2c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c5a2 :                       io_set_default			; Entry point for default
c5a2 : ad000c           [ 4] 	lda io_default
c5a5 :                       io_active_device		; Entry point for A set
c5a5 : 0a               [ 2] 	asl	a				; x16 the Block number
c5a6 : 0a               [ 2] 	asl a
c5a7 : 0a               [ 2] 	asl a
c5a8 : 0a               [ 2] 	asl a
c5a9 : a8               [ 2] 	tay
c5aa : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c5ac :                       io_copy_data
c5ac : b920c6           [ 4] 	lda io_devices,y
c5af : 9d010c           [ 5] 	sta io_block,x
c5b2 : c8               [ 2] 	iny
c5b3 : e8               [ 2] 	inx
c5b4 : e010             [ 2] 	cpx #io_struct
c5b6 : d0f4             [ 3] 	bne io_copy_data
                             	
c5b8 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c5ba : 854a             [ 3] 	sta buf_ef
c5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c5bd :                       io_get_ch
c5bd : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank3.s -----------------------------------

                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c5c0 :                       io_put_ch
c5c0 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c3 :                       io_open_read
c5c3 : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c6 :                       io_open_write
c5c6 : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c9 :                       io_close
c5c9 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5cc :                       io_delete
c5cc : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c5cf :                       io_read_line
c5cf : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c5d1 : 8548             [ 3] 	sta buf_adr+1
c5d3 : 8449             [ 3] 	sty buf_sz			; Max length
c5d5 : 08               [ 3] 	php					; Save echo state
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank3.s -----------------------------------

c5d6 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c5d8 :                       io_get_line_byte
c5d8 : 38               [ 2] 	sec					; Getting bytes synchronously
c5d9 : 20bdc5           [ 6] 	jsr io_get_ch		; Get a byte
c5dc : b026             [ 4] 	bcs io_get_line_done; Got nothing then finish
c5de : 28               [ 4] 	plp					; Get echo state
c5df : 08               [ 3] 	php					; Instantly save it back
c5e0 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c5e2 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c5e4 : d005             [ 3] 	bne io_do_echo
c5e6 : c000             [ 2] 	cpy #0				; Already at beginning?
c5e8 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c5ea : 88               [ 2] 	dey					; Else decrement length
c5eb :                       io_do_echo
c5eb : 20c0c5           [ 6] 	jsr io_put_ch		; Echo it
c5ee :                       io_skip_echo
c5ee : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c5f0 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c5f2 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c5f4 : f003             [ 3] 	beq io_skip_special
c5f6 : 9147             [ 5] 	sta (buf_adr),y		; Save it
c5f8 : c8               [ 2] 	iny					; Increase length
c5f9 :                       io_skip_special
c5f9 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c5fb : f007             [ 4] 	beq io_get_line_done	; If yes then done
c5fd : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c5ff : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c601 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c602 : 38               [ 2] 	sec					; Yes, set carry flag
c603 : 60               [ 6] 	rts					; And done
c604 :                       io_get_line_done
c604 : a900             [ 2] 	lda #0
c606 : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c608 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c609 : 18               [ 2] 	clc					; Clear carry flag
c60a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c60b :                       io_print_line
c60b : 48               [ 3] 	pha
                             
c60c : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c60e : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c610 : a000             [ 2] 	ldy #0						; Start at the beginning!
c612 :                       io_print_line_byte
c612 : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c614 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c616 : 20c0c5           [ 6] 	jsr io_put_ch				; Transmit
c619 : c8               [ 2] 	iny
c61a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c61c :                       io_print_done
c61c : 68               [ 4] 	pla
c61d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank3.s -----------------------------------

c61e :                       io_null_op
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c620 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c620 :                       io_device0					; Serial device, input = Ser, outp
c620 : 66c1                  	dw	_get_byte			; io_get_ch
c622 : 7ec1                  	dw	_put_byte			; io_put_ch
c624 : 1ec6                  	dw	io_null_op			; io_open_r
c626 : 1ec6                  	dw	io_null_op			; io_open_w
c628 : 1ec6                  	dw	io_null_op			; io_close_f
c62a : 1ec6                  	dw	io_null_op			; io_del_f
c62c : 1ec6                  	dw	io_null_op			; io_ext1
c62e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c630 :                       io_device1					; Default device, input = screen e
c630 : 96c1                  	dw	_gr_get_key			; io_get_ch
c632 : aec1                  	dw	_gr_put_byte		; io_put_ch
c634 : 1ec6                  	dw	io_null_op			; io_open_r
c636 : 1ec6                  	dw	io_null_op			; io_open_w
c638 : 1ec6                  	dw	io_null_op			; io_close_f
c63a : 1ec6                  	dw	io_null_op			; io_del_f
c63c : 1ec6                  	dw	io_null_op			; io_ext1
c63e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c640 :                       io_device2					; SD device, input = SD, output = 
c640 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c642 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c644 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c646 : eec0                  	dw	_fs_open_write_w	; io_open_w
c648 : a6c0                  	dw	_fs_close_w			; io_close_f
c64a : 8ec0                  	dw	_fs_delete_w		; io_del_f
c64c : 1ec6                  	dw	io_null_op			; io_ext1
c64e : 1ec6                  	dw	io_null_op			; io_ext2
                             
c650 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank3.s -----------------------------------

                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c650 :                       vdp_wr_reg
c650 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c653 : ea               [ 2] 	nop
c654 : ea               [ 2] 	nop
c655 : 0980             [ 2] 	ora #0x80
c657 : 8d0105           [ 4] 	sta VDP_MODE1
c65a : 4980             [ 2] 	eor #0x80
c65c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c65d :                       vdp_wr_addr
c65d : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c660 : ea               [ 2] 	nop
c661 : ea               [ 2] 	nop
c662 : ea               [ 2] 	nop
c663 : 0940             [ 2] 	ora #0x40		; Required by VDP
c665 : 8d0105           [ 4] 	sta VDP_MODE1
c668 : 4940             [ 2] 	eor #0x40		; Undo that bit
c66a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c66b :                       vdp_mem_wait
c66b : da               [ 3] 	phx								; 3
c66c : a616             [ 3] 	ldx vdp_delay					; 3
c66e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c670 :                       vdp_mem_wait_loop
c670 : ca               [ 2] 	dex								; 2
c671 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c673 :                       vdp_mem_wait_end
c673 : fa               [ 4] 	plx								; 3
c674 : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank3.s -----------------------------------

                             ;* Regs affected : None
                             ;****************************************
c675 :                       vdp_rd_addr
c675 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c678 : ea               [ 2] 	nop
c679 : ea               [ 2] 	nop
c67a : ea               [ 2] 	nop
c67b : 8d0105           [ 4] 	sta VDP_MODE1
c67e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c680 :                       vdp_rd_vram
c680 : ad0005           [ 4] 	lda VDP_VRAM
c683 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c685 :                       vdp_wr_vram
c685 : 8d0005           [ 4] 	sta VDP_VRAM
c688 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c68a :                       vdp_poke
c68a : 08               [ 3] 	php
c68b : 48               [ 3] 	pha
c68c : 98               [ 2] 	tya
c68d : 78               [ 2] 	sei
c68e : 205dc6           [ 6] 	jsr vdp_wr_addr
c691 : 68               [ 4] 	pla
c692 : 2085c6           [ 6] 	jsr vdp_wr_vram
c695 : 28               [ 4] 	plp
c696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c697 :                       vdp_peek
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank3.s -----------------------------------

c697 : 08               [ 3] 	php
c698 : 78               [ 2] 	sei
c699 : 2075c6           [ 6] 	jsr vdp_rd_addr
c69c : 2080c6           [ 6] 	jsr vdp_rd_vram
c69f : 28               [ 4] 	plp
c6a0 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6a1 :                       snd_set
c6a1 : 48               [ 3] 	pha
                             
c6a2 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6a4 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6a7 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6aa : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6ad : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6af : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6b1 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6b4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6b6 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c6b9 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c6bc : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c6be : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c6c1 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6c3 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6c6 : 68               [ 4] 	pla
                             	
c6c7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank3.s -----------------------------------

                             ;* Regs affected : None
                             ;****************************************
c6c8 :                       snd_get
c6c8 : 48               [ 3] 	pha
                             
c6c9 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6cb : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6ce : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6d1 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6d4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6d6 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6d8 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6db : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6dd : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6e0 : a900             [ 2] 	lda #0x00				; Set Port A to input
c6e2 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6e5 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6e8 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6ea : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c6ec : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6ef : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c6f2 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6f4 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6f7 : 68               [ 4] 	pla
                             	
c6f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c6f9 :                       snd_get_joy0
c6f9 : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c6fb : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c6fe : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank3.s -----------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c6ff :                       main
                             
c6ff :                       infinity
c6ff : 2046c0           [ 6] 	jsr _df_pg_dflat
c702 : 4cffc6           [ 3] 	jmp infinity
                             
c705 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c705 : 4275696c64203a..       db "Build : 19-01-2025\r"
c718 : 3132384b204272..       db "128K Breadboard Computer\r"
c731 : 42792040363530..       db "By @6502Nerd\r"
c73e : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c752 :                       init_nmi
                             	; Core IRQ handler
c752 : a963             [ 2] 	lda #lo(nmi)
c754 : 8502             [ 3] 	sta int_nmi
c756 : a9c7             [ 2] 	lda #hi(nmi)
c758 : 8503             [ 3] 	sta int_nmi+1
                             
c75a : a9d3             [ 2] 	lda #lo(null_handler)
c75c : 850c             [ 3] 	sta int_usercia1
c75e : a9c7             [ 2] 	lda #hi(null_handler)
c760 : 850d             [ 3] 	sta int_usercia1+1
                             
c762 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c763 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank3.s -----------------------------------

                             ;* 6551 uses this - fills the receive buffer
                             ;* VIA 2 uses this- user interrupt
c763 :                       nmi
c763 : 48               [ 3] 	pha
                             
c764 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c767 : 100c             [ 3] 	bpl	nmi_skip_acia			; If no interrupt don't do a
                             
c769 : 5a               [ 3] 	phy
c76a : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c76d : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c76f : 990008           [ 5] 	sta ser_buf,y
c772 : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c774 : 7a               [ 4] 	ply
c775 :                       nmi_skip_acia
                             	;* Try PIA1 first for rapid Timer handling
c775 : ad8d04           [ 4] 	lda IO_1 + IFR
c778 : 1026             [ 3] 	bpl nmi_fin
c77a : 5a               [ 3] 	phy
c77b : da               [ 3] 	phx
                             	; Reset interrupt by reading T1C-L
c77c : ad8404           [ 4] 	lda IO_1+T1CL
                             	; Swtich to RAM bank 2 don't touch anything else
c77f : ad0004           [ 4] 	lda IO_0+PRB
c782 : 48               [ 3] 	pha                     ; Remember the bank #
c783 : 29cf             [ 2] 	and #0b11001111
c785 : 0920             [ 2] 	ora #0b00100000
c787 : 8d0004           [ 4] 	sta IO_0+PRB
                             	; Switch out ROM for RAM
c78a : ad8004           [ 4] 	lda IO_1+PRB                    ; Get current RO
c78d : 48               [ 3] 	pha
c78e : 29df             [ 2] 	and #(0xff ^ MM_DIS)            ; Switch off ROM
c790 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
c793 : 20cfc7           [ 6] 	jsr call_irq_usercia1			; Call user cia1 handler
                             	; Restore ROM
c796 : 68               [ 4] 	pla                             ; Get original p
c797 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
                             	; Restore RAM bank
c79a : 68               [ 4] 	pla                             ; Get original p
c79b : 8d0004           [ 4] 	sta IO_0+PRB                    ; Update port to
c79e : fa               [ 4] 	plx
c79f : 7a               [ 4] 	ply
c7a0 :                       nmi_fin
c7a0 : 68               [ 4] 	pla
c7a1 : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c7a2 :                       init_irq
                             	; Core IRQ handler
c7a2 : a9d4             [ 2] 	lda #lo(irq)
c7a4 : 8504             [ 3] 	sta int_irq
c7a6 : a9c7             [ 2] 	lda #hi(irq)
c7a8 : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c7aa : a9fa             [ 2] 	lda #lo(irq_brk)
c7ac : 8506             [ 3] 	sta int_brk
c7ae : a9c7             [ 2] 	lda #hi(irq_brk)
c7b0 : 8507             [ 3] 	sta int_brk+1
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank3.s -----------------------------------

                             
                             	; User handlers for VDP, PIA0 interrupts
c7b2 : a9d3             [ 2] 	lda #lo(null_handler)
c7b4 : 8508             [ 3] 	sta int_uservdp
c7b6 : a9c7             [ 2] 	lda #hi(null_handler)
c7b8 : 8509             [ 3] 	sta int_uservdp+1
                             
c7ba : a9d3             [ 2] 	lda #lo(null_handler)
c7bc : 850a             [ 3] 	sta int_usercia0
c7be : a9c7             [ 2] 	lda #hi(null_handler)
c7c0 : 850b             [ 3] 	sta int_usercia0+1
                             
c7c2 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c7c3 :                       call_irq_master
c7c3 : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c7c6 :                       call_irq_brk
c7c6 : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c7c9 :                       call_irq_uservdp
c7c9 : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c7cc :                       call_irq_usercia0
c7cc : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c7cf :                       call_irq_usercia1
c7cf : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c7d2 :                       null_irq
c7d2 : 40               [ 6] 	rti
                             
                             ;* null handler
c7d3 :                       null_handler
c7d3 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c7d4 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c7d7 : ba               [ 2] 	tsx
c7d8 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c7db : 2910             [ 2] 	and #0x10
c7dd : d0e7             [ 3] 	bne call_irq_brk
                             	
c7df : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try VDP next
c7e0 :                       irq_check_vdp	
c7e0 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c7e3 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank3.s -----------------------------------

c7e5 : 20c9c7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c7e8 : 2047c8           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c7eb : 2025c8           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c7ee :                       irq_check_cia0
c7ee : ad0d04           [ 4] 	lda IO_0 + IFR
c7f1 : 1003             [ 3] 	bpl irq_fin
c7f3 : 20ccc7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c7f6 :                       irq_fin
                             	_pullAXY
                             
c7f9 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c7fa :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c7fa : 38               [ 2] 	sec
c7fb : bd0501           [ 4] 	lda 0x0105,x
c7fe : e902             [ 2] 	sbc #2
c800 : 85a4             [ 3] 	sta df_brkpc
c802 : bd0601           [ 4] 	lda 0x0106,x
c805 : e900             [ 2] 	sbc #0
c807 : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c809 : a001             [ 2] 	ldy #1
c80b : b1a4             [ 5] 	lda (df_brkpc),y
c80d : 85a6             [ 3] 	sta df_brkval
c80f : 859f             [ 3] 	sta errno
                             	; now update the return address
c811 : a5a2             [ 3] 	lda df_pc
c813 : 9d0501           [ 5] 	sta 0x105,x
c816 : a5a3             [ 3] 	lda df_pc+1
c818 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c81e : 8585             [ 3] 	sta num_a
c820 : 8686             [ 3] 	stx num_a+1
c822 : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c824 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c825 :                       int_kb_handler	
c825 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c827 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c829 : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c82c : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c82e : f00c             [ 3] 	beq int_keys_up
c830 :                       int_do_read
c830 : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c832 : a53b             [ 3] 	lda kb_debounce			; Set debounce
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank3.s -----------------------------------

c834 : 8537             [ 3] 	sta kb_deb
c836 :                       int_skip_scan
c836 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c838 : 8d0d04           [ 4] 	sta IO_0 + IFR
c83b : 60               [ 6] 	rts
c83c :                       int_keys_up					; No key pressed
c83c : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c83e : 6434             [ 3] 	stz kb_last
c840 : 6435             [ 3] 	stz kb_code
c842 : 6437             [ 3] 	stz kb_deb
c844 : 6438             [ 3] 	stz kb_rep
c846 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c847 :                       int_vdp_handler
c847 : 2073c8           [ 6] 	jsr update_timers	; If it is then update system 
                             
c84a : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c84c : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c84e : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c850 : a513             [ 3] 	lda vdp_curstat		; Check it
c852 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c854 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c856 : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c858 : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c85a : 8513             [ 3] 	sta vdp_curstat		
                             
c85c : 18               [ 2] 	clc					; Add offset for cursor address in vram
c85d : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c85f : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c861 : aa               [ 2] 	tax
c862 : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c864 : 6900             [ 2] 	adc #0
                             
c866 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
c869 : a513             [ 3] 	lda vdp_curstat
c86b : 2980             [ 2] 	and #0x80
c86d : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c86f : 2085c6           [ 6] 	jsr vdp_wr_vram
c872 :                       int_vdp_fin	
c872 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c873 :                       update_timers
c873 : e610             [ 5] 	inc vdp_int_cnt
c875 : d002             [ 3] 	bne inc_kb_timers
c877 : e611             [ 5] 	inc vdp_int_cnt+1
c879 :                       inc_kb_timers
c879 : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c87b : f002             [ 3] 	beq skip_kb_deb
c87d : c637             [ 5] 	dec kb_deb
c87f :                       skip_kb_deb
c87f : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank3.s -----------------------------------

c881 : f002             [ 3] 	beq skip_kb_rep
c883 : c638             [ 5] 	dec kb_rep
c885 :                       skip_kb_rep
c885 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c886 :                       long_delay
c886 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c88a : a000             [ 2] 	ldy #0x00
c88c :                       long_delay_1
c88c : ea               [ 2] 	nop
c88d : ea               [ 2] 	nop
c88e : ea               [ 2] 	nop
c88f : ea               [ 2] 	nop
c890 : 88               [ 2] 	dey
c891 : d0f9             [ 3] 	bne long_delay_1
c893 : ca               [ 2] 	dex
c894 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c899 : 28               [ 4] 	plp
                             	
c89a : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank3.s -----------------------------------

                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c89b :                       utilPrintSPC
c89b : 48               [ 3] 	pha
c89c : a920             [ 2] 	lda #' '
c89e : 20c0c5           [ 6] 	jsr io_put_ch
c8a1 : 68               [ 4] 	pla
c8a2 : 60               [ 6] 	rts
                             
c8a3 :                       utilPrintCRLF
c8a3 : 48               [ 3] 	pha
c8a4 : a90d             [ 2] 	lda #UTF_CR
c8a6 : 20c0c5           [ 6] 	jsr io_put_ch
c8a9 : 68               [ 4] 	pla
c8aa : 60               [ 6] 	rts
                             
c8ab :                       utilPrintA
c8ab : 8545             [ 3] 	sta tmp_d
c8ad : 48               [ 3] 	pha
c8ae : 8a               [ 2] 	txa
c8af : 48               [ 3] 	pha
c8b0 : a545             [ 3] 	lda tmp_d
c8b2 : 20d0c8           [ 6] 	jsr str_a_to_x
c8b5 : 20c0c5           [ 6] 	jsr io_put_ch
c8b8 : 8a               [ 2] 	txa
c8b9 : 20c0c5           [ 6] 	jsr io_put_ch
c8bc : 68               [ 4] 	pla
c8bd : aa               [ 2] 	tax
c8be : 68               [ 4] 	pla
c8bf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c8c0 :                       util_clr_mem
c8c0 : 48               [ 3] 	pha
c8c1 : 5a               [ 3] 	phy
c8c2 : 863f             [ 3] 	stx tmp_v1
c8c4 : 8540             [ 3] 	sta tmp_v1+1
c8c6 : a900             [ 2] 	lda #0
c8c8 :                       mem_clr_byte
c8c8 : 88               [ 2] 	dey
c8c9 : 913f             [ 5] 	sta (tmp_v1),y
c8cb : d0fb             [ 3] 	bne mem_clr_byte
c8cd : 7a               [ 4] 	ply
c8ce : 68               [ 4] 	pla
c8cf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank3.s -----------------------------------

                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c8d0 :                       str_a_to_x
c8d0 : 48               [ 3] 	pha					; Save the byte using later on
c8d1 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c8d3 : 18               [ 2] 	clc
c8d4 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8d6 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8d8 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c8da : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8dc :                       skip_a_f_1
c8dc : aa               [ 2] 	tax					; Low char is in X
c8dd : 68               [ 4] 	pla					; Get byte back
c8de : 4a               [ 2] 	lsr a				; Make high nibble low
c8df : 4a               [ 2] 	lsr a
c8e0 : 4a               [ 2] 	lsr a
c8e1 : 4a               [ 2] 	lsr a
c8e2 : 18               [ 2] 	clc
c8e3 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8e5 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8e7 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c8e9 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8eb :                       skip_a_f_2
                             
c8eb : 18               [ 2] 	clc					; No error
c8ec : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c8ed :                       str_x_to_a
c8ed : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c8ef : 38               [ 2] 	sec					; Process high char in A
c8f0 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c8f2 : c90a             [ 2] 	cmp #10				; If A < 10 then
c8f4 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c8f6 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c8f8 :                       skip_x_f_1
c8f8 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c8fa : b01d             [ 4] 	bcs	str_x_to_a_err	; Error if not
                             
c8fc : 0a               [ 2] 	asl a				; This is the high nibble
c8fd : 0a               [ 2] 	asl a
c8fe : 0a               [ 2] 	asl a
c8ff : 0a               [ 2] 	asl a
c900 : 48               [ 3] 	pha					; Save the high nibble
c901 : 8a               [ 2] 	txa					; Now process the low char in X
c902 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c904 : 38               [ 2] 	sec
c905 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c907 : c90a             [ 2] 	cmp #10				; If A < 10 then
c909 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c90b : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c90d :                       skip_x_f_2
c90d : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank3.s -----------------------------------

c90f : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c911 : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c913 : 68               [ 4] 	pla					; Get high nibble
c914 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c916 : 18               [ 2] 	clc					; No error
c917 : 60               [ 6] 	rts					; A contains value
                             
c918 :                       str_x_to_a_errl
c918 : 68               [ 4] 	pla
c919 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c91b :                       con_n_to_a
c91b : 8691             [ 3] 	stx num_tmp
c91d : 8592             [ 3] 	sta num_tmp+1
c91f : 6485             [ 3] 	stz num_a
c921 : 6486             [ 3] 	stz num_a+1
c923 : c000             [ 2] 	cpy #NUM_ANY
c925 : f014             [ 3] 	beq con_n_to_a_detect
c927 : 88               [ 2] 	dey
c928 : d003             [ 3] 	bne con_n_not_dec
c92a :                       con_dec_jmp
c92a : 4cbec9           [ 3] 	jmp con_dec_to_a_int
c92d :                       con_n_not_dec
c92d : 88               [ 2] 	dey
c92e : d003             [ 3] 	bne con_n_not_hex
c930 :                       con_hex_jmp
c930 : 4c55c9           [ 3] 	jmp con_hex_to_a_int
c933 :                       con_n_not_hex
c933 : 88               [ 2] 	dey
c934 : d003             [ 3] 	bne con_n_err
c936 :                       con_bin_jmp
c936 : 4c94c9           [ 3] 	jmp con_bin_to_a_int
c939 :                       con_n_err
c939 : 38               [ 2] 	sec
c93a : 60               [ 6] 	rts
c93b :                       con_n_to_a_detect
c93b : b291             [ 5] 	lda (num_tmp)
c93d : c930             [ 2] 	cmp #'0'
c93f : d0e9             [ 3] 	bne con_dec_jmp
c941 : a001             [ 2] 	ldy #1
c943 : b191             [ 5] 	lda (num_tmp),y
c945 : 0920             [ 2] 	ora #0x20
c947 : c978             [ 2] 	cmp #'x'
c949 : f0e5             [ 3] 	beq con_hex_jmp
c94b : c962             [ 2] 	cmp #'b'
c94d : f0e7             [ 3] 	beq con_bin_jmp
c94f : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank3.s -----------------------------------

                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c951 :                       con_hex_to_a
c951 : 8691             [ 3] 	stx num_tmp
c953 : 8592             [ 3] 	sta num_tmp+1
c955 :                       con_hex_to_a_int
c955 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c957 : a002             [ 2] 	ldy #2			; start at first digit
c959 :                       con_hex_digit
c959 : b191             [ 5] 	lda (num_tmp),y
c95b : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c95d : 38               [ 2] 	sec							; Process high char in A
c95e : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c960 : c90a             [ 2] 	cmp #10						; If A < 10 then
c962 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c964 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c966 :                       con_hex_skip_x_f_1
c966 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c968 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c96a : 48               [ 3] 	pha
                             	; make room for lo nibble
c96b : 0685             [ 5] 	asl num_a
c96d : 2686             [ 5] 	rol num_a+1
c96f : 0685             [ 5] 	asl num_a
c971 : 2686             [ 5] 	rol num_a+1
c973 : 0685             [ 5] 	asl num_a
c975 : 2686             [ 5] 	rol num_a+1
c977 : 0685             [ 5] 	asl num_a
c979 : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c97b : 68               [ 4] 	pla
c97c : 0585             [ 3] 	ora num_a
c97e : 8585             [ 3] 	sta num_a
c980 : c8               [ 2] 	iny
c981 : ca               [ 2] 	dex
c982 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c984 :                       con_hex_err
c984 : 38               [ 2] 	sec
c985 : 60               [ 6] 	rts
                             	; found a non-hex digit
c986 :                       con_hex_done
                             	; if no digits processed then error
c986 : c002             [ 2] 	cpy #2
c988 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c98a : 98               [ 2] 	tya
c98b : aa               [ 2] 	tax
c98c : a902             [ 2] 	lda #NUM_HEX
c98e : 18               [ 2] 	clc
c98f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank3.s -----------------------------------

c990 :                       con_bin_to_a
c990 : 8691             [ 3] 	stx num_tmp
c992 : 8592             [ 3] 	sta num_tmp+1
c994 :                       con_bin_to_a_int
c994 : a002             [ 2] 	ldy #2
c996 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c998 :                       con_bin_digit
c998 : b191             [ 5] 	lda (num_tmp),y
c99a : c930             [ 2] 	cmp #'0'
c99c : 9010             [ 3] 	bcc con_bin_done
c99e : c932             [ 2] 	cmp #'1'+1
c9a0 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c9a2 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c9a4 : 2685             [ 5] 	rol num_a
c9a6 : 2686             [ 5] 	rol num_a+1
c9a8 : c8               [ 2] 	iny
c9a9 : ca               [ 2] 	dex
c9aa : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c9ac : 800a             [ 3] 	bra con_bin_err
c9ae :                       con_bin_done
                             	; didn't process any digit = error
c9ae : c002             [ 2] 	cpy #2
c9b0 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c9b2 : 98               [ 2] 	tya
c9b3 : aa               [ 2] 	tax
c9b4 : a903             [ 2] 	lda #NUM_BIN
c9b6 : 18               [ 2] 	clc
c9b7 : 60               [ 6] 	rts
c9b8 :                       con_bin_err
c9b8 : 38               [ 2] 	sec
c9b9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c9ba :                       con_dec_to_a
c9ba : 8691             [ 3] 	stx num_tmp
c9bc : 8592             [ 3] 	sta num_tmp+1
c9be :                       con_dec_to_a_int
c9be : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c9c0 : b291             [ 5] 	lda (num_tmp)
c9c2 : c92d             [ 2] 	cmp #'-'
c9c4 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c9c6 : c8               [ 2] 	iny
c9c7 :                       str_d_find_end
c9c7 : b191             [ 5] 	lda (num_tmp),y
c9c9 : c930             [ 2] 	cmp #'0'
c9cb : 9007             [ 3] 	bcc str_d_found_end
c9cd : c93a             [ 2] 	cmp #'9'+1
c9cf : b003             [ 3] 	bcs str_d_found_end
c9d1 : c8               [ 2] 	iny
c9d2 : 80f3             [ 3] 	bra str_d_find_end
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank3.s -----------------------------------

c9d4 :                       str_d_found_end
c9d4 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c9d6 : b052             [ 4] 	bcs str_d_error		; e.g. -32767 including minus
c9d8 : 8494             [ 3] 	sty num_tmp+3
c9da : 6493             [ 3] 	stz num_tmp+2
c9dc : 6485             [ 3] 	stz num_a
c9de : 6486             [ 3] 	stz num_a+1
c9e0 :                       str_d_process_digit
c9e0 : 88               [ 2] 	dey
c9e1 : 3026             [ 4] 	bmi str_d_digits_done
                             
c9e3 : b191             [ 5] 	lda (num_tmp),y
                             
c9e5 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c9e7 : f020             [ 4] 	beq str_d_digits_done ; also done
                             
c9e9 : 38               [ 2] 	sec
c9ea : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c9ec : 18               [ 2] 	clc
c9ed : 0a               [ 2] 	asl a
c9ee : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c9f0 : aa               [ 2] 	tax
c9f1 : a585             [ 3] 	lda num_a
c9f3 : 7d2cca           [ 4] 	adc str_d_powers,x
c9f6 : 8585             [ 3] 	sta num_a
c9f8 : a586             [ 3] 	lda num_a+1
c9fa : 7d2dca           [ 4] 	adc str_d_powers+1,x
c9fd : 8586             [ 3] 	sta num_a+1
c9ff : b029             [ 4] 	bcs str_d_error
                             	; Move to next power of 10 index
ca01 : a593             [ 3] 	lda num_tmp+2
ca03 : 6914             [ 2] 	adc #20
ca05 : 8593             [ 3] 	sta num_tmp+2
ca07 : 80d7             [ 4] 	bra str_d_process_digit
ca09 :                       str_d_digits_done
                             	; check if minus
ca09 : b291             [ 5] 	lda (num_tmp)
ca0b : c92d             [ 2] 	cmp #'-'
ca0d : d011             [ 3] 	bne str_d_skip_neg
ca0f : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
ca11 : e002             [ 2] 	cpx #2				; else it's an error
ca13 : 9015             [ 3] 	bcc str_d_error
ca15 : a685             [ 3] 	ldx num_a
ca17 : a586             [ 3] 	lda num_a+1
ca19 : 2090ca           [ 6] 	jsr twos_complement
ca1c : 8685             [ 3] 	stx num_a
ca1e : 8586             [ 3] 	sta num_a+1
ca20 :                       str_d_skip_neg
ca20 : a694             [ 3] 	ldx num_tmp+3
ca22 : e001             [ 2] 	cpx #1				; must be at least 1 char
ca24 : 9004             [ 3] 	bcc str_d_error
ca26 : a901             [ 2] 	lda #NUM_DEC
ca28 : 18               [ 2] 	clc
ca29 : 60               [ 6] 	rts
ca2a :                       str_d_error
ca2a : 38               [ 2] 	sec
ca2b : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank3.s -----------------------------------

ca2c :                       str_d_powers
ca2c : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
ca40 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
ca54 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
ca68 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
ca7c : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
ca90 :                       twos_complement
ca90 : 49ff             [ 2] 	eor #0xff
ca92 : 48               [ 3] 	pha
ca93 : 8a               [ 2] 	txa
ca94 : 49ff             [ 2] 	eor #0xff
ca96 : aa               [ 2] 	tax
ca97 : 68               [ 4] 	pla
ca98 : e8               [ 2] 	inx
ca99 : d001             [ 3] 	bne twos_complement_skip_X
ca9b : 1a               [ 2] 	inc a
ca9c :                       twos_complement_skip_X
ca9c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
ca9d :                       int_to_bcd
ca9d : 08               [ 3] 	php
ca9e : 48               [ 3] 	pha
ca9f : da               [ 3] 	phx
                             
caa0 : 8691             [ 3] 	stx num_tmp
caa2 : 8592             [ 3] 	sta num_tmp+1
caa4 : c980             [ 2] 	cmp #0x80			; Negative?
caa6 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
caa8 : 2090ca           [ 6] 	jsr twos_complement
caab :                       int_to_bcd_skip_neg
caab : 6485             [ 3] 	stz num_a
caad : 6486             [ 3] 	stz num_a+1
caaf : 6487             [ 3] 	stz num_a+2
cab1 : 6488             [ 3] 	stz num_a+3
cab3 : a210             [ 2] 	ldx #16
cab5 : f8               [ 2] 	sed
cab6 :                       int_to_bcd_bit
cab6 : 0691             [ 5] 	asl num_tmp
cab8 : 2692             [ 5] 	rol num_tmp+1
caba : a585             [ 3] 	lda num_a
cabc : 6585             [ 3] 	adc num_a
cabe : 8585             [ 3] 	sta num_a
cac0 : a586             [ 3] 	lda num_a+1
cac2 : 6586             [ 3] 	adc num_a+1
cac4 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank3.s -----------------------------------

cac6 : a587             [ 3] 	lda num_a+2
cac8 : 6587             [ 3] 	adc num_a+2
caca : 8587             [ 3] 	sta num_a+2
cacc : ca               [ 2] 	dex
cacd : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
cacf : fa               [ 4] 	plx
cad0 : 68               [ 4] 	pla
cad1 : 28               [ 4] 	plp
cad2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
cad3 :                       word_to_bcd
cad3 : 08               [ 3] 	php
cad4 : 48               [ 3] 	pha
cad5 : da               [ 3] 	phx
                             
cad6 : 8691             [ 3] 	stx num_tmp
cad8 : 8592             [ 3] 	sta num_tmp+1
cada : 6485             [ 3] 	stz num_a
cadc : 6486             [ 3] 	stz num_a+1
cade : 6487             [ 3] 	stz num_a+2
cae0 : 6488             [ 3] 	stz num_a+3
cae2 : a210             [ 2] 	ldx #16			; 16 binary bits
cae4 : f8               [ 2] 	sed
cae5 :                       word_to_bcd_bit
cae5 : 0691             [ 5] 	asl num_tmp
cae7 : 2692             [ 5] 	rol num_tmp+1
cae9 : a585             [ 3] 	lda num_a
caeb : 6585             [ 3] 	adc num_a
caed : 8585             [ 3] 	sta num_a
caef : a586             [ 3] 	lda num_a+1
caf1 : 6586             [ 3] 	adc num_a+1
caf3 : 8586             [ 3] 	sta num_a+1
caf5 : a587             [ 3] 	lda num_a+2
caf7 : 6587             [ 3] 	adc num_a+2
caf9 : 8587             [ 3] 	sta num_a+2
cafb : ca               [ 2] 	dex
cafc : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
cafe : fa               [ 4] 	plx
caff : 68               [ 4] 	pla
cb00 : 28               [ 4] 	plp
cb01 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
cb02 :                       int_to_str_ch
cb02 : 290f             [ 2] 	and #0xf
cb04 : 0930             [ 2] 	ora #0x30					; Convert to ascii
cb06 : 4930             [ 2] 	eor #0x30					; Check if zero digit
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank3.s -----------------------------------

cb08 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
cb0a : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
cb0c : 4930             [ 2] 	eor #0x30					; Restore A
cb0e : 60               [ 6] 	rts							; Return without storing anything
cb0f :                       int_to_str_nz
cb0f : 4930             [ 2] 	eor #0x30					; Restore A
cb11 : 999500           [ 5] 	sta num_buf,y
cb14 : c8               [ 2] 	iny
cb15 : 38               [ 2] 	sec							; Set C as a non-zero encountered
cb16 :                       int_to_str_ch_fin
cb16 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
cb17 :                       int_to_str
                             	_pushAXY
                             
cb1a : a000             [ 2] 	ldy #0						; first pos of num_buf
cb1c : 0900             [ 2] 	ora #0						; Test A for sign bit
cb1e : 08               [ 3] 	php							; Remember C bit of P
cb1f : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
cb21 : 2090ca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
cb24 : 48               [ 3] 	pha							; Remember A
cb25 : a92d             [ 2] 	lda #'-'					; Put in negative sign
cb27 : 8595             [ 3] 	sta num_buf
cb29 : c8               [ 2] 	iny							; Start at second buffer pos
cb2a : 68               [ 4] 	pla							; Restore A
cb2b :                       int_to_str_skip_neg
cb2b : 20d3ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
cb2e : a202             [ 2] 	ldx #2						; Start at BCD high byte
cb30 :                       int_str
cb30 : 28               [ 4] 	plp							; Get C but immediately
cb31 : 08               [ 3] 	php							; Save C (due to loop check later)
cb32 : b585             [ 4] 	lda num_a,x					; Get BCD digit
cb34 : 859c             [ 3] 	sta num_buf+7				; Save A it for the units later
cb36 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cb37 : 4a               [ 2] 	lsr a
cb38 : 4a               [ 2] 	lsr a
cb39 : 4a               [ 2] 	lsr a
cb3a : 28               [ 4] 	plp							; Get C
cb3b : 2002cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb3e : a59c             [ 3] 	lda num_buf+7				; Get A for the units
cb40 : 2002cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb43 : 08               [ 3] 	php							; Save C
cb44 : ca               [ 2] 	dex
cb45 : 10e9             [ 3] 	bpl int_str
cb47 : 28               [ 4] 	plp							; Check C
cb48 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cb4a : a930             [ 2] 	lda #'0'					; Stuff a zero
cb4c : 8595             [ 3] 	sta num_buf					; Must be in first position..
cb4e : c8               [ 2] 	iny
cb4f :                       int_to_str_fin
cb4f : a900             [ 2] 	lda #0						; Terminator
cb51 : 999500           [ 5] 	sta num_buf,y
cb54 : c8               [ 2] 	iny
                             	_pullAXY
                             
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank3.s -----------------------------------

cb58 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank3.s -----------------------------------

                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb59 :                       str_a_to_d
cb59 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb5a :                       print_a_to_d
cb5a : 2017cb           [ 6] 	jsr int_to_str
cb5d : a000             [ 2] 	ldy #0
cb5f :                       print_a_to_d_ch
cb5f : b99500           [ 4] 	lda num_buf,y
cb62 : f006             [ 3] 	beq print_a_to_d_fin
cb64 : 20c0c5           [ 6] 	jsr io_put_ch
cb67 : c8               [ 2] 	iny
cb68 : d0f5             [ 3] 	bne print_a_to_d_ch
cb6a :                       print_a_to_d_fin
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank3.s -----------------------------------

cb6a : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cb6b :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cb6b : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cb6d : 9a               [ 2] 	txs
cb6e : 4cc9cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cb71 :                       init_2					; init_ram will jump back to here
                             	
cb71 : 2077cb           [ 6] 	jsr kernel_init
                             
cb74 : 4cffc6           [ 3] 	jmp main
                             
cb77 :                       kernel_init
cb77 : 2052c7           [ 6] 	jsr init_nmi		; Initialise NMI handling
cb7a : 20a2c7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cb7d : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cb80 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cb83 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
cb86 : 2026c5           [ 6] 	jsr _PT3INIT		; Load PT3 player code into shadow
cb89 :                       kernel_test
cb89 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cb8c : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cb8f : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cb92 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cb94 : 48               [ 3] 	pha
cb95 : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cb97 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cb9a : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cb9c : aa               [ 2] 	tax					; Save the mode temporarily
cb9d : 68               [ 4] 	pla					; Get the default mode from stack
cb9e : 8a               [ 2] 	txa					; And push the NV mode that was read
cb9f : 48               [ 3] 	pha
cba0 : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cba2 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cba5 : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cba7 :                       kernel_skip_nv	
cba7 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cba8 : 20c6c1           [ 6] 	jsr _gr_init_screen
cbab : 2086c5           [ 6] 	jsr io_init			; Set default input/output device
cbae : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cbbc : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cbbf : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cbc2 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cbc5 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cbc8 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank3.s -----------------------------------

                             ;* Zeroes all addressable RAM in the default bank
cbc9 :                       init_ram
cbc9 : 6400             [ 3] 	stz 0x00			; Start at page 0
cbcb : 6401             [ 3] 	stz 0x01
cbcd : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cbcf : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cbd1 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cbd3 :                       init_ram_1
cbd3 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cbd5 : 9004             [ 3] 	bcc init_ram_fill
cbd7 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cbd9 : 9005             [ 3] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cbdb :                       init_ram_fill
cbdb : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cbdd : c8               [ 2] 	iny
cbde : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cbe0 :                       init_ram_skip
cbe0 : e8               [ 2] 	inx					; Increment page counter
cbe1 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cbe3 : d0ee             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cbe5 : 4c71cb           [ 3] 	jmp init_2			; Carry on initialisation
                             
cbe8 :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "sound\ptplayer.s"
                             ; ===============================================
                             ; Vortex Tracker II v1.0 PT3 player for 6502
                             ; Based on ORIC 1/ATMOS (6502) version
                             ; Updated for HB-BBC-128 Homebrew Computer by 650
                             ; ScalexTrixx (A.C) - (c)2018
                             ;
                             ; Translated and adapted from ZX Spectrum Player 
                             ; by S.V.Bulba (with Ivan Roshin for some parts/a
                             ; https://bulba.untergrund.net/main_e.htm (c)2004
                             ;
0030 =                       Revision = "0" 
                             ; ===============================================
                             ; REV 0: 
                             ; ======
                             ; rev 0.34 (WK/TS)  - correction / 1.773 (288=x25
                             ;                   => file_end = $8E68
                             ;
                             ; rev 0.33 (WK)     - optimizations: PTDECOD
                             ;                   => file_end = $8E53
                             ;
                             ; rev 0.32 (WK)     - optimizations: PLAY
                             ;                   => file_end = $8F43
                             ;
                             ; rev 0.31 (WK)     - optimizations: CHREGS
                             ;                   => file_end = $8FC4
                             ;
                             ; rev 0.30 (WK)     - New base "full working" ver
                             ;                   - optimizations: zp variables
                             ;                   => file_end = $9027
                             ;
                             ; --------------------------------
                             ; WK: working / TS: test version |
                             ; ===============================================
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank3.s -----------------------------------

                             ; TODO:
                             ; - lda ($AC),y -> lda ($AC,x)
                             ; - NOISE Register opt (/2 ?)
                             ; - déplacer / 1.773 avant CHREGS (cf CPC versio
                             ; - dans PD_LOOP: vérifier si des jmp relatifs s
                             ; - fix .bbs address
                             ; - check zero pages addresses
                             ; ===============================================
                             ;
                             ;	ORG $8000
                             ;
                             ; -------------------------------------
                                     bss
                             
00ed =                       	org $ed         ; Uses *all* of zero page from h
                                 
00ed =                       SETUP   ds 1      ; set bit0 to 1, if you want to
                                                ; bit7 is set each time, when 
                             ; "registers" Z80
                             ; A = A
                             ; F = flags
                             
00ee =                       z80_A   ds 1      ; save A
00ef =                       z80_C   ds 1
00f0 =                       z80_B   ds 1
00f1 =                       z80_E   ds 1
00f2 =                       z80_D   ds 1
00f3 =                       z80_L   ds 1
00f4 =                       z80_H   ds 1
00f5 =                       z80_IX  ds 2
00f7 =                       z80_AP  ds 1      ; save A'
                             ; temp variable used during play
00f8 =                       val1    ds 2
00fa =                       val2    ds 2
00fc =                       val3    ds 2
00fe =                       val4    ds 2
00f8 =                       TA1 = val1
00f9 =                       TA2 = val1+1
00fa =                       TB1 = val2
00fb =                       TB2 = val2+1
00fc =                       TC1 = val3
00fd =                       TC2 = val3+1
00fe =                       TB3 = val4
00ff =                       TC3 = val4+1
                             
                             ; =====================================
                             ; module PT3 address
                             ; =====================================
                                     code
                             ; For dflat, allow build of code for other locati
                             ; default is 0xe000
                             
                              if !PT3RELOCADDR
                             PT3RELOCADDR = 0xe000
                              endif
e000 =                               org $e000
                             
                             ; START = $e000 or PT3RELOCADDR
                             ; START+00 : Initialise a tune and start
                             ; START+03 : Disable tune and stop
                             ; START+06 : Mute sound every interrupt
                             ; START+09 : Pause but allow other sounds while p
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank3.s -----------------------------------

                             ; START+0C : Resume tune
                             ; All will be extern routines
e000 :                       PT3START
e000 : 4c44e0           [ 3]         jmp _doStart
e003 :                       PT3PAUSE
e003 : 4c31e0           [ 3]         jmp _doPause
e006 :                       PT3RESUME
e006 : 4c3ee0           [ 3]         jmp _doResume
                             
                             ; We need to copy all this code to shadow RAM beh
                             ; Also ensure we're in **Bank 2** (not Bank 3) of
                             ; This is an extern routine needs to be callable 
                             ; Is called at power-on / reset
e009 :                       PT3INIT
                                     ; Swtich to RAM bank 2 don't touch anythi
e009 : ad0004           [ 4]         lda IO_0+PRB
e00c : 48               [ 3]         pha                     ; Remember the ba
e00d : 29cf             [ 2]         and #0b11001111         ; mask out old ba
e00f : 0920             [ 2]         ora #0b00100000         ; mask in bank bi
e011 : 8d0004           [ 4]         sta IO_0+PRB
                             
                                     ; Copy from PT3START to PT3END
                                     ; To shadow RAM directly underneath
e014 : a000             [ 2]         ldy #lo(PT3START)
e016 : a000             [ 2]         ldy #0x00
e018 : 8441             [ 3]         sty tmp_a               ; Page + Y index,
e01a : a2e0             [ 2]         ldx #hi(PT3START)
e01c : a2c0             [ 2]         ldx #0xc0
e01e : 8642             [ 3]         stx tmp_a+1
                             
e020 :                       PT3INIT_COPY
e020 : b141             [ 5]         lda (tmp_a),y           ; Get ROM byte
e022 : 9141             [ 5]         sta (tmp_a),y           ; Write to memory
e024 : c8               [ 2]         iny
e025 : d0f9             [ 3]         bne PT3INIT_COPY
e027 : e8               [ 2]         inx
e028 : 8642             [ 3]         stx tmp_a+1             ; Increment page 
e02a : d0f4             [ 3]         bne PT3INIT_COPY
                             
                                     ; Ok all code in this file copied from RO
e02c : 68               [ 4]         pla
e02d : 8d0004           [ 4]         sta IO_0+PRB            ; Restore RAM ban
e030 : 60               [ 6]         rts
                             
                             
                             ; Can play other sounds while paused
e031 :                       _doPause
                                     ; Disable T1 interrupt on VIA 1
e031 : a940             [ 2]         lda #0b01000000
e033 : 8d8e04           [ 4]         sta IO_1+IER
                             
                                     ; Kill the channels with the sound throug
e036 : a03f             [ 2]         ldy #0b00111111
e038 : a207             [ 2]         ldx #SND_REG_CTL
e03a : 20a1c6           [ 6]         jsr snd_set
e03d : 60               [ 6]         rts
                             
                             ; Reinstate the PT3 IRQ
e03e :                       _doResume
                                     ; Enable T1 interrupt on VIA 1
e03e : a9c0             [ 2]         lda #0b11000000
e040 : 8d8e04           [ 4]         sta IO_1+IER
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank3.s -----------------------------------

e043 : 60               [ 6]         rts
                             
                             
                             ; Initialise the player to start using A,X as son
                             
e044 :                       _doStart
                             ; For dflat, assume that A,X provides address of 
e044 : 85f3             [ 3]         sta z80_L
e046 : 86f4             [ 3]         stx z80_H
                                     ; Swtich to RAM bank 2 don't touch anythi
e048 : ad0004           [ 4]         lda IO_0+PRB
e04b : 48               [ 3]         pha                     ; Remember the ba
e04c : 29cf             [ 2]         and #0b11001111
e04e : 0920             [ 2]         ora #0b00100000
e050 : 8d0004           [ 4]         sta IO_0+PRB
                                     ; Switch out ROM for RAM
e053 : ad8004           [ 4]         lda IO_1+PRB                    ; Get cur
e056 : 48               [ 3]         pha
e057 : 29df             [ 2]         and #(0xff ^ MM_DIS)            ; Switch 
e059 : 8d8004           [ 4]         sta IO_1+PRB                    ; Update 
                             ;        bra _doStart_test
                             
e05c : 20e0e0           [ 6] 	jsr INIT
                                     ; Remember previous user irq
e05f : a50c             [ 3]         lda int_usercia1
e061 : 8d91e0           [ 4]         sta oldIrq
e064 : a50d             [ 3]         lda int_usercia1+1
e066 : 8d92e0           [ 4]         sta oldIrq+1
                                     ; Set up timer for 50Hz (20ms) interrupts
                                     ; @5.36MHz it is 107,200 cycles
                                     ; which doesn't fit into 16 bits!
                                     ; so instead set up 100Hz (10ms) interrup
                                     ; which is 53,600 cycles, but only
                                     ; invoke the sound player every other
                                     ; interrupt!
                                     ; 53,600 = 0xd160
                                     ; Timre 1 of VIA 1
e069 : a960             [ 2]         lda #0x60
e06b : 8d8404           [ 4]         sta IO_1+T1CL
e06e : a9d1             [ 2]         lda #0xd1
e070 : 8d8504           [ 4]         sta IO_1+T1CH
                                     ; T1 of VIA1 set to continuous
e073 : a940             [ 2]         lda #0b01000000
e075 : 8d8b04           [ 4]         sta IO_1+ACR
                                     ; Instate PT3 irq
e078 : a9a8             [ 2]         lda #lo(pt3Irq)
e07a : 850c             [ 3]         sta int_usercia1
e07c : a9e0             [ 2]         lda #hi(pt3Irq)
e07e : 850d             [ 3]         sta int_usercia1+1
                                     ; Enable T1 interrupt
e080 : a9c0             [ 2]         lda #0b11000000
e082 : 8d8e04           [ 4]         sta IO_1+IER
                             ;_doStart_test
                                     ; Restore ROM
e085 : 68               [ 4]         pla                             ; Get ori
e086 : 8d8004           [ 4]         sta IO_1+PRB                    ; Update 
                                     ; Restore RAM bank
e089 : 68               [ 4]         pla                             ; Get ori
e08a : 8d0004           [ 4]         sta IO_0+PRB                    ; Update 
e08d : 60               [ 6]         rts
                                  
e08e : 0000                  CrPsPtr	fcw 0 ; current position in PT3 module
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank3.s -----------------------------------

e090 : 00                    intCount fcb 0      ; byte flag to call player on
e091 : 0000                  oldIrq fcw 0    ; Remember old IRQ vector
                             
                             ;Identifier
e093 : 3d565449492050..      	    db "=VTII PT3 Player r.",Revision,"="
                             
                             ;
                             ; Call pt3 player every interrupt
e0a8 :                       pt3Irq
                                     ; Call player every other interrupt
e0a8 : a980             [ 2]         lda #0x80
e0aa : 4d90e0           [ 4]         eor intCount
e0ad : 8d90e0           [ 4]         sta intCount
e0b0 : 1003             [ 3]         bpl skipInt_1
                                     ; Call the player each tick
e0b2 : 2041ea           [ 6]         jsr PLAY
e0b5 :                       skipInt_1
e0b5 :                       skipInt
e0b5 : 60               [ 6]         rts
                             
e0b6 :                       CHECKLP
                             	                                                
e0b6 : a5ed             [ 3]         lda SETUP                                
e0b8 : 0980             [ 2]         ora #%10000000                           
e0ba : 85ed             [ 3]         sta SETUP
e0bc : a901             [ 2] 	lda #%00000001                                  
e0be : 24ed             [ 3]         bit SETUP
e0c0 : d001             [ 3]         bne s1                                   
e0c2 : 60               [ 6] 	rts
e0c3 : 68               [ 4] s1	pla                                           
e0c4 : 68               [ 4]         pla       ; dépile 2 fois puisque rts sh
e0c5 : ee3eee           [ 6] 	inc DelyCnt                                     
e0c8 : ee02ee           [ 6]         inc ANtSkCn                              
e0cb :                       _MUTE	                                           
e0cb : a900             [ 2]         lda #00                                  
e0cd : 85f4             [ 3]         sta z80_H                                
e0cf : 85f3             [ 3] 	sta z80_L                                       
e0d1 : 8d4cee           [ 4] 	sta AYREGS+AmplA                                
e0d4 : 8d4dee           [ 4] 	sta AYREGS+AmplB                                
e0d7 : 8d4eee           [ 4]         sta AYREGS+AmplC
e0da : 8d4bee           [ 4]         sta AYREGS+Mixer  ; This is the daddy - s
e0dd : 4c32ec           [ 3] 	jmp ROUT                                        
                             
e0e0 :                       INIT
e0e0 : a5f3             [ 3] 	lda z80_L                                       
e0e2 : 8debe3           [ 4] 	sta MODADDR+1
e0e5 : 8d2ee7           [ 4]         sta MDADDR2+1
e0e8 : 85f5             [ 3]         sta z80_IX
e0ea : 48               [ 3]         pha
e0eb : a5f4             [ 3]         lda z80_H
e0ed : 8df1e3           [ 4]         sta MODADDR+7
e0f0 : 8d34e7           [ 4]         sta MDADDR2+7
e0f3 : 85f6             [ 3]         sta z80_IX+1
e0f5 : 48               [ 3]         pha
e0f6 : a964             [ 2]         lda #lo(100)                             
e0f8 : 85f1             [ 3]         sta z80_E
e0fa : a900             [ 2]         lda #00
e0fc : 85f2             [ 3]         sta z80_D
e0fe : a8               [ 2]         tay
e0ff : 18               [ 2] 	clc                                             
e100 : a5f1             [ 3]         lda z80_E
e102 : 65f3             [ 3]         adc z80_L
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank3.s -----------------------------------

e104 : 85f3             [ 3]         sta z80_L
e106 : a5f4             [ 3]         lda z80_H
e108 : 6900             [ 2]         adc #00
e10a : 85f4             [ 3]         sta z80_H
e10c : b1f3             [ 5]         lda (z80_L),y                            
e10e : 8d5aeb           [ 4] 	sta Delay+1                                     
e111 : a5f1             [ 3]         lda z80_E
e113 : 65f3             [ 3]         adc z80_L
e115 : 85f3             [ 3]         sta z80_L
e117 : 8d8ee0           [ 4]         sta CrPsPtr                              
e11a : a5f4             [ 3]         lda z80_H
e11c : 6900             [ 2]         adc #00
e11e : 85f4             [ 3]         sta z80_H    
e120 : 8d8fe0           [ 4]         sta CrPsPtr+1
e123 : a066             [ 2] 	ldy #102               
e125 : b1f5             [ 5]         lda (z80_IX),y
e127 : 85f1             [ 3]         sta z80_E
e129 : 18               [ 2] 	clc                                             
e12a : 65f3             [ 3]         adc z80_L
e12c : 85f3             [ 3]         sta z80_L
e12e : a5f4             [ 3]         lda z80_H
e130 : 6900             [ 2]         adc #00
e132 : 85f4             [ 3]         sta z80_H       
e134 : e6f3             [ 5] 	inc z80_L                                       
e136 : d002             [ 3]         bne s2
e138 : e6f4             [ 5]         inc z80_H
e13a : a5f3             [ 3] s2	lda z80_L                                     
e13c : 8d91ea           [ 4]         sta LPosPtr+1
e13f : a5f4             [ 3]         lda z80_H
e141 : 8d95ea           [ 4]         sta LPosPtr+5
e144 : 68               [ 4] 	pla                                             
e145 : 85f2             [ 3]         sta z80_D
e147 : 68               [ 4]         pla
e148 : 85f1             [ 3]         sta z80_E
e14a : a067             [ 2] 	ldy #103               
e14c : b1f5             [ 5]         lda (z80_IX),y
e14e : 18               [ 2] 	clc                                             
e14f : 65f1             [ 3]         adc z80_E
e151 : 8db8ea           [ 4]         sta PatsPtr+1   
e154 : a068             [ 2]         ldy #104                  
e156 : b1f5             [ 5]         lda (z80_IX),y
e158 : 65f2             [ 3]         adc z80_D
e15a : 8dbfea           [ 4]         sta PatsPtr+8
e15d : a9a9             [ 2]         lda #lo(169)                             
e15f : 18               [ 2]         clc                                      
e160 : 65f1             [ 3]         adc z80_E
e162 : 8d1de7           [ 4]         sta OrnPtrs+1   
e165 : a900             [ 2]         lda #00
e167 : 65f2             [ 3]         adc z80_D
e169 : 8d24e7           [ 4]         sta OrnPtrs+8
e16c : a969             [ 2]         lda #lo(105)                             
e16e : 18               [ 2]         clc                                      
e16f : 65f1             [ 3]         adc z80_E
e171 : 8ddae3           [ 4]         sta SamPtrs+1
e174 : a900             [ 2]         lda #00
                                     ;INIT zeroes from VARS to VAR0END-1 (area
e176 : a06c             [ 2]         ldy #(VAR0END-VARS-1)
e178 :                       LOOP_LDIR 
e178 : 99e7ed           [ 5]         sta VARS,y
e17b : 88               [ 2]         dey         ; (carry not modified)
e17c : 10fa             [ 3]         bpl LOOP_LDIR
                                     ; A = #00  
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank3.s -----------------------------------

e17e : 65f2             [ 3]         adc z80_D
e180 : 8de1e3           [ 4]         sta SamPtrs+8                            
e183 : a5ed             [ 3]         lda SETUP                                
e185 : 297f             [ 2]         and #%01111111
e187 : 85ed             [ 3]         sta SETUP
                                     
e189 : a985             [ 2] 	lda #lo(T1_)
e18b : 85f1             [ 3]         sta z80_E
e18d : a9ed             [ 2]         lda #hi(T1_)
e18f : 85f2             [ 3]         sta z80_D
e191 : a901             [ 2]         lda #$01                                 
e193 : 8d3eee           [ 4] 	sta DelyCnt                                     
e196 : 8d02ee           [ 4]         sta ANtSkCn
e199 : 8d1fee           [ 4]         sta BNtSkCn
e19c : 8d3cee           [ 4]         sta CNtSkCn
e19f : a9f0             [ 2]         lda #$F0
e1a1 : 8d03ee           [ 4] 	sta AVolume                                     
e1a4 : 8d20ee           [ 4] 	sta BVolume                                     
e1a7 : 8d3dee           [ 4] 	sta CVolume                                     
e1aa : a981             [ 2]         lda #lo(EMPTYSAMORN)                     
e1ac : 85f3             [ 3]         sta z80_L
e1ae : 8d5fea           [ 4]         sta AdInPtA+1
e1b1 : 8df4ed           [ 4]         sta AOrnPtr
e1b4 : 8d11ee           [ 4]         sta BOrnPtr
e1b7 : 8d2eee           [ 4]         sta COrnPtr
e1ba : 8df6ed           [ 4]         sta ASamPtr
e1bd : 8d13ee           [ 4]         sta BSamPtr
e1c0 : 8d30ee           [ 4]         sta CSamPtr
e1c3 : a9ed             [ 2]         lda #hi(EMPTYSAMORN)
e1c5 : 85f4             [ 3]         sta z80_H
e1c7 : 8d63ea           [ 4] 	sta AdInPtA+5                                   
e1ca : 8df5ed           [ 4] 	sta AOrnPtr+1                                   
e1cd : 8d12ee           [ 4] 	sta BOrnPtr+1                                   
e1d0 : 8d2fee           [ 4] 	sta COrnPtr+1                                   
e1d3 : 8df7ed           [ 4] 	sta ASamPtr+1                                   
e1d6 : 8d14ee           [ 4] 	sta BSamPtr+1                                   
e1d9 : 8d31ee           [ 4] 	sta CSamPtr+1                                   
                             	    			                                         
                                     
e1dc : a00d             [ 2] 	ldy #13                    
e1de : b1f5             [ 5]         lda (z80_IX),y
e1e0 : 38               [ 2]         sec                                      
e1e1 : e930             [ 2]         sbc #$30        ; ascii value - 30 = vers
e1e3 : 9004             [ 3] 	bcc L20         ; inverse (pour SUB aussi)      
e1e5 : c90a             [ 2] 	cmp #10                                         
e1e7 : 9002             [ 3] 	bcc L21         ; < 10                          
e1e9 :                       L20	    
e1e9 : a906             [ 2]         lda #6          ; version par defaut si i
e1eb :                       L21	    
e1eb : 8d92e5           [ 4]         sta Version+1                            
e1ee : 48               [ 3] 	pha             ; save version nb
e1ef : c904             [ 2]         cmp #4          ; version 4 ?            
e1f1 : 9003             [ 3]         bcc s7b         ; < 4 (inverse carry)
e1f3 : 18               [ 2]         clc
e1f4 : 9001             [ 3]         bcc s8b         ; always
e1f6 : 38               [ 2] s7b     sec
e1f7 : a063             [ 2] s8b     ldy #99                 
e1f9 : b1f5             [ 5]         lda (z80_IX),y  
e1fb : 2a               [ 2]         rol a           ; carry !                
e1fc : 2907             [ 2] 	and #7          ; clear all bit except 0-1-2    
e1fe : aa               [ 2]         tax             ; save A
                             ;NoteTableCreator (c) Ivan Roshin
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank3.s -----------------------------------

                             ;A - NoteTableNumber*2+VersionForNoteTable
                             ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
                             
e1ff : a931             [ 2]      	lda #lo(NT_DATA)											    
e201 : 85f3             [ 3]      	sta z80_L
e203 : a9ed             [ 2]      	lda #hi(NT_DATA)
e205 : 85f4             [ 3]      	sta z80_H
e207 : a5f1             [ 3]      	lda z80_E													
e209 : 85ef             [ 3]      	sta z80_C
e20b : a5f2             [ 3]      	lda z80_D
e20d : 85f0             [ 3]      	sta z80_B
e20f : a900             [ 2]      	lda #00
e211 : a8               [ 2]         tay           ; ldy #00	        
e212 : 85f2             [ 3]      	sta z80_D
e214 : 8a               [ 2]      	txa           ; restore A									
e215 : 0a               [ 2]      	asl a															
e216 : 85f1             [ 3]      	sta z80_E													
e218 : 18               [ 2]      	clc                                        
e219 : 65f3             [ 3]         adc z80_L
e21b : 85f3             [ 3]         sta z80_L
e21d : a5f2             [ 3]         lda z80_D
e21f : 65f4             [ 3]         adc z80_H
e221 : 85f4             [ 3]         sta z80_H													
e223 : b1f3             [ 5]      	lda (z80_L),y												
e225 : 85f1             [ 3]      	sta z80_E
e227 : e6f3             [ 5]      	inc z80_L                                  
e229 : d002             [ 3]         bne s9b
e22b : e6f4             [ 5]         inc z80_H
e22d :                       s9b 
e22d : 46f1             [ 5] 	lsr z80_E											    				     				
e22f : b004             [ 3] 	bcs sb		; si c = 0 => $EA (NOP) / si c = 1 => $1
e231 : a9ea             [ 2] sa  	lda #$EA 	; -> $EA (NOP)
e233 : d002             [ 3]         bne sb1		; always	
e235 : a918             [ 2] sb	lda #$18	; -> $18 (clc) 									
e237 : 8da9e2           [ 4] sb1	sta L3		            									
e23a : a5f1             [ 3] 	lda z80_E													
e23c : a6f3             [ 3] 	ldx z80_L
e23e : 85f3             [ 3] 	sta z80_L
e240 : 86f1             [ 3] 	stx z80_E
e242 : a5f2             [ 3] 	lda z80_D
e244 : a6f4             [ 3] 	ldx z80_H
e246 : 85f4             [ 3] 	sta z80_H
e248 : 86f2             [ 3] 	stx z80_D
e24a : 18               [ 2] 	clc                                             
e24b : a5ef             [ 3]     	lda z80_C
e24d : 65f3             [ 3]     	adc z80_L
e24f : 85f3             [ 3]     	sta z80_L
e251 : a5f0             [ 3]     	lda z80_B
e253 : 65f4             [ 3]     	adc z80_H
e255 : 85f4             [ 3]     	sta z80_H
                             
e257 : b1f1             [ 5] 	lda (z80_E),y												
e259 : 18               [ 2] 	clc                                             
e25a : 6941             [ 2]         adc #lo(T_)
e25c : 85ef             [ 3] 	sta z80_C
e25e : 48               [ 3]         pha                                      
e25f : 69ed             [ 2]         adc #hi(T_)                              
e261 : 38               [ 2] 	sec                                             
e262 : e5ef             [ 3]         sbc z80_C
e264 : 85f0             [ 3]         sta z80_B                                
e266 : 48               [ 3] 	pha
                             
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank3.s -----------------------------------

e267 : a944             [ 2] 	lda #lo(NT_)											
e269 : 85f1             [ 3] 	sta z80_E
e26b : 48               [ 3] 	pha															
e26c : a9ef             [ 2] 	lda #hi(NT_)
e26e : 85f2             [ 3] 	sta z80_D
e270 : 48               [ 3] 	pha
e271 : a90c             [ 2] 	lda #12														
e273 : 85f0             [ 3] 	sta z80_B
e275 :                       L1	    
e275 : a5ef             [ 3]         lda z80_C													
e277 : 48               [ 3] 	pha
e278 : a5f0             [ 3] 	lda z80_B
e27a : 48               [ 3] 	pha
e27b : b1f3             [ 5] 	lda (z80_L),y												
e27d : 85ef             [ 3] 	sta z80_C
e27f : e6f3             [ 5] 	inc z80_L                                       
e281 : d002             [ 3]         bne sc
e283 : e6f4             [ 5]         inc z80_H
e285 :                       sc     
e285 : a5f3             [ 3] 	lda z80_L												    
e287 : 48               [ 3] 	pha
e288 : a5f4             [ 3] 	lda z80_H
e28a : 48               [ 3] 	pha
e28b : b1f3             [ 5] 	lda (z80_L),y												
e28d : 85f0             [ 3] 	sta z80_B
                             
e28f : a5f1             [ 3] 	lda z80_E       												
e291 : 85f3             [ 3] 	sta z80_L
e293 : 48               [ 3]         pha
e294 : a5f2             [ 3] 	lda z80_D
e296 : 85f4             [ 3] 	sta z80_H
e298 : 48               [ 3]         pha
e299 : a917             [ 2] 	lda #lo(23)		    										
e29b : 85f1             [ 3] 	sta z80_E
e29d : a900             [ 2] 	lda #hi(23)
e29f : 85f2             [ 3] 	sta z80_D
e2a1 : a908             [ 2] 	lda #8														
e2a3 : 85f6             [ 3] 	sta z80_IX+1
                                     
e2a5 :                       L2	    
e2a5 : 46f0             [ 5]         lsr z80_B													
e2a7 : 66ef             [ 5] 	ror z80_C													
e2a9 :                       L3	    
e2a9 : ac                    	fcb $AC			; clc ($18) or NOP ($EA)
e2aa : a5ef             [ 3] 	lda z80_C													
e2ac : 6900             [ 2] 	adc #00  		    								    	
e2ae : 91f3             [ 5] 	sta (z80_L),y												
e2b0 : e6f3             [ 5] 	inc z80_L                                       
e2b2 : d002             [ 3]         bne sd
e2b4 : e6f4             [ 5]         inc z80_H
e2b6 :                       sd      
e2b6 : a5f0             [ 3]         lda z80_B													
e2b8 : 6900             [ 2] 	adc #00 													
e2ba : 91f3             [ 5] 	sta (z80_L),y												
e2bc : 18               [ 2] 	clc                                             
e2bd : a5f1             [ 3]         lda z80_E
e2bf : 65f3             [ 3]         adc z80_L
e2c1 : 85f3             [ 3]         sta z80_L
e2c3 : a5f2             [ 3]         lda z80_D
e2c5 : 65f4             [ 3]         adc z80_H
e2c7 : 85f4             [ 3]         sta z80_H
e2c9 : c6f6             [ 5] 	dec z80_IX+1											    
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank3.s -----------------------------------

e2cb : d0d8             [ 3] 	bne L2														
                             
e2cd : 68               [ 4] 	pla															
e2ce : 85f2             [ 3] 	sta z80_D
e2d0 : 68               [ 4] 	pla         
e2d1 : 6902             [ 2]         adc #02     
e2d3 : 85f1             [ 3]         sta z80_E   
e2d5 : 9002             [ 3]         bcc sf      
e2d7 : e6f2             [ 5]         inc z80_D 
                             
e2d9 :                       sf     
e2d9 : 68               [ 4] 	pla												    	    
e2da : 85f4             [ 3] 	sta z80_H
e2dc : 68               [ 4] 	pla
e2dd : 85f3             [ 3] 	sta z80_L
e2df : e6f3             [ 5] 	inc z80_L                                       
e2e1 : d002             [ 3]         bne sg
e2e3 : e6f4             [ 5]         inc z80_H
e2e5 :                       sg     
e2e5 : 68               [ 4] 	pla												    	    
e2e6 : 85f0             [ 3] 	sta z80_B
e2e8 : 68               [ 4] 	pla
e2e9 : 85ef             [ 3] 	sta z80_C
e2eb : c6f0             [ 5] 	dec z80_B													
e2ed : f003             [ 3] 	beq sg1
e2ef : 4c75e2           [ 3]         jmp L1
e2f2 :                       sg1        
e2f2 : 68               [ 4] 	pla															
e2f3 : 85f4             [ 3] 	sta z80_H
e2f5 : 68               [ 4] 	pla
e2f6 : 85f3             [ 3] 	sta z80_L
e2f8 : 68               [ 4] 	pla															
e2f9 : 85f2             [ 3] 	sta z80_D
e2fb : 68               [ 4] 	pla
e2fc : 85f1             [ 3] 	sta z80_E
                                     								
e2fe : c94d             [ 2] 	cmp #lo(TCOLD_1)		        								
e300 : d005             [ 3]         bne CORR_1													
e302 : a9fd             [ 2] 	lda #$FD													
e304 : 8d72ef           [ 4] 	sta NT_+$2E									 				
                             
e307 :                       CORR_1	
e307 : 18               [ 2]         clc                                      
e308 : b1f1             [ 5]         lda (z80_E),y																										
e30a : f037             [ 3] 	beq TC_EXIT													
e30c : 6a               [ 2] 	ror a															
e30d : 08               [ 3] 	php			    ; save carry														
e30e : 0a               [ 2] 	asl a															
e30f : 85ef             [ 3] 	sta z80_C													
e311 : 18               [ 2] 	clc                                             
e312 : 65f3             [ 3]         adc z80_L
e314 : 85f3             [ 3]         sta z80_L
e316 : a5f0             [ 3]         lda z80_B
e318 : 65f4             [ 3]         adc z80_H
e31a : 85f4             [ 3]         sta z80_H                                
e31c : 28               [ 4] 	plp             ; restore carry (du ror)	       
e31d : 9007             [ 3] 	bcc CORR_2                                      
e31f : b1f3             [ 5] 	lda (z80_L),y												
e321 : 38               [ 2] 	sec															
e322 : e902             [ 2] 	sbc #$02
e324 : 91f3             [ 5] 	sta (z80_L),y
                             	
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank3.s -----------------------------------

e326 :                       CORR_2	
e326 : b1f3             [ 5]         lda (z80_L),y												
e328 : 18               [ 2] 	clc			
e329 : 6901             [ 2] 	adc #$01
e32b : 91f3             [ 5] 	sta (z80_L),y
e32d : 38               [ 2]         sec   		                                 
e32e : a5f3             [ 3] 	lda z80_L                                       
e330 : e5ef             [ 3] 	sbc z80_C
e332 : 85f3             [ 3] 	sta z80_L
e334 : a5f4             [ 3] 	lda z80_H
e336 : e5f0             [ 3] 	sbc z80_B
e338 : 85f4             [ 3] 	sta z80_H
e33a : e6f1             [ 5] 	inc z80_E                                       
e33c : d002             [ 3]         bne sh
e33e : e6f2             [ 5]         inc z80_D
e340 :                       sh     
e340 : 4c07e3           [ 3] 	jmp CORR_1												    
                             
e343 :                       TC_EXIT
e343 : 68               [ 4] 	pla			; restore version number						
                             
                             ;VolTableCreator (c) Ivan Roshin
                             ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
                             ;5.. - 3.5x..3.6x..VTII1.0)
                             
e344 : c905             [ 2] 	cmp #5		; version 										
e346 : a911             [ 2] 	lda #lo($11)                                    
e348 : 85f3             [ 3] 	sta z80_L
e34a : a900             [ 2]         lda #hi($11)													
e34c : 85f4             [ 3] 	sta z80_H													
e34e : 85f2             [ 3] 	sta z80_D                                       
e350 : 85f1             [ 3] 	sta z80_E													
e352 : a92a             [ 2] 	lda #$2A	; ($2A = rol A)								    
e354 : b008             [ 3] 	bcs M1		; CP -> carry inverse (CP 5)					
e356 : c6f3             [ 5] 	dec z80_L													
e358 : a5f3             [ 3] 	lda z80_L													
e35a : 85f1             [ 3] 	sta z80_E
e35c : a9ea             [ 2] 	lda #$EA	; ($EA = NOP)			    					
e35e :                       M1          
e35e : 8d85e3           [ 4]         sta M2														
e361 : a954             [ 2] 	lda #lo(VT_+16)												
e363 : 85f5             [ 3] 	sta z80_IX
e365 : a9ee             [ 2] 	lda #hi(VT_+16)
e367 : 85f6             [ 3] 	sta z80_IX+1
e369 : a910             [ 2] 	lda #$10													
e36b : 85ef             [ 3] 	sta z80_C
                             
e36d :                       INITV2  
e36d : 18               [ 2]         clc
e36e : a5f3             [ 3]         lda z80_L													
e370 : 48               [ 3] 	pha
e371 : 65f1             [ 3]         adc z80_E
e373 : 85f1             [ 3]         sta z80_E
e375 : a5f4             [ 3] 	lda z80_H
e377 : 48               [ 3] 	pha
e378 : 65f2             [ 3]         adc z80_D
e37a : 85f2             [ 3]         sta z80_D
                             	    
e37c : a900             [ 2]         lda #00														
e37e : 85f3             [ 3] 	sta z80_L
e380 : 85f4             [ 3] 	sta z80_H
e382 : 18               [ 2]         clc
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank3.s -----------------------------------

e383 :                       INITV1  
e383 : a5f3             [ 3]         lda z80_L													
e385 :                       M2          
e385 : ac                            fcb $AC	    ; $EA (nop) ou $2A (rol)
e386 : a5f4             [ 3] 	lda z80_H													
e388 : 6900             [ 2] 	adc #00			; + carry                             
e38a : 91f5             [ 5] 	sta (z80_IX),y												
e38c : e6f5             [ 5] 	inc z80_IX                                      
e38e : d002             [ 3]         bne si
e390 : e6f6             [ 5]         inc z80_IX+1
e392 :                       si     
e392 : 18               [ 2] 	clc                                             
e393 : a5f1             [ 3]         lda z80_E
e395 : 65f3             [ 3]         adc z80_L
e397 : 85f3             [ 3]         sta z80_L
e399 : a5f2             [ 3]         lda z80_D
e39b : 65f4             [ 3]         adc z80_H
e39d : 85f4             [ 3]         sta z80_H
e39f : e6ef             [ 5] 	inc z80_C												    
e3a1 : a5ef             [ 3] 	lda z80_C													
e3a3 : 290f             [ 2] 	and #15														
e3a5 : 18               [ 2]         clc         ; carry cleared by and
e3a6 : d0db             [ 3] 	bne INITV1													
                             
e3a8 : 68               [ 4] 	pla															
e3a9 : 85f4             [ 3] 	sta z80_H
e3ab : 68               [ 4] 	pla
e3ac : 85f3             [ 3] 	sta z80_L
e3ae : a5f1             [ 3] 	lda z80_E													
e3b0 : c977             [ 2] 	cmp #$77													
e3b2 : d002             [ 3] 	bne M3														
e3b4 : e6f1             [ 5] 	inc z80_E													
e3b6 :                       M3      
e3b6 : 18               [ 2]         clc                                      
e3b7 : a5ef             [ 3]         lda z80_C																								
e3b9 : d0b2             [ 3] 	bne	INITV2													
                             
e3bb : 4c32ec           [ 3] 	jmp ROUT													
                             ; ===============================================
                             ; Pattern Decoder
e3be :                       PD_OrSm	
e3be : a014             [ 2]         ldy #Env_En     										    
e3c0 : a900             [ 2] 	lda #00
e3c2 : 91f5             [ 5] 	sta (z80_IX),y
e3c4 : 200fe7           [ 6] 	jsr SETORN													
e3c7 : a000             [ 2] 	ldy #00					; lda ($AC,x)									
e3c9 : b1ef             [ 5] 	lda (z80_C),y
e3cb : e6ef             [ 5] 	inc z80_C                                       
e3cd : d002             [ 3]         bne sj
e3cf : e6f0             [ 5]         inc z80_B
e3d1 :                       sj     
e3d1 : 4a               [ 2] 	lsr a 													    
e3d2 : 9002             [ 3]         bcc sj1
e3d4 : 0980             [ 2]         ora #$80
e3d6 :                       sj1     
e3d6 :                       PD_SAM	
e3d6 : 0a               [ 2]         asl a 											    		
e3d7 :                       PD_SAM_	
e3d7 : 85f1             [ 3]         sta z80_E													
e3d9 :                       SamPtrs		
e3d9 : a9ac             [ 2] 	lda #$AC				
e3db : 18               [ 2]         clc
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank3.s -----------------------------------

e3dc : 65f1             [ 3]         adc z80_E
e3de : 85f3             [ 3] 	sta z80_L
e3e0 : a9ac             [ 2] 	lda #$AC
e3e2 : 6900             [ 2]         adc #00
e3e4 : 85f4             [ 3] 	sta z80_H
                             
e3e6 : a000             [ 2]         ldy #00
e3e8 : b1f3             [ 5] 	lda (z80_L),y
e3ea :                       MODADDR		
e3ea : 69ac             [ 2] 	adc #$AC												
e3ec : aa               [ 2] 	tax             ; save
e3ed : c8               [ 2] 	iny                                             
e3ee : b1f3             [ 5] 	lda (z80_L),y
e3f0 : 69ac             [ 2]         adc #$AC								    			
                             
e3f2 : a010             [ 2] 	ldy #SamPtr+1         										
e3f4 : 91f5             [ 5] 	sta (z80_IX),y
e3f6 : 88               [ 2] 	dey															
e3f7 : 8a               [ 2] 	txa         
e3f8 : 91f5             [ 5] 	sta (z80_IX),y
e3fa : 4c6fe4           [ 3] 	jmp PD_LOOP													
                             
e3fd :                       PD_VOL	
e3fd : 0a               [ 2]         asl a															
e3fe : 6900             [ 2]         adc #00
e400 : 0a               [ 2] 	asl a															
e401 : 6900             [ 2]         adc #00
e403 : 0a               [ 2] 	asl a															
e404 : 6900             [ 2]         adc #00
e406 : 0a               [ 2] 	asl a															
e407 : 6900             [ 2]         adc #00
e409 : a01c             [ 2] 	ldy #Volume         										
e40b : 91f5             [ 5] 	sta (z80_IX),y
e40d : 4c73e4           [ 3]         jmp PD_LP2													
                             	
e410 :                       PD_EOff	
e410 : a014             [ 2]         ldy #Env_En		    	        							
e412 : 91f5             [ 5] 	sta (z80_IX),y
e414 : a000             [ 2] 	ldy #PsInOr   			    					    		
e416 : 91f5             [ 5] 	sta (z80_IX),y
e418 : 4c73e4           [ 3] 	jmp PD_LP2													
                             
e41b :                       PD_SorE	
e41b : 38               [ 2]         sec															
e41c : e901             [ 2] 	sbc #01
e41e : 85ee             [ 3]         sta z80_A
e420 : d011             [ 3] 	bne PD_ENV													
e422 : a000             [ 2] 	ldy #00			        ; lda ($AC,x)												
e424 : b1ef             [ 5] 	lda (z80_C),y
e426 : e6ef             [ 5] 	inc z80_C                                       
e428 : d002             [ 3]         bne sl
e42a : e6f0             [ 5]         inc z80_B
e42c :                       sl     
e42c : a011             [ 2] 	ldy #NNtSkp    		        								
e42e : 91f5             [ 5] 	sta (z80_IX),y
e430 : 4c73e4           [ 3]         jmp PD_LP2													
                             
e433 :                       PD_ENV	
e433 : 20d2e6           [ 6]         jsr SETENV													
e436 : 4c73e4           [ 3] 	jmp PD_LP2													
                             
e439 :                       PD_ORN	
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank3.s -----------------------------------

e439 : 200fe7           [ 6]         jsr SETORN													
e43c : 4c6fe4           [ 3] 	jmp PD_LOOP													
                             
e43f :                       PD_ESAM	
e43f : a014             [ 2]         ldy #Env_En	             									
e441 : 91f5             [ 5] 	sta (z80_IX),y
e443 : a000             [ 2] 	ldy #PsInOr	    		        							
e445 : 91f5             [ 5] 	sta (z80_IX),y
e447 : a5ee             [ 3] 	lda z80_A           
e449 : f003             [ 3]         beq sm														
e44b : 20d2e6           [ 6] 	jsr SETENV
e44e : a000             [ 2] sm	ldy #00			    ; lda ($AC,x)												
e450 : b1ef             [ 5] 	lda (z80_C),y
e452 : e6ef             [ 5] 	inc z80_C                                       
e454 : d002             [ 3]         bne sn
e456 : e6f0             [ 5]         inc z80_B
e458 :                       sn     
e458 : 4cd7e3           [ 3]         jmp PD_SAM_								     			    
                             
e45b :                       PTDECOD 
e45b : a012             [ 2]         ldy #Note   							    				
e45d : b1f5             [ 5] 	lda (z80_IX),y
e45f : 8d54e5           [ 4] 	sta PrNote+1												
e462 : a006             [ 2] 	ldy #CrTnSl    		    						    		
e464 : b1f5             [ 5] 	lda (z80_IX),y                                  
e466 : 8d9ae5           [ 4] 	sta PrSlide+1												
e469 : c8               [ 2]         iny 
e46a : b1f5             [ 5] 	lda (z80_IX),y											
e46c : 8da1e5           [ 4] 	sta PrSlide+8
                             
e46f :                       PD_LOOP	
e46f : a910             [ 2]         lda #$10													
e471 : 85f1             [ 3] 	sta z80_E
                             	
e473 :                       PD_LP2	
e473 : a000             [ 2]         ldy #00			    ; lda ($AC,x)												
e475 : b1ef             [ 5] 	lda (z80_C),y
e477 : e6ef             [ 5] 	inc z80_C                                       
e479 : d002             [ 3]         bne so
e47b : e6f0             [ 5]         inc z80_B
e47d :                       so
e47d : 18               [ 2] 	clc															
e47e : 6910             [ 2] 	adc #$10
e480 : 9005             [ 3] 	bcc so1
e482 : 85ee             [ 3]         sta z80_A            
e484 : 4cbee3           [ 3]         jmp PD_OrSm
e487 : 6920             [ 2] so1     adc #$20                                 
e489 : d003             [ 3] 	bne so11													
e48b : 4c06e5           [ 3]         jmp PD_FIN
e48e : 9003             [ 3] so11	bcc so2													    
e490 : 4cd6e3           [ 3]         jmp PD_SAM
e493 : 6910             [ 2] so2	adc #$10                                     
e495 : f04b             [ 3] 	beq PD_REL													
e497 : 9003             [ 3] 	bcc so3 													
e499 : 4cfde3           [ 3]         jmp PD_VOL
e49c : 6910             [ 2] so3	adc #$10                                     
e49e : d003             [ 3] 	bne so4										    			
e4a0 : 4c10e4           [ 3]         jmp PD_EOff
e4a3 : 9003             [ 3] so4	bcc	so5												    	
e4a5 : 4c1be4           [ 3] 	jmp PD_SorE
e4a8 : 6960             [ 2] so5     adc #96                                  
e4aa : b041             [ 3] 	bcs PD_NOTE													
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank3.s -----------------------------------

e4ac : 6910             [ 2] 	adc #$10                                        
e4ae : 9005             [ 3] 	bcc so6
e4b0 : 85ee             [ 3]         sta z80_A												    	
e4b2 : 4c39e4           [ 3]         jmp PD_ORN													
e4b5 : 6920             [ 2] so6	adc #$20                                     
e4b7 : b023             [ 3] 	bcs PD_NOIS													 														
e4b9 : 6910             [ 2] 	adc #$10                                        
e4bb : 9005             [ 3]         bcc so7
e4bd : 85ee             [ 3]         sta z80_A												    	
e4bf : 4c3fe4           [ 3]         jmp PD_ESAM
e4c2 : 0a               [ 2] so7	asl a															
e4c3 : 85f1             [ 3] 	sta z80_E
e4c5 : 18               [ 2]         clc                                      
e4c6 : 695e             [ 2]         adc #lo(SPCCOMS+$FF20)							        
e4c8 : 85f3             [ 3]         sta z80_L
e4ca : a9e6             [ 2] 	lda #hi(SPCCOMS+$FF20)
e4cc : 6900             [ 2]         adc #00
e4ce : 85f4             [ 3] 	sta z80_H
                                     ; on doit inverser le PUSH car l'adresse 
e4d0 : a001             [ 2]         ldy #01	
e4d2 : b1f3             [ 5] 	lda (z80_L),y												
e4d4 : 48               [ 3] 	pha             ; push D
e4d5 : 88               [ 2] 	dey                                             
e4d6 : b1f3             [ 5] 	lda (z80_L),y										        
e4d8 : 48               [ 3] 	pha             ; push E
e4d9 : 4c6fe4           [ 3] 	jmp PD_LOOP													
                             
e4dc :                       PD_NOIS									
e4dc : 8d42ee           [ 4]         sta Ns_Base                              
e4df : 4c73e4           [ 3] 	jmp PD_LP2													
                             
e4e2 :                       PD_REL	
e4e2 : a015             [ 2]         ldy #Flags   								    			
e4e4 : b1f5             [ 5] 	lda (z80_IX),y
e4e6 : 29fe             [ 2] 	and #%11111110
e4e8 : 91f5             [ 5] 	sta (z80_IX),y
e4ea : 4cf9e4           [ 3] 	jmp PD_RES													
                             	
e4ed :                       PD_NOTE	
e4ed : a012             [ 2]         ldy #Note    	 				    						
e4ef : 91f5             [ 5] 	sta (z80_IX),y	
e4f1 : a015             [ 2] 	ldy #Flags      											
e4f3 : b1f5             [ 5] 	lda (z80_IX),y
e4f5 : 0901             [ 2] 	ora #%00000001
e4f7 : 91f5             [ 5] 	sta (z80_IX),y
                             	    													
e4f9 :                       PD_RES												
e4f9 : a900             [ 2]         lda #00	
e4fb : 85f3             [ 3]         sta z80_L
e4fd : 85f4             [ 3] 	sta z80_H
e4ff : a00b             [ 2] 	ldy #11
e501 :                       bres
e501 : 91f5             [ 5] 	sta (z80_IX),y          
e503 : 88               [ 2] 	dey
e504 : 10fb             [ 3]         bpl bres
e506 :                       PD_FIN	
e506 : a011             [ 2] 	ldy #NNtSkp     						    				
e508 : b1f5             [ 5] 	lda (z80_IX),y
e50a : a01b             [ 2] 	ldy #NtSkCn     		    								
e50c : 91f5             [ 5] 	sta (z80_IX),y
e50e : 60               [ 6] 	rts 														
                             
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank3.s -----------------------------------

e50f :                       C_PORTM
e50f : a015             [ 2] 	ldy #Flags  												
e511 : b1f5             [ 5] 	lda (z80_IX),y
e513 : 29fb             [ 2] 	and #%11111011
e515 : 91f5             [ 5] 	sta (z80_IX),y
e517 : a000             [ 2] 	ldy #00			    ; lda ($AC,x)												
e519 : b1ef             [ 5] 	lda (z80_C),y
e51b : a016             [ 2]         ldy #TnSlDl     				    			    		
e51d : 91f5             [ 5] 	sta (z80_IX),y
e51f : a005             [ 2]         ldy #TSlCnt	        			    						
e521 : 91f5             [ 5] 	sta (z80_IX),y
                             
e523 : 18               [ 2]         clc
e524 : a5ef             [ 3]         lda z80_C
e526 : 6903             [ 2]         adc #03
e528 : 85ef             [ 3]         sta z80_C
e52a : 9002             [ 3]         bcc st
e52c : e6f0             [ 5]         inc z80_B
e52e :                       st     
e52e : a944             [ 2] 	lda #lo(NT_)			; OPT										
e530 : 85f1             [ 3] 	sta z80_E
e532 : a9ef             [ 2] 	lda #hi(NT_)           ; OPT
e534 : 85f2             [ 3] 	sta z80_D
e536 : a012             [ 2] 	ldy #Note	        										
e538 : b1f5             [ 5] 	lda (z80_IX),y
e53a : a013             [ 2] 	ldy #SlToNt         										
e53c : 91f5             [ 5] 	sta (z80_IX),y
e53e : 0a               [ 2] 	asl a																																											
e53f : 18               [ 2] 	clc                                             
e540 : 65f1             [ 3]         adc z80_E           ; OPT
e542 : 85f3             [ 3]         sta z80_L
e544 : a5f2             [ 3]         lda z80_D           ; OPT
e546 : 6900             [ 2]         adc #00           
e548 : 85f4             [ 3]         sta z80_H
e54a : a000             [ 2]         ldy #00	
e54c : b1f3             [ 5] 	lda (z80_L),y 												
e54e : 48               [ 3] 	pha	
e54f : c8               [ 2] 	iny                                             
e550 : b1f3             [ 5] 	lda (z80_L),y 												
e552 : 48               [ 3] 	pha
e553 :                       PrNote	
e553 : a93e             [ 2]         lda #$3E													
e555 : a012             [ 2] 	ldy #Note   					    						
e557 : 91f5             [ 5] 	sta (z80_IX),y
e559 : 0a               [ 2] 	asl a																																			
e55a : 18               [ 2] 	clc                                             
e55b : 65f1             [ 3]         adc z80_E           ; OPT
e55d : 85f3             [ 3]         sta z80_L
e55f : a5f2             [ 3]         lda z80_D           ; OPT
e561 : 6900             [ 2]         adc #00
e563 : 85f4             [ 3]         sta z80_H
e565 : a000             [ 2] 	ldy #00
e567 : b1f3             [ 5]         lda (z80_L),y												
e569 : 85f1             [ 3] 	sta z80_E
e56b : c8               [ 2] 	iny                                             
e56c : b1f3             [ 5] 	lda (z80_L),y											    
e56e : 85f2             [ 3] 	sta z80_D
e570 : a019             [ 2] 	ldy #TnDelt 
e572 : 68               [ 4]         pla															
e573 : 85f4             [ 3] 	sta z80_H
e575 : 68               [ 4] 	pla       
e576 : 38               [ 2] 	sec                                             
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank3.s -----------------------------------

e577 : e5f1             [ 3]         sbc z80_E
e579 : 85f3             [ 3]         sta z80_L
e57b : 91f5             [ 5]         sta (z80_IX),y
e57d : a5f4             [ 3]         lda z80_H
e57f : e5f2             [ 3]         sbc z80_D
e581 : 85f4             [ 3]         sta z80_H 
e583 : c8               [ 2]         iny                                      
e584 : 91f5             [ 5]         sta (z80_IX),y
e586 : a006             [ 2] 	ldy #CrTnSl                                     
e588 : b1f5             [ 5]         lda (z80_IX),y
e58a : 85f1             [ 3]         sta z80_E
e58c : c8               [ 2] 	iny                                             
e58d : b1f5             [ 5]         lda (z80_IX),y
e58f : 85f2             [ 3]         sta z80_D
e591 :                       Version
e591 : a93e             [ 2] 	lda #$3E                                        
e593 : c906             [ 2] 	cmp #6                                          
e595 : 900f             [ 3] 	bcc OLDPRTM     ; < 6
e597 : a006             [ 2]         ldy #CrTnSl                              
e599 :                       PrSlide	
e599 : a9ac             [ 2]         lda #$AC                                 
e59b : 85f1             [ 3]         sta z80_E
e59d : 91f5             [ 5]         sta (z80_IX),y
e59f : c8               [ 2]         iny
e5a0 : a9ac             [ 2]         lda #$AC
e5a2 : 85f2             [ 3]         sta z80_D
e5a4 : 91f5             [ 5]         sta (z80_IX),y
                             	                                                
e5a6 :                       OLDPRTM	
e5a6 : a000             [ 2]         ldy #00                                  
e5a8 : b1ef             [ 5]         lda (z80_C),y
e5aa : c8               [ 2]         iny                                      
e5ab : 85f7             [ 3]         sta z80_AP                               
e5ad : b1ef             [ 5] 	lda (z80_C),y                                   
e5af : 85ee             [ 3] 	sta z80_A
e5b1 : a5ef             [ 3]         lda z80_C
e5b3 : 18               [ 2]         clc
e5b4 : 6902             [ 2]         adc #02
e5b6 : 85ef             [ 3]         sta z80_C
e5b8 : 9002             [ 3]         bcc sw
e5ba : e6f0             [ 5]         inc z80_B
e5bc :                       sw
e5bc : a5ee             [ 3] 	lda z80_A                                       
e5be : f010             [ 3] 	beq NOSIG                                       
e5c0 : a5f1             [ 3] 	lda z80_E													
e5c2 : a6f3             [ 3] 	ldx z80_L
e5c4 : 85f3             [ 3] 	sta z80_L
e5c6 : 86f1             [ 3] 	stx z80_E
e5c8 : a5f2             [ 3] 	lda z80_D
e5ca : a6f4             [ 3] 	ldx z80_H
e5cc : 85f4             [ 3] 	sta z80_H
e5ce : 86f2             [ 3] 	stx z80_D
e5d0 :                       NOSIG	
e5d0 : 38               [ 2]         sec                            
e5d1 : a5f3             [ 3]         lda z80_L
e5d3 : e5f1             [ 3]         sbc z80_E
e5d5 : 85f3             [ 3]         sta z80_L
e5d7 : a5f4             [ 3]         lda z80_H
e5d9 : e5f2             [ 3]         sbc z80_D
e5db : 85f4             [ 3]         sta z80_H
e5dd : 1015             [ 3] 	bpl SET_STP                                     
e5df : a5ee             [ 3] 	lda z80_A                                       
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank3.s -----------------------------------

e5e1 : 49ff             [ 2]         eor #$FF                                 
e5e3 : a6f7             [ 3]         ldx z80_AP                               
e5e5 : 85f7             [ 3]         sta z80_AP
e5e7 : 8a               [ 2]         txa
e5e8 : 49ff             [ 2] 	eor #$FF                                        
e5ea : 18               [ 2]         clc             
e5eb : 6901             [ 2]         adc #01                                  
e5ed : aa               [ 2]         tax                                      
e5ee : a5f7             [ 3]         lda z80_AP
e5f0 : 86f7             [ 3]         stx z80_AP
e5f2 : 85ee             [ 3]         sta z80_A
e5f4 :                       SET_STP	
e5f4 : a018             [ 2]         ldy #(TSlStp+1)                          
e5f6 : a5ee             [ 3]         lda z80_A
e5f8 : 91f5             [ 5]         sta (z80_IX),y                           
e5fa : aa               [ 2]         tax                                      
e5fb : a5f7             [ 3]         lda z80_AP
e5fd : 86f7             [ 3]         stx z80_AP
e5ff : 85ee             [ 3]         sta z80_A
e601 : 88               [ 2] 	    dey                       
e602 : 91f5             [ 5]         sta (z80_IX),y
e604 : a00a             [ 2]         ldy #COnOff                              
e606 : a900             [ 2]         lda #00
e608 : 91f5             [ 5]         sta (z80_IX),y
e60a : 60               [ 6] 	rts                                             
                             
e60b :                       C_GLISS	
e60b : a015             [ 2]         ldy #Flags       											
e60d : b1f5             [ 5] 	lda (z80_IX),y
e60f : 0904             [ 2] 	ora #%00000100
e611 : 91f5             [ 5] 	sta (z80_IX),y
e613 : a000             [ 2] 	ldy #00                 ; lda ($AC,x)	          
e615 : b1ef             [ 5]         lda (z80_C),y
e617 : 85ee             [ 3]         sta z80_A
e619 : e6ef             [ 5]         inc z80_C                                
e61b : d002             [ 3]         bne sy
e61d : e6f0             [ 5]         inc z80_B
e61f :                       sy     
e61f : a016             [ 2] 	ldy #TnSlDl                                     
e621 : 91f5             [ 5]         sta (z80_IX),y
e623 : 18               [ 2] 	clc                                             
e624 : a5ee             [ 3]         lda z80_A                                
e626 : d00d             [ 3] 	bne GL36                                        
e628 : ad92e5           [ 4] 	lda Version+1                                   
e62b : c907             [ 2] 	cmp #7                                          
e62d : b004             [ 3] 	bcs sz                                          
e62f : a900             [ 2]         lda #00         ; si A < 7  , A = 0 ($FF+
e631 : f002             [ 3]         beq saa
e633 : a901             [ 2] sz      lda #01         ; si A >= 7 , A = 1 ($00+
e635 :                       saa	    
e635 :                       GL36	
e635 : a005             [ 2]         ldy #TSlCnt                              
e637 : 91f5             [ 5] 	sta (z80_IX),y                                  
e639 : a000             [ 2]         ldy #00                                  
e63b : b1ef             [ 5]         lda (z80_C),y
e63d : 85f7             [ 3]         sta z80_AP
e63f : c8               [ 2]         iny
e640 : b1ef             [ 5]         lda (z80_C),y
e642 : 85ee             [ 3]         sta z80_A
e644 : 18               [ 2]         clc
e645 : a5ef             [ 3]         lda z80_C
e647 : 6902             [ 2]         adc #02
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank3.s -----------------------------------

e649 : 85ef             [ 3]         sta z80_C                                
e64b : 9002             [ 3]         bcc sac
e64d : e6f0             [ 5]         inc z80_B
e64f :                       sac     
e64f : 4cf4e5           [ 3] 	jmp SET_STP                                     
                             
e652 :                       C_SMPOS	
e652 : a000             [ 2]         ldy #00                  ; lda ($AC,x)	  
e654 : b1ef             [ 5]         lda (z80_C),y
e656 : e6ef             [ 5]         inc z80_C                                
e658 : d002             [ 3]         bne sad
e65a : e6f0             [ 5]         inc z80_B
e65c :                       sad     
e65c : a001             [ 2] 	ldy #PsInSm                                     
e65e : 91f5             [ 5]         sta (z80_IX),y
e660 : 60               [ 6] 	rts                                             
                             
e661 :                       C_ORPOS	
e661 : a000             [ 2]         ldy #00                 ; lda ($AC,x)	   
e663 : b1ef             [ 5]         lda (z80_C),y
e665 : e6ef             [ 5]         inc z80_C                                
e667 : d002             [ 3]         bne sae
e669 : e6f0             [ 5]         inc z80_B
e66b :                       sae     
e66b : a000             [ 2] 	ldy #PsInOr                                     
e66d : 91f5             [ 5]         sta (z80_IX),y
e66f : 60               [ 6] 	rts                                             
                                 
e670 :                       C_VIBRT	
e670 : a000             [ 2]         ldy #00                 ; lda ($AC,x)	   
e672 : b1ef             [ 5]         lda (z80_C),y
e674 : e6ef             [ 5]         inc z80_C                                
e676 : d002             [ 3]         bne saf
e678 : e6f0             [ 5]         inc z80_B
e67a :                       saf     
e67a : a00b             [ 2] 	ldy #OnOffD                                     
e67c : 91f5             [ 5]         sta (z80_IX),y
e67e : a00a             [ 2]         ldy #COnOff                              
e680 : 91f5             [ 5]         sta (z80_IX),y
e682 : a000             [ 2] 	ldy #00                 ; lda ($AC,x)	          
e684 : b1ef             [ 5]         lda (z80_C),y
e686 : e6ef             [ 5]         inc z80_C                                
e688 : d002             [ 3]         bne sag
e68a : e6f0             [ 5]         inc z80_B
e68c : a00c             [ 2] sag     ldy #OffOnD                              
e68e : 91f5             [ 5]         sta (z80_IX),y
e690 : a900             [ 2]         lda #00                                  
e692 : a005             [ 2]         ldy #TSlCnt                              
e694 : 91f5             [ 5]         sta (z80_IX),y
e696 : a006             [ 2] 	ldy #CrTnSl                                     
e698 : 91f5             [ 5]         sta (z80_IX),y
e69a : c8               [ 2] 	iny                                             
e69b : 91f5             [ 5]         sta (z80_IX),y
e69d : 60               [ 6] 	rts                                             
                             
e69e :                       C_ENGLS	
e69e : a000             [ 2]         ldy #00                                  
e6a0 : b1ef             [ 5]         lda (z80_C),y
e6a2 : 8d1fec           [ 4]         sta Env_Del+1                            
e6a5 : 8d41ee           [ 4] 	sta CurEDel
e6a8 : c8               [ 2]         iny
e6a9 : b1ef             [ 5]         lda (z80_C),y
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank3.s -----------------------------------

e6ab : 85f3             [ 3]         sta z80_L                                
e6ad : 8d24ec           [ 4]         sta ESldAdd+1
e6b0 : c8               [ 2]         iny
e6b1 : b1ef             [ 5]         lda (z80_C),y
e6b3 : 85f4             [ 3]         sta z80_H                                
e6b5 : 8d2cec           [ 4] 	sta ESldAdd+9
e6b8 : 18               [ 2]         clc
e6b9 : a5ef             [ 3]         lda z80_C 
e6bb : 6903             [ 2]         adc #03
e6bd : 85ef             [ 3]         sta z80_C
e6bf : 9002             [ 3]         bcc sah
e6c1 : e6f0             [ 5]         inc z80_B
e6c3 :                       sah	                                             
e6c3 : 60               [ 6] 	rts                                             
                             
e6c4 :                       C_DELAY	
e6c4 : a000             [ 2]         ldy #00                 ; lda ($AC,x)	   
e6c6 : b1ef             [ 5]         lda (z80_C),y
e6c8 : e6ef             [ 5]         inc z80_C                                
e6ca : d002             [ 3]         bne sak
e6cc : e6f0             [ 5]         inc z80_B
e6ce :                       sak
e6ce : 8d5aeb           [ 4] 	sta Delay+1                                     
e6d1 : 60               [ 6] 	rts                                             
                             
e6d2 :                       SETENV	
e6d2 : a014             [ 2]         ldy #Env_En                              
e6d4 : a5f1             [ 3]         lda z80_E
e6d6 : 91f5             [ 5]         sta (z80_IX),y
e6d8 : a5ee             [ 3]         lda z80_A                ; OPT (inverser 
e6da : 8d51ee           [ 4]         sta AYREGS+EnvTp
e6dd : a000             [ 2] 	ldy #00                                         
e6df : b1ef             [ 5]         lda (z80_C),y           
e6e1 : 85f4             [ 3] 	sta z80_H                                       
e6e3 : 8d53ee           [ 4]         sta EnvBase+1                            
e6e6 : c8               [ 2] 	iny                                             
e6e7 : b1ef             [ 5]         lda (z80_C),y
e6e9 : 85f3             [ 3] 	sta z80_L                                       
e6eb : 8d52ee           [ 4] 	sta EnvBase
e6ee : a5ef             [ 3]         lda z80_C
e6f0 : 18               [ 2]         clc
e6f1 : 6902             [ 2]         adc #02
e6f3 : 85ef             [ 3]         sta z80_C
e6f5 : 9002             [ 3]         bcc sam
e6f7 : e6f0             [ 5]         inc z80_B                                
e6f9 : a900             [ 2] sam	lda #00                                      
e6fb : a000             [ 2] 	ldy #PsInOr                                     
e6fd : 91f5             [ 5]         sta (z80_IX),y
e6ff : 8d41ee           [ 4] 	sta CurEDel                                     
e702 : 85f4             [ 3] 	sta z80_H                                       
e704 : 8d40ee           [ 4]         sta CurESld+1                            
e707 : 85f3             [ 3] 	sta z80_L                                       
e709 : 85ee             [ 3]         sta z80_A
e70b : 8d3fee           [ 4] 	sta CurESld                                     
e70e :                       C_NOP	
e70e : 60               [ 6]         rts                                      
                             
e70f :                       SETORN	
e70f : a5ee             [ 3]         lda z80_A
e711 : 0a               [ 2]         asl a                                    
e712 : 85f1             [ 3] 	sta z80_E                                       
e714 : a900             [ 2] 	lda #00             ; OPT (inutile ?)           
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank3.s -----------------------------------

e716 : 85f2             [ 3]         sta z80_D
e718 : a000             [ 2] 	ldy #PsInOr                                     
e71a : 91f5             [ 5]         sta (z80_IX),y
e71c :                       OrnPtrs
e71c : a9ac             [ 2] 	    lda #$AC           
e71e : 18               [ 2]         clc
e71f : 65f1             [ 3]         adc z80_E                                
e721 : 85f3             [ 3]         sta z80_L
e723 : a9ac             [ 2]         lda #$AC
e725 : 6900             [ 2]         adc #00
e727 : 85f4             [ 3]         sta z80_H
e729 : a000             [ 2] 	ldy #00                                         
e72b : b1f3             [ 5]         lda (z80_L),y
e72d :                       MDADDR2
e72d : 69ac             [ 2] 	adc #$AC
e72f : aa               [ 2]         tax             ; save
e730 : c8               [ 2] 	iny                                             
e731 : b1f3             [ 5] 	lda (z80_L),y
e733 : 69ac             [ 2]         adc #$AC                                 
                             	    
e735 : a00e             [ 2] 	ldy #OrnPtr+1                                   
e737 : 91f5             [ 5]         sta (z80_IX),y
e739 : 88               [ 2]         dey
e73a : 8a               [ 2] 	txa                                             
e73b : 91f5             [ 5]         sta (z80_IX),y
e73d : 60               [ 6] 	rts                                             
                             
                             ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODU
e73e :                       SPCCOMS 
e73e : 0de7                          fcw C_NOP-1
e740 : 0ae6                  	fcw C_GLISS-1
e742 : 0ee5                  	fcw C_PORTM-1
e744 : 51e6                  	fcw C_SMPOS-1
e746 : 60e6                  	fcw C_ORPOS-1
e748 : 6fe6                  	fcw C_VIBRT-1
e74a : 0de7                  	fcw C_NOP-1
e74c : 0de7                  	fcw C_NOP-1
e74e : 9de6                  	fcw C_ENGLS-1
e750 : c3e6                  	fcw C_DELAY-1
e752 : 0de7                  	fcw C_NOP-1
e754 : 0de7                  	fcw C_NOP-1
e756 : 0de7                  	fcw C_NOP-1
e758 : 0de7                  	fcw C_NOP-1
e75a : 0de7                  	fcw C_NOP-1
e75c : 0de7                  	fcw C_NOP-1
                             ; ===============================================
e75e :                       CHREGS	
e75e : a900             [ 2]         lda #00                                  
e760 : 85ee             [ 3] 	    sta z80_A       ; save
e762 : 8d4eee           [ 4]         sta Ampl                                 
e765 : a5f3             [ 3] 	    lda z80_L                                   
e767 : 85fc             [ 3]         sta val3                                 
e769 : a5f4             [ 3]         lda z80_H
e76b : 85fd             [ 3]         sta val3+1
e76d : a015             [ 2]         ldy #Flags                               
e76f : a901             [ 2]         lda #%00000001
e771 : 85f8             [ 3]         sta val1
e773 : b1f5             [ 5]         lda (z80_IX),y
e775 : 24f8             [ 3]         bit val1
e777 : d003             [ 3] 	    bne saq
e779 : 4cf5e9           [ 3]         jmp CH_EXIT                              
e77c :                       saq     	
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank3.s -----------------------------------

                                                                              
e77c : a00d             [ 2] 	    ldy #OrnPtr                                 
e77e : b1f5             [ 5]         lda (z80_IX),y
e780 : 85f3             [ 3]         sta z80_L
e782 : 85f8             [ 3]         sta val1            ; save L
e784 : c8               [ 2]         iny                                      
e785 : b1f5             [ 5]         lda (z80_IX),y
e787 : 85f4             [ 3]         sta z80_H
e789 : 85f9             [ 3]         sta val1+1          ; save H
                             	                                                
e78b : a000             [ 2]         ldy #00
e78d : b1f3             [ 5]         lda (z80_L),y                            
e78f : 85f1             [ 3]         sta z80_E
e791 : c8               [ 2]         iny
e792 : b1f3             [ 5]         lda (z80_L),y
e794 : 85f2             [ 3]         sta z80_D
e796 : a000             [ 2] 	    ldy #PsInOr                                 
e798 : b1f5             [ 5]         lda (z80_IX),y
e79a : 85f3             [ 3] 	    sta z80_L                                   
e79c : 85ee             [ 3]         sta z80_A                                
e79e : 18               [ 2] 	    clc
e79f : a5f8             [ 3]         lda val1
e7a1 : 65f3             [ 3]         adc z80_L
e7a3 : 85f3             [ 3]         sta z80_L
e7a5 : a5f9             [ 3]         lda val1+1
e7a7 : 6900             [ 2]         adc #00                
e7a9 : 85f4             [ 3]         sta z80_H                                
e7ab : a5f3             [ 3]         lda z80_L
e7ad : 6902             [ 2]         adc #02
e7af : 85f3             [ 3]         sta z80_L
e7b1 : a5f4             [ 3]         lda z80_H
e7b3 : 6900             [ 2]         adc #00
e7b5 : 85f4             [ 3]         sta z80_H
e7b7 : a5ee             [ 3]         lda z80_A                                
e7b9 : 6901             [ 2]         adc #01
e7bb : c5f2             [ 3]         cmp z80_D                                
e7bd : 9003             [ 3] 	    bcc CH_ORPS                                 
e7bf : 18               [ 2] 	    clc
e7c0 : a5f1             [ 3]         lda z80_E                                
e7c2 :                       CH_ORPS	
e7c2 : a000             [ 2]         ldy #PsInOr                              
e7c4 : 91f5             [ 5]         sta (z80_IX),y
e7c6 : a012             [ 2] 	    ldy #Note                                   
e7c8 : b1f5             [ 5]         lda (z80_IX),y
e7ca : a000             [ 2] 	    ldy #00                                     
e7cc : 71f3             [ 5]         adc (z80_L),y       ; adc ($AC,x)	
e7ce : 1002             [ 3] 	    bpl CH_NTP                                  
e7d0 : a900             [ 2] 	    lda #00                                     
e7d2 :                       CH_NTP	
e7d2 : c960             [ 2]         cmp #96                                  
e7d4 : 9002             [ 3] 	    bcc CH_NOK                                  
e7d6 : a95f             [ 2] 	    lda #95                                     
e7d8 :                       CH_NOK	
e7d8 : 0a               [ 2]         asl a                                    
e7d9 : 85f7             [ 3]         sta z80_AP                               
e7db : a00f             [ 2] 	    ldy #SamPtr                                 
e7dd : b1f5             [ 5]         lda (z80_IX),y
e7df : 85f3             [ 3]         sta z80_L
e7e1 : 85f8             [ 3] 	    sta val1            ; save L
e7e3 : c8               [ 2]         iny                                      
e7e4 : b1f5             [ 5]         lda (z80_IX),y
e7e6 : 85f4             [ 3]         sta z80_H
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank3.s -----------------------------------

e7e8 : 85f9             [ 3]         sta val1+1          ; save H
e7ea : a000             [ 2] 	    ldy #00
e7ec : b1f3             [ 5]         lda (z80_L),y                            
e7ee : 85f1             [ 3]         sta z80_E   
e7f0 : c8               [ 2]         iny
e7f1 : b1f3             [ 5]         lda (z80_L),y
e7f3 : 85f2             [ 3]         sta z80_D   
                             
e7f5 : a001             [ 2] 	    ldy #PsInSm                                 
e7f7 : b1f5             [ 5]         lda (z80_IX),y
e7f9 : 85f0             [ 3] 	    sta z80_B                                   
e7fb : 0a               [ 2] 	    asl a                                       
e7fc : 0a               [ 2] 	    asl a                                       
e7fd : 85f3             [ 3] 	    sta z80_L                                   
e7ff : 18               [ 2]         clc
e800 : 65f8             [ 3]         adc val1
e802 : 85f3             [ 3]         sta z80_L
e804 : a5f9             [ 3]         lda val1+1
e806 : 6900             [ 2]         adc #00
e808 : 85f4             [ 3]         sta z80_H                                
e80a : a5f3             [ 3]         lda z80_L
e80c : 6902             [ 2]         adc #02
e80e : 85f3             [ 3]         sta z80_L
e810 : a5f4             [ 3]         lda z80_H
e812 : 6900             [ 2]         adc #00
e814 : 85f4             [ 3]         sta z80_H
                             
e816 : a5f0             [ 3] 	    lda z80_B                                   
e818 : 6901             [ 2]         adc #01
e81a : c5f2             [ 3] 	    cmp z80_D                                   
e81c : 9002             [ 3] 	    bcc CH_SMPS                                 
e81e : a5f1             [ 3] 	    lda z80_E                                   
e820 :                       CH_SMPS	
e820 : a001             [ 2]         ldy #PsInSm                              
e822 : 91f5             [ 5]         sta (z80_IX),y
e824 : a000             [ 2]         ldy #00
e826 : b1f3             [ 5]         lda (z80_L),y                            
e828 : 85ef             [ 3]         sta z80_C
e82a : c8               [ 2]         iny
e82b : b1f3             [ 5]         lda (z80_L),y
e82d : 85f0             [ 3]         sta z80_B
                             
e82f : a008             [ 2]         ldy #TnAcc                               
e831 : b1f5             [ 5]         lda (z80_IX),y
e833 : 85f1             [ 3]         sta z80_E
e835 : c8               [ 2]         iny
e836 : b1f5             [ 5]         lda (z80_IX),y
e838 : 85f2             [ 3] 	    sta z80_D                                   
e83a : 18               [ 2] 	    clc                                         
e83b : a002             [ 2]         ldy #02
e83d : b1f3             [ 5]         lda (z80_L),y                            
e83f : 65f1             [ 3]         adc z80_E
e841 : aa               [ 2]         tax
e842 : c8               [ 2]         iny
e843 : b1f3             [ 5]         lda (z80_L),y
e845 : 65f2             [ 3]         adc z80_D
e847 : 85f4             [ 3]         sta z80_H
e849 : 85f2             [ 3]         sta z80_D
e84b : 8a               [ 2]         txa
e84c : 85f3             [ 3]         sta z80_L
e84e : 85f1             [ 3]         sta z80_E
                             
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank3.s -----------------------------------

e850 : a940             [ 2]         lda #%01000000                           
e852 : 24f0             [ 3]         bit z80_B
e854 : f00b             [ 3] 	    beq CH_NOAC                                 
e856 : a008             [ 2] 	    ldy #TnAcc                                  
e858 : a5f3             [ 3]         lda z80_L
e85a : 91f5             [ 5]         sta (z80_IX),y
e85c : c8               [ 2] 	    iny                                         
e85d : a5f4             [ 3]         lda z80_H
e85f : 91f5             [ 5]         sta (z80_IX),y
e861 :                       CH_NOAC 												             
e861 : a5f7             [ 3]         lda z80_AP                               
e863 : 85ee             [ 3]         sta z80_A                                
e865 : 85f3             [ 3]         sta z80_L                                
e867 : 18               [ 2]         clc
e868 : a944             [ 2]         lda #lo(NT_)
e86a : 65f3             [ 3]         adc z80_L
e86c : 85f3             [ 3]         sta z80_L
e86e : a9ef             [ 2]         lda #hi(NT_)
e870 : 6900             [ 2]         adc #00
e872 : 85f4             [ 3]         sta z80_H
e874 : a000             [ 2]         ldy #00
e876 : b1f3             [ 5]         lda (z80_L),y                            
e878 : 65f1             [ 3]         adc z80_E
e87a : aa               [ 2]         tax
e87b : c8               [ 2]         iny
e87c : b1f3             [ 5]         lda (z80_L),y
e87e : 65f2             [ 3]         adc z80_D                                
e880 : 85f4             [ 3]         sta z80_H
e882 : 8a               [ 2]         txa
e883 : 85f3             [ 3]         sta z80_L
e885 : 18               [ 2]         clc
e886 : a006             [ 2] 	    ldy #CrTnSl                                 
e888 : b1f5             [ 5]         lda (z80_IX),y
e88a : 85f1             [ 3]         sta z80_E
e88c : 65f3             [ 3]         adc z80_L
e88e : 85f3             [ 3]         sta z80_L
e890 : 85fc             [ 3] 	    sta val3
e892 : c8               [ 2]         iny                                      
e893 : b1f5             [ 5]         lda (z80_IX),y
e895 : 85f2             [ 3]         sta z80_D
e897 : 65f4             [ 3]         adc z80_H
e899 : 85f4             [ 3]         sta z80_H
e89b : 85fd             [ 3]         sta val3+1
                             ;CSP_	    
                             	   
e89d : a900             [ 2]         lda #00                                  
e89f : a005             [ 2] 	    ldy #TSlCnt                                 
e8a1 : 11f5             [ 5]         ora (z80_IX),y
e8a3 : 85ee             [ 3] 	    sta z80_A
e8a5 : d003             [ 3]         bne saq1                                 
e8a7 : 4c25e9           [ 3]         jmp CH_AMP
e8aa : b1f5             [ 5] saq1	lda (z80_IX),y                              
e8ac : 38               [ 2]         sec
e8ad : e901             [ 2]         sbc #01
e8af : 91f5             [ 5]         sta (z80_IX),y
e8b1 : d072             [ 4] 	    bne CH_AMP                                  
e8b3 : a016             [ 2] 	    ldy #TnSlDl                                 
e8b5 : b1f5             [ 5]         lda (z80_IX),y
e8b7 : a005             [ 2]         ldy #TSlCnt                              
e8b9 : 91f5             [ 5]         sta (z80_IX),y
e8bb : 18               [ 2] 	    clc
e8bc : a017             [ 2]         ldy #TSlStp                              
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank3.s -----------------------------------

e8be : b1f5             [ 5]         lda (z80_IX),y
e8c0 : 65f1             [ 3]         adc z80_E
e8c2 : 85f3             [ 3]         sta z80_L
e8c4 : c8               [ 2] 	    iny                                         
e8c5 : b1f5             [ 5]         lda (z80_IX),y
e8c7 : 65f2             [ 3]         adc z80_D
e8c9 : 85f4             [ 3]         sta z80_H 
e8cb : 85ee             [ 3] 	    sta z80_A       ; save                      
e8cd : a007             [ 2] 	    ldy #CrTnSl+1                               
e8cf : 91f5             [ 5]         sta (z80_IX),y
e8d1 : 88               [ 2]         dey                                      
e8d2 : a5f3             [ 3]         lda z80_L
e8d4 : 91f5             [ 5]         sta (z80_IX),y
e8d6 : a904             [ 2] 	    lda #%00000100                              
e8d8 : 85f8             [ 3]         sta val1
e8da : a015             [ 2]         ldy #Flags
e8dc : b1f5             [ 5]         lda (z80_IX),y
e8de : 24f8             [ 3]         bit val1
e8e0 : d043             [ 4] 	    bne CH_AMP  	                               
e8e2 : a019             [ 2] 	    ldy #TnDelt                                 
e8e4 : b1f5             [ 5]         lda (z80_IX),y
e8e6 : 85f1             [ 3]         sta z80_E
e8e8 : c8               [ 2] 	    iny                                         
e8e9 : b1f5             [ 5]         lda (z80_IX),y
e8eb : 85f2             [ 3]         sta z80_D
e8ed : a5ee             [ 3] 	lda z80_A                                       
e8ef : f010             [ 4] 	beq CH_STPP                                     
e8f1 : a5f1             [ 3] 	lda z80_E												
e8f3 : a6f3             [ 3] 	ldx z80_L
e8f5 : 85f3             [ 3] 	sta z80_L
e8f7 : 86f1             [ 3] 	stx z80_E
e8f9 : a5f2             [ 3] 	lda z80_D
e8fb : a6f4             [ 3] 	ldx z80_H
e8fd : 85f4             [ 3] 	sta z80_H
e8ff : 86f2             [ 3] 	stx z80_D
e901 :                       CH_STPP
e901 : 38               [ 2]         sec           ; carry = 0 becoze And A   
e902 : a5f3             [ 3]         lda z80_L
e904 : e5f1             [ 3]         sbc z80_E
e906 : 85f3             [ 3]         sta z80_L
e908 : a5f4             [ 3]         lda z80_H
e90a : e5f2             [ 3]         sbc z80_D
e90c : 85f4             [ 3]         sta z80_H
e90e : 3015             [ 3]         bmi CH_AMP                               
e910 : a013             [ 2] 	ldy #SlToNt                                     
e912 : b1f5             [ 5]         lda (z80_IX),y
e914 : a012             [ 2] 	ldy #Note                                       
e916 : 91f5             [ 5]         sta (z80_IX),y
e918 : a900             [ 2] 	lda #00                                         
e91a : a005             [ 2] 	ldy #TSlCnt                                     
e91c : 91f5             [ 5]         sta (z80_IX),y
e91e : a006             [ 2] 	ldy #CrTnSl                                     
e920 : 91f5             [ 5]         sta (z80_IX),y
e922 : c8               [ 2]         iny                                      
e923 : 91f5             [ 5]         sta (z80_IX),y
                             
e925 :                       CH_AMP	
e925 : a002             [ 2]         ldy #CrAmSl                              
e927 : b1f5             [ 5]         lda (z80_IX),y
e929 : 85ee             [ 3] 	    sta z80_A       ; save
e92b : a980             [ 2]         lda #%10000000                           
e92d : 24ef             [ 3]         bit z80_C
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank3.s -----------------------------------

e92f : f021             [ 3] 	    beq CH_NOAM                                 
e931 : a940             [ 2] 	    lda #%01000000                              
e933 : 24ef             [ 3]         bit z80_C
e935 : f00c             [ 3] 	    beq CH_AMIN                                 
e937 : a5ee             [ 3] 	    lda z80_A                                   
e939 : c90f             [ 2]         cmp #15
e93b : f015             [ 3] 	    beq CH_NOAM                                 
e93d : 18               [ 2] 	    clc                                         
e93e : 6901             [ 2]         adc #01
e940 : 4c4ce9           [ 3] 	    jmp CH_SVAM                                 
e943 :                       CH_AMIN	
e943 : a5ee             [ 3]         lda z80_A                                
e945 : c9f1             [ 2]         cmp #$F1            ; -15
e947 : f009             [ 3] 	    beq CH_NOAM                                 
e949 : 38               [ 2] 	    sec                                         
e94a : e901             [ 2]         sbc #01
e94c :                       CH_SVAM	
e94c : a002             [ 2]         ldy #CrAmSl                              
e94e : 91f5             [ 5]         sta (z80_IX),y
e950 : 85ee             [ 3]         sta z80_A
e952 :                       CH_NOAM	
e952 : a5ee             [ 3]         lda z80_A
e954 : 85f3             [ 3]         sta z80_L                                
e956 : a5f0             [ 3] 	    lda z80_B                                   
e958 : 290f             [ 2] 	    and #15                                     
e95a : 18               [ 2] 	    clc                                         
e95b : 65f3             [ 3]         adc z80_L
e95d : 1002             [ 3] 	    bpl CH_APOS                                 
e95f : a900             [ 2] 	    lda #00                                     
e961 :                       CH_APOS	
e961 : c910             [ 2]         cmp #16                                  
e963 : 9002             [ 3] 	    bcc CH_VOL                                  
e965 : a90f             [ 2] 	    lda #15                                     
e967 :                       CH_VOL	
e967 : a01c             [ 2]         ldy #Volume                              
e969 : 11f5             [ 5]         ora (z80_IX),y
e96b : 85f3             [ 3] 	    sta z80_L
e96d : 18               [ 2]         clc                                      
e96e : a944             [ 2] 	lda #lo(VT_)                                    
e970 : 85f1             [ 3]         sta z80_E
e972 : 65f3             [ 3]         adc z80_L
e974 : 85f3             [ 3]         sta z80_L
e976 : a9ee             [ 2]         lda #hi(VT_)
e978 : 85f2             [ 3]         sta z80_D
e97a : 6900             [ 2]         adc #00
e97c : 85f4             [ 3]         sta z80_H
e97e : a000             [ 2] 	    ldy #00                                     
e980 : b1f3             [ 5]         lda (z80_L),y       ; lda ($AC,x)	
e982 : 85ee             [ 3]         sta z80_A       ; save
e984 :                       CH_ENV	
e984 : a901             [ 2]         lda #%00000001                           
e986 : 24ef             [ 3]         bit z80_C
e988 : d008             [ 3] 	    bne CH_NOEN                                 
e98a : a014             [ 2] 	    ldy #Env_En                                 
e98c : a5ee             [ 3]         lda z80_A
e98e : 11f5             [ 5]         ora (z80_IX),y
e990 : 85ee             [ 3]         sta z80_A
                             
e992 :                       CH_NOEN	
e992 : a5ee             [ 3]         lda z80_A
e994 : 8d4eee           [ 4]         sta Ampl                                 
e997 : a5ef             [ 3]         lda z80_C                                
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank3.s -----------------------------------

e999 : 85ee             [ 3]         sta z80_A
e99b : a980             [ 2]         lda #%10000000                           
e99d : 24f0             [ 3]         bit z80_B
e99f : f034             [ 3] 	    beq NO_ENSL                                 
e9a1 : a5ee             [ 3]         lda z80_A
e9a3 : 2a               [ 2]         rol a                                    
e9a4 : 2a               [ 2] 	    rol a                                       
e9a5 : c980             [ 2] 	    cmp #$80                                    
e9a7 : 6a               [ 2]         ror a
e9a8 : c980             [ 2] 	    cmp #$80                                    
e9aa : 6a               [ 2]         ror a
e9ab : c980             [ 2] 	    cmp #$80                                    
e9ad : 6a               [ 2]         ror a
e9ae : a004             [ 2] 	    ldy #CrEnSl                                 
e9b0 : 18               [ 2]         clc
e9b1 : 71f5             [ 5]         adc (z80_IX),y
e9b3 : 85ee             [ 3]         sta z80_A
e9b5 : a920             [ 2]         lda #%00100000                           
e9b7 : 24f0             [ 3]         bit z80_B
e9b9 : f006             [ 3] 	    beq NO_ENAC                                 
e9bb : a004             [ 2] 	    ldy #CrEnSl                                 
e9bd : a5ee             [ 3]         lda z80_A
e9bf : 91f5             [ 5]         sta (z80_IX),y
e9c1 :                       NO_ENAC	
e9c1 : a9d8             [ 2]         lda #lo(AddToEn+1)       ; OPT ?         
e9c3 : 85f3             [ 3]         sta z80_L
e9c5 : a9eb             [ 2]         lda #hi(AddToEn+1)
e9c7 : 85f4             [ 3]         sta z80_H
e9c9 : a5ee             [ 3]         lda z80_A
e9cb : a000             [ 2]         ldy #00                                  
                             		                                               
e9cd : 18               [ 2]         clc
e9ce : 71f3             [ 5]         adc (z80_L),y           ; OPT ?
e9d0 : 91f3             [ 5]         sta (z80_L),y                            
e9d2 : 4ceee9           [ 3] 	    jmp CH_MIX                                  
e9d5 :                       NO_ENSL 
e9d5 : a5ee             [ 3]         lda z80_A
e9d7 : 6a               [ 2]         ror a                                    
e9d8 : a003             [ 2] 	    ldy #CrNsSl                                 
e9da : 18               [ 2]         clc
e9db : 71f5             [ 5]         adc (z80_IX),y
e9dd : 8d43ee           [ 4] 	    sta AddToNs                                 
e9e0 : 85ee             [ 3]         sta z80_A       ; save
e9e2 : a920             [ 2] 	    lda #%00100000                              
e9e4 : 24f0             [ 3]         bit z80_B
e9e6 : f006             [ 3] 	    beq CH_MIX                                  
e9e8 : a003             [ 2] 	    ldy #CrNsSl                                 
e9ea : a5ee             [ 3]         lda z80_A
e9ec : 91f5             [ 5]         sta (z80_IX),y
e9ee :                       CH_MIX	
e9ee : a5f0             [ 3]         lda z80_B                                
e9f0 : 6a               [ 2] 	    ror a                                       
e9f1 : 2948             [ 2] 	    and #$48                                    
e9f3 : 85ee             [ 3]         sta z80_A
e9f5 :                       CH_EXIT	
e9f5 : a94b             [ 2]         lda #lo(AYREGS+Mixer)                    
e9f7 : 85f3             [ 3]         sta z80_L
e9f9 : a9ee             [ 2]         lda #hi(AYREGS+Mixer)
e9fb : 85f4             [ 3]         sta z80_H
e9fd : a5ee             [ 3] 	    lda z80_A
e9ff : a000             [ 2]         ldy #00                                  
ea01 : 11f3             [ 5]         ora (z80_L),y       ; ora ($AC,x)	
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank3.s -----------------------------------

ea03 : 4a               [ 2] 	    lsr a                                       
ea04 : 9002             [ 3]         bcc saq2
ea06 : 0980             [ 2]         ora #$80
ea08 : 91f3             [ 5] saq2	sta (z80_L),y                               
ea0a : a5fd             [ 3] 	    lda val3+1                                  
ea0c : 85f4             [ 3]         sta z80_H
ea0e : a5fc             [ 3]         lda val3 
ea10 : 85f3             [ 3]         sta z80_L
ea12 : a900             [ 2] 	    lda #00                                     
ea14 : a00a             [ 2] 	    ldy #COnOff                                 
ea16 : 11f5             [ 5]         ora (z80_IX),y
ea18 : 85ee             [ 3] 	    sta z80_A       ; save
ea1a : d001             [ 3]         bne sas                                  
ea1c : 60               [ 6]         rts
ea1d : a00a             [ 2] sas 	ldy #COnOff                                 
ea1f : b1f5             [ 5]         lda (z80_IX),y
ea21 : 38               [ 2]         sec
ea22 : e901             [ 2]         sbc #01
ea24 : 91f5             [ 5]         sta (z80_IX),y
ea26 : f001             [ 3] 	    beq sat                                     
ea28 : 60               [ 6]         rts
ea29 : a015             [ 2] sat 	ldy #Flags                                  
ea2b : a5ee             [ 3]         lda z80_A
ea2d : 51f5             [ 5]         eor (z80_IX),y                           
ea2f : 91f5             [ 5]         sta (z80_IX),y                           
ea31 : 6a               [ 2] 	    ror a                                       
ea32 : a00b             [ 2] 	    ldy #OnOffD                                 
ea34 : b1f5             [ 5]         lda (z80_IX),y
ea36 : b004             [ 3] 	    bcs CH_ONDL                                 
ea38 : a00c             [ 2] 	    ldy #OffOnD                                 
ea3a : b1f5             [ 5]         lda (z80_IX),y
ea3c :                       CH_ONDL	
ea3c : a00a             [ 2]         ldy #COnOff                              
ea3e : 91f5             [ 5]         sta (z80_IX),y
ea40 : 60               [ 6]         rts                                      
                             ; ===============================================
ea41 :                       PLAY    
ea41 : a900             [ 2]         lda #00                                  
ea43 : 8dd8eb           [ 4] 	    sta AddToEn+1                               
ea46 : 8d4bee           [ 4] 	    sta AYREGS+Mixer                            
ea49 : a9ff             [ 2] 	    lda #$FF                                    
ea4b : 8d51ee           [ 4] 	    sta AYREGS+EnvTp                            
ea4e : ce3eee           [ 6] 	    dec DelyCnt                                 
ea51 : f003             [ 3] 	    beq sat1                                    
ea53 : 4c5eeb           [ 3]         jmp PL2
ea56 : ce02ee           [ 6] sat1	dec ANtSkCn                                 
ea59 : f003             [ 3] 	    beq sat2                                    
ea5b : 4c15eb           [ 3]         jmp PL1B
ea5e :                       AdInPtA
ea5e : a901             [ 2] sat2	lda #01                                     
ea60 : 85ef             [ 3]         sta z80_C
ea62 : a901             [ 2]         lda #01
ea64 : 85f0             [ 3]         sta z80_B
ea66 : a000             [ 2] 	    ldy #00                                     
ea68 : b1ef             [ 5]         lda (z80_C),y       ; lda ($AC,x)	       
ea6a : f003             [ 3] 	    beq sat3            ; test 0                
ea6c : 4c00eb           [ 3]         jmp PL1A
ea6f : 85f2             [ 3] sat3	sta z80_D                                   
ea71 : 8d42ee           [ 4] 	    sta Ns_Base                                 
ea74 : ad8ee0           [ 4] 	    lda CrPsPtr                                 
ea77 : 85f3             [ 3]         sta z80_L
ea79 : ad8fe0           [ 4]         lda CrPsPtr+1
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank3.s -----------------------------------

ea7c : 85f4             [ 3]         sta z80_H
ea7e : e6f3             [ 5] 	    inc z80_L                                   
ea80 : d002             [ 3]         bne sar
ea82 : e6f4             [ 5]         inc z80_H
ea84 :                       sar                                              
ea84 : b1f3             [ 5]         lda (z80_L),y                            
ea86 : 18               [ 2] 	    clc                                         
ea87 : 6901             [ 2]         adc #01
ea89 : 85ee             [ 3]         sta z80_A
ea8b : d014             [ 3]         bne PLNLP                                
ea8d : 20b6e0           [ 6] 	    jsr CHECKLP                                 
ea90 :                       LPosPtr
ea90 : a9ac             [ 2] 	    lda #$AC                                    
ea92 : 85f3             [ 3]         sta z80_L
ea94 : a9ac             [ 2]         lda #$AC
ea96 : 85f4             [ 3]         sta z80_H
ea98 : a000             [ 2] 	    ldy #00                 ; OPT ?             
ea9a : b1f3             [ 5]         lda (z80_L),y       ; lda ($AC,x)	       
ea9c : 18               [ 2] 	    clc                                         
ea9d : 6901             [ 2]         adc #01
ea9f : 85ee             [ 3]         sta z80_A           ; save
eaa1 :                       PLNLP	
eaa1 : a5f3             [ 3]         lda z80_L                                
eaa3 : 8d8ee0           [ 4]         sta CrPsPtr
eaa6 : a5f4             [ 3]         lda z80_H
eaa8 : 8d8fe0           [ 4]         sta CrPsPtr+1
eaab : a5ee             [ 3] 	    lda z80_A                                   
eaad : 38               [ 2]         sec
eaae : e901             [ 2]         sbc #01
eab0 : 0a               [ 2] 	    asl a                                       
eab1 : 85f1             [ 3] 	    sta z80_E                                   
eab3 : 85ee             [ 3]         sta z80_A
eab5 : 26f2             [ 5] 	    rol z80_D                                   
eab7 :                       PatsPtr
eab7 : a9ac             [ 2] 	    lda #$AC
eab9 : 18               [ 2]         clc
eaba : 65f1             [ 3]         adc z80_E                                
eabc : 85f3             [ 3]         sta z80_L
eabe : a9ac             [ 2]         lda #$AC
eac0 : 65f2             [ 3]         adc z80_D
eac2 : 85f4             [ 3]         sta z80_H
                             	    
eac4 : adebe3           [ 4] 	    lda MODADDR+1                               
eac7 : 85f1             [ 3]         sta z80_E
eac9 : adf1e3           [ 4]         lda MODADDR+7
eacc : 85f2             [ 3]         sta z80_D
                                                    	                         
eace : a000             [ 2] 	    ldy #00                 ; OPT ?
ead0 : b1f3             [ 5]         lda (z80_L),y           ; lda ($AC,x)	   
ead2 : 18               [ 2]         clc                                      
ead3 : 65f1             [ 3]         adc z80_E               ; OPT (adc MODADD
ead5 : 85ef             [ 3]         sta z80_C
ead7 : c8               [ 2]         iny
ead8 : b1f3             [ 5]         lda (z80_L),y
eada : 65f2             [ 3]         adc z80_D               ; OPT (adc MODADD
eadc : 85f0             [ 3]         sta z80_B   
eade : c8               [ 2]         iny
eadf : b1f3             [ 5]         lda (z80_L),y                            
eae1 : 18               [ 2]         clc                     ; OPT ?
eae2 : 65f1             [ 3]         adc z80_E               ; IDEM...
eae4 : 8d23eb           [ 4]         sta AdInPtB+1   
eae7 : c8               [ 2]         iny
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank3.s -----------------------------------

eae8 : b1f3             [ 5]         lda (z80_L),y
eaea : 65f2             [ 3]         adc z80_D
eaec : 8d27eb           [ 4]         sta AdInPtB+5     
eaef : c8               [ 2]         iny
eaf0 : b1f3             [ 5]         lda (z80_L),y                            
eaf2 : 18               [ 2]         clc
eaf3 : 65f1             [ 3]         adc z80_E               ; IDEM
eaf5 : 8d45eb           [ 4]         sta AdInPtC+1   
eaf8 : c8               [ 2]         iny
eaf9 : b1f3             [ 5]         lda (z80_L),y
eafb : 65f2             [ 3]         adc z80_D
eafd : 8d49eb           [ 4]         sta AdInPtC+5
                                                                              
eb00 :                       PSP_	
                             
eb00 :                       PL1A	
eb00 : a9e7             [ 2]         lda #lo(ChanA)                           
eb02 : 85f5             [ 3]         sta z80_IX
eb04 : a9ed             [ 2]         lda #hi(ChanA)
eb06 : 85f6             [ 3]         sta z80_IX+1
eb08 : 205be4           [ 6] 	jsr PTDECOD                                     
eb0b : a5ef             [ 3] 	lda z80_C                                       
eb0d : 8d5fea           [ 4]         sta AdInPtA+1
eb10 : a5f0             [ 3]         lda z80_B
eb12 : 8d63ea           [ 4]         sta AdInPtA+5
                             
eb15 :                       PL1B	
eb15 : ce1fee           [ 6]         dec BNtSkCn                              
eb18 : d01d             [ 3] 	bne PL1C                                        
eb1a : a904             [ 2] 	lda #lo(ChanB)                                  
eb1c : 85f5             [ 3]         sta z80_IX
eb1e : a9ee             [ 2]         lda #hi(ChanB)
eb20 : 85f6             [ 3]         sta z80_IX+1
eb22 :                       AdInPtB
eb22 : a901             [ 2] 	lda #01                                         
eb24 : 85ef             [ 3]         sta z80_C
eb26 : a901             [ 2]         lda #01
eb28 : 85f0             [ 3]         sta z80_B
eb2a : 205be4           [ 6] 	jsr PTDECOD                                     
eb2d : a5ef             [ 3] 	lda z80_C                                       
eb2f : 8d23eb           [ 4]         sta AdInPtB+1
eb32 : a5f0             [ 3]         lda z80_B
eb34 : 8d27eb           [ 4]         sta AdInPtB+5
                             
eb37 :                       PL1C	
eb37 : ce3cee           [ 6]         dec CNtSkCn                              
eb3a : d01d             [ 3] 	bne PL1D                                        
eb3c : a921             [ 2] 	lda #lo(ChanC)                                  
eb3e : 85f5             [ 3]         sta z80_IX
eb40 : a9ee             [ 2]         lda #hi(ChanC)
eb42 : 85f6             [ 3]         sta z80_IX+1
eb44 :                       AdInPtC
eb44 : a901             [ 2] 	lda #01                                         
eb46 : 85ef             [ 3]         sta z80_C
eb48 : a901             [ 2]         lda #01
eb4a : 85f0             [ 3]         sta z80_B
eb4c : 205be4           [ 6] 	jsr PTDECOD                                     
eb4f : a5ef             [ 3] 	lda z80_C                                       
eb51 : 8d45eb           [ 4]         sta AdInPtC+1
eb54 : a5f0             [ 3]         lda z80_B
eb56 : 8d49eb           [ 4]         sta AdInPtC+5
                             
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank3.s -----------------------------------

eb59 :                       Delay
eb59 :                       PL1D	
eb59 : a93e             [ 2]         lda #$3E                                 
eb5b : 8d3eee           [ 4] 	    sta DelyCnt                                 
                             
eb5e :                       PL2	
eb5e : a9e7             [ 2]         lda #lo(ChanA)                           
eb60 : 85f5             [ 3]         sta z80_IX
eb62 : a9ed             [ 2]         lda #hi(ChanA)
eb64 : 85f6             [ 3]         sta z80_IX+1
eb66 : ad44ee           [ 4] 	    lda AYREGS+TonA                             
eb69 : 85f3             [ 3]         sta z80_L
eb6b : ad45ee           [ 4]         lda AYREGS+TonA+1
eb6e : 85f4             [ 3]         sta z80_H
eb70 : 205ee7           [ 6] 	    jsr CHREGS                                  
eb73 : a5f3             [ 3] 	    lda z80_L                                   
eb75 : 8d44ee           [ 4]         sta AYREGS+TonA
eb78 : a5f4             [ 3]         lda z80_H
eb7a : 8d45ee           [ 4]         sta AYREGS+TonA+1
eb7d : ad4eee           [ 4] 	    lda Ampl                                    
eb80 : 8d4cee           [ 4] 	    sta AYREGS+AmplA                            
                             	
eb83 : a904             [ 2]         lda #lo(ChanB)                           
eb85 : 85f5             [ 3]         sta z80_IX
eb87 : a9ee             [ 2]         lda #hi(ChanB)
eb89 : 85f6             [ 3]         sta z80_IX+1
eb8b : ad46ee           [ 4] 	    lda AYREGS+TonB                             
eb8e : 85f3             [ 3]         sta z80_L
eb90 : ad47ee           [ 4]         lda AYREGS+TonB+1
eb93 : 85f4             [ 3]         sta z80_H
eb95 : 205ee7           [ 6] 	    jsr CHREGS                                  
eb98 : a5f3             [ 3] 	    lda z80_L                                   
eb9a : 8d46ee           [ 4]         sta AYREGS+TonB
eb9d : a5f4             [ 3]         lda z80_H
eb9f : 8d47ee           [ 4]         sta AYREGS+TonB+1
eba2 : ad4eee           [ 4] 	    lda Ampl                                    
eba5 : 8d4dee           [ 4] 	    sta AYREGS+AmplB                            
                             	    
eba8 : a921             [ 2]         lda #lo(ChanC)                           
ebaa : 85f5             [ 3]         sta z80_IX
ebac : a9ee             [ 2]         lda #hi(ChanC)
ebae : 85f6             [ 3]         sta z80_IX+1
ebb0 : ad48ee           [ 4] 	    lda AYREGS+TonC                             
ebb3 : 85f3             [ 3]         sta z80_L
ebb5 : ad49ee           [ 4]         lda AYREGS+TonC+1
ebb8 : 85f4             [ 3]         sta z80_H
ebba : 205ee7           [ 6] 	    jsr CHREGS                                  
ebbd : a5f3             [ 3] 	    lda z80_L                                   
ebbf : 8d48ee           [ 4]         sta AYREGS+TonC
ebc2 : a5f4             [ 3]         lda z80_H
ebc4 : 8d49ee           [ 4]         sta AYREGS+TonC+1
                             
ebc7 : ad42ee           [ 4] 	    lda Ns_Base_AddToNs                         
ebca : 85f3             [ 3]         sta z80_L
ebcc : ad43ee           [ 4]         lda Ns_Base_AddToNs+1
ebcf : 85f4             [ 3]         sta z80_H                                
ebd1 : 18               [ 2] 	    clc                                         
ebd2 : 65f3             [ 3]         adc z80_L
ebd4 : 8d4aee           [ 4] 	    sta AYREGS+Noise                            
                             
ebd7 :                       AddToEn
ebd7 : a93e             [ 2] 	    lda #$3E                                    
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank3.s -----------------------------------

ebd9 : 85f1             [ 3] 	    sta z80_E                                   
ebdb : 0a               [ 2] 	    asl a                                       
ebdc : 9004             [ 3] 	    bcc sau                                     
ebde : a9ff             [ 2]         lda #$FF
ebe0 : d002             [ 3]         bne sau1      ; always
ebe2 : a900             [ 2] sau     lda #00
ebe4 : 85f2             [ 3] sau1	sta z80_D                                   
ebe6 : ad53ee           [ 4]         lda EnvBase+1
ebe9 : 85f4             [ 3]         sta z80_H           ; OPT ?
ebeb : ad52ee           [ 4]         lda EnvBase                              
ebee : 85f3             [ 3]         sta z80_L           ; OPT ?
ebf0 : 18               [ 2] 	    clc                                         
ebf1 : 65f1             [ 3]         adc z80_E
ebf3 : 85f3             [ 3]         sta z80_L
ebf5 : a5f2             [ 3]         lda z80_D
ebf7 : 65f4             [ 3]         adc z80_H           ; OPT ?
ebf9 : 85f4             [ 3]         sta z80_H 
ebfb : ad40ee           [ 4]         lda CurESld+1
ebfe : 85f2             [ 3]         sta z80_D
ec00 : ad3fee           [ 4]         lda CurESld                              
ec03 : 85f1             [ 3]         sta z80_E
ec05 : 18               [ 2] 	    clc                                         
ec06 : 65f3             [ 3]         adc z80_L
ec08 : 8d4fee           [ 4]         sta AYREGS+Env                           
ec0b : a5f2             [ 3]         lda z80_D
ec0d : 65f4             [ 3]         adc z80_H
ec0f : 8d50ee           [ 4] 	    sta AYREGS+Env+1                            
                             
ec12 : a900             [ 2]         lda #00                                  
ec14 : 0d41ee           [ 4]         ora CurEDel         ; OPT ?              
ec17 : f019             [ 3] 	    beq ROUT                                    
ec19 : ce41ee           [ 6] 	    dec CurEDel                                 
ec1c : d014             [ 3] 	    bne ROUT                                    
ec1e :                       Env_Del
ec1e : a93e             [ 2] 	    lda #$3E                                    
ec20 : 8d41ee           [ 4] 	    sta CurEDel                                 
ec23 :                       ESldAdd
ec23 : a9ac             [ 2] 	    lda #$AC                                    
ec25 : 18               [ 2]         clc
ec26 : 65f1             [ 3]         adc z80_E       
ec28 : 8d3fee           [ 4]         sta CurESld
ec2b : a9ac             [ 2]         lda #$AC
ec2d : 65f2             [ 3]         adc z80_D
ec2f : 8d40ee           [ 4] 	    sta CurESld+1
                             ; ===============================================
                             
ec32 :                       ROUT
ec32 : ae45ee           [ 4]         ldx AYREGS+1    ; hi ToneA
ec35 : ad44ee           [ 4]         lda AYREGS+0    ; lo ToneA
ec38 : 20bbec           [ 6]         jsr FIX16BITS
                                     
ec3b : a901             [ 2]         lda #01             
ec3d : 200aed           [ 6]         jsr ay_set
ec40 : 98               [ 2]         tya
ec41 : aa               [ 2]         tax
ec42 : a900             [ 2]         lda #00
ec44 : 200aed           [ 6]         jsr ay_set
                             
ec47 : ae47ee           [ 4]         ldx AYREGS+3    ; hi ToneA
ec4a : ad46ee           [ 4]         lda AYREGS+2    ; lo ToneA
ec4d : 20bbec           [ 6]         jsr FIX16BITS 
                             
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank3.s -----------------------------------

ec50 : a903             [ 2]         lda #03             
ec52 : 200aed           [ 6]         jsr ay_set
ec55 : 98               [ 2]         tya
ec56 : aa               [ 2]         tax
ec57 : a902             [ 2]         lda #02             
ec59 : 200aed           [ 6]         jsr ay_set
                             
ec5c : ae49ee           [ 4]         ldx AYREGS+5    ; hi ToneA
ec5f : ad48ee           [ 4]         lda AYREGS+4    ; lo ToneA
ec62 : 20bbec           [ 6]         jsr FIX16BITS 
                             
ec65 : a905             [ 2]         lda #05             
ec67 : 200aed           [ 6]         jsr ay_set
ec6a : 98               [ 2]         tya
ec6b : aa               [ 2]         tax
ec6c : a904             [ 2]         lda #04             
ec6e : 200aed           [ 6]         jsr ay_set
                             
ec71 : ad4aee           [ 4]         lda AYREGS+6    ; data
                                     ;jsr FIX8BITS
ec74 : 4a               [ 2]         lsr a             ; /2 
ec75 : aa               [ 2]         tax
ec76 : a906             [ 2]         lda #06             
ec78 : 200aed           [ 6]         jsr ay_set
                             
ec7b : ae4bee           [ 4]         ldx AYREGS+7    ; data
ec7e : a907             [ 2]         lda #07
ec80 : 200aed           [ 6]         jsr ay_set
                             
ec83 : ae4cee           [ 4]         ldx AYREGS+8    ; data
ec86 : a908             [ 2]         lda #08             
ec88 : 200aed           [ 6]         jsr ay_set
                             
ec8b : ae4dee           [ 4]         ldx AYREGS+9    ; data
ec8e : a909             [ 2]         lda #09             
ec90 : 200aed           [ 6]         jsr ay_set
                             
ec93 : ae4eee           [ 4]         ldx AYREGS+10   ; data
ec96 : a90a             [ 2]         lda #10             
ec98 : 200aed           [ 6]         jsr ay_set
                             
ec9b : ae50ee           [ 4]         ldx AYREGS+12   ; hi Env
ec9e : ad4fee           [ 4]         lda AYREGS+11   ; lo Env
eca1 : 20bbec           [ 6]         jsr FIX16BITS 
                             
eca4 : a90c             [ 2]         lda #12             
eca6 : 200aed           [ 6]         jsr ay_set
eca9 : 98               [ 2]         tya
ecaa : aa               [ 2]         tax
ecab : a90b             [ 2]         lda #11             
ecad : 200aed           [ 6]         jsr ay_set
                             
                                     ; shunte R13 si $FF (Y=13) => plus géné
ecb0 : ae51ee           [ 4]         ldx AYREGS+13
ecb3 : 3005             [ 3]         bmi FIN_RTS
ecb5 : a90d             [ 2]         lda #13
ecb7 : 200aed           [ 6]         jsr ay_set
ecba :                       FIN_RTS
ecba : 60               [ 6]         rts
                             ; -------------------------------------
ecbb :                       FIX16BITS       ; INT(256*2*1000/1773) = 289 = 25
                                             ; IN:  register A is low byte
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank3.s -----------------------------------

                                             ;      register X is high byte
                                             ; OUT: register Y is low byte
                                             ;      register X is high byte
                             
                                     ; x256
ecbb : 86f8             [ 3]         stx TA1
ecbd : 85fa             [ 3]         sta TB1
ecbf : 86fb             [ 3]         stx TB2
ecc1 : 85fd             [ 3]         sta TC2
ecc3 : 86fe             [ 3]         stx TB3
ecc5 : 85ff             [ 3]         sta TC3
ecc7 : a900             [ 2]         lda #00
ecc9 : 85f9             [ 3]         sta TA2
                                     
                                     ; x32
eccb : 06fd             [ 5]         asl TC2
eccd : 26fb             [ 5]         rol TB2
eccf : 26f9             [ 5]         rol TA2
ecd1 : 06fd             [ 5]         asl TC2
ecd3 : 26fb             [ 5]         rol TB2
ecd5 : 26f9             [ 5]         rol TA2
ecd7 : 06fd             [ 5]         asl TC2
ecd9 : 26fb             [ 5]         rol TB2
ecdb : 26f9             [ 5]         rol TA2
ecdd : 06fd             [ 5]         asl TC2
ecdf : 26fb             [ 5]         rol TB2
ece1 : 26f9             [ 5]         rol TA2
ece3 : 06fd             [ 5]         asl TC2
ece5 : 26fb             [ 5]         rol TB2
ece7 : 26f9             [ 5]         rol TA2
                                     
                                     ; x32 + x01
ece9 : 18               [ 2]         clc
ecea : a5ff             [ 3]         lda TC3
ecec : 65fd             [ 3]         adc TC2
                                     ; sta TC2
ecee : a5fe             [ 3]         lda TB3
ecf0 : 65fb             [ 3]         adc TB2
ecf2 : 85fb             [ 3]         sta TB2
ecf4 : a5f9             [ 3]         lda TA2
ecf6 : 6900             [ 2]         adc #00
ecf8 : 85f9             [ 3]         sta TA2
                             
                                     ; + x256 
ecfa : 18               [ 2]         clc         
ecfb : a5fb             [ 3]         lda TB2
ecfd : 65fa             [ 3]         adc TB1
ecff : a8               [ 2]         tay         ; sta TB1
ed00 : a5f9             [ 3]         lda TA2
ed02 : 65f8             [ 3]         adc TA1
                                     ; sta TA1
                             
                                     ; / 2 (16bits)
ed04 : 4a               [ 2]         lsr a         ; lsr TA1
ed05 : aa               [ 2]         tax         ; ldx TA1
ed06 : 98               [ 2]         tya         ; lda TB1     
ed07 : 6a               [ 2]         ror a         ; ror TB1
ed08 : a8               [ 2]         tay         ; ldy TB1
ed09 : 60               [ 6]         rts 
                             
                             ; HB-BBC-128 settings:
                             ;* AY-3-8910 definitions
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank3.s -----------------------------------

                             ;* The sound chip is accessed through VIA 2
0480 =                       IO_1		= 0x0480
0000 =                       PRB		= 0x00
0001 =                       PRA		= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD		= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
                             
                             ;****************************************
                             ;* ay_set
                             ;* Set AY register A to value X
                             ;* Input : A = Reg no, X = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
ed0a :                       ay_set
ed0a : 48               [ 3]         pha
                             
ed0b : a9ff             [ 2] 	lda #0xff			; Set Port A to output
ed0d : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
ed10 : 68               [ 4]         pla
ed11 : 8d8104           [ 4] 	sta SND_ADBUS			; Put A on the sound bus (A = re
                             
ed14 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
ed17 : 29bd             [ 2] 	and #SND_DESELECT_MASK	        ; Mask off mode b
ed19 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
ed1b : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
ed1e : 29bd             [ 2] 	and #SND_DESELECT_MASK	        ; Mask off mode b
ed20 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
ed23 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = va
ed26 : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
ed28 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
ed2b : 29bd             [ 2] 	and #SND_DESELECT_MASK	        ; Mask off mode b
ed2d : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
ed30 : 60               [ 6] 	rts
                             
                             ; ===============================================
ed31 :                       NT_DATA	
ed31 : 64                            fcb (T_NEW_0-T1_)*2
ed32 : 2a                    	    fcb TCNEW_0-T_
ed33 : 65                    	    fcb (T_OLD_0-T1_)*2+1
ed34 : 00                    	    fcb TCOLD_0-T_
ed35 : 01                    	    fcb (T_NEW_1-T1_)*2+1
ed36 : 0c                    	    fcb TCNEW_1-T_
ed37 : 01                    	    fcb (T_OLD_1-T1_)*2+1
ed38 : 0c                    	    fcb TCOLD_1-T_
ed39 : 94                    	    fcb (T_NEW_2-T1_)*2
ed3a : 35                    	    fcb TCNEW_2-T_
ed3b : 30                    	    fcb (T_OLD_2-T1_)*2
ed3c : 0e                    	    fcb TCOLD_2-T_
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank3.s -----------------------------------

ed3d : 60                    	    fcb (T_NEW_3-T1_)*2
ed3e : 20                    	    fcb TCNEW_3-T_
ed3f : 60                    	    fcb (T_OLD_3-T1_)*2
ed40 : 21                    	    fcb TCOLD_3-T_
                             
ed41 :                       T_
                             
ed41 : 0105090b0d0f1315      TCOLD_0	fcb $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$
ed49 : 19253d00              	    fcb $18+1,$24+1,$3C+1,0
ed4d : 5d00                  TCOLD_1	fcb $5C+1,0
ed4f : 31374d535f7182..      TCOLD_2	fcb $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$
ed58 : 9ea0a6a8aaacae..      	    fcb $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
ed61 : 57                    TCNEW_3	fcb $56+1
ed62 : 1f2325292d2f33..      TCOLD_3	fcb $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$
ed6b : 1d2123272b2d3155      TCNEW_0	fcb $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$
ed73 : bdbf00                	    fcb $BC+1,$BE+1,0
ed4d =                       TCNEW_1 = TCOLD_1
ed76 : 1b2125292b3b4d5f      TCNEW_2	fcb $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$
ed7e : bbbdbf00              	    fcb $BA+1,$BC+1,$BE+1,0
                             
ed81 =                       EMPTYSAMORN = *-1
ed82 : 010090                	    fcb 1,0,$90 ;delete #90 if you don't need de
                             
                             ;first 12 values of tone tables
                             
ed85 :                       T1_ 	
ed85 : f01d                          fcw $1DF0
ed87 : 201c                          fcw $1C20
ed89 : c01a                          fcw $1AC0
ed8b : 0019                          fcw $1900
ed8d : b017                          fcw $17B0
ed8f : 5016                          fcw $1650
ed91 : 1015                          fcw $1510
ed93 : e013                          fcw $13E0
                             
ed95 : c012                          fcw $12C0
ed97 : c011                          fcw $11C0
ed99 : b010                          fcw $10B0
ed9b : c00f                          fcw $0FC0
ed9d : 7c1a                          fcw $1A7C
ed9f : 0019                          fcw $1900
eda1 : 9817                          fcw $1798
eda3 : 4416                          fcw $1644
                             
eda5 : 0415                          fcw $1504
eda7 : d813                          fcw $13D8
eda9 : b812                          fcw $12B8
edab : ac11                          fcw $11AC
edad : b010                          fcw $10B0
edaf : c00f                          fcw $0FC0
edb1 : dc0e                          fcw $0EDC
edb3 : 080e                          fcw $0E08
                             
edb5 : b419                          fcw $19B4
edb7 : 4418                          fcw $1844
edb9 : e616                          fcw $16E6
edbb : 9e15                          fcw $159E
edbd : 6614                          fcw $1466
edbf : 4213                          fcw $1342
edc1 : 2e12                          fcw $122E
edc3 : 2811                          fcw $1128
                             
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank3.s -----------------------------------

edc5 : 3210                          fcw $1032
edc7 : 480f                          fcw $0F48
edc9 : 6e0e                          fcw $0E6E
edcb : 9e0d                          fcw $0D9E
edcd : da0c                          fcw $0CDA
edcf : 201a                          fcw $1A20
edd1 : aa18                          fcw $18AA
edd3 : 4817                          fcw $1748
                             
edd5 : f815                          fcw $15F8
edd7 : be14                          fcw $14BE
edd9 : 9413                          fcw $1394
eddb : 7a12                          fcw $127A
eddd : 7011                          fcw $1170
eddf : 7610                          fcw $1076
ede1 : 8a0f                          fcw $0F8A
ede3 : aa0e                          fcw $0EAA
                             
ede5 : d80d                          fcw $0DD8
                             
ed85 =                       T_OLD_1	= T1_
ed9d =                       T_OLD_2	= T_OLD_1+24
edb5 =                       T_OLD_3	= T_OLD_2+24
edb7 =                       T_OLD_0	= T_OLD_3+2
edb7 =                       T_NEW_0	= T_OLD_0
ed85 =                       T_NEW_1	= T_OLD_1
edcf =                       T_NEW_2	= T_NEW_0+24
edb5 =                       T_NEW_3	= T_OLD_3
                             
ede7 =                       FILE_END =*
                             ; ===========================
                             
ede7 :                       .bss        ; uninitialized data stuff
                             
                             ;vars from here can be stripped
                             ;you can move VARS to any other address
                             
ede7 :                       VARS
                             ;ChannelsVars
                             
                             ; STRUCT "CHP"
0000 =                       PsInOr	= 0
0001 =                       PsInSm	= 1
0002 =                       CrAmSl  = 2
0003 =                       CrNsSl	= 3
0004 =                       CrEnSl	= 4
0005 =                       TSlCnt	= 5
0006 =                       CrTnSl	= 6
0008 =                       TnAcc	= 8
000a =                       COnOff	= 10
000b =                       OnOffD	= 11
000c =                       OffOnD	= 12
000d =                       OrnPtr	= 13
000f =                       SamPtr	= 15
0011 =                       NNtSkp	= 17
0012 =                       Note	= 18
0013 =                       SlToNt	= 19
0014 =                       Env_En	= 20
0015 =                       Flags	= 21
0016 =                       TnSlDl	= 22
0017 =                       TSlStp	= 23
0019 =                       TnDelt	= 25
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank3.s -----------------------------------

001b =                       NtSkCn	= 27
001c =                       Volume	= 28
                             ; end STRUCT
                             
                             ; CHANNEL A
ede7 :                       ChanA	
                             ;reset group
ede7 : 00                    APsInOr	fcb 0
ede8 : 00                    APsInSm	fcb 0
ede9 : 00                    ACrAmSl	fcb 0
edea : 00                    ACrNsSl	fcb 0
edeb : 00                    ACrEnSl	fcb 0
edec : 00                    ATSlCnt	fcb 0
eded : 0000                  ACrTnSl	fcw 0
edef : 0000                  ATnAcc	fcw 0
edf1 : 00                    ACOnOff	fcb 0
                             ;reset group
                             
edf2 : 00                    AOnOffD	fcb 0
                             
edf3 : 00                    AOffOnD	fcb 0
edf4 : 0000                  AOrnPtr	fcw 0
edf6 : 0000                  ASamPtr	fcw 0
edf8 : 00                    ANNtSkp	fcb 0
edf9 : 00                    ANote	fcb 0
edfa : 00                    ASlToNt	fcb 0
edfb : 00                    AEnv_En	fcb 0
edfc : 00                    AFlags	fcb 0
                              ;Enabled - 0,SimpleGliss - 2
edfd : 00                    ATnSlDl	fcb 0
edfe : 0000                  ATSlStp	fcw 0
ee00 : 0000                  ATnDelt	fcw 0
ee02 : 00                    ANtSkCn	fcb 0
ee03 : 00                    AVolume	fcb 0
                             	
                             ; CHANNEL B
ee04 :                       ChanB
                             ;reset group
ee04 : 00                    BPsInOr	fcb 0
ee05 : 00                    BPsInSm	fcb 0
ee06 : 00                    BCrAmSl	fcb 0
ee07 : 00                    BCrNsSl	fcb 0
ee08 : 00                    BCrEnSl	fcb 0
ee09 : 00                    BTSlCnt	fcb 0
ee0a : 0000                  BCrTnSl	fcw 0
ee0c : 0000                  BTnAcc	fcw 0
ee0e : 00                    BCOnOff	fcb 0
                             ;reset group
                             
ee0f : 00                    BOnOffD	fcb 0
                             
ee10 : 00                    BOffOnD	fcb 0
ee11 : 0000                  BOrnPtr	fcw 0
ee13 : 0000                  BSamPtr	fcw 0
ee15 : 00                    BNNtSkp	fcb 0
ee16 : 00                    BNote	fcb 0
ee17 : 00                    BSlToNt	fcb 0
ee18 : 00                    BEnv_En	fcb 0
ee19 : 00                    BFlags	fcb 0
                              ;Enabled - 0,SimpleGliss - 2
ee1a : 00                    BTnSlDl	fcb 0
ee1b : 0000                  BTSlStp	fcw 0
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank3.s -----------------------------------

ee1d : 0000                  BTnDelt	fcw 0
ee1f : 00                    BNtSkCn	fcb 0
ee20 : 00                    BVolume	fcb 0
                             
                             ; CHANNEL C
ee21 :                       ChanC
                             ;reset group
ee21 : 00                    CPsInOr	fcb 0
ee22 : 00                    CPsInSm	fcb 0
ee23 : 00                    CCrAmSl	fcb 0
ee24 : 00                    CCrNsSl	fcb 0
ee25 : 00                    CCrEnSl	fcb 0
ee26 : 00                    CTSlCnt	fcb 0
ee27 : 0000                  CCrTnSl	fcw 0
ee29 : 0000                  CTnAcc	fcw 0
ee2b : 00                    CCOnOff	fcb 0
                             ;reset group
                             
ee2c : 00                    COnOffD	fcb 0
                             
ee2d : 00                    COffOnD	fcb 0
ee2e : 0000                  COrnPtr	fcw 0
ee30 : 0000                  CSamPtr	fcw 0
ee32 : 00                    CNNtSkp	fcb 0
ee33 : 00                    CNote	fcb 0
ee34 : 00                    CSlToNt	fcb 0
ee35 : 00                    CEnv_En	fcb 0
ee36 : 00                    CFlags	fcb 0
                              ;Enabled - 0,SimpleGliss - 2
ee37 : 00                    CTnSlDl	fcb 0
ee38 : 0000                  CTSlStp	fcw 0
ee3a : 0000                  CTnDelt	fcw 0
ee3c : 00                    CNtSkCn	fcb 0
ee3d : 00                    CVolume	fcb 0
                             
                             ; ------------
                             
                             ;GlobalVars
ee3e : 00                    DelyCnt	fcb 0
ee3f : 0000                  CurESld	fcw 0
ee41 : 00                    CurEDel	fcb 0
ee42 :                       Ns_Base_AddToNs
ee42 : 00                    Ns_Base	fcb 0
ee43 : 00                    AddToNs	fcb 0
                             
                             ; ===========================
ee44 :                       AYREGS ; AY registers
                             
0000 =                       TonA	= 0
0002 =                       TonB	= 2
0004 =                       TonC	= 4
0006 =                       Noise	= 6
0007 =                       Mixer	= 7
0008 =                       AmplA	= 8
0009 =                       AmplB	= 9
000a =                       AmplC	= 10
000b =                       Env	    = 11
000d =                       EnvTp	= 13
                             ; ---
                             
ee4e =                       Ampl	= AYREGS+AmplC
                             ; ===========================
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank3.s -----------------------------------

ee44 : 00000000000000..      VT_	ds 256 ;CreatedVolumeTableAddress
                             
ee52 =                       EnvBase	= VT_+14
ee54 =                       VAR0END	= VT_+16 ;INIT zeroes from VARS to VAR0EN
                             
                             ; ===========================
ef44 : 00000000000000..      NT_	ds 192 ;CreatedNoteTableAddress
                             
f004 =                       VARS_END = *
f004 :                       PT3END
                             
                             
                             	; End of Code
f004 :                       _code_end
f004 :                       _bank3_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
