AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank3.s -----------------------------------

5536 lines read, no errors in pass 1.
c000 =                       _bank0_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank3.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank3.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank3.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank3.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank3.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank3.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank3.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank3.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank3.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank3.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank3.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank3.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank3.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank3.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank3.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank3.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank3.s -----------------------------------

                             ; Serial FIFO buffer pointers
0002 =                       ser_first	ds	1		; Pointer to first byte in buffer
0003 =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0004 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0006 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0007 =                       vdp_curstat	ds	1		; Cursor status
0008 =                       vdp_curval	ds	1		; Cursor value on screen
0009 =                       vdp_blank	ds	1		; Screen blank value normally 32
000a =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
000b =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0017 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0027 =                       kb_raw  	ds	1		; Raw keyboard code
0028 =                       kb_last		ds	1		; Raw code of last key
0029 =                       kb_code 	ds	1		; Converted keyboard code
002a =                       kb_stat		ds	1		; Keyboard status for caps and shi
002b =                       kb_deb		ds	1		; VB periods since last KB spike
002c =                       kb_rep		ds	1		; Keyboard repeat timer
002d =                       kb_rep_tim 	ds	1		; Default repeat speed
002e =                       kb_rep_del 	ds	1		; Default repeat delay timing
002f =                       kb_debounce ds	1		; Default repeat debounce
0030 =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
0031 =                       tmp_c		ds	2		; Temp address c
0033 =                       tmp_v1		ds	2		; VDP temp addresses
0035 =                       tmp_a		ds	2		; Temp storage a
0037 =                       tmp_b 		ds	2		; Temp address b
0039 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
003b =                       buf_adr		ds	2		; Line buffer address
003d =                       buf_sz		ds	1		; Buffer size
003e =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
003f =                       sd_status	ds	1		; SD card status
0040 =                       sd_slo		ds	1		; Sector pointer low
0041 =                       sd_shi		ds	1		; Sector pointer high
0042 =                       sd_sect		ds	4		; SD Card sector address
0046 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
004a =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0079 =                       ztmp_16					; Start of 16 byte scratch area (all 
0079 =                       num_a		ds	4		; 4 byte primary accumulator
007d =                       num_b		ds	4		; 4 byte secondary accumulator
0081 =                       num_x		ds	4		; 4 byte x register
0085 =                       num_tmp		ds	4		; 4 byte temp space
0089 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
0091 =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank3.s -----------------------------------

0091 =                       dflat_zp_save_s			; ZP save dflat from here
0091 =                       df_checkkey	ds	1		; Key check interval counter
0092 =                       df_checkmsk	ds	1		; Mask for check key
0093 =                       errno		ds	1		; General error condition status
0094 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
0095 =                       df_sp		ds	1		; Stack pointer after error to resto
0096 =                       df_pc		ds	2		; PC after error to return to
0098 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
009a =                       df_brkval	ds	1		; Byte after BRK instruction
009b =                       df_prgstrt	ds	2		; Start of program code
009d =                       df_prgend	ds	2		; End of program code
009f =                       df_vntstrt	ds	2		; Variable name table start
00a1 =                       df_vntend	ds	2		; Variable name table end
00a3 =                       df_vvtstrt	ds	2		; Variable value table start
00a5 =                       df_vvtend	ds	2		; Variable value table end
00a7 =                       df_varcnt	ds	1		; Variable counter
00a8 =                       df_starstrt	ds	2		; String and array table start
00aa =                       df_starend	ds	2		; String and array table end
00ac =                       df_rtstop	ds	1		; Runtime stack pointer
00ad =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ae =                       df_strbuff	ds	1		; String expression buffer
00af =                       df_stridx	ds	1		; Top of string buffer (grows dow
00b0 =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00b2 =                       df_linoff	ds	1		; Offset in to line buffer
00b3 =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00b4 =                       df_eolidx	ds	1		; End of line index (i.e length)
00b5 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00b6 =                       df_curstidx	ds	1		; Offset to the start of curren
00b7 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00b9 =                       df_symoff	ds	1		; Offset in to token table
00ba =                       df_symini	ds	2		; Start of symtab
00bc =                       df_currlin	ds	2		; Execution current line pointer
00be =                       df_exeoff	ds	1		; Execution line buffer offset
00bf =                       df_nextlin	ds	2		; Next line to execute
00c1 =                       df_procmode	ds	1		; Only used during tokenisation
00c2 =                       df_procargs	ds	1		; Only used during tokenisation
00c3 =                       df_procloc	ds	1		; Counts the number of local par
00c4 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00c6 =                       df_lineptr	ds	2		; Pointer to line during searche
00c8 =                       df_lineidx	ds	1		; Pointer to line index during s
00c9 =                       df_ifnest	ds	1		; Global nested if counter
00ca =                       df_currdat	ds	2		; Data current line pointer
00cc =                       df_datoff	ds	1		; Data line buffer offset
00cd =                       df_rnd		ds	2		; Random number seed
                             
00cf =                       df_asmpc	ds	2		; Assembler program counter
00d1 =                       df_asmopt	ds	1		; Assembler current option
00d2 =                       df_asmadmd	ds	1		; Addressing mode
00d3 =                       df_asmopcde	ds	1		; Current opcode
00d4 =                       df_asmoprnd	ds	2		; Current operand
00d6 =                       df_asmlen	ds	1		; Instruction length
                             
00d7 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00d7 =                       df_tmpptra	ds	2		; Temp pointer a
00d9 =                       df_tmpptrb	ds	2		; Temp pointer b
00db =                       df_tmpptrc	ds	2		; Temp pointer c
00dd =                       df_tmpptrd	ds	2		; Temp pointer d
00df =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank3.s -----------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00e1 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
0c00 =                       	org 0x0c00			; Page 11 = non-zero page variables
                             ; Interrupt routine addresses
0c00 =                       int_nmi		 ds 2		; Master NMI handler
0c02 =                       int_irq		 ds	2		; Master IRQ handler
0c04 =                       int_brk		 ds	2		; Master BRK handler
0c06 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
0c08 =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
0c0a =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Self-modifying code or code that needs to run w
0c0c =                       ram_code	ds  64		; 64 bytes of RAM code space
0c4c =                       pt3_int		ds	1		; =1 when PT3 interrupt routine is
                             
                             
                             ; Active IO device settings
0c4d =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c4e =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c5e =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank3.s -----------------------------------

                             ; Filesystem parameters
0c7e =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c82 =                       fs_fatsect	ds	4		; Start of FAT tables
0c86 =                       fs_rootsect	ds	4		; Start of Root Directory
0c8a =                       fs_datasect	ds	4		; Start of Data Area
0c8e =                       fs_dirsect	ds	4		; Current directory sector numbe
0c92 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c94 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0cb4 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0cb6 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : 77c7                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : 8dcb                  	fcw init			; 0xfffc : Reset Vector
fffe : e5c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
                             	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
c000 : 00                    	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank3.s -----------------------------------

                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4cc0c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4cbdc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4c50c6           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c8ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c97c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4cf9c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4ca1c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4c5dc6           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c75c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f330, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d847, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d5bd, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d650, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d559, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d518, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d235, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank3.s -----------------------------------

c0d6 :                       _fs_open_read_w
                              _bankjsr $d404, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d4c8, 2
                             
c106 :                       _fs_put_byte_w
                              _bankjsr $d391, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $d078, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d0ae, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $d033, 2
                             
c166 :                       _get_byte
                              _bankjsr $d27d, 0
                             
c17e :                       _put_byte
                              _bankjsr $d292, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e390, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e39d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $de59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d29f, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d22a, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d25b, 0
                             
c226 :                       _init_fs
                              _bankjsr $cf10, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cc0a, 2
                             
c256 :                       _init_snd
                              _bankjsr $d668, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d2b1, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d2c0, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d32b, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cc13, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank3.s -----------------------------------

                             
c2ce :                       _gr_cls
                              _bankjsr $de6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $de16, 0
                             
c2fe :                       _gr_line
                              _bankjsr $e1ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $e00a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e115, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ded7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $df15, 0
                             
c376 :                       _gr_point
                              _bankjsr $dfbb, 0
                             
c38e :                       _gr_get
                              _bankjsr $def2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $defa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d661, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c6f9, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c6a1, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c697, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c68a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $dc00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d487, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d5ed, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d53e, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d658, 0
                             
c4ae :                       _rtc_nvwrite
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank3.s -----------------------------------

                              _bankjsr $d640, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d664, 2
                             
c4de :                       _sd_sendcmd17
                              _bankjsr $cde2, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $ce5b, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cc0a, 0
                             
c526 :                       _PT3INIT
                              _bankjsr $cc13, 3
                             
c53e :                       _PT3START
                              _bankjsr $cc0a, 3
                             
c556 :                       _PT3PAUSE
                              _bankjsr $cc0d, 3
                             
c56e :                       _PT3RESUME
                              _bankjsr $cc10, 3
                             
c586 :                       mod_sz_autogen_e
                             
                             	
c586 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c586 :                       mod_sz_io_s
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank3.s -----------------------------------

                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c586 :                       io_init
c586 : a900             [ 2] 	lda #0				; Assume it's serial
c588 : 48               [ 3] 	pha
c589 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c58c : 2910             [ 2] 	and #0x10
c58e : d00b             [ 3] 	bne io_init_set_default
c590 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c593 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c595 : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c597 : 68               [ 4] 	pla
c598 : a901             [ 2] 	lda #1
c59a : 48               [ 3] 	pha
c59b :                       io_init_set_default
c59b : 68               [ 4] 	pla
c59c : 8d4d0c           [ 4] 	sta io_default
c59f : 4ca2c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c5a2 :                       io_set_default			; Entry point for default
c5a2 : ad4d0c           [ 4] 	lda io_default
c5a5 :                       io_active_device		; Entry point for A set
c5a5 : 0a               [ 2] 	asl	a				; x16 the Block number
c5a6 : 0a               [ 2] 	asl a
c5a7 : 0a               [ 2] 	asl a
c5a8 : 0a               [ 2] 	asl a
c5a9 : a8               [ 2] 	tay
c5aa : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c5ac :                       io_copy_data
c5ac : b920c6           [ 4] 	lda io_devices,y
c5af : 9d4e0c           [ 5] 	sta io_block,x
c5b2 : c8               [ 2] 	iny
c5b3 : e8               [ 2] 	inx
c5b4 : e010             [ 2] 	cpx #io_struct
c5b6 : d0f4             [ 3] 	bne io_copy_data
                             	
c5b8 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c5ba : 853e             [ 3] 	sta buf_ef
c5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank3.s -----------------------------------

                             ;****************************************
c5bd :                       io_get_ch
c5bd : 6c4e0c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c5c0 :                       io_put_ch
c5c0 : 6c500c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c3 :                       io_open_read
c5c3 : 6c520c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c6 :                       io_open_write
c5c6 : 6c540c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c9 :                       io_close
c5c9 : 6c560c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5cc :                       io_delete
c5cc : 6c580c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank3.s -----------------------------------

                             ;****************************************
c5cf :                       io_read_line
c5cf : 863b             [ 3] 	stx buf_adr			; Save pointer to storage
c5d1 : 853c             [ 3] 	sta buf_adr+1
c5d3 : 843d             [ 3] 	sty buf_sz			; Max length
c5d5 : 08               [ 3] 	php					; Save echo state
c5d6 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c5d8 :                       io_get_line_byte
c5d8 : 38               [ 2] 	sec					; Getting bytes synchronously
c5d9 : 20bdc5           [ 6] 	jsr io_get_ch		; Get a byte
c5dc : b026             [ 4] 	bcs io_get_line_done; Got nothing then finish
c5de : 28               [ 4] 	plp					; Get echo state
c5df : 08               [ 3] 	php					; Instantly save it back
c5e0 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c5e2 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c5e4 : d005             [ 3] 	bne io_do_echo
c5e6 : c000             [ 2] 	cpy #0				; Already at beginning?
c5e8 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c5ea : 88               [ 2] 	dey					; Else decrement length
c5eb :                       io_do_echo
c5eb : 20c0c5           [ 6] 	jsr io_put_ch		; Echo it
c5ee :                       io_skip_echo
c5ee : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c5f0 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c5f2 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c5f4 : f003             [ 3] 	beq io_skip_special
c5f6 : 913b             [ 5] 	sta (buf_adr),y		; Save it
c5f8 : c8               [ 2] 	iny					; Increase length
c5f9 :                       io_skip_special
c5f9 : c53e             [ 3] 	cmp buf_ef			; Is it the terminating char?
c5fb : f007             [ 4] 	beq io_get_line_done	; If yes then done
c5fd : c43d             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c5ff : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c601 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c602 : 38               [ 2] 	sec					; Yes, set carry flag
c603 : 60               [ 6] 	rts					; And done
c604 :                       io_get_line_done
c604 : a900             [ 2] 	lda #0
c606 : 913b             [ 5] 	sta (buf_adr),y		; Terminate with 0
c608 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c609 : 18               [ 2] 	clc					; Clear carry flag
c60a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c60b :                       io_print_line
c60b : 48               [ 3] 	pha
                             
c60c : 8631             [ 3] 	stx tmp_c					; Store the string pointer
c60e : 8532             [ 3] 	sta tmp_c+1					; lo and hi
c610 : a000             [ 2] 	ldy #0						; Start at the beginning!
c612 :                       io_print_line_byte
c612 : b131             [ 5] 	lda (tmp_c),y				; Copy byte to
c614 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c616 : 20c0c5           [ 6] 	jsr io_put_ch				; Transmit
c619 : c8               [ 2] 	iny
c61a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank3.s -----------------------------------

c61c :                       io_print_done
c61c : 68               [ 4] 	pla
c61d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c61e :                       io_null_op
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c620 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c620 :                       io_device0					; Serial device, input = Ser, outp
c620 : 66c1                  	dw	_get_byte			; io_get_ch
c622 : 7ec1                  	dw	_put_byte			; io_put_ch
c624 : 1ec6                  	dw	io_null_op			; io_open_r
c626 : 1ec6                  	dw	io_null_op			; io_open_w
c628 : 1ec6                  	dw	io_null_op			; io_close_f
c62a : 1ec6                  	dw	io_null_op			; io_del_f
c62c : 1ec6                  	dw	io_null_op			; io_ext1
c62e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c630 :                       io_device1					; Default device, input = screen e
c630 : 96c1                  	dw	_gr_get_key			; io_get_ch
c632 : aec1                  	dw	_gr_put_byte		; io_put_ch
c634 : 1ec6                  	dw	io_null_op			; io_open_r
c636 : 1ec6                  	dw	io_null_op			; io_open_w
c638 : 1ec6                  	dw	io_null_op			; io_close_f
c63a : 1ec6                  	dw	io_null_op			; io_del_f
c63c : 1ec6                  	dw	io_null_op			; io_ext1
c63e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c640 :                       io_device2					; SD device, input = SD, output = 
c640 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c642 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c644 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c646 : eec0                  	dw	_fs_open_write_w	; io_open_w
c648 : a6c0                  	dw	_fs_close_w			; io_close_f
c64a : 8ec0                  	dw	_fs_delete_w		; io_del_f
c64c : 1ec6                  	dw	io_null_op			; io_ext1
c64e : 1ec6                  	dw	io_null_op			; io_ext2
                             
c650 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank3.s -----------------------------------

                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c650 :                       vdp_wr_reg
c650 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c653 : ea               [ 2] 	nop
c654 : ea               [ 2] 	nop
c655 : 0980             [ 2] 	ora #0x80
c657 : 8d0105           [ 4] 	sta VDP_MODE1
c65a : 4980             [ 2] 	eor #0x80
c65c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c65d :                       vdp_wr_addr
c65d : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c660 : ea               [ 2] 	nop
c661 : ea               [ 2] 	nop
c662 : ea               [ 2] 	nop
c663 : 0940             [ 2] 	ora #0x40		; Required by VDP
c665 : 8d0105           [ 4] 	sta VDP_MODE1
c668 : 4940             [ 2] 	eor #0x40		; Undo that bit
c66a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c66b :                       vdp_mem_wait
c66b : da               [ 3] 	phx								; 3
c66c : a60a             [ 3] 	ldx vdp_delay					; 3
c66e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c670 :                       vdp_mem_wait_loop
c670 : ca               [ 2] 	dex								; 2
c671 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c673 :                       vdp_mem_wait_end
c673 : fa               [ 4] 	plx								; 3
c674 : 60               [ 6] 	rts								; 6
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank3.s -----------------------------------

                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c675 :                       vdp_rd_addr
c675 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c678 : ea               [ 2] 	nop
c679 : ea               [ 2] 	nop
c67a : ea               [ 2] 	nop
c67b : 8d0105           [ 4] 	sta VDP_MODE1
c67e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c680 :                       vdp_rd_vram
c680 : ad0005           [ 4] 	lda VDP_VRAM
c683 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c685 :                       vdp_wr_vram
c685 : 8d0005           [ 4] 	sta VDP_VRAM
c688 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c68a :                       vdp_poke
c68a : 08               [ 3] 	php
c68b : 48               [ 3] 	pha
c68c : 98               [ 2] 	tya
c68d : 78               [ 2] 	sei
c68e : 205dc6           [ 6] 	jsr vdp_wr_addr
c691 : 68               [ 4] 	pla
c692 : 2085c6           [ 6] 	jsr vdp_wr_vram
c695 : 28               [ 4] 	plp
c696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank3.s -----------------------------------

                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c697 :                       vdp_peek
c697 : 08               [ 3] 	php
c698 : 78               [ 2] 	sei
c699 : 2075c6           [ 6] 	jsr vdp_rd_addr
c69c : 2080c6           [ 6] 	jsr vdp_rd_vram
c69f : 28               [ 4] 	plp
c6a0 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6a1 :                       snd_set
c6a1 : 48               [ 3] 	pha
                             
c6a2 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6a4 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6a7 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6aa : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6ad : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6af : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6b1 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6b4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6b6 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c6b9 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c6bc : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c6be : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c6c1 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6c3 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6c6 : 68               [ 4] 	pla
                             	
c6c7 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank3.s -----------------------------------

                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c6c8 :                       snd_get
c6c8 : 48               [ 3] 	pha
                             
c6c9 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6cb : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6ce : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6d1 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6d4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6d6 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6d8 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6db : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6dd : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6e0 : a900             [ 2] 	lda #0x00				; Set Port A to input
c6e2 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6e5 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6e8 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6ea : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c6ec : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6ef : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c6f2 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6f4 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6f7 : 68               [ 4] 	pla
                             	
c6f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c6f9 :                       snd_get_joy0
c6f9 : 48               [ 3] 	pha
c6fa : 48               [ 3] 	pha
c6fb :                       snd_get_joy0_retry
c6fb : 7a               [ 4] 	ply
c6fc : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c6fe : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c701 : 5a               [ 3] 	phy						; Put on stack
c702 : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c705 : 98               [ 2] 	tya
c706 : ba               [ 2] 	tsx						; Get stack pointer
c707 : dd0101           [ 4] 	cmp 0x101,x				; Compare with stack value
c70a : d0ef             [ 4] 	bne snd_get_joy0_retry	; If not equal, try again
c70c : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank3.s -----------------------------------

c70d : 68               [ 4] 	pla
c70e : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c70f :                       main
                             
c70f :                       infinity
c70f : 2046c0           [ 6] 	jsr _df_pg_dflat
c712 : 4c0fc7           [ 3] 	jmp infinity
                             
c715 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c715 : 4275696c64203a..       db "Build : 28-01-2025\r"
c728 : 3132384b204272..       db "128K Breadboard Computer\r"
c741 : 42792040363530..       db "By @6502Nerd\r"
c74e : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c762 :                       init_nmi
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank3.s -----------------------------------

                             	; Core IRQ handler
c762 : a977             [ 2] 	lda #lo(nmi)
c764 : 8d000c           [ 4] 	sta int_nmi
c767 : a9c7             [ 2] 	lda #hi(nmi)
c769 : 8d010c           [ 4] 	sta int_nmi+1
                             
c76c : a9f5             [ 2] 	lda #lo(null_handler)
c76e : 8d0a0c           [ 4] 	sta int_usercia1
c771 : a9c7             [ 2] 	lda #hi(null_handler)
c773 : 8d0b0c           [ 4] 	sta int_usercia1+1
                             
c776 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c777 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* 6551 uses this - fills the receive buffer
                             ;* VIA 2 uses this- user interrupt
c777 :                       nmi
c777 : 48               [ 3] 	pha
                             
c778 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c77b : 100c             [ 3] 	bpl	nmi_skip_acia			; If no interrupt don't do a
                             
c77d : 5a               [ 3] 	phy
c77e : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c781 : a403             [ 3] 	ldy ser_last				; Put byte in last position of F
c783 : 990008           [ 5] 	sta ser_buf,y
c786 : e603             [ 5] 	inc ser_last				; Advance position of last
                             
c788 : 7a               [ 4] 	ply
c789 :                       nmi_skip_acia
                             	;* Try PIA1 first for rapid Timer handling
c789 : ad8d04           [ 4] 	lda IO_1 + IFR
c78c : 102c             [ 3] 	bpl nmi_fin
c78e : 5a               [ 3] 	phy
c78f : da               [ 3] 	phx
                             	; Reset interrupt by reading T1C-L
c790 : ad8404           [ 4] 	lda IO_1+T1CL
                             	; Swtich to RAM bank 2 don't touch anything else
c793 : ad0004           [ 4] 	lda IO_0+PRB
c796 : 48               [ 3] 	pha                     ; Remember the bank #
c797 : 29cf             [ 2] 	and #0b11001111
c799 : 0920             [ 2] 	ora #0b00100000
c79b : 8d0004           [ 4] 	sta IO_0+PRB
                             	; Switch out ROM for RAM
c79e : ad8004           [ 4] 	lda IO_1+PRB                    ; Get current RO
c7a1 : 48               [ 3] 	pha
c7a2 : 29df             [ 2] 	and #(0xff ^ MM_DIS)            ; Switch off ROM
c7a4 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
c7a7 : ee4c0c           [ 6] 	inc pt3_int 				  	; Set PT3 interrupt flag
c7aa : 20f1c7           [ 6] 	jsr call_irq_usercia1			; Call user cia1 handler
c7ad : 9c4c0c           [ 4] 	stz pt3_int 				  	; Clear PT3 interrupt flag
                             	; Restore ROM
c7b0 : 68               [ 4] 	pla                             ; Get original p
c7b1 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
                             	; Restore RAM bank
c7b4 : 68               [ 4] 	pla                             ; Get original p
c7b5 : 8d0004           [ 4] 	sta IO_0+PRB                    ; Update port to
c7b8 : fa               [ 4] 	plx
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank3.s -----------------------------------

c7b9 : 7a               [ 4] 	ply
c7ba :                       nmi_fin
c7ba : 68               [ 4] 	pla
c7bb : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c7bc :                       init_irq
                             	; Core IRQ handler
c7bc : a9f6             [ 2] 	lda #lo(irq)
c7be : 8d020c           [ 4] 	sta int_irq
c7c1 : a9c7             [ 2] 	lda #hi(irq)
c7c3 : 8d030c           [ 4] 	sta int_irq+1
                             	
                             	; Core BRK handler
c7c6 : a91c             [ 2] 	lda #lo(irq_brk)
c7c8 : 8d040c           [ 4] 	sta int_brk
c7cb : a9c8             [ 2] 	lda #hi(irq_brk)
c7cd : 8d050c           [ 4] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0 interrupts
c7d0 : a9f5             [ 2] 	lda #lo(null_handler)
c7d2 : 8d060c           [ 4] 	sta int_uservdp
c7d5 : a9c7             [ 2] 	lda #hi(null_handler)
c7d7 : 8d070c           [ 4] 	sta int_uservdp+1
                             
c7da : a9f5             [ 2] 	lda #lo(null_handler)
c7dc : 8d080c           [ 4] 	sta int_usercia0
c7df : a9c7             [ 2] 	lda #hi(null_handler)
c7e1 : 8d090c           [ 4] 	sta int_usercia0+1
                             
c7e4 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c7e5 :                       call_irq_master
c7e5 : 6c020c           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c7e8 :                       call_irq_brk
c7e8 : 6c040c           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c7eb :                       call_irq_uservdp
c7eb : 6c060c           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c7ee :                       call_irq_usercia0
c7ee : 6c080c           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c7f1 :                       call_irq_usercia1
c7f1 : 6c0a0c           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c7f4 :                       null_irq
c7f4 : 40               [ 6] 	rti
                             
                             ;* null handler
c7f5 :                       null_handler
c7f5 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank3.s -----------------------------------

                             
                             ;* Master IRQ handler
c7f6 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c7f9 : ba               [ 2] 	tsx
c7fa : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c7fd : 2910             [ 2] 	and #0x10
c7ff : d0e7             [ 3] 	bne call_irq_brk
                             	
c801 : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try VDP next
c802 :                       irq_check_vdp	
c802 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c805 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c807 : 20ebc7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c80a : 2069c8           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c80d : 2047c8           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c810 :                       irq_check_cia0
c810 : ad0d04           [ 4] 	lda IO_0 + IFR
c813 : 1003             [ 3] 	bpl irq_fin
c815 : 20eec7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c818 :                       irq_fin
                             	_pullAXY
                             
c81b : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c81c :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c81c : 38               [ 2] 	sec
c81d : bd0501           [ 4] 	lda 0x0105,x
c820 : e902             [ 2] 	sbc #2
c822 : 8598             [ 3] 	sta df_brkpc
c824 : bd0601           [ 4] 	lda 0x0106,x
c827 : e900             [ 2] 	sbc #0
c829 : 8599             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c82b : a001             [ 2] 	ldy #1
c82d : b198             [ 5] 	lda (df_brkpc),y
c82f : 859a             [ 3] 	sta df_brkval
c831 : 8593             [ 3] 	sta errno
                             	; now update the return address
c833 : a596             [ 3] 	lda df_pc
c835 : 9d0501           [ 5] 	sta 0x105,x
c838 : a597             [ 3] 	lda df_pc+1
c83a : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c840 : 8579             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank3.s -----------------------------------

c842 : 867a             [ 3] 	stx num_a+1
c844 : 847b             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c846 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c847 :                       int_kb_handler	
c847 : a52b             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c849 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c84b : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c84e : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c850 : f00c             [ 3] 	beq int_keys_up
c852 :                       int_do_read
c852 : 8530             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c854 : a52f             [ 3] 	lda kb_debounce			; Set debounce
c856 : 852b             [ 3] 	sta kb_deb
c858 :                       int_skip_scan
c858 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c85a : 8d0d04           [ 4] 	sta IO_0 + IFR
c85d : 60               [ 6] 	rts
c85e :                       int_keys_up					; No key pressed
c85e : 6427             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c860 : 6428             [ 3] 	stz kb_last
c862 : 6429             [ 3] 	stz kb_code
c864 : 642b             [ 3] 	stz kb_deb
c866 : 642c             [ 3] 	stz kb_rep
c868 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c869 :                       int_vdp_handler
c869 : 2095c8           [ 6] 	jsr update_timers	; If it is then update system 
                             
c86c : a506             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c86e : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c870 : c607             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c872 : a507             [ 3] 	lda vdp_curstat		; Check it
c874 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c876 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c878 : a507             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c87a : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c87c : 8507             [ 3] 	sta vdp_curstat		
                             
c87e : 18               [ 2] 	clc					; Add offset for cursor address in vram
c87f : a520             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c881 : 651d             [ 3] 	adc gr_scrngeom+gr_cur_off
c883 : aa               [ 2] 	tax
c884 : a521             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c886 : 6900             [ 2] 	adc #0
                             
c888 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
c88b : a507             [ 3] 	lda vdp_curstat
c88d : 2980             [ 2] 	and #0x80
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank3.s -----------------------------------

c88f : 4508             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c891 : 2085c6           [ 6] 	jsr vdp_wr_vram
c894 :                       int_vdp_fin	
c894 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c895 :                       update_timers
c895 : e604             [ 5] 	inc vdp_int_cnt
c897 : d002             [ 3] 	bne inc_kb_timers
c899 : e605             [ 5] 	inc vdp_int_cnt+1
c89b :                       inc_kb_timers
c89b : a62b             [ 3] 	ldx kb_deb			; Is debounce 0?
c89d : f002             [ 3] 	beq skip_kb_deb
c89f : c62b             [ 5] 	dec kb_deb
c8a1 :                       skip_kb_deb
c8a1 : a62c             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c8a3 : f002             [ 3] 	beq skip_kb_rep
c8a5 : c62c             [ 5] 	dec kb_rep
c8a7 :                       skip_kb_rep
c8a7 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c8a8 :                       long_delay
c8a8 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c8ac : a000             [ 2] 	ldy #0x00
c8ae :                       long_delay_1
c8ae : ea               [ 2] 	nop
c8af : ea               [ 2] 	nop
c8b0 : ea               [ 2] 	nop
c8b1 : ea               [ 2] 	nop
c8b2 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank3.s -----------------------------------

c8b3 : d0f9             [ 3] 	bne long_delay_1
c8b5 : ca               [ 2] 	dex
c8b6 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c8bb : 28               [ 4] 	plp
                             	
c8bc : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c8bd :                       utilPrintSPC
c8bd : 48               [ 3] 	pha
c8be : a920             [ 2] 	lda #' '
c8c0 : 20c0c5           [ 6] 	jsr io_put_ch
c8c3 : 68               [ 4] 	pla
c8c4 : 60               [ 6] 	rts
                             
c8c5 :                       utilPrintCRLF
c8c5 : 48               [ 3] 	pha
c8c6 : a90d             [ 2] 	lda #UTF_CR
c8c8 : 20c0c5           [ 6] 	jsr io_put_ch
c8cb : 68               [ 4] 	pla
c8cc : 60               [ 6] 	rts
                             
c8cd :                       utilPrintA
c8cd : 8539             [ 3] 	sta tmp_d
c8cf : 48               [ 3] 	pha
c8d0 : 8a               [ 2] 	txa
c8d1 : 48               [ 3] 	pha
c8d2 : a539             [ 3] 	lda tmp_d
c8d4 : 20f2c8           [ 6] 	jsr str_a_to_x
c8d7 : 20c0c5           [ 6] 	jsr io_put_ch
c8da : 8a               [ 2] 	txa
c8db : 20c0c5           [ 6] 	jsr io_put_ch
c8de : 68               [ 4] 	pla
c8df : aa               [ 2] 	tax
c8e0 : 68               [ 4] 	pla
c8e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank3.s -----------------------------------

                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c8e2 :                       util_clr_mem
c8e2 : 48               [ 3] 	pha
c8e3 : 5a               [ 3] 	phy
c8e4 : 8633             [ 3] 	stx tmp_v1
c8e6 : 8534             [ 3] 	sta tmp_v1+1
c8e8 : a900             [ 2] 	lda #0
c8ea :                       mem_clr_byte
c8ea : 88               [ 2] 	dey
c8eb : 9133             [ 5] 	sta (tmp_v1),y
c8ed : d0fb             [ 3] 	bne mem_clr_byte
c8ef : 7a               [ 4] 	ply
c8f0 : 68               [ 4] 	pla
c8f1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c8f2 :                       str_a_to_x
c8f2 : 48               [ 3] 	pha					; Save the byte using later on
c8f3 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c8f5 : 18               [ 2] 	clc
c8f6 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8f8 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8fa : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c8fc : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8fe :                       skip_a_f_1
c8fe : aa               [ 2] 	tax					; Low char is in X
c8ff : 68               [ 4] 	pla					; Get byte back
c900 : 4a               [ 2] 	lsr a				; Make high nibble low
c901 : 4a               [ 2] 	lsr a
c902 : 4a               [ 2] 	lsr a
c903 : 4a               [ 2] 	lsr a
c904 : 18               [ 2] 	clc
c905 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c907 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c909 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c90b : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c90d :                       skip_a_f_2
                             
c90d : 18               [ 2] 	clc					; No error
c90e : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c90f :                       str_x_to_a
c90f : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c911 : 38               [ 2] 	sec					; Process high char in A
c912 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c914 : c90a             [ 2] 	cmp #10				; If A < 10 then
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank3.s -----------------------------------

c916 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c918 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c91a :                       skip_x_f_1
c91a : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c91c : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c91e : 0a               [ 2] 	asl a				; This is the high nibble
c91f : 0a               [ 2] 	asl a
c920 : 0a               [ 2] 	asl a
c921 : 0a               [ 2] 	asl a
c922 : 48               [ 3] 	pha					; Save the high nibble
c923 : 8a               [ 2] 	txa					; Now process the low char in X
c924 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c926 : 38               [ 2] 	sec
c927 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c929 : c90a             [ 2] 	cmp #10				; If A < 10 then
c92b : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c92d : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c92f :                       skip_x_f_2
c92f : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c931 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c933 : 8579             [ 3] 	sta num_a			; Store low nibble in temp
c935 : 68               [ 4] 	pla					; Get high nibble
c936 : 0579             [ 3] 	ora num_a			; OR with low nibble
                             
c938 : 18               [ 2] 	clc					; No error
c939 : 60               [ 6] 	rts					; A contains value
                             
c93a :                       str_x_to_a_errl
c93a : 68               [ 4] 	pla
c93b :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c93d :                       con_n_to_a
c93d : 8685             [ 3] 	stx num_tmp
c93f : 8586             [ 3] 	sta num_tmp+1
c941 : 6479             [ 3] 	stz num_a
c943 : 647a             [ 3] 	stz num_a+1
c945 : c000             [ 2] 	cpy #NUM_ANY
c947 : f014             [ 3] 	beq con_n_to_a_detect
c949 : 88               [ 2] 	dey
c94a : d003             [ 3] 	bne con_n_not_dec
c94c :                       con_dec_jmp
c94c : 4ce0c9           [ 3] 	jmp con_dec_to_a_int
c94f :                       con_n_not_dec
c94f : 88               [ 2] 	dey
c950 : d003             [ 3] 	bne con_n_not_hex
c952 :                       con_hex_jmp
c952 : 4c77c9           [ 3] 	jmp con_hex_to_a_int
c955 :                       con_n_not_hex
c955 : 88               [ 2] 	dey
c956 : d003             [ 3] 	bne con_n_err
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank3.s -----------------------------------

c958 :                       con_bin_jmp
c958 : 4cb6c9           [ 3] 	jmp con_bin_to_a_int
c95b :                       con_n_err
c95b : 38               [ 2] 	sec
c95c : 60               [ 6] 	rts
c95d :                       con_n_to_a_detect
c95d : b285             [ 5] 	lda (num_tmp)
c95f : c930             [ 2] 	cmp #'0'
c961 : d0e9             [ 3] 	bne con_dec_jmp
c963 : a001             [ 2] 	ldy #1
c965 : b185             [ 5] 	lda (num_tmp),y
c967 : 0920             [ 2] 	ora #0x20
c969 : c978             [ 2] 	cmp #'x'
c96b : f0e5             [ 3] 	beq con_hex_jmp
c96d : c962             [ 2] 	cmp #'b'
c96f : f0e7             [ 3] 	beq con_bin_jmp
c971 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c973 :                       con_hex_to_a
c973 : 8685             [ 3] 	stx num_tmp
c975 : 8586             [ 3] 	sta num_tmp+1
c977 :                       con_hex_to_a_int
c977 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c979 : a002             [ 2] 	ldy #2			; start at first digit
c97b :                       con_hex_digit
c97b : b185             [ 5] 	lda (num_tmp),y
c97d : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c97f : 38               [ 2] 	sec							; Process high char in A
c980 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c982 : c90a             [ 2] 	cmp #10						; If A < 10 then
c984 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c986 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c988 :                       con_hex_skip_x_f_1
c988 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c98a : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c98c : 48               [ 3] 	pha
                             	; make room for lo nibble
c98d : 0679             [ 5] 	asl num_a
c98f : 267a             [ 5] 	rol num_a+1
c991 : 0679             [ 5] 	asl num_a
c993 : 267a             [ 5] 	rol num_a+1
c995 : 0679             [ 5] 	asl num_a
c997 : 267a             [ 5] 	rol num_a+1
c999 : 0679             [ 5] 	asl num_a
c99b : 267a             [ 5] 	rol num_a+1
                             	; save in low nibble
c99d : 68               [ 4] 	pla
c99e : 0579             [ 3] 	ora num_a
c9a0 : 8579             [ 3] 	sta num_a
c9a2 : c8               [ 2] 	iny
c9a3 : ca               [ 2] 	dex
c9a4 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c9a6 :                       con_hex_err
c9a6 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank3.s -----------------------------------

c9a7 : 60               [ 6] 	rts
                             	; found a non-hex digit
c9a8 :                       con_hex_done
                             	; if no digits processed then error
c9a8 : c002             [ 2] 	cpy #2
c9aa : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c9ac : 98               [ 2] 	tya
c9ad : aa               [ 2] 	tax
c9ae : a902             [ 2] 	lda #NUM_HEX
c9b0 : 18               [ 2] 	clc
c9b1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c9b2 :                       con_bin_to_a
c9b2 : 8685             [ 3] 	stx num_tmp
c9b4 : 8586             [ 3] 	sta num_tmp+1
c9b6 :                       con_bin_to_a_int
c9b6 : a002             [ 2] 	ldy #2
c9b8 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c9ba :                       con_bin_digit
c9ba : b185             [ 5] 	lda (num_tmp),y
c9bc : c930             [ 2] 	cmp #'0'
c9be : 9010             [ 3] 	bcc con_bin_done
c9c0 : c932             [ 2] 	cmp #'1'+1
c9c2 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c9c4 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c9c6 : 2679             [ 5] 	rol num_a
c9c8 : 267a             [ 5] 	rol num_a+1
c9ca : c8               [ 2] 	iny
c9cb : ca               [ 2] 	dex
c9cc : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c9ce : 800a             [ 3] 	bra con_bin_err
c9d0 :                       con_bin_done
                             	; didn't process any digit = error
c9d0 : c002             [ 2] 	cpy #2
c9d2 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c9d4 : 98               [ 2] 	tya
c9d5 : aa               [ 2] 	tax
c9d6 : a903             [ 2] 	lda #NUM_BIN
c9d8 : 18               [ 2] 	clc
c9d9 : 60               [ 6] 	rts
c9da :                       con_bin_err
c9da : 38               [ 2] 	sec
c9db : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank3.s -----------------------------------

                             ;****************************************
c9dc :                       con_dec_to_a
c9dc : 8685             [ 3] 	stx num_tmp
c9de : 8586             [ 3] 	sta num_tmp+1
c9e0 :                       con_dec_to_a_int
c9e0 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c9e2 : b285             [ 5] 	lda (num_tmp)
c9e4 : c92d             [ 2] 	cmp #'-'
c9e6 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c9e8 : c8               [ 2] 	iny
c9e9 :                       str_d_find_end
c9e9 : b185             [ 5] 	lda (num_tmp),y
c9eb : c930             [ 2] 	cmp #'0'
c9ed : 9007             [ 3] 	bcc str_d_found_end
c9ef : c93a             [ 2] 	cmp #'9'+1
c9f1 : b003             [ 3] 	bcs str_d_found_end
c9f3 : c8               [ 2] 	iny
c9f4 : 80f3             [ 3] 	bra str_d_find_end
c9f6 :                       str_d_found_end
c9f6 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c9f8 : b052             [ 4] 	bcs str_d_error		; e.g. -32767 including minus
c9fa : 8488             [ 3] 	sty num_tmp+3
c9fc : 6487             [ 3] 	stz num_tmp+2
c9fe : 6479             [ 3] 	stz num_a
ca00 : 647a             [ 3] 	stz num_a+1
ca02 :                       str_d_process_digit
ca02 : 88               [ 2] 	dey
ca03 : 3026             [ 3] 	bmi str_d_digits_done
                             
ca05 : b185             [ 5] 	lda (num_tmp),y
                             
ca07 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
ca09 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
ca0b : 38               [ 2] 	sec
ca0c : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
ca0e : 18               [ 2] 	clc
ca0f : 0a               [ 2] 	asl a
ca10 : 6587             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
ca12 : aa               [ 2] 	tax
ca13 : a579             [ 3] 	lda num_a
ca15 : 7d4eca           [ 4] 	adc str_d_powers,x
ca18 : 8579             [ 3] 	sta num_a
ca1a : a57a             [ 3] 	lda num_a+1
ca1c : 7d4fca           [ 4] 	adc str_d_powers+1,x
ca1f : 857a             [ 3] 	sta num_a+1
ca21 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
ca23 : a587             [ 3] 	lda num_tmp+2
ca25 : 6914             [ 2] 	adc #20
ca27 : 8587             [ 3] 	sta num_tmp+2
ca29 : 80d7             [ 3] 	bra str_d_process_digit
ca2b :                       str_d_digits_done
                             	; check if minus
ca2b : b285             [ 5] 	lda (num_tmp)
ca2d : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank3.s -----------------------------------

ca2f : d011             [ 3] 	bne str_d_skip_neg
ca31 : a688             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
ca33 : e002             [ 2] 	cpx #2				; else it's an error
ca35 : 9015             [ 3] 	bcc str_d_error
ca37 : a679             [ 3] 	ldx num_a
ca39 : a57a             [ 3] 	lda num_a+1
ca3b : 20b2ca           [ 6] 	jsr twos_complement
ca3e : 8679             [ 3] 	stx num_a
ca40 : 857a             [ 3] 	sta num_a+1
ca42 :                       str_d_skip_neg
ca42 : a688             [ 3] 	ldx num_tmp+3
ca44 : e001             [ 2] 	cpx #1				; must be at least 1 char
ca46 : 9004             [ 3] 	bcc str_d_error
ca48 : a901             [ 2] 	lda #NUM_DEC
ca4a : 18               [ 2] 	clc
ca4b : 60               [ 6] 	rts
ca4c :                       str_d_error
ca4c : 38               [ 2] 	sec
ca4d : 60               [ 6] 	rts
                             
ca4e :                       str_d_powers
ca4e : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
ca62 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
ca76 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
ca8a : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
ca9e : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
cab2 :                       twos_complement
cab2 : 49ff             [ 2] 	eor #0xff
cab4 : 48               [ 3] 	pha
cab5 : 8a               [ 2] 	txa
cab6 : 49ff             [ 2] 	eor #0xff
cab8 : aa               [ 2] 	tax
cab9 : 68               [ 4] 	pla
caba : e8               [ 2] 	inx
cabb : d001             [ 3] 	bne twos_complement_skip_X
cabd : 1a               [ 2] 	inc a
cabe :                       twos_complement_skip_X
cabe : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
cabf :                       int_to_bcd
cabf : 08               [ 3] 	php
cac0 : 48               [ 3] 	pha
cac1 : da               [ 3] 	phx
                             
cac2 : 8685             [ 3] 	stx num_tmp
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank3.s -----------------------------------

cac4 : 8586             [ 3] 	sta num_tmp+1
cac6 : c980             [ 2] 	cmp #0x80			; Negative?
cac8 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
caca : 20b2ca           [ 6] 	jsr twos_complement
cacd :                       int_to_bcd_skip_neg
cacd : 6479             [ 3] 	stz num_a
cacf : 647a             [ 3] 	stz num_a+1
cad1 : 647b             [ 3] 	stz num_a+2
cad3 : 647c             [ 3] 	stz num_a+3
cad5 : a210             [ 2] 	ldx #16
cad7 : f8               [ 2] 	sed
cad8 :                       int_to_bcd_bit
cad8 : 0685             [ 5] 	asl num_tmp
cada : 2686             [ 5] 	rol num_tmp+1
cadc : a579             [ 3] 	lda num_a
cade : 6579             [ 3] 	adc num_a
cae0 : 8579             [ 3] 	sta num_a
cae2 : a57a             [ 3] 	lda num_a+1
cae4 : 657a             [ 3] 	adc num_a+1
cae6 : 857a             [ 3] 	sta num_a+1
cae8 : a57b             [ 3] 	lda num_a+2
caea : 657b             [ 3] 	adc num_a+2
caec : 857b             [ 3] 	sta num_a+2
caee : ca               [ 2] 	dex
caef : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
caf1 : fa               [ 4] 	plx
caf2 : 68               [ 4] 	pla
caf3 : 28               [ 4] 	plp
caf4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
caf5 :                       word_to_bcd
caf5 : 08               [ 3] 	php
caf6 : 48               [ 3] 	pha
caf7 : da               [ 3] 	phx
                             
caf8 : 8685             [ 3] 	stx num_tmp
cafa : 8586             [ 3] 	sta num_tmp+1
cafc : 6479             [ 3] 	stz num_a
cafe : 647a             [ 3] 	stz num_a+1
cb00 : 647b             [ 3] 	stz num_a+2
cb02 : 647c             [ 3] 	stz num_a+3
cb04 : a210             [ 2] 	ldx #16			; 16 binary bits
cb06 : f8               [ 2] 	sed
cb07 :                       word_to_bcd_bit
cb07 : 0685             [ 5] 	asl num_tmp
cb09 : 2686             [ 5] 	rol num_tmp+1
cb0b : a579             [ 3] 	lda num_a
cb0d : 6579             [ 3] 	adc num_a
cb0f : 8579             [ 3] 	sta num_a
cb11 : a57a             [ 3] 	lda num_a+1
cb13 : 657a             [ 3] 	adc num_a+1
cb15 : 857a             [ 3] 	sta num_a+1
cb17 : a57b             [ 3] 	lda num_a+2
cb19 : 657b             [ 3] 	adc num_a+2
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank3.s -----------------------------------

cb1b : 857b             [ 3] 	sta num_a+2
cb1d : ca               [ 2] 	dex
cb1e : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
cb20 : fa               [ 4] 	plx
cb21 : 68               [ 4] 	pla
cb22 : 28               [ 4] 	plp
cb23 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
cb24 :                       int_to_str_ch
cb24 : 290f             [ 2] 	and #0xf
cb26 : 0930             [ 2] 	ora #0x30					; Convert to ascii
cb28 : 4930             [ 2] 	eor #0x30					; Check if zero digit
cb2a : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
cb2c : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
cb2e : 4930             [ 2] 	eor #0x30					; Restore A
cb30 : 60               [ 6] 	rts							; Return without storing anything
cb31 :                       int_to_str_nz
cb31 : 4930             [ 2] 	eor #0x30					; Restore A
cb33 : 998900           [ 5] 	sta num_buf,y
cb36 : c8               [ 2] 	iny
cb37 : 38               [ 2] 	sec							; Set C as a non-zero encountered
cb38 :                       int_to_str_ch_fin
cb38 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
cb39 :                       int_to_str
                             	_pushAXY
                             
cb3c : a000             [ 2] 	ldy #0						; first pos of num_buf
cb3e : 0900             [ 2] 	ora #0						; Test A for sign bit
cb40 : 08               [ 3] 	php							; Remember C bit of P
cb41 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
cb43 : 20b2ca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
cb46 : 48               [ 3] 	pha							; Remember A
cb47 : a92d             [ 2] 	lda #'-'					; Put in negative sign
cb49 : 8589             [ 3] 	sta num_buf
cb4b : c8               [ 2] 	iny							; Start at second buffer pos
cb4c : 68               [ 4] 	pla							; Restore A
cb4d :                       int_to_str_skip_neg
cb4d : 20f5ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
cb50 : a202             [ 2] 	ldx #2						; Start at BCD high byte
cb52 :                       int_str
cb52 : 28               [ 4] 	plp							; Get C but immediately
cb53 : 08               [ 3] 	php							; Save C (due to loop check later)
cb54 : b579             [ 4] 	lda num_a,x					; Get BCD digit
cb56 : 8590             [ 3] 	sta num_buf+7				; Save A it for the units later
cb58 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cb59 : 4a               [ 2] 	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank3.s -----------------------------------

cb5a : 4a               [ 2] 	lsr a
cb5b : 4a               [ 2] 	lsr a
cb5c : 28               [ 4] 	plp							; Get C
cb5d : 2024cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb60 : a590             [ 3] 	lda num_buf+7				; Get A for the units
cb62 : 2024cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb65 : 08               [ 3] 	php							; Save C
cb66 : ca               [ 2] 	dex
cb67 : 10e9             [ 3] 	bpl int_str
cb69 : 28               [ 4] 	plp							; Check C
cb6a : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cb6c : a930             [ 2] 	lda #'0'					; Stuff a zero
cb6e : 8589             [ 3] 	sta num_buf					; Must be in first position..
cb70 : c8               [ 2] 	iny
cb71 :                       int_to_str_fin
cb71 : a900             [ 2] 	lda #0						; Terminator
cb73 : 998900           [ 5] 	sta num_buf,y
cb76 : c8               [ 2] 	iny
                             	_pullAXY
                             
cb7a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank3.s -----------------------------------

                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb7b :                       str_a_to_d
cb7b : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank3.s -----------------------------------

                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb7c :                       print_a_to_d
cb7c : 2039cb           [ 6] 	jsr int_to_str
cb7f : a000             [ 2] 	ldy #0
cb81 :                       print_a_to_d_ch
cb81 : b98900           [ 4] 	lda num_buf,y
cb84 : f006             [ 3] 	beq print_a_to_d_fin
cb86 : 20c0c5           [ 6] 	jsr io_put_ch
cb89 : c8               [ 2] 	iny
cb8a : d0f5             [ 3] 	bne print_a_to_d_ch
cb8c :                       print_a_to_d_fin
cb8c : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cb8d :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cb8d : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cb8f : 9a               [ 2] 	txs
cb90 : 4cebcb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cb93 :                       init_2					; init_ram will jump back to here
                             	
cb93 : 2099cb           [ 6] 	jsr kernel_init
                             
cb96 : 4c0fc7           [ 3] 	jmp main
                             
cb99 :                       kernel_init
cb99 : 2062c7           [ 6] 	jsr init_nmi		; Initialise NMI handling
cb9c : 20bcc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cb9f : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cba2 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cba5 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
cba8 : 2026c5           [ 6] 	jsr _PT3INIT		; Load PT3 player code into shadow
cbab :                       kernel_test
cbab : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cbae : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cbb1 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cbb4 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cbb6 : 48               [ 3] 	pha
cbb7 : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cbb9 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cbbc : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cbbe : aa               [ 2] 	tax					; Save the mode temporarily
cbbf : 68               [ 4] 	pla					; Get the default mode from stack
cbc0 : 8a               [ 2] 	txa					; And push the NV mode that was read
cbc1 : 48               [ 3] 	pha
cbc2 : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cbc4 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cbc7 : 8515             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank3.s -----------------------------------

cbc9 :                       kernel_skip_nv	
cbc9 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cbca : 20c6c1           [ 6] 	jsr _gr_init_screen
cbcd : 2086c5           [ 6] 	jsr io_init			; Set default input/output device
cbd0 : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cbde : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cbe1 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cbe4 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cbe7 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cbea : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cbeb :                       init_ram
cbeb : 6400             [ 3] 	stz 0x00			; Start at page 0
cbed : 6401             [ 3] 	stz 0x01
cbef : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cbf1 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cbf3 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cbf5 :                       init_ram_1
cbf5 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cbf7 : 9004             [ 3] 	bcc init_ram_fill
cbf9 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cbfb : 9005             [ 4] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cbfd :                       init_ram_fill
cbfd : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cbff : c8               [ 2] 	iny
cc00 : d0fb             [ 4] 	bne init_ram_fill	; Do a whole page
cc02 :                       init_ram_skip
cc02 : e8               [ 2] 	inx					; Increment page counter
cc03 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cc05 : d0ee             [ 4] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cc07 : 4c93cb           [ 3] 	jmp init_2			; Carry on initialisation
                             
cc0a :                       mod_sz_kernel_e
                             
                             
                             
                             ; Bank specific code goes here
                             	include "sound\ptplayer.s"
                             ; ===============================================
                             ; Vortex Tracker II v1.0 PT3 player for 6502
                             ; Based on ORIC 1/ATMOS (6502) version
                             ; Updated for HB-BBC-128 Homebrew Computer by 650
                             ; ScalexTrixx (A.C) - (c)2018
                             ;
                             ; Translated and adapted from ZX Spectrum Player 
                             ; by S.V.Bulba (with Ivan Roshin for some parts/a
                             ; https://bulba.untergrund.net/main_e.htm (c)2004
                             ;
0030 =                       Revision = "0" 
                             ; ===============================================
                             ; REV 0: 
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank3.s -----------------------------------

                             ; ======
                             ; rev 0.34 (WK/TS)  - correction / 1.773 (288=x25
                             ;                   => file_end = $8E68
                             ;
                             ; rev 0.33 (WK)     - optimizations: PTDECOD
                             ;                   => file_end = $8E53
                             ;
                             ; rev 0.32 (WK)     - optimizations: PLAY
                             ;                   => file_end = $8F43
                             ;
                             ; rev 0.31 (WK)     - optimizations: CHREGS
                             ;                   => file_end = $8FC4
                             ;
                             ; rev 0.30 (WK)     - New base "full working" ver
                             ;                   - optimizations: zp variables
                             ;                   => file_end = $9027
                             ;
                             ; --------------------------------
                             ; WK: working / TS: test version |
                             ; ===============================================
                             ; TODO:
                             ; - lda ($AC),y -> lda ($AC,x)
                             ; - NOISE Register opt (/2 ?)
                             ; - déplacer / 1.773 avant CHREGS (cf CPC versio
                             ; - dans PD_LOOP: vérifier si des jmp relatifs s
                             ; - fix .bbs address
                             ; - check zero pages addresses
                             ; ===============================================
                             ;
                             ; -------------------------------------
                                     bss
                             
00ed =                       	org $ed         ; Uses *all* of zero page from h
                                 
00ed =                       SETUP   ds 1      ; set bit0 to 1, if you want to
                                                ; bit7 is set each time, when 
                             ; "registers" Z80
                             ; A = A
                             ; F = flags
                             
00ee =                       z80_A   ds 1      ; save A
00ef =                       z80_C   ds 1
00f0 =                       z80_B   ds 1
00f1 =                       z80_E   ds 1
00f2 =                       z80_D   ds 1
00f3 =                       z80_L   ds 1
00f4 =                       z80_H   ds 1
00f5 =                       z80_IX  ds 2
00f7 =                       z80_AP  ds 1      ; save A'
                             ; temp variable used during play
00f8 =                       val1    ds 2
00fa =                       val2    ds 2
00fc =                       val3    ds 2
00fe =                       val4    ds 2
00f8 =                       TA1 = val1
00f9 =                       TA2 = val1+1
00fa =                       TB1 = val2
00fb =                       TB2 = val2+1
00fc =                       TC1 = val3
00fd =                       TC2 = val3+1
00fe =                       TB3 = val4
00ff =                       TC3 = val4+1
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank3.s -----------------------------------

                             
                             ; =====================================
                             ; module PT3 address starts
                             ; =====================================
                                     code
cc0a :                       PT3_code_start
                             ; START = $e000 or PT3RELOCADDR
                             ; START+00 : Initialise a tune and start
                             ; START+03 : Disable tune and stop
                             ; START+06 : Mute sound every interrupt
                             ; START+09 : Pause but allow other sounds while p
                             ; START+0C : Resume tune
                             ; All will be extern routines
cc0a :                       PT3START
cc0a : 4c51cc           [ 3]         jmp _doStart
cc0d :                       PT3PAUSE
cc0d : 4c37cc           [ 3]         jmp _doPause
cc10 :                       PT3RESUME
cc10 : 4c4bcc           [ 3]         jmp _doResume
                             
                             ; We need to copy all this code to shadow RAM beh
                             ; Also ensure we're in **Bank 2** (not Bank 3) of
                             ; This is an extern routine needs to be callable 
                             ; Is called at power-on / reset
cc13 :                       PT3INIT
                                     ; Swtich to RAM bank 2 don't touch anythi
cc13 : ad0004           [ 4]         lda IO_0+PRB
cc16 : 48               [ 3]         pha                     ; Remember the ba
cc17 : 29cf             [ 2]         and #0b11001111         ; mask out old ba
cc19 : 0920             [ 2]         ora #0b00100000         ; mask in bank bi
cc1b : 8d0004           [ 4]         sta IO_0+PRB
                             
                                     ; Copy from end of PT3 code and var secti
                                     ; to shadow RAM directly underneath
                                     ; no need to copy beyond this as only has
                                     ; and we don't want to overwrite song dat
                                     ; been loaded behind ROM by the user
                             ;        ldy #lo(PT3_code_end)   ; Index into PT3
                             ;        stz tmp_a               ; Page + Y index
                             ;        ldx #hi(PT3_code_end)   ; Page number of
                             ;        stx tmp_a+1
                             ;PT3INIT_COPY
                             ;        lda (tmp_a),y           ; Get ROM byte
                             ;        sta (tmp_a),y           ; Write to memor
                             ;        dey
                             ;        cpy #0xff
                             ;        bne PT3INIT_COPY
                             ;        dex
                             ;        stx tmp_a+1             ; Derement page 
                             ;        cpx #0xbf               ; Check if gone 
                             ;        bne PT3INIT_COPY
cc1e : a000             [ 2]         ldy #0
cc20 : 8435             [ 3]         sty tmp_a
cc22 : a6c0             [ 3]         ldx 0xc0
cc24 : 8636             [ 3]         stx tmp_a+1
cc26 :                       PT3INIT_COPY
cc26 : b135             [ 5]         lda (tmp_a),y           ; Get ROM byte
cc28 : 9135             [ 5]         sta (tmp_a),y           ; Write to memory
cc2a : c8               [ 2]         iny
cc2b : d0f9             [ 3]         bne PT3INIT_COPY
cc2d : e8               [ 2]         inx
cc2e : 8636             [ 3]         stx tmp_a+1             ; Increment page 
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank3.s -----------------------------------

cc30 : d0f4             [ 3]         bne PT3INIT_COPY
                             
                                     ; Ok all code in this file copied from RO
cc32 : 68               [ 4]         pla
cc33 : 8d0004           [ 4]         sta IO_0+PRB            ; Restore RAM ban
cc36 : 60               [ 6]         rts
                             
                             
                             ; Can play other sounds while paused
cc37 :                       _doPause
                                     ; Disable T1 interrupt on VIA 1
cc37 : a940             [ 2]         lda #0b01000000
cc39 : 8d8e04           [ 4]         sta IO_1+IER
                             
                                     ; Kill the channels with the sound throug
cc3c : a03f             [ 2]         ldy #0x3f
cc3e : a207             [ 2]         ldx #SND_REG_CTL
cc40 : 20a1c6           [ 6]         jsr snd_set
                                     ; Zero the envolope register as it still 
cc43 : a000             [ 2]         ldy #0
cc45 : a20d             [ 2]         ldx #SND_REG_ENVCYC
cc47 : 20a1c6           [ 6]         jsr snd_set
                             
cc4a : 60               [ 6]         rts
                             
                             ; Reinstate the PT3 IRQ
cc4b :                       _doResume
                                     ; Enable T1 interrupt on VIA 1
cc4b : a9c0             [ 2]         lda #0b11000000
cc4d : 8d8e04           [ 4]         sta IO_1+IER
cc50 : 60               [ 6]         rts
                             
                             
                             ; Initialise the player to start using A,X as son
                             ; Y is the loop preference
cc51 :                       _doStart
cc51 : 84ed             [ 3]         sty SETUP               ; Set loop pref Y
                                     ; Disable T1 interrupt on VIA 1 just in c
cc53 : a040             [ 2]         ldy #0b01000000
cc55 : 8c8e04           [ 4]         sty IO_1+IER
                             ; For dflat, assume that A,X provides address of 
cc58 : 85f3             [ 3]         sta z80_L
cc5a : 86f4             [ 3]         stx z80_H
                                     ; Swtich to RAM bank 2 don't touch anythi
cc5c : ad0004           [ 4]         lda IO_0+PRB
cc5f : 48               [ 3]         pha                     ; Remember the ba
cc60 : 29cf             [ 2]         and #0b11001111
cc62 : 0920             [ 2]         ora #0b00100000
cc64 : 8d0004           [ 4]         sta IO_0+PRB
                                     ; Switch out ROM for RAM
cc67 : ad8004           [ 4]         lda IO_1+PRB                    ; Get cur
cc6a : 48               [ 3]         pha
cc6b : 29df             [ 2]         and #(0xff ^ MM_DIS)            ; Switch 
cc6d : 8d8004           [ 4]         sta IO_1+PRB                    ; Update 
                             ;        bra _doStart_test
                             
cc70 : 20efcc           [ 6] 	jsr INIT
                                     ; Remember previous user irq
cc73 : ad0a0c           [ 4]         lda int_usercia1
cc76 : 8da9cc           [ 4]         sta oldIrq
cc79 : ad0b0c           [ 4]         lda int_usercia1+1
cc7c : 8daacc           [ 4]         sta oldIrq+1
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank3.s -----------------------------------

                                     ; Set up timer for 50Hz (20ms) interrupts
                                     ; @5.36MHz it is 107,200 cycles
                                     ; which doesn't fit into 16 bits!
                                     ; so instead set up 100Hz (10ms) interrup
                                     ; which is 53,600 cycles, but only
                                     ; invoke the sound player every other
                                     ; interrupt!
                                     ; 53,600 = 0xd160
                                     ; Timer 1 of VIA 1
cc7f : a960             [ 2]         lda #0x60
cc81 : 8d8404           [ 4]         sta IO_1+T1CL
cc84 : a9d1             [ 2]         lda #0xd1
cc86 : 8d8504           [ 4]         sta IO_1+T1CH
                                     ; T1 of VIA1 set to continuous
cc89 : a940             [ 2]         lda #0b01000000
cc8b : 8d8b04           [ 4]         sta IO_1+ACR
                                     ; Instate PT3 irq
cc8e : a9c0             [ 2]         lda #lo(pt3Irq)
cc90 : 8d0a0c           [ 4]         sta int_usercia1
cc93 : a9cc             [ 2]         lda #hi(pt3Irq)
cc95 : 8d0b0c           [ 4]         sta int_usercia1+1
                                     ; Enable T1 interrupt
cc98 : a9c0             [ 2]         lda #0b11000000
cc9a : 8d8e04           [ 4]         sta IO_1+IER
                             ;_doStart_test
                                     ; Restore ROM
cc9d : 68               [ 4]         pla                             ; Get ori
cc9e : 8d8004           [ 4]         sta IO_1+PRB                    ; Update 
                                     ; Restore RAM bank
cca1 : 68               [ 4]         pla                             ; Get ori
cca2 : 8d0004           [ 4]         sta IO_0+PRB                    ; Update 
cca5 : 60               [ 6]         rts
                                  
cca6 : 0000                  CrPsPtr	fcw 0 ; current position in PT3 module
cca8 : 00                    intCount fcb 0      ; byte flag to call player on
cca9 : 0000                  oldIrq fcw 0    ; Remember old IRQ vector
                             
                             ;Identifier
ccab : 3d565449492050..      	    db "=VTII PT3 Player r.",Revision,"="
                             
                             ;
                             ; Call pt3 player every interrupt
ccc0 :                       pt3Irq
                                     ; Call player every other interrupt
ccc0 : a980             [ 2]         lda #0x80
ccc2 : 4da8cc           [ 4]         eor intCount
ccc5 : 8da8cc           [ 4]         sta intCount
ccc8 : 1003             [ 3]         bpl skipInt_1
                                     ; Call the player each tick
ccca : 2050d6           [ 6]         jsr PLAY
cccd :                       skipInt_1
cccd :                       skipInt
cccd : 60               [ 6]         rts
                             
ccce :                       CHECKLP
                             	                                                
ccce : a5ed             [ 3]         lda SETUP                                
ccd0 : 0980             [ 2]         ora #%10000000                           
ccd2 : 85ed             [ 3]         sta SETUP
ccd4 : 2901             [ 2]         and #1
ccd6 : d001             [ 3]         bne s1                                   
ccd8 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank3.s -----------------------------------

ccd9 : 68               [ 4] s1	pla                                           
ccda : 68               [ 4]         pla       ; dépile 2 fois puisque rts sh
ccdb : ee3dda           [ 6] 	inc DelyCnt                                     
ccde : ee01da           [ 6]         inc ANtSkCn                              
cce1 :                       _MUTE	                                           
cce1 : a93f             [ 2]         lda #0x3f
cce3 : 8d4ada           [ 4]         sta AYREGS+Mixer  ; This is the daddy - s
cce6 : a900             [ 2]         lda #00                                  
cce8 : 85f4             [ 3]         sta z80_H                                
ccea : 85f3             [ 3] 	sta z80_L                                       
                             ;	sta AYREGS+AmplA                               
                             ;	sta AYREGS+AmplB                               
                             ;       sta AYREGS+AmplC
ccec : 4c41d8           [ 3] 	jmp ROUT                                        
                             
ccef :                       INIT
ccef : a5f3             [ 3] 	lda z80_L                                       
ccf1 : 8dfacf           [ 4] 	sta MODADDR+1
ccf4 : 8d3dd3           [ 4]         sta MDADDR2+1
ccf7 : 85f5             [ 3]         sta z80_IX
ccf9 : 48               [ 3]         pha
ccfa : a5f4             [ 3]         lda z80_H
ccfc : 8d00d0           [ 4]         sta MODADDR+7
ccff : 8d43d3           [ 4]         sta MDADDR2+7
cd02 : 85f6             [ 3]         sta z80_IX+1
cd04 : 48               [ 3]         pha
cd05 : a964             [ 2]         lda #lo(100)                             
cd07 : 85f1             [ 3]         sta z80_E
cd09 : a900             [ 2]         lda #00
cd0b : 85f2             [ 3]         sta z80_D
cd0d : a8               [ 2]         tay
cd0e : 18               [ 2] 	clc                                             
cd0f : a5f1             [ 3]         lda z80_E
cd11 : 65f3             [ 3]         adc z80_L
cd13 : 85f3             [ 3]         sta z80_L
cd15 : a5f4             [ 3]         lda z80_H
cd17 : 6900             [ 2]         adc #00
cd19 : 85f4             [ 3]         sta z80_H
cd1b : b1f3             [ 5]         lda (z80_L),y                            
cd1d : 8d69d7           [ 4] 	sta Delay+1                                     
cd20 : a5f1             [ 3]         lda z80_E
cd22 : 65f3             [ 3]         adc z80_L
cd24 : 85f3             [ 3]         sta z80_L
cd26 : 8da6cc           [ 4]         sta CrPsPtr                              
cd29 : a5f4             [ 3]         lda z80_H
cd2b : 6900             [ 2]         adc #00
cd2d : 85f4             [ 3]         sta z80_H    
cd2f : 8da7cc           [ 4]         sta CrPsPtr+1
cd32 : a066             [ 2] 	ldy #102               
cd34 : b1f5             [ 5]         lda (z80_IX),y
cd36 : 85f1             [ 3]         sta z80_E
cd38 : 18               [ 2] 	clc                                             
cd39 : 65f3             [ 3]         adc z80_L
cd3b : 85f3             [ 3]         sta z80_L
cd3d : a5f4             [ 3]         lda z80_H
cd3f : 6900             [ 2]         adc #00
cd41 : 85f4             [ 3]         sta z80_H       
cd43 : e6f3             [ 5] 	inc z80_L                                       
cd45 : d002             [ 3]         bne s2
cd47 : e6f4             [ 5]         inc z80_H
cd49 : a5f3             [ 3] s2	lda z80_L                                     
cd4b : 8da0d6           [ 4]         sta LPosPtr+1
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank3.s -----------------------------------

cd4e : a5f4             [ 3]         lda z80_H
cd50 : 8da4d6           [ 4]         sta LPosPtr+5
cd53 : 68               [ 4] 	pla                                             
cd54 : 85f2             [ 3]         sta z80_D
cd56 : 68               [ 4]         pla
cd57 : 85f1             [ 3]         sta z80_E
cd59 : a067             [ 2] 	ldy #103               
cd5b : b1f5             [ 5]         lda (z80_IX),y
cd5d : 18               [ 2] 	clc                                             
cd5e : 65f1             [ 3]         adc z80_E
cd60 : 8dc7d6           [ 4]         sta PatsPtr+1   
cd63 : a068             [ 2]         ldy #104                  
cd65 : b1f5             [ 5]         lda (z80_IX),y
cd67 : 65f2             [ 3]         adc z80_D
cd69 : 8dced6           [ 4]         sta PatsPtr+8
cd6c : a9a9             [ 2]         lda #lo(169)                             
cd6e : 18               [ 2]         clc                                      
cd6f : 65f1             [ 3]         adc z80_E
cd71 : 8d2cd3           [ 4]         sta OrnPtrs+1   
cd74 : a900             [ 2]         lda #00
cd76 : 65f2             [ 3]         adc z80_D
cd78 : 8d33d3           [ 4]         sta OrnPtrs+8
cd7b : a969             [ 2]         lda #lo(105)                             
cd7d : 18               [ 2]         clc                                      
cd7e : 65f1             [ 3]         adc z80_E
cd80 : 8de9cf           [ 4]         sta SamPtrs+1
cd83 : a900             [ 2]         lda #00
                                     ;INIT zeroes from VARS to VAR0END-1 (area
cd85 : a06c             [ 2]         ldy #(VAR0END-VARS-1)
cd87 :                       LOOP_LDIR 
cd87 : 99e6d9           [ 5]         sta VARS,y
cd8a : 88               [ 2]         dey         ; (carry not modified)
cd8b : 10fa             [ 3]         bpl LOOP_LDIR
                                     ; A = #00  
cd8d : 65f2             [ 3]         adc z80_D
cd8f : 8df0cf           [ 4]         sta SamPtrs+8                            
cd92 : a5ed             [ 3]         lda SETUP                                
cd94 : 297f             [ 2]         and #%01111111
cd96 : 85ed             [ 3]         sta SETUP
                                     
cd98 : a984             [ 2] 	lda #lo(T1_)
cd9a : 85f1             [ 3]         sta z80_E
cd9c : a9d9             [ 2]         lda #hi(T1_)
cd9e : 85f2             [ 3]         sta z80_D
cda0 : a901             [ 2]         lda #$01                                 
cda2 : 8d3dda           [ 4] 	sta DelyCnt                                     
cda5 : 8d01da           [ 4]         sta ANtSkCn
cda8 : 8d1eda           [ 4]         sta BNtSkCn
cdab : 8d3bda           [ 4]         sta CNtSkCn
cdae : a9f0             [ 2]         lda #$F0
cdb0 : 8d02da           [ 4] 	sta AVolume                                     
cdb3 : 8d1fda           [ 4] 	sta BVolume                                     
cdb6 : 8d3cda           [ 4] 	sta CVolume                                     
cdb9 : a980             [ 2]         lda #lo(EMPTYSAMORN)                     
cdbb : 85f3             [ 3]         sta z80_L
cdbd : 8d6ed6           [ 4]         sta AdInPtA+1
cdc0 : 8df3d9           [ 4]         sta AOrnPtr
cdc3 : 8d10da           [ 4]         sta BOrnPtr
cdc6 : 8d2dda           [ 4]         sta COrnPtr
cdc9 : 8df5d9           [ 4]         sta ASamPtr
cdcc : 8d12da           [ 4]         sta BSamPtr
cdcf : 8d2fda           [ 4]         sta CSamPtr
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank3.s -----------------------------------

cdd2 : a9d9             [ 2]         lda #hi(EMPTYSAMORN)
cdd4 : 85f4             [ 3]         sta z80_H
cdd6 : 8d72d6           [ 4] 	sta AdInPtA+5                                   
cdd9 : 8df4d9           [ 4] 	sta AOrnPtr+1                                   
cddc : 8d11da           [ 4] 	sta BOrnPtr+1                                   
cddf : 8d2eda           [ 4] 	sta COrnPtr+1                                   
cde2 : 8df6d9           [ 4] 	sta ASamPtr+1                                   
cde5 : 8d13da           [ 4] 	sta BSamPtr+1                                   
cde8 : 8d30da           [ 4] 	sta CSamPtr+1                                   
                             	    			                                         
                                     
cdeb : a00d             [ 2] 	ldy #13                    
cded : b1f5             [ 5]         lda (z80_IX),y
cdef : 38               [ 2]         sec                                      
cdf0 : e930             [ 2]         sbc #$30        ; ascii value - 30 = vers
cdf2 : 9004             [ 3] 	bcc L20         ; inverse (pour SUB aussi)      
cdf4 : c90a             [ 2] 	cmp #10                                         
cdf6 : 9002             [ 3] 	bcc L21         ; < 10                          
cdf8 :                       L20	    
cdf8 : a906             [ 2]         lda #6          ; version par defaut si i
cdfa :                       L21	    
cdfa : 8da1d1           [ 4]         sta Version+1                            
cdfd : 48               [ 3] 	pha             ; save version nb
cdfe : c904             [ 2]         cmp #4          ; version 4 ?            
ce00 : 9003             [ 3]         bcc s7b         ; < 4 (inverse carry)
ce02 : 18               [ 2]         clc
ce03 : 9001             [ 3]         bcc s8b         ; always
ce05 : 38               [ 2] s7b     sec
ce06 : a063             [ 2] s8b     ldy #99                 
ce08 : b1f5             [ 5]         lda (z80_IX),y  
ce0a : 2a               [ 2]         rol a           ; carry !                
ce0b : 2907             [ 2] 	and #7          ; clear all bit except 0-1-2    
ce0d : aa               [ 2]         tax             ; save A
                             ;NoteTableCreator (c) Ivan Roshin
                             ;A - NoteTableNumber*2+VersionForNoteTable
                             ;(xx1b - 3.xx..3.4r, xx0b - 3.4x..3.6x..VTII1.0)
                             
ce0e : a930             [ 2]      	lda #lo(NT_DATA)											    
ce10 : 85f3             [ 3]      	sta z80_L
ce12 : a9d9             [ 2]      	lda #hi(NT_DATA)
ce14 : 85f4             [ 3]      	sta z80_H
ce16 : a5f1             [ 3]      	lda z80_E													
ce18 : 85ef             [ 3]      	sta z80_C
ce1a : a5f2             [ 3]      	lda z80_D
ce1c : 85f0             [ 3]      	sta z80_B
ce1e : a900             [ 2]      	lda #00
ce20 : a8               [ 2]         tay           ; ldy #00	        
ce21 : 85f2             [ 3]      	sta z80_D
ce23 : 8a               [ 2]      	txa           ; restore A									
ce24 : 0a               [ 2]      	asl a															
ce25 : 85f1             [ 3]      	sta z80_E													
ce27 : 18               [ 2]      	clc                                        
ce28 : 65f3             [ 3]         adc z80_L
ce2a : 85f3             [ 3]         sta z80_L
ce2c : a5f2             [ 3]         lda z80_D
ce2e : 65f4             [ 3]         adc z80_H
ce30 : 85f4             [ 3]         sta z80_H													
ce32 : b1f3             [ 5]      	lda (z80_L),y												
ce34 : 85f1             [ 3]      	sta z80_E
ce36 : e6f3             [ 5]      	inc z80_L                                  
ce38 : d002             [ 3]         bne s9b
ce3a : e6f4             [ 5]         inc z80_H
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank3.s -----------------------------------

ce3c :                       s9b 
ce3c : 46f1             [ 5] 	lsr z80_E											    				     				
ce3e : b004             [ 3] 	bcs sb		; si c = 0 => $EA (NOP) / si c = 1 => $1
ce40 : a9ea             [ 2] sa  	lda #$EA 	; -> $EA (NOP)
ce42 : d002             [ 3]         bne sb1		; always	
ce44 : a918             [ 2] sb	lda #$18	; -> $18 (clc) 									
ce46 : 8db8ce           [ 4] sb1	sta L3		            									
ce49 : a5f1             [ 3] 	lda z80_E													
ce4b : a6f3             [ 3] 	ldx z80_L
ce4d : 85f3             [ 3] 	sta z80_L
ce4f : 86f1             [ 3] 	stx z80_E
ce51 : a5f2             [ 3] 	lda z80_D
ce53 : a6f4             [ 3] 	ldx z80_H
ce55 : 85f4             [ 3] 	sta z80_H
ce57 : 86f2             [ 3] 	stx z80_D
ce59 : 18               [ 2] 	clc                                             
ce5a : a5ef             [ 3]     	lda z80_C
ce5c : 65f3             [ 3]     	adc z80_L
ce5e : 85f3             [ 3]     	sta z80_L
ce60 : a5f0             [ 3]     	lda z80_B
ce62 : 65f4             [ 3]     	adc z80_H
ce64 : 85f4             [ 3]     	sta z80_H
                             
ce66 : b1f1             [ 5] 	lda (z80_E),y												
ce68 : 18               [ 2] 	clc                                             
ce69 : 6940             [ 2]         adc #lo(T_)
ce6b : 85ef             [ 3] 	sta z80_C
ce6d : 48               [ 3]         pha                                      
ce6e : 69d9             [ 2]         adc #hi(T_)                              
ce70 : 38               [ 2] 	sec                                             
ce71 : e5ef             [ 3]         sbc z80_C
ce73 : 85f0             [ 3]         sta z80_B                                
ce75 : 48               [ 3] 	pha
                             
ce76 : a943             [ 2] 	lda #lo(NT_)											
ce78 : 85f1             [ 3] 	sta z80_E
ce7a : 48               [ 3] 	pha															
ce7b : a9db             [ 2] 	lda #hi(NT_)
ce7d : 85f2             [ 3] 	sta z80_D
ce7f : 48               [ 3] 	pha
ce80 : a90c             [ 2] 	lda #12														
ce82 : 85f0             [ 3] 	sta z80_B
ce84 :                       L1	    
ce84 : a5ef             [ 3]         lda z80_C													
ce86 : 48               [ 3] 	pha
ce87 : a5f0             [ 3] 	lda z80_B
ce89 : 48               [ 3] 	pha
ce8a : b1f3             [ 5] 	lda (z80_L),y												
ce8c : 85ef             [ 3] 	sta z80_C
ce8e : e6f3             [ 5] 	inc z80_L                                       
ce90 : d002             [ 3]         bne sc
ce92 : e6f4             [ 5]         inc z80_H
ce94 :                       sc     
ce94 : a5f3             [ 3] 	lda z80_L												    
ce96 : 48               [ 3] 	pha
ce97 : a5f4             [ 3] 	lda z80_H
ce99 : 48               [ 3] 	pha
ce9a : b1f3             [ 5] 	lda (z80_L),y												
ce9c : 85f0             [ 3] 	sta z80_B
                             
ce9e : a5f1             [ 3] 	lda z80_E       												
cea0 : 85f3             [ 3] 	sta z80_L
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank3.s -----------------------------------

cea2 : 48               [ 3]         pha
cea3 : a5f2             [ 3] 	lda z80_D
cea5 : 85f4             [ 3] 	sta z80_H
cea7 : 48               [ 3]         pha
cea8 : a917             [ 2] 	lda #lo(23)		    										
ceaa : 85f1             [ 3] 	sta z80_E
ceac : a900             [ 2] 	lda #hi(23)
ceae : 85f2             [ 3] 	sta z80_D
ceb0 : a908             [ 2] 	lda #8														
ceb2 : 85f6             [ 3] 	sta z80_IX+1
                                     
ceb4 :                       L2	    
ceb4 : 46f0             [ 5]         lsr z80_B													
ceb6 : 66ef             [ 5] 	ror z80_C													
ceb8 :                       L3	    
ceb8 : ac                    	fcb $AC			; clc ($18) or NOP ($EA)
ceb9 : a5ef             [ 3] 	lda z80_C													
cebb : 6900             [ 2] 	adc #00  		    								    	
cebd : 91f3             [ 5] 	sta (z80_L),y												
cebf : e6f3             [ 5] 	inc z80_L                                       
cec1 : d002             [ 3]         bne sd
cec3 : e6f4             [ 5]         inc z80_H
cec5 :                       sd      
cec5 : a5f0             [ 3]         lda z80_B													
cec7 : 6900             [ 2] 	adc #00 													
cec9 : 91f3             [ 5] 	sta (z80_L),y												
cecb : 18               [ 2] 	clc                                             
cecc : a5f1             [ 3]         lda z80_E
cece : 65f3             [ 3]         adc z80_L
ced0 : 85f3             [ 3]         sta z80_L
ced2 : a5f2             [ 3]         lda z80_D
ced4 : 65f4             [ 3]         adc z80_H
ced6 : 85f4             [ 3]         sta z80_H
ced8 : c6f6             [ 5] 	dec z80_IX+1											    
ceda : d0d8             [ 3] 	bne L2														
                             
cedc : 68               [ 4] 	pla															
cedd : 85f2             [ 3] 	sta z80_D
cedf : 68               [ 4] 	pla         
cee0 : 6902             [ 2]         adc #02     
cee2 : 85f1             [ 3]         sta z80_E   
cee4 : 9002             [ 3]         bcc sf      
cee6 : e6f2             [ 5]         inc z80_D 
                             
cee8 :                       sf     
cee8 : 68               [ 4] 	pla												    	    
cee9 : 85f4             [ 3] 	sta z80_H
ceeb : 68               [ 4] 	pla
ceec : 85f3             [ 3] 	sta z80_L
ceee : e6f3             [ 5] 	inc z80_L                                       
cef0 : d002             [ 3]         bne sg
cef2 : e6f4             [ 5]         inc z80_H
cef4 :                       sg     
cef4 : 68               [ 4] 	pla												    	    
cef5 : 85f0             [ 3] 	sta z80_B
cef7 : 68               [ 4] 	pla
cef8 : 85ef             [ 3] 	sta z80_C
cefa : c6f0             [ 5] 	dec z80_B													
cefc : f003             [ 4] 	beq sg1
cefe : 4c84ce           [ 3]         jmp L1
cf01 :                       sg1        
cf01 : 68               [ 4] 	pla															
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank3.s -----------------------------------

cf02 : 85f4             [ 3] 	sta z80_H
cf04 : 68               [ 4] 	pla
cf05 : 85f3             [ 3] 	sta z80_L
cf07 : 68               [ 4] 	pla															
cf08 : 85f2             [ 3] 	sta z80_D
cf0a : 68               [ 4] 	pla
cf0b : 85f1             [ 3] 	sta z80_E
                                     								
cf0d : c94c             [ 2] 	cmp #lo(TCOLD_1)		        								
cf0f : d005             [ 3]         bne CORR_1													
cf11 : a9fd             [ 2] 	lda #$FD													
cf13 : 8d71db           [ 4] 	sta NT_+$2E									 				
                             
cf16 :                       CORR_1	
cf16 : 18               [ 2]         clc                                      
cf17 : b1f1             [ 5]         lda (z80_E),y																										
cf19 : f037             [ 3] 	beq TC_EXIT													
cf1b : 6a               [ 2] 	ror a															
cf1c : 08               [ 3] 	php			    ; save carry														
cf1d : 0a               [ 2] 	asl a															
cf1e : 85ef             [ 3] 	sta z80_C													
cf20 : 18               [ 2] 	clc                                             
cf21 : 65f3             [ 3]         adc z80_L
cf23 : 85f3             [ 3]         sta z80_L
cf25 : a5f0             [ 3]         lda z80_B
cf27 : 65f4             [ 3]         adc z80_H
cf29 : 85f4             [ 3]         sta z80_H                                
cf2b : 28               [ 4] 	plp             ; restore carry (du ror)	       
cf2c : 9007             [ 3] 	bcc CORR_2                                      
cf2e : b1f3             [ 5] 	lda (z80_L),y												
cf30 : 38               [ 2] 	sec															
cf31 : e902             [ 2] 	sbc #$02
cf33 : 91f3             [ 5] 	sta (z80_L),y
                             	
cf35 :                       CORR_2	
cf35 : b1f3             [ 5]         lda (z80_L),y												
cf37 : 18               [ 2] 	clc			
cf38 : 6901             [ 2] 	adc #$01
cf3a : 91f3             [ 5] 	sta (z80_L),y
cf3c : 38               [ 2]         sec   		                                 
cf3d : a5f3             [ 3] 	lda z80_L                                       
cf3f : e5ef             [ 3] 	sbc z80_C
cf41 : 85f3             [ 3] 	sta z80_L
cf43 : a5f4             [ 3] 	lda z80_H
cf45 : e5f0             [ 3] 	sbc z80_B
cf47 : 85f4             [ 3] 	sta z80_H
cf49 : e6f1             [ 5] 	inc z80_E                                       
cf4b : d002             [ 3]         bne sh
cf4d : e6f2             [ 5]         inc z80_D
cf4f :                       sh     
cf4f : 4c16cf           [ 3] 	jmp CORR_1												    
                             
cf52 :                       TC_EXIT
cf52 : 68               [ 4] 	pla			; restore version number						
                             
                             ;VolTableCreator (c) Ivan Roshin
                             ;A - VersionForVolumeTable (0..4 - 3.xx..3.4x;
                             ;5.. - 3.5x..3.6x..VTII1.0)
                             
cf53 : c905             [ 2] 	cmp #5		; version 										
cf55 : a911             [ 2] 	lda #lo($11)                                    
cf57 : 85f3             [ 3] 	sta z80_L
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank3.s -----------------------------------

cf59 : a900             [ 2]         lda #hi($11)													
cf5b : 85f4             [ 3] 	sta z80_H													
cf5d : 85f2             [ 3] 	sta z80_D                                       
cf5f : 85f1             [ 3] 	sta z80_E													
cf61 : a92a             [ 2] 	lda #$2A	; ($2A = rol A)								    
cf63 : b008             [ 3] 	bcs M1		; CP -> carry inverse (CP 5)					
cf65 : c6f3             [ 5] 	dec z80_L													
cf67 : a5f3             [ 3] 	lda z80_L													
cf69 : 85f1             [ 3] 	sta z80_E
cf6b : a9ea             [ 2] 	lda #$EA	; ($EA = NOP)			    					
cf6d :                       M1          
cf6d : 8d94cf           [ 4]         sta M2														
cf70 : a953             [ 2] 	lda #lo(VT_+16)												
cf72 : 85f5             [ 3] 	sta z80_IX
cf74 : a9da             [ 2] 	lda #hi(VT_+16)
cf76 : 85f6             [ 3] 	sta z80_IX+1
cf78 : a910             [ 2] 	lda #$10													
cf7a : 85ef             [ 3] 	sta z80_C
                             
cf7c :                       INITV2  
cf7c : 18               [ 2]         clc
cf7d : a5f3             [ 3]         lda z80_L													
cf7f : 48               [ 3] 	pha
cf80 : 65f1             [ 3]         adc z80_E
cf82 : 85f1             [ 3]         sta z80_E
cf84 : a5f4             [ 3] 	lda z80_H
cf86 : 48               [ 3] 	pha
cf87 : 65f2             [ 3]         adc z80_D
cf89 : 85f2             [ 3]         sta z80_D
                             	    
cf8b : a900             [ 2]         lda #00														
cf8d : 85f3             [ 3] 	sta z80_L
cf8f : 85f4             [ 3] 	sta z80_H
cf91 : 18               [ 2]         clc
cf92 :                       INITV1  
cf92 : a5f3             [ 3]         lda z80_L													
cf94 :                       M2          
cf94 : ac                            fcb $AC	    ; $EA (nop) ou $2A (rol)
cf95 : a5f4             [ 3] 	lda z80_H													
cf97 : 6900             [ 2] 	adc #00			; + carry                             
cf99 : 91f5             [ 5] 	sta (z80_IX),y												
cf9b : e6f5             [ 5] 	inc z80_IX                                      
cf9d : d002             [ 3]         bne si
cf9f : e6f6             [ 5]         inc z80_IX+1
cfa1 :                       si     
cfa1 : 18               [ 2] 	clc                                             
cfa2 : a5f1             [ 3]         lda z80_E
cfa4 : 65f3             [ 3]         adc z80_L
cfa6 : 85f3             [ 3]         sta z80_L
cfa8 : a5f2             [ 3]         lda z80_D
cfaa : 65f4             [ 3]         adc z80_H
cfac : 85f4             [ 3]         sta z80_H
cfae : e6ef             [ 5] 	inc z80_C												    
cfb0 : a5ef             [ 3] 	lda z80_C													
cfb2 : 290f             [ 2] 	and #15														
cfb4 : 18               [ 2]         clc         ; carry cleared by and
cfb5 : d0db             [ 3] 	bne INITV1													
                             
cfb7 : 68               [ 4] 	pla															
cfb8 : 85f4             [ 3] 	sta z80_H
cfba : 68               [ 4] 	pla
cfbb : 85f3             [ 3] 	sta z80_L
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank3.s -----------------------------------

cfbd : a5f1             [ 3] 	lda z80_E													
cfbf : c977             [ 2] 	cmp #$77													
cfc1 : d002             [ 3] 	bne M3														
cfc3 : e6f1             [ 5] 	inc z80_E													
cfc5 :                       M3      
cfc5 : 18               [ 2]         clc                                      
cfc6 : a5ef             [ 3]         lda z80_C																								
cfc8 : d0b2             [ 3] 	bne	INITV2													
                             
cfca : 4c41d8           [ 3] 	jmp ROUT													
                             ; ===============================================
                             ; Pattern Decoder
cfcd :                       PD_OrSm	
cfcd : a014             [ 2]         ldy #Env_En     										    
cfcf : a900             [ 2] 	lda #00
cfd1 : 91f5             [ 5] 	sta (z80_IX),y
cfd3 : 201ed3           [ 6] 	jsr SETORN													
cfd6 : a000             [ 2] 	ldy #00					; lda ($AC,x)									
cfd8 : b1ef             [ 5] 	lda (z80_C),y
cfda : e6ef             [ 5] 	inc z80_C                                       
cfdc : d002             [ 3]         bne sj
cfde : e6f0             [ 5]         inc z80_B
cfe0 :                       sj     
cfe0 : 4a               [ 2] 	lsr a 													    
cfe1 : 9002             [ 3]         bcc sj1
cfe3 : 0980             [ 2]         ora #$80
cfe5 :                       sj1     
cfe5 :                       PD_SAM	
cfe5 : 0a               [ 2]         asl a 											    		
cfe6 :                       PD_SAM_	
cfe6 : 85f1             [ 3]         sta z80_E													
cfe8 :                       SamPtrs		
cfe8 : a9ac             [ 2] 	lda #$AC				
cfea : 18               [ 2]         clc
cfeb : 65f1             [ 3]         adc z80_E
cfed : 85f3             [ 3] 	sta z80_L
cfef : a9ac             [ 2] 	lda #$AC
cff1 : 6900             [ 2]         adc #00
cff3 : 85f4             [ 3] 	sta z80_H
                             
cff5 : a000             [ 2]         ldy #00
cff7 : b1f3             [ 5] 	lda (z80_L),y
cff9 :                       MODADDR		
cff9 : 69ac             [ 2] 	adc #$AC												
cffb : aa               [ 2] 	tax             ; save
cffc : c8               [ 2] 	iny                                             
cffd : b1f3             [ 5] 	lda (z80_L),y
cfff : 69ac             [ 2]         adc #$AC								    			
                             
d001 : a010             [ 2] 	ldy #SamPtr+1         										
d003 : 91f5             [ 5] 	sta (z80_IX),y
d005 : 88               [ 2] 	dey															
d006 : 8a               [ 2] 	txa         
d007 : 91f5             [ 5] 	sta (z80_IX),y
d009 : 4c7ed0           [ 3] 	jmp PD_LOOP													
                             
d00c :                       PD_VOL	
d00c : 0a               [ 2]         asl a															
d00d : 6900             [ 2]         adc #00
d00f : 0a               [ 2] 	asl a															
d010 : 6900             [ 2]         adc #00
d012 : 0a               [ 2] 	asl a															
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank3.s -----------------------------------

d013 : 6900             [ 2]         adc #00
d015 : 0a               [ 2] 	asl a															
d016 : 6900             [ 2]         adc #00
d018 : a01c             [ 2] 	ldy #Volume         										
d01a : 91f5             [ 5] 	sta (z80_IX),y
d01c : 4c82d0           [ 3]         jmp PD_LP2													
                             	
d01f :                       PD_EOff	
d01f : a014             [ 2]         ldy #Env_En		    	        							
d021 : 91f5             [ 5] 	sta (z80_IX),y
d023 : a000             [ 2] 	ldy #PsInOr   			    					    		
d025 : 91f5             [ 5] 	sta (z80_IX),y
d027 : 4c82d0           [ 3] 	jmp PD_LP2													
                             
d02a :                       PD_SorE	
d02a : 38               [ 2]         sec															
d02b : e901             [ 2] 	sbc #01
d02d : 85ee             [ 3]         sta z80_A
d02f : d011             [ 3] 	bne PD_ENV													
d031 : a000             [ 2] 	ldy #00			        ; lda ($AC,x)												
d033 : b1ef             [ 5] 	lda (z80_C),y
d035 : e6ef             [ 5] 	inc z80_C                                       
d037 : d002             [ 3]         bne sl
d039 : e6f0             [ 5]         inc z80_B
d03b :                       sl     
d03b : a011             [ 2] 	ldy #NNtSkp    		        								
d03d : 91f5             [ 5] 	sta (z80_IX),y
d03f : 4c82d0           [ 3]         jmp PD_LP2													
                             
d042 :                       PD_ENV	
d042 : 20e1d2           [ 6]         jsr SETENV													
d045 : 4c82d0           [ 3] 	jmp PD_LP2													
                             
d048 :                       PD_ORN	
d048 : 201ed3           [ 6]         jsr SETORN													
d04b : 4c7ed0           [ 3] 	jmp PD_LOOP													
                             
d04e :                       PD_ESAM	
d04e : a014             [ 2]         ldy #Env_En	             									
d050 : 91f5             [ 5] 	sta (z80_IX),y
d052 : a000             [ 2] 	ldy #PsInOr	    		        							
d054 : 91f5             [ 5] 	sta (z80_IX),y
d056 : a5ee             [ 3] 	lda z80_A           
d058 : f003             [ 3]         beq sm														
d05a : 20e1d2           [ 6] 	jsr SETENV
d05d : a000             [ 2] sm	ldy #00			    ; lda ($AC,x)												
d05f : b1ef             [ 5] 	lda (z80_C),y
d061 : e6ef             [ 5] 	inc z80_C                                       
d063 : d002             [ 3]         bne sn
d065 : e6f0             [ 5]         inc z80_B
d067 :                       sn     
d067 : 4ce6cf           [ 3]         jmp PD_SAM_								     			    
                             
d06a :                       PTDECOD 
d06a : a012             [ 2]         ldy #Note   							    				
d06c : b1f5             [ 5] 	lda (z80_IX),y
d06e : 8d63d1           [ 4] 	sta PrNote+1												
d071 : a006             [ 2] 	ldy #CrTnSl    		    						    		
d073 : b1f5             [ 5] 	lda (z80_IX),y                                  
d075 : 8da9d1           [ 4] 	sta PrSlide+1												
d078 : c8               [ 2]         iny 
d079 : b1f5             [ 5] 	lda (z80_IX),y											
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank3.s -----------------------------------

d07b : 8db0d1           [ 4] 	sta PrSlide+8
                             
d07e :                       PD_LOOP	
d07e : a910             [ 2]         lda #$10													
d080 : 85f1             [ 3] 	sta z80_E
                             	
d082 :                       PD_LP2	
d082 : a000             [ 2]         ldy #00			    ; lda ($AC,x)												
d084 : b1ef             [ 5] 	lda (z80_C),y
d086 : e6ef             [ 5] 	inc z80_C                                       
d088 : d002             [ 3]         bne so
d08a : e6f0             [ 5]         inc z80_B
d08c :                       so
d08c : 18               [ 2] 	clc															
d08d : 6910             [ 2] 	adc #$10
d08f : 9005             [ 3] 	bcc so1
d091 : 85ee             [ 3]         sta z80_A            
d093 : 4ccdcf           [ 3]         jmp PD_OrSm
d096 : 6920             [ 2] so1     adc #$20                                 
d098 : d003             [ 3] 	bne so11													
d09a : 4c15d1           [ 3]         jmp PD_FIN
d09d : 9003             [ 3] so11	bcc so2													    
d09f : 4ce5cf           [ 3]         jmp PD_SAM
d0a2 : 6910             [ 2] so2	adc #$10                                     
d0a4 : f04b             [ 3] 	beq PD_REL													
d0a6 : 9003             [ 3] 	bcc so3 													
d0a8 : 4c0cd0           [ 3]         jmp PD_VOL
d0ab : 6910             [ 2] so3	adc #$10                                     
d0ad : d003             [ 3] 	bne so4										    			
d0af : 4c1fd0           [ 3]         jmp PD_EOff
d0b2 : 9003             [ 3] so4	bcc	so5												    	
d0b4 : 4c2ad0           [ 3] 	jmp PD_SorE
d0b7 : 6960             [ 2] so5     adc #96                                  
d0b9 : b041             [ 3] 	bcs PD_NOTE													
d0bb : 6910             [ 2] 	adc #$10                                        
d0bd : 9005             [ 3] 	bcc so6
d0bf : 85ee             [ 3]         sta z80_A												    	
d0c1 : 4c48d0           [ 3]         jmp PD_ORN													
d0c4 : 6920             [ 2] so6	adc #$20                                     
d0c6 : b023             [ 3] 	bcs PD_NOIS													 														
d0c8 : 6910             [ 2] 	adc #$10                                        
d0ca : 9005             [ 3]         bcc so7
d0cc : 85ee             [ 3]         sta z80_A												    	
d0ce : 4c4ed0           [ 3]         jmp PD_ESAM
d0d1 : 0a               [ 2] so7	asl a															
d0d2 : 85f1             [ 3] 	sta z80_E
d0d4 : 18               [ 2]         clc                                      
d0d5 : 696d             [ 2]         adc #lo(SPCCOMS+$FF20)							        
d0d7 : 85f3             [ 3]         sta z80_L
d0d9 : a9d2             [ 2] 	lda #hi(SPCCOMS+$FF20)
d0db : 6900             [ 2]         adc #00
d0dd : 85f4             [ 3] 	sta z80_H
                                     ; on doit inverser le PUSH car l'adresse 
d0df : a001             [ 2]         ldy #01	
d0e1 : b1f3             [ 5] 	lda (z80_L),y												
d0e3 : 48               [ 3] 	pha             ; push D
d0e4 : 88               [ 2] 	dey                                             
d0e5 : b1f3             [ 5] 	lda (z80_L),y										        
d0e7 : 48               [ 3] 	pha             ; push E
d0e8 : 4c7ed0           [ 3] 	jmp PD_LOOP													
                             
d0eb :                       PD_NOIS									
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank3.s -----------------------------------

d0eb : 8d41da           [ 4]         sta Ns_Base                              
d0ee : 4c82d0           [ 3] 	jmp PD_LP2													
                             
d0f1 :                       PD_REL	
d0f1 : a015             [ 2]         ldy #Flags   								    			
d0f3 : b1f5             [ 5] 	lda (z80_IX),y
d0f5 : 29fe             [ 2] 	and #%11111110
d0f7 : 91f5             [ 5] 	sta (z80_IX),y
d0f9 : 4c08d1           [ 3] 	jmp PD_RES													
                             	
d0fc :                       PD_NOTE	
d0fc : a012             [ 2]         ldy #Note    	 				    						
d0fe : 91f5             [ 5] 	sta (z80_IX),y	
d100 : a015             [ 2] 	ldy #Flags      											
d102 : b1f5             [ 5] 	lda (z80_IX),y
d104 : 0901             [ 2] 	ora #%00000001
d106 : 91f5             [ 5] 	sta (z80_IX),y
                             	    													
d108 :                       PD_RES												
d108 : a900             [ 2]         lda #00	
d10a : 85f3             [ 3]         sta z80_L
d10c : 85f4             [ 3] 	sta z80_H
d10e : a00b             [ 2] 	ldy #11
d110 :                       bres
d110 : 91f5             [ 5] 	sta (z80_IX),y          
d112 : 88               [ 2] 	dey
d113 : 10fb             [ 3]         bpl bres
d115 :                       PD_FIN	
d115 : a011             [ 2] 	ldy #NNtSkp     						    				
d117 : b1f5             [ 5] 	lda (z80_IX),y
d119 : a01b             [ 2] 	ldy #NtSkCn     		    								
d11b : 91f5             [ 5] 	sta (z80_IX),y
d11d : 60               [ 6] 	rts 														
                             
d11e :                       C_PORTM
d11e : a015             [ 2] 	ldy #Flags  												
d120 : b1f5             [ 5] 	lda (z80_IX),y
d122 : 29fb             [ 2] 	and #%11111011
d124 : 91f5             [ 5] 	sta (z80_IX),y
d126 : a000             [ 2] 	ldy #00			    ; lda ($AC,x)												
d128 : b1ef             [ 5] 	lda (z80_C),y
d12a : a016             [ 2]         ldy #TnSlDl     				    			    		
d12c : 91f5             [ 5] 	sta (z80_IX),y
d12e : a005             [ 2]         ldy #TSlCnt	        			    						
d130 : 91f5             [ 5] 	sta (z80_IX),y
                             
d132 : 18               [ 2]         clc
d133 : a5ef             [ 3]         lda z80_C
d135 : 6903             [ 2]         adc #03
d137 : 85ef             [ 3]         sta z80_C
d139 : 9002             [ 3]         bcc st
d13b : e6f0             [ 5]         inc z80_B
d13d :                       st     
d13d : a943             [ 2] 	lda #lo(NT_)			; OPT										
d13f : 85f1             [ 3] 	sta z80_E
d141 : a9db             [ 2] 	lda #hi(NT_)           ; OPT
d143 : 85f2             [ 3] 	sta z80_D
d145 : a012             [ 2] 	ldy #Note	        										
d147 : b1f5             [ 5] 	lda (z80_IX),y
d149 : a013             [ 2] 	ldy #SlToNt         										
d14b : 91f5             [ 5] 	sta (z80_IX),y
d14d : 0a               [ 2] 	asl a																																											
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank3.s -----------------------------------

d14e : 18               [ 2] 	clc                                             
d14f : 65f1             [ 3]         adc z80_E           ; OPT
d151 : 85f3             [ 3]         sta z80_L
d153 : a5f2             [ 3]         lda z80_D           ; OPT
d155 : 6900             [ 2]         adc #00           
d157 : 85f4             [ 3]         sta z80_H
d159 : a000             [ 2]         ldy #00	
d15b : b1f3             [ 5] 	lda (z80_L),y 												
d15d : 48               [ 3] 	pha	
d15e : c8               [ 2] 	iny                                             
d15f : b1f3             [ 5] 	lda (z80_L),y 												
d161 : 48               [ 3] 	pha
d162 :                       PrNote	
d162 : a93e             [ 2]         lda #$3E													
d164 : a012             [ 2] 	ldy #Note   					    						
d166 : 91f5             [ 5] 	sta (z80_IX),y
d168 : 0a               [ 2] 	asl a																																			
d169 : 18               [ 2] 	clc                                             
d16a : 65f1             [ 3]         adc z80_E           ; OPT
d16c : 85f3             [ 3]         sta z80_L
d16e : a5f2             [ 3]         lda z80_D           ; OPT
d170 : 6900             [ 2]         adc #00
d172 : 85f4             [ 3]         sta z80_H
d174 : a000             [ 2] 	ldy #00
d176 : b1f3             [ 5]         lda (z80_L),y												
d178 : 85f1             [ 3] 	sta z80_E
d17a : c8               [ 2] 	iny                                             
d17b : b1f3             [ 5] 	lda (z80_L),y											    
d17d : 85f2             [ 3] 	sta z80_D
d17f : a019             [ 2] 	ldy #TnDelt 
d181 : 68               [ 4]         pla															
d182 : 85f4             [ 3] 	sta z80_H
d184 : 68               [ 4] 	pla       
d185 : 38               [ 2] 	sec                                             
d186 : e5f1             [ 3]         sbc z80_E
d188 : 85f3             [ 3]         sta z80_L
d18a : 91f5             [ 5]         sta (z80_IX),y
d18c : a5f4             [ 3]         lda z80_H
d18e : e5f2             [ 3]         sbc z80_D
d190 : 85f4             [ 3]         sta z80_H 
d192 : c8               [ 2]         iny                                      
d193 : 91f5             [ 5]         sta (z80_IX),y
d195 : a006             [ 2] 	ldy #CrTnSl                                     
d197 : b1f5             [ 5]         lda (z80_IX),y
d199 : 85f1             [ 3]         sta z80_E
d19b : c8               [ 2] 	iny                                             
d19c : b1f5             [ 5]         lda (z80_IX),y
d19e : 85f2             [ 3]         sta z80_D
d1a0 :                       Version
d1a0 : a93e             [ 2] 	lda #$3E                                        
d1a2 : c906             [ 2] 	cmp #6                                          
d1a4 : 900f             [ 3] 	bcc OLDPRTM     ; < 6
d1a6 : a006             [ 2]         ldy #CrTnSl                              
d1a8 :                       PrSlide	
d1a8 : a9ac             [ 2]         lda #$AC                                 
d1aa : 85f1             [ 3]         sta z80_E
d1ac : 91f5             [ 5]         sta (z80_IX),y
d1ae : c8               [ 2]         iny
d1af : a9ac             [ 2]         lda #$AC
d1b1 : 85f2             [ 3]         sta z80_D
d1b3 : 91f5             [ 5]         sta (z80_IX),y
                             	                                                
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank3.s -----------------------------------

d1b5 :                       OLDPRTM	
d1b5 : a000             [ 2]         ldy #00                                  
d1b7 : b1ef             [ 5]         lda (z80_C),y
d1b9 : c8               [ 2]         iny                                      
d1ba : 85f7             [ 3]         sta z80_AP                               
d1bc : b1ef             [ 5] 	lda (z80_C),y                                   
d1be : 85ee             [ 3] 	sta z80_A
d1c0 : a5ef             [ 3]         lda z80_C
d1c2 : 18               [ 2]         clc
d1c3 : 6902             [ 2]         adc #02
d1c5 : 85ef             [ 3]         sta z80_C
d1c7 : 9002             [ 3]         bcc sw
d1c9 : e6f0             [ 5]         inc z80_B
d1cb :                       sw
d1cb : a5ee             [ 3] 	lda z80_A                                       
d1cd : f010             [ 3] 	beq NOSIG                                       
d1cf : a5f1             [ 3] 	lda z80_E													
d1d1 : a6f3             [ 3] 	ldx z80_L
d1d3 : 85f3             [ 3] 	sta z80_L
d1d5 : 86f1             [ 3] 	stx z80_E
d1d7 : a5f2             [ 3] 	lda z80_D
d1d9 : a6f4             [ 3] 	ldx z80_H
d1db : 85f4             [ 3] 	sta z80_H
d1dd : 86f2             [ 3] 	stx z80_D
d1df :                       NOSIG	
d1df : 38               [ 2]         sec                            
d1e0 : a5f3             [ 3]         lda z80_L
d1e2 : e5f1             [ 3]         sbc z80_E
d1e4 : 85f3             [ 3]         sta z80_L
d1e6 : a5f4             [ 3]         lda z80_H
d1e8 : e5f2             [ 3]         sbc z80_D
d1ea : 85f4             [ 3]         sta z80_H
d1ec : 1015             [ 4] 	bpl SET_STP                                     
d1ee : a5ee             [ 3] 	lda z80_A                                       
d1f0 : 49ff             [ 2]         eor #$FF                                 
d1f2 : a6f7             [ 3]         ldx z80_AP                               
d1f4 : 85f7             [ 3]         sta z80_AP
d1f6 : 8a               [ 2]         txa
d1f7 : 49ff             [ 2] 	eor #$FF                                        
d1f9 : 18               [ 2]         clc             
d1fa : 6901             [ 2]         adc #01                                  
d1fc : aa               [ 2]         tax                                      
d1fd : a5f7             [ 3]         lda z80_AP
d1ff : 86f7             [ 3]         stx z80_AP
d201 : 85ee             [ 3]         sta z80_A
d203 :                       SET_STP	
d203 : a018             [ 2]         ldy #(TSlStp+1)                          
d205 : a5ee             [ 3]         lda z80_A
d207 : 91f5             [ 5]         sta (z80_IX),y                           
d209 : aa               [ 2]         tax                                      
d20a : a5f7             [ 3]         lda z80_AP
d20c : 86f7             [ 3]         stx z80_AP
d20e : 85ee             [ 3]         sta z80_A
d210 : 88               [ 2] 	    dey                       
d211 : 91f5             [ 5]         sta (z80_IX),y
d213 : a00a             [ 2]         ldy #COnOff                              
d215 : a900             [ 2]         lda #00
d217 : 91f5             [ 5]         sta (z80_IX),y
d219 : 60               [ 6] 	rts                                             
                             
d21a :                       C_GLISS	
d21a : a015             [ 2]         ldy #Flags       											
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank3.s -----------------------------------

d21c : b1f5             [ 5] 	lda (z80_IX),y
d21e : 0904             [ 2] 	ora #%00000100
d220 : 91f5             [ 5] 	sta (z80_IX),y
d222 : a000             [ 2] 	ldy #00                 ; lda ($AC,x)	          
d224 : b1ef             [ 5]         lda (z80_C),y
d226 : 85ee             [ 3]         sta z80_A
d228 : e6ef             [ 5]         inc z80_C                                
d22a : d002             [ 3]         bne sy
d22c : e6f0             [ 5]         inc z80_B
d22e :                       sy     
d22e : a016             [ 2] 	ldy #TnSlDl                                     
d230 : 91f5             [ 5]         sta (z80_IX),y
d232 : 18               [ 2] 	clc                                             
d233 : a5ee             [ 3]         lda z80_A                                
d235 : d00d             [ 3] 	bne GL36                                        
d237 : ada1d1           [ 4] 	lda Version+1                                   
d23a : c907             [ 2] 	cmp #7                                          
d23c : b004             [ 3] 	bcs sz                                          
d23e : a900             [ 2]         lda #00         ; si A < 7  , A = 0 ($FF+
d240 : f002             [ 3]         beq saa
d242 : a901             [ 2] sz      lda #01         ; si A >= 7 , A = 1 ($00+
d244 :                       saa	    
d244 :                       GL36	
d244 : a005             [ 2]         ldy #TSlCnt                              
d246 : 91f5             [ 5] 	sta (z80_IX),y                                  
d248 : a000             [ 2]         ldy #00                                  
d24a : b1ef             [ 5]         lda (z80_C),y
d24c : 85f7             [ 3]         sta z80_AP
d24e : c8               [ 2]         iny
d24f : b1ef             [ 5]         lda (z80_C),y
d251 : 85ee             [ 3]         sta z80_A
d253 : 18               [ 2]         clc
d254 : a5ef             [ 3]         lda z80_C
d256 : 6902             [ 2]         adc #02
d258 : 85ef             [ 3]         sta z80_C                                
d25a : 9002             [ 3]         bcc sac
d25c : e6f0             [ 5]         inc z80_B
d25e :                       sac     
d25e : 4c03d2           [ 3] 	jmp SET_STP                                     
                             
d261 :                       C_SMPOS	
d261 : a000             [ 2]         ldy #00                  ; lda ($AC,x)	  
d263 : b1ef             [ 5]         lda (z80_C),y
d265 : e6ef             [ 5]         inc z80_C                                
d267 : d002             [ 3]         bne sad
d269 : e6f0             [ 5]         inc z80_B
d26b :                       sad     
d26b : a001             [ 2] 	ldy #PsInSm                                     
d26d : 91f5             [ 5]         sta (z80_IX),y
d26f : 60               [ 6] 	rts                                             
                             
d270 :                       C_ORPOS	
d270 : a000             [ 2]         ldy #00                 ; lda ($AC,x)	   
d272 : b1ef             [ 5]         lda (z80_C),y
d274 : e6ef             [ 5]         inc z80_C                                
d276 : d002             [ 3]         bne sae
d278 : e6f0             [ 5]         inc z80_B
d27a :                       sae     
d27a : a000             [ 2] 	ldy #PsInOr                                     
d27c : 91f5             [ 5]         sta (z80_IX),y
d27e : 60               [ 6] 	rts                                             
                                 
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank3.s -----------------------------------

d27f :                       C_VIBRT	
d27f : a000             [ 2]         ldy #00                 ; lda ($AC,x)	   
d281 : b1ef             [ 5]         lda (z80_C),y
d283 : e6ef             [ 5]         inc z80_C                                
d285 : d002             [ 3]         bne saf
d287 : e6f0             [ 5]         inc z80_B
d289 :                       saf     
d289 : a00b             [ 2] 	ldy #OnOffD                                     
d28b : 91f5             [ 5]         sta (z80_IX),y
d28d : a00a             [ 2]         ldy #COnOff                              
d28f : 91f5             [ 5]         sta (z80_IX),y
d291 : a000             [ 2] 	ldy #00                 ; lda ($AC,x)	          
d293 : b1ef             [ 5]         lda (z80_C),y
d295 : e6ef             [ 5]         inc z80_C                                
d297 : d002             [ 3]         bne sag
d299 : e6f0             [ 5]         inc z80_B
d29b : a00c             [ 2] sag     ldy #OffOnD                              
d29d : 91f5             [ 5]         sta (z80_IX),y
d29f : a900             [ 2]         lda #00                                  
d2a1 : a005             [ 2]         ldy #TSlCnt                              
d2a3 : 91f5             [ 5]         sta (z80_IX),y
d2a5 : a006             [ 2] 	ldy #CrTnSl                                     
d2a7 : 91f5             [ 5]         sta (z80_IX),y
d2a9 : c8               [ 2] 	iny                                             
d2aa : 91f5             [ 5]         sta (z80_IX),y
d2ac : 60               [ 6] 	rts                                             
                             
d2ad :                       C_ENGLS	
d2ad : a000             [ 2]         ldy #00                                  
d2af : b1ef             [ 5]         lda (z80_C),y
d2b1 : 8d2ed8           [ 4]         sta Env_Del+1                            
d2b4 : 8d40da           [ 4] 	sta CurEDel
d2b7 : c8               [ 2]         iny
d2b8 : b1ef             [ 5]         lda (z80_C),y
d2ba : 85f3             [ 3]         sta z80_L                                
d2bc : 8d33d8           [ 4]         sta ESldAdd+1
d2bf : c8               [ 2]         iny
d2c0 : b1ef             [ 5]         lda (z80_C),y
d2c2 : 85f4             [ 3]         sta z80_H                                
d2c4 : 8d3bd8           [ 4] 	sta ESldAdd+9
d2c7 : 18               [ 2]         clc
d2c8 : a5ef             [ 3]         lda z80_C 
d2ca : 6903             [ 2]         adc #03
d2cc : 85ef             [ 3]         sta z80_C
d2ce : 9002             [ 3]         bcc sah
d2d0 : e6f0             [ 5]         inc z80_B
d2d2 :                       sah	                                             
d2d2 : 60               [ 6] 	rts                                             
                             
d2d3 :                       C_DELAY	
d2d3 : a000             [ 2]         ldy #00                 ; lda ($AC,x)	   
d2d5 : b1ef             [ 5]         lda (z80_C),y
d2d7 : e6ef             [ 5]         inc z80_C                                
d2d9 : d002             [ 3]         bne sak
d2db : e6f0             [ 5]         inc z80_B
d2dd :                       sak
d2dd : 8d69d7           [ 4] 	sta Delay+1                                     
d2e0 : 60               [ 6] 	rts                                             
                             
d2e1 :                       SETENV	
d2e1 : a014             [ 2]         ldy #Env_En                              
d2e3 : a5f1             [ 3]         lda z80_E
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank3.s -----------------------------------

d2e5 : 91f5             [ 5]         sta (z80_IX),y
d2e7 : a5ee             [ 3]         lda z80_A                ; OPT (inverser 
d2e9 : 8d50da           [ 4]         sta AYREGS+EnvTp
d2ec : a000             [ 2] 	ldy #00                                         
d2ee : b1ef             [ 5]         lda (z80_C),y           
d2f0 : 85f4             [ 3] 	sta z80_H                                       
d2f2 : 8d52da           [ 4]         sta EnvBase+1                            
d2f5 : c8               [ 2] 	iny                                             
d2f6 : b1ef             [ 5]         lda (z80_C),y
d2f8 : 85f3             [ 3] 	sta z80_L                                       
d2fa : 8d51da           [ 4] 	sta EnvBase
d2fd : a5ef             [ 3]         lda z80_C
d2ff : 18               [ 2]         clc
d300 : 6902             [ 2]         adc #02
d302 : 85ef             [ 3]         sta z80_C
d304 : 9002             [ 3]         bcc sam
d306 : e6f0             [ 5]         inc z80_B                                
d308 : a900             [ 2] sam	lda #00                                      
d30a : a000             [ 2] 	ldy #PsInOr                                     
d30c : 91f5             [ 5]         sta (z80_IX),y
d30e : 8d40da           [ 4] 	sta CurEDel                                     
d311 : 85f4             [ 3] 	sta z80_H                                       
d313 : 8d3fda           [ 4]         sta CurESld+1                            
d316 : 85f3             [ 3] 	sta z80_L                                       
d318 : 85ee             [ 3]         sta z80_A
d31a : 8d3eda           [ 4] 	sta CurESld                                     
d31d :                       C_NOP	
d31d : 60               [ 6]         rts                                      
                             
d31e :                       SETORN	
d31e : a5ee             [ 3]         lda z80_A
d320 : 0a               [ 2]         asl a                                    
d321 : 85f1             [ 3] 	sta z80_E                                       
d323 : a900             [ 2] 	lda #00             ; OPT (inutile ?)           
d325 : 85f2             [ 3]         sta z80_D
d327 : a000             [ 2] 	ldy #PsInOr                                     
d329 : 91f5             [ 5]         sta (z80_IX),y
d32b :                       OrnPtrs
d32b : a9ac             [ 2] 	    lda #$AC           
d32d : 18               [ 2]         clc
d32e : 65f1             [ 3]         adc z80_E                                
d330 : 85f3             [ 3]         sta z80_L
d332 : a9ac             [ 2]         lda #$AC
d334 : 6900             [ 2]         adc #00
d336 : 85f4             [ 3]         sta z80_H
d338 : a000             [ 2] 	ldy #00                                         
d33a : b1f3             [ 5]         lda (z80_L),y
d33c :                       MDADDR2
d33c : 69ac             [ 2] 	adc #$AC
d33e : aa               [ 2]         tax             ; save
d33f : c8               [ 2] 	iny                                             
d340 : b1f3             [ 5] 	lda (z80_L),y
d342 : 69ac             [ 2]         adc #$AC                                 
                             	    
d344 : a00e             [ 2] 	ldy #OrnPtr+1                                   
d346 : 91f5             [ 5]         sta (z80_IX),y
d348 : 88               [ 2]         dey
d349 : 8a               [ 2] 	txa                                             
d34a : 91f5             [ 5]         sta (z80_IX),y
d34c : 60               [ 6] 	rts                                             
                             
                             ;ALL 16 ADDRESSES TO PROTECT FROM BROKEN PT3 MODU
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank3.s -----------------------------------

d34d :                       SPCCOMS 
d34d : 1cd3                          fcw C_NOP-1
d34f : 19d2                  	fcw C_GLISS-1
d351 : 1dd1                  	fcw C_PORTM-1
d353 : 60d2                  	fcw C_SMPOS-1
d355 : 6fd2                  	fcw C_ORPOS-1
d357 : 7ed2                  	fcw C_VIBRT-1
d359 : 1cd3                  	fcw C_NOP-1
d35b : 1cd3                  	fcw C_NOP-1
d35d : acd2                  	fcw C_ENGLS-1
d35f : d2d2                  	fcw C_DELAY-1
d361 : 1cd3                  	fcw C_NOP-1
d363 : 1cd3                  	fcw C_NOP-1
d365 : 1cd3                  	fcw C_NOP-1
d367 : 1cd3                  	fcw C_NOP-1
d369 : 1cd3                  	fcw C_NOP-1
d36b : 1cd3                  	fcw C_NOP-1
                             ; ===============================================
d36d :                       CHREGS	
d36d : a900             [ 2]         lda #00                                  
d36f : 85ee             [ 3] 	    sta z80_A       ; save
d371 : 8d4dda           [ 4]         sta Ampl                                 
d374 : a5f3             [ 3] 	    lda z80_L                                   
d376 : 85fc             [ 3]         sta val3                                 
d378 : a5f4             [ 3]         lda z80_H
d37a : 85fd             [ 3]         sta val3+1
d37c : a015             [ 2]         ldy #Flags                               
d37e : a901             [ 2]         lda #%00000001
d380 : 85f8             [ 3]         sta val1
d382 : b1f5             [ 5]         lda (z80_IX),y
d384 : 24f8             [ 3]         bit val1
d386 : d003             [ 3] 	    bne saq
d388 : 4c04d6           [ 3]         jmp CH_EXIT                              
d38b :                       saq     	
                                                                              
d38b : a00d             [ 2] 	    ldy #OrnPtr                                 
d38d : b1f5             [ 5]         lda (z80_IX),y
d38f : 85f3             [ 3]         sta z80_L
d391 : 85f8             [ 3]         sta val1            ; save L
d393 : c8               [ 2]         iny                                      
d394 : b1f5             [ 5]         lda (z80_IX),y
d396 : 85f4             [ 3]         sta z80_H
d398 : 85f9             [ 3]         sta val1+1          ; save H
                             	                                                
d39a : a000             [ 2]         ldy #00
d39c : b1f3             [ 5]         lda (z80_L),y                            
d39e : 85f1             [ 3]         sta z80_E
d3a0 : c8               [ 2]         iny
d3a1 : b1f3             [ 5]         lda (z80_L),y
d3a3 : 85f2             [ 3]         sta z80_D
d3a5 : a000             [ 2] 	    ldy #PsInOr                                 
d3a7 : b1f5             [ 5]         lda (z80_IX),y
d3a9 : 85f3             [ 3] 	    sta z80_L                                   
d3ab : 85ee             [ 3]         sta z80_A                                
d3ad : 18               [ 2] 	    clc
d3ae : a5f8             [ 3]         lda val1
d3b0 : 65f3             [ 3]         adc z80_L
d3b2 : 85f3             [ 3]         sta z80_L
d3b4 : a5f9             [ 3]         lda val1+1
d3b6 : 6900             [ 2]         adc #00                
d3b8 : 85f4             [ 3]         sta z80_H                                
d3ba : a5f3             [ 3]         lda z80_L
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank3.s -----------------------------------

d3bc : 6902             [ 2]         adc #02
d3be : 85f3             [ 3]         sta z80_L
d3c0 : a5f4             [ 3]         lda z80_H
d3c2 : 6900             [ 2]         adc #00
d3c4 : 85f4             [ 3]         sta z80_H
d3c6 : a5ee             [ 3]         lda z80_A                                
d3c8 : 6901             [ 2]         adc #01
d3ca : c5f2             [ 3]         cmp z80_D                                
d3cc : 9003             [ 3] 	    bcc CH_ORPS                                 
d3ce : 18               [ 2] 	    clc
d3cf : a5f1             [ 3]         lda z80_E                                
d3d1 :                       CH_ORPS	
d3d1 : a000             [ 2]         ldy #PsInOr                              
d3d3 : 91f5             [ 5]         sta (z80_IX),y
d3d5 : a012             [ 2] 	    ldy #Note                                   
d3d7 : b1f5             [ 5]         lda (z80_IX),y
d3d9 : a000             [ 2] 	    ldy #00                                     
d3db : 71f3             [ 5]         adc (z80_L),y       ; adc ($AC,x)	
d3dd : 1002             [ 3] 	    bpl CH_NTP                                  
d3df : a900             [ 2] 	    lda #00                                     
d3e1 :                       CH_NTP	
d3e1 : c960             [ 2]         cmp #96                                  
d3e3 : 9002             [ 3] 	    bcc CH_NOK                                  
d3e5 : a95f             [ 2] 	    lda #95                                     
d3e7 :                       CH_NOK	
d3e7 : 0a               [ 2]         asl a                                    
d3e8 : 85f7             [ 3]         sta z80_AP                               
d3ea : a00f             [ 2] 	    ldy #SamPtr                                 
d3ec : b1f5             [ 5]         lda (z80_IX),y
d3ee : 85f3             [ 3]         sta z80_L
d3f0 : 85f8             [ 3] 	    sta val1            ; save L
d3f2 : c8               [ 2]         iny                                      
d3f3 : b1f5             [ 5]         lda (z80_IX),y
d3f5 : 85f4             [ 3]         sta z80_H
d3f7 : 85f9             [ 3]         sta val1+1          ; save H
d3f9 : a000             [ 2] 	    ldy #00
d3fb : b1f3             [ 5]         lda (z80_L),y                            
d3fd : 85f1             [ 3]         sta z80_E   
d3ff : c8               [ 2]         iny
d400 : b1f3             [ 5]         lda (z80_L),y
d402 : 85f2             [ 3]         sta z80_D   
                             
d404 : a001             [ 2] 	    ldy #PsInSm                                 
d406 : b1f5             [ 5]         lda (z80_IX),y
d408 : 85f0             [ 3] 	    sta z80_B                                   
d40a : 0a               [ 2] 	    asl a                                       
d40b : 0a               [ 2] 	    asl a                                       
d40c : 85f3             [ 3] 	    sta z80_L                                   
d40e : 18               [ 2]         clc
d40f : 65f8             [ 3]         adc val1
d411 : 85f3             [ 3]         sta z80_L
d413 : a5f9             [ 3]         lda val1+1
d415 : 6900             [ 2]         adc #00
d417 : 85f4             [ 3]         sta z80_H                                
d419 : a5f3             [ 3]         lda z80_L
d41b : 6902             [ 2]         adc #02
d41d : 85f3             [ 3]         sta z80_L
d41f : a5f4             [ 3]         lda z80_H
d421 : 6900             [ 2]         adc #00
d423 : 85f4             [ 3]         sta z80_H
                             
d425 : a5f0             [ 3] 	    lda z80_B                                   
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank3.s -----------------------------------

d427 : 6901             [ 2]         adc #01
d429 : c5f2             [ 3] 	    cmp z80_D                                   
d42b : 9002             [ 3] 	    bcc CH_SMPS                                 
d42d : a5f1             [ 3] 	    lda z80_E                                   
d42f :                       CH_SMPS	
d42f : a001             [ 2]         ldy #PsInSm                              
d431 : 91f5             [ 5]         sta (z80_IX),y
d433 : a000             [ 2]         ldy #00
d435 : b1f3             [ 5]         lda (z80_L),y                            
d437 : 85ef             [ 3]         sta z80_C
d439 : c8               [ 2]         iny
d43a : b1f3             [ 5]         lda (z80_L),y
d43c : 85f0             [ 3]         sta z80_B
                             
d43e : a008             [ 2]         ldy #TnAcc                               
d440 : b1f5             [ 5]         lda (z80_IX),y
d442 : 85f1             [ 3]         sta z80_E
d444 : c8               [ 2]         iny
d445 : b1f5             [ 5]         lda (z80_IX),y
d447 : 85f2             [ 3] 	    sta z80_D                                   
d449 : 18               [ 2] 	    clc                                         
d44a : a002             [ 2]         ldy #02
d44c : b1f3             [ 5]         lda (z80_L),y                            
d44e : 65f1             [ 3]         adc z80_E
d450 : aa               [ 2]         tax
d451 : c8               [ 2]         iny
d452 : b1f3             [ 5]         lda (z80_L),y
d454 : 65f2             [ 3]         adc z80_D
d456 : 85f4             [ 3]         sta z80_H
d458 : 85f2             [ 3]         sta z80_D
d45a : 8a               [ 2]         txa
d45b : 85f3             [ 3]         sta z80_L
d45d : 85f1             [ 3]         sta z80_E
                             
d45f : a940             [ 2]         lda #%01000000                           
d461 : 24f0             [ 3]         bit z80_B
d463 : f00b             [ 3] 	    beq CH_NOAC                                 
d465 : a008             [ 2] 	    ldy #TnAcc                                  
d467 : a5f3             [ 3]         lda z80_L
d469 : 91f5             [ 5]         sta (z80_IX),y
d46b : c8               [ 2] 	    iny                                         
d46c : a5f4             [ 3]         lda z80_H
d46e : 91f5             [ 5]         sta (z80_IX),y
d470 :                       CH_NOAC 												             
d470 : a5f7             [ 3]         lda z80_AP                               
d472 : 85ee             [ 3]         sta z80_A                                
d474 : 85f3             [ 3]         sta z80_L                                
d476 : 18               [ 2]         clc
d477 : a943             [ 2]         lda #lo(NT_)
d479 : 65f3             [ 3]         adc z80_L
d47b : 85f3             [ 3]         sta z80_L
d47d : a9db             [ 2]         lda #hi(NT_)
d47f : 6900             [ 2]         adc #00
d481 : 85f4             [ 3]         sta z80_H
d483 : a000             [ 2]         ldy #00
d485 : b1f3             [ 5]         lda (z80_L),y                            
d487 : 65f1             [ 3]         adc z80_E
d489 : aa               [ 2]         tax
d48a : c8               [ 2]         iny
d48b : b1f3             [ 5]         lda (z80_L),y
d48d : 65f2             [ 3]         adc z80_D                                
d48f : 85f4             [ 3]         sta z80_H
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank3.s -----------------------------------

d491 : 8a               [ 2]         txa
d492 : 85f3             [ 3]         sta z80_L
d494 : 18               [ 2]         clc
d495 : a006             [ 2] 	    ldy #CrTnSl                                 
d497 : b1f5             [ 5]         lda (z80_IX),y
d499 : 85f1             [ 3]         sta z80_E
d49b : 65f3             [ 3]         adc z80_L
d49d : 85f3             [ 3]         sta z80_L
d49f : 85fc             [ 3] 	    sta val3
d4a1 : c8               [ 2]         iny                                      
d4a2 : b1f5             [ 5]         lda (z80_IX),y
d4a4 : 85f2             [ 3]         sta z80_D
d4a6 : 65f4             [ 3]         adc z80_H
d4a8 : 85f4             [ 3]         sta z80_H
d4aa : 85fd             [ 3]         sta val3+1
                             ;CSP_	    
                             	   
d4ac : a900             [ 2]         lda #00                                  
d4ae : a005             [ 2] 	    ldy #TSlCnt                                 
d4b0 : 11f5             [ 5]         ora (z80_IX),y
d4b2 : 85ee             [ 3] 	    sta z80_A
d4b4 : d003             [ 3]         bne saq1                                 
d4b6 : 4c34d5           [ 3]         jmp CH_AMP
d4b9 : b1f5             [ 5] saq1	lda (z80_IX),y                              
d4bb : 38               [ 2]         sec
d4bc : e901             [ 2]         sbc #01
d4be : 91f5             [ 5]         sta (z80_IX),y
d4c0 : d072             [ 4] 	    bne CH_AMP                                  
d4c2 : a016             [ 2] 	    ldy #TnSlDl                                 
d4c4 : b1f5             [ 5]         lda (z80_IX),y
d4c6 : a005             [ 2]         ldy #TSlCnt                              
d4c8 : 91f5             [ 5]         sta (z80_IX),y
d4ca : 18               [ 2] 	    clc
d4cb : a017             [ 2]         ldy #TSlStp                              
d4cd : b1f5             [ 5]         lda (z80_IX),y
d4cf : 65f1             [ 3]         adc z80_E
d4d1 : 85f3             [ 3]         sta z80_L
d4d3 : c8               [ 2] 	    iny                                         
d4d4 : b1f5             [ 5]         lda (z80_IX),y
d4d6 : 65f2             [ 3]         adc z80_D
d4d8 : 85f4             [ 3]         sta z80_H 
d4da : 85ee             [ 3] 	    sta z80_A       ; save                      
d4dc : a007             [ 2] 	    ldy #CrTnSl+1                               
d4de : 91f5             [ 5]         sta (z80_IX),y
d4e0 : 88               [ 2]         dey                                      
d4e1 : a5f3             [ 3]         lda z80_L
d4e3 : 91f5             [ 5]         sta (z80_IX),y
d4e5 : a904             [ 2] 	    lda #%00000100                              
d4e7 : 85f8             [ 3]         sta val1
d4e9 : a015             [ 2]         ldy #Flags
d4eb : b1f5             [ 5]         lda (z80_IX),y
d4ed : 24f8             [ 3]         bit val1
d4ef : d043             [ 4] 	    bne CH_AMP  	                               
d4f1 : a019             [ 2] 	    ldy #TnDelt                                 
d4f3 : b1f5             [ 5]         lda (z80_IX),y
d4f5 : 85f1             [ 3]         sta z80_E
d4f7 : c8               [ 2] 	    iny                                         
d4f8 : b1f5             [ 5]         lda (z80_IX),y
d4fa : 85f2             [ 3]         sta z80_D
d4fc : a5ee             [ 3] 	lda z80_A                                       
d4fe : f010             [ 4] 	beq CH_STPP                                     
d500 : a5f1             [ 3] 	lda z80_E												
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank3.s -----------------------------------

d502 : a6f3             [ 3] 	ldx z80_L
d504 : 85f3             [ 3] 	sta z80_L
d506 : 86f1             [ 3] 	stx z80_E
d508 : a5f2             [ 3] 	lda z80_D
d50a : a6f4             [ 3] 	ldx z80_H
d50c : 85f4             [ 3] 	sta z80_H
d50e : 86f2             [ 3] 	stx z80_D
d510 :                       CH_STPP
d510 : 38               [ 2]         sec           ; carry = 0 becoze And A   
d511 : a5f3             [ 3]         lda z80_L
d513 : e5f1             [ 3]         sbc z80_E
d515 : 85f3             [ 3]         sta z80_L
d517 : a5f4             [ 3]         lda z80_H
d519 : e5f2             [ 3]         sbc z80_D
d51b : 85f4             [ 3]         sta z80_H
d51d : 3015             [ 3]         bmi CH_AMP                               
d51f : a013             [ 2] 	ldy #SlToNt                                     
d521 : b1f5             [ 5]         lda (z80_IX),y
d523 : a012             [ 2] 	ldy #Note                                       
d525 : 91f5             [ 5]         sta (z80_IX),y
d527 : a900             [ 2] 	lda #00                                         
d529 : a005             [ 2] 	ldy #TSlCnt                                     
d52b : 91f5             [ 5]         sta (z80_IX),y
d52d : a006             [ 2] 	ldy #CrTnSl                                     
d52f : 91f5             [ 5]         sta (z80_IX),y
d531 : c8               [ 2]         iny                                      
d532 : 91f5             [ 5]         sta (z80_IX),y
                             
d534 :                       CH_AMP	
d534 : a002             [ 2]         ldy #CrAmSl                              
d536 : b1f5             [ 5]         lda (z80_IX),y
d538 : 85ee             [ 3] 	    sta z80_A       ; save
d53a : a980             [ 2]         lda #%10000000                           
d53c : 24ef             [ 3]         bit z80_C
d53e : f021             [ 3] 	    beq CH_NOAM                                 
d540 : a940             [ 2] 	    lda #%01000000                              
d542 : 24ef             [ 3]         bit z80_C
d544 : f00c             [ 3] 	    beq CH_AMIN                                 
d546 : a5ee             [ 3] 	    lda z80_A                                   
d548 : c90f             [ 2]         cmp #15
d54a : f015             [ 3] 	    beq CH_NOAM                                 
d54c : 18               [ 2] 	    clc                                         
d54d : 6901             [ 2]         adc #01
d54f : 4c5bd5           [ 3] 	    jmp CH_SVAM                                 
d552 :                       CH_AMIN	
d552 : a5ee             [ 3]         lda z80_A                                
d554 : c9f1             [ 2]         cmp #$F1            ; -15
d556 : f009             [ 3] 	    beq CH_NOAM                                 
d558 : 38               [ 2] 	    sec                                         
d559 : e901             [ 2]         sbc #01
d55b :                       CH_SVAM	
d55b : a002             [ 2]         ldy #CrAmSl                              
d55d : 91f5             [ 5]         sta (z80_IX),y
d55f : 85ee             [ 3]         sta z80_A
d561 :                       CH_NOAM	
d561 : a5ee             [ 3]         lda z80_A
d563 : 85f3             [ 3]         sta z80_L                                
d565 : a5f0             [ 3] 	    lda z80_B                                   
d567 : 290f             [ 2] 	    and #15                                     
d569 : 18               [ 2] 	    clc                                         
d56a : 65f3             [ 3]         adc z80_L
d56c : 1002             [ 3] 	    bpl CH_APOS                                 
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank3.s -----------------------------------

d56e : a900             [ 2] 	    lda #00                                     
d570 :                       CH_APOS	
d570 : c910             [ 2]         cmp #16                                  
d572 : 9002             [ 3] 	    bcc CH_VOL                                  
d574 : a90f             [ 2] 	    lda #15                                     
d576 :                       CH_VOL	
d576 : a01c             [ 2]         ldy #Volume                              
d578 : 11f5             [ 5]         ora (z80_IX),y
d57a : 85f3             [ 3] 	    sta z80_L
d57c : 18               [ 2]         clc                                      
d57d : a943             [ 2] 	lda #lo(VT_)                                    
d57f : 85f1             [ 3]         sta z80_E
d581 : 65f3             [ 3]         adc z80_L
d583 : 85f3             [ 3]         sta z80_L
d585 : a9da             [ 2]         lda #hi(VT_)
d587 : 85f2             [ 3]         sta z80_D
d589 : 6900             [ 2]         adc #00
d58b : 85f4             [ 3]         sta z80_H
d58d : a000             [ 2] 	    ldy #00                                     
d58f : b1f3             [ 5]         lda (z80_L),y       ; lda ($AC,x)	
d591 : 85ee             [ 3]         sta z80_A       ; save
d593 :                       CH_ENV	
d593 : a901             [ 2]         lda #%00000001                           
d595 : 24ef             [ 3]         bit z80_C
d597 : d008             [ 3] 	    bne CH_NOEN                                 
d599 : a014             [ 2] 	    ldy #Env_En                                 
d59b : a5ee             [ 3]         lda z80_A
d59d : 11f5             [ 5]         ora (z80_IX),y
d59f : 85ee             [ 3]         sta z80_A
                             
d5a1 :                       CH_NOEN	
d5a1 : a5ee             [ 3]         lda z80_A
d5a3 : 8d4dda           [ 4]         sta Ampl                                 
d5a6 : a5ef             [ 3]         lda z80_C                                
d5a8 : 85ee             [ 3]         sta z80_A
d5aa : a980             [ 2]         lda #%10000000                           
d5ac : 24f0             [ 3]         bit z80_B
d5ae : f034             [ 3] 	    beq NO_ENSL                                 
d5b0 : a5ee             [ 3]         lda z80_A
d5b2 : 2a               [ 2]         rol a                                    
d5b3 : 2a               [ 2] 	    rol a                                       
d5b4 : c980             [ 2] 	    cmp #$80                                    
d5b6 : 6a               [ 2]         ror a
d5b7 : c980             [ 2] 	    cmp #$80                                    
d5b9 : 6a               [ 2]         ror a
d5ba : c980             [ 2] 	    cmp #$80                                    
d5bc : 6a               [ 2]         ror a
d5bd : a004             [ 2] 	    ldy #CrEnSl                                 
d5bf : 18               [ 2]         clc
d5c0 : 71f5             [ 5]         adc (z80_IX),y
d5c2 : 85ee             [ 3]         sta z80_A
d5c4 : a920             [ 2]         lda #%00100000                           
d5c6 : 24f0             [ 3]         bit z80_B
d5c8 : f006             [ 3] 	    beq NO_ENAC                                 
d5ca : a004             [ 2] 	    ldy #CrEnSl                                 
d5cc : a5ee             [ 3]         lda z80_A
d5ce : 91f5             [ 5]         sta (z80_IX),y
d5d0 :                       NO_ENAC	
d5d0 : a9e7             [ 2]         lda #lo(AddToEn+1)       ; OPT ?         
d5d2 : 85f3             [ 3]         sta z80_L
d5d4 : a9d7             [ 2]         lda #hi(AddToEn+1)
d5d6 : 85f4             [ 3]         sta z80_H
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank3.s -----------------------------------

d5d8 : a5ee             [ 3]         lda z80_A
d5da : a000             [ 2]         ldy #00                                  
                             		                                               
d5dc : 18               [ 2]         clc
d5dd : 71f3             [ 5]         adc (z80_L),y           ; OPT ?
d5df : 91f3             [ 5]         sta (z80_L),y                            
d5e1 : 4cfdd5           [ 3] 	    jmp CH_MIX                                  
d5e4 :                       NO_ENSL 
d5e4 : a5ee             [ 3]         lda z80_A
d5e6 : 6a               [ 2]         ror a                                    
d5e7 : a003             [ 2] 	    ldy #CrNsSl                                 
d5e9 : 18               [ 2]         clc
d5ea : 71f5             [ 5]         adc (z80_IX),y
d5ec : 8d42da           [ 4] 	    sta AddToNs                                 
d5ef : 85ee             [ 3]         sta z80_A       ; save
d5f1 : a920             [ 2] 	    lda #%00100000                              
d5f3 : 24f0             [ 3]         bit z80_B
d5f5 : f006             [ 3] 	    beq CH_MIX                                  
d5f7 : a003             [ 2] 	    ldy #CrNsSl                                 
d5f9 : a5ee             [ 3]         lda z80_A
d5fb : 91f5             [ 5]         sta (z80_IX),y
d5fd :                       CH_MIX	
d5fd : a5f0             [ 3]         lda z80_B                                
d5ff : 6a               [ 2] 	    ror a                                       
d600 : 2948             [ 2] 	    and #$48                                    
d602 : 85ee             [ 3]         sta z80_A
d604 :                       CH_EXIT	
d604 : a94a             [ 2]         lda #lo(AYREGS+Mixer)                    
d606 : 85f3             [ 3]         sta z80_L
d608 : a9da             [ 2]         lda #hi(AYREGS+Mixer)
d60a : 85f4             [ 3]         sta z80_H
d60c : a5ee             [ 3] 	    lda z80_A
d60e : a000             [ 2]         ldy #00                                  
d610 : 11f3             [ 5]         ora (z80_L),y       ; ora ($AC,x)	
d612 : 4a               [ 2] 	    lsr a                                       
d613 : 9002             [ 3]         bcc saq2
d615 : 0980             [ 2]         ora #$80
d617 : 91f3             [ 5] saq2	sta (z80_L),y                               
d619 : a5fd             [ 3] 	    lda val3+1                                  
d61b : 85f4             [ 3]         sta z80_H
d61d : a5fc             [ 3]         lda val3 
d61f : 85f3             [ 3]         sta z80_L
d621 : a900             [ 2] 	    lda #00                                     
d623 : a00a             [ 2] 	    ldy #COnOff                                 
d625 : 11f5             [ 5]         ora (z80_IX),y
d627 : 85ee             [ 3] 	    sta z80_A       ; save
d629 : d001             [ 3]         bne sas                                  
d62b : 60               [ 6]         rts
d62c : a00a             [ 2] sas 	ldy #COnOff                                 
d62e : b1f5             [ 5]         lda (z80_IX),y
d630 : 38               [ 2]         sec
d631 : e901             [ 2]         sbc #01
d633 : 91f5             [ 5]         sta (z80_IX),y
d635 : f001             [ 3] 	    beq sat                                     
d637 : 60               [ 6]         rts
d638 : a015             [ 2] sat 	ldy #Flags                                  
d63a : a5ee             [ 3]         lda z80_A
d63c : 51f5             [ 5]         eor (z80_IX),y                           
d63e : 91f5             [ 5]         sta (z80_IX),y                           
d640 : 6a               [ 2] 	    ror a                                       
d641 : a00b             [ 2] 	    ldy #OnOffD                                 
d643 : b1f5             [ 5]         lda (z80_IX),y
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank3.s -----------------------------------

d645 : b004             [ 3] 	    bcs CH_ONDL                                 
d647 : a00c             [ 2] 	    ldy #OffOnD                                 
d649 : b1f5             [ 5]         lda (z80_IX),y
d64b :                       CH_ONDL	
d64b : a00a             [ 2]         ldy #COnOff                              
d64d : 91f5             [ 5]         sta (z80_IX),y
d64f : 60               [ 6]         rts                                      
                             ; ===============================================
d650 :                       PLAY    
d650 : a900             [ 2]         lda #00                                  
d652 : 8de7d7           [ 4] 	    sta AddToEn+1                               
d655 : 8d4ada           [ 4] 	    sta AYREGS+Mixer                            
d658 : a9ff             [ 2] 	    lda #$FF                                    
d65a : 8d50da           [ 4] 	    sta AYREGS+EnvTp                            
d65d : ce3dda           [ 6] 	    dec DelyCnt                                 
d660 : f003             [ 3] 	    beq sat1                                    
d662 : 4c6dd7           [ 3]         jmp PL2
d665 : ce01da           [ 6] sat1	dec ANtSkCn                                 
d668 : f003             [ 3] 	    beq sat2                                    
d66a : 4c24d7           [ 3]         jmp PL1B
d66d :                       AdInPtA
d66d : a901             [ 2] sat2	lda #01                                     
d66f : 85ef             [ 3]         sta z80_C
d671 : a901             [ 2]         lda #01
d673 : 85f0             [ 3]         sta z80_B
d675 : a000             [ 2] 	    ldy #00                                     
d677 : b1ef             [ 5]         lda (z80_C),y       ; lda ($AC,x)	       
d679 : f003             [ 3] 	    beq sat3            ; test 0                
d67b : 4c0fd7           [ 3]         jmp PL1A
d67e : 85f2             [ 3] sat3	sta z80_D                                   
d680 : 8d41da           [ 4] 	    sta Ns_Base                                 
d683 : ada6cc           [ 4] 	    lda CrPsPtr                                 
d686 : 85f3             [ 3]         sta z80_L
d688 : ada7cc           [ 4]         lda CrPsPtr+1
d68b : 85f4             [ 3]         sta z80_H
d68d : e6f3             [ 5] 	    inc z80_L                                   
d68f : d002             [ 3]         bne sar
d691 : e6f4             [ 5]         inc z80_H
d693 :                       sar                                              
d693 : b1f3             [ 5]         lda (z80_L),y                            
d695 : 18               [ 2] 	    clc                                         
d696 : 6901             [ 2]         adc #01
d698 : 85ee             [ 3]         sta z80_A
d69a : d014             [ 3]         bne PLNLP                                
d69c : 20cecc           [ 6] 	    jsr CHECKLP                                 
d69f :                       LPosPtr
d69f : a9ac             [ 2] 	    lda #$AC                                    
d6a1 : 85f3             [ 3]         sta z80_L
d6a3 : a9ac             [ 2]         lda #$AC
d6a5 : 85f4             [ 3]         sta z80_H
d6a7 : a000             [ 2] 	    ldy #00                 ; OPT ?             
d6a9 : b1f3             [ 5]         lda (z80_L),y       ; lda ($AC,x)	       
d6ab : 18               [ 2] 	    clc                                         
d6ac : 6901             [ 2]         adc #01
d6ae : 85ee             [ 3]         sta z80_A           ; save
d6b0 :                       PLNLP	
d6b0 : a5f3             [ 3]         lda z80_L                                
d6b2 : 8da6cc           [ 4]         sta CrPsPtr
d6b5 : a5f4             [ 3]         lda z80_H
d6b7 : 8da7cc           [ 4]         sta CrPsPtr+1
d6ba : a5ee             [ 3] 	    lda z80_A                                   
d6bc : 38               [ 2]         sec
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank3.s -----------------------------------

d6bd : e901             [ 2]         sbc #01
d6bf : 0a               [ 2] 	    asl a                                       
d6c0 : 85f1             [ 3] 	    sta z80_E                                   
d6c2 : 85ee             [ 3]         sta z80_A
d6c4 : 26f2             [ 5] 	    rol z80_D                                   
d6c6 :                       PatsPtr
d6c6 : a9ac             [ 2] 	    lda #$AC
d6c8 : 18               [ 2]         clc
d6c9 : 65f1             [ 3]         adc z80_E                                
d6cb : 85f3             [ 3]         sta z80_L
d6cd : a9ac             [ 2]         lda #$AC
d6cf : 65f2             [ 3]         adc z80_D
d6d1 : 85f4             [ 3]         sta z80_H
                             	    
d6d3 : adfacf           [ 4] 	    lda MODADDR+1                               
d6d6 : 85f1             [ 3]         sta z80_E
d6d8 : ad00d0           [ 4]         lda MODADDR+7
d6db : 85f2             [ 3]         sta z80_D
                                                    	                         
d6dd : a000             [ 2] 	    ldy #00                 ; OPT ?
d6df : b1f3             [ 5]         lda (z80_L),y           ; lda ($AC,x)	   
d6e1 : 18               [ 2]         clc                                      
d6e2 : 65f1             [ 3]         adc z80_E               ; OPT (adc MODADD
d6e4 : 85ef             [ 3]         sta z80_C
d6e6 : c8               [ 2]         iny
d6e7 : b1f3             [ 5]         lda (z80_L),y
d6e9 : 65f2             [ 3]         adc z80_D               ; OPT (adc MODADD
d6eb : 85f0             [ 3]         sta z80_B   
d6ed : c8               [ 2]         iny
d6ee : b1f3             [ 5]         lda (z80_L),y                            
d6f0 : 18               [ 2]         clc                     ; OPT ?
d6f1 : 65f1             [ 3]         adc z80_E               ; IDEM...
d6f3 : 8d32d7           [ 4]         sta AdInPtB+1   
d6f6 : c8               [ 2]         iny
d6f7 : b1f3             [ 5]         lda (z80_L),y
d6f9 : 65f2             [ 3]         adc z80_D
d6fb : 8d36d7           [ 4]         sta AdInPtB+5     
d6fe : c8               [ 2]         iny
d6ff : b1f3             [ 5]         lda (z80_L),y                            
d701 : 18               [ 2]         clc
d702 : 65f1             [ 3]         adc z80_E               ; IDEM
d704 : 8d54d7           [ 4]         sta AdInPtC+1   
d707 : c8               [ 2]         iny
d708 : b1f3             [ 5]         lda (z80_L),y
d70a : 65f2             [ 3]         adc z80_D
d70c : 8d58d7           [ 4]         sta AdInPtC+5
                                                                              
d70f :                       PSP_	
                             
d70f :                       PL1A	
d70f : a9e6             [ 2]         lda #lo(ChanA)                           
d711 : 85f5             [ 3]         sta z80_IX
d713 : a9d9             [ 2]         lda #hi(ChanA)
d715 : 85f6             [ 3]         sta z80_IX+1
d717 : 206ad0           [ 6] 	jsr PTDECOD                                     
d71a : a5ef             [ 3] 	lda z80_C                                       
d71c : 8d6ed6           [ 4]         sta AdInPtA+1
d71f : a5f0             [ 3]         lda z80_B
d721 : 8d72d6           [ 4]         sta AdInPtA+5
                             
d724 :                       PL1B	
d724 : ce1eda           [ 6]         dec BNtSkCn                              
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank3.s -----------------------------------

d727 : d01d             [ 3] 	bne PL1C                                        
d729 : a903             [ 2] 	lda #lo(ChanB)                                  
d72b : 85f5             [ 3]         sta z80_IX
d72d : a9da             [ 2]         lda #hi(ChanB)
d72f : 85f6             [ 3]         sta z80_IX+1
d731 :                       AdInPtB
d731 : a901             [ 2] 	lda #01                                         
d733 : 85ef             [ 3]         sta z80_C
d735 : a901             [ 2]         lda #01
d737 : 85f0             [ 3]         sta z80_B
d739 : 206ad0           [ 6] 	jsr PTDECOD                                     
d73c : a5ef             [ 3] 	lda z80_C                                       
d73e : 8d32d7           [ 4]         sta AdInPtB+1
d741 : a5f0             [ 3]         lda z80_B
d743 : 8d36d7           [ 4]         sta AdInPtB+5
                             
d746 :                       PL1C	
d746 : ce3bda           [ 6]         dec CNtSkCn                              
d749 : d01d             [ 3] 	bne PL1D                                        
d74b : a920             [ 2] 	lda #lo(ChanC)                                  
d74d : 85f5             [ 3]         sta z80_IX
d74f : a9da             [ 2]         lda #hi(ChanC)
d751 : 85f6             [ 3]         sta z80_IX+1
d753 :                       AdInPtC
d753 : a901             [ 2] 	lda #01                                         
d755 : 85ef             [ 3]         sta z80_C
d757 : a901             [ 2]         lda #01
d759 : 85f0             [ 3]         sta z80_B
d75b : 206ad0           [ 6] 	jsr PTDECOD                                     
d75e : a5ef             [ 3] 	lda z80_C                                       
d760 : 8d54d7           [ 4]         sta AdInPtC+1
d763 : a5f0             [ 3]         lda z80_B
d765 : 8d58d7           [ 4]         sta AdInPtC+5
                             
d768 :                       Delay
d768 :                       PL1D	
d768 : a93e             [ 2]         lda #$3E                                 
d76a : 8d3dda           [ 4] 	    sta DelyCnt                                 
                             
d76d :                       PL2	
d76d : a9e6             [ 2]         lda #lo(ChanA)                           
d76f : 85f5             [ 3]         sta z80_IX
d771 : a9d9             [ 2]         lda #hi(ChanA)
d773 : 85f6             [ 3]         sta z80_IX+1
d775 : ad43da           [ 4] 	    lda AYREGS+TonA                             
d778 : 85f3             [ 3]         sta z80_L
d77a : ad44da           [ 4]         lda AYREGS+TonA+1
d77d : 85f4             [ 3]         sta z80_H
d77f : 206dd3           [ 6] 	    jsr CHREGS                                  
d782 : a5f3             [ 3] 	    lda z80_L                                   
d784 : 8d43da           [ 4]         sta AYREGS+TonA
d787 : a5f4             [ 3]         lda z80_H
d789 : 8d44da           [ 4]         sta AYREGS+TonA+1
d78c : ad4dda           [ 4] 	    lda Ampl                                    
d78f : 8d4bda           [ 4] 	    sta AYREGS+AmplA                            
                             	
d792 : a903             [ 2]         lda #lo(ChanB)                           
d794 : 85f5             [ 3]         sta z80_IX
d796 : a9da             [ 2]         lda #hi(ChanB)
d798 : 85f6             [ 3]         sta z80_IX+1
d79a : ad45da           [ 4] 	    lda AYREGS+TonB                             
d79d : 85f3             [ 3]         sta z80_L
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank3.s -----------------------------------

d79f : ad46da           [ 4]         lda AYREGS+TonB+1
d7a2 : 85f4             [ 3]         sta z80_H
d7a4 : 206dd3           [ 6] 	    jsr CHREGS                                  
d7a7 : a5f3             [ 3] 	    lda z80_L                                   
d7a9 : 8d45da           [ 4]         sta AYREGS+TonB
d7ac : a5f4             [ 3]         lda z80_H
d7ae : 8d46da           [ 4]         sta AYREGS+TonB+1
d7b1 : ad4dda           [ 4] 	    lda Ampl                                    
d7b4 : 8d4cda           [ 4] 	    sta AYREGS+AmplB                            
                             	    
d7b7 : a920             [ 2]         lda #lo(ChanC)                           
d7b9 : 85f5             [ 3]         sta z80_IX
d7bb : a9da             [ 2]         lda #hi(ChanC)
d7bd : 85f6             [ 3]         sta z80_IX+1
d7bf : ad47da           [ 4] 	    lda AYREGS+TonC                             
d7c2 : 85f3             [ 3]         sta z80_L
d7c4 : ad48da           [ 4]         lda AYREGS+TonC+1
d7c7 : 85f4             [ 3]         sta z80_H
d7c9 : 206dd3           [ 6] 	    jsr CHREGS                                  
d7cc : a5f3             [ 3] 	    lda z80_L                                   
d7ce : 8d47da           [ 4]         sta AYREGS+TonC
d7d1 : a5f4             [ 3]         lda z80_H
d7d3 : 8d48da           [ 4]         sta AYREGS+TonC+1
                             
d7d6 : ad41da           [ 4] 	    lda Ns_Base_AddToNs                         
d7d9 : 85f3             [ 3]         sta z80_L
d7db : ad42da           [ 4]         lda Ns_Base_AddToNs+1
d7de : 85f4             [ 3]         sta z80_H                                
d7e0 : 18               [ 2] 	    clc                                         
d7e1 : 65f3             [ 3]         adc z80_L
d7e3 : 8d49da           [ 4] 	    sta AYREGS+Noise                            
                             
d7e6 :                       AddToEn
d7e6 : a93e             [ 2] 	    lda #$3E                                    
d7e8 : 85f1             [ 3] 	    sta z80_E                                   
d7ea : 0a               [ 2] 	    asl a                                       
d7eb : 9004             [ 3] 	    bcc sau                                     
d7ed : a9ff             [ 2]         lda #$FF
d7ef : d002             [ 3]         bne sau1      ; always
d7f1 : a900             [ 2] sau     lda #00
d7f3 : 85f2             [ 3] sau1	sta z80_D                                   
d7f5 : ad52da           [ 4]         lda EnvBase+1
d7f8 : 85f4             [ 3]         sta z80_H           ; OPT ?
d7fa : ad51da           [ 4]         lda EnvBase                              
d7fd : 85f3             [ 3]         sta z80_L           ; OPT ?
d7ff : 18               [ 2] 	    clc                                         
d800 : 65f1             [ 3]         adc z80_E
d802 : 85f3             [ 3]         sta z80_L
d804 : a5f2             [ 3]         lda z80_D
d806 : 65f4             [ 3]         adc z80_H           ; OPT ?
d808 : 85f4             [ 3]         sta z80_H 
d80a : ad3fda           [ 4]         lda CurESld+1
d80d : 85f2             [ 3]         sta z80_D
d80f : ad3eda           [ 4]         lda CurESld                              
d812 : 85f1             [ 3]         sta z80_E
d814 : 18               [ 2] 	    clc                                         
d815 : 65f3             [ 3]         adc z80_L
d817 : 8d4eda           [ 4]         sta AYREGS+Env                           
d81a : a5f2             [ 3]         lda z80_D
d81c : 65f4             [ 3]         adc z80_H
d81e : 8d4fda           [ 4] 	    sta AYREGS+Env+1                            
                             
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank3.s -----------------------------------

d821 : a900             [ 2]         lda #00                                  
d823 : 0d40da           [ 4]         ora CurEDel         ; OPT ?              
d826 : f019             [ 3] 	    beq ROUT                                    
d828 : ce40da           [ 6] 	    dec CurEDel                                 
d82b : d014             [ 3] 	    bne ROUT                                    
d82d :                       Env_Del
d82d : a93e             [ 2] 	    lda #$3E                                    
d82f : 8d40da           [ 4] 	    sta CurEDel                                 
d832 :                       ESldAdd
d832 : a9ac             [ 2] 	    lda #$AC                                    
d834 : 18               [ 2]         clc
d835 : 65f1             [ 3]         adc z80_E       
d837 : 8d3eda           [ 4]         sta CurESld
d83a : a9ac             [ 2]         lda #$AC
d83c : 65f2             [ 3]         adc z80_D
d83e : 8d3fda           [ 4] 	    sta CurESld+1
                             ; ===============================================
                             
d841 :                       ROUT
d841 : ae44da           [ 4]         ldx AYREGS+1    ; hi ToneA
d844 : ad43da           [ 4]         lda AYREGS+0    ; lo ToneA
d847 : 20cad8           [ 6]         jsr FIX16BITS
                                     
d84a : a901             [ 2]         lda #01             
d84c : 2009d9           [ 6]         jsr ay_set
d84f : 98               [ 2]         tya
d850 : aa               [ 2]         tax
d851 : a900             [ 2]         lda #00
d853 : 2009d9           [ 6]         jsr ay_set
                             
d856 : ae46da           [ 4]         ldx AYREGS+3    ; hi ToneB
d859 : ad45da           [ 4]         lda AYREGS+2    ; lo ToneB
d85c : 20cad8           [ 6]         jsr FIX16BITS 
                             
d85f : a903             [ 2]         lda #03             
d861 : 2009d9           [ 6]         jsr ay_set
d864 : 98               [ 2]         tya
d865 : aa               [ 2]         tax
d866 : a902             [ 2]         lda #02             
d868 : 2009d9           [ 6]         jsr ay_set
                             
d86b : ae48da           [ 4]         ldx AYREGS+5    ; hi ToneC
d86e : ad47da           [ 4]         lda AYREGS+4    ; lo ToneC
d871 : 20cad8           [ 6]         jsr FIX16BITS 
                             
d874 : a905             [ 2]         lda #05             
d876 : 2009d9           [ 6]         jsr ay_set
d879 : 98               [ 2]         tya
d87a : aa               [ 2]         tax
d87b : a904             [ 2]         lda #04             
d87d : 2009d9           [ 6]         jsr ay_set
                             
d880 : ad49da           [ 4]         lda AYREGS+6    ; data
                                     ;jsr FIX8BITS
d883 : 4a               [ 2]         lsr a             ; /2 
d884 : aa               [ 2]         tax
d885 : a906             [ 2]         lda #06             
d887 : 2009d9           [ 6]         jsr ay_set
                             
d88a : ae4ada           [ 4]         ldx AYREGS+7    ; data
d88d : a907             [ 2]         lda #07
d88f : 2009d9           [ 6]         jsr ay_set
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank3.s -----------------------------------

                             
d892 : ae4bda           [ 4]         ldx AYREGS+8    ; data
d895 : a908             [ 2]         lda #08             
d897 : 2009d9           [ 6]         jsr ay_set
                             
d89a : ae4cda           [ 4]         ldx AYREGS+9    ; data
d89d : a909             [ 2]         lda #09             
d89f : 2009d9           [ 6]         jsr ay_set
                             
d8a2 : ae4dda           [ 4]         ldx AYREGS+10   ; data
d8a5 : a90a             [ 2]         lda #10             
d8a7 : 2009d9           [ 6]         jsr ay_set
                             
d8aa : ae4fda           [ 4]         ldx AYREGS+12   ; hi Env
d8ad : ad4eda           [ 4]         lda AYREGS+11   ; lo Env
d8b0 : 20cad8           [ 6]         jsr FIX16BITS 
                             
d8b3 : a90c             [ 2]         lda #12             
d8b5 : 2009d9           [ 6]         jsr ay_set
d8b8 : 98               [ 2]         tya
d8b9 : aa               [ 2]         tax
d8ba : a90b             [ 2]         lda #11             
d8bc : 2009d9           [ 6]         jsr ay_set
                             
                                     ; shunte R13 si $FF (Y=13) => plus géné
d8bf : ae50da           [ 4]         ldx AYREGS+13
d8c2 : 3005             [ 3]         bmi FIN_RTS
d8c4 : a90d             [ 2]         lda #13
d8c6 : 2009d9           [ 6]         jsr ay_set
d8c9 :                       FIN_RTS
d8c9 : 60               [ 6]         rts
                             ; -------------------------------------
d8ca :                       FIX16BITS       ; INT(256*2*1000/1773) = 289 = 25
                                             ; Homebrew is 1.34Mhz
                                             ; So calculation = 386 = 256 + 12
                                             ; IN:  register A is low byte
                                             ;      register X is high byte
                                             ; OUT: register Y is low byte
                                             ;      register X is high byte
                             
d8ca : 86f8             [ 3]         stx TA1         ; Reg 1 = 256*AX
d8cc : 85fa             [ 3]         sta TB1
d8ce : 86f9             [ 3]         stx TA2         ; Reg 2 = 256*AX
d8d0 : 85fb             [ 3]         sta TB2
d8d2 : 64fd             [ 3]         stz TC2
d8d4 : 86fe             [ 3]         stx TB3         ; Reg 3 = AX
d8d6 : 85ff             [ 3]         sta TC3
                                     
                                     ; x128 for homebrew
                                     ; which is same as right shift 1 time of 
d8d8 : 46f9             [ 5]         lsr TA2
d8da : 66fb             [ 5]         ror TB2
d8dc : 66fd             [ 5]         ror TC2
                                             
                                     ; x02 + x128 for homebrew
                                     ; shift reg 3 left, the carry added to re
d8de : 06ff             [ 5]         asl TC3
d8e0 : 26fe             [ 5]         rol TB3
d8e2 : a5f9             [ 3]         lda TA2
d8e4 : 6900             [ 2]         adc #0
d8e6 : 85f9             [ 3]         sta TA2
                                     ; Now add the rest of reg 3 to reg 2
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank3.s -----------------------------------

d8e8 : a5ff             [ 3]         lda TC3
d8ea : 65fd             [ 3]         adc TC2
d8ec : 85fd             [ 3]         sta TC2
d8ee : a5fe             [ 3]         lda TB3
d8f0 : 65fb             [ 3]         adc TB2
d8f2 : 85fb             [ 3]         sta TB2
d8f4 : a900             [ 2]         lda #0
d8f6 : 65f9             [ 3]         adc TA2
d8f8 : 85f9             [ 3]         sta TA2
                             
                                     ; Add reg 2(x128+x2) to reg 1(x256) and t
d8fa : a5fb             [ 3]         lda TB2
d8fc : 65fa             [ 3]         adc TB1
d8fe : a8               [ 2]         tay         ; sta TB1
d8ff : a5f9             [ 3]         lda TA2
d901 : 65f8             [ 3]         adc TA1
                                     ; sta TA1
                             
                                     ; / 2 (16bits)
d903 : 4a               [ 2]         lsr a         ; lsr TA1
d904 : aa               [ 2]         tax         ; ldx TA1
d905 : 98               [ 2]         tya         ; lda TB1     
d906 : 6a               [ 2]         ror a         ; ror TB1
d907 : a8               [ 2]         tay         ; ldy TB1
d908 : 60               [ 6]         rts 
                             
                             ; HB-BBC-128 settings:
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0480 =                       IO_1		= 0x0480
0000 =                       PRB		= 0x00
0001 =                       PRA		= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD		= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
                             
                             ;****************************************
                             ;* ay_set
                             ;* Set AY register A to value X
                             ;* Input : A = Reg no, X = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
d909 :                       ay_set
d909 : 48               [ 3]         pha
                             
d90a : a9ff             [ 2] 	lda #0xff			; Set Port A to output
d90c : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
d90f : 68               [ 4]         pla
d910 : 8d8104           [ 4] 	sta SND_ADBUS			; Put A on the sound bus (A = re
                             
d913 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
d916 : 29bd             [ 2] 	and #SND_DESELECT_MASK	        ; Mask off mode b
d918 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank3.s -----------------------------------

d91a : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
d91d : 29bd             [ 2] 	and #SND_DESELECT_MASK	        ; Mask off mode b
d91f : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
d922 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = va
d925 : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
d927 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
d92a : 29bd             [ 2] 	and #SND_DESELECT_MASK	        ; Mask off mode b
d92c : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
d92f : 60               [ 6] 	rts
                             
                             ; ===============================================
d930 :                       NT_DATA	
d930 : 64                            fcb (T_NEW_0-T1_)*2
d931 : 2a                    	    fcb TCNEW_0-T_
d932 : 65                    	    fcb (T_OLD_0-T1_)*2+1
d933 : 00                    	    fcb TCOLD_0-T_
d934 : 01                    	    fcb (T_NEW_1-T1_)*2+1
d935 : 0c                    	    fcb TCNEW_1-T_
d936 : 01                    	    fcb (T_OLD_1-T1_)*2+1
d937 : 0c                    	    fcb TCOLD_1-T_
d938 : 94                    	    fcb (T_NEW_2-T1_)*2
d939 : 35                    	    fcb TCNEW_2-T_
d93a : 30                    	    fcb (T_OLD_2-T1_)*2
d93b : 0e                    	    fcb TCOLD_2-T_
d93c : 60                    	    fcb (T_NEW_3-T1_)*2
d93d : 20                    	    fcb TCNEW_3-T_
d93e : 60                    	    fcb (T_OLD_3-T1_)*2
d93f : 21                    	    fcb TCOLD_3-T_
                             
d940 :                       T_
                             
d940 : 0105090b0d0f1315      TCOLD_0	fcb $00+1,$04+1,$08+1,$0A+1,$0C+1,$0E+1,$
d948 : 19253d00              	    fcb $18+1,$24+1,$3C+1,0
d94c : 5d00                  TCOLD_1	fcb $5C+1,0
d94e : 31374d535f7182..      TCOLD_2	fcb $30+1,$36+1,$4C+1,$52+1,$5E+1,$70+1,$
d957 : 9ea0a6a8aaacae..      	    fcb $9E,$A0,$A6,$A8,$AA,$AC,$AE,$AE,0
d960 : 57                    TCNEW_3	fcb $56+1
d961 : 1f2325292d2f33..      TCOLD_3	fcb $1E+1,$22+1,$24+1,$28+1,$2C+1,$2E+1,$
d96a : 1d2123272b2d3155      TCNEW_0	fcb $1C+1,$20+1,$22+1,$26+1,$2A+1,$2C+1,$
d972 : bdbf00                	    fcb $BC+1,$BE+1,0
d94c =                       TCNEW_1 = TCOLD_1
d975 : 1b2125292b3b4d5f      TCNEW_2	fcb $1A+1,$20+1,$24+1,$28+1,$2A+1,$3A+1,$
d97d : bbbdbf00              	    fcb $BA+1,$BC+1,$BE+1,0
                             
d980 =                       EMPTYSAMORN = *-1
d981 : 010090                	    fcb 1,0,$90 ;delete #90 if you don't need de
                             
                             ;first 12 values of tone tables
                             
d984 :                       T1_ 	
d984 : f01d                          fcw $1DF0
d986 : 201c                          fcw $1C20
d988 : c01a                          fcw $1AC0
d98a : 0019                          fcw $1900
d98c : b017                          fcw $17B0
d98e : 5016                          fcw $1650
d990 : 1015                          fcw $1510
d992 : e013                          fcw $13E0
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank3.s -----------------------------------

                             
d994 : c012                          fcw $12C0
d996 : c011                          fcw $11C0
d998 : b010                          fcw $10B0
d99a : c00f                          fcw $0FC0
d99c : 7c1a                          fcw $1A7C
d99e : 0019                          fcw $1900
d9a0 : 9817                          fcw $1798
d9a2 : 4416                          fcw $1644
                             
d9a4 : 0415                          fcw $1504
d9a6 : d813                          fcw $13D8
d9a8 : b812                          fcw $12B8
d9aa : ac11                          fcw $11AC
d9ac : b010                          fcw $10B0
d9ae : c00f                          fcw $0FC0
d9b0 : dc0e                          fcw $0EDC
d9b2 : 080e                          fcw $0E08
                             
d9b4 : b419                          fcw $19B4
d9b6 : 4418                          fcw $1844
d9b8 : e616                          fcw $16E6
d9ba : 9e15                          fcw $159E
d9bc : 6614                          fcw $1466
d9be : 4213                          fcw $1342
d9c0 : 2e12                          fcw $122E
d9c2 : 2811                          fcw $1128
                             
d9c4 : 3210                          fcw $1032
d9c6 : 480f                          fcw $0F48
d9c8 : 6e0e                          fcw $0E6E
d9ca : 9e0d                          fcw $0D9E
d9cc : da0c                          fcw $0CDA
d9ce : 201a                          fcw $1A20
d9d0 : aa18                          fcw $18AA
d9d2 : 4817                          fcw $1748
                             
d9d4 : f815                          fcw $15F8
d9d6 : be14                          fcw $14BE
d9d8 : 9413                          fcw $1394
d9da : 7a12                          fcw $127A
d9dc : 7011                          fcw $1170
d9de : 7610                          fcw $1076
d9e0 : 8a0f                          fcw $0F8A
d9e2 : aa0e                          fcw $0EAA
                             
d9e4 : d80d                          fcw $0DD8
                             
d984 =                       T_OLD_1	= T1_
d99c =                       T_OLD_2	= T_OLD_1+24
d9b4 =                       T_OLD_3	= T_OLD_2+24
d9b6 =                       T_OLD_0	= T_OLD_3+2
d9b6 =                       T_NEW_0	= T_OLD_0
d984 =                       T_NEW_1	= T_OLD_1
d9ce =                       T_NEW_2	= T_NEW_0+24
d9b4 =                       T_NEW_3	= T_OLD_3
                             
d9e6 =                       FILE_END =*
                             ; ===========================
                             
d9e6 :                       .bss        ; uninitialized data stuff
                             
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank3.s -----------------------------------

                             ;vars from here can be stripped
                             ;you can move VARS to any other address
                             
d9e6 :                       VARS
                             ;ChannelsVars
                             
                             ; STRUCT "CHP"
0000 =                       PsInOr	= 0
0001 =                       PsInSm	= 1
0002 =                       CrAmSl  = 2
0003 =                       CrNsSl	= 3
0004 =                       CrEnSl	= 4
0005 =                       TSlCnt	= 5
0006 =                       CrTnSl	= 6
0008 =                       TnAcc	= 8
000a =                       COnOff	= 10
000b =                       OnOffD	= 11
000c =                       OffOnD	= 12
000d =                       OrnPtr	= 13
000f =                       SamPtr	= 15
0011 =                       NNtSkp	= 17
0012 =                       Note	= 18
0013 =                       SlToNt	= 19
0014 =                       Env_En	= 20
0015 =                       Flags	= 21
0016 =                       TnSlDl	= 22
0017 =                       TSlStp	= 23
0019 =                       TnDelt	= 25
001b =                       NtSkCn	= 27
001c =                       Volume	= 28
                             ; end STRUCT
                             
                             ; CHANNEL A
d9e6 :                       ChanA	
                             ;reset group
d9e6 : 00                    APsInOr	fcb 0
d9e7 : 00                    APsInSm	fcb 0
d9e8 : 00                    ACrAmSl	fcb 0
d9e9 : 00                    ACrNsSl	fcb 0
d9ea : 00                    ACrEnSl	fcb 0
d9eb : 00                    ATSlCnt	fcb 0
d9ec : 0000                  ACrTnSl	fcw 0
d9ee : 0000                  ATnAcc	fcw 0
d9f0 : 00                    ACOnOff	fcb 0
                             ;reset group
                             
d9f1 : 00                    AOnOffD	fcb 0
                             
d9f2 : 00                    AOffOnD	fcb 0
d9f3 : 0000                  AOrnPtr	fcw 0
d9f5 : 0000                  ASamPtr	fcw 0
d9f7 : 00                    ANNtSkp	fcb 0
d9f8 : 00                    ANote	fcb 0
d9f9 : 00                    ASlToNt	fcb 0
d9fa : 00                    AEnv_En	fcb 0
d9fb : 00                    AFlags	fcb 0
                              ;Enabled - 0,SimpleGliss - 2
d9fc : 00                    ATnSlDl	fcb 0
d9fd : 0000                  ATSlStp	fcw 0
d9ff : 0000                  ATnDelt	fcw 0
da01 : 00                    ANtSkCn	fcb 0
da02 : 00                    AVolume	fcb 0
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank3.s -----------------------------------

                             	
                             ; CHANNEL B
da03 :                       ChanB
                             ;reset group
da03 : 00                    BPsInOr	fcb 0
da04 : 00                    BPsInSm	fcb 0
da05 : 00                    BCrAmSl	fcb 0
da06 : 00                    BCrNsSl	fcb 0
da07 : 00                    BCrEnSl	fcb 0
da08 : 00                    BTSlCnt	fcb 0
da09 : 0000                  BCrTnSl	fcw 0
da0b : 0000                  BTnAcc	fcw 0
da0d : 00                    BCOnOff	fcb 0
                             ;reset group
                             
da0e : 00                    BOnOffD	fcb 0
                             
da0f : 00                    BOffOnD	fcb 0
da10 : 0000                  BOrnPtr	fcw 0
da12 : 0000                  BSamPtr	fcw 0
da14 : 00                    BNNtSkp	fcb 0
da15 : 00                    BNote	fcb 0
da16 : 00                    BSlToNt	fcb 0
da17 : 00                    BEnv_En	fcb 0
da18 : 00                    BFlags	fcb 0
                              ;Enabled - 0,SimpleGliss - 2
da19 : 00                    BTnSlDl	fcb 0
da1a : 0000                  BTSlStp	fcw 0
da1c : 0000                  BTnDelt	fcw 0
da1e : 00                    BNtSkCn	fcb 0
da1f : 00                    BVolume	fcb 0
                             
                             ; CHANNEL C
da20 :                       ChanC
                             ;reset group
da20 : 00                    CPsInOr	fcb 0
da21 : 00                    CPsInSm	fcb 0
da22 : 00                    CCrAmSl	fcb 0
da23 : 00                    CCrNsSl	fcb 0
da24 : 00                    CCrEnSl	fcb 0
da25 : 00                    CTSlCnt	fcb 0
da26 : 0000                  CCrTnSl	fcw 0
da28 : 0000                  CTnAcc	fcw 0
da2a : 00                    CCOnOff	fcb 0
                             ;reset group
                             
da2b : 00                    COnOffD	fcb 0
                             
da2c : 00                    COffOnD	fcb 0
da2d : 0000                  COrnPtr	fcw 0
da2f : 0000                  CSamPtr	fcw 0
da31 : 00                    CNNtSkp	fcb 0
da32 : 00                    CNote	fcb 0
da33 : 00                    CSlToNt	fcb 0
da34 : 00                    CEnv_En	fcb 0
da35 : 00                    CFlags	fcb 0
                              ;Enabled - 0,SimpleGliss - 2
da36 : 00                    CTnSlDl	fcb 0
da37 : 0000                  CTSlStp	fcw 0
da39 : 0000                  CTnDelt	fcw 0
da3b : 00                    CNtSkCn	fcb 0
da3c : 00                    CVolume	fcb 0
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank3.s -----------------------------------

                             
                             ; ------------
                             
                             ;GlobalVars
da3d : 00                    DelyCnt	fcb 0
da3e : 0000                  CurESld	fcw 0
da40 : 00                    CurEDel	fcb 0
da41 :                       Ns_Base_AddToNs
da41 : 00                    Ns_Base	fcb 0
da42 : 00                    AddToNs	fcb 0
                             
                             ; ===========================
da43 :                       AYREGS ; AY registers
                             
0000 =                       TonA	= 0
0002 =                       TonB	= 2
0004 =                       TonC	= 4
0006 =                       Noise	= 6
0007 =                       Mixer	= 7
0008 =                       AmplA	= 8
0009 =                       AmplB	= 9
000a =                       AmplC	= 10
000b =                       Env	    = 11
000d =                       EnvTp	= 13
                             ; ---
                             
da4d =                       Ampl	= AYREGS+AmplC
                             ; ===========================
da43 : 00000000000000..      VT_	ds 256 ;CreatedVolumeTableAddress
                             
da51 =                       EnvBase	= VT_+14
da53 =                       VAR0END	= VT_+16 ;INIT zeroes from VARS to VAR0EN
                             
                             ; ===========================
db43 : 00000000000000..      NT_	ds 192 ;CreatedNoteTableAddress
                             
dc03 =                       VARS_END = *
dc03 :                       PT3END
dc03 :                       PT3_code_end
                             
                             
                             	; End of Code
dc03 :                       _code_end
dc03 :                       _bank3_end
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
