AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank1.s -----------------------------------

13495 lines read, no errors in pass 1.
c000 =                       _bank1_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank1.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank1.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank1.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank1.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank1.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank1.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank1.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank1.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank1.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank1.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank1.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank1.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank1.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank1.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank1.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank1.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank1.s -----------------------------------

                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank1.s -----------------------------------

008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank1.s -----------------------------------

                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank1.s -----------------------------------

0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : 63c7                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : 6bcb                  	fcw init			; 0xfffc : Reset Vector
fffe : c3c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
c000 : 80                    	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank1.s -----------------------------------

                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4cc0c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4cbdc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4c50c6           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c8ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c97c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4cf9c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4ca1c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4c5dc6           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c75c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f267, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d80b, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d59b, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d62e, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d537, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d4f6, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d213, 2
                             
c0d6 :                       _fs_open_read_w
                              _bankjsr $d3e2, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d4a6, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank1.s -----------------------------------

c106 :                       _fs_put_byte_w
                              _bankjsr $d36f, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $d056, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d08c, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $d011, 2
                             
c166 :                       _get_byte
                              _bankjsr $d25b, 0
                             
c17e :                       _put_byte
                              _bankjsr $d270, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e390, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e39d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $de59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d27d, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d208, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d239, 0
                             
c226 :                       _init_fs
                              _bankjsr $ceee, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cbe8, 2
                             
c256 :                       _init_snd
                              _bankjsr $d646, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d28f, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d29e, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d309, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cbf1, 0
                             
c2ce :                       _gr_cls
                              _bankjsr $de6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $de16, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank1.s -----------------------------------

                             
c2fe :                       _gr_line
                              _bankjsr $e1ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $e00a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e115, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ded7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $df15, 0
                             
c376 :                       _gr_point
                              _bankjsr $dfbb, 0
                             
c38e :                       _gr_get
                              _bankjsr $def2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $defa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d63f, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c6f9, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c6a1, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c697, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c68a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $dc00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d465, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d5cb, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d51c, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d636, 0
                             
c4ae :                       _rtc_nvwrite
                              _bankjsr $d61e, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d642, 2
                             
c4de :                       _sd_sendcmd17
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank1.s -----------------------------------

                              _bankjsr $cdc0, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $ce39, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cbe8, 0
                             
c526 :                       _PT3INIT
                              _bankjsr $e009, 3
                             
c53e :                       _PT3START
                              _bankjsr $e000, 3
                             
c556 :                       _PT3PAUSE
                              _bankjsr $e003, 3
                             
c56e :                       _PT3RESUME
                              _bankjsr $e006, 3
                             
c586 :                       mod_sz_autogen_e
                             
                             	
c586 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c586 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank1.s -----------------------------------

                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c586 :                       io_init
c586 : a900             [ 2] 	lda #0				; Assume it's serial
c588 : 48               [ 3] 	pha
c589 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c58c : 2910             [ 2] 	and #0x10
c58e : d00b             [ 3] 	bne io_init_set_default
c590 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c593 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c595 : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c597 : 68               [ 4] 	pla
c598 : a901             [ 2] 	lda #1
c59a : 48               [ 3] 	pha
c59b :                       io_init_set_default
c59b : 68               [ 4] 	pla
c59c : 8d000c           [ 4] 	sta io_default
c59f : 4ca2c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c5a2 :                       io_set_default			; Entry point for default
c5a2 : ad000c           [ 4] 	lda io_default
c5a5 :                       io_active_device		; Entry point for A set
c5a5 : 0a               [ 2] 	asl	a				; x16 the Block number
c5a6 : 0a               [ 2] 	asl a
c5a7 : 0a               [ 2] 	asl a
c5a8 : 0a               [ 2] 	asl a
c5a9 : a8               [ 2] 	tay
c5aa : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c5ac :                       io_copy_data
c5ac : b920c6           [ 4] 	lda io_devices,y
c5af : 9d010c           [ 5] 	sta io_block,x
c5b2 : c8               [ 2] 	iny
c5b3 : e8               [ 2] 	inx
c5b4 : e010             [ 2] 	cpx #io_struct
c5b6 : d0f4             [ 3] 	bne io_copy_data
                             	
c5b8 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c5ba : 854a             [ 3] 	sta buf_ef
c5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c5bd :                       io_get_ch
c5bd : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank1.s -----------------------------------

                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c5c0 :                       io_put_ch
c5c0 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c3 :                       io_open_read
c5c3 : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c6 :                       io_open_write
c5c6 : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c9 :                       io_close
c5c9 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5cc :                       io_delete
c5cc : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c5cf :                       io_read_line
c5cf : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c5d1 : 8548             [ 3] 	sta buf_adr+1
c5d3 : 8449             [ 3] 	sty buf_sz			; Max length
c5d5 : 08               [ 3] 	php					; Save echo state
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank1.s -----------------------------------

c5d6 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c5d8 :                       io_get_line_byte
c5d8 : 38               [ 2] 	sec					; Getting bytes synchronously
c5d9 : 20bdc5           [ 6] 	jsr io_get_ch		; Get a byte
c5dc : b026             [ 4] 	bcs io_get_line_done; Got nothing then finish
c5de : 28               [ 4] 	plp					; Get echo state
c5df : 08               [ 3] 	php					; Instantly save it back
c5e0 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c5e2 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c5e4 : d005             [ 3] 	bne io_do_echo
c5e6 : c000             [ 2] 	cpy #0				; Already at beginning?
c5e8 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c5ea : 88               [ 2] 	dey					; Else decrement length
c5eb :                       io_do_echo
c5eb : 20c0c5           [ 6] 	jsr io_put_ch		; Echo it
c5ee :                       io_skip_echo
c5ee : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c5f0 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c5f2 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c5f4 : f003             [ 3] 	beq io_skip_special
c5f6 : 9147             [ 5] 	sta (buf_adr),y		; Save it
c5f8 : c8               [ 2] 	iny					; Increase length
c5f9 :                       io_skip_special
c5f9 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c5fb : f007             [ 4] 	beq io_get_line_done	; If yes then done
c5fd : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c5ff : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c601 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c602 : 38               [ 2] 	sec					; Yes, set carry flag
c603 : 60               [ 6] 	rts					; And done
c604 :                       io_get_line_done
c604 : a900             [ 2] 	lda #0
c606 : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c608 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c609 : 18               [ 2] 	clc					; Clear carry flag
c60a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c60b :                       io_print_line
c60b : 48               [ 3] 	pha
                             
c60c : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c60e : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c610 : a000             [ 2] 	ldy #0						; Start at the beginning!
c612 :                       io_print_line_byte
c612 : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c614 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c616 : 20c0c5           [ 6] 	jsr io_put_ch				; Transmit
c619 : c8               [ 2] 	iny
c61a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c61c :                       io_print_done
c61c : 68               [ 4] 	pla
c61d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank1.s -----------------------------------

c61e :                       io_null_op
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c620 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c620 :                       io_device0					; Serial device, input = Ser, outp
c620 : 66c1                  	dw	_get_byte			; io_get_ch
c622 : 7ec1                  	dw	_put_byte			; io_put_ch
c624 : 1ec6                  	dw	io_null_op			; io_open_r
c626 : 1ec6                  	dw	io_null_op			; io_open_w
c628 : 1ec6                  	dw	io_null_op			; io_close_f
c62a : 1ec6                  	dw	io_null_op			; io_del_f
c62c : 1ec6                  	dw	io_null_op			; io_ext1
c62e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c630 :                       io_device1					; Default device, input = screen e
c630 : 96c1                  	dw	_gr_get_key			; io_get_ch
c632 : aec1                  	dw	_gr_put_byte		; io_put_ch
c634 : 1ec6                  	dw	io_null_op			; io_open_r
c636 : 1ec6                  	dw	io_null_op			; io_open_w
c638 : 1ec6                  	dw	io_null_op			; io_close_f
c63a : 1ec6                  	dw	io_null_op			; io_del_f
c63c : 1ec6                  	dw	io_null_op			; io_ext1
c63e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c640 :                       io_device2					; SD device, input = SD, output = 
c640 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c642 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c644 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c646 : eec0                  	dw	_fs_open_write_w	; io_open_w
c648 : a6c0                  	dw	_fs_close_w			; io_close_f
c64a : 8ec0                  	dw	_fs_delete_w		; io_del_f
c64c : 1ec6                  	dw	io_null_op			; io_ext1
c64e : 1ec6                  	dw	io_null_op			; io_ext2
                             
c650 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank1.s -----------------------------------

                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c650 :                       vdp_wr_reg
c650 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c653 : ea               [ 2] 	nop
c654 : ea               [ 2] 	nop
c655 : 0980             [ 2] 	ora #0x80
c657 : 8d0105           [ 4] 	sta VDP_MODE1
c65a : 4980             [ 2] 	eor #0x80
c65c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c65d :                       vdp_wr_addr
c65d : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c660 : ea               [ 2] 	nop
c661 : ea               [ 2] 	nop
c662 : ea               [ 2] 	nop
c663 : 0940             [ 2] 	ora #0x40		; Required by VDP
c665 : 8d0105           [ 4] 	sta VDP_MODE1
c668 : 4940             [ 2] 	eor #0x40		; Undo that bit
c66a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c66b :                       vdp_mem_wait
c66b : da               [ 3] 	phx								; 3
c66c : a616             [ 3] 	ldx vdp_delay					; 3
c66e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c670 :                       vdp_mem_wait_loop
c670 : ca               [ 2] 	dex								; 2
c671 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c673 :                       vdp_mem_wait_end
c673 : fa               [ 4] 	plx								; 3
c674 : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank1.s -----------------------------------

                             ;* Regs affected : None
                             ;****************************************
c675 :                       vdp_rd_addr
c675 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c678 : ea               [ 2] 	nop
c679 : ea               [ 2] 	nop
c67a : ea               [ 2] 	nop
c67b : 8d0105           [ 4] 	sta VDP_MODE1
c67e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c680 :                       vdp_rd_vram
c680 : ad0005           [ 4] 	lda VDP_VRAM
c683 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c685 :                       vdp_wr_vram
c685 : 8d0005           [ 4] 	sta VDP_VRAM
c688 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c68a :                       vdp_poke
c68a : 08               [ 3] 	php
c68b : 48               [ 3] 	pha
c68c : 98               [ 2] 	tya
c68d : 78               [ 2] 	sei
c68e : 205dc6           [ 6] 	jsr vdp_wr_addr
c691 : 68               [ 4] 	pla
c692 : 2085c6           [ 6] 	jsr vdp_wr_vram
c695 : 28               [ 4] 	plp
c696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c697 :                       vdp_peek
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank1.s -----------------------------------

c697 : 08               [ 3] 	php
c698 : 78               [ 2] 	sei
c699 : 2075c6           [ 6] 	jsr vdp_rd_addr
c69c : 2080c6           [ 6] 	jsr vdp_rd_vram
c69f : 28               [ 4] 	plp
c6a0 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6a1 :                       snd_set
c6a1 : 48               [ 3] 	pha
                             
c6a2 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6a4 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6a7 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6aa : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6ad : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6af : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6b1 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6b4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6b6 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c6b9 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c6bc : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c6be : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c6c1 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6c3 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6c6 : 68               [ 4] 	pla
                             	
c6c7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank1.s -----------------------------------

                             ;* Regs affected : None
                             ;****************************************
c6c8 :                       snd_get
c6c8 : 48               [ 3] 	pha
                             
c6c9 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6cb : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6ce : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6d1 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6d4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6d6 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6d8 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6db : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6dd : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6e0 : a900             [ 2] 	lda #0x00				; Set Port A to input
c6e2 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6e5 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6e8 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6ea : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c6ec : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6ef : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c6f2 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6f4 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6f7 : 68               [ 4] 	pla
                             	
c6f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c6f9 :                       snd_get_joy0
c6f9 : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c6fb : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c6fe : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank1.s -----------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c6ff :                       main
                             
c6ff :                       infinity
c6ff : 2046c0           [ 6] 	jsr _df_pg_dflat
c702 : 4cffc6           [ 3] 	jmp infinity
                             
c705 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c705 : 4275696c64203a..       db "Build : 19-01-2025\r"
c718 : 3132384b204272..       db "128K Breadboard Computer\r"
c731 : 42792040363530..       db "By @6502Nerd\r"
c73e : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c752 :                       init_nmi
                             	; Core IRQ handler
c752 : a963             [ 2] 	lda #lo(nmi)
c754 : 8502             [ 3] 	sta int_nmi
c756 : a9c7             [ 2] 	lda #hi(nmi)
c758 : 8503             [ 3] 	sta int_nmi+1
                             
c75a : a9d3             [ 2] 	lda #lo(null_handler)
c75c : 850c             [ 3] 	sta int_usercia1
c75e : a9c7             [ 2] 	lda #hi(null_handler)
c760 : 850d             [ 3] 	sta int_usercia1+1
                             
c762 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c763 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank1.s -----------------------------------

                             ;* 6551 uses this - fills the receive buffer
                             ;* VIA 2 uses this- user interrupt
c763 :                       nmi
c763 : 48               [ 3] 	pha
                             
c764 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c767 : 100c             [ 3] 	bpl	nmi_skip_acia			; If no interrupt don't do a
                             
c769 : 5a               [ 3] 	phy
c76a : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c76d : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c76f : 990008           [ 5] 	sta ser_buf,y
c772 : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c774 : 7a               [ 4] 	ply
c775 :                       nmi_skip_acia
                             	;* Try PIA1 first for rapid Timer handling
c775 : ad8d04           [ 4] 	lda IO_1 + IFR
c778 : 1026             [ 3] 	bpl nmi_fin
c77a : 5a               [ 3] 	phy
c77b : da               [ 3] 	phx
                             	; Reset interrupt by reading T1C-L
c77c : ad8404           [ 4] 	lda IO_1+T1CL
                             	; Swtich to RAM bank 2 don't touch anything else
c77f : ad0004           [ 4] 	lda IO_0+PRB
c782 : 48               [ 3] 	pha                     ; Remember the bank #
c783 : 29cf             [ 2] 	and #0b11001111
c785 : 0920             [ 2] 	ora #0b00100000
c787 : 8d0004           [ 4] 	sta IO_0+PRB
                             	; Switch out ROM for RAM
c78a : ad8004           [ 4] 	lda IO_1+PRB                    ; Get current RO
c78d : 48               [ 3] 	pha
c78e : 29df             [ 2] 	and #(0xff ^ MM_DIS)            ; Switch off ROM
c790 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
c793 : 20cfc7           [ 6] 	jsr call_irq_usercia1			; Call user cia1 handler
                             	; Restore ROM
c796 : 68               [ 4] 	pla                             ; Get original p
c797 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
                             	; Restore RAM bank
c79a : 68               [ 4] 	pla                             ; Get original p
c79b : 8d0004           [ 4] 	sta IO_0+PRB                    ; Update port to
c79e : fa               [ 4] 	plx
c79f : 7a               [ 4] 	ply
c7a0 :                       nmi_fin
c7a0 : 68               [ 4] 	pla
c7a1 : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c7a2 :                       init_irq
                             	; Core IRQ handler
c7a2 : a9d4             [ 2] 	lda #lo(irq)
c7a4 : 8504             [ 3] 	sta int_irq
c7a6 : a9c7             [ 2] 	lda #hi(irq)
c7a8 : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c7aa : a9fa             [ 2] 	lda #lo(irq_brk)
c7ac : 8506             [ 3] 	sta int_brk
c7ae : a9c7             [ 2] 	lda #hi(irq_brk)
c7b0 : 8507             [ 3] 	sta int_brk+1
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank1.s -----------------------------------

                             
                             	; User handlers for VDP, PIA0 interrupts
c7b2 : a9d3             [ 2] 	lda #lo(null_handler)
c7b4 : 8508             [ 3] 	sta int_uservdp
c7b6 : a9c7             [ 2] 	lda #hi(null_handler)
c7b8 : 8509             [ 3] 	sta int_uservdp+1
                             
c7ba : a9d3             [ 2] 	lda #lo(null_handler)
c7bc : 850a             [ 3] 	sta int_usercia0
c7be : a9c7             [ 2] 	lda #hi(null_handler)
c7c0 : 850b             [ 3] 	sta int_usercia0+1
                             
c7c2 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c7c3 :                       call_irq_master
c7c3 : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c7c6 :                       call_irq_brk
c7c6 : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c7c9 :                       call_irq_uservdp
c7c9 : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c7cc :                       call_irq_usercia0
c7cc : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c7cf :                       call_irq_usercia1
c7cf : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c7d2 :                       null_irq
c7d2 : 40               [ 6] 	rti
                             
                             ;* null handler
c7d3 :                       null_handler
c7d3 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c7d4 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c7d7 : ba               [ 2] 	tsx
c7d8 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c7db : 2910             [ 2] 	and #0x10
c7dd : d0e7             [ 3] 	bne call_irq_brk
                             	
c7df : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try VDP next
c7e0 :                       irq_check_vdp	
c7e0 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c7e3 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank1.s -----------------------------------

c7e5 : 20c9c7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c7e8 : 2047c8           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c7eb : 2025c8           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c7ee :                       irq_check_cia0
c7ee : ad0d04           [ 4] 	lda IO_0 + IFR
c7f1 : 1003             [ 3] 	bpl irq_fin
c7f3 : 20ccc7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c7f6 :                       irq_fin
                             	_pullAXY
                             
c7f9 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c7fa :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c7fa : 38               [ 2] 	sec
c7fb : bd0501           [ 4] 	lda 0x0105,x
c7fe : e902             [ 2] 	sbc #2
c800 : 85a4             [ 3] 	sta df_brkpc
c802 : bd0601           [ 4] 	lda 0x0106,x
c805 : e900             [ 2] 	sbc #0
c807 : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c809 : a001             [ 2] 	ldy #1
c80b : b1a4             [ 5] 	lda (df_brkpc),y
c80d : 85a6             [ 3] 	sta df_brkval
c80f : 859f             [ 3] 	sta errno
                             	; now update the return address
c811 : a5a2             [ 3] 	lda df_pc
c813 : 9d0501           [ 5] 	sta 0x105,x
c816 : a5a3             [ 3] 	lda df_pc+1
c818 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c81e : 8585             [ 3] 	sta num_a
c820 : 8686             [ 3] 	stx num_a+1
c822 : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c824 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c825 :                       int_kb_handler	
c825 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c827 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c829 : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c82c : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c82e : f00c             [ 3] 	beq int_keys_up
c830 :                       int_do_read
c830 : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c832 : a53b             [ 3] 	lda kb_debounce			; Set debounce
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank1.s -----------------------------------

c834 : 8537             [ 3] 	sta kb_deb
c836 :                       int_skip_scan
c836 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c838 : 8d0d04           [ 4] 	sta IO_0 + IFR
c83b : 60               [ 6] 	rts
c83c :                       int_keys_up					; No key pressed
c83c : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c83e : 6434             [ 3] 	stz kb_last
c840 : 6435             [ 3] 	stz kb_code
c842 : 6437             [ 3] 	stz kb_deb
c844 : 6438             [ 3] 	stz kb_rep
c846 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c847 :                       int_vdp_handler
c847 : 2073c8           [ 6] 	jsr update_timers	; If it is then update system 
                             
c84a : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c84c : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c84e : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c850 : a513             [ 3] 	lda vdp_curstat		; Check it
c852 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c854 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c856 : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c858 : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c85a : 8513             [ 3] 	sta vdp_curstat		
                             
c85c : 18               [ 2] 	clc					; Add offset for cursor address in vram
c85d : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c85f : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c861 : aa               [ 2] 	tax
c862 : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c864 : 6900             [ 2] 	adc #0
                             
c866 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
c869 : a513             [ 3] 	lda vdp_curstat
c86b : 2980             [ 2] 	and #0x80
c86d : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c86f : 2085c6           [ 6] 	jsr vdp_wr_vram
c872 :                       int_vdp_fin	
c872 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c873 :                       update_timers
c873 : e610             [ 5] 	inc vdp_int_cnt
c875 : d002             [ 3] 	bne inc_kb_timers
c877 : e611             [ 5] 	inc vdp_int_cnt+1
c879 :                       inc_kb_timers
c879 : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c87b : f002             [ 3] 	beq skip_kb_deb
c87d : c637             [ 5] 	dec kb_deb
c87f :                       skip_kb_deb
c87f : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank1.s -----------------------------------

c881 : f002             [ 3] 	beq skip_kb_rep
c883 : c638             [ 5] 	dec kb_rep
c885 :                       skip_kb_rep
c885 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c886 :                       long_delay
c886 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c88a : a000             [ 2] 	ldy #0x00
c88c :                       long_delay_1
c88c : ea               [ 2] 	nop
c88d : ea               [ 2] 	nop
c88e : ea               [ 2] 	nop
c88f : ea               [ 2] 	nop
c890 : 88               [ 2] 	dey
c891 : d0f9             [ 3] 	bne long_delay_1
c893 : ca               [ 2] 	dex
c894 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c899 : 28               [ 4] 	plp
                             	
c89a : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank1.s -----------------------------------

                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c89b :                       utilPrintSPC
c89b : 48               [ 3] 	pha
c89c : a920             [ 2] 	lda #' '
c89e : 20c0c5           [ 6] 	jsr io_put_ch
c8a1 : 68               [ 4] 	pla
c8a2 : 60               [ 6] 	rts
                             
c8a3 :                       utilPrintCRLF
c8a3 : 48               [ 3] 	pha
c8a4 : a90d             [ 2] 	lda #UTF_CR
c8a6 : 20c0c5           [ 6] 	jsr io_put_ch
c8a9 : 68               [ 4] 	pla
c8aa : 60               [ 6] 	rts
                             
c8ab :                       utilPrintA
c8ab : 8545             [ 3] 	sta tmp_d
c8ad : 48               [ 3] 	pha
c8ae : 8a               [ 2] 	txa
c8af : 48               [ 3] 	pha
c8b0 : a545             [ 3] 	lda tmp_d
c8b2 : 20d0c8           [ 6] 	jsr str_a_to_x
c8b5 : 20c0c5           [ 6] 	jsr io_put_ch
c8b8 : 8a               [ 2] 	txa
c8b9 : 20c0c5           [ 6] 	jsr io_put_ch
c8bc : 68               [ 4] 	pla
c8bd : aa               [ 2] 	tax
c8be : 68               [ 4] 	pla
c8bf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c8c0 :                       util_clr_mem
c8c0 : 48               [ 3] 	pha
c8c1 : 5a               [ 3] 	phy
c8c2 : 863f             [ 3] 	stx tmp_v1
c8c4 : 8540             [ 3] 	sta tmp_v1+1
c8c6 : a900             [ 2] 	lda #0
c8c8 :                       mem_clr_byte
c8c8 : 88               [ 2] 	dey
c8c9 : 913f             [ 5] 	sta (tmp_v1),y
c8cb : d0fb             [ 3] 	bne mem_clr_byte
c8cd : 7a               [ 4] 	ply
c8ce : 68               [ 4] 	pla
c8cf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank1.s -----------------------------------

                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c8d0 :                       str_a_to_x
c8d0 : 48               [ 3] 	pha					; Save the byte using later on
c8d1 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c8d3 : 18               [ 2] 	clc
c8d4 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8d6 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8d8 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c8da : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8dc :                       skip_a_f_1
c8dc : aa               [ 2] 	tax					; Low char is in X
c8dd : 68               [ 4] 	pla					; Get byte back
c8de : 4a               [ 2] 	lsr a				; Make high nibble low
c8df : 4a               [ 2] 	lsr a
c8e0 : 4a               [ 2] 	lsr a
c8e1 : 4a               [ 2] 	lsr a
c8e2 : 18               [ 2] 	clc
c8e3 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8e5 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8e7 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c8e9 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8eb :                       skip_a_f_2
                             
c8eb : 18               [ 2] 	clc					; No error
c8ec : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c8ed :                       str_x_to_a
c8ed : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c8ef : 38               [ 2] 	sec					; Process high char in A
c8f0 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c8f2 : c90a             [ 2] 	cmp #10				; If A < 10 then
c8f4 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c8f6 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c8f8 :                       skip_x_f_1
c8f8 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c8fa : b01d             [ 4] 	bcs	str_x_to_a_err	; Error if not
                             
c8fc : 0a               [ 2] 	asl a				; This is the high nibble
c8fd : 0a               [ 2] 	asl a
c8fe : 0a               [ 2] 	asl a
c8ff : 0a               [ 2] 	asl a
c900 : 48               [ 3] 	pha					; Save the high nibble
c901 : 8a               [ 2] 	txa					; Now process the low char in X
c902 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c904 : 38               [ 2] 	sec
c905 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c907 : c90a             [ 2] 	cmp #10				; If A < 10 then
c909 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c90b : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c90d :                       skip_x_f_2
c90d : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank1.s -----------------------------------

c90f : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c911 : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c913 : 68               [ 4] 	pla					; Get high nibble
c914 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c916 : 18               [ 2] 	clc					; No error
c917 : 60               [ 6] 	rts					; A contains value
                             
c918 :                       str_x_to_a_errl
c918 : 68               [ 4] 	pla
c919 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c91b :                       con_n_to_a
c91b : 8691             [ 3] 	stx num_tmp
c91d : 8592             [ 3] 	sta num_tmp+1
c91f : 6485             [ 3] 	stz num_a
c921 : 6486             [ 3] 	stz num_a+1
c923 : c000             [ 2] 	cpy #NUM_ANY
c925 : f014             [ 3] 	beq con_n_to_a_detect
c927 : 88               [ 2] 	dey
c928 : d003             [ 3] 	bne con_n_not_dec
c92a :                       con_dec_jmp
c92a : 4cbec9           [ 3] 	jmp con_dec_to_a_int
c92d :                       con_n_not_dec
c92d : 88               [ 2] 	dey
c92e : d003             [ 3] 	bne con_n_not_hex
c930 :                       con_hex_jmp
c930 : 4c55c9           [ 3] 	jmp con_hex_to_a_int
c933 :                       con_n_not_hex
c933 : 88               [ 2] 	dey
c934 : d003             [ 3] 	bne con_n_err
c936 :                       con_bin_jmp
c936 : 4c94c9           [ 3] 	jmp con_bin_to_a_int
c939 :                       con_n_err
c939 : 38               [ 2] 	sec
c93a : 60               [ 6] 	rts
c93b :                       con_n_to_a_detect
c93b : b291             [ 5] 	lda (num_tmp)
c93d : c930             [ 2] 	cmp #'0'
c93f : d0e9             [ 3] 	bne con_dec_jmp
c941 : a001             [ 2] 	ldy #1
c943 : b191             [ 5] 	lda (num_tmp),y
c945 : 0920             [ 2] 	ora #0x20
c947 : c978             [ 2] 	cmp #'x'
c949 : f0e5             [ 3] 	beq con_hex_jmp
c94b : c962             [ 2] 	cmp #'b'
c94d : f0e7             [ 3] 	beq con_bin_jmp
c94f : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank1.s -----------------------------------

                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c951 :                       con_hex_to_a
c951 : 8691             [ 3] 	stx num_tmp
c953 : 8592             [ 3] 	sta num_tmp+1
c955 :                       con_hex_to_a_int
c955 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c957 : a002             [ 2] 	ldy #2			; start at first digit
c959 :                       con_hex_digit
c959 : b191             [ 5] 	lda (num_tmp),y
c95b : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c95d : 38               [ 2] 	sec							; Process high char in A
c95e : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c960 : c90a             [ 2] 	cmp #10						; If A < 10 then
c962 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c964 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c966 :                       con_hex_skip_x_f_1
c966 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c968 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c96a : 48               [ 3] 	pha
                             	; make room for lo nibble
c96b : 0685             [ 5] 	asl num_a
c96d : 2686             [ 5] 	rol num_a+1
c96f : 0685             [ 5] 	asl num_a
c971 : 2686             [ 5] 	rol num_a+1
c973 : 0685             [ 5] 	asl num_a
c975 : 2686             [ 5] 	rol num_a+1
c977 : 0685             [ 5] 	asl num_a
c979 : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c97b : 68               [ 4] 	pla
c97c : 0585             [ 3] 	ora num_a
c97e : 8585             [ 3] 	sta num_a
c980 : c8               [ 2] 	iny
c981 : ca               [ 2] 	dex
c982 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c984 :                       con_hex_err
c984 : 38               [ 2] 	sec
c985 : 60               [ 6] 	rts
                             	; found a non-hex digit
c986 :                       con_hex_done
                             	; if no digits processed then error
c986 : c002             [ 2] 	cpy #2
c988 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c98a : 98               [ 2] 	tya
c98b : aa               [ 2] 	tax
c98c : a902             [ 2] 	lda #NUM_HEX
c98e : 18               [ 2] 	clc
c98f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank1.s -----------------------------------

c990 :                       con_bin_to_a
c990 : 8691             [ 3] 	stx num_tmp
c992 : 8592             [ 3] 	sta num_tmp+1
c994 :                       con_bin_to_a_int
c994 : a002             [ 2] 	ldy #2
c996 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c998 :                       con_bin_digit
c998 : b191             [ 5] 	lda (num_tmp),y
c99a : c930             [ 2] 	cmp #'0'
c99c : 9010             [ 3] 	bcc con_bin_done
c99e : c932             [ 2] 	cmp #'1'+1
c9a0 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c9a2 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c9a4 : 2685             [ 5] 	rol num_a
c9a6 : 2686             [ 5] 	rol num_a+1
c9a8 : c8               [ 2] 	iny
c9a9 : ca               [ 2] 	dex
c9aa : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c9ac : 800a             [ 3] 	bra con_bin_err
c9ae :                       con_bin_done
                             	; didn't process any digit = error
c9ae : c002             [ 2] 	cpy #2
c9b0 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c9b2 : 98               [ 2] 	tya
c9b3 : aa               [ 2] 	tax
c9b4 : a903             [ 2] 	lda #NUM_BIN
c9b6 : 18               [ 2] 	clc
c9b7 : 60               [ 6] 	rts
c9b8 :                       con_bin_err
c9b8 : 38               [ 2] 	sec
c9b9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c9ba :                       con_dec_to_a
c9ba : 8691             [ 3] 	stx num_tmp
c9bc : 8592             [ 3] 	sta num_tmp+1
c9be :                       con_dec_to_a_int
c9be : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c9c0 : b291             [ 5] 	lda (num_tmp)
c9c2 : c92d             [ 2] 	cmp #'-'
c9c4 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c9c6 : c8               [ 2] 	iny
c9c7 :                       str_d_find_end
c9c7 : b191             [ 5] 	lda (num_tmp),y
c9c9 : c930             [ 2] 	cmp #'0'
c9cb : 9007             [ 3] 	bcc str_d_found_end
c9cd : c93a             [ 2] 	cmp #'9'+1
c9cf : b003             [ 3] 	bcs str_d_found_end
c9d1 : c8               [ 2] 	iny
c9d2 : 80f3             [ 3] 	bra str_d_find_end
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank1.s -----------------------------------

c9d4 :                       str_d_found_end
c9d4 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c9d6 : b052             [ 4] 	bcs str_d_error		; e.g. -32767 including minus
c9d8 : 8494             [ 3] 	sty num_tmp+3
c9da : 6493             [ 3] 	stz num_tmp+2
c9dc : 6485             [ 3] 	stz num_a
c9de : 6486             [ 3] 	stz num_a+1
c9e0 :                       str_d_process_digit
c9e0 : 88               [ 2] 	dey
c9e1 : 3026             [ 4] 	bmi str_d_digits_done
                             
c9e3 : b191             [ 5] 	lda (num_tmp),y
                             
c9e5 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c9e7 : f020             [ 4] 	beq str_d_digits_done ; also done
                             
c9e9 : 38               [ 2] 	sec
c9ea : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c9ec : 18               [ 2] 	clc
c9ed : 0a               [ 2] 	asl a
c9ee : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c9f0 : aa               [ 2] 	tax
c9f1 : a585             [ 3] 	lda num_a
c9f3 : 7d2cca           [ 4] 	adc str_d_powers,x
c9f6 : 8585             [ 3] 	sta num_a
c9f8 : a586             [ 3] 	lda num_a+1
c9fa : 7d2dca           [ 4] 	adc str_d_powers+1,x
c9fd : 8586             [ 3] 	sta num_a+1
c9ff : b029             [ 4] 	bcs str_d_error
                             	; Move to next power of 10 index
ca01 : a593             [ 3] 	lda num_tmp+2
ca03 : 6914             [ 2] 	adc #20
ca05 : 8593             [ 3] 	sta num_tmp+2
ca07 : 80d7             [ 4] 	bra str_d_process_digit
ca09 :                       str_d_digits_done
                             	; check if minus
ca09 : b291             [ 5] 	lda (num_tmp)
ca0b : c92d             [ 2] 	cmp #'-'
ca0d : d011             [ 3] 	bne str_d_skip_neg
ca0f : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
ca11 : e002             [ 2] 	cpx #2				; else it's an error
ca13 : 9015             [ 3] 	bcc str_d_error
ca15 : a685             [ 3] 	ldx num_a
ca17 : a586             [ 3] 	lda num_a+1
ca19 : 2090ca           [ 6] 	jsr twos_complement
ca1c : 8685             [ 3] 	stx num_a
ca1e : 8586             [ 3] 	sta num_a+1
ca20 :                       str_d_skip_neg
ca20 : a694             [ 3] 	ldx num_tmp+3
ca22 : e001             [ 2] 	cpx #1				; must be at least 1 char
ca24 : 9004             [ 3] 	bcc str_d_error
ca26 : a901             [ 2] 	lda #NUM_DEC
ca28 : 18               [ 2] 	clc
ca29 : 60               [ 6] 	rts
ca2a :                       str_d_error
ca2a : 38               [ 2] 	sec
ca2b : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank1.s -----------------------------------

ca2c :                       str_d_powers
ca2c : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
ca40 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
ca54 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
ca68 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
ca7c : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
ca90 :                       twos_complement
ca90 : 49ff             [ 2] 	eor #0xff
ca92 : 48               [ 3] 	pha
ca93 : 8a               [ 2] 	txa
ca94 : 49ff             [ 2] 	eor #0xff
ca96 : aa               [ 2] 	tax
ca97 : 68               [ 4] 	pla
ca98 : e8               [ 2] 	inx
ca99 : d001             [ 3] 	bne twos_complement_skip_X
ca9b : 1a               [ 2] 	inc a
ca9c :                       twos_complement_skip_X
ca9c : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
ca9d :                       int_to_bcd
ca9d : 08               [ 3] 	php
ca9e : 48               [ 3] 	pha
ca9f : da               [ 3] 	phx
                             
caa0 : 8691             [ 3] 	stx num_tmp
caa2 : 8592             [ 3] 	sta num_tmp+1
caa4 : c980             [ 2] 	cmp #0x80			; Negative?
caa6 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
caa8 : 2090ca           [ 6] 	jsr twos_complement
caab :                       int_to_bcd_skip_neg
caab : 6485             [ 3] 	stz num_a
caad : 6486             [ 3] 	stz num_a+1
caaf : 6487             [ 3] 	stz num_a+2
cab1 : 6488             [ 3] 	stz num_a+3
cab3 : a210             [ 2] 	ldx #16
cab5 : f8               [ 2] 	sed
cab6 :                       int_to_bcd_bit
cab6 : 0691             [ 5] 	asl num_tmp
cab8 : 2692             [ 5] 	rol num_tmp+1
caba : a585             [ 3] 	lda num_a
cabc : 6585             [ 3] 	adc num_a
cabe : 8585             [ 3] 	sta num_a
cac0 : a586             [ 3] 	lda num_a+1
cac2 : 6586             [ 3] 	adc num_a+1
cac4 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank1.s -----------------------------------

cac6 : a587             [ 3] 	lda num_a+2
cac8 : 6587             [ 3] 	adc num_a+2
caca : 8587             [ 3] 	sta num_a+2
cacc : ca               [ 2] 	dex
cacd : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
cacf : fa               [ 4] 	plx
cad0 : 68               [ 4] 	pla
cad1 : 28               [ 4] 	plp
cad2 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
cad3 :                       word_to_bcd
cad3 : 08               [ 3] 	php
cad4 : 48               [ 3] 	pha
cad5 : da               [ 3] 	phx
                             
cad6 : 8691             [ 3] 	stx num_tmp
cad8 : 8592             [ 3] 	sta num_tmp+1
cada : 6485             [ 3] 	stz num_a
cadc : 6486             [ 3] 	stz num_a+1
cade : 6487             [ 3] 	stz num_a+2
cae0 : 6488             [ 3] 	stz num_a+3
cae2 : a210             [ 2] 	ldx #16			; 16 binary bits
cae4 : f8               [ 2] 	sed
cae5 :                       word_to_bcd_bit
cae5 : 0691             [ 5] 	asl num_tmp
cae7 : 2692             [ 5] 	rol num_tmp+1
cae9 : a585             [ 3] 	lda num_a
caeb : 6585             [ 3] 	adc num_a
caed : 8585             [ 3] 	sta num_a
caef : a586             [ 3] 	lda num_a+1
caf1 : 6586             [ 3] 	adc num_a+1
caf3 : 8586             [ 3] 	sta num_a+1
caf5 : a587             [ 3] 	lda num_a+2
caf7 : 6587             [ 3] 	adc num_a+2
caf9 : 8587             [ 3] 	sta num_a+2
cafb : ca               [ 2] 	dex
cafc : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
cafe : fa               [ 4] 	plx
caff : 68               [ 4] 	pla
cb00 : 28               [ 4] 	plp
cb01 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
cb02 :                       int_to_str_ch
cb02 : 290f             [ 2] 	and #0xf
cb04 : 0930             [ 2] 	ora #0x30					; Convert to ascii
cb06 : 4930             [ 2] 	eor #0x30					; Check if zero digit
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank1.s -----------------------------------

cb08 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
cb0a : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
cb0c : 4930             [ 2] 	eor #0x30					; Restore A
cb0e : 60               [ 6] 	rts							; Return without storing anything
cb0f :                       int_to_str_nz
cb0f : 4930             [ 2] 	eor #0x30					; Restore A
cb11 : 999500           [ 5] 	sta num_buf,y
cb14 : c8               [ 2] 	iny
cb15 : 38               [ 2] 	sec							; Set C as a non-zero encountered
cb16 :                       int_to_str_ch_fin
cb16 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
cb17 :                       int_to_str
                             	_pushAXY
                             
cb1a : a000             [ 2] 	ldy #0						; first pos of num_buf
cb1c : 0900             [ 2] 	ora #0						; Test A for sign bit
cb1e : 08               [ 3] 	php							; Remember C bit of P
cb1f : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
cb21 : 2090ca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
cb24 : 48               [ 3] 	pha							; Remember A
cb25 : a92d             [ 2] 	lda #'-'					; Put in negative sign
cb27 : 8595             [ 3] 	sta num_buf
cb29 : c8               [ 2] 	iny							; Start at second buffer pos
cb2a : 68               [ 4] 	pla							; Restore A
cb2b :                       int_to_str_skip_neg
cb2b : 20d3ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
cb2e : a202             [ 2] 	ldx #2						; Start at BCD high byte
cb30 :                       int_str
cb30 : 28               [ 4] 	plp							; Get C but immediately
cb31 : 08               [ 3] 	php							; Save C (due to loop check later)
cb32 : b585             [ 4] 	lda num_a,x					; Get BCD digit
cb34 : 859c             [ 3] 	sta num_buf+7				; Save A it for the units later
cb36 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cb37 : 4a               [ 2] 	lsr a
cb38 : 4a               [ 2] 	lsr a
cb39 : 4a               [ 2] 	lsr a
cb3a : 28               [ 4] 	plp							; Get C
cb3b : 2002cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb3e : a59c             [ 3] 	lda num_buf+7				; Get A for the units
cb40 : 2002cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb43 : 08               [ 3] 	php							; Save C
cb44 : ca               [ 2] 	dex
cb45 : 10e9             [ 3] 	bpl int_str
cb47 : 28               [ 4] 	plp							; Check C
cb48 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cb4a : a930             [ 2] 	lda #'0'					; Stuff a zero
cb4c : 8595             [ 3] 	sta num_buf					; Must be in first position..
cb4e : c8               [ 2] 	iny
cb4f :                       int_to_str_fin
cb4f : a900             [ 2] 	lda #0						; Terminator
cb51 : 999500           [ 5] 	sta num_buf,y
cb54 : c8               [ 2] 	iny
                             	_pullAXY
                             
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank1.s -----------------------------------

cb58 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank1.s -----------------------------------

                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb59 :                       str_a_to_d
cb59 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb5a :                       print_a_to_d
cb5a : 2017cb           [ 6] 	jsr int_to_str
cb5d : a000             [ 2] 	ldy #0
cb5f :                       print_a_to_d_ch
cb5f : b99500           [ 4] 	lda num_buf,y
cb62 : f006             [ 3] 	beq print_a_to_d_fin
cb64 : 20c0c5           [ 6] 	jsr io_put_ch
cb67 : c8               [ 2] 	iny
cb68 : d0f5             [ 3] 	bne print_a_to_d_ch
cb6a :                       print_a_to_d_fin
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank1.s -----------------------------------

cb6a : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cb6b :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cb6b : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cb6d : 9a               [ 2] 	txs
cb6e : 4cc9cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cb71 :                       init_2					; init_ram will jump back to here
                             	
cb71 : 2077cb           [ 6] 	jsr kernel_init
                             
cb74 : 4cffc6           [ 3] 	jmp main
                             
cb77 :                       kernel_init
cb77 : 2052c7           [ 6] 	jsr init_nmi		; Initialise NMI handling
cb7a : 20a2c7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cb7d : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cb80 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cb83 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
cb86 : 2026c5           [ 6] 	jsr _PT3INIT		; Load PT3 player code into shadow
cb89 :                       kernel_test
cb89 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cb8c : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cb8f : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cb92 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cb94 : 48               [ 3] 	pha
cb95 : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cb97 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cb9a : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cb9c : aa               [ 2] 	tax					; Save the mode temporarily
cb9d : 68               [ 4] 	pla					; Get the default mode from stack
cb9e : 8a               [ 2] 	txa					; And push the NV mode that was read
cb9f : 48               [ 3] 	pha
cba0 : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cba2 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cba5 : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cba7 :                       kernel_skip_nv	
cba7 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cba8 : 20c6c1           [ 6] 	jsr _gr_init_screen
cbab : 2086c5           [ 6] 	jsr io_init			; Set default input/output device
cbae : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cbbc : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cbbf : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cbc2 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cbc5 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cbc8 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank1.s -----------------------------------

                             ;* Zeroes all addressable RAM in the default bank
cbc9 :                       init_ram
cbc9 : 6400             [ 3] 	stz 0x00			; Start at page 0
cbcb : 6401             [ 3] 	stz 0x01
cbcd : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cbcf : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cbd1 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cbd3 :                       init_ram_1
cbd3 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cbd5 : 9004             [ 3] 	bcc init_ram_fill
cbd7 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cbd9 : 9005             [ 3] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cbdb :                       init_ram_fill
cbdb : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cbdd : c8               [ 2] 	iny
cbde : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cbe0 :                       init_ram_skip
cbe0 : e8               [ 2] 	inx					; Increment page counter
cbe1 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cbe3 : d0ee             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cbe5 : 4c71cb           [ 3] 	jmp init_2			; Carry on initialisation
                             
cbe8 :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "utils\intmath.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
cbe8 :                       int_add
cbe8 : 18               [ 2] 	clc
cbe9 : a585             [ 3] 	lda num_a
cbeb : 6589             [ 3] 	adc num_b
cbed : 8585             [ 3] 	sta num_a
cbef : a586             [ 3] 	lda num_a+1
cbf1 : 658a             [ 3] 	adc num_b+1
cbf3 : 8586             [ 3] 	sta num_a+1
cbf5 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank1.s -----------------------------------

                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
cbf6 :                       int_sub
cbf6 : 38               [ 2] 	sec
cbf7 : a585             [ 3] 	lda num_a
cbf9 : e589             [ 3] 	sbc num_b
cbfb : 8585             [ 3] 	sta num_a
cbfd : a586             [ 3] 	lda num_a+1
cbff : 658a             [ 3] 	adc num_b+1
cc01 : 8586             [ 3] 	sta num_a+1
cc03 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
cc04 :                       int_swp
cc04 : a585             [ 3] 	lda num_a
cc06 : a689             [ 3] 	ldx num_b
cc08 : 8589             [ 3] 	sta num_b
cc0a : 8685             [ 3] 	stx num_a
cc0c : a586             [ 3] 	lda num_a+1
cc0e : a68a             [ 3] 	ldx num_b+1
cc10 : 858a             [ 3] 	sta num_b+1
cc12 : 8686             [ 3] 	stx num_a+1
cc14 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
cc15 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
cc1d : 6485             [ 3] 	stz num_a
cc1f : 6486             [ 3] 	stz num_a+1
cc21 : a008             [ 2] 	ldy #8
cc23 :                       int_fast_mult_cycle
cc23 : 4689             [ 5] 	lsr num_b
cc25 : 900d             [ 3] 	bcc int_fast_mult_next
cc27 : 18               [ 2] 	clc
cc28 : a585             [ 3] 	lda num_a
cc2a : 6591             [ 3] 	adc num_tmp
cc2c : 8585             [ 3] 	sta num_a
cc2e : a586             [ 3] 	lda num_a+1
cc30 : 6592             [ 3] 	adc num_tmp+1
cc32 : 8586             [ 3] 	sta num_a+1
cc34 :                       int_fast_mult_next
cc34 : 0691             [ 5] 	asl num_tmp
cc36 : 2692             [ 5] 	rol num_tmp+1
cc38 : 88               [ 2] 	dey
cc39 : d0e8             [ 3] 	bne int_fast_mult_cycle
cc3b : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
cc3c :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
cc44 : 6485             [ 3] 	stz num_a
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank1.s -----------------------------------

cc46 : 6486             [ 3] 	stz num_a+1
cc48 : a010             [ 2] 	ldy #16
cc4a :                       int_mult_cycle
cc4a : 468a             [ 5] 	lsr num_b+1
cc4c : 6689             [ 5] 	ror num_b
cc4e : 900d             [ 3] 	bcc int_mult_next
cc50 : 18               [ 2] 	clc
cc51 : a585             [ 3] 	lda num_a
cc53 : 6591             [ 3] 	adc num_tmp
cc55 : 8585             [ 3] 	sta num_a
cc57 : a586             [ 3] 	lda num_a+1
cc59 : 6592             [ 3] 	adc num_tmp+1
cc5b : 8586             [ 3] 	sta num_a+1
cc5d :                       int_mult_next
cc5d : 0691             [ 5] 	asl num_tmp
cc5f : 2692             [ 5] 	rol num_tmp+1
cc61 : 88               [ 2] 	dey
cc62 : d0e6             [ 3] 	bne int_mult_cycle
cc64 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
cc65 :                       int_div
                             	; adjust signs
cc65 : 6491             [ 3] 	stz num_tmp				; Assume all +ve
cc67 : a586             [ 3] 	lda num_a+1				; Check A hi
cc69 : 100f             [ 3] 	bpl int_div_skip_negA
cc6b : e691             [ 5] 	inc num_tmp				; Record sign flip
cc6d : 38               [ 2] 	sec						; 2's complement A
cc6e : a900             [ 2] 	lda #0					; by 0-A
cc70 : e585             [ 3] 	sbc num_a				; A is now +ve
cc72 : 8585             [ 3] 	sta num_a
cc74 : a900             [ 2] 	lda #0
cc76 : e586             [ 3] 	sbc num_a+1
cc78 : 8586             [ 3] 	sta num_a+1	
cc7a :                       int_div_skip_negA
cc7a : a58a             [ 3] 	lda num_b+1				; Check B hi
cc7c : 100f             [ 3] 	bpl int_div_skip_negB
cc7e : e691             [ 5] 	inc num_tmp				; Record sign flip
cc80 : 38               [ 2] 	sec						; 2's complement B
cc81 : a900             [ 2] 	lda #0					; by 0-B
cc83 : e589             [ 3] 	sbc num_b				; B is now +ve
cc85 : 8589             [ 3] 	sta num_b
cc87 : a900             [ 2] 	lda #0
cc89 : e58a             [ 3] 	sbc num_b+1
cc8b : 858a             [ 3] 	sta num_b+1
cc8d :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
cc8d : 648d             [ 3] 	stz num_x
cc8f : 648e             [ 3] 	stz num_x+1
                             	; 16 bit division
cc91 : a010             [ 2] 	ldy #16
cc93 :                       int_div_cycle
                             	; shift a left 1 bit
cc93 : 0685             [ 5] 	asl num_a
cc95 : 2686             [ 5] 	rol num_a+1
                             	; shift in to remainder
cc97 : 268d             [ 5] 	rol num_x
cc99 : 268e             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
cc9b : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank1.s -----------------------------------

cc9c : a58d             [ 3] 	lda num_x
cc9e : e589             [ 3] 	sbc num_b
cca0 : aa               [ 2] 	tax
cca1 : a58e             [ 3] 	lda num_x+1
cca3 : e58a             [ 3] 	sbc num_b+1
cca5 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
cca7 : 868d             [ 3] 	stx num_x
cca9 : 858e             [ 3] 	sta num_x+1
ccab : e685             [ 5] 	inc num_a
ccad :                       int_div_skip
                             	; carry on for 16 bits
ccad : 88               [ 2] 	dey
ccae : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
ccb0 : a591             [ 3] 	lda num_tmp
ccb2 : 2901             [ 2] 	and #1
ccb4 : f00d             [ 3] 	beq int_div_noflip
ccb6 : 38               [ 2] 	sec						; 2's complement A
ccb7 : a900             [ 2] 	lda #0					; by 0-A
ccb9 : e585             [ 3] 	sbc num_a				; A is now +ve
ccbb : 8585             [ 3] 	sta num_a
ccbd : a900             [ 2] 	lda #0
ccbf : e586             [ 3] 	sbc num_a+1
ccc1 : 8586             [ 3] 	sta num_a+1	
ccc3 :                       int_div_noflip
ccc3 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat\dflat.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
ccc4 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank1.s -----------------------------------

                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
ccc4 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
ccc4 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
ccd4 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
ccd4 : a5e3             [ 3] 	lda df_tmpptra
ccd6 : c5af             [ 3] 	cmp df_vvtstrt
ccd8 : d006             [ 3] 	bne df_var_match_vnt_do
ccda : a5e4             [ 3] 	lda df_tmpptra+1
ccdc : c5b0             [ 3] 	cmp df_vvtstrt+1
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank1.s -----------------------------------

ccde : f042             [ 4] 	beq df_var_find_no_vnt
cce0 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
cce0 : a4be             [ 3] 	ldy df_linoff
cce2 : a200             [ 2] 	ldx #0
cce4 :                       df_var_match_vnt_sym
cce4 : b9000a           [ 4] 	lda df_linbuff,y
cce7 : c1e5             [ 6] 	cmp (df_tmpptrb,x)
cce9 : d017             [ 4] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
cceb : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
ccf2 : a1e5             [ 6] 	lda (df_tmpptrb,x)
ccf4 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
ccf6 : b9000a           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
ccf9 : 20a2ce           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
ccfc : b004             [ 4] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
ccfe :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
ccfe : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
cd00 : d025             [ 3] 	bne df_var_find_true
cd02 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
cd02 : a1e5             [ 6] 	lda (df_tmpptrb,x)
cd04 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
cd0c : 4c02cd           [ 3] 	jmp df_var_vnt_sym_nomatch
cd0f :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
cd15 : 18               [ 2] 	clc
cd16 : a5e3             [ 3] 	lda df_tmpptra
cd18 : 6908             [ 2] 	adc #8
cd1a : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
cd1e : e6e4             [ 5] 	inc df_tmpptra+1
cd20 : d0b2             [ 4] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
cd22 :                       df_var_find_no_vnt
cd22 : a900             [ 2] 	lda #0
cd24 : aa               [ 2] 	tax
cd25 : 38               [ 2] 	sec
cd26 : 60               [ 6] 	rts
                             
cd27 :                       df_var_find_true
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank1.s -----------------------------------

                             	; Get slot address into x,a
cd27 : a6e3             [ 3] 	ldx df_tmpptra
cd29 : a5e4             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
cd2b : 84be             [ 3] 	sty df_linoff
cd2d : 18               [ 2] 	clc
cd2e : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
cd2f :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
cd2f : 38               [ 2] 	sec
cd30 : a5ab             [ 3] 	lda df_vntstrt
cd32 : e908             [ 2] 	sbc #DFVVT_SZ
cd34 : 85ab             [ 3] 	sta df_vntstrt
cd36 : a5ac             [ 3] 	lda df_vntstrt+1
cd38 : e900             [ 2] 	sbc #0
cd3a : 85ac             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
cd3c : 38               [ 2] 	sec
cd3d : a5ad             [ 3] 	lda df_vntend
cd3f : e908             [ 2] 	sbc #DFVVT_SZ
cd41 : 85ad             [ 3] 	sta df_vntend
cd43 : a5ae             [ 3] 	lda df_vntend+1
cd45 : e900             [ 2] 	sbc #0
cd47 : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
cd51 :                       df_var_move_byte
                             	; When pointer = vntend then done
cd51 : a5e3             [ 3] 	lda df_tmpptra
cd53 : c5ad             [ 3] 	cmp df_vntend
cd55 : d006             [ 3] 	bne df_var_move_byte_do
cd57 : a5e4             [ 3] 	lda df_tmpptra+1
cd59 : c5ae             [ 3] 	cmp df_vntend+1
cd5b : f011             [ 3] 	beq df_var_move_byte_fin
cd5d :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
cd5d : a008             [ 2] 	ldy #DFVVT_SZ
cd5f : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
cd61 : a000             [ 2] 	ldy #0
cd63 : 91e3             [ 5] 	sta (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank1.s -----------------------------------

                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
cd6b : 4c51cd           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
cd6e :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
cd6e : 8645             [ 3] 	stx tmp_d
cd70 : 38               [ 2] 	sec
cd71 : a5ab             [ 3] 	lda df_vntstrt
cd73 : e545             [ 3] 	sbc tmp_d
cd75 : 85ab             [ 3] 	sta df_vntstrt
cd77 : a5ac             [ 3] 	lda df_vntstrt+1
cd79 : e900             [ 2] 	sbc #0
cd7b : 85ac             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
cd85 : e6b3             [ 5] 	inc df_varcnt
cd87 : 18               [ 2] 	clc
cd88 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Iterate through a valid variable name
                             ;* starts with alpha, then any number of
                             ;* alphanums.
                             ;****************************************
cd89 :                       df_var_countlen
                             	; count alpha nums
cd89 : c8               [ 2] 	iny
cd8a : e8               [ 2] 	inx
cd8b : b9000a           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
cd8e : e000             [ 2] 	cpx #0
cd90 : d006             [ 3] 	bne df_var_countlen_alphanum
cd92 : 2095ce           [ 6] 	jsr df_tk_isalpha
cd95 : 4c9bcd           [ 3] 	jmp df_var_countlen_loop
cd98 :                       df_var_countlen_alphanum
cd98 : 20a2ce           [ 6] 	jsr df_tk_isalphanum
cd9b :                       df_var_countlen_loop
cd9b : b0ec             [ 3] 	bcs df_var_countlen
cd9d : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
cd9e :                       df_var_analyse
                             	; start at the current buffer position
cd9e : a4be             [ 3] 	ldy df_linoff
                             	
                             	; actual number of alpha nums = -1 to start
cda0 : a2ff             [ 2] 	ldx #-1
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank1.s -----------------------------------

                             
                             	; Default type is INT
cda2 : a901             [ 2] 	lda #DFVVT_INT
cda4 : 85e3             [ 3] 	sta df_tmpptra
                             	
                             	; check for PROC prefix
cda6 : b9000a           [ 4] 	lda df_linbuff,y
cda9 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
cdab : d011             [ 3] 	bne df_var_not_proc
                             	; analyse for proc variable names
                             	; else set type to PROC
cdad : a940             [ 2] 	lda #DFVVT_PROC
cdaf : 85e3             [ 3] 	sta df_tmpptra
cdb1 : 2089cd           [ 6] 	jsr df_var_countlen
                             	; Length must be >=1
cdb4 : e001             [ 2] 	cpx #1
cdb6 : 9004             [ 3] 	bcc df_var_analyse_fatal_err
                             	; Next char has to be '('
cdb8 : c928             [ 2] 	cmp #'('
cdba : f022             [ 3] 	beq df_var_finalise_len
cdbc :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
                             	; Analyse for non-proc variable names
cdbe :                       df_var_not_proc
                             	; go back on pos on index as loop always does in
cdbe : 88               [ 2] 	dey
cdbf : 2089cd           [ 6] 	jsr df_var_countlen
cdc2 : e000             [ 2] 	cpx #0
cdc4 : d002             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
cdc6 : 38               [ 2] 	sec
cdc7 : 60               [ 6] 	rts
                             	; check for post qualifiers e.g. $
cdc8 :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ; Set to INT type although it is the default alre
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
cdc8 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
cdc8 : c924             [ 2] 	cmp #'$'
cdca : d005             [ 3] 	bne df_var_analyse_chk_arry
                             	; Set to STRING type
cdcc : a904             [ 2] 	lda #DFVVT_STR
cdce : 85e3             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
cdd0 : c8               [ 2] 	iny
cdd1 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
cdd1 : b9000a           [ 4] 	lda df_linbuff,y
cdd4 : c95b             [ 2] 	cmp #'['
cdd6 : d006             [ 3] 	bne df_var_finalise_len
cdd8 : a5e3             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank1.s -----------------------------------

cdda : 0980             [ 2] 	ora #DFVVT_PTR
cddc : 85e3             [ 3] 	sta df_tmpptra
cdde :                       df_var_finalise_len
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
cdde : 98               [ 2] 	tya
cddf : 38               [ 2] 	sec
cde0 : e5be             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
cde2 : aa               [ 2] 	tax
                             	; put type in A
cde3 : a5e3             [ 3] 	lda df_tmpptra
cde5 : 18               [ 2] 	clc
cde6 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
cde7 :                       df_var_findcreate
                             	; save mask
cde7 : 48               [ 3] 	pha
cde8 : 20c4cc           [ 6] 	jsr df_var_find
cdeb : b013             [ 4] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
cded : 68               [ 4] 	pla
cdee : 48               [ 3] 	pha
                             	; don't check mask if zero
cdef : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
cdf1 : 68               [ 4] 	pla
cdf2 : a000             [ 2] 	ldy #DFVVT_TYPE
cdf4 : 31e3             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
cdf6 : f019             [ 4] 	beq df_var_findcreate_err
cdf8 : 48               [ 3] 	pha		; Dummy push to match the pla
cdf9 :                       df_var_findcreate_found
                             	; discard mask
cdf9 : 68               [ 4] 	pla	
                             	; put slot address in x,a
cdfa : a6e3             [ 3] 	ldx df_tmpptra
cdfc : a5e4             [ 3] 	lda df_tmpptra+1
cdfe : 18               [ 2] 	clc
cdff : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
ce00 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
ce00 : 209ecd           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
ce03 : 85e3             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
ce05 : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
ce07 : 68               [ 4] 	pla
ce08 : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
ce0a : 25e3             [ 3] 	and df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank1.s -----------------------------------

                             	; mask match is ok
ce0c : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
ce0e : f001             [ 3] 	beq df_var_findcreate_err
ce10 :                       df_var_findcreate_errp
ce10 : 68               [ 4] 	pla
ce11 :                       df_var_findcreate_err
ce11 : 38               [ 2] 	sec
ce12 : 60               [ 6] 	rts
                             
ce13 :                       df_var_analyse_ok
                             	; extra space for zero terminator
ce13 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
ce14 : a5e3             [ 3] 	lda df_tmpptra
ce16 : 48               [ 3] 	pha
ce17 : 8a               [ 2] 	txa
ce18 : 48               [ 3] 	pha
                             	
ce19 : 202fcd           [ 6] 	jsr df_var_insert_space
ce1c : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
ce20 :                       df_var_initialise_var
ce20 : 68               [ 4] 	pla
ce21 : 85e7             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
ce23 : 68               [ 4] 	pla							; type
ce24 : a000             [ 2] 	ldy #DFVVT_TYPE
ce26 : 91b1             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
ce28 : a900             [ 2] 	lda #0						; zero the rest
ce2a : a007             [ 2] 	ldy #7
ce2c :                       df_var_zero_vnt
ce2c : 91b1             [ 5] 	sta (df_vvtend),y
ce2e : 88               [ 2] 	dey
ce2f : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
ce31 : c6e7             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
ce33 : a6be             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
ce35 :                       df_var_findcreate_copy
ce35 : bd000a           [ 4] 	lda df_linbuff,x
ce38 : 91ab             [ 5] 	sta (df_vntstrt),y
ce3a : e8               [ 2] 	inx
ce3b : c8               [ 2] 	iny
ce3c : c6e7             [ 5] 	dec df_tmpptrc
ce3e : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
ce40 : a900             [ 2] 	lda #0
ce42 : 91ab             [ 5] 	sta (df_vntstrt),y
                             
ce44 : 86be             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
ce46 : a6b1             [ 3] 	ldx df_vvtend
ce48 : a5b2             [ 3] 	lda df_vvtend+1
                             	
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank1.s -----------------------------------

ce4a : 18               [ 2] 	clc
ce4b : 60               [ 6] 	rts
                             	
ce4c :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
ce4c :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
ce4c :                       df_tk_peek_buf
ce4c : a4be             [ 3] 	ldy df_linoff
ce4e : b9000a           [ 4] 	lda df_linbuff,y
ce51 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
ce52 :                       df_tk_get_buf
ce52 : a4be             [ 3] 	ldy df_linoff
ce54 : b9000a           [ 4] 	lda df_linbuff,y
ce57 : f003             [ 3] 	beq df_tk_get_buf_null
ce59 : c8               [ 2] 	iny
ce5a : 84be             [ 3] 	sty df_linoff
ce5c :                       df_tk_get_buf_null
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank1.s -----------------------------------

ce5c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
ce5d :                       df_tk_put_tok
ce5d : a4bf             [ 3] 	ldy df_tokoff
ce5f : 99800a           [ 5] 	sta df_tokbuff,y
ce62 : c8               [ 2] 	iny
ce63 : 3004             [ 3] 	bmi df_tk_put_overflow
ce65 : 84bf             [ 3] 	sty df_tokoff
ce67 : 18               [ 2] 	clc
ce68 : 60               [ 6] 	rts
ce69 :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce6b :                       df_tk_isdigit
ce6b : c93a             [ 2] 	cmp #'9'+1
ce6d : b005             [ 3] 	bcs df_tk_isdigit_false
ce6f : c930             [ 2] 	cmp #'0'
ce71 : 9001             [ 3] 	bcc df_tk_isdigit_false
ce73 : 60               [ 6] 	rts						; C must be 1
ce74 :                       df_tk_isdigit_false
ce74 : 18               [ 2] 	clc
ce75 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce76 :                       df_tk_isbin
ce76 : c930             [ 2] 	cmp #'0'
ce78 : f005             [ 3] 	beq df_tk_isbin_true	; C=1
ce7a : c931             [ 2] 	cmp #'1'
ce7c : f001             [ 3] 	beq df_tk_isbin_true	; C=1
ce7e : 18               [ 2] 	clc
ce7f :                       df_tk_isbin_true
ce7f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce80 :                       df_tk_ishex
ce80 : 48               [ 3] 	pha
ce81 : 206bce           [ 6] 	jsr df_tk_isdigit
ce84 : b00a             [ 3] 	bcs df_tk_ishex_truep
ce86 : 0920             [ 2] 	ora #0x20
ce88 : c967             [ 2] 	cmp #'f'+1
ce8a : b006             [ 3] 	bcs df_tk_ishex_false
ce8c : c961             [ 2] 	cmp #'a'
ce8e : 9002             [ 3] 	bcc df_tk_ishex_false
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank1.s -----------------------------------

                             	; C must be 1 here
ce90 :                       df_tk_ishex_truep
ce90 : 68               [ 4] 	pla
ce91 : 60               [ 6] 	rts
ce92 :                       df_tk_ishex_false
ce92 :                       df_tk_isalpha_false
ce92 : 18               [ 2] 	clc
ce93 : 68               [ 4] 	pla
ce94 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce95 :                       df_tk_isalpha
ce95 : 48               [ 3] 	pha
ce96 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
ce98 : c97b             [ 2] 	cmp #'z'+1
ce9a : b0f6             [ 3] 	bcs df_tk_isalpha_false
ce9c : c961             [ 2] 	cmp #'a'
ce9e : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
cea0 : 68               [ 4] 	pla
cea1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cea2 :                       df_tk_isalphanum
cea2 : 2095ce           [ 6] 	jsr df_tk_isalpha
cea5 : 90c4             [ 3] 	bcc df_tk_isdigit
cea7 :                       df_tk_rts1				; branch to this RTS where possible
cea7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
cea8 :                       df_tk_isproc
cea8 : c95f             [ 2] 	cmp #'_'
ceaa : f001             [ 3] 	beq df_tk_isproc_true	; C=1
ceac : 18               [ 2] 	clc
cead :                       df_tk_isproc_true
cead : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ceae :                       df_tk_skip_ws
ceae :                       df_tk_ws_loop1
ceae : 204cce           [ 6] 	jsr df_tk_peek_buf
ceb1 : 20c9ce           [ 6] 	jsr df_tk_isws
ceb4 : 90f1             [ 3] 	bcc df_tk_rts1
ceb6 : e6be             [ 5] 	inc df_linoff
ceb8 : 205dce           [ 6] 	jsr df_tk_put_tok
cebb : 90f1             [ 3] 	bcc df_tk_skip_ws		; Always as put_tok clears C
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* df_tk_strip_ws
                             ;* Strip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
cebd :                       df_tk_strip_ws
cebd : 204cce           [ 6] 	jsr df_tk_peek_buf
cec0 : 20c9ce           [ 6] 	jsr df_tk_isws
cec3 : 90e2             [ 3] 	bcc df_tk_rts1
cec5 : e6be             [ 5] 	inc df_linoff
cec7 : d0f4             [ 3] 	bne df_tk_strip_ws		; Always as linoff is not ze
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
cec9 :                       df_tk_isws
cec9 : c920             [ 2] 	cmp #' '
cecb : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
cecd : 60               [ 6] 	rts
cece :                       df_tk_isws_false
cece :                       df_tk_expectok
cece : 18               [ 2] 	clc
cecf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
ced0 :                       df_tk_expect
ced0 : 48               [ 3] 	pha
                             	; skip ws
ced1 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
ced4 : 68               [ 4] 	pla
ced5 : a4be             [ 3] 	ldy df_linoff
ced7 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
ceda : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
cedc :                       df_tk_num_err
cedc :                       df_tk_char_err
cedc : 38               [ 2] 	sec
cedd : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
cede :                       df_tk_expect_tok
cede : 20d0ce           [ 6] 	jsr df_tk_expect
cee1 : b0c4             [ 3] 	bcs df_tk_rts1
cee3 : 2052ce           [ 6] 	jsr df_tk_get_buf
cee6 : 4c5dce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank1.s -----------------------------------

                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
cee9 :                       df_tk_expect_tok_err
cee9 : 20dece           [ 6] 	jsr df_tk_expect_tok
ceec : 90b9             [ 3] 	bcc df_tk_rts1
ceee :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
cef0 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
cef0 : 18               [ 2] 	clc
cef1 : a900             [ 2] 	lda #lo(df_linbuff)
cef3 : 65be             [ 3] 	adc df_linoff
cef5 : aa               [ 2] 	tax
cef6 : a90a             [ 2] 	lda #hi(df_linbuff)
cef8 : 6900             [ 2] 	adc #0
cefa : a000             [ 2] 	ldy #0				; any numeric format
cefc : 201bc9           [ 6] 	jsr con_n_to_a
ceff : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
cf01 : a8               [ 2] 	tay
cf02 : 18               [ 2] 	clc
cf03 : 8a               [ 2] 	txa
cf04 : 65be             [ 3] 	adc df_linoff
cf06 : 85be             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
cf08 : 98               [ 2] 	tya
cf09 : c901             [ 2] 	cmp #NUM_DEC
cf0b : d004             [ 3] 	bne df_tk_num_hexbin
cf0d : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
cf0f : d016             [ 3] 	bne df_tk_num_put
cf11 :                       df_tk_num_hexbin
cf11 : c902             [ 2] 	cmp #NUM_HEX
cf13 : d00a             [ 3] 	bne df_tk_num_bin
cf15 : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
cf17 : e005             [ 2] 	cpx #5				; If >4 chars then INT
cf19 : 900c             [ 3] 	bcc df_tk_num_put
cf1b : a90a             [ 2] 	lda #DFTK_INTHEX
cf1d : d008             [ 3] 	bne df_tk_num_put
cf1f :                       df_tk_num_bin
cf1f : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
cf21 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
cf23 : 9002             [ 3] 	bcc df_tk_num_put
cf25 : a90b             [ 2] 	lda #DFTK_INTBIN
cf27 :                       df_tk_num_put
cf27 : 205dce           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
cf2a : a585             [ 3] 	lda num_a
cf2c : 205dce           [ 6] 	jsr df_tk_put_tok
cf2f : a586             [ 3] 	lda num_a+1
cf31 : 4c5dce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
cf34 :                       df_tk_char
                             	; skip the first quote
cf34 : 2052ce           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cf37 : a900             [ 2] 	lda #DFTK_CHR
cf39 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
cf3c : 2052ce           [ 6] 	jsr df_tk_get_buf
cf3f : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
cf42 : a900             [ 2] 	lda #0
cf44 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
cf47 : 2052ce           [ 6] 	jsr df_tk_get_buf
cf4a : c927             [ 2] 	cmp #0x27
cf4c : d08e             [ 4] 	bne df_tk_char_err
cf4e : 18               [ 2] 	clc
cf4f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
cf50 :                       df_tk_str
                             	; skip the first quote
cf50 : 2052ce           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cf53 : a910             [ 2] 	lda #DFTK_STRLIT
cf55 : 205dce           [ 6] 	jsr df_tk_put_tok
cf58 :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
cf58 : 2052ce           [ 6] 	jsr df_tk_get_buf
cf5b : c900             [ 2] 	cmp #0
cf5d : f011             [ 3] 	beq df_tk_str_err
cf5f : c922             [ 2] 	cmp #0x22
cf61 : f006             [ 3] 	beq df_tk_str_don
cf63 : 205dce           [ 6] 	jsr df_tk_put_tok
cf66 : 4c58cf           [ 3] 	jmp df_tk_str_ch
cf69 :                       df_tk_str_don
                             	; zero terminated strings
cf69 : a900             [ 2] 	lda #0
cf6b : 4c5dce           [ 3] 	jmp df_tk_put_tok
cf6e :                       df_tk_var_noarry
cf6e : 18               [ 2] 	clc
cf6f : 60               [ 6] 	rts
cf70 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
cf72 :                       df_tk_const
cf72 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
cf75 : 204cce           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
cf78 : c92d             [ 2] 	cmp #'-'
cf7a : f005             [ 3] 	beq df_tk_const_try_num
cf7c : 206bce           [ 6] 	jsr df_tk_isdigit
cf7f : 9003             [ 3] 	bcc df_tk_const_try_str
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank1.s -----------------------------------

cf81 :                       df_tk_const_try_num
cf81 : 4cf0ce           [ 3] 	jmp df_tk_num
cf84 :                       df_tk_const_try_str
                             	; check for double quote
cf84 : c922             [ 2] 	cmp #0x22
cf86 : d003             [ 3] 	bne df_tk_const_try_char
cf88 : 4c50cf           [ 3] 	jmp df_tk_str
cf8b :                       df_tk_const_try_char
                             	; check for single apostrophe
cf8b : c927             [ 2] 	cmp #0x27
cf8d : d003             [ 3] 	bne df_tk_const_err
cf8f : 4c34cf           [ 3] 	jmp df_tk_char
cf92 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
cf94 :                       df_tk_var
                             	; Find or create variable, address in X,A
cf94 : 20e7cd           [ 6] 	jsr df_var_findcreate
cf97 : 9001             [ 3] 	bcc df_tk_var_cont
cf99 : 60               [ 6] 	rts
cf9a :                       df_tk_var_cont
                             	; Save X,A for later
cf9a : 48               [ 3] 	pha
cf9b : 8a               [ 2] 	txa
cf9c : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf9d : a911             [ 2] 	lda #DFTK_VAR
cf9f : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cfa2 : 68               [ 4] 	pla
cfa3 : 205dce           [ 6] 	jsr df_tk_put_tok
cfa6 : 68               [ 4] 	pla
cfa7 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
cfaa :                       df_tk_var_ck
                             	; check if array procesing needed
cfaa : a95b             [ 2] 	lda #'['
cfac : 20dece           [ 6] 	jsr df_tk_expect_tok
cfaf : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
cfb1 : 4c5bd0           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
cfb4 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
cfb4 : 204cce           [ 6] 	jsr df_tk_peek_buf
cfb7 : c926             [ 2] 	cmp #DFTK_VARPARM
cfb9 : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
cfbb : 2052ce           [ 6] 	jsr df_tk_get_buf
cfbe : 205dce           [ 6] 	jsr df_tk_put_tok
cfc1 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank1.s -----------------------------------

cfc1 : a900             [ 2] 	lda #0
cfc3 : 4c94cf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
cfc6 :                       df_tk_localvar
                             	; Find or create variable, index in A
cfc6 : 20e7cd           [ 6] 	jsr df_var_findcreate
cfc9 : 9001             [ 3] 	bcc df_tk_localvar_cont
cfcb : 60               [ 6] 	rts
cfcc :                       df_tk_localvar_cont
                             	; Save variable address for later
cfcc : 48               [ 3] 	pha
cfcd : 8a               [ 2] 	txa
cfce : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cfcf : a911             [ 2] 	lda #DFTK_VAR
cfd1 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
cfd4 : 68               [ 4] 	pla
cfd5 : 205dce           [ 6] 	jsr df_tk_put_tok
cfd8 : 68               [ 4] 	pla
cfd9 : 4c5dce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
cfdc :                       df_tk_arrvar
                             	; Like a local var at first
cfdc : 20c6cf           [ 6] 	jsr df_tk_localvar
                             	; but must be array
cfdf : a95b             [ 2] 	lda #'['
cfe1 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
cfe4 : 4c5bd0           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
cfe7 :                       df_tk_proc
cfe7 : 85cd             [ 3] 	sta df_procmode
cfe9 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
cfec : a940             [ 2] 	lda #DFVVT_PROC
cfee : 20e7cd           [ 6] 	jsr df_var_findcreate
cff1 : b066             [ 4] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
cff3 : 86d0             [ 3] 	stx df_procptr
cff5 : 85d1             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
cff7 : a912             [ 2] 	lda #DFTK_PROC
cff9 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cffc : a5d0             [ 3] 	lda df_procptr
cffe : 205dce           [ 6] 	jsr df_tk_put_tok
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank1.s -----------------------------------

d001 : a5d1             [ 3] 	lda df_procptr+1
d003 : 205dce           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d006 : a900             [ 2] 	lda #0
d008 : 85ce             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d00a : a928             [ 2] 	lda #'('
d00c : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d00f : 204cce           [ 6] 	jsr df_tk_peek_buf
d012 : c929             [ 2] 	cmp #')'
d014 : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d016 :                       df_tk_proc_parms
d016 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d019 : a5cd             [ 3] 	lda df_procmode
d01b : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d01d : 20b4cf           [ 6] 	jsr df_tk_parm
d020 : 4c2cd0           [ 3] 	jmp df_tk_proc_skip_call
d023 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d023 : a5ce             [ 3] 	lda df_procargs	; procargs could be impacted ins
d025 : 48               [ 3] 	pha
d026 : 20dbd0           [ 6] 	jsr df_tk_expression
d029 : 68               [ 4] 	pla
d02a : 85ce             [ 3] 	sta df_procargs
d02c :                       df_tk_proc_skip_call
d02c : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d02e : e6ce             [ 5] 	inc df_procargs
                             	; what is next non ws char
d030 : 20aece           [ 6] 	jsr df_tk_skip_ws
d033 : c92c             [ 2] 	cmp #','
d035 : f006             [ 3] 	beq df_tk_proc_comma
d037 : c929             [ 2] 	cmp #')'
d039 : d01d             [ 3] 	bne df_tk_proc_errp
d03b : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d03d :                       df_tk_proc_comma
d03d : 2052ce           [ 6] 	jsr df_tk_get_buf
d040 : 205dce           [ 6] 	jsr df_tk_put_tok
d043 : 4c16d0           [ 3] 	jmp df_tk_proc_parms
d046 :                       df_tk_proc_noparm
                             	; consume the close bracket
d046 : 2052ce           [ 6] 	jsr df_tk_get_buf
d049 : 205dce           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d04c : a6cd             [ 3] 	ldx df_procmode
d04e : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d050 : a004             [ 2] 	ldy #DFVVT_DIM2
d052 : a5ce             [ 3] 	lda df_procargs
d054 : 91d0             [ 5] 	sta (df_procptr),y
d056 :                       df_tk_proc_skip_args
d056 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank1.s -----------------------------------

d057 : 60               [ 6] 	rts
d058 :                       df_tk_proc_errp
d058 : 68               [ 4] 	pla
d059 :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d05b :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d05b : 20dbd0           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d05e : a92c             [ 2] 	lda #','
d060 : 20dece           [ 6] 	jsr df_tk_expect_tok
d063 : b003             [ 3] 	bcs df_tk_narry_end
d065 : 20dbd0           [ 6] 	jsr df_tk_expression
d068 :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d068 : a95d             [ 2] 	lda #']'
d06a : 4ce9ce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d06d :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d06d : 20dbd0           [ 6] 	jsr df_tk_expression
d070 : a929             [ 2] 	lda #')'
d072 : 4ce9ce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d075 :                       df_tk_nterm_proc
                             	; call mode
d075 : a901             [ 2] 	lda #1
d077 : 4ce7cf           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d07a :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d07a : 20aece           [ 6] 	jsr df_tk_skip_ws
d07d : c900             [ 2] 	cmp #0
d07f : f004             [ 3] 	beq df_tk_nterm_done
d081 : c93a             [ 2] 	cmp #':'
d083 : d002             [ 3] 	bne df_tk_nterm_cont
d085 :                       df_tk_nterm_done
d085 :                       df_tk_nop_false
d085 : 38               [ 2] 	sec
d086 : 60               [ 6] 	rts
d087 :                       df_tk_nterm_cont
                             	; if open bracket then process it
d087 : c928             [ 2] 	cmp #'('
d089 : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank1.s -----------------------------------

d08b : 2052ce           [ 6] 	jsr df_tk_get_buf
d08e : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d091 : 4c6dd0           [ 3] 	jmp df_tk_nbrkt
d094 :                       df_tk_nterm_tryfn
d094 : 48               [ 3] 	pha
                             	; try decoding a built-in function
d095 : a902             [ 2] 	lda #DFTK_FN
d097 : 20ced1           [ 6] 	jsr df_tk_matchtok
d09a : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d09c : 68               [ 4] 	pla
d09d : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d09e : 8a               [ 2] 	txa
d09f : 0980             [ 2] 	ora #0x80
d0a1 : 205dce           [ 6] 	jsr df_tk_put_tok
d0a4 : 20a0d1           [ 6] 	jsr df_tk_exec_parser
d0a7 : b01b             [ 3] 	bcs df_tk_nterm_err
d0a9 : 60               [ 6] 	rts
d0aa :                       df_tk_nterm_try_proc
d0aa : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d0ab : 20a8ce           [ 6] 	jsr df_tk_isproc
d0ae : 9006             [ 3] 	bcc df_tk_nterm_try_var
d0b0 : 2075d0           [ 6] 	jsr df_tk_nterm_proc
d0b3 : b00f             [ 3] 	bcs df_tk_nterm_err
d0b5 : 60               [ 6] 	rts
d0b6 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d0b6 : a900             [ 2] 	lda #0
d0b8 : 2094cf           [ 6] 	jsr df_tk_var
d0bb : b001             [ 3] 	bcs df_tk_nterm_try_const
d0bd : 60               [ 6] 	rts
d0be :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d0be : 2072cf           [ 6] 	jsr df_tk_const
d0c1 : b001             [ 3] 	bcs df_tk_nterm_err
d0c3 : 60               [ 6] 	rts
d0c4 :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d0c6 :                       df_tk_nop
d0c6 : 20aece           [ 6] 	jsr df_tk_skip_ws
d0c9 : c900             [ 2] 	cmp #0
d0cb : f0b8             [ 3] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d0cd : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d0cf : 20ced1           [ 6] 	jsr df_tk_matchtok
d0d2 : b0b1             [ 3] 	bcs df_tk_nop_false
                             	; got a token
d0d4 : 0980             [ 2] 	ora #DFTK_TOKEN
d0d6 : 205dce           [ 6] 	jsr df_tk_put_tok
d0d9 : 18               [ 2] 	clc
d0da : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank1.s -----------------------------------

                             ;* Parse numeric expression
                             ;****************************************
d0db :                       df_tk_expression
                             	; Tokenise a numeric term
d0db : 207ad0           [ 6] 	jsr df_tk_nterm
d0de : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d0e0 : 20c6d0           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d0e3 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d0e5 :                       df_tk_not_eos
d0e5 : 18               [ 2] 	clc
d0e6 :                       df_tk_expre_err
d0e6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d0e7 :                       df_tk_tok_expression
d0e7 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
d0ea : 4cdbd0           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d0ed :                       df_tk_isEOS
d0ed : a93a             [ 2] 	lda #':'
d0ef : 20dece           [ 6] 	jsr df_tk_expect_tok
d0f2 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d0f4 : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d0f6 : a4c1             [ 3] 	ldy df_nxtstidx
d0f8 : 99800a           [ 5] 	sta df_tokbuff,y
d0fb : 38               [ 2] 	sec
d0fc : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d0fd :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d0fd : a981             [ 2] 	lda #0x81
d0ff : 205dce           [ 6] 	jsr df_tk_put_tok
d102 : a901             [ 2] 	lda #1
d104 : 4ce7cf           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d107 :                       df_tk_parse_command
                             	; only looking for keywords
d107 : a901             [ 2] 	lda #DFTK_KW
d109 : 20ced1           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank1.s -----------------------------------

d10c : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d10e : 0980             [ 2] 	ora #0x80
d110 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d113 : a5c5             [ 3] 	lda df_symoff
d115 : 20a0d1           [ 6] 	jsr df_tk_exec_parser
d118 : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d11a : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d11d :                       df_tk_parse_command_done
d11d : 18               [ 2] 	clc
d11e :                       df_tk_parse_command_err
d11e : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d11f :                       df_lexer_line
d11f : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d121 : 85be             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d123 : 85bf             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d125 : a980             [ 2] 	lda #lo(df_tokbuff)
d127 : 85c8             [ 3] 	sta df_currlin
d129 : a90a             [ 2] 	lda #hi(df_tokbuff)
d12b : 85c9             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d12d : a900             [ 2] 	lda #0
d12f : 205dce           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d132 : 204cce           [ 6] 	jsr df_tk_peek_buf
d135 : 206bce           [ 6] 	jsr df_tk_isdigit
d138 : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d13a : 20afd1           [ 6] 	jsr df_tk_linenum
d13d : 4c48d1           [ 3] 	jmp df_tk_body
d140 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d140 : a900             [ 2] 	lda #0
d142 : 205dce           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d145 : 205dce           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d148 :                       df_tk_body
                             	; Offset for next statement
d148 : a5bf             [ 3] 	lda df_tokoff
d14a : 85c1             [ 3] 	sta df_nxtstidx
d14c : a900             [ 2] 	lda #0
d14e : 205dce           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d151 : 204cce           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d154 : 20c9ce           [ 6] 	jsr df_tk_isws					; and first character
d157 : 9002             [ 3] 	bcc df_tk_skip_1_spc
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank1.s -----------------------------------

d159 : e6be             [ 5] 	inc df_linoff					; Don't tokenise this single s
d15b :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d15b : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d15e : c900             [ 2] 	cmp #0
d160 : f03a             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d162 : 20a8ce           [ 6] 	jsr df_tk_isproc
d165 : 9006             [ 3] 	bcc df_tk_try_command
d167 : 20fdd0           [ 6] 	jsr df_tk_parse_user_proc
d16a : 4c7ed1           [ 3] 	jmp df_tk_done
d16d :                       df_tk_try_command
                             	; try  a keyword
d16d : 2007d1           [ 6] 	jsr df_tk_parse_command
d170 : b002             [ 3] 	bcs	df_tk_try_asm
d172 : 900a             [ 3] 	bcc df_tk_done
d174 :                       df_tk_try_asm
                             	; try an asm keyword
d174 : 2043f4           [ 6] 	jsr df_tk_asm_parse_command
d177 : 9005             [ 3] 	bcc df_tk_done
d179 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d179 : 20f2d5           [ 6] 	jsr df_tk_assign
d17c : b020             [ 3] 	bcs	df_tk_parseerror
d17e :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d17e : 20edd0           [ 6] 	jsr df_tk_isEOS
d181 : b0c5             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d183 : 204cce           [ 6] 	jsr df_tk_peek_buf
d186 : c900             [ 2] 	cmp #0
d188 : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
d18a : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d18c : a4c1             [ 3] 	ldy df_nxtstidx
d18e : 99800a           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d191 : a4bf             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d193 : a900             [ 2] 	lda #0
d195 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d198 : 98               [ 2] 	tya
d199 : 8d800a           [ 4] 	sta df_tokbuff
d19c :                       df_tk_line_empty
d19c : 18               [ 2] 	clc
d19d : 60               [ 6] 	rts
d19e :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank1.s -----------------------------------

                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d1a0 :                       df_tk_exec_parser
d1a0 : 0a               [ 2] 	asl a
d1a1 : aa               [ 2] 	tax
d1a2 : bd60d4           [ 4] 	lda df_tk_tokenjmp,x
d1a5 : 85e3             [ 3] 	sta df_tmpptra
d1a7 : bd61d4           [ 4] 	lda df_tk_tokenjmp+1,x
d1aa : 85e4             [ 3] 	sta df_tmpptra+1
d1ac : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d1af :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d1af : 18               [ 2] 	clc
d1b0 : a900             [ 2] 	lda #lo(df_linbuff)
d1b2 : 65be             [ 3] 	adc df_linoff
d1b4 : aa               [ 2] 	tax
d1b5 : a90a             [ 2] 	lda #hi(df_linbuff)
d1b7 : 6900             [ 2] 	adc #0
d1b9 : a001             [ 2] 	ldy #1			; Decimal format only
d1bb : 201bc9           [ 6] 	jsr con_n_to_a
d1be : 18               [ 2] 	clc
d1bf : 8a               [ 2] 	txa
d1c0 : 65be             [ 3] 	adc df_linoff
d1c2 : 85be             [ 3] 	sta df_linoff
                             	; Now save line number
d1c4 : a585             [ 3] 	lda num_a
d1c6 : 205dce           [ 6] 	jsr df_tk_put_tok
d1c9 : a586             [ 3] 	lda num_a+1
d1cb : 4c5dce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d1ce :                       df_tk_matchtok
                             	; save the mask to check types against
d1ce : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d1cf : a950             [ 2] 	lda #lo(df_tokensyms)
d1d1 : 85c3             [ 3] 	sta df_symtab
d1d3 : a9d2             [ 2] 	lda #hi(df_tokensyms)
d1d5 : 85c4             [ 3] 	sta df_symtab+1
d1d7 : a900             [ 2] 	lda #0
d1d9 : 85c5             [ 3] 	sta df_symoff
d1db :                       df_tk_checknexttok
                             	; check this token type first
d1db : 68               [ 4] 	pla
d1dc : 48               [ 3] 	pha
d1dd : a6c5             [ 3] 	ldx df_symoff
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank1.s -----------------------------------

d1df : 3d50d5           [ 4] 	and df_tk_tokentype,x
d1e2 : f032             [ 4] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
d1e4 : bd50d5           [ 4] 	lda df_tk_tokentype,x
d1e7 : 2908             [ 2] 	and #DFTK_OP
d1e9 : f009             [ 3] 	beq df_tk_matchtok_skip_op
d1eb : 68               [ 4] 	pla
d1ec : 48               [ 3] 	pha
d1ed : 2908             [ 2] 	and #DFTK_OP
d1ef : 3d50d5           [ 4] 	and df_tk_tokentype,x
d1f2 : f022             [ 4] 	beq df_tk_symnomatch
d1f4 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
d1f4 : a4be             [ 3] 	ldy df_linoff
d1f6 : a200             [ 2] 	ldx #0
d1f8 :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
d1f8 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
d1fa : 48               [ 3] 	pha
d1fb : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
d1fd : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
d200 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
d202 : 68               [ 4] 	pla
d203 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
d20b : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
d20c : b9000a           [ 4] 	lda df_linbuff,y
d20f : c92e             [ 2] 	cmp #'.'
d211 : f025             [ 3] 	beq df_tk_symfound
d213 : d0e3             [ 4] 	bne df_tk_checktokch	; branch always
d215 :                       df_tk_symnomatchp
d215 : 68               [ 4] 	pla
d216 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
d216 : e6c5             [ 5] 	inc df_symoff
d218 :                       df_tk_symnextentry
d218 : a200             [ 2] 	ldx #0
d21a : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
d21c : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
d224 : 4c18d2           [ 3] 	jmp df_tk_symnextentry
d227 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank1.s -----------------------------------

                             
                             	; If next char is not zero then
                             	; try and match with line buffer
d22d : a1c3             [ 6] 	lda (df_symtab,x)
d22f : d0aa             [ 4] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
d231 : 68               [ 4] 	pla
                             	; Zero symbol counter
d232 : a900             [ 2] 	lda #0
d234 : 85c5             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
d236 : 38               [ 2] 	sec
d237 : 60               [ 6] 	rts
d238 :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
d238 : c8               [ 2] 	iny
                             	; First mask off MSB
d239 : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
d23b : 2095ce           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
d23e : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
d240 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
d243 : 20a2ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
d246 : b0ce             [ 3] 	bcs df_tk_symnomatch
d248 :                       df_tk_symfound_final
                             	; pop mask off stack
d248 : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
d249 : 84be             [ 3] 	sty df_linoff
d24b : a5c5             [ 3] 	lda df_symoff
d24d : aa               [ 2] 	tax
d24e : 18               [ 2] 	clc
d24f : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank1.s -----------------------------------

                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
d250 :                       df_tokensyms
d250 : 80                    	db	0x80						; Implicit numeric assign
d251 : 80                    	db	0x80						; Implicit call procedure
d252 : bb                    	db	";"+0x80					; Comment
d253 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
d25a : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
d261 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
d266 : 6465e6                	db	"de",'f'+0x80				; def_subname
d269 : 656e646465e6          	db	"endde",'f'+0x80			; enddef
d26f : 7265747572ee          	db	"retur",'n'+0x80			; return
d275 : 61626f72f4            	db	"abor",'t'+0x80				; abort
d27a : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
d27f : 6469ed                	db	"di",'m'+0x80				; dim varlist
d282 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
d288 : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
d28d : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
d290 : 6e6578f4              	db	"nex",'t'+0x80				; next
d294 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
d299 : 77656ee4              	db	"wen",'d'+0x80				; wend
d29d : 69e6                  	db	"i",'f'+0x80				; if condition
d29f : 656c73e5              	db	"els",'e'+0x80				; else
d2a3 : 656e6469e6            	db	"endi",'f'+0x80				; endif
d2a8 : 656c69e6              	db	"eli",'f'+0x80				; elif condition
d2ac : 646174e1              	db	"dat",'a'+0x80				; data
d2b0 : ff                    	db	0xff						; assembler command (non standard p
d2b1 : 7275ee                	db	"ru",'n'+0x80				; run
d2b4 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
d2b8 : 696e7075f4            	db	"inpu",'t'+0x80				; input var
d2bd : 6d6f64e5              	db	"mod",'e'+0x80				; mode n
d2c1 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
d2c5 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
d2cb : 636cf3                	db	"cl",'s'+0x80				; cls
d2ce : 76706f6be5            	db	"vpok",'e'+0x80				; vpoke addr,val
d2d3 : 7365747664f0          	db	"setvd",'p'+0x80			; setvdp reg,val
d2d9 : 636f6c6f75f2          	db	"colou",'r'+0x80			; colour reg,val
d2df : 73707269746570..      	db	"spritepa",'t'+0x80			; spritepat patnum,arra
d2e8 : 73707269746570..      	db	"spritepo",'s'+0x80			; spritepos sprnum,x,y
d2f1 : 73707269746563..      	db	"spriteco",'l'+0x80			; spritecol sprnum,col
d2fa : 7370726974656e..      	db	"spritenm",'e'+0x80			; spritenme sprnum,patn
d303 : 7370726974e5          	db	"sprit",'e'+0x80			; sprite n,x,y,p,c
d309 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
d30d : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
d311 : 736f756ee4            	db	"soun",'d'+0x80				; sound
d316 : 6d757369e3            	db	"musi",'c'+0x80				; music
d31b : 706c61f9              	db	"pla",'y'+0x80				; play
d31f : 736176e5              	db	"sav",'e'+0x80				; save
d323 : 6c6f61e4              	db	"loa",'d'+0x80				; load
d327 : 6469f2                	db	"di",'r'+0x80				; dir (compact listing)
d32a : 646972ec              	db	"dir",'l'+0x80				; dirl (long listing)
d32e : 6465ec                	db 	"de",'l'+0x80				; del
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank1.s -----------------------------------

d331 : 726561e4              	db	"rea",'d'+0x80				; read
d335 : 6e65f7                	db	"ne",'w'+0x80				; new
d338 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
d33d : 776169f4              	db	"wai",'t'+0x80				; wait delay
d341 : 72657365f4            	db	"rese",'t'+0x80				; reset var
d346 : 68697265f3            	db	"hire",'s'+0x80				; hires col
d34b : 706f696ef4            	db	"poin",'t'+0x80				; point x,y,mode
d350 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
d354 : 68706c6ff4            	db	"hplo",'t'+0x80				; hplot x,y,char|string
d359 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
d360 : 7069786d6173eb        	db	"pixmas",'k'+0x80			; pixmask n
d367 : 706978636fec          	db	"pixco",'l'+0x80			; pixcol n
d36d : 626ff8                	db	"bo",'x'+0x80				; box x0,y0,x1,y1
d370 : 636972636ce5          	db	"circl",'e'+0x80			; circle x0,y0,r
d376 : 73686170e5            	db	"shap",'e'+0x80				; shape x,y,coords[]
d37b : 766c6f61e4            	db	"vloa",'d'+0x80				; vload addr,filename
d380 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload mem,hdr,addr,filen
d385 : 62736176e5            	db	"bsav",'e'+0x80				; bsave mem,hdr,addr,len,f
d38a : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
d38f : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
d396 : 63686469f2            	db	"chdi",'r'+0x80				; chdir fname
d39b : 6d6b6469f2            	db	"mkdi",'r'+0x80				; mkdir fname
d3a0 : 6461746574696de5      	db	"datetim",'e'+0x80			; datetime string output
d3a8 : 6e76706f6be5          	db	"nvpok",'e'+0x80			; NV poke addr,val
d3ae : 666f6ef4              	db	"fon",'t'+0x80				; font <font file>
d3b2 : 6465766963e5          	db	"devic",'e'+0x80			; device <devnum>
d3b8 : 66636c6f73e5          	db	"fclos",'e'+0x80			; fclose
d3be : 72656469ed            	db	"redi",'m'+0x80				; redim varlist
d3c3 : 7075f4                	db  "pu",'t'+0x80				; put(byte)
                             ;	db	"ptloa,",'d'+0x80			; ptload addr,filename
                             ;	db	"ptstar",'t'+0x80			; ptstart
                             ;	db	"pr"
                             ; Functions
d3c6 : 767065656ba8          	db	"vpeek",'('+0x80			; vpeek(x)
d3cc : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
d3d1 : 6465656ba8            	db	"deek",'('+0x80				; deek(x)
d3d6 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
d3dc : 6b6579a8              	db	"key",'('+0x80				; key(x)
d3e0 : 636872a8              	db	"chr",'('+0x80				; chr(x)
d3e4 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
d3e9 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
d3ef : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
d3f3 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
d3f7 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
d3fb : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
d400 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
d404 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
d40c : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
d411 : 686578a8              	db	"hex",'('+0x80				; hex(x)
d415 : 646563a8              	db	"dec","("+0x80				; dec(x)
d419 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
d41d : 76616ca8              	db	"val",'('+0x80				; val(x$)
d421 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
d427 : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
d42b : 61646472a8            	db	"addr",'('+0x80				; addr(var)
d430 : 6e767065656ba8        	db  "nvpeek",'('+0x80			; nvpeek(addr)
d437 : 66637265617465a8      	db	"fcreate",'('+0x80			; success=fcreate(filena
d43f : 666f70656ea8          	db	"fopen",'('+0x80			; success=fopen(filename)
d445 : 676574a8              	db	"get",'('+0x80				; alias for key()
                             ; Numeric operators, in priority
d449 : aa                    	db	'*'+0x80					; Multiply
d44a : af                    	db 	'/'+0x80					; Divide
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank1.s -----------------------------------

d44b : dc                    	db 	'\\'+0x80					; Modulus
d44c : 3cbc                  	db	'<','<'+0x80				; Shift left
d44e : 3ebe                  	db	'>','>'+0x80				; Shift right
d450 : ab                    	db 	'+'+0x80					; Add
d451 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
d452 : a6                    	db '&'+0x80						; AND
d453 : fc                    	db '|'+0x80						; OR
d454 : de                    	db '^'+0x80						; EOR
d455 : 3cbd                  	db "<",'='+0x80					; Less than or equal
d457 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
d459 : 3cbe                  	db "<",'>'+0x80					; Not equal
d45b : bc                    	db '<'+0x80						; Less than
d45c : be                    	db '>'+0x80						; Greater than
d45d : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
d45f : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
d460 :                       df_tk_tokenjmp
d460 : f2d5                  	dw	df_tk_assign
d462 : c7d6                  	dw	df_tk_callproc
d464 : fad5                  	dw	df_tk_comment
d466 : 57d6                  	dw	df_tk_println
d468 : 4bd6                  	dw	df_tk_printat
d46a : 57d6                  	dw	df_tk_print
d46c : 9fd6                  	dw	df_tk_def
d46e : 07d7                  	dw	df_tk_enddef
d470 : 09d7                  	dw	df_tk_return
d472 : 07d7                  	dw	df_tk_abort
d474 : 8dd6                  	dw	df_tk_local
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank1.s -----------------------------------

d476 : 7ed6                  	dw	df_tk_dim
d478 : 07d7                  	dw	df_tk_repeat
d47a : 0cd7                  	dw	df_tk_until
d47c : a5d6                  	dw	df_tk_for
d47e : 07d7                  	dw	df_tk_next
d480 : 0cd7                  	dw	df_tk_while
d482 : 07d7                  	dw	df_tk_wend
d484 : 0cd7                  	dw	df_tk_if
d486 : 07d7                  	dw	df_tk_else
d488 : 07d7                  	dw	df_tk_endif
d48a : 0cd7                  	dw	df_tk_elseif
d48c : 57d6                  	dw	df_tk_data
d48e : eff3                  	dw	df_trap_monitor
d490 : 07d7                  	dw	df_tk_run
d492 : 29d6                  	dw	df_tk_list
d494 : 65d6                  	dw	df_tk_input
d496 : 0cd7                  	dw	df_tk_mode
d498 : 1cd7                  	dw	df_tk_plot
d49a : 0cd7                  	dw	df_tk_cursor
d49c : 07d7                  	dw	df_tk_cls
d49e : 10d7                  	dw	df_tk_vpoke
d4a0 : 10d7                  	dw	df_tk_setvdp
d4a2 : 1cd7                  	dw	df_tk_colour
d4a4 : 10d7                  	dw	df_tk_spritepat
d4a6 : 1cd7                  	dw	df_tk_spritepos
d4a8 : 10d7                  	dw	df_tk_spritecol
d4aa : 10d7                  	dw	df_tk_spritenme
d4ac : 34d7                  	dw	df_tk_sprite
d4ae : 10d7                  	dw	df_tk_poke
d4b0 : 10d7                  	dw	df_tk_doke
d4b2 : 1cd7                  	dw	df_tk_sound
d4b4 : 28d7                  	dw	df_tk_music
d4b6 : 28d7                  	dw	df_tk_play
d4b8 : 0cd7                  	dw	df_tk_save
d4ba : 0cd7                  	dw	df_tk_load
d4bc : 07d7                  	dw	df_tk_dir
d4be : 07d7                  	dw	df_tk_dirl
d4c0 : 0cd7                  	dw	df_tk_del
d4c2 : 6fd6                  	dw	df_tk_read
d4c4 : 07d7                  	dw	df_tk_new
d4c6 : 1cd7                  	dw	df_tk_renum
d4c8 : 0cd7                  	dw	df_tk_wait
d4ca : c9d6                  	dw	df_tk_reset
d4cc : 0cd7                  	dw	df_tk_hires
d4ce : 10d7                  	dw	df_tk_point
d4d0 : 28d7                  	dw	df_tk_line
d4d2 : 1cd7                  	dw	df_tk_hplot
d4d4 : 0cd7                  	dw	df_tk_pixmode
d4d6 : 0cd7                  	dw	df_tk_pixmask
d4d8 : 0cd7                  	dw	df_tk_pixcol
d4da : 28d7                  	dw	df_tk_box
d4dc : 1cd7                  	dw	df_tk_circle
d4de : 1cd7                  	dw	df_tk_shape
d4e0 : 10d7                  	dw	df_tk_vload
d4e2 : 28d7                  	dw	df_tk_bload
d4e4 : 34d7                  	dw	df_tk_bsave
d4e6 : 0cd7                  	dw	df_tk_himem
d4e8 : 07d7                  	dw	df_tk_monitor
d4ea : 0cd7                  	dw	df_tk_chdir
d4ec : 0cd7                  	dw	df_tk_mkdir
d4ee : d2d6                  	dw	df_tk_datetime
d4f0 : 10d7                  	dw	df_tk_nvpoke
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank1.s -----------------------------------

d4f2 : 0cd7                  	dw	df_tk_font
d4f4 : 0cd7                  	dw	df_tk_device
d4f6 : 07d7                  	dw	df_tk_fclose
d4f8 : 7ed6                  	dw	df_tk_redim
d4fa : 0cd7                  	dw  df_tk_put
                             
d4fc : dbd6                  	dw	df_tk_vpeek
d4fe : dbd6                  	dw	df_tk_peek
d500 : dbd6                  	dw	df_tk_deek
d502 : dbd6                  	dw	df_tk_stick
d504 : dbd6                  	dw	df_tk_key
d506 : dbd6                  	dw	df_tk_chr
d508 : edd6                  	dw	df_tk_left
d50a : edd6                  	dw	df_tk_right
d50c : f3d6                  	dw	df_tk_mid
d50e : dbd6                  	dw	df_tk_len
d510 : dbd6                  	dw	df_tk_mem
d512 : edd6                  	dw	df_tk_scrn
d514 : dbd6                  	dw	df_tk_rnd
d516 : e4d6                  	dw	df_tk_elapsed
d518 : f9d6                  	dw	df_tk_call
d51a : dbd6                  	dw	df_tk_hex
d51c : dbd6                  	dw	df_tk_dec
d51e : dbd6                  	dw	df_tk_asc
d520 : dbd6                  	dw	df_tk_val
d522 : edd6                  	dw	df_tk_pixel
d524 : dbd6                  	dw	df_tk_sgn
d526 : e4d6                  	dw	df_tk_addr
d528 : dbd6                  	dw	df_tk_nvpeek
d52a : dbd6                  	dw	df_tk_fcreate
d52c : dbd6                  	dw	df_tk_fopen
d52e : dbd6                  	dw  df_tk_get
                             	
d530 : 07d7                  	dw	df_tk_mult
d532 : 07d7                  	dw	df_tk_div
d534 : 07d7                  	dw	df_tk_mod
d536 : 07d7                  	dw	df_tk_asl
d538 : 07d7                  	dw	df_tk_lsr
d53a : 07d7                  	dw	df_tk_add
d53c : 07d7                  	dw	df_tk_sub
                             	
d53e : 07d7                  	dw	df_tk_and
d540 : 07d7                  	dw	df_tk_or
d542 : 07d7                  	dw	df_tk_eor
d544 : 07d7                  	dw	df_tk_lte
d546 : 07d7                  	dw	df_tk_gte
d548 : 07d7                  	dw	df_tk_ne
d54a : 07d7                  	dw	df_tk_lt
d54c : 07d7                  	dw	df_tk_gt
d54e : 07d7                  	dw	df_tk_eq
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank1.s -----------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
d550 :                       df_tk_tokentype
d550 : 01                    	db	DFTK_KW
d551 : 01                    	db	DFTK_KW
d552 : 01                    	db	DFTK_KW
d553 : 01                    	db	DFTK_KW
d554 : 01                    	db	DFTK_KW
d555 : 01                    	db	DFTK_KW
d556 : 01                    	db	DFTK_KW
d557 : 01                    	db	DFTK_KW
d558 : 01                    	db	DFTK_KW
d559 : 01                    	db	DFTK_KW
d55a : 01                    	db	DFTK_KW
d55b : 01                    	db	DFTK_KW
d55c : 01                    	db	DFTK_KW
d55d : 01                    	db	DFTK_KW
d55e : 01                    	db	DFTK_KW
d55f : 01                    	db	DFTK_KW
d560 : 01                    	db	DFTK_KW
d561 : 01                    	db	DFTK_KW
d562 : 01                    	db	DFTK_KW
d563 : 01                    	db	DFTK_KW
d564 : 01                    	db	DFTK_KW
d565 : 01                    	db	DFTK_KW
d566 : 01                    	db	DFTK_KW
d567 : 01                    	db	DFTK_KW
d568 : 01                    	db	DFTK_KW
d569 : 01                    	db	DFTK_KW
d56a : 01                    	db	DFTK_KW
d56b : 01                    	db	DFTK_KW
d56c : 01                    	db	DFTK_KW
d56d : 01                    	db	DFTK_KW
d56e : 01                    	db	DFTK_KW
d56f : 01                    	db	DFTK_KW
d570 : 01                    	db	DFTK_KW
d571 : 01                    	db	DFTK_KW
d572 : 01                    	db	DFTK_KW
d573 : 01                    	db	DFTK_KW
d574 : 01                    	db	DFTK_KW
d575 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank1.s -----------------------------------

d576 : 01                    	db	DFTK_KW
d577 : 01                    	db	DFTK_KW
d578 : 01                    	db	DFTK_KW
d579 : 01                    	db	DFTK_KW
d57a : 01                    	db	DFTK_KW
d57b : 01                    	db	DFTK_KW
d57c : 01                    	db	DFTK_KW
d57d : 01                    	db	DFTK_KW
d57e : 01                    	db	DFTK_KW
d57f : 01                    	db	DFTK_KW
d580 : 01                    	db	DFTK_KW
d581 : 01                    	db	DFTK_KW
d582 : 01                    	db	DFTK_KW
d583 : 01                    	db	DFTK_KW
d584 : 01                    	db	DFTK_KW
d585 : 01                    	db	DFTK_KW
d586 : 01                    	db	DFTK_KW
d587 : 01                    	db	DFTK_KW
d588 : 01                    	db	DFTK_KW
d589 : 01                    	db	DFTK_KW
d58a : 01                    	db	DFTK_KW
d58b : 01                    	db	DFTK_KW
d58c : 01                    	db	DFTK_KW
d58d : 01                    	db	DFTK_KW
d58e : 01                    	db	DFTK_KW
d58f : 01                    	db	DFTK_KW
d590 : 01                    	db	DFTK_KW
d591 : 01                    	db	DFTK_KW
d592 : 01                    	db	DFTK_KW
d593 : 01                    	db	DFTK_KW
d594 : 01                    	db	DFTK_KW
d595 : 01                    	db	DFTK_KW
d596 : 01                    	db	DFTK_KW
d597 : 01                    	db	DFTK_KW
d598 : 01                    	db	DFTK_KW
d599 : 01                    	db	DFTK_KW
d59a : 01                    	db	DFTK_KW
d59b : 01                    	db	DFTK_KW
d59c : 01                    	db	DFTK_KW
d59d : 01                    	db	DFTK_KW
                             
d59e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d59f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5a0 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5a1 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5a2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5a3 : 42                    	db 	DFTK_FN | DFTK_STR
d5a4 : 42                    	db 	DFTK_FN | DFTK_STR
d5a5 : 42                    	db 	DFTK_FN | DFTK_STR
d5a6 : 42                    	db 	DFTK_FN | DFTK_STR
d5a7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5a8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5a9 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5aa : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5ab : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5ac : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5ad : 42                    	db 	DFTK_FN | DFTK_STR
d5ae : 42                    	db 	DFTK_FN | DFTK_STR
d5af : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5b0 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5b1 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5b2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank1.s -----------------------------------

d5b3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5b4 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5b5 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5b6 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5b7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
d5b8 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d5b9 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d5ba : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d5bb : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d5bc : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d5bd : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
d5be : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
d5bf : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d5c0 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d5c1 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d5c2 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d5c3 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d5c4 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d5c5 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d5c6 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d5c7 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-1 HOMEBREW COMPUTER
                             ;*	Hardware and software design by Dolo Miah
                             ;*	Copyright 2014-18
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank1.s -----------------------------------

                             ;* General routine to tokenise a mandatory variab
d5c8 :                       df_tk_variable
d5c8 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d5cb : 204cce           [ 6] 	jsr df_tk_peek_buf
d5ce : 2095ce           [ 6] 	jsr df_tk_isalpha
d5d1 : 901d             [ 3] 	bcc df_tk_error
d5d3 : a900             [ 2] 	lda #0
d5d5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
d5d6 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
d5d6 : a980             [ 2] 	lda #0x80
d5d8 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
d5db : 20c8d5           [ 6] 	jsr df_tk_variable
d5de : 2094cf           [ 6] 	jsr df_tk_var
                             	; next char sound be =
d5e1 : a93d             [ 2] 	lda #'='
d5e3 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; skip more ws
d5e6 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; should not be at end of line
d5e9 : 204cce           [ 6] 	jsr df_tk_peek_buf
d5ec : f002             [ 3] 	beq df_tk_parse_ass_err
d5ee : 18               [ 2] 	clc
d5ef : 60               [ 6] 	rts
d5f0 :                       df_tk_parse_ass_err
d5f0 :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
d5f2 :                       df_tk_assign
d5f2 : 20d6d5           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
d5f5 : 20dbd0           [ 6] 	jsr df_tk_expression
d5f8 : 18               [ 2] 	clc
d5f9 : 60               [ 6] 	rts
                             
                             
d5fa :                       df_tk_comment
                             	; copy all subsequent chars to token
d5fa : 2052ce           [ 6] 	jsr df_tk_get_buf
d5fd : f005             [ 4] 	beq df_tk_comment_done
d5ff : 205dce           [ 6] 	jsr df_tk_put_tok
d602 : 80f6             [ 4] 	bra df_tk_comment
d604 :                       df_tk_comment_done
d604 : 18               [ 2] 	clc
d605 : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
d606 :                       df_tk_listp_procname
                             	; try and find the first proc
d606 : a95f             [ 2] 	lda #'_'
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank1.s -----------------------------------

d608 : 20dece           [ 6] 	jsr df_tk_expect_tok
d60b : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
d60d : 204cce           [ 6] 	jsr df_tk_peek_buf
d610 : 2095ce           [ 6] 	jsr df_tk_isalpha
d613 : 9012             [ 3] 	bcc df_tk_listp_procname_err
d615 :                       df_tk_listp_procname_ch
d615 : 204cce           [ 6] 	jsr df_tk_peek_buf
d618 : 20a2ce           [ 6] 	jsr df_tk_isalphanum
d61b : 9008             [ 3] 	bcc df_tk_listp_procname_ok
d61d : 2052ce           [ 6] 	jsr df_tk_get_buf
d620 : 205dce           [ 6] 	jsr df_tk_put_tok
d623 : 80f0             [ 3] 	bra df_tk_listp_procname_ch
d625 :                       df_tk_listp_procname_ok
d625 : 18               [ 2] 	clc
d626 : 60               [ 6] 	rts
d627 :                       df_tk_listp_procname_err
d627 : 38               [ 2] 	sec
d628 : 60               [ 6] 	rts
                             
d629 :                       df_tk_list
d629 : 2006d6           [ 6] 	jsr df_tk_listp_procname
                             	; if not found try '*' or normal list
d62c : b007             [ 3] 	bcs df_tk_list_procs
                             	; the '-' allows to list to end
d62e : a92d             [ 2] 	lda #'-'
                             	; find and add if it exists
d630 : 20dece           [ 6] 	jsr df_tk_expect_tok
d633 : 8014             [ 3] 	bra df_tk_list_done
                             	; '*' means list procs
d635 :                       df_tk_list_procs
                             	; try and find the first proc
d635 : a92a             [ 2] 	lda #'*'
d637 : 20dece           [ 6] 	jsr df_tk_expect_tok
d63a : 900d             [ 3] 	bcc df_tk_list_done
                             	; else normal line number
d63c :                       df_tk_list_line
                             	; tokenise an expression
d63c : 20dbd0           [ 6] 	jsr df_tk_expression
                             	; if not at the end then keep going
d63f : a92c             [ 2] 	lda #','
d641 : 20dece           [ 6] 	jsr df_tk_expect_tok
d644 : b003             [ 3] 	bcs df_tk_list_done
                             	; else get the next expression
d646 : 20dbd0           [ 6] 	jsr df_tk_expression	
d649 :                       df_tk_list_done
d649 : 18               [ 2] 	clc
d64a : 60               [ 6] 	rts
                             
d64b :                       df_tk_printat
                             	; Must get 2 parms for x,y
d64b : 2010d7           [ 6] 	jsr df_tk_2parms
                             	; if not at the end then keep going
d64e : a92c             [ 2] 	lda #','
d650 : 20dece           [ 6] 	jsr df_tk_expect_tok
d653 : 9002             [ 3] 	bcc df_tk_print
                             	; else done
d655 : 18               [ 2] 	clc
d656 : 60               [ 6] 	rts
d657 :                       df_tk_data
d657 :                       df_tk_println
d657 :                       df_tk_print
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank1.s -----------------------------------

d657 :                       df_tk_asm_db
d657 :                       df_tk_asm_dw
                             	; tokenise an expression
d657 : 20dbd0           [ 6] 	jsr df_tk_expression
                             	; is there more to come?
d65a : a92c             [ 2] 	lda #','
d65c : 20dece           [ 6] 	jsr df_tk_expect_tok
d65f : b002             [ 3] 	bcs df_tk_print_done
d661 : 80f4             [ 3] 	bra df_tk_print
d663 :                       df_tk_print_done
d663 : 18               [ 2] 	clc
d664 : 60               [ 6] 	rts
                             
d665 :                       df_tk_input
d665 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d668 : 20c8d5           [ 6] 	jsr df_tk_variable
d66b : 2094cf           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
d66e : 60               [ 6] 	rts
                             	
d66f :                       df_tk_read
                             	; tokenise a variable
d66f : 20c8d5           [ 6] 	jsr df_tk_variable
d672 : 2094cf           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
d675 : a92c             [ 2] 	lda #','
d677 : 20dece           [ 6] 	jsr df_tk_expect_tok
d67a : 90f3             [ 3] 	bcc df_tk_read
d67c : 18               [ 2] 	clc
d67d : 60               [ 6] 	rts
                             
d67e :                       df_tk_dim
d67e :                       df_tk_redim
                             	; tokenise a variable
d67e : 20c8d5           [ 6] 	jsr df_tk_variable
d681 : 20dccf           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
d684 : a92c             [ 2] 	lda #','
d686 : 20dece           [ 6] 	jsr df_tk_expect_tok
d689 : 90f3             [ 3] 	bcc df_tk_dim
d68b : 18               [ 2] 	clc
d68c : 60               [ 6] 	rts
                             
d68d :                       df_tk_local
d68d : 20aece           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d690 : 20c8d5           [ 6] 	jsr df_tk_variable
d693 : 20c6cf           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
d696 : a92c             [ 2] 	lda #','
d698 : 20dece           [ 6] 	jsr df_tk_expect_tok
d69b : 90f0             [ 3] 	bcc df_tk_local
d69d : 18               [ 2] 	clc
d69e : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
d69f :                       df_tk_def
d69f : a900             [ 2] 	lda #0
d6a1 : 20e7cf           [ 6] 	jsr df_tk_proc
d6a4 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank1.s -----------------------------------

                             
                             
                             ; syntax : for %a=1,10,1
d6a5 :                       df_tk_for
d6a5 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
d6a8 : a901             [ 2] 	lda #DFVVT_INT
d6aa : 2094cf           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
d6ad : a93d             [ 2] 	lda #'='
d6af : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; starting value
d6b2 : 20dbd0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d6b5 : a92c             [ 2] 	lda #','
d6b7 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; ending value
d6ba : 20dbd0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d6bd : a92c             [ 2] 	lda #','
d6bf : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             	
                             	; step value
d6c2 : 20dbd0           [ 6] 	jsr df_tk_expression
d6c5 :                       df_tk_for_done
d6c5 : 18               [ 2] 	clc
d6c6 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
d6c7 :                       df_tk_callproc
d6c7 : 38               [ 2] 	sec
d6c8 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
d6c9 :                       df_tk_reset
d6c9 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d6cc : a901             [ 2] 	lda #DFVVT_INT
d6ce : 2094cf           [ 6] 	jsr df_tk_var
d6d1 : 60               [ 6] 	rts
                             
                             ; date time expects a string variable only
d6d2 :                       df_tk_datetime
d6d2 : 20aece           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d6d5 : a904             [ 2] 	lda #DFVVT_STR
d6d7 : 2094cf           [ 6] 	jsr df_tk_var
d6da : 60               [ 6] 	rts
                             
                             ; These functions expect 1 parmeter
d6db :                       df_tk_len
d6db :                       df_tk_chr
d6db :                       df_tk_key
d6db :                       df_tk_get
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank1.s -----------------------------------

d6db :                       df_tk_stick
d6db :                       df_tk_deek
d6db :                       df_tk_vpeek
d6db :                       df_tk_peek
d6db :                       df_tk_nvpeek
d6db :                       df_tk_mem
d6db :                       df_tk_rnd
d6db :                       df_tk_hex
d6db :                       df_tk_dec
d6db :                       df_tk_asc
d6db :                       df_tk_val
d6db :                       df_tk_sgn
d6db :                       df_tk_fcreate
d6db :                       df_tk_fopen
d6db : 20dbd0           [ 6] 	jsr df_tk_expression
d6de :                       df_tk_closebrkt
d6de : a929             [ 2] 	lda #')'
d6e0 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
d6e3 : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
d6e4 :                       df_tk_addr
d6e4 :                       df_tk_elapsed
d6e4 : 20c8d5           [ 6] 	jsr df_tk_variable
d6e7 : 2094cf           [ 6] 	jsr df_tk_var
                             	; must have close braket
d6ea : 4cded6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
d6ed :                       df_tk_left
d6ed :                       df_tk_right
d6ed :                       df_tk_scrn
d6ed :                       df_tk_pixel
d6ed : 2010d7           [ 6] 	jsr df_tk_2parms
d6f0 : 4cded6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
d6f3 :                       df_tk_mid
d6f3 : 201cd7           [ 6] 	jsr df_tk_3parms
d6f6 : 4cded6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
d6f9 :                       df_tk_call
d6f9 : 2010d7           [ 6] 	jsr df_tk_2parms
d6fc : a92c             [ 2] 	lda #','
d6fe : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
d701 : 2010d7           [ 6] 	jsr df_tk_2parms
d704 : 4cded6           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
d707 :                       df_tk_else
d707 :                       df_tk_endif
d707 :                       df_tk_enddef
d707 :                       df_tk_abort
d707 :                       df_tk_repeat
d707 :                       df_tk_next
d707 :                       df_tk_wend
d707 :                       df_tk_run
d707 :                       df_tk_add
d707 :                       df_tk_sadd
d707 :                       df_tk_dir
d707 :                       df_tk_dirl
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank1.s -----------------------------------

d707 :                       df_tk_cls
d707 :                       df_tk_new
d707 :                       df_tk_mult
d707 :                       df_tk_div
d707 :                       df_tk_mod
d707 :                       df_tk_asl
d707 :                       df_tk_lsr
d707 :                       df_tk_sub
d707 :                       df_tk_and
d707 :                       df_tk_or
d707 :                       df_tk_eor
d707 :                       df_tk_lte
d707 :                       df_tk_lt
d707 :                       df_tk_gte
d707 :                       df_tk_gt
d707 :                       df_tk_ne
d707 :                       df_tk_eq
d707 :                       df_tk_monitor
d707 :                       df_tk_fclose
                             ;df_tk_retsub
d707 : 18               [ 2] 	clc
d708 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
d709 :                       df_tk_return
d709 : 4cdbd0           [ 3] 	jmp df_tk_expression
                             
                             ; These commands expect 1 parameter	
d70c :                       df_tk_while
d70c :                       df_tk_until
d70c :                       df_tk_if
d70c :                       df_tk_elseif
d70c :                       df_tk_wait
d70c :                       df_tk_cursor
d70c :                       df_tk_mode
d70c :                       df_tk_del
d70c :                       df_tk_chdir
d70c :                       df_tk_mkdir
d70c :                       df_tk_hires
d70c :                       df_tk_load
d70c :                       df_tk_save
d70c :                       df_tk_pixmode
d70c :                       df_tk_pixmask
d70c :                       df_tk_pixcol
d70c :                       df_tk_put
d70c :                       df_tk_himem
d70c :                       df_tk_font
d70c :                       df_tk_device
                             ;df_tk_goto
                             ;df_tk_gosub
                             
d70c :                       df_tk_asm_org
d70c :                       df_tk_asm_opt
d70c :                       df_tk_asm_ds
                             
                             	; first parm
d70c : 20dbd0           [ 6] 	jsr df_tk_expression
d70f : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
d710 :                       df_tk_setvdp
d710 :                       df_tk_spritepat
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank1.s -----------------------------------

d710 :                       df_tk_spritecol
d710 :                       df_tk_spritenme
d710 :                       df_tk_vpoke
d710 :                       df_tk_poke
d710 :                       df_tk_doke
d710 :                       df_tk_nvpoke
d710 :                       df_tk_point
d710 :                       df_tk_vload
d710 :                       df_tk_2parms
                             	; first parm
d710 : 20dbd0           [ 6] 	jsr df_tk_expression
d713 : a92c             [ 2] 	lda #','
d715 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise second parm
d718 : 20dbd0           [ 6] 	jsr df_tk_expression
d71b : 60               [ 6] 	rts
                             
                             ; these commands expect 3 numeric parameters
d71c :                       df_tk_hplot
d71c :                       df_tk_plot
d71c :                       df_tk_circle
d71c :                       df_tk_sound
d71c :                       df_tk_colour
d71c :                       df_tk_spritepos
d71c :                       df_tk_shape
d71c :                       df_tk_renum
d71c :                       df_tk_3parms
d71c : 2010d7           [ 6] 	jsr df_tk_2parms
d71f : a92c             [ 2] 	lda #','
d721 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise third parm
d724 : 20dbd0           [ 6] 	jsr df_tk_expression
d727 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
d728 :                       df_tk_play
d728 :                       df_tk_music
d728 :                       df_tk_line
d728 :                       df_tk_box
d728 :                       df_tk_bload
d728 :                       df_tk_4parms
d728 : 2010d7           [ 6] 	jsr df_tk_2parms
d72b : a92c             [ 2] 	lda #','
d72d : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
d730 : 2010d7           [ 6] 	jsr df_tk_2parms
d733 : 60               [ 6] 	rts
                             
                             ; these commands expect 5 numeric parameters
d734 :                       df_tk_sprite
d734 :                       df_tk_bsave
d734 :                       df_tk_5parms
d734 : 2028d7           [ 6] 	jsr df_tk_4parms
d737 : a92c             [ 2] 	lda #','
d739 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
d73c : 20dbd0           [ 6] 	jsr df_tk_expression
d73f : 60               [ 6] 	rts
                             
                             
                             
d740 :                       mod_sz_tokenise_e
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank1.s -----------------------------------

                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
d740 :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
d740 :                       df_pg_find_line
d740 : a4a7             [ 3] 	ldy df_prgstrt		; num_tmp contains starting poin
d742 : 8491             [ 3] 	sty num_tmp
d744 : a4a8             [ 3] 	ldy df_prgstrt+1
d746 : 8492             [ 3] 	sty num_tmp+1
d748 : 8685             [ 3] 	stx num_a			; num_a contains the line number to 
d74a : 8586             [ 3] 	sta num_a+1
d74c :                       df_pg_check_next_line	; Also used during runtime 
d74c : a591             [ 3] 	lda num_tmp
d74e : c5a9             [ 3] 	cmp df_prgend
d750 : d011             [ 3] 	bne df_pg_check_line
d752 : a592             [ 3] 	lda num_tmp+1
d754 : c5aa             [ 3] 	cmp df_prgend+1
d756 : d00b             [ 3] 	bne df_pg_check_line
d758 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
d758 : a200             [ 2] 	ldx #0
d75a : a191             [ 6] 	lda (num_tmp,x)
d75c : a8               [ 2] 	tay
d75d : a691             [ 3] 	ldx num_tmp
d75f : a592             [ 3] 	lda num_tmp+1
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank1.s -----------------------------------

d761 : 38               [ 2] 	sec
d762 : 60               [ 6] 	rts
d763 :                       df_pg_check_line
d763 : 38               [ 2] 	sec					; Do a trial subtract of
d764 : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
d766 : a585             [ 3] 	lda num_a
d768 : f191             [ 5] 	sbc (num_tmp),y
d76a : 8593             [ 3] 	sta num_tmp+2		; Partial result of sbc
d76c : c8               [ 2] 	iny
d76d : a586             [ 3] 	lda num_a+1
d76f : f191             [ 5] 	sbc (num_tmp),y
d771 : 0593             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
d773 : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
d775 : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
d777 : a200             [ 2] 	ldx #0
d779 : 18               [ 2] 	clc
d77a : a591             [ 3] 	lda num_tmp
d77c : 6191             [ 6] 	adc (num_tmp,x)
d77e : 8591             [ 3] 	sta num_tmp
d780 : 90ca             [ 3] 	bcc df_pg_check_next_line
d782 : e692             [ 5] 	inc num_tmp+1
d784 : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
d786 :                       df_pr_line_match
d786 : a200             [ 2] 	ldx #0
d788 : a191             [ 6] 	lda (num_tmp,x)
d78a : a8               [ 2] 	tay
d78b : a691             [ 3] 	ldx num_tmp
d78d : a592             [ 3] 	lda num_tmp+1
d78f : 18               [ 2] 	clc
d790 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d791 :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
d791 : 8685             [ 3] 	stx num_a
d793 : 8586             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
d795 : a5a9             [ 3] 	lda df_prgend
d797 : 858d             [ 3] 	sta num_x
d799 : a5aa             [ 3] 	lda df_prgend+1
d79b : 858e             [ 3] 	sta num_x+1	
d79d :                       df_pg_insert_byte
                             	; Move a byte from the current top
d79d : a200             [ 2] 	ldx #0
d79f : a18d             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
d7a1 : 918d             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
d7a3 : a58d             [ 3] 	lda num_x
d7a5 : c585             [ 3] 	cmp num_a
d7a7 : d012             [ 3] 	bne df_pg_insert_next_byte
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------------------- bank1.s -----------------------------------

d7a9 : a58e             [ 3] 	lda num_x+1
d7ab : c586             [ 3] 	cmp num_a+1
d7ad : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
d7af : 18               [ 2] 	clc
d7b0 : 98               [ 2] 	tya
d7b1 : 65a9             [ 3] 	adc df_prgend
d7b3 : 85a9             [ 3] 	sta df_prgend
                             	_bcc 2
                             
d7b7 : e6aa             [ 5] 	inc df_prgend+1
d7b9 : 18               [ 2] 	clc
d7ba : 60               [ 6] 	rts	; C=0
d7bb :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
d7c8 : 4c9dd7           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d7cb :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
d7cb : 8685             [ 3] 	stx num_a
d7cd : 8586             [ 3] 	sta num_a+1
d7cf : a200             [ 2] 	ldx #0	; No indirect indexing
d7d1 :                       df_pg_delete_byte
                             	; Move a byte from current+Y
d7d1 : b185             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
d7d3 : 8185             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
d7d5 : a585             [ 3] 	lda num_a
d7d7 : c5a9             [ 3] 	cmp df_prgend
d7d9 : d017             [ 3] 	bne df_pg_delete_next_byte
d7db : a586             [ 3] 	lda num_a+1
d7dd : c5aa             [ 3] 	cmp df_prgend+1
d7df : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
d7e1 : 8485             [ 3] 	sty num_a
d7e3 : 38               [ 2] 	sec
d7e4 : a5a9             [ 3] 	lda df_prgend
d7e6 : e585             [ 3] 	sbc num_a
d7e8 : 85a9             [ 3] 	sta df_prgend
d7ea : a5aa             [ 3] 	lda df_prgend+1
d7ec : e900             [ 2] 	sbc #0
d7ee : 85aa             [ 3] 	sta df_prgend+1
d7f0 : 18               [ 2] 	clc
d7f1 : 60               [ 6] 	rts
d7f2 :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
d7f8 : 4cd1d7           [ 3] 	jmp df_pg_delete_byte
                             
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
d7fb :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input into df_linbuff
d7fb : a200             [ 2] 	ldx #lo(df_linbuff)
d7fd : a90a             [ 2] 	lda #hi(df_linbuff)
d7ff : a078             [ 2] 	ldy #120
d801 : 20cfc5           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
d804 : 98               [ 2] 	tya
d805 : d002             [ 3] 	bne df_pg_inputline_ok
d807 : 38               [ 2] 	sec
d808 : 60               [ 6] 	rts
d809 :                       df_pg_inputline_ok
d809 : 18               [ 2] 	clc
d80a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
d80b :                       df_pg_dflat
                             	; reset stack pointer
d80b : a2ff             [ 2] 	ldx #255
d80d : 9a               [ 2] 	txs
                             
                             	; error handler address
d80e : a95e             [ 2] 	lda #lo(df_trap_error)
d810 : 85a2             [ 3] 	sta df_pc
d812 : a9f3             [ 2] 	lda #hi(df_trap_error)
d814 : 85a3             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
d816 :                       df_pg_prompt
d816 : a2b4             [ 2] 	ldx #lo(df_pg_prompt_msg)
d818 : a9d8             [ 2] 	lda #hi(df_pg_prompt_msg)
d81a : 200bc6           [ 6] 	jsr io_print_line
d81d : a900             [ 2] 	lda #0
d81f : 85a0             [ 3] 	sta df_immed
d821 :                       df_pg_getcommand
                             	; current line is the token buffer when editing
d821 : a980             [ 2] 	lda #lo(df_tokbuff)
d823 : 85c8             [ 3] 	sta df_currlin
d825 : a90a             [ 2] 	lda #hi(df_tokbuff)
d827 : 85c9             [ 3] 	sta df_currlin+1
d829 : 38               [ 2] 	sec
d82a : 20fbd7           [ 6] 	jsr df_pg_inputline
d82d : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
d82f : ad000a           [ 4] 	lda df_linbuff		; Check if first char is ! to es
d832 : c921             [ 2] 	cmp #'!'
d834 : d005             [ 3] 	bne df_pg_skip_mon
d836 : 200ec5           [ 6] 	jsr _cmd_immediate	; If so call monitor immediat
d839 : 80db             [ 3] 	bra df_pg_prompt
d83b :                       df_pg_skip_mon
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------------------- bank1.s -----------------------------------

d83b : 2054d8           [ 6] 	jsr df_pg_tokenise
d83e : a5a0             [ 3] 	lda df_immed
d840 : f0df             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
d842 : 20bbd8           [ 6] 	jsr df_initrun
                             	; run from tokbuff
d845 : a280             [ 2] 	ldx #lo(df_tokbuff)
d847 : a90a             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
d849 : a003             [ 2] 	ldy #3
                             ;	sty df_exeoff
                             	; init currlin
d84b : 2048dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
d84e : 2059dc           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
d851 : 4c16d8           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
d854 :                       df_pg_tokenise
d854 : a900             [ 2] 	lda #0
d856 : 859f             [ 3] 	sta errno
d858 : 201fd1           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
d85b : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d85e : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
d861 : d00f             [ 3] 	bne df_pg_line_number
                             	; check if line empty
d863 : ad800a           [ 4] 	lda df_tokbuff
d866 : f009             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
d868 : a901             [ 2] 	lda #1
d86a : 85a0             [ 3] 	sta df_immed
                             	; Zero out text line buffer
d86c : a900             [ 2] 	lda #0
d86e : 8d000a           [ 4] 	sta df_linbuff
d871 :                       df_pg_nothing
d871 : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
d872 :                       df_pg_line_number
                             	; Check if this line exists
d872 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d875 : aa               [ 2] 	tax
d876 : ad820a           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
d879 : 2040d7           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
d87c : 8545             [ 3] 	sta tmp_d
d87e : 8a               [ 2] 	txa
d87f : 48               [ 3] 	pha
d880 : a545             [ 3] 	lda tmp_d
d882 : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
d883 : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
d885 : 20cbd7           [ 6] 	jsr df_pg_delete_block
d888 :                       df_pg_skip_del_line
                             	; If line length is zero
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------------------- bank1.s -----------------------------------

                             	; then nothing else to do (i.e. line was deleted
d888 : ad800a           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
d88b : 48               [ 3] 	pha
d88c : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
d88e : 68               [ 4] 	pla
d88f : 68               [ 4] 	pla
d890 : 68               [ 4] 	pla
d891 : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
d892 :                       df_pg_insertline
                             	; Restore previously saved length
d892 : 68               [ 4] 	pla
d893 : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
d894 : 68               [ 4] 	pla
d895 : 8545             [ 3] 	sta tmp_d
d897 : 68               [ 4] 	pla
d898 : aa               [ 2] 	tax
d899 : a545             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
d89e : 2091d7           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
d8a1 : 68               [ 4] 	pla
d8a2 : a8               [ 2] 	tay
d8a3 : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
d8a4 : 68               [ 4] 	pla
d8a5 : aa               [ 2] 	tax
d8a6 : 8685             [ 3] 	stx num_a
d8a8 : 68               [ 4] 	pla
d8a9 : 8586             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
d8ab :                       df_pg_insertlinbyte
d8ab : b9800a           [ 4] 	lda df_tokbuff,y
d8ae : 9185             [ 5] 	sta (num_a),y
d8b0 : 88               [ 2] 	dey
d8b1 : 10f8             [ 3] 	bpl df_pg_insertlinbyte
d8b3 : 60               [ 6] 	rts
                             	
d8b4 :                       df_pg_prompt_msg
d8b4 : 52656164790d00        	db "Ready",UTF_CR,0
                             
d8bb :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------------------- bank1.s -----------------------------------

                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d8bb :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
d8bb :                       df_initrun
                             	; Set the key mask to check every 16 instruction
d8bb : a910             [ 2] 	lda #0x10
d8bd : 859e             [ 3] 	sta df_checkmsk
d8bf : 859d             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
d8d7 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
d8d9 : 86b8             [ 3] 	stx df_rtstop
                             	; make X=0
d8db : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
d8dc : 86b9             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
d8de : 86d7             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
d8e0 : 86d5             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
d8e2 : 20e6d8           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
d8e5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
d8e6 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d8ee : a200             [ 2] 	ldx #0
d8f0 :                       df_rt_init_vvt_slot
d8f0 : a5e3             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------------------- bank1.s -----------------------------------

d8f2 : c5af             [ 3] 	cmp df_vvtstrt
d8f4 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
d8f6 : a5e4             [ 3] 	lda df_tmpptra+1
d8f8 : c5b0             [ 3] 	cmp df_vvtstrt+1
d8fa : f02b             [ 4] 	beq df_rt_init_done
d8fc :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
d8fc : a000             [ 2] 	ldy #0
d8fe : b1e3             [ 5] 	lda (df_tmpptra),y
d900 : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_PTR
d902 : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
d904 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
d905 : a900             [ 2] 	lda #0
d907 : 91e3             [ 5] 	sta (df_tmpptra),y
d909 : c8               [ 2] 	iny
d90a : 91e3             [ 5] 	sta (df_tmpptra),y
d90c : c8               [ 2] 	iny
d90d : 91e3             [ 5] 	sta (df_tmpptra),y
d90f : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
                             ;	lda (df_tmpptra,x)
d910 : b2e3             [ 5] 	lda (df_tmpptra)
d912 : 2940             [ 2] 	and #DFVVT_PROC
d914 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
d916 : a900             [ 2] 	lda #0
d918 : 91e3             [ 5] 	sta (df_tmpptra),y
d91a :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
                             ;	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
d925 : 80c9             [ 4] 	bra df_rt_init_vvt_slot 	; Don't rely on bcc
d927 :                       df_rt_init_done
d927 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
d928 :                       df_rt_getnval
                             	; evaluate the expression
d928 : 202ed9           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
d92b : 4c32f2           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
d92e :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
d92e : a900             [ 2] 	lda #0
d930 : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------------------- bank1.s -----------------------------------

                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
d931 :                       df_rt_neval_optk
d931 : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
d933 : c4c1             [ 3] 	cpy df_nxtstidx
d935 : f03a             [ 3] 	beq df_rt_neval_process
d937 : b1c8             [ 5] 	lda (df_currlin),y		; Get the byte which could b
d939 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
d93b : c920             [ 2] 	cmp #DFTK_ESCVAL		; >=32 means it's an normal ch
d93d : b007             [ 3] 	bcs df_rt_neval_chr
d93f :                       df_rt_neval_esc
d93f : 20b3d9           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
d942 : e6ca             [ 5] 	inc df_exeoff
d944 : d0eb             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
d946 :                       df_rt_neval_chr
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
d946 : c92c             [ 2] 	cmp #','
d948 : f027             [ 3] 	beq df_rt_neval_process
d94a : c95d             [ 2] 	cmp #']'
d94c : f023             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
d94e : c929             [ 2] 	cmp #')'
d950 : f01f             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
d952 : e6ca             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
d954 : c928             [ 2] 	cmp #'('
d956 : d0d9             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
d958 : 202ed9           [ 6] 	jsr df_rt_neval
                             	; move to next byte
d95b : e6ca             [ 5] 	inc df_exeoff
d95d : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
d95f :                       df_rt_neval_tk
d95f : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
d961 : aa               [ 2] 	tax
d962 : bd50d5           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
d965 : 48               [ 3] 	pha
d966 : 2908             [ 2] 	and #DFTK_OP
d968 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
d96a : 68               [ 4] 	pla
d96b : 2902             [ 2] 	and #DFTK_FN
d96d : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------------------- bank1.s -----------------------------------

d971 :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
d971 : 68               [ 4] 	pla
d972 : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
d974 : 20bfdc           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
d977 : 4c71d9           [ 3] 	jmp df_rt_neval_process
d97a :                       df_rt_neval_done
d97a : 60               [ 6] 	rts
                             
d97b :                       df_rt_neval_tk_fn
d97b : 18               [ 2] 	clc
d97c : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
d97d : e6ca             [ 5] 	inc df_exeoff
d97f : 20bfdc           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
d982 :                       df_rt_neval_nextbyte
d982 : e6ca             [ 5] 	inc df_exeoff
d984 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
d986 :                       df_rt_neval_tk_opp
d986 : 68               [ 4] 	pla				; Get A off stack which is the type
d987 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
d987 : 86e3             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
d989 : 2907             [ 2] 	and #DFTK_OPMSK
d98b : 85e5             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
d98d : 68               [ 4] 	pla
d98e : 48               [ 3] 	pha
d98f : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
d990 : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
d992 : bd50d5           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
d995 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
d997 : c5e5             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
d999 : f002             [ 3] 	beq df_rt_neval_donow
d99b : b011             [ 3] 	bcs df_rt_neval_pushOp
d99d :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
d99d : 68               [ 4] 	pla
d99e : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------------------- bank1.s -----------------------------------

d99f : a5e3             [ 3] 	lda df_tmpptra
d9a1 : 48               [ 3] 	pha
d9a2 : aa               [ 2] 	tax		; X = current op
d9a3 : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
d9a4 : 20bfdc           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
d9a7 : 68               [ 4] 	pla
d9a8 : aa               [ 2] 	tax
                             	; get the token type in to A
d9a9 : bd50d5           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
d9ac : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
d9ae :                       df_rt_neval_pushOp
                             	; push the operator
d9ae : a5e3             [ 3] 	lda df_tmpptra
d9b0 : 48               [ 3] 	pha
                             	; move to next byte
d9b1 : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
d9b3 :                       df_rt_eval_esc
d9b3 : 0a               [ 2] 	asl a
d9b4 : aa               [ 2] 	tax
d9b5 : 7cb8d9           [ 6] 	jmp (df_rt_eval_esc_tab,x)
                             ;	lda df_rt_eval_esc_tab,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_eval_esc_tab+1,x
                             ;	sta df_tmpptra+1
                             ;	jmp (df_tmpptra)
                             
d9b8 :                       df_rt_eval_esc_tab
d9b8 : 75da                  	dw df_rt_eval_chr
d9ba : 81da                  	dw df_rt_eval_reserved
d9bc : 81da                  	dw df_rt_eval_reserved
d9be : 81da                  	dw df_rt_eval_reserved
d9c0 : 81da                  	dw df_rt_eval_reserved
d9c2 : 81da                  	dw df_rt_eval_reserved	; no such thing as bytdec
d9c4 : 75da                  	dw df_rt_eval_bythex
d9c6 : 75da                  	dw df_rt_eval_bytbin
d9c8 : 81da                  	dw df_rt_eval_reserved
d9ca : 75da                  	dw df_rt_eval_intdec
d9cc : 75da                  	dw df_rt_eval_inthex
d9ce : 75da                  	dw df_rt_eval_intbin
d9d0 : 81da                  	dw df_rt_eval_reserved
d9d2 : 81da                  	dw df_rt_eval_reserved
d9d4 : 81da                  	dw df_rt_eval_reserved
d9d6 : 81da                  	dw df_rt_eval_reserved
d9d8 : 83da                  	dw df_rt_eval_strlit
d9da : c8da                  	dw df_rt_eval_var
d9dc : bcdb                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
d9de :                       df_rt_seval
d9de : a6bc             [ 3] 	ldx df_sevalptr
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------------------- bank1.s -----------------------------------

d9e0 : a5bd             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
d9e2 :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
d9e2 : 8545             [ 3] 	sta tmp_d
d9e4 : 48               [ 3] 	pha
d9e5 : 8a               [ 2] 	txa
d9e6 : 48               [ 3] 	pha
d9e7 : a545             [ 3] 	lda tmp_d
                             	; push original destination
d9e9 : 2007f2           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_ost_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
d9ec :                       df_rt_seval_optk
d9ec : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
d9ee : c4c1             [ 3] 	cpy df_nxtstidx
d9f0 : f069             [ 4] 	beq df_rt_seval_done
                             
d9f2 : b1c8             [ 5] 	lda (df_currlin),y
d9f4 : 301c             [ 4] 	bmi df_rt_seval_tk
                             
d9f6 : c920             [ 2] 	cmp #DFTK_ESCVAL
d9f8 : 900a             [ 4] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
d9fa : c92c             [ 2] 	cmp #','
d9fc : f05d             [ 4] 	beq df_rt_seval_done
d9fe : c929             [ 2] 	cmp #')'
da00 : f059             [ 3] 	beq df_rt_seval_done
da02 : d04a             [ 3] 	bne df_rt_seval_nextbyte
da04 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
da04 : c910             [ 2] 	cmp #DFTK_STRLIT
da06 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
da08 : c911             [ 2] 	cmp #DFTK_VAR
da0a : f028             [ 3] 	beq	df_rt_seval_esc_var
da0c : c912             [ 2] 	cmp #DFTK_PROC
da0e : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
da12 :                       df_rt_seval_tk
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------------------- bank1.s -----------------------------------

da12 : 84ca             [ 3] 	sty df_exeoff
da14 : 297f             [ 2] 	and #0x7f
                             	; check if op
da16 : aa               [ 2] 	tax
da17 : bd50d5           [ 4] 	lda df_tk_tokentype,x
da1a : 2904             [ 2] 	and #DFTK_STROP
da1c : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
da1e : bd50d5           [ 4] 	lda df_tk_tokentype,x
da21 : 2902             [ 2] 	and #DFTK_FN
da23 : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
da27 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
da27 : 8a               [ 2] 	txa
da28 : 4c4eda           [ 3] 	jmp df_rt_seval_nextbyte
                             
da2b :                       df_rt_seval_tk_fn
da2b : 8a               [ 2] 	txa
da2c : e6ca             [ 5] 	inc df_exeoff
da2e : 20bfdc           [ 6] 	jsr df_rt_run_token
da31 : 4c38da           [ 3] 	jmp df_rt_seval_copy
                             
da34 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
da34 : 18               [ 2] 	clc
da35 : 20c8da           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
da38 :                       df_rt_seval_copy
                             	; pull destination pointer
da38 : 68               [ 4] 	pla
da39 : 85e3             [ 3] 	sta df_tmpptra
da3b : 68               [ 4] 	pla
da3c : 85e4             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
da3e : 202af2           [ 6] 	jsr df_ost_popStr
da41 : 86e5             [ 3] 	stx df_tmpptrb
da43 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
da45 : 205fda           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
da48 : a5e4             [ 3] 	lda df_tmpptra+1
da4a : 48               [ 3] 	pha
da4b : a5e3             [ 3] 	lda df_tmpptra
da4d : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
da4e :                       df_rt_seval_nextbyte
da4e : e6ca             [ 5] 	inc df_exeoff
da50 : 4cecd9           [ 3] 	jmp df_rt_seval_optk
                             
da53 :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
da53 : 2083da           [ 6] 	jsr df_rt_eval_strlit
da56 : 4c38da           [ 3] 	jmp df_rt_seval_copy
                             
da59 :                       df_rt_seval_esc_proc
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------------------- bank1.s -----------------------------------

                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
da5b :                       df_rt_seval_done
                             	;
da5b : 68               [ 4] 	pla
da5c : 68               [ 4] 	pla
                             
da5d : 18               [ 2] 	clc
da5e : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
da5f :                       df_rt_copyStr
da5f : a000             [ 2] 	ldy #0
da61 :                       df_rt_copyStr_ch
da61 : b1e5             [ 5] 	lda (df_tmpptrb),y
da63 : 91e3             [ 5] 	sta (df_tmpptra),y
da65 : f003             [ 3] 	beq df_rt_copyStr_done
da67 : c8               [ 2] 	iny
da68 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
da6a :                       df_rt_copyStr_done
da6a : 98               [ 2] 	tya
da6b : 18               [ 2] 	clc
da6c : 65e3             [ 3] 	adc df_tmpptra
da6e : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
da72 : e6e4             [ 5] 	inc df_tmpptra+1
da74 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
da75 :                       df_rt_eval_intdec
da75 :                       df_rt_eval_bytdec
da75 :                       df_rt_eval_inthex
da75 :                       df_rt_eval_bythex
da75 :                       df_rt_eval_intbin
da75 :                       df_rt_eval_bytbin
da75 :                       df_rt_eval_chr
                             	; numeric constant
da75 : c8               [ 2] 	iny
da76 : b1c8             [ 5] 	lda (df_currlin),y
da78 : aa               [ 2] 	tax
da79 : c8               [ 2] 	iny
da7a : b1c8             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
da7c : 84ca             [ 3] 	sty df_exeoff
                             	; push number on to stack
da7e : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
da81 :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------------------- bank1.s -----------------------------------

da83 :                       df_rt_eval_strlit
da83 : 84ca             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
da85 : 98               [ 2] 	tya
                             	; set carry to add one extra
da86 : 38               [ 2] 	sec
da87 : 65c8             [ 3] 	adc df_currlin
da89 : aa               [ 2] 	tax
da8a : a5c9             [ 3] 	lda df_currlin+1
da8c : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
da8e : 2007f2           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
da91 : a4ca             [ 3] 	ldy df_exeoff
da93 :                       df_rt_eval_strlit_ch
da93 : b1c8             [ 5] 	lda (df_currlin),y
da95 : f003             [ 3] 	beq df_rt_eval_strlit_done
da97 : c8               [ 2] 	iny
da98 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
da9a :                       df_rt_eval_strlit_done	; Always relying on Y neve
da9a : 84ca             [ 3] 	sty df_exeoff
da9c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
da9d :                       df_rt_arry_parm
                             	; move past open bracket or comma
da9d : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
da9f : 2028d9           [ 6] 	jsr df_rt_getnval
daa2 : 8a               [ 2] 	txa
                             ;	clc
daa3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
daa4 :                       df_rt_arry_parm2
                             	; go get array parm 1
daa4 : 209dda           [ 6] 	jsr df_rt_arry_parm
daa7 : 48               [ 3] 	pha
daa8 : a200             [ 2] 	ldx #0
daaa : a4ca             [ 3] 	ldy df_exeoff
daac :                       df_rt_arry_parm2_term
daac : b1c8             [ 5] 	lda (df_currlin),y
daae : c95d             [ 2] 	cmp #']'
dab0 : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
dab2 : c92c             [ 2] 	cmp #','
dab4 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
dab6 : 84ca             [ 3] 	sty df_exeoff
dab8 : c8               [ 2] 	iny
dab9 : 4cacda           [ 3] 	jmp df_rt_arry_parm2_term
dabc :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
dabc : 209dda           [ 6] 	jsr df_rt_arry_parm
dabf : a8               [ 2] 	tay
dac0 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------------------- bank1.s -----------------------------------

dac1 : aa               [ 2] 	tax
                             ;	clc
dac2 : 60               [ 6] 	rts
dac3 :                       df_rt_arry_parm2_skiparry2
dac3 : a000             [ 2] 	ldy #0
dac5 : 68               [ 4] 	pla
dac6 : aa               [ 2] 	tax
                             ;	clc
dac7 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
dac8 :                       df_rt_eval_var
                             	; save carry bit
dac8 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
dac9 : b00e             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
dacb : c8               [ 2] 	iny
                             	; get var vvt address
dacc : b1c8             [ 5] 	lda (df_currlin),y
dace : 85e3             [ 3] 	sta df_tmpptra
dad0 : c8               [ 2] 	iny
dad1 : 84ca             [ 3] 	sty df_exeoff
dad3 : b1c8             [ 5] 	lda (df_currlin),y
dad5 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
dad7 : b2e3             [ 5] 	lda (df_tmpptra)
dad9 :                       df_rt_eval_lvskip
dad9 : 48               [ 3] 	pha
                             	; Test A for array or string
dada : 2984             [ 2] 	and #DFVVT_PTR|DFVVT_STR
                             	; simple variable
dadc : f00e             [ 3] 	beq df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
dade : c4c1             [ 3] 	cpy df_nxtstidx
dae0 : f027             [ 4] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
dae2 : c8               [ 2] 	iny
dae3 : b1c8             [ 5] 	lda (df_currlin),y
dae5 : 88               [ 2] 	dey
dae6 : c95b             [ 2] 	cmp #'['
dae8 : d01f             [ 4] 	bne df_rt_eval_var_simple
                             	; go do array handling
daea : f02d             [ 4] 	beq df_rt_eval_var_do_arry
daec :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
daec : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
daed : 28               [ 4] 	plp
daee : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
daf0 : a001             [ 2] 	ldy #DFVVT_LO
daf2 : b1e3             [ 5] 	lda (df_tmpptra),y
daf4 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------------------- bank1.s -----------------------------------

daf5 : a002             [ 2] 	ldy #DFVVT_HI
daf7 : b1e3             [ 5] 	lda (df_tmpptra),y
                             
daf9 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
dafc :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
dafc : 18               [ 2] 	clc
dafd : a901             [ 2] 	lda #DFVVT_LO
daff : 65e3             [ 3] 	adc df_tmpptra
db01 : aa               [ 2] 	tax
db02 : a5e4             [ 3] 	lda df_tmpptra+1
db04 : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
db06 : 4c0bf2           [ 3] 	jmp df_ost_pushPtr
                             
                             	; Simple push of pointer, needs to be valid
db09 :                       df_rt_eval_var_simple
                             	; clean up stack
db09 : 68               [ 4] 	pla
db0a : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
db0b : a001             [ 2] 	ldy #DFVVT_LO
db0d : b1e3             [ 5] 	lda (df_tmpptra),y
db0f : aa               [ 2] 	tax
db10 : a002             [ 2] 	ldy #DFVVT_HI
db12 : b1e3             [ 5] 	lda (df_tmpptra),y
db14 : f078             [ 3] 	beq df_rt_not_dimed
db16 : 4c0bf2           [ 3] 	jmp df_ost_pushPtr
                             
db19 :                       df_rt_eval_var_do_arry
                             	; move past var index
db19 : e6ca             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
db1b : a200             [ 2] 	ldx #0
db1d : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
db1f : a5e4             [ 3] 	lda df_tmpptra+1
db21 : 48               [ 3] 	pha
db22 : a5e3             [ 3] 	lda df_tmpptra
db24 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
db25 : 20a4da           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
db28 : 68               [ 4] 	pla
db29 : 85e3             [ 3] 	sta df_tmpptra
db2b : 68               [ 4] 	pla
db2c : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
db2e : 86e5             [ 3] 	stx df_tmpptrb
db30 : 84e6             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
db32 : c000             [ 2] 	cpy #0
db34 : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
db36 : a004             [ 2] 	ldy #DFVVT_DIM2
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------------------- bank1.s -----------------------------------

db38 : b1e3             [ 5] 	lda (df_tmpptra),y
db3a : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
db3c : a6e5             [ 3] 	ldx df_tmpptrb
db3e : a4e6             [ 3] 	ldy df_tmpptrb+1
db40 : 86e6             [ 3] 	stx df_tmpptrb+1
db42 : 84e5             [ 3] 	sty df_tmpptrb
                             
db44 :                       df_rt_eval_var_dim2adj
db44 : a6e5             [ 3] 	ldx df_tmpptrb
db46 : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
db48 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
db4a : c8               [ 2] 	iny
db4b :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
db4b : e000             [ 2] 	cpx #0
db4d : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
db4f : e8               [ 2] 	inx
db50 :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
db50 : ca               [ 2] 	dex
db51 : a900             [ 2] 	lda #0
db53 : 8586             [ 3] 	sta num_a+1
db55 : 88               [ 2] 	dey
                             	; (y-1)
db56 : 8485             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
db58 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
db5a : a003             [ 2] 	ldy #DFVVT_DIM1
db5c : a900             [ 2] 	lda #0
db5e : 858a             [ 3] 	sta num_b+1
db60 : b1e3             [ 5] 	lda (df_tmpptra),y
db62 : 8589             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
db64 : 2015cc           [ 6] 	jsr int_fast_mult
db67 :                       df_rt_eval_var_nomult
                             	; move x to a
db67 : 8a               [ 2] 	txa
                             	; add x to num_a
db68 : 18               [ 2] 	clc
db69 : 6585             [ 3] 	adc num_a
db6b : 8585             [ 3] 	sta num_a
                             	_bcc 2
                             
db6f : e686             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
db71 : a6e5             [ 3] 	ldx df_tmpptrb
db73 : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
db75 : 68               [ 4] 	pla
db76 : 48               [ 3] 	pha
db77 : 2901             [ 2] 	and #DFVVT_INT
db79 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
db7b : 0685             [ 5] 	asl num_a
db7d : 2686             [ 5] 	rol num_a+1
db7f :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------------------- bank1.s -----------------------------------

db7f : 18               [ 2] 	clc
db80 : a001             [ 2] 	ldy #DFVVT_LO
db82 : b1e3             [ 5] 	lda (df_tmpptra),y
db84 : 6585             [ 3] 	adc num_a
db86 : 8585             [ 3] 	sta num_a
db88 : a002             [ 2] 	ldy #DFVVT_HI
db8a : b1e3             [ 5] 	lda (df_tmpptra),y
db8c : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
db8e :                       df_rt_not_dimed
                             	SWBRK DFERR_DIM
                             
db90 :                       df_rt_array_exists
db90 : 6586             [ 3] 	adc num_a+1
db92 : 8586             [ 3] 	sta num_a+1
                             	; get the type
db94 : 68               [ 4] 	pla
                             	; if not int or byte then push string
db95 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
db97 : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
db99 : 28               [ 4] 	plp
db9a : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
db9c : 2901             [ 2] 	and #DFVVT_INT
db9e : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
dba0 : a000             [ 2] 	ldy #0
dba2 : b185             [ 5] 	lda (num_a),y
dba4 : aa               [ 2] 	tax
dba5 : c8               [ 2] 	iny
dba6 : b185             [ 5] 	lda (num_a),y
dba8 : 4c12f2           [ 3] 	jmp df_ost_pushInt
dbab :                       df_rt_eval_byt
dbab : a000             [ 2] 	ldy #0
dbad : b185             [ 5] 	lda (num_a),y
dbaf : aa               [ 2] 	tax
dbb0 : 98               [ 2] 	tya			; Make A=0
dbb1 : 4c12f2           [ 3] 	jmp df_ost_pushInt
dbb4 :                       df_rt_eval_var_str
dbb4 : 28               [ 4] 	plp
dbb5 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
dbb5 : a685             [ 3] 	ldx num_a
dbb7 : a586             [ 3] 	lda num_a+1
dbb9 : 4c0bf2           [ 3] 	jmp df_ost_pushPtr
                             
dbbc :                       df_rt_eval_proc
dbbc : a5b9             [ 3] 	lda df_parmtop				; Save current position of par
dbbe : 48               [ 3] 	pha
dbbf : 207cf0           [ 6] 	jsr df_rt_proc				; Go and call the user functio
dbc2 : 68               [ 4] 	pla							; Get back the original parameter stac
dbc3 : c5b9             [ 3] 	cmp df_parmtop				; if it is the same, then no r
dbc5 : f002             [ 3] 	beq df_rt_eval_proc_err
dbc7 : 18               [ 2] 	clc
dbc8 : 60               [ 6] 	rts
dbc9 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------------------- bank1.s -----------------------------------

                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
dbcb :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
dbcb : 2032f2           [ 6] 	jsr df_ost_popInt
dbce : 86e5             [ 3] 	stx df_tmpptrb
dbd0 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
dbd2 : 2032f2           [ 6] 	jsr df_ost_popInt
dbd5 : 86e3             [ 3] 	stx df_tmpptra
dbd7 : 85e4             [ 3] 	sta df_tmpptra+1
dbd9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
dbda :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
dbda : 202af2           [ 6] 	jsr df_ost_popStr
dbdd : 86e5             [ 3] 	stx df_tmpptrb
dbdf : 85e6             [ 3] 	sta df_tmpptrb+1
                             
dbe1 : 202af2           [ 6] 	jsr df_ost_popStr
dbe4 : 86e3             [ 3] 	stx df_tmpptra
dbe6 : 85e4             [ 3] 	sta df_tmpptra+1
dbe8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
dbe9 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
dbe9 : 202ed9           [ 6] 	jsr df_rt_neval
                             	; jump over comma
dbec : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dbee : 202ed9           [ 6] 	jsr df_rt_neval
                             	
dbf1 : 4ccbdb           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
dbf4 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
dbf4 : 202ed9           [ 6] 	jsr df_rt_neval
dbf7 : e6ca             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------------------- bank1.s -----------------------------------

                             	; evaluate the 2nd parm
dbf9 : 202ed9           [ 6] 	jsr df_rt_neval
dbfc : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dbfe : 202ed9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
dc01 :                       df_rt_parm_pop3
dc01 : 2032f2           [ 6] 	jsr df_ost_popInt
dc04 : 86e7             [ 3] 	stx df_tmpptrc
dc06 : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
dc08 : 4ccbdb           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
dc0b :                       df_rt_parm_4ints
                             	; evaluate 1st parm
dc0b : 202ed9           [ 6] 	jsr df_rt_neval
dc0e : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc10 : 202ed9           [ 6] 	jsr df_rt_neval
dc13 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc15 : 202ed9           [ 6] 	jsr df_rt_neval
dc18 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dc1a : 202ed9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
dc1d :                       df_rt_parm_pop4
dc1d : 2032f2           [ 6] 	jsr df_ost_popInt
dc20 : 86e9             [ 3] 	stx df_tmpptrd
dc22 : 85ea             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
dc24 : 4c01dc           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------------------- bank1.s -----------------------------------

                             ; common code for 5 ints runtime parsing
                             ;****************************************
dc27 :                       df_rt_parm_5ints
                             	; evaluate 1st parm
dc27 : 202ed9           [ 6] 	jsr df_rt_neval
dc2a : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc2c : 202ed9           [ 6] 	jsr df_rt_neval
dc2f : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc31 : 202ed9           [ 6] 	jsr df_rt_neval
dc34 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dc36 : 202ed9           [ 6] 	jsr df_rt_neval
dc39 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
dc3b : 202ed9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
dc3e : 2032f2           [ 6] 	jsr df_ost_popInt
dc41 : 86eb             [ 3] 	stx df_tmpptre
dc43 : 85ec             [ 3] 	sta df_tmpptre+1
                             
                             	; pop 4,3,2,1 parms
dc45 : 4c1ddc           [ 3] 	jmp df_rt_parm_pop4
                             
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
dc48 :                       df_rt_init_stat_ptr
                             	; save current line
dc48 : 86c8             [ 3] 	stx df_currlin
dc4a : 85c9             [ 3] 	sta df_currlin+1
dc4c : 84ca             [ 3] 	sty df_exeoff
dc4e : 84c2             [ 3] 	sty df_curstidx
dc50 : b1c8             [ 5] 	lda (df_currlin),y
dc52 : 85c1             [ 3] 	sta df_nxtstidx
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dc54 : b2c8             [ 5] 	lda (df_currlin)
dc56 : 85c0             [ 3] 	sta df_eolidx
dc58 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
dc59 :                       df_rt_exec_stat
dc59 : a6c8             [ 3] 	ldx df_currlin
dc5b : a5c9             [ 3] 	lda df_currlin+1
dc5d : a4ca             [ 3] 	ldy df_exeoff
dc5f :                       df_rt_exec_init_ptr
dc5f : 2048dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
                             ;	lda #0
                             ;	sta df_nextlin+1
dc62 : 64cc             [ 3] 	stz df_nextlin+1
                             
                             	; find first token in statement
dc64 :                       df_rt_exec_find_tok
dc64 : c8               [ 2] 	iny
dc65 : b1c8             [ 5] 	lda (df_currlin),y
dc67 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
dc69 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
dc69 : c8               [ 2] 	iny
dc6a : 84ca             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
dc6c : 20bfdc           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
dc6f : a59e             [ 3] 	lda df_checkmsk
dc71 : 300e             [ 3] 	bmi df_rt_exec_no_key
dc73 : c69d             [ 5] 	dec df_checkkey
dc75 : d00a             [ 3] 	bne df_rt_exec_no_key
dc77 : a59e             [ 3] 	lda df_checkmsk
dc79 : 859d             [ 3] 	sta df_checkkey
dc7b : 18               [ 2] 	clc
dc7c : 20bdc5           [ 6] 	jsr io_get_ch
dc7f : 9027             [ 3] 	bcc df_rt_exec_check_key
dc81 :                       df_rt_exec_no_key
                             	; check if normal flow of control
dc81 : a5cc             [ 3] 	lda df_nextlin+1
dc83 : d031             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
dc85 : a4c1             [ 3] 	ldy df_nxtstidx
dc87 : c4c0             [ 3] 	cpy df_eolidx
dc89 : 84ca             [ 3] 	sty df_exeoff
dc8b : d0cc             [ 3] 	bne df_rt_exec_stat
                             	
                             
                             	; reached end of line, move to next
dc8d : 18               [ 2] 	clc
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dc8e : b2c8             [ 5] 	lda (df_currlin)
dc90 : 65c8             [ 3] 	adc df_currlin
dc92 : 85c8             [ 3] 	sta df_currlin
                             	_bcc 2
                             
dc96 : e6c9             [ 5] 	inc df_currlin+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------------------- bank1.s -----------------------------------

                             	; start from first statement in new line
dc98 : a003             [ 2] 	ldy #3
dc9a : 84ca             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
                             ;	lda (df_currlin,x)
dc9c : b2c8             [ 5] 	lda (df_currlin)
dc9e : 85c0             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
dca0 : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
dca2 : a5a0             [ 3] 	lda df_immed
dca4 : f00e             [ 3] 	beq df_rt_unexpected_end
dca6 :                       df_rt_exec_end
dca6 : 18               [ 2] 	clc
dca7 : 60               [ 6] 	rts
dca8 :                       df_rt_exec_check_key
dca8 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
dcaa : f006             [ 3] 	beq df_rt_exec_ctrl_z
dcac : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
dcae : d0d1             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
dcb0 :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
dcb2 :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
dcb4 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
dcb6 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
dcb6 : a6cb             [ 3] 	ldx df_nextlin
dcb8 : a5cc             [ 3] 	lda df_nextlin+1
dcba : a4c1             [ 3] 	ldy df_nxtstidx
dcbc : 4c5fdc           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
dcbf :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
dcbf : 0a               [ 2] 	asl a
dcc0 : aa               [ 2] 	tax
dcc1 : 7c9cdd           [ 6] 	jmp (df_rt_tokenjmp,x)
                             ;	lda df_rt_tokenjmp,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_tokenjmp+1,x
                             ;	sta df_tmpptra+1
                             ;	; execution code finishes with rts
                             ;	jmp (df_tmpptra)
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------------------- bank1.s -----------------------------------

                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
dcc4 :                       df_rt_nextstat
                             	; save pointer
dcc4 : 86d2             [ 3] 	stx df_lineptr
dcc6 : 85d3             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dcc8 : b2d2             [ 5] 	lda (df_lineptr)
dcca : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
dccc : b1d2             [ 5] 	lda (df_lineptr),y
                             ;	cmp (df_lineptr,x)
dcce : d2d2             [ 5] 	cmp (df_lineptr)
dcd0 : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
dcd2 : a8               [ 2] 	tay
                             	; X = line low
dcd3 : a6d2             [ 3] 	ldx df_lineptr
                             	; A = line high
dcd5 : a5d3             [ 3] 	lda df_lineptr+1
dcd7 : 18               [ 2] 	clc
dcd8 : 60               [ 6] 	rts
dcd9 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
dcd9 : 18               [ 2] 	clc
dcda : 65d2             [ 3] 	adc df_lineptr
dcdc : 85d2             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
dce0 : e6d3             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
                             ;	lda (df_lineptr,x)
dce2 : b2d2             [ 5] 	lda (df_lineptr)
dce4 : f008             [ 3] 	beq df_rt_nextstat_err
dce6 : a6d2             [ 3] 	ldx df_lineptr
dce8 : a5d3             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
dcea : a003             [ 2] 	ldy #3
dcec : 18               [ 2] 	clc
dced : 60               [ 6] 	rts
dcee :                       df_rt_nextstat_err
dcee : a000             [ 2] 	ldy #0
dcf0 : 38               [ 2] 	sec
dcf1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
dcf2 :                       df_rt_push_stat
dcf2 : a5c2             [ 3] 	lda df_curstidx
dcf4 : 20d4f1           [ 6] 	jsr df_rst_pushByte
dcf7 : a5c9             [ 3] 	lda df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------------------- bank1.s -----------------------------------

dcf9 : a6c8             [ 3] 	ldx df_currlin
dcfb : 4cecf1           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
dcfe :                       df_rt_pop_stat
dcfe : 20faf1           [ 6] 	jsr df_rst_popWord
dd01 : 86cb             [ 3] 	stx	df_nextlin
dd03 : 85cc             [ 3] 	sta df_nextlin+1
dd05 : 20ddf1           [ 6] 	jsr df_rst_popByte
dd08 : a8               [ 2] 	tay
dd09 : a6cb             [ 3] 	ldx df_nextlin
dd0b : a5cc             [ 3] 	lda df_nextlin+1
dd0d : 20c4dc           [ 6] 	jsr df_rt_nextstat
dd10 : 86cb             [ 3] 	stx df_nextlin
dd12 : 85cc             [ 3] 	sta df_nextlin+1
dd14 : 84c1             [ 3] 	sty df_nxtstidx
                             ;	clc
dd16 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
dd17 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
dd1f : a003             [ 2] 	ldy #3
dd21 : 84d4             [ 3] 	sty df_lineidx
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dd23 : b2d2             [ 5] 	lda (df_lineptr)
dd25 : f034             [ 3] 	beq df_rt_findproc_err
dd27 :                       df_rt_findproc_cmd
dd27 : c8               [ 2] 	iny
dd28 : b1d2             [ 5] 	lda (df_lineptr),y
dd2a : 10fb             [ 3] 	bpl df_rt_findproc_cmd
dd2c : c986             [ 2] 	cmp #DFRT_DEF
dd2e : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
dd30 : c8               [ 2] 	iny
                             	; skip proc escape token
dd31 : c8               [ 2] 	iny
                             	; now check the proc address against procptr
dd32 : b1d2             [ 5] 	lda (df_lineptr),y
dd34 : c5d0             [ 3] 	cmp df_procptr
dd36 : d00f             [ 3] 	bne df_rt_findproc_nextstat
dd38 : c8               [ 2] 	iny
dd39 : b1d2             [ 5] 	lda (df_lineptr),y
dd3b : c5d1             [ 3] 	cmp df_procptr+1
dd3d : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
dd3f : a6d2             [ 3] 	ldx df_lineptr
dd41 : a5d3             [ 3] 	lda df_lineptr+1
dd43 : a4d4             [ 3] 	ldy df_lineidx
dd45 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------------------- bank1.s -----------------------------------

dd46 : 60               [ 6] 	rts
dd47 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
dd47 : a6d2             [ 3] 	ldx df_lineptr
dd49 : a5d3             [ 3] 	lda df_lineptr+1
dd4b : a4d4             [ 3] 	ldy df_lineidx
dd4d : 20c4dc           [ 6] 	jsr df_rt_nextstat
dd50 : b009             [ 3] 	bcs df_rt_findproc_err
dd52 : 86d2             [ 3] 	stx df_lineptr
dd54 : 85d3             [ 3] 	sta df_lineptr+1
dd56 : 84d4             [ 3] 	sty df_lineidx
dd58 : 4c27dd           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
dd5b :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
dd5d :                       df_rt_findescval
dd5d : a4ca             [ 3] 	ldy df_exeoff
dd5f : 88               [ 2] 	dey
dd60 :                       df_rt_findescval_loop
dd60 : c8               [ 2] 	iny
dd61 : b1c8             [ 5] 	lda (df_currlin),y
dd63 : c920             [ 2] 	cmp #DFTK_ESCVAL
dd65 : b0f9             [ 3] 	bcs df_rt_findescval_loop
dd67 : 84ca             [ 3] 	sty df_exeoff
dd69 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
dd6a :                       df_rt_skip_ws
dd6a : a4ca             [ 3] 	ldy df_exeoff
dd6c : 88               [ 2] 	dey
dd6d :                       df_rt_skip_ws_loop
dd6d : c8               [ 2] 	iny
dd6e : b1c8             [ 5] 	lda (df_currlin),y
dd70 : c920             [ 2] 	cmp #' '
dd72 : f0f9             [ 3] 	beq df_rt_skip_ws_loop
dd74 : 84ca             [ 3] 	sty df_exeoff
dd76 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
dd77 :                       df_rt_getlvar
dd77 : 205ddd           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
dd7a : c8               [ 2] 	iny
                             
                             	; get variable address
dd7b : b1c8             [ 5] 	lda (df_currlin),y
dd7d : 85e3             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------------------- bank1.s -----------------------------------

dd7f : c8               [ 2] 	iny
dd80 : b1c8             [ 5] 	lda (df_currlin),y
dd82 : 85e4             [ 3] 	sta df_tmpptra+1
                             
dd84 : 84ca             [ 3] 	sty df_exeoff
                             	; get the type
dd86 : a000             [ 2] 	ldy #0
dd88 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
dd8a : 38               [ 2] 	sec
dd8b : a4ca             [ 3] 	ldy df_exeoff
dd8d : 20c8da           [ 6] 	jsr df_rt_eval_var
dd90 : 4c2ef2           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
dd93 :                       df_rt_pop_stat_go
dd93 : 20fedc           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
dd96 : 68               [ 4] 	pla
dd97 : a8               [ 2] 	tay
dd98 : 84b8             [ 3] 	sty df_rtstop
dd9a : 18               [ 2] 	clc
dd9b : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dd9c :                       df_rt_tokenjmp
dd9c : 16e6                  	dw	df_rt_assign
dd9e : 7cf0                  	dw	df_rt_proc
dda0 : 1ce6                  	dw	df_rt_comment
dda2 : cae5                  	dw	df_rt_println
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------------------- bank1.s -----------------------------------

dda4 : 8fe5                  	dw	df_rt_printat
dda6 : 99e5                  	dw	df_rt_print
dda8 : 1cf1                  	dw	df_rt_def			; 0x86
ddaa : 96f1                  	dw	df_rt_enddef		; 0x87
ddac : 93f1                  	dw	df_rt_return		; 0x88
ddae : 39f0                  	dw	df_rt_abort			; 0x89
ddb0 : 70e3                  	dw	df_rt_local
ddb2 : 9ce3                  	dw	df_rt_dim
ddb4 : 45e2                  	dw	df_rt_repeat		; 0x8c
ddb6 : 4de2                  	dw	df_rt_until
ddb8 : b0e1                  	dw	df_rt_for			; 0x8e
ddba : eae1                  	dw	df_rt_next			; 0x8f
ddbc : 92e0                  	dw	df_rt_while			; 0x90
ddbe : f7e0                  	dw	df_rt_wend			; 0x81
ddc0 : 71e1                  	dw	df_rt_if			; 0x92
ddc2 : 5fe1                  	dw	df_rt_else			; 0x93
ddc4 : 5ae1                  	dw	df_rt_endif			; 0x94
ddc6 : 5fe1                  	dw	df_rt_elseif		; 0x95
ddc8 : 1ce6                  	dw	df_rt_data			; 0x96
ddca : 3bf5                  	dw	df_rt_asm_assemble	; 0x97
ddcc : 1de6                  	dw	df_rt_run
ddce : 12e7                  	dw	df_rt_list
ddd0 : 3be3                  	dw	df_rt_input
ddd2 : a6e4                  	dw	df_rt_mode
ddd4 : 2ae4                  	dw	df_rt_plot
ddd6 : 93e4                  	dw	df_rt_cursor
ddd8 : 20e4                  	dw	df_rt_cls
ddda : 76e9                  	dw	df_rt_vpoke
dddc : 8de9                  	dw	df_rt_setvdp
ddde : 97e9                  	dw	df_rt_colour
dde0 : e6e9                  	dw	df_rt_spritepat
dde2 : 14ea                  	dw	df_rt_spritepos
dde4 : 52ea                  	dw	df_rt_spritecol
dde6 : 57ea                  	dw	df_rt_spritenme
dde8 : bde9                  	dw	df_rt_sprite
ddea : 6ee9                  	dw	df_rt_poke
ddec : 60e9                  	dw	df_rt_doke
ddee : 85ea                  	dw	df_rt_sound
ddf0 : 99ea                  	dw	df_rt_music
ddf2 : b7ea                  	dw	df_rt_play
ddf4 : 90eb                  	dw	df_rt_save
ddf6 : abeb                  	dw	df_rt_load
ddf8 : b2ec                  	dw	df_rt_dir
ddfa : 32ed                  	dw	df_rt_dirl
ddfc : fdeb                  	dw	df_rt_del
ddfe : 23e3                  	dw	df_rt_read
de00 : 8fe0                  	dw	df_rt_new
de02 : 2ee6                  	dw	df_rt_renum
de04 : 76e5                  	dw	df_rt_wait
de06 : 68ed                  	dw	df_rt_reset
de08 : a6e4                  	dw	df_rt_hires
de0a : c7e4                  	dw	df_rt_point
de0c : efe4                  	dw	df_rt_line
de0e : d1e4                  	dw	df_rt_hplot
de10 : ade4                  	dw	df_rt_pixmode
de12 : b3e4                  	dw	df_rt_pixmask
de14 : b9e4                  	dw	df_rt_pixcol
de16 : 05e5                  	dw	df_rt_box
de18 : dde4                  	dw	df_rt_circle
de1a : 1be5                  	dw	df_rt_shape
de1c : 45ec                  	dw	df_rt_vload
de1e : 16ec                  	dw	df_rt_bload
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------------------- bank1.s -----------------------------------

de20 : e8ea                  	dw	df_rt_bsave
de22 : 99e4                  	dw	df_rt_himem
de24 : 8be0                  	dw	df_rt_monitor
de26 : 04ec                  	dw	df_rt_chdir
de28 : 0dec                  	dw	df_rt_mkdir
de2a : 80ed                  	dw	df_rt_datetime
de2c : 82e9                  	dw	df_rt_nvpoke
de2e : 38ec                  	dw	df_rt_font
de30 : 61f0                  	dw	df_rt_device
de32 : 56f0                  	dw	df_rt_fclose
de34 : 99e3                  	dw	df_rt_redim
de36 : bfe4                  	dw  df_rt_put
                             
de38 : f8ed                  	dw	df_rt_vpeek
de3a : dfed                  	dw	df_rt_peek
de3c : dced                  	dw	df_rt_deek
de3e : 35ee                  	dw	df_rt_stick
de40 : a5ee                  	dw	df_rt_key
de42 : 69ef                  	dw	df_rt_chr
de44 : bcef                  	dw	df_rt_left
de46 : cdef                  	dw	df_rt_right
de48 : e8ef                  	dw	df_rt_mid
de4a : 06f0                  	dw	df_rt_len
de4c : 59ee                  	dw	df_rt_mem
de4e : b8ee                  	dw	df_rt_scrn
de50 : 10ee                  	dw	df_rt_rnd
de52 : d4ee                  	dw	df_rt_elapsed
de54 : f2ee                  	dw	df_rt_call
de56 : 7def                  	dw	df_rt_hex
de58 : aeef                  	dw	df_rt_dec
de5a : 12f0                  	dw	df_rt_asc
de5c : 23f0                  	dw	df_rt_val
de5e : c8ee                  	dw	df_rt_pixel
de60 : 04ef                  	dw	df_rt_sgn
de62 : 21ef                  	dw	df_rt_addr
de64 : 04ee                  	dw	df_rt_nvpeek
de66 : 3bf0                  	dw	df_rt_fcreate
de68 : 4ef0                  	dw	df_rt_fopen
de6a : a5ee                  	dw  df_rt_get
                             	
de6c : dfde                  	dw	df_rt_mult
de6e : 00df                  	dw	df_rt_div
de70 : 21df                  	dw	df_rt_mod
de72 : 42df                  	dw	df_rt_asl
de74 : 55df                  	dw	df_rt_lsr
de76 : b9de                  	dw	df_rt_add
de78 : ccde                  	dw	df_rt_sub
                             	
de7a : 68df                  	dw	df_rt_and
de7c : 77df                  	dw	df_rt_or
de7e : 86df                  	dw	df_rt_eor
de80 : 25e0                  	dw	df_rt_comlte
de82 : 30e0                  	dw	df_rt_comgte
de84 : 3be0                  	dw	df_rt_comne
de86 : 04e0                  	dw	df_rt_comlt
de88 : 0fe0                  	dw	df_rt_comgt
de8a : 1ae0                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------------------- bank1.s -----------------------------------

de8c :                       df_rt_escjmp
de8c : e6e7                  	dw df_rt_lst_chr
de8e : e5e7                  	dw df_rt_lst_reserved
de90 : e5e7                  	dw df_rt_lst_reserved
de92 : e5e7                  	dw df_rt_lst_reserved
de94 : e5e7                  	dw df_rt_lst_reserved	
de96 : e5e7                  	dw df_rt_lst_reserved	; no such thing as bytdec
de98 : 03e8                  	dw df_rt_lst_bythex
de9a : 28e8                  	dw df_rt_lst_bytbin
de9c : e5e7                  	dw df_rt_lst_reserved	
de9e : 4ce8                  	dw df_rt_lst_intdec
dea0 : 16e8                  	dw df_rt_lst_inthex
dea2 : 30e8                  	dw df_rt_lst_intbin
dea4 : e5e7                  	dw df_rt_lst_reserved
dea6 : e5e7                  	dw df_rt_lst_reserved
dea8 : e5e7                  	dw df_rt_lst_reserved
deaa : e5e7                  	dw df_rt_lst_reserved	
deac : a9e8                  	dw df_rt_lst_strlit
deae : 57e8                  	dw df_rt_lst_var
deb0 : 57e8                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
deb2 :                       mod_sz_rtsubs_s
                             
                             	include "dflat\numop.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------------------- bank1.s -----------------------------------

                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
deb2 :                       df_rt_putintres
deb2 : a6e3             [ 3] 	ldx df_tmpptra
deb4 : a5e4             [ 3] 	lda df_tmpptra+1
deb6 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
deb9 :                       df_rt_add
deb9 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
dec9 : 4cb2de           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
decc :                       df_rt_sub
decc : 20cbdb           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
dedc : 4cb2de           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
dedf :                       df_rt_mult
dedf : 20cbdb           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
def2 : 203ccc           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
defd : 4cb2de           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
df00 :                       df_rt_div
df00 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
df13 : 2065cc           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
df1e : 4cb2de           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
df21 :                       df_rt_mod
df21 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
df34 : 2065cc           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
df3f : 4cb2de           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
df42 :                       df_rt_asl
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------------------- bank1.s -----------------------------------

df42 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
df45 : a6e5             [ 3] 	ldx df_tmpptrb
df47 : e8               [ 2] 	inx
df48 :                       df_rt_aslbit
df48 : ca               [ 2] 	dex
df49 : f007             [ 3] 	beq df_rt_asldone
df4b : 06e3             [ 5] 	asl df_tmpptra
df4d : 26e4             [ 5] 	rol df_tmpptra+1
df4f : 4c48df           [ 3] 	jmp df_rt_aslbit
df52 :                       df_rt_asldone
df52 : 4cb2de           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
df55 :                       df_rt_lsr
df55 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
df58 : a6e5             [ 3] 	ldx df_tmpptrb
df5a : e8               [ 2] 	inx
df5b :                       df_rt_lsrbit
df5b : ca               [ 2] 	dex
df5c : f007             [ 3] 	beq df_rt_lsrdone
df5e : 46e4             [ 5] 	lsr df_tmpptra+1
df60 : 66e3             [ 5] 	ror df_tmpptra
df62 : 4c5bdf           [ 3] 	jmp df_rt_lsrbit
df65 :                       df_rt_lsrdone
df65 : 4cb2de           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
df68 :                       df_rt_and
df68 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
df6b : a5e3             [ 3] 	lda df_tmpptra
df6d : 25e5             [ 3] 	and df_tmpptrb
df6f : aa               [ 2] 	tax
df70 : a5e4             [ 3] 	lda df_tmpptra+1
df72 : 25e6             [ 3] 	and df_tmpptrb+1
df74 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
df77 :                       df_rt_or
df77 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
df7a : a5e3             [ 3] 	lda df_tmpptra
df7c : 05e5             [ 3] 	ora df_tmpptrb
df7e : aa               [ 2] 	tax
df7f : a5e4             [ 3] 	lda df_tmpptra+1
df81 : 05e6             [ 3] 	ora df_tmpptrb+1
df83 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
df86 :                       df_rt_eor
df86 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
df89 : a5e3             [ 3] 	lda df_tmpptra
df8b : 45e5             [ 3] 	eor df_tmpptrb
df8d : aa               [ 2] 	tax
df8e : a5e4             [ 3] 	lda df_tmpptra+1
df90 : 45e6             [ 3] 	eor df_tmpptrb+1
df92 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
df95 :                       df_rt_aequb
df95 : a5e3             [ 3] 	lda df_tmpptra
df97 : c5e5             [ 3] 	cmp df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------------------- bank1.s -----------------------------------

df99 : d004             [ 3] 	bne df_rt_aequbFin
df9b : a5e4             [ 3] 	lda df_tmpptra+1
df9d : c5e6             [ 3] 	cmp df_tmpptrb+1
df9f :                       df_rt_aequbFin
df9f : 60               [ 6] 	rts
                             
                             ; a-b common function
dfa0 :                       df_rt_asubb
dfa0 : 38               [ 2] 	sec
dfa1 : a5e3             [ 3] 	lda df_tmpptra
dfa3 : e5e5             [ 3] 	sbc df_tmpptrb
dfa5 : a5e4             [ 3] 	lda df_tmpptra+1
dfa7 : e5e6             [ 3] 	sbc df_tmpptrb+1
dfa9 : 5002             [ 3] 	bvc df_rt_asubbFin
dfab : 4980             [ 2] 	eor #0x80
dfad :                       df_rt_asubbFin
dfad : 60               [ 6] 	rts
                             
                             ; b-a common function
dfae :                       df_rt_bsuba
dfae : 38               [ 2] 	sec
dfaf : a5e5             [ 3] 	lda df_tmpptrb
dfb1 : e5e3             [ 3] 	sbc df_tmpptra
dfb3 : a5e6             [ 3] 	lda df_tmpptrb+1
dfb5 : e5e4             [ 3] 	sbc df_tmpptra+1
dfb7 : 5002             [ 3] 	bvc df_rt_bsubaFin
dfb9 : 4980             [ 2] 	eor #0x80
dfbb :                       df_rt_bsubaFin
dfbb : 60               [ 6] 	rts
                             
                             ; common routine push true
dfbc :                       df_rt_true
dfbc : a2ff             [ 2] 	ldx #0xff
dfbe : 8a               [ 2] 	txa
dfbf : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
dfc2 :                       df_rt_false
dfc2 : a200             [ 2] 	ldx #0x00
dfc4 : 8a               [ 2] 	txa
dfc5 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
dfc8 :                       df_rt_lt
dfc8 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
dfcb : 20a0df           [ 6] 	jsr df_rt_asubb
dfce : 30ec             [ 3] 	bmi df_rt_true
dfd0 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
dfd2 :                       df_rt_lte
dfd2 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
dfd5 :                       df_rt_lte_calc
dfd5 : 20aedf           [ 6] 	jsr df_rt_bsuba
dfd8 : 30e8             [ 3] 	bmi df_rt_false
dfda : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
dfdc :                       df_rt_gt
dfdc : 20cbdb           [ 6] 	jsr df_rt_get2Ints
dfdf : 20aedf           [ 6] 	jsr df_rt_bsuba
dfe2 : 30d8             [ 3] 	bmi df_rt_true
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------------------- bank1.s -----------------------------------

dfe4 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
dfe6 :                       df_rt_gte
dfe6 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
dfe9 :                       df_rt_gte_calc
dfe9 : 20a0df           [ 6] 	jsr df_rt_asubb
dfec : 10ce             [ 3] 	bpl df_rt_true
dfee : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
dff0 :                       df_rt_eq
dff0 : 20cbdb           [ 6] 	jsr df_rt_get2Ints
dff3 : 2095df           [ 6] 	jsr df_rt_aequb
dff6 : d0ca             [ 3] 	bne df_rt_false
dff8 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
dffa :                       df_rt_ne
dffa : 20cbdb           [ 6] 	jsr df_rt_get2Ints
dffd : 2095df           [ 6] 	jsr df_rt_aequb
e000 : f0c0             [ 4] 	beq df_rt_false
e002 : d0b8             [ 4] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e004 :                       df_rt_comlt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e009 : 2904             [ 2] 	and #DFST_STR
e00b : d054             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e00d : f0b9             [ 4] 	beq df_rt_lt
                             
e00f :                       df_rt_comgt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e014 : 2904             [ 2] 	and #DFST_STR
e016 : d050             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e018 : f0c2             [ 4] 	beq df_rt_gt
                             
e01a :                       df_rt_comeq
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e01f : 2904             [ 2] 	and #DFST_STR
e021 : d04e             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
e023 : f0cb             [ 4] 	beq df_rt_eq
                             
e025 :                       df_rt_comlte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e02a : 2904             [ 2] 	and #DFST_STR
e02c : d018             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e02e : f0a2             [ 4] 	beq df_rt_lte
                             	
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------------------- bank1.s -----------------------------------

e030 :                       df_rt_comgte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e035 : 2904             [ 2] 	and #DFST_STR
e037 : d01a             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e039 : f0ab             [ 4] 	beq df_rt_gte
                             
e03b :                       df_rt_comne
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e040 : 2904             [ 2] 	and #DFST_STR
e042 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e044 : f0b4             [ 4] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e046 :                       df_rt_slte
e046 : 2078e0           [ 6] 	jsr df_rt_str_comp
e049 : 9005             [ 3] 	bcc df_rt_str_comp_true
e04b : f003             [ 3] 	beq df_rt_str_comp_true
e04d :                       df_rt_str_comp_false
e04d : 4cc2df           [ 3] 	jmp df_rt_false
e050 :                       df_rt_str_comp_true
e050 : 4cbcdf           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e053 :                       df_rt_sgte
e053 : 2078e0           [ 6] 	jsr df_rt_str_comp
e056 : b0f8             [ 3] 	bcs df_rt_str_comp_true
e058 : 90f3             [ 3] 	bcc df_rt_str_comp_false
                             
                             ; string not equal
e05a :                       df_rt_sne
e05a : 2078e0           [ 6] 	jsr df_rt_str_comp
e05d : d0f1             [ 3] 	bne df_rt_str_comp_true
e05f : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e061 :                       df_rt_slt
e061 : 2078e0           [ 6] 	jsr df_rt_str_comp
e064 : 90ea             [ 3] 	bcc df_rt_str_comp_true
e066 : b0e5             [ 3] 	bcs df_rt_str_comp_false
                             
                             ; string greater than
e068 :                       df_rt_sgt
e068 : 2078e0           [ 6] 	jsr df_rt_str_comp
e06b : f0e0             [ 3] 	beq df_rt_str_comp_false
e06d : 90de             [ 3] 	bcc df_rt_str_comp_false
e06f : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e071 :                       df_rt_seq
e071 : 2078e0           [ 6] 	jsr df_rt_str_comp
e074 : f0da             [ 3] 	beq df_rt_str_comp_true
e076 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------------------- bank1.s -----------------------------------

                             ; common string comparator
                             ; C=0 means <
                             ; C=1,Z=0 means >
                             ; C=1,Z=1 means ==
e078 :                       df_rt_str_comp
e078 : 20dadb           [ 6] 	jsr df_rt_get2Strs
e07b : a000             [ 2] 	ldy #0
e07d :                       df_rt_str_comp_byte
e07d : b1e3             [ 5] 	lda (df_tmpptra),y
e07f : d1e5             [ 5] 	cmp (df_tmpptrb),y
e081 : d007             [ 3] 	bne df_rt_str_comp_done
                             	; if here then both strings still the same
e083 : c900             [ 2] 	cmp #0				; What was op1 char
                             	; if char is zero then end
e085 : f003             [ 3] 	beq df_rt_str_comp_done
                             	; else do next char
e087 : c8               [ 2] 	iny
e088 : d0f3             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e08a :                       df_rt_str_comp_done
e08a : 60               [ 6] 	rts
                             
                             
                             
                             
e08b :                       df_rt_monitor
e08b : 20b6c2           [ 6] 	jsr _command_line
e08e : 60               [ 6] 	rts
                             	
e08f :                       df_rt_new
e08f : 4c74f2           [ 3] 	jmp df_clear
                             
                             ; df_rt_gotosub_common
                             ; 	; get line number in A,X and put in num_a
                             ; 	jsr df_rt_getnval
                             ; 	stx num_a
                             ; 	sta num_a+1
                             ; 	; For the moment start from the beginning
                             ; 	ldy df_prgstrt		; num_tmp contains starting po
                             ; 	sty num_tmp
                             ; 	ldy df_prgstrt+1
                             ; 	sty num_tmp+1
                             ; 	; if current line number > target then start f
                             ; 	; else start from this line number
                             ; 	; do a trial substract of current - target
                             ; 	sec
                             ; 	ldy #DFTK_LINNUM
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a
                             ; 	iny
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a+1
                             ; 	; if C=1 then current >= target so start from 
                             ; 	bcs df_rt_goto_find_line
                             ; 	; else use current line address
                             ; 	lda df_currlin
                             ; 	sta num_tmp
                             ; 	lda df_currlin+1
                             ; 	sta num_tmp+1
                             ; df_rt_goto_find_line
                             ; 	jsr df_pg_check_next_line	; Reuses the line fi
                             ; 	bcs df_rt_goto_not_found	; If no exact match t
                             ; 	rts							; X,A contains address of target lin
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------------------- bank1.s -----------------------------------

                             ; df_rt_goto_not_found
                             ; 	SWBRK DFERR_NOLINE
                             
                             ; df_rt_gosub
                             ; 	; push statement address for return
                             ; 	jsr df_rt_push_stat
                             ; 	; DFRT_WHILE token
                             ; 	lda #DFRT_GOSUB
                             ; 	jsr df_rst_pushByte
                             ; 	; *IMPORTANT* : falls through to the goto code
                             ; df_rt_goto
                             ; 	; Find the line number to goto
                             ; 	jsr df_rt_gotosub_common
                             ; 	; Save it in the next line property
                             ; 	stx df_nextlin
                             ; 	sta df_nextlin+1
                             ; 	; GOTO is from the beginning of a line only
                             ; 	ldy #3
                             ; 	sty df_nxtstidx
                             ; 	; Runtime will change flow to use next line pr
                             ; 	rts
                             
                             ; df_rt_retsub
                             ; 	; The top of stack needs to be a gosub return 
                             ; 	jsr df_rst_popByte
                             ; 	cmp #DFRT_GOSUB
                             ; 	bne df_rt_retsub_err
                             ; 	; pop the stat and continue
                             ; 	jmp df_rt_pop_stat
                             ; df_rt_retsub_err
                             ; 	SWBRK DFERR_RETURN
                             
                             
e092 :                       df_rt_while
                             	; push statement address
e092 : 20f2dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e095 : a990             [ 2] 	lda #DFRT_WHILE
e097 : 20d4f1           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e09a : 2028d9           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e09d : e000             [ 2] 	cpx #0
e09f : f001             [ 3] 	beq df_rt_while_done
e0a1 : 60               [ 6] 	rts
e0a2 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e0a2 : 20ddf1           [ 6] 	jsr df_rst_popByte
e0a5 : 20ddf1           [ 6] 	jsr df_rst_popByte
e0a8 : 20faf1           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e0ab : a5d5             [ 3] 	lda df_ifnest
e0ad : 48               [ 3] 	pha
e0ae : a901             [ 2] 	lda #1
e0b0 : 85d5             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------------------- bank1.s -----------------------------------

                             
e0ba :                       df_rt_findwend
e0ba : a6cb             [ 3] 	ldx df_nextlin
e0bc : a5cc             [ 3] 	lda df_nextlin+1
e0be : a4c2             [ 3] 	ldy df_curstidx
e0c0 : 20c4dc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e0c3 : b030             [ 3] 	bcs df_rt_wend_end
e0c5 : 86cb             [ 3] 	stx df_nextlin
e0c7 : 85cc             [ 3] 	sta df_nextlin+1
e0c9 : 84c2             [ 3] 	sty df_curstidx
                             	; find the command token
e0cb :                       df_rt_while_cmd
e0cb : c8               [ 2] 	iny
e0cc : b1cb             [ 5] 	lda (df_nextlin),y
e0ce : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e0d0 : c991             [ 2] 	cmp #DFRT_WEND
e0d2 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e0d4 : c6d5             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e0d6 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e0d8 : 68               [ 4] 	pla
e0d9 : 85d5             [ 3] 	sta df_ifnest
e0db : a6cb             [ 3] 	ldx df_nextlin
e0dd : a5cc             [ 3] 	lda df_nextlin+1
e0df : a4c2             [ 3] 	ldy df_curstidx
e0e1 : 20c4dc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e0e4 : b00f             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e0e6 : 86cb             [ 3] 	stx df_nextlin
e0e8 : 85cc             [ 3] 	sta df_nextlin+1
e0ea : 84c1             [ 3] 	sty df_nxtstidx	
e0ec : 60               [ 6] 	rts
e0ed :                       df_rt_check_while
                             	; check for while
e0ed : c990             [ 2] 	cmp #DFRT_WHILE
e0ef : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e0f1 : e6d5             [ 5] 	inc df_ifnest
e0f3 : 80c5             [ 3] 	bra df_rt_findwend
e0f5 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e0f7 :                       df_rt_wend
e0f7 : 20ddf1           [ 6] 	jsr df_rst_popByte
e0fa : c990             [ 2] 	cmp #DFRT_WHILE
e0fc : d00d             [ 4] 	bne df_rt_wend_err
                             	; pop the stat and continue
e0fe : 20faf1           [ 6] 	jsr df_rst_popWord
e101 : 86cb             [ 3] 	stx	df_nextlin
e103 : 85cc             [ 3] 	sta df_nextlin+1
e105 : 20ddf1           [ 6] 	jsr df_rst_popByte
e108 : 85c1             [ 3] 	sta df_nxtstidx
e10a : 60               [ 6] 	rts
e10b :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------------------- bank1.s -----------------------------------

                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e10d :                       df_rt_if_stat
e10d : a6cb             [ 3] 	ldx df_nextlin
e10f : a5cc             [ 3] 	lda df_nextlin+1
e111 : a4c2             [ 3] 	ldy df_curstidx
e113 : 20c4dc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e116 : b009             [ 3] 	bcs df_rt_if_stat_err
e118 : 86cb             [ 3] 	stx df_nextlin
e11a : 85cc             [ 3] 	sta df_nextlin+1
e11c : 84c2             [ 3] 	sty df_curstidx
e11e : 84c1             [ 3] 	sty df_nxtstidx
e120 : 60               [ 6] 	rts
                             ; program ended with no match
e121 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             	
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e123 :                       df_rt_if_match
                             	; save the current if nest level
e123 : a5d5             [ 3] 	lda df_ifnest
e125 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e126 : 64d5             [ 3] 	stz df_ifnest	
                             	; save match pref
e128 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e129 :                       df_rt_findelseendif
e129 : 200de1           [ 6] 	jsr df_rt_if_stat
                             	; find command
e12c :                       df_rt_ifcmd
e12c : c8               [ 2] 	iny
e12d : b1cb             [ 5] 	lda (df_nextlin),y
e12f : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e131 : c994             [ 2] 	cmp #DFRT_ENDIF
e133 : f014             [ 3] 	beq df_rt_ifelse
                             
e135 : 28               [ 4] 	plp
e136 : 08               [ 3] 	php
                             	
e137 : b008             [ 3] 	bcs df_rt_ifskipelseif
e139 : c993             [ 2] 	cmp #DFRT_ELSE
e13b : f00c             [ 3] 	beq df_rt_ifelse
e13d : c995             [ 2] 	cmp #DFRT_ELSEIF
e13f : f008             [ 3] 	beq df_rt_ifelse
e141 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e141 : c992             [ 2] 	cmp #DFRT_IF
e143 : d002             [ 3] 	bne df_rt_skipnestif
e145 : e6d5             [ 5] 	inc df_ifnest
e147 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------------------- bank1.s -----------------------------------

e147 : 80e0             [ 3] 	bra df_rt_findelseendif
                             	
                             	; found else/elseif/endif
                             	; but check if this is nested
e149 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e149 : a6d5             [ 3] 	ldx df_ifnest
e14b : f008             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e14d : c994             [ 2] 	cmp #DFRT_ENDIF
e14f : d002             [ 3] 	bne df_rt_skipnestendif
e151 : c6d5             [ 5] 	dec df_ifnest
e153 :                       df_rt_skipnestendif	
                             	; continue to search for else/endif
e153 : 80d4             [ 3] 	bra df_rt_findelseendif
                             	; ok got a match
e155 :                       df_rt_if_found
                             	; remove pref
e155 : 28               [ 4] 	plp
                             	; restore global if nest
e156 : fa               [ 4] 	plx
e157 : 86d5             [ 3] 	stx df_ifnest
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e159 : 60               [ 6] 	rts
                             
e15a :                       df_rt_endif
                             	; decrement if next level
e15a : c6d5             [ 5] 	dec df_ifnest
e15c : 3011             [ 3] 	bmi df_rt_noif_err
                             ;	clc
e15e : 60               [ 6] 	rts
                             	
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e15f :                       df_rt_elseif
e15f :                       df_rt_else
                             	; not in if mode then error
e15f : a5d5             [ 3] 	lda df_ifnest
e161 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e16b : 38               [ 2] 	sec
e16c : 4c23e1           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if	
e16f :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             	
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e171 :                       df_rt_if
                             	; increment global if nest counter
e171 : e6d5             [ 5] 	inc df_ifnest
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------------------- bank1.s -----------------------------------

e173 :                       df_rt_ifeval
                             	; get value
e173 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e176 : c900             [ 2] 	cmp #0
e178 : d035             [ 3] 	bne df_rt_if_done
e17a : e000             [ 2] 	cpx #0
e17c : d031             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e186 : 18               [ 2] 	clc						
e187 : 2023e1           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e18a : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e18c : f01e             [ 3] 	beq df_rt_do_else
                             
e18e : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e190 : f01d             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e19a : c8               [ 2] 	iny
e19b : 5a               [ 3] 	phy
                             	; initialise statement pointer
e19c : a4c2             [ 3] 	ldy df_curstidx
e19e : a6c8             [ 3] 	ldx df_currlin
e1a0 : a5c9             [ 3] 	lda df_currlin+1
e1a2 : 2048dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e1a5 : 7a               [ 4] 	ply
e1a6 : 84ca             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e1a8 : 64cc             [ 3] 	stz df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e1aa : 80c7             [ 3] 	bra df_rt_ifeval
                             	
e1ac :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e1ac : 200de1           [ 6] 	jsr df_rt_if_stat
e1af :                       df_rt_if_done
                             ;	clc
e1af : 60               [ 6] 	rts
                             	
e1b0 :                       df_rt_for
                             	; push statement address to rt stack
e1b0 : 20f2dc           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e1b3 : 2077dd           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e1b6 : 48               [ 3] 	pha
e1b7 : da               [ 3] 	phx
                             
                             	; find starting value
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------------------- bank1.s -----------------------------------

                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e1b8 : e6ca             [ 5] 	inc df_exeoff
e1ba : 202ed9           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter
e1bd : fa               [ 4] 	plx
e1be : 86e3             [ 3] 	stx df_tmpptra
e1c0 : 68               [ 4] 	pla
e1c1 : 85e4             [ 3] 	sta df_tmpptra+1
e1c3 : 48               [ 3] 	pha
e1c4 : da               [ 3] 	phx
                             	; get the starting value from op stack
e1c5 : 2032f2           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e1c8 : a001             [ 2] 	ldy #1
e1ca : 91e3             [ 5] 	sta (df_tmpptra),y
e1cc : 8a               [ 2] 	txa
e1cd : 88               [ 2] 	dey
e1ce : 92e3             [ 5] 	sta (df_tmpptra)
                             
                             	; find end value
                             	; evaluate the end value
e1d0 : e6ca             [ 5] 	inc df_exeoff
e1d2 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e1d5 : 20ecf1           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e1d8 : e6ca             [ 5] 	inc df_exeoff
e1da : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e1dd : 20ecf1           [ 6] 	jsr df_rst_pushWord
                             	; save the counter slot address
e1e0 : fa               [ 4] 	plx
e1e1 : 68               [ 4] 	pla
e1e2 : 20ecf1           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e1e5 : a98e             [ 2] 	lda #DFRT_FOR
e1e7 : 4cd4f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             
e1ea :                       df_rt_next
                             	; remember stack position
e1ea : a4b8             [ 3] 	ldy df_rtstop
e1ec : 5a               [ 3] 	phy
e1ed : 20ddf1           [ 6] 	jsr df_rst_popByte
e1f0 : c98e             [ 2] 	cmp #DFRT_FOR
e1f2 : d04f             [ 4] 	bne df_rt_next_err
                             	; get the slot address
e1f4 : 20faf1           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e1f7 : 86e9             [ 3] 	stx df_tmpptrd
e1f9 : 85ea             [ 3] 	sta df_tmpptrd+1
e1fb : b2e9             [ 5] 	lda (df_tmpptrd)
e1fd : 85e3             [ 3] 	sta df_tmpptra
e1ff : a001             [ 2] 	ldy #1
e201 : b1e9             [ 5] 	lda (df_tmpptrd),y
e203 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
AS65 Assembler for R6502 [1.42].                                     Page  138
---------------------------------- bank1.s -----------------------------------

                             	; get step value, save in ptrb
e205 : 20faf1           [ 6] 	jsr df_rst_popWord
e208 : 86e5             [ 3] 	stx df_tmpptrb
e20a : 85e6             [ 3] 	sta df_tmpptrb+1
e20c : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e21a : a5e3             [ 3] 	lda df_tmpptra
e21c : 92e9             [ 5] 	sta (df_tmpptrd)
e21e : a001             [ 2] 	ldy #1
e220 : a5e4             [ 3] 	lda df_tmpptra+1
e222 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	
                             	; get end value, save in ptrb
e224 : 20faf1           [ 6] 	jsr df_rst_popWord
e227 : 86e5             [ 3] 	stx df_tmpptrb
e229 : 85e6             [ 3] 	sta df_tmpptrb+1
e22b : 68               [ 4] 	pla					; check if if +ve or -ve step
e22c : 1005             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e22e : 20e9df           [ 6] 	jsr df_rt_gte_calc
e231 : 8003             [ 3] 	bra df_rt_next_check
e233 :                       df_rt_check_pos	
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e233 : 20d5df           [ 6] 	jsr df_rt_lte_calc
e236 :                       df_rt_next_check
                             	; check if true or false
e236 : 2032f2           [ 6] 	jsr df_ost_popInt
e239 : e000             [ 2] 	cpx #0
                             	; if false then next is done
e23b : f003             [ 3] 	beq df_next_done
                             	; else we continue
e23d : 4c93dd           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e240 :                       df_next_done
e240 : 4c61e2           [ 3] 	jmp df_rt_untilnext_done
                             	
e243 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             	
e245 :                       df_rt_repeat
                             	; push statement address
e245 : 20f2dc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e248 : a98c             [ 2] 	lda #DFRT_REPEAT
e24a : 4cd4f1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             	
e24d :                       df_rt_until
                             	; remember stack position
e24d : a4b8             [ 3] 	ldy df_rtstop
e24f : 5a               [ 3] 	phy
e250 : 20ddf1           [ 6] 	jsr df_rst_popByte
e253 : c98c             [ 2] 	cmp #DFRT_REPEAT
e255 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
AS65 Assembler for R6502 [1.42].                                     Page  139
---------------------------------- bank1.s -----------------------------------

e257 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e25a : e000             [ 2] 	cpx #0
e25c : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e25e : 4c93dd           [ 3] 	jmp df_rt_pop_stat_go
                             
e261 :                       df_rt_untilnext_done
e261 : 7a               [ 4] 	ply
                             	; pop 2 items off stack (line address, index)
e262 : 20faf1           [ 6] 	jsr df_rst_popWord
e265 : 4cddf1           [ 3] 	jmp df_rst_popByte
                             	; and continue
                             ;	clc
                             ;	rts
                             
e268 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             	
e26a :                       df_rt_sadd
                             ;	clc
e26a : 60               [ 6] 	rts
                             	
e26b :                       df_rt_print_num
e26b : 2032f2           [ 6] 	jsr df_ost_popInt
e26e : 18               [ 2] 	clc
e26f : 4c5acb           [ 3] 	jmp print_a_to_d
                             ;	rts
                             	
e272 :                       df_rt_print_str
e272 : 202af2           [ 6] 	jsr df_ost_popStr
e275 : 86e3             [ 3] 	stx df_tmpptra
e277 : 85e4             [ 3] 	sta df_tmpptra+1
e279 : a000             [ 2] 	ldy #0
e27b :                       df_rt_print_str_ch
e27b : b1e3             [ 5] 	lda (df_tmpptra),y
e27d : f006             [ 3] 	beq df_rt_print_str_done
e27f : 20c0c5           [ 6] 	jsr io_put_ch
e282 : c8               [ 2] 	iny
e283 : 80f6             [ 3] 	bra df_rt_print_str_ch
e285 :                       df_rt_print_str_done
                             ;	clc
e285 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e286 :                       df_rt_nextdatum
e286 : a200             [ 2] 	ldx #0
                             	; load data line offset
e288 : a4d8             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e28a : a5d7             [ 3] 	lda df_currdat+1
e28c : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e296 :                       df_rt_datlinstart
                             	; if end of program then error
e296 : a1d6             [ 6] 	lda (df_currdat,x)
e298 : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
AS65 Assembler for R6502 [1.42].                                     Page  140
---------------------------------- bank1.s -----------------------------------

e29a : a003             [ 2] 	ldy #3
e29c : 84d8             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e29e :                       df_rt_datastatement
e29e : c8               [ 2] 	iny
e29f : 98               [ 2] 	tya
                             	; end of line reached?
e2a0 : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e2a2 : d00e             [ 3] 	bne df_rt_getdatatk
e2a4 :                       df_rt_datnextlin
                             	; if so then go to next line
e2a4 : 18               [ 2] 	clc
e2a5 : a5d6             [ 3] 	lda df_currdat
e2a7 : 61d6             [ 6] 	adc (df_currdat,x)
e2a9 : 85d6             [ 3] 	sta df_currdat
                             	_bcc 2
                             
e2ad : e6d7             [ 5] 	inc df_currdat+1
e2af : 4c96e2           [ 3] 	jmp df_rt_datlinstart
e2b2 :                       df_rt_getdatatk
e2b2 : b1d6             [ 5] 	lda (df_currdat),y
e2b4 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e2b6 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e2b8 : d0ea             [ 3] 	bne df_rt_datnextlin
e2ba : 84d8             [ 3] 	sty df_datoff
e2bc :                       df_rt_skipinitdataptr
e2bc : 98               [ 2] 	tya
                             	; end of line reached?
e2bd : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e2bf : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e2c1 : b1d6             [ 5] 	lda (df_currdat),y
e2c3 : c920             [ 2] 	cmp #DFTK_ESCVAL
e2c5 : c8               [ 2] 	iny
e2c6 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e2c8 : 88               [ 2] 	dey
e2c9 : 84d8             [ 3] 	sty df_datoff
e2cb : 60               [ 6] 	rts
e2cc :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e2ce :                       df_rt_readdatum
                             	; update data pointer to next data item
e2ce : 2086e2           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e2d1 : 2077dd           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e2d4 : 86e5             [ 3] 	stx df_tmpptrb
e2d6 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e2d8 : a5c8             [ 3] 	lda df_currlin
e2da : 48               [ 3] 	pha
e2db : a5c9             [ 3] 	lda df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  141
---------------------------------- bank1.s -----------------------------------

e2dd : 48               [ 3] 	pha
e2de : a5ca             [ 3] 	lda df_exeoff
e2e0 : 48               [ 3] 	pha
e2e1 : a5c0             [ 3] 	lda df_eolidx
e2e3 : 48               [ 3] 	pha
e2e4 : a5c1             [ 3] 	lda df_nxtstidx
e2e6 : 48               [ 3] 	pha
e2e7 : a5c2             [ 3] 	lda df_curstidx
e2e9 : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
e2f2 : a5d8             [ 3] 	lda df_datoff
e2f4 : 85ca             [ 3] 	sta df_exeoff
e2f6 : a200             [ 2] 	ldx #0
e2f8 : a1d6             [ 6] 	lda (df_currdat,x)
e2fa : 85c0             [ 3] 	sta df_eolidx
e2fc : 85c1             [ 3] 	sta df_nxtstidx
e2fe : a903             [ 2] 	lda #3
e300 : 85c2             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
e302 : a1e3             [ 6] 	lda (df_tmpptra,x)
e304 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
e305 : a6e5             [ 3] 	ldx df_tmpptrb
e307 : a5e6             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
e309 : 2008e6           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
e30c : a5ca             [ 3] 	lda df_exeoff
e30e : 85d8             [ 3] 	sta df_datoff
                             	; restore line settings
e310 : 68               [ 4] 	pla
e311 : 85c2             [ 3] 	sta df_curstidx
e313 : 68               [ 4] 	pla
e314 : 85c1             [ 3] 	sta df_nxtstidx
e316 : 68               [ 4] 	pla
e317 : 85c0             [ 3] 	sta df_eolidx
e319 : 68               [ 4] 	pla
e31a : 85ca             [ 3] 	sta df_exeoff
e31c : 68               [ 4] 	pla
e31d : 85c9             [ 3] 	sta df_currlin+1
e31f : 68               [ 4] 	pla
e320 : 85c8             [ 3] 	sta df_currlin
e322 : 60               [ 6] 	rts
                             
                             
e323 :                       df_rt_read
                             	; find variable to read in to from current posit
e323 : a4ca             [ 3] 	ldy df_exeoff
e325 :                       df_rt_read_find_var
e325 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
e326 : c4c1             [ 3] 	cpy df_nxtstidx
e328 : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
AS65 Assembler for R6502 [1.42].                                     Page  142
---------------------------------- bank1.s -----------------------------------

e32a : b1c8             [ 5] 	lda (df_currlin),y
e32c : c920             [ 2] 	cmp #DFTK_ESCVAL
e32e : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
e330 : 84ca             [ 3] 	sty df_exeoff
                             	; go and read in the value
e332 : 20cee2           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
e335 : 4c23e3           [ 3] 	jmp df_rt_read
                             
e338 :                       df_rt_read_done
                             	; save position
e338 : 84ca             [ 3] 	sty df_exeoff
e33a : 60               [ 6] 	rts
                             
                             
e33b :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
e33b : 2077dd           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e33e : 86e5             [ 3] 	stx df_tmpptrb
e340 : 85e6             [ 3] 	sta df_tmpptrb+1
e342 : a078             [ 2] 	ldy #120
                             	; go read a line of input
                             	; X,A is ptr has the input, Y is size
e344 : 38               [ 2] 	sec
e345 : 20cfc5           [ 6] 	jsr io_read_line
                             	; check the type
e348 : b2e3             [ 5] 	lda (df_tmpptra)
e34a : 2904             [ 2] 	and #DFVVT_STR
e34c : d008             [ 3] 	bne df_rt_input_str
e34e : b2e3             [ 5] 	lda (df_tmpptra)
e350 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e352 : d003             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
e354 : 8018             [ 3] 	bra df_rt_input_err
e356 :                       df_rt_input_str
                             	; If string then done!
                             ;	clc
e356 : 60               [ 6] 	rts
                             
e357 :                       df_rt_input_num
                             	; X,A = address from tmpb, linbuff must be on pa
e357 : a6e5             [ 3] 	ldx df_tmpptrb
e359 : a5e6             [ 3] 	lda df_tmpptrb+1
e35b : a000             [ 2] 	ldy #0				; any numeric format
e35d : 201bc9           [ 6] 	jsr con_n_to_a
e360 : b00c             [ 3] 	bcs df_rt_input_err
e362 : a000             [ 2] 	ldy #0
e364 : a585             [ 3] 	lda num_a
e366 : 91e5             [ 5] 	sta (df_tmpptrb),y
e368 : c8               [ 2] 	iny
e369 : a586             [ 3] 	lda num_a+1
e36b : 91e5             [ 5] 	sta (df_tmpptrb),y
                             ;	clc
e36d : 60               [ 6] 	rts
e36e :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             	
e370 :                       df_rt_local
                             	; get current local count off rt stack
AS65 Assembler for R6502 [1.42].                                     Page  143
---------------------------------- bank1.s -----------------------------------

e370 : 20ddf1           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
e373 : 48               [ 3] 	pha
e374 : a4ca             [ 3] 	ldy df_exeoff
e376 : 88               [ 2] 	dey
e377 :                       df_rt_local_findesc
e377 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
e378 : c4c1             [ 3] 	cpy df_nxtstidx
e37a : f019             [ 3] 	beq df_rt_local_done
                             	; find a var
e37c : b1c8             [ 5] 	lda (df_currlin),y
e37e : c911             [ 2] 	cmp #DFTK_VAR
e380 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
e382 : c8               [ 2] 	iny
                             	; get var slot in A,X
e383 : b1c8             [ 5] 	lda (df_currlin),y
e385 : aa               [ 2] 	tax
e386 : c8               [ 2] 	iny
e387 : b1c8             [ 5] 	lda (df_currlin),y
e389 : 84ca             [ 3] 	sty df_exeoff
                             	; localise this variable
e38b : 20c0f1           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
e38e : 68               [ 4] 	pla
e38f : 1a               [ 2] 	inc a
e390 : 48               [ 3] 	pha
e391 : a4ca             [ 3] 	ldy df_exeoff
e393 : 80e2             [ 3] 	bra df_rt_local_findesc
e395 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
e395 : 68               [ 4] 	pla
e396 : 4cd4f1           [ 3] 	jmp df_rst_pushByte
                             ;	clc
                             ;	rts
                             	
e399 :                       df_rt_redim
e399 : 38               [ 2] 	sec
e39a : b001             [ 3] 	bcs df_rt_dim_main
e39c :                       df_rt_dim
e39c : 18               [ 2] 	clc
e39d :                       df_rt_dim_main
e39d : 08               [ 3] 	php
e39e :                       df_rt_dim_loop
e39e : a4ca             [ 3] 	ldy df_exeoff
e3a0 : 88               [ 2] 	dey
e3a1 :                       df_rt_dim_findesc
                             	; check end of line
e3a1 : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
e3a2 : c4c1             [ 3] 	cpy df_nxtstidx
e3a4 : f076             [ 4] 	beq df_rt_dim_done
                             	; find a var
e3a6 : b1c8             [ 5] 	lda (df_currlin),y
e3a8 : c911             [ 2] 	cmp #DFTK_VAR
e3aa : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
AS65 Assembler for R6502 [1.42].                                     Page  144
---------------------------------- bank1.s -----------------------------------

e3ac : c8               [ 2] 	iny
                             	; get var address
e3ad : b1c8             [ 5] 	lda (df_currlin),y
e3af : 85e3             [ 3] 	sta df_tmpptra
e3b1 : c8               [ 2] 	iny
e3b2 : b1c8             [ 5] 	lda (df_currlin),y
e3b4 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
e3b6 : c8               [ 2] 	iny
e3b7 : 84ca             [ 3] 	sty df_exeoff
                             	; If re-dim, don't check for existing dimensions
e3b9 : 28               [ 4] 	plp
e3ba : 08               [ 3] 	php
e3bb : b006             [ 3] 	bcs df_rt_skip_dim_chk
                             	; check if already dim'd
e3bd : a003             [ 2] 	ldy #DFVVT_DIM1
e3bf : b1e3             [ 5] 	lda (df_tmpptra),y
e3c1 : d05b             [ 4] 	bne df_rt_dim_err
e3c3 :                       df_rt_skip_dim_chk
                             	; Save slot address found earlier
e3c3 : a5e3             [ 3] 	lda df_tmpptra
e3c5 : 48               [ 3] 	pha
e3c6 : a5e4             [ 3] 	lda df_tmpptra+1
e3c8 : 48               [ 3] 	pha
e3c9 : 20a4da           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
e3cc : 68               [ 4] 	pla
e3cd : 85e4             [ 3] 	sta df_tmpptra+1
e3cf : 68               [ 4] 	pla
e3d0 : 85e3             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
e3d2 : 5a               [ 3] 	phy
e3d3 : da               [ 3] 	phx
e3d4 : a003             [ 2] 	ldy #DFVVT_DIM1
e3d6 : 68               [ 4] 	pla
e3d7 : 91e3             [ 5] 	sta (df_tmpptra),y
e3d9 : c8               [ 2] 	iny
e3da : 68               [ 4] 	pla
e3db : 91e3             [ 5] 	sta (df_tmpptra),y	
e3dd : 28               [ 4] 	plp
e3de : 08               [ 3] 	php
e3df : b02f             [ 4] 	bcs df_rt_dim_set_type
e3e1 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
e3e1 : a003             [ 2] 	ldy #DFVVT_DIM1
e3e3 : b1e3             [ 5] 	lda (df_tmpptra),y
e3e5 : 8585             [ 3] 	sta num_a
e3e7 : 6486             [ 3] 	stz num_a+1
e3e9 : c8               [ 2] 	iny
e3ea : b1e3             [ 5] 	lda (df_tmpptra),y
e3ec : d002             [ 3] 	bne df_rt_dim2_nz
e3ee : a901             [ 2] 	lda #1
e3f0 :                       df_rt_dim2_nz
e3f0 : 8589             [ 3] 	sta num_b
e3f2 : 648a             [ 3] 	stz num_b+1
e3f4 : 2015cc           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
e3f7 : b2e3             [ 5] 	lda (df_tmpptra)
e3f9 : 2901             [ 2] 	and #DFVVT_INT
e3fb : f004             [ 4] 	beq df_rt_dim2_mul2
AS65 Assembler for R6502 [1.42].                                     Page  145
---------------------------------- bank1.s -----------------------------------

e3fd : 0685             [ 5] 	asl num_a
e3ff : 2686             [ 5] 	rol num_a+1
e401 :                       df_rt_dim2_mul2	
                             	; finally, we have a size of array
e401 : a685             [ 3] 	ldx num_a
e403 : a586             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
e405 : 204ff2           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
e408 : a002             [ 2] 	ldy #DFVVT_HI
e40a : 91e3             [ 5] 	sta (df_tmpptra),y
e40c : 8a               [ 2] 	txa
e40d : 88               [ 2] 	dey
e40e : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
e410 :                       df_rt_dim_set_type
e410 : b2e3             [ 5] 	lda (df_tmpptra)
e412 : 0980             [ 2] 	ora #DFVVT_PTR
e414 : 92e3             [ 5] 	sta (df_tmpptra)
                             	; don't increment byte again - go check for more
e416 : 8086             [ 4] 	bra df_rt_dim_loop	
e418 :                       df_rt_dim_next_byte
e418 : e6ca             [ 5] 	inc df_exeoff
e41a : 8080             [ 4] 	bra df_rt_dim
e41c :                       df_rt_dim_done
                             ;	clc
e41c : 28               [ 4] 	plp
e41d : 60               [ 6] 	rts
e41e :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
e420 :                       df_rt_cls
                             	; set cursror position to top left first
e420 : a200             [ 2] 	ldx #0
e422 : a000             [ 2] 	ldy #0
e424 : 20a6c3           [ 6] 	jsr _gr_set_cur
e427 : 4ccec2           [ 3] 	jmp _gr_cls
                             ;	clc
                             ;	rts
                             	
e42a :                       df_rt_plot
                             	; evaluate the expression
e42a : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e42d : da               [ 3] 	phx
                             	; jump over comma
e42e : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e430 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e433 : da               [ 3] 	phx
                             	; jump over comma
e434 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e436 : 202ed9           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
                             	_df_ost_peekType
                             
                             	; if >=0x80 then a pointer / string
e43e : 2904             [ 2] 	and #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  146
---------------------------------- bank1.s -----------------------------------

e440 : d014             [ 3] 	bne df_rt_plotstr
                             	; else it is int
e442 : 2032f2           [ 6] 	jsr df_ost_popInt
                             	; put low byte of pop result in a
e445 : 8a               [ 2] 	txa
e446 : a622             [ 3] 	ldx vdp_base+vdp_gmode	; Check if in hires mode
e448 : e010             [ 2] 	cpx #0x10
e44a : b005             [ 3] 	bcs df_rt_hchar
                             	; get y and x in that order
e44c : 7a               [ 4] 	ply
e44d : fa               [ 4] 	plx
e44e : 4c46c3           [ 3] 	jmp _gr_plot
e451 :                       df_rt_hchar
                             	; get y and x in that order
e451 : 7a               [ 4] 	ply
e452 : fa               [ 4] 	plx
e453 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e456 :                       df_rt_plotstr
                             	; pop string pointer
e456 : 202ef2           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
e459 : 86e3             [ 3] 	stx df_tmpptra
e45b : 85e4             [ 3] 	sta df_tmpptra+1
e45d : a422             [ 3] 	ldy vdp_base+vdp_gmode	; Check if in hires mode
e45f : c010             [ 2] 	cpy #0x10
e461 : b017             [ 3] 	bcs df_rt_hplotstr
                             	; get y and x in that order
e463 : 7a               [ 4] 	ply
e464 : fa               [ 4] 	plx
                             	; set cursror position
e465 :                       df_rt_plotstrch
e465 : b2e3             [ 5] 	lda (df_tmpptra)
e467 : f010             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e46f : da               [ 3] 	phx
e470 : 5a               [ 3] 	phy
e471 : 2046c3           [ 6] 	jsr _gr_plot
e474 : 7a               [ 4] 	ply
e475 : fa               [ 4] 	plx
e476 : e8               [ 2] 	inx
e477 : 80ec             [ 3] 	bra df_rt_plotstrch
e479 :                       df_rt_plotstrdone
e479 : 60               [ 6] 	rts
e47a :                       df_rt_hplotstr
                             	; get y and x in that order
e47a : 7a               [ 4] 	ply
e47b : fa               [ 4] 	plx
                             	; set cursror position
e47c :                       df_rt_hplotstrch
e47c : b2e3             [ 5] 	lda (df_tmpptra)
e47e : f0f9             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e486 : da               [ 3] 	phx
e487 : 5a               [ 3] 	phy
e488 : 205ec3           [ 6] 	jsr _gr_hchar
e48b : 7a               [ 4] 	ply
e48c : 68               [ 4] 	pla
e48d : 18               [ 2] 	clc			; Assume pitch 8 for now
e48e : 6908             [ 2] 	adc #8
AS65 Assembler for R6502 [1.42].                                     Page  147
---------------------------------- bank1.s -----------------------------------

e490 : aa               [ 2] 	tax
e491 : 80e9             [ 3] 	bra df_rt_hplotstrch
                             
e493 :                       df_rt_cursor
                             	; evaluate the expression
e493 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
e496 : 8612             [ 3] 	stx vdp_curoff
                             ;	clc
e498 : 60               [ 6] 	rts
                             		
e499 :                       df_rt_himem
                             	; evaluate the expression
e499 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
e49c : 8e670c           [ 4] 	stx df_memtop
e49f : 8d680c           [ 4] 	sta df_memtop+1
                             	; now clear everything down
e4a2 : 4c74f2           [ 3] 	jmp df_clear
e4a5 : 60               [ 6] 	rts
                             
e4a6 :                       df_rt_mode
e4a6 :                       df_rt_hires
                             	; evaluate the expression
e4a6 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; only interested in low byte
e4a9 : 8a               [ 2] 	txa
e4aa : 4cc6c1           [ 3] 	jmp _gr_init_screen
                             	
e4ad :                       df_rt_pixmode
                             	; evaluate the expression X = mode
e4ad : 2028d9           [ 6] 	jsr df_rt_getnval
e4b0 : 862e             [ 3] 	stx gr_scrngeom+gr_pixmode
                             ;	clc
e4b2 : 60               [ 6] 	rts
                             
e4b3 :                       df_rt_pixmask
                             	; evaluate the expression X = mask
e4b3 : 2028d9           [ 6] 	jsr df_rt_getnval
e4b6 : 862f             [ 3] 	stx gr_scrngeom+gr_pixmask
                             ;	clc
e4b8 : 60               [ 6] 	rts
                             
e4b9 :                       df_rt_pixcol
                             	; evaluate the expression X = col
e4b9 : 2028d9           [ 6] 	jsr df_rt_getnval
e4bc : 8630             [ 3] 	stx gr_scrngeom+gr_pixcol
                             ;	clc
e4be : 60               [ 6] 	rts
                             
e4bf :                       df_rt_put
                             	; evaluate the byte to put
e4bf : 2028d9           [ 6] 	jsr df_rt_getnval
e4c2 : 8a               [ 2] 	txa
e4c3 : 20c0c5           [ 6] 	jsr io_put_ch
e4c6 : 60               [ 6] 	rts
                             
e4c7 :                       df_rt_point
e4c7 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
e4ca : a6e3             [ 3] 	ldx df_tmpptra
e4cc : a4e5             [ 3] 	ldy df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  148
---------------------------------- bank1.s -----------------------------------

e4ce : 4c76c3           [ 3] 	jmp _gr_point
                             ;	clc
                             ;	rts
                             
e4d1 :                       df_rt_hplot
e4d1 : 20f4db           [ 6] 	jsr df_rt_parm_3ints
e4d4 : a6e3             [ 3] 	ldx df_tmpptra				; load x
e4d6 : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e4d8 : a5e7             [ 3] 	lda df_tmpptrc				; load char
e4da : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e4dd :                       df_rt_circle
e4dd : 20f4db           [ 6] 	jsr df_rt_parm_3ints
e4e0 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e4e2 : 8585             [ 3] 	sta num_a
e4e4 : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e4e6 : 8586             [ 3] 	sta num_a+1
e4e8 : a5e7             [ 3] 	lda df_tmpptrc				; load r
e4ea : 8587             [ 3] 	sta num_a+2
e4ec : 4c2ec3           [ 3] 	jmp _gr_circle
                             
e4ef :                       df_rt_line
e4ef : 200bdc           [ 6] 	jsr df_rt_parm_4ints
e4f2 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e4f4 : 8585             [ 3] 	sta num_a
e4f6 : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e4f8 : 8586             [ 3] 	sta num_a+1
e4fa : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e4fc : 8587             [ 3] 	sta num_a+2
e4fe : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e500 : 8588             [ 3] 	sta num_a+3
e502 : 4cfec2           [ 3] 	jmp _gr_line
                             
e505 :                       df_rt_box
e505 : 200bdc           [ 6] 	jsr df_rt_parm_4ints
e508 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e50a : 8585             [ 3] 	sta num_a
e50c : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e50e : 8586             [ 3] 	sta num_a+1
e510 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e512 : 8587             [ 3] 	sta num_a+2
e514 : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e516 : 8588             [ 3] 	sta num_a+3
e518 : 4c16c3           [ 3] 	jmp _gr_box
                             
e51b :                       df_rt_shape
e51b : 20f4db           [ 6] 	jsr df_rt_parm_3ints
e51e : a6e3             [ 3] 	ldx df_tmpptra				; load x
e520 : da               [ 3] 	phx
e521 : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e523 : 5a               [ 3] 	phy
e524 : a6e7             [ 3] 	ldx df_tmpptrc				; load coords[]
e526 : a5e8             [ 3] 	lda df_tmpptrc+1			; load coords[]
e528 : 20ecf1           [ 6] 	jsr df_rst_pushWord
e52b :                       df_rt_shapeLoop
e52b : 20faf1           [ 6] 	jsr df_rst_popWord			; Get pointer
e52e : 86e3             [ 3] 	stx df_tmpptra
e530 : 85e4             [ 3] 	sta df_tmpptra+1
e532 : b2e3             [ 5] 	lda (df_tmpptra)			; Get X coord as int
e534 : 853f             [ 3] 	sta tmp_v1
e536 : a001             [ 2] 	ldy #1
e538 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get X hi byte
AS65 Assembler for R6502 [1.42].                                     Page  149
---------------------------------- bank1.s -----------------------------------

e53a : 8540             [ 3] 	sta tmp_v1+1
e53c : c8               [ 2] 	iny
e53d : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y coord as int
e53f : 8543             [ 3] 	sta tmp_b
e541 : c8               [ 2] 	iny
e542 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y hi byte
e544 : 8544             [ 3] 	sta tmp_b+1
e546 : a53f             [ 3] 	lda tmp_v1					; If X and Y low are zero then en
e548 : d007             [ 3] 	bne df_rt_shapeCalc
e54a : a543             [ 3] 	lda tmp_b
e54c : d003             [ 3] 	bne df_rt_shapeCalc
                             	; Got here then must be finished
e54e : 68               [ 4] 	pla							; Pop bytes off 6502 stack
e54f : 68               [ 4] 	pla
e550 : 60               [ 6] 	rts
e551 :                       df_rt_shapeCalc
e551 : 18               [ 2] 	clc
e552 : a5e3             [ 3] 	lda df_tmpptra				; Increment coord pointer 
e554 : 6904             [ 2] 	adc #4						; 2 ints is 4 bytes per coord
e556 : aa               [ 2] 	tax
e557 : a5e4             [ 3] 	lda df_tmpptra+1
e559 : 6900             [ 2] 	adc #0
e55b : 20ecf1           [ 6] 	jsr df_rst_pushWord			; Put pointer on runtime s
                             	; previous cursor is starting position
                             	; plus delta is new position
e55e : 68               [ 4] 	pla							; get y0 off stack
e55f : 18               [ 2] 	clc
e560 : 8586             [ 3] 	sta num_a+1
e562 : 6543             [ 3] 	adc tmp_b
e564 : 8588             [ 3] 	sta num_a+3					; y1 = y0+dy
e566 : aa               [ 2] 	tax							; save y1 in X reg
e567 : 68               [ 4] 	pla							; get x0 off stack
e568 : 18               [ 2] 	clc
e569 : 8585             [ 3] 	sta num_a					; x0
e56b : 653f             [ 3] 	adc tmp_v1
e56d : 8587             [ 3] 	sta num_a+2					; x1
e56f : 48               [ 3] 	pha							; save x1
e570 : da               [ 3] 	phx							; save y1
e571 : 20fec2           [ 6] 	jsr _gr_line				; line x0,y0,x1,y1
e574 : 80b5             [ 3] 	bra df_rt_shapeLoop			; go back to next coord
                             	
e576 :                       df_rt_wait
                             	; evaluate the expression
e576 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
e579 : a8               [ 2] 	tay
e57a :                       df_rt_wait_loop
                             	; check X,Y==0
e57a : 8a               [ 2] 	txa
e57b : d004             [ 3] 	bne df_rt_wait_countdown
e57d : 98               [ 2] 	tya
e57e : d001             [ 3] 	bne df_rt_wait_countdown
                             	; Done (wait 0 returns immediately)
e580 : 60               [ 6] 	rts
e581 :                       df_rt_wait_countdown
                             	; get vdp low byte timer val in A for tick wait
e581 : a510             [ 3] 	lda vdp_int_cnt
e583 : ca               [ 2] 	dex
e584 : e0ff             [ 2] 	cpx #0xff
e586 : d001             [ 3] 	bne df_rt_wait_tick
e588 : 88               [ 2] 	dey
e589 :                       df_rt_wait_tick
AS65 Assembler for R6502 [1.42].                                     Page  150
---------------------------------- bank1.s -----------------------------------

                             	; check if a tick has occurred (i.e. val <> A)
e589 : c510             [ 3] 	cmp vdp_int_cnt
e58b : f0fc             [ 3] 	beq df_rt_wait_tick
e58d : d0eb             [ 3] 	bne df_rt_wait_loop		; Always
                             	
e58f :                       df_rt_printat
                             	; Get x,y
e58f : 20e9db           [ 6] 	jsr df_rt_parm_2ints
e592 : a6e3             [ 3] 	ldx df_tmpptra
e594 : a4e5             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
e596 : 20a6c3           [ 6] 	jsr _gr_set_cur
                             	; and continue to normal print command
e599 :                       df_rt_print
e599 : a4ca             [ 3] 	ldy df_exeoff
e59b : 88               [ 2] 	dey
e59c :                       df_rt_print_ws
e59c : c8               [ 2] 	iny
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
e59d : c4c1             [ 3] 	cpy df_nxtstidx
e59f : f026             [ 3] 	beq df_rt_print_done
e5a1 : b1c8             [ 5] 	lda (df_currlin),y
e5a3 : c93a             [ 2] 	cmp #':'
e5a5 : f020             [ 3] 	beq df_rt_print_done
e5a7 : c920             [ 2] 	cmp #' '
e5a9 : f0f1             [ 3] 	beq df_rt_print_ws
e5ab : c92c             [ 2] 	cmp #','
e5ad : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
e5af : 84ca             [ 3] 	sty df_exeoff
                             	
                             	; if starts with string literal then process sev
                             ;	cmp #DFTK_STRLIT
                             ;	beq df_rt_print_string
                             	; else evaluate a numeric
e5b1 : 202ed9           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
                             	_df_ost_peekType
                             
e5b9 : 2904             [ 2] 	and #DFST_STR
e5bb : d005             [ 3] 	bne df_rt_print_gotstr
e5bd : 206be2           [ 6] 	jsr df_rt_print_num
e5c0 : 80d7             [ 3] 	bra df_rt_print
e5c2 :                       df_rt_print_gotstr
e5c2 : 2072e2           [ 6] 	jsr df_rt_print_str
e5c5 : 80d2             [ 3] 	bra df_rt_print
                             ;df_rt_print_string
                             ;	; point to string accumulator
                             ;	ldx df_sevalptr
                             ;	lda df_sevalptr+1
                             ;	jsr df_rt_seval
                             ;	bra df_rt_print_gotstr
e5c7 :                       df_rt_print_done
e5c7 : 84ca             [ 3] 	sty df_exeoff
e5c9 : 60               [ 6] 	rts
                             	
e5ca :                       df_rt_println
e5ca : 2099e5           [ 6] 	jsr df_rt_print
e5cd : a90d             [ 2] 	lda #UTF_CR
e5cf : 4cc0c5           [ 3] 	jmp io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page  151
---------------------------------- bank1.s -----------------------------------

                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
e5d2 :                       df_rt_nassign
e5d2 : 48               [ 3] 	pha
e5d3 : da               [ 3] 	phx
                             	; now go evaluate expression in to A,X
e5d4 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to
e5d7 : 7a               [ 4] 	ply
e5d8 : 84e3             [ 3] 	sty df_tmpptra
e5da : 7a               [ 4] 	ply
e5db : 84e4             [ 3] 	sty df_tmpptra+1
                             	; save X,A int in contents section
e5dd : a001             [ 2] 	ldy #1
e5df : 91e3             [ 5] 	sta (df_tmpptra),y
e5e1 : 8a               [ 2] 	txa
e5e2 : 88               [ 2] 	dey
e5e3 : 91e3             [ 5] 	sta (df_tmpptra),y
                             
e5e5 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
e5e6 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being X,A
e5e6 : 20e2d9           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
e5e9 : 4c2af2           [ 3] 	jmp df_ost_popStr
                             	
                             ;	clc
                             ;	rts
                             
                             ; generate lvar from a var token ready for assign
e5ec :                       df_rt_generate_lvar
                             	; move past escape val
e5ec : a4ca             [ 3] 	ldy df_exeoff
e5ee : c8               [ 2] 	iny
                             	; pointing to variable index
e5ef : b1c8             [ 5] 	lda (df_currlin),y
e5f1 : 85e3             [ 3] 	sta df_tmpptra
e5f3 : c8               [ 2] 	iny
e5f4 : b1c8             [ 5] 	lda (df_currlin),y
e5f6 : 84ca             [ 3] 	sty df_exeoff
e5f8 : 85e4             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
e5fa : b2e3             [ 5] 	lda (df_tmpptra)
e5fc : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
e5fd : 38               [ 2] 	sec
e5fe : 20c8da           [ 6] 	jsr df_rt_eval_var
e601 : 202ef2           [ 6] 	jsr df_ost_popPtr
                             	; pull the type previously saved into Y
e604 : 7a               [ 4] 	ply
                             	; move past the lvar variable index
e605 : e6ca             [ 5] 	inc df_exeoff
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  152
---------------------------------- bank1.s -----------------------------------

e607 : 60               [ 6] 	rts
                             
                             ; assign
                             ; X,A,Y contain lvar pointer and type
e608 :                       df_rt_doassign
                             	; save A and put type Y in to A
e608 : 48               [ 3] 	pha
e609 : 98               [ 2] 	tya
e60a : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
e60c : f004             [ 3] 	beq df_rt_assign_num
                             	; remember to restore A
                             	; jump to string expression evaluator
e60e : 68               [ 4] 	pla
e60f : 4ce6e5           [ 3] 	jmp df_rt_sassign
e612 :                       df_rt_assign_num
                             	; else jump to numeric expression evaluator
                             	; remember to restore A
e612 : 68               [ 4] 	pla
e613 : 4cd2e5           [ 3] 	jmp df_rt_nassign
                             
                             ; general assignment execution
e616 :                       df_rt_assign
e616 : 20ece5           [ 6] 	jsr df_rt_generate_lvar
                             	; go and do the assignment
e619 : 4c08e6           [ 3] 	jmp df_rt_doassign
                             	
                             ; comment or data token is ignored by runtime
e61c :                       df_rt_comment
e61c :                       df_rt_data
                             ;	clc
e61c : 60               [ 6] 	rts
                             
                             	
                             ; run token	
e61d :                       df_rt_run
                             ;	sec
e61d : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
e61e :                       df_rt_eos
e61e : a4ca             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
e620 : c4c1             [ 3] 	cpy df_nxtstidx
e622 : f008             [ 3] 	beq df_rt_eos_true
e624 : b1c8             [ 5] 	lda (df_currlin),y
e626 : c93a             [ 2] 	cmp #':'
e628 : f002             [ 3] 	beq df_rt_eos_true
e62a : 18               [ 2] 	clc
e62b : 60               [ 6] 	rts
e62c :                       df_rt_eos_true
e62c : 38               [ 2] 	sec
e62d : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
e62e :                       df_rt_renum
e62e : e6ca             [ 5] 	inc df_exeoff
e630 : 20f4db           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
AS65 Assembler for R6502 [1.42].                                     Page  153
---------------------------------- bank1.s -----------------------------------

e633 : a6e3             [ 3] 	ldx df_tmpptra
e635 : a5e4             [ 3] 	lda df_tmpptra+1
e637 : 2040d7           [ 6] 	jsr df_pg_find_line
e63a : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
e63e :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
e63e : 86e9             [ 3] 	stx df_tmpptrd
e640 : 85ea             [ 3] 	sta df_tmpptrd+1
e642 :                       df_rt_renum_do
                             	; if not end of program
e642 : a000             [ 2] 	ldy #0
e644 : b1e9             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
e646 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
e648 : 60               [ 6] 	rts
e649 :                       df_rt_renum_update
                             	; so set this line number to new line number
e649 : a001             [ 2] 	ldy #DFTK_LINNUM
e64b : a5e5             [ 3] 	lda df_tmpptrb
e64d : 91e9             [ 5] 	sta (df_tmpptrd),y
e64f : c8               [ 2] 	iny
e650 : a5e6             [ 3] 	lda df_tmpptrb+1
e652 : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
e661 :                       df_rt_renum_next
                             	; point ptrd to the next line
e661 : 18               [ 2] 	clc
e662 : a5e9             [ 3] 	lda df_tmpptrd
e664 : a200             [ 2] 	ldx #0
e666 : 61e9             [ 6] 	adc (df_tmpptrd,x)
e668 : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e66c : e6ea             [ 5] 	inc df_tmpptrd+1
e66e : 4c42e6           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
e671 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
e679 : a5b3             [ 3] 	lda df_varcnt
e67b : 85e5             [ 3] 	sta df_tmpptrb
e67d :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
e67d : a5e5             [ 3] 	lda df_tmpptrb
e67f : f03a             [ 3] 	beq df_rt_listpn_done
e681 : a000             [ 2] 	ldy #0
e683 : b1e3             [ 5] 	lda (df_tmpptra),y
e685 : c95f             [ 2] 	cmp #'_'
e687 : d01b             [ 3] 	bne df_rt_listnextvnt
e689 :                       df_rt_listprocch
e689 : b1e3             [ 5] 	lda (df_tmpptra),y
e68b : 20c0c5           [ 6] 	jsr io_put_ch
e68e : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  154
---------------------------------- bank1.s -----------------------------------

e68f : f003             [ 3] 	beq df_rt_listproccr
e691 : c8               [ 2] 	iny
e692 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
e694 :                       df_rt_listproccr
e694 : a90d             [ 2] 	lda #UTF_CR
e696 : 20c0c5           [ 6] 	jsr io_put_ch
e699 : 18               [ 2] 	clc
e69a :                       df_rt_listprocpause
e69a : 20bdc5           [ 6] 	jsr io_get_ch
e69d : c920             [ 2] 	cmp #' '
e69f : d003             [ 3] 	bne df_rt_listnextvnt
e6a1 :                       df_rt_listwait
e6a1 : 38               [ 2] 	sec
e6a2 : b0f6             [ 3] 	bcs df_rt_listprocpause
e6a4 :                       df_rt_listnextvnt
e6a4 : b1e3             [ 5] 	lda (df_tmpptra),y
e6a6 : f003             [ 3] 	beq df_rt_listgotnext
e6a8 : c8               [ 2] 	iny
e6a9 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
e6ab :                       df_rt_listgotnext
                             	; dec vnt #
e6ab : c6e5             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
e6ad : c8               [ 2] 	iny
                             	; add this to vnt pointer
e6ae : 18               [ 2] 	clc
e6af : 98               [ 2] 	tya
e6b0 : 65e3             [ 3] 	adc df_tmpptra
e6b2 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e6b6 : e6e4             [ 5] 	inc df_tmpptra+1
e6b8 : 4c7de6           [ 3] 	jmp df_rt_listcheckvnt
e6bb :                       df_rt_listpn_done
e6bb : 60               [ 6] 	rts
                             
e6bc :                       df_rt_listproc
                             	; A already contains '_'
e6bc : 8d000a           [ 4] 	sta df_linbuff
e6bf : a200             [ 2] 	ldx #0
e6c1 : a4ca             [ 3] 	ldy df_exeoff
e6c3 :                       df_rt_listp_copy
e6c3 : c8               [ 2] 	iny
e6c4 : e8               [ 2] 	inx
e6c5 : b1c8             [ 5] 	lda (df_currlin),y
e6c7 : 9d000a           [ 5] 	sta df_linbuff,x
e6ca : 20a2ce           [ 6] 	jsr df_tk_isalphanum
e6cd : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
e6cf : a200             [ 2] 	ldx #0
e6d1 : 86be             [ 3] 	stx df_linoff
                             	; save runtime pos
e6d3 : 84ca             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
e6d5 : 20c4cc           [ 6] 	jsr df_var_find
e6d8 : b036             [ 4] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
e6da : 86d0             [ 3] 	stx df_procptr
e6dc : 85d1             [ 3] 	sta df_procptr+1
e6de : 2017dd           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
e6e1 : 86e3             [ 3] 	stx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  155
---------------------------------- bank1.s -----------------------------------

e6e3 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
e6e5 :                       df_rt_listp_findend
                             	; Go to next stat
e6e5 : 20c4dc           [ 6] 	jsr df_rt_nextstat
e6e8 : b057             [ 4] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
e6ea : 98               [ 2] 	tya
e6eb : 48               [ 3] 	pha
                             	; find the command
e6ec :                       df_rt_listp_findcmd
e6ec : c8               [ 2] 	iny
e6ed : b1d2             [ 5] 	lda (df_lineptr),y
e6ef : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
e6f1 : 8545             [ 3] 	sta tmp_d
e6f3 : 68               [ 4] 	pla
e6f4 : a8               [ 2] 	tay
e6f5 : a545             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
e6f7 : c987             [ 2] 	cmp #DFRT_ENDDEF
e6f9 : f00b             [ 4] 	beq df_rt_listp_done
e6fb : c986             [ 2] 	cmp #DFRT_DEF
e6fd : f007             [ 4] 	beq df_rt_listp_done
                             	; if neither then next stat from current
e6ff : a6d2             [ 3] 	ldx df_lineptr
e701 : a5d3             [ 3] 	lda df_lineptr+1
e703 : 4ce5e6           [ 3] 	jmp df_rt_listp_findend
e706 :                       df_rt_listp_done
                             	; Push end line on to stack
e706 : a5d3             [ 3] 	lda df_lineptr+1
e708 : 48               [ 3] 	pha
e709 : 8a               [ 2] 	txa
e70a : 48               [ 3] 	pha
e70b : a5d3             [ 3] 	lda df_lineptr+1
e70d : 4c47e7           [ 3] 	jmp df_rt_list_line
e710 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
e712 :                       df_rt_list
e712 : a900             [ 2] 	lda #0
e714 : 85eb             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
e716 : 206add           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
e719 : 201ee6           [ 6] 	jsr df_rt_eos
AS65 Assembler for R6502 [1.42].                                     Page  156
---------------------------------- bank1.s -----------------------------------

                             	; so list whole program
e71c : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
e71e : c95f             [ 2] 	cmp #'_'
e720 : d003             [ 3] 	bne df_rt_list_all
e722 : 4cbce6           [ 3] 	jmp df_rt_listproc
e725 :                       df_rt_list_all
                             	;if '*' then display all procnames
e725 : c92a             [ 2] 	cmp #'*'
e727 : d003             [ 3] 	bne df_rt_list_linno
e729 : 4c71e6           [ 3] 	jmp df_rt_listprocnames
e72c :                       df_rt_list_linno
                             	; else get 1st parameter
e72c : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
e72f : 2040d7           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
e732 : 86e3             [ 3] 	stx df_tmpptra
e734 : 85e4             [ 3] 	sta df_tmpptra+1
e736 : 4c41e7           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
e739 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
e741 :                       df_rt_listprgend
e741 : a5aa             [ 3] 	lda df_prgend+1
e743 : 48               [ 3] 	pha						; df_prgend hi at 102,x
e744 : a5a9             [ 3] 	lda df_prgend
e746 : 48               [ 3] 	pha						; df_prgend lo at 101,x
e747 :                       df_rt_list_line
                             	; if line length = 0 then end of program
e747 : a000             [ 2] 	ldy #0
e749 : b1e3             [ 5] 	lda (df_tmpptra),y
e74b : f039             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
e74d : a5eb             [ 3] 	lda df_tmpptre
e74f : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
e751 : 18               [ 2] 	clc
e752 :                       df_rt_list_synckey
e752 : a5eb             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
e754 : d00b             [ 3] 	bne df_rt_list_line_cont
e756 :                       df_rt_list_pause
e756 : 20bdc5           [ 6] 	jsr io_get_ch
e759 : c920             [ 2] 	cmp #' '						; Space = PAUSE
e75b : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
e75d : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e75f : f025             [ 3] 	beq df_rt_list_line_fin
e761 :                       df_rt_list_line_cont
e761 : a000             [ 2] 	ldy #0
e763 : 84be             [ 3] 	sty df_linoff
e765 : 2089e7           [ 6] 	jsr df_rt_list_all_line
e768 :                       df_rt_list_next_line
                             	; new line
e768 : 20a3c8           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
AS65 Assembler for R6502 [1.42].                                     Page  157
---------------------------------- bank1.s -----------------------------------

e76b : 18               [ 2] 	clc
e76c : a5e3             [ 3] 	lda df_tmpptra
e76e : a000             [ 2] 	ldy #0
e770 : 71e3             [ 5] 	adc (df_tmpptra),y
e772 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e776 : e6e4             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
e778 : ba               [ 2] 	tsx
e779 : 38               [ 2] 	sec
e77a : bd0101           [ 4] 	lda 0x101,x						; get prend lo from stack frame
e77d : e5e3             [ 3] 	sbc df_tmpptra
e77f : bd0201           [ 4] 	lda 0x102,x						; get prend hi from stack frame
e782 : e5e4             [ 3] 	sbc df_tmpptra+1
e784 : b0c1             [ 3] 	bcs df_rt_list_line
e786 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
e786 : 68               [ 4] 	pla
e787 : 68               [ 4] 	pla
e788 :                       df_rt_list_line_only_fin
e788 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
e789 :                       df_rt_list_all_line				; Start here to include nu
e789 : 20c3e8           [ 6] 	jsr df_rt_list_linnum
e78c :                       df_rt_list_line_only			; Start here for just the 
e78c : a003             [ 2] 	ldy #3
e78e : b1e3             [ 5] 	lda (df_tmpptra),y
e790 : 85d4             [ 3] 	sta df_lineidx
e792 : c8               [ 2] 	iny
e793 : 84be             [ 3] 	sty df_linoff
e795 :                       df_rt_list_decode
e795 : a4be             [ 3] 	ldy df_linoff
e797 : b1e3             [ 5] 	lda (df_tmpptra),y
e799 : 3010             [ 3] 	bmi df_rt_list_token
e79b : c920             [ 2] 	cmp #DFTK_ESCVAL
e79d : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
e79f : 20c0c5           [ 6] 	jsr io_put_ch
e7a2 : 4caee7           [ 3] 	jmp df_rt_list_nexttok
e7a5 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
e7a5 : 20c7e7           [ 6] 	jsr df_rt_list_decode_esc
e7a8 : 4caee7           [ 3] 	jmp df_rt_list_nexttok
e7ab :                       df_rt_list_token
e7ab : 20d4e8           [ 6] 	jsr df_rt_list_decode_token
e7ae :                       df_rt_list_nexttok
                             	; advance the line offset
e7ae : e6be             [ 5] 	inc df_linoff
e7b0 : a5be             [ 3] 	lda df_linoff
                             	; check if at end of line
e7b2 : a200             [ 2] 	ldx #0
e7b4 : c1e3             [ 6] 	cmp (df_tmpptra,x)
e7b6 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
e7b8 : c5d4             [ 3] 	cmp df_lineidx
e7ba : d0d9             [ 3] 	bne df_rt_list_decode
e7bc : a8               [ 2] 	tay
                             	; save the next statement offset
e7bd : b1e3             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  158
---------------------------------- bank1.s -----------------------------------

e7bf : 85d4             [ 3] 	sta df_lineidx
e7c1 : c8               [ 2] 	iny
e7c2 : 84be             [ 3] 	sty df_linoff
e7c4 : 4c95e7           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
e7c7 :                       df_rt_list_decode_esc
                             	; jump over esc byte
e7c7 : c8               [ 2] 	iny
e7c8 : 84be             [ 3] 	sty df_linoff
e7ca : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
e7cb : b1e3             [ 5] 	lda (df_tmpptra),y
e7cd : 85e5             [ 3] 	sta df_tmpptrb
e7cf : c8               [ 2] 	iny
e7d0 : b1e3             [ 5] 	lda (df_tmpptra),y
e7d2 : 85e6             [ 3] 	sta df_tmpptrb+1
e7d4 : 88               [ 2] 	dey				; Y is on byte after esc byte
e7d5 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
e7d6 : 0a               [ 2] 	asl a
e7d7 : aa               [ 2] 	tax
e7d8 : bd8cde           [ 4] 	lda df_rt_escjmp,x
e7db : 85e7             [ 3] 	sta df_tmpptrc
e7dd : bd8dde           [ 4] 	lda df_rt_escjmp+1,x
e7e0 : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
e7e2 : 6ce700           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
e7e5 :                       df_rt_lst_reserved
e7e5 : 60               [ 6] 	rts
                             
                             ; decode a byte char
e7e6 :                       df_rt_lst_chr
e7e6 : a927             [ 2] 	lda #0x27			; Single quote
e7e8 : 20c0c5           [ 6] 	jsr io_put_ch
e7eb : a5e5             [ 3] 	lda df_tmpptrb
e7ed : 20c0c5           [ 6] 	jsr io_put_ch
e7f0 : a927             [ 2] 	lda #0x27			; Single quote
e7f2 : 20c0c5           [ 6] 	jsr io_put_ch
e7f5 : c8               [ 2] 	iny
e7f6 : 84be             [ 3] 	sty df_linoff
e7f8 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
e7f9 :                       df_rt_lst_hex_pre
e7f9 : a930             [ 2] 	lda #'0'
e7fb : 20c0c5           [ 6] 	jsr io_put_ch
e7fe : a978             [ 2] 	lda #'x'
e800 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
e803 :                       df_rt_lst_bythex
e803 : 20f9e7           [ 6] 	jsr df_rt_lst_hex_pre
e806 :                       df_rt_lst_lo_hex
e806 : a5e5             [ 3] 	lda df_tmpptrb
e808 : 20d0c8           [ 6] 	jsr str_a_to_x
e80b : 20c0c5           [ 6] 	jsr io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page  159
---------------------------------- bank1.s -----------------------------------

e80e : 8a               [ 2] 	txa
e80f : 20c0c5           [ 6] 	jsr io_put_ch
e812 :                       df_rt_lst_const_done
e812 : c8               [ 2] 	iny
e813 : 84be             [ 3] 	sty df_linoff
e815 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
e816 :                       df_rt_lst_inthex
e816 : 20f9e7           [ 6] 	jsr df_rt_lst_hex_pre
e819 : a5e6             [ 3] 	lda df_tmpptrb+1
e81b : 20d0c8           [ 6] 	jsr str_a_to_x
e81e : 20c0c5           [ 6] 	jsr io_put_ch
e821 : 8a               [ 2] 	txa
e822 : 20c0c5           [ 6] 	jsr io_put_ch
e825 : 4c06e8           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
e828 :                       df_rt_lst_bytbin
e828 : a5e5             [ 3] 	lda df_tmpptrb
e82a : 85e6             [ 3] 	sta df_tmpptrb+1
e82c : a208             [ 2] 	ldx #8
e82e : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
e830 :                       df_rt_lst_intbin
e830 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
e832 :                       df_rt_lst_bin
e832 : a930             [ 2] 	lda #'0'
e834 : 20c0c5           [ 6] 	jsr io_put_ch
e837 : a962             [ 2] 	lda #'b'
e839 : 20c0c5           [ 6] 	jsr io_put_ch
e83c :                       df_rt_lst_bit
e83c : a930             [ 2] 	lda #'0'
e83e : 06e5             [ 5] 	asl df_tmpptrb
e840 : 26e6             [ 5] 	rol df_tmpptrb+1
e842 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
e844 :                       df_rt_lst_bit_skip0
e844 : 20c0c5           [ 6] 	jsr io_put_ch
e847 : ca               [ 2] 	dex
e848 : d0f2             [ 3] 	bne df_rt_lst_bit
e84a : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
e84c :                       df_rt_lst_intdec
e84c : a6e5             [ 3] 	ldx df_tmpptrb
e84e : a5e6             [ 3] 	lda df_tmpptrb+1
e850 : c8               [ 2] 	iny
e851 : 84be             [ 3] 	sty df_linoff
e853 : 18               [ 2] 	clc
e854 : 4c5acb           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
e857 :                       df_rt_lst_var
e857 :                       df_rt_lst_proc
                             	; jump over the address bytes
e857 : c8               [ 2] 	iny
e858 : 84be             [ 3] 	sty df_linoff
AS65 Assembler for R6502 [1.42].                                     Page  160
---------------------------------- bank1.s -----------------------------------

                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
e86a : a000             [ 2] 	ldy #0
e86c :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
e86c : a5e9             [ 3] 	lda df_tmpptrd
e86e : c5e5             [ 3] 	cmp df_tmpptrb
e870 : d006             [ 3] 	bne df_rt_list_vvtend
e872 : a5ea             [ 3] 	lda df_tmpptrd+1
e874 : c5e6             [ 3] 	cmp df_tmpptrb+1
e876 : f021             [ 3] 	beq df_rt_list_gotvvt
e878 :                       df_rt_list_vvtend
e878 : b1e7             [ 5] 	lda (df_tmpptrc),y
e87a : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
e882 : 4c78e8           [ 3] 	jmp df_rt_list_vvtend
e885 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
e88b : 18               [ 2] 	clc
e88c : a5e9             [ 3] 	lda df_tmpptrd
e88e : 6908             [ 2] 	adc #DFVVT_SZ
e890 : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e894 : e6ea             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
e896 : 4c6ce8           [ 3] 	jmp df_rt_list_findvvt
e899 :                       df_rt_list_gotvvt
e899 : b1e7             [ 5] 	lda (df_tmpptrc),y
e89b : f025             [ 3] 	beq df_rt_list_donvvt
e89d : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
e8a6 : 4c99e8           [ 3] 	jmp df_rt_list_gotvvt
                             
e8a9 :                       df_rt_lst_strlit
e8a9 : a922             [ 2] 	lda #0x22
e8ab : 20c0c5           [ 6] 	jsr io_put_ch
e8ae : a4be             [ 3] 	ldy df_linoff
e8b0 :                       df_rt_lst_strlitch
e8b0 : b1e3             [ 5] 	lda (df_tmpptra),y
e8b2 : f007             [ 3] 	beq df_rt_lst_strlitdon
e8b4 : 20c0c5           [ 6] 	jsr io_put_ch
e8b7 : c8               [ 2] 	iny
e8b8 : 4cb0e8           [ 3] 	jmp df_rt_lst_strlitch
e8bb :                       df_rt_lst_strlitdon
e8bb : a922             [ 2] 	lda #0x22
e8bd : 20c0c5           [ 6] 	jsr io_put_ch
e8c0 : 84be             [ 3] 	sty df_linoff
e8c2 :                       df_rt_list_donvvt
e8c2 : 60               [ 6] 	rts
                             
e8c3 :                       df_rt_list_linnum
AS65 Assembler for R6502 [1.42].                                     Page  161
---------------------------------- bank1.s -----------------------------------

e8c3 : a001             [ 2] 	ldy #1
e8c5 : b1e3             [ 5] 	lda (df_tmpptra),y
e8c7 : aa               [ 2] 	tax
e8c8 : c8               [ 2] 	iny
e8c9 : b1e3             [ 5] 	lda (df_tmpptra),y
e8cb : 18               [ 2] 	clc
e8cc : 205acb           [ 6] 	jsr print_a_to_d
e8cf : a920             [ 2] 	lda #0x20			; Always add a space after line num
e8d1 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
e8d4 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
e8d4 : c997             [ 2] 	cmp #DFRT_ASM
e8d6 : d003             [ 3] 	bne df_rt_list_decode_token_normal
e8d8 : 4c12e9           [ 3] 	jmp df_rt_asm_decode_token
e8db :                       df_rt_list_decode_token_normal
e8db : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
e8dd : c902             [ 2] 	cmp #2
e8df : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
e8e1 : 60               [ 6] 	rts
e8e2 :                       df_rt_list_do_decode_tkn
e8e2 : aa               [ 2] 	tax
e8e3 : a950             [ 2] 	lda #lo(df_tokensyms)
e8e5 : 85e5             [ 3] 	sta df_tmpptrb
e8e7 : a9d2             [ 2] 	lda #hi(df_tokensyms)
e8e9 : 85e6             [ 3] 	sta df_tmpptrb+1
e8eb :                       df_rt_list_find_sym
e8eb : 8a               [ 2] 	txa
e8ec : f012             [ 4] 	beq df_rt_list_got_sym
e8ee : a000             [ 2] 	ldy #0
e8f0 :                       df_rt_list_next_ch
e8f0 : b1e5             [ 5] 	lda (df_tmpptrb),y
e8f2 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
e8f9 : 68               [ 4] 	pla
e8fa : 10f4             [ 3] 	bpl df_rt_list_next_ch
e8fc :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
e8fc : ca               [ 2] 	dex
e8fd : 4cebe8           [ 3] 	jmp df_rt_list_find_sym
e900 :                       df_rt_list_got_sym
e900 : a1e5             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
e902 : 08               [ 3] 	php
e903 : 297f             [ 2] 	and #0x7f
e905 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e90e : 28               [ 4] 	plp
e90f : 10ef             [ 3] 	bpl df_rt_list_got_sym
e911 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
e912 :                       df_rt_asm_decode_token
e912 : e6be             [ 5] 	inc df_linoff		; Point to token after asm token
e914 : a4be             [ 3] 	ldy df_linoff
e916 : b1e3             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
e918 : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
e91a : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
AS65 Assembler for R6502 [1.42].                                     Page  162
---------------------------------- bank1.s -----------------------------------

e91c : 20c0c5           [ 6] 	jsr io_put_ch
e91f : b1e3             [ 5] 	lda (df_tmpptra),y	;Get asm token back
e921 : 4cc7e7           [ 3] 	jmp df_rt_list_decode_esc
e924 :                       df_rt_asm_decode_token_keyword
e924 : 297f             [ 2] 	and #0x7f			; Mask off MSB
e926 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
e927 : a962             [ 2] 	lda #lo(df_asm_tokensyms)
e929 : 85e5             [ 3] 	sta df_tmpptrb
e92b : a9f8             [ 2] 	lda #hi(df_asm_tokensyms)
e92d : 85e6             [ 3] 	sta df_tmpptrb+1
e92f :                       df_rt_list_find_asm_sym
e92f : 8a               [ 2] 	txa
e930 : f01b             [ 3] 	beq df_rt_list_got_asm_sym
e932 : a000             [ 2] 	ldy #0
e934 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
e93a : b1e5             [ 5] 	lda (df_tmpptrb),y
e93c : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
e93e : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
e940 : 38               [ 2] 	sec					; Skip offset and mode bytes
e941 : 65e5             [ 3] 	adc df_tmpptrb
e943 : 85e5             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
e947 : e6e6             [ 5] 	inc df_tmpptrb+1
e949 : ca               [ 2] 	dex					; One less symbol to skip over
e94a : 4c2fe9           [ 3] 	jmp df_rt_list_find_asm_sym
e94d :                       df_rt_list_got_asm_sym
e94d : a1e5             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
e94f : c920             [ 2] 	cmp #' '
e951 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
e953 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e95c : 4c4de9           [ 3] 	jmp df_rt_list_got_asm_sym
e95f :                       df_rt_asm_decode_token_done
e95f : 60               [ 6] 	rts
                             
                             
e960 :                       df_rt_doke
e960 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
e963 : a5e5             [ 3] 	lda df_tmpptrb
e965 : 92e3             [ 5] 	sta (df_tmpptra)
                             	; get high byte to doke
e967 : a5e6             [ 3] 	lda df_tmpptrb+1
e969 : a001             [ 2] 	ldy #1
                             	; poke hi byte
e96b : 91e3             [ 5] 	sta (df_tmpptra),y
e96d : 60               [ 6] 	rts
                             	
e96e :                       df_rt_poke
e96e : 20e9db           [ 6] 	jsr df_rt_parm_2ints
e971 : a5e5             [ 3] 	lda df_tmpptrb
e973 : 92e3             [ 5] 	sta (df_tmpptra)
                             ;	clc
e975 : 60               [ 6] 	rts
                             
e976 :                       df_rt_vpoke
e976 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
e979 : a6e3             [ 3] 	ldx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  163
---------------------------------- bank1.s -----------------------------------

e97b : a4e4             [ 3] 	ldy df_tmpptra+1
e97d : a5e5             [ 3] 	lda df_tmpptrb
e97f : 4c1ec4           [ 3] 	jmp _vdp_poke
                             ;	clc
                             ;	rts
                             
e982 :                       df_rt_nvpoke
e982 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
e985 : a6e3             [ 3] 	ldx df_tmpptra
e987 : a5e5             [ 3] 	lda df_tmpptrb
e989 : 4caec4           [ 3] 	jmp _rtc_nvwrite
                             ;	clc
e98c : 60               [ 6] 	rts
                             
e98d :                       df_rt_setvdp
e98d : 20e9db           [ 6] 	jsr df_rt_parm_2ints
e990 : a5e3             [ 3] 	lda df_tmpptra
e992 : a6e5             [ 3] 	ldx df_tmpptrb
e994 : 4c50c6           [ 3] 	jmp vdp_wr_reg
                             ;	clc
                             ;	rts
                             
e997 :                       df_rt_colour
e997 : 20f4db           [ 6] 	jsr df_rt_parm_3ints
                             	; colour is a combination of b and c parms
e99a : a5e5             [ 3] 	lda df_tmpptrb
e99c : 0a               [ 2] 	asl a
e99d : 0a               [ 2] 	asl a
e99e : 0a               [ 2] 	asl a
e99f : 0a               [ 2] 	asl a
e9a0 : 05e7             [ 3] 	ora df_tmpptrc
e9a2 : 48               [ 3] 	pha
e9a3 : a5e3             [ 3] 	lda df_tmpptra
e9a5 : c920             [ 2] 	cmp #32					; 32 = border colour
e9a7 : f00e             [ 3] 	beq df_rt_colour_border
                             	; else write to the colour table
                             	; first calculate the colour table address
e9a9 : 18               [ 2] 	clc
e9aa : 6519             [ 3] 	adc vdp_base+vdp_addr_col
e9ac : aa               [ 2] 	tax
e9ad : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
e9af : 6900             [ 2] 	adc #0
e9b1 : a8               [ 2] 	tay
e9b2 : 68               [ 4] 	pla
                             	; A = colour, YX = address
e9b3 : 208ac6           [ 6] 	jsr vdp_poke
e9b6 : 60               [ 6] 	rts
e9b7 :                       df_rt_colour_border
e9b7 : a907             [ 2] 	lda #7
e9b9 : fa               [ 4] 	plx
e9ba : 4c50c6           [ 3] 	jmp vdp_wr_reg
                             
e9bd :                       df_rt_sprite
e9bd : 2027dc           [ 6] 	jsr df_rt_parm_5ints
                             	; calculate the sprite number in vram
e9c0 : a5e3             [ 3] 	lda df_tmpptra
e9c2 : 0a               [ 2] 	asl a
e9c3 : 0a               [ 2] 	asl a
e9c4 : 18               [ 2] 	clc
e9c5 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e9c7 : aa               [ 2] 	tax
e9c8 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
AS65 Assembler for R6502 [1.42].                                     Page  164
---------------------------------- bank1.s -----------------------------------

e9ca : 6900             [ 2] 	adc #0
e9cc : 78               [ 2] 	sei				; Disable interrupts
e9cd : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e9d0 : a5e7             [ 3] 	lda df_tmpptrc
e9d2 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e9d5 : a5e5             [ 3] 	lda df_tmpptrb
e9d7 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the pattern name (tmpd)
e9da : a5e9             [ 3] 	lda df_tmpptrd
e9dc : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the colour / ec byte (tmpe)
e9df : a5eb             [ 3] 	lda df_tmpptre
e9e1 : 2085c6           [ 6] 	jsr vdp_wr_vram
e9e4 : 58               [ 2] 	cli				; Enable interrupts
e9e5 : 60               [ 6] 	rts
                             
                             
                             ; copy pattern array to sprite pattern vram
                             ; pattern array is a mim 4 element int
e9e6 :                       df_rt_spritepat
e9e6 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
                             	; save sprite number
e9e9 : 86e3             [ 3] 	stx df_tmpptra
e9eb : 64e4             [ 3] 	stz df_tmpptra+1
                             	; multiply by 8 to get pattern offset
e9ed : 06e3             [ 5] 	asl df_tmpptra
e9ef : 26e4             [ 5] 	rol df_tmpptra+1
e9f1 : 06e3             [ 5] 	asl df_tmpptra
e9f3 : 26e4             [ 5] 	rol df_tmpptra+1
e9f5 : 06e3             [ 5] 	asl df_tmpptra
e9f7 : 26e4             [ 5] 	rol df_tmpptra+1
                             	; add offset to sprite pattern base
                             	; and put in X,A
e9f9 : a5e3             [ 3] 	lda df_tmpptra
e9fb : 651f             [ 3] 	adc vdp_base+vdp_addr_spp
e9fd : aa               [ 2] 	tax
e9fe : a5e4             [ 3] 	lda df_tmpptra+1
ea00 : 6520             [ 3] 	adc vdp_base+vdp_addr_spp+1
ea02 : 78               [ 2] 	sei			; Disable interrupts
                             	; set vdp address
ea03 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; start from beginning of array
ea06 : a000             [ 2] 	ldy #0
ea08 :                       df_rt_spritepat_line
                             	; get the sprite patten from array
ea08 : b1e5             [ 5] 	lda (df_tmpptrb),y
                             	; and write to vdp
ea0a : 2085c6           [ 6] 	jsr vdp_wr_vram
ea0d : c8               [ 2] 	iny
                             	; do this for 8 bytes (4 elements)
ea0e : c008             [ 2] 	cpy #8
ea10 : d0f6             [ 3] 	bne df_rt_spritepat_line
ea12 : 58               [ 2] 	cli			; Enable interrupts
ea13 : 60               [ 6] 	rts
                             
ea14 :                       df_rt_spritepos
ea14 : 20f4db           [ 6] 	jsr df_rt_parm_3ints
                             	; calculate the sprite number in vram
ea17 : a5e3             [ 3] 	lda df_tmpptra
ea19 : 0a               [ 2] 	asl a
AS65 Assembler for R6502 [1.42].                                     Page  165
---------------------------------- bank1.s -----------------------------------

ea1a : 0a               [ 2] 	asl a
ea1b : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
ea1d : aa               [ 2] 	tax
ea1e : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
ea20 : 6900             [ 2] 	adc #0
ea22 : 78               [ 2] 	sei
ea23 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
ea26 : a5e7             [ 3] 	lda df_tmpptrc
ea28 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
ea2b : a5e5             [ 3] 	lda df_tmpptrb
ea2d : 2085c6           [ 6] 	jsr vdp_wr_vram
ea30 : 58               [ 2] 	cli
ea31 : 60               [ 6] 	rts
                             
                             ; common routine for col and nme variations
                             ; A contains offset in to sprite table to update
ea32 :                       df_rt_spriteattr
                             	; save A which contains the offset
ea32 : 48               [ 3] 	pha
ea33 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
                             	; calculate the sprite number in vram
ea36 : a5e3             [ 3] 	lda df_tmpptra
ea38 : 0a               [ 2] 	asl a
ea39 : 0a               [ 2] 	asl a
ea3a : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
ea3c : 85e3             [ 3] 	sta df_tmpptra
ea3e : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
ea40 : 6900             [ 2] 	adc #0
ea42 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; add offset and put in X,A to set VRAM address
ea44 : 68               [ 4] 	pla							; get offset from stack
ea45 : 65e3             [ 3] 	adc df_tmpptra
ea47 : aa               [ 2] 	tax
ea48 : a5e4             [ 3] 	lda df_tmpptra+1
ea4a : 6900             [ 2] 	adc #0
ea4c : a8               [ 2] 	tay
ea4d : a5e5             [ 3] 	lda df_tmpptrb
ea4f : 4c8ac6           [ 3] 	jmp vdp_poke
                             
ea52 :                       df_rt_spritecol
                             	; offset is 3 for colour byte
ea52 : a903             [ 2] 	lda #3
ea54 : 4c32ea           [ 3] 	jmp df_rt_spriteattr
                             
ea57 :                       df_rt_spritenme
                             	; offset is 2 for name byte
ea57 : a902             [ 2] 	lda #2
ea59 : 4c32ea           [ 3] 	jmp df_rt_spriteattr
                             
ea5c :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
ea5c : a5e3             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
ea5e : 3a               [ 2] 	dec a
ea5f : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
ea61 : 0a               [ 2] 	asl a
ea62 : aa               [ 2] 	tax
                             	; get low byte of period
AS65 Assembler for R6502 [1.42].                                     Page  166
---------------------------------- bank1.s -----------------------------------

ea63 : a4e5             [ 3] 	ldy df_tmpptrb
ea65 : 20eec3           [ 6] 	jsr _snd_set
                             	; increment reg number to high byte
ea68 : e8               [ 2] 	inx
                             	; get high byte of period
ea69 : a5e6             [ 3] 	lda df_tmpptrb+1
ea6b : 290f             [ 2] 	and #0x0f
ea6d : a8               [ 2] 	tay
                             	; set period
ea6e : 20eec3           [ 6] 	jsr _snd_set
                             	; get volume register index (8 = channel 1)
ea71 : 18               [ 2] 	clc
ea72 : a5e3             [ 3] 	lda df_tmpptra
ea74 : 2903             [ 2] 	and #3
ea76 : 6907             [ 2] 	adc #7
ea78 : aa               [ 2] 	tax
                             	; get volume
ea79 : a5e7             [ 3] 	lda df_tmpptrc
ea7b : 290f             [ 2] 	and #0x0f
ea7d : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
ea7f : 0910             [ 2] 	ora #0x10
ea81 :                       df_rt_sound_env_skip
ea81 : a8               [ 2] 	tay
ea82 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	rts
                             
                             ; sound chan,period,volume	
ea85 :                       df_rt_sound
ea85 : 20f4db           [ 6] 	jsr df_rt_parm_3ints
ea88 :                       df_rt_dosound
                             	; check which channel (0 = noise)
ea88 : a5e3             [ 3] 	lda df_tmpptra
ea8a : f003             [ 3] 	beq df_rt_sound_noise
ea8c : 4c5cea           [ 3] 	jmp df_rt_snd_common
ea8f :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
ea8f : a206             [ 2] 	ldx #6
ea91 : a5e5             [ 3] 	lda df_tmpptrb
ea93 : 291f             [ 2] 	and #0x1f
ea95 : a8               [ 2] 	tay
ea96 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             ; music chan,octave,note,volume
ea99 :                       df_rt_music
ea99 : 200bdc           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
ea9c : 18               [ 2] 	clc
ea9d : a5e5             [ 3] 	lda df_tmpptrb
ea9f : 65e5             [ 3] 	adc df_tmpptrb
eaa1 : 65e5             [ 3] 	adc df_tmpptrb
eaa3 : 0a               [ 2] 	asl a
eaa4 : 0a               [ 2] 	asl a
                             	; we have x12, now add note to get index
eaa5 : 65e7             [ 3] 	adc df_tmpptrc
eaa7 : 0a               [ 2] 	asl a
eaa8 : a8               [ 2] 	tay
                             	; get period A,X (hi/lo)
eaa9 : 20bec3           [ 6] 	jsr _snd_get_note
eaac : 86e5             [ 3] 	stx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  167
---------------------------------- bank1.s -----------------------------------

eaae : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
eab0 : a5e9             [ 3] 	lda df_tmpptrd
eab2 : 85e7             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
eab4 : 4c88ea           [ 3] 	jmp df_rt_dosound
                             	
                             	
                             ; play tonemask,noisemask,envelope,period
eab7 :                       df_rt_play
eab7 : 200bdc           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
eaba : a5e3             [ 3] 	lda df_tmpptra
eabc : 2907             [ 2] 	and #7
eabe : 85e3             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
eac0 : a5e5             [ 3] 	lda df_tmpptrb
eac2 : 2907             [ 2] 	and #7
eac4 : 0a               [ 2] 	asl a
eac5 : 0a               [ 2] 	asl a
eac6 : 0a               [ 2] 	asl a
eac7 : 05e3             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; keep top 2 bits 0 as these are port a and b in
eac9 : 493f             [ 2] 	eor #0x3f
eacb : a8               [ 2] 	tay
                             	; reg 7 is control register
eacc : a207             [ 2] 	ldx #7
eace : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 3 = envelope mode
ead1 : a5e7             [ 3] 	lda df_tmpptrc
ead3 : 290f             [ 2] 	and #0xf
ead5 : a8               [ 2] 	tay
                             	; 13 is envelope shape register
ead6 : a20d             [ 2] 	ldx #13
ead8 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
eadb : a20b             [ 2] 	ldx #11
                             	; get low
eadd : a4e9             [ 3] 	ldy df_tmpptrd
eadf : 20eec3           [ 6] 	jsr _snd_set
                             	; get high
eae2 : e8               [ 2] 	inx
eae3 : a4ea             [ 3] 	ldy df_tmpptrd+1
eae5 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             
                             ;* Binary save mem,hdr,addr,len,filename
eae8 :                       df_rt_bsave
                             	; Get mem type, 0=RAM, else VRAM
eae8 : 202ed9           [ 6] 	jsr df_rt_neval				; Get mem type
eaeb : 2032f2           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
eaee : e076             [ 2] 	cpx #'v'
eaf0 : d003             [ 3] 	bne df_rt_bsave_tryr
eaf2 : 18               [ 2] 	clc							; Clear C for vram
eaf3 : 8007             [ 3] 	bra df_rt_bsave_savep
eaf5 :                       df_rt_bsave_tryr
AS65 Assembler for R6502 [1.42].                                     Page  168
---------------------------------- bank1.s -----------------------------------

eaf5 : e072             [ 2] 	cpx #'r'
eaf7 : f002             [ 3] 	beq	 df_rt_bsave_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
eafb :                       df_rt_bsave_setR
eafb : 38               [ 2] 	sec							; Set C for ram
eafc :                       df_rt_bsave_savep
                             	; save C, clear=VRAM, set=RAM
eafc : 08               [ 3] 	php
                             
                             	; jump over comma
eafd : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
eaff : 202ed9           [ 6] 	jsr df_rt_neval				; Get header length
eb02 : 2032f2           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
eb05 : da               [ 3] 	phx
                             
                             	; jump over comma
eb06 : e6ca             [ 5] 	inc df_exeoff
eb08 : 202ed9           [ 6] 	jsr df_rt_neval				; Get address
eb0b : 2032f2           [ 6] 	jsr df_ost_popInt			; X,A = Address
eb0e : 48               [ 3] 	pha
eb0f : da               [ 3] 	phx
                             
                             	; jump over comma
eb10 : e6ca             [ 5] 	inc df_exeoff
eb12 : 202ed9           [ 6] 	jsr df_rt_neval				; Get length
eb15 : 2032f2           [ 6] 	jsr df_ost_popInt			; X,A = Length
eb18 : 48               [ 3] 	pha
eb19 : da               [ 3] 	phx
                             
                             	; jump over comma
eb1a : e6ca             [ 5] 	inc df_exeoff
                             	; Process filename
eb1c : 2087eb           [ 6] 	jsr df_rt_parse_file
eb1f : 20c6c5           [ 6] 	jsr io_open_write
eb22 : b05a             [ 3] 	bcs df_rt_file_errc3		; Error condition resets t
                             
                             	; On the stack, we have lenlo,lenhi,adlo,adhi,he
eb24 : ba               [ 2] 	tsx
eb25 : bc0501           [ 4] 	ldy 0x105,x					; Get header len
eb28 : f008             [ 3] 	beq df_rt_bsave_byte
eb2a : a900             [ 2] 	lda #0						; Zero filler
eb2c :                       df_rt_bsave_header
eb2c : 20c0c5           [ 6] 	jsr io_put_ch				; Write a byte to disk
eb2f : 88               [ 2] 	dey
eb30 : d0fa             [ 3] 	bne df_rt_bsave_header
eb32 :                       df_rt_bsave_byte
eb32 : ba               [ 2] 	tsx							; Restore SP to X
eb33 : bd0101           [ 4] 	lda 0x101,x					; low<>0 carry on
eb36 : d005             [ 3] 	bne df_rt_bsave_byte_do
eb38 : bd0201           [ 4] 	lda 0x102,x					; hi<>0 carry on
eb3b : f038             [ 3] 	beq df_rt_bsave_done		; else done
eb3d :                       df_rt_bsave_byte_do
eb3d : bd0601           [ 4] 	lda 0x106,x					; Get the C status
eb40 : 48               [ 3] 	pha
eb41 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
eb42 : bd0301           [ 4] 	lda 0x103,x					; Get low address
eb45 : bc0401           [ 4] 	ldy 0x104,x					; Get high address
eb48 : aa               [ 2] 	tax							; X,Y contain address
AS65 Assembler for R6502 [1.42].                                     Page  169
---------------------------------- bank1.s -----------------------------------

                             
eb49 : b006             [ 3] 	bcs df_rt_bsave_ram			; RAM or VRAM?
                             	; Read from VRAM
eb4b : 98               [ 2] 	tya							; A needs to contain high byte
eb4c : 2006c4           [ 6] 	jsr _vdp_peek				; Peek VRAM
eb4f : 8006             [ 3] 	bra df_rt_bsave_write
eb51 :                       df_rt_bsave_ram
                             	; Read from RAM
eb51 : 86e3             [ 3] 	stx df_tmpptra				; Save address
eb53 : 84e4             [ 3] 	sty df_tmpptra+1
eb55 : b2e3             [ 5] 	lda (df_tmpptra)			; Peek RAM
eb57 :                       df_rt_bsave_write
eb57 : 20c0c5           [ 6] 	jsr io_put_ch				; Write to disk
eb5a : ba               [ 2] 	tsx							; Get SP to X
eb5b : fe0301           [ 6] 	inc 0x103,x					; Increment low address
eb5e : d003             [ 3] 	bne df_rt_bsave_skiph
eb60 : fe0401           [ 6] 	inc 0x104,x					; Increment high address
eb63 :                       df_rt_bsave_skiph
eb63 : bc0101           [ 4] 	ldy 0x101,x					; Get low len byte
eb66 : f005             [ 3] 	beq df_rt_bsave_dech
eb68 : de0101           [ 6] 	dec 0x101,x					; A simple decrement
eb6b : 80c5             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eb6d :                       df_rt_bsave_dech
eb6d : de0101           [ 6] 	dec 0x101,x					; Decrement low in readiness
eb70 : de0201           [ 6] 	dec 0x102,x					; Decrement high
eb73 : 80bd             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eb75 :                       df_rt_bsave_done
                             	; Tidy the stack
eb75 : 68               [ 4] 	pla
eb76 : 68               [ 4] 	pla
eb77 : 68               [ 4] 	pla
eb78 : 68               [ 4] 	pla
eb79 : 68               [ 4] 	pla
eb7a : 68               [ 4] 	pla
eb7b : 4ca4eb           [ 3] 	jmp df_rt_file_cleanup		; Clean up FS
                             
eb7e :                       df_rt_file_errc3				; Stepping stone!!!
eb7e : b0fe             [ 3] 	bcs df_rt_file_errc3
                             
                             ;* common filename procesing routine
                             ;* 
eb80 :                       df_rt_init_filename
                             	; evaluate string X,A has the string pointer
eb80 : 202ed9           [ 6] 	jsr df_rt_neval
eb83 : 202af2           [ 6] 	jsr df_ost_popStr
                             
eb86 : 60               [ 6] 	rts
                             	
                             ;* common file parsing routine
eb87 :                       df_rt_parse_file
eb87 : a902             [ 2] 	lda #2					; Only works for SD card now
eb89 : 20a5c5           [ 6] 	jsr io_active_device
                             
                             	; now process filename, XA has pointer
eb8c : 2080eb           [ 6] 	jsr df_rt_init_filename
eb8f : 60               [ 6] 	rts
                             ; save "file"
eb90 :                       df_rt_save
eb90 : 2087eb           [ 6] 	jsr df_rt_parse_file
eb93 : 20c6c5           [ 6] 	jsr io_open_write
eb96 : b063             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
AS65 Assembler for R6502 [1.42].                                     Page  170
---------------------------------- bank1.s -----------------------------------

                             	; go and list the program in save mode
eb98 : a901             [ 2] 	lda #1
eb9a : 85eb             [ 3] 	sta df_tmpptre
eb9c : 2039e7           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
eb9f : a90d             [ 2] 	lda #UTF_CR
eba1 : 20c0c5           [ 6] 	jsr io_put_ch
eba4 :                       df_rt_file_cleanup
                             	; close the file
eba4 : 20c9c5           [ 6] 	jsr io_close
eba7 : 18               [ 2] 	clc
                             	; restore to default device io
eba8 : 4ca2c5           [ 3] 	jmp io_set_default
                             ;	clc
                             ;	rts
                             
                             ; load 'x',"file" where 0=serial, 1=SDCard
ebab :                       df_rt_load
ebab : 2087eb           [ 6] 	jsr df_rt_parse_file
ebae : 20c3c5           [ 6] 	jsr io_open_read
ebb1 : b048             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
                             
                             	; Initialise to line 10 in scratch, scratch+1
ebb3 : a90a             [ 2] 	lda #10
ebb5 : 8d0009           [ 4] 	sta scratch
ebb8 : 9c0109           [ 4] 	stz scratch+1
ebbb :                       df_rt_loadline
ebbb : 18               [ 2] 	clc
ebbc : 20fbd7           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
ebbf : 9013             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
ebc1 : 9c800a           [ 4] 	stz df_tokbuff			; Offset to next line
ebc4 : 9c810a           [ 4] 	stz df_tokbuff+1		; Clear line low
ebc7 : 9c820a           [ 4] 	stz df_tokbuff+2		; Clear line high
ebca : 64c1             [ 3] 	stz df_nxtstidx			; Clear next statement
ebcc : 64c0             [ 3] 	stz df_eolidx			; Clear end of line too
ebce : a901             [ 2] 	lda #1					; Set immediate mode to get a 'Ready'
ebd0 : 85a0             [ 3] 	sta df_immed			; But nothing to run
ebd2 : 80d0             [ 3] 	bra df_rt_file_cleanup	; Ok now can close and do
ebd4 :                       df_rt_ldtokenise
ebd4 : 201fd1           [ 6] 	jsr df_lexer_line		; Tokenise loaded string - ju
                             	; check if line number == 0
ebd7 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
ebda : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
ebdd : d017             [ 3] 	bne df_rt_storeline		; No, then store the line
                             	; Else insert current line number to buffer posi
                             	; also add 10 to the current line number
ebdf : 18               [ 2] 	clc
ebe0 : ad0009           [ 4] 	lda scratch				; Get line number lo
ebe3 : 8d810a           [ 4] 	sta df_tokbuff+1		; Use current line number
ebe6 : 690a             [ 2] 	adc #10					; But increment for next by 10
ebe8 : 8d0009           [ 4] 	sta scratch
ebeb : ad0109           [ 4] 	lda scratch+1			; Get line number hi
ebee : 8d820a           [ 4] 	sta df_tokbuff+2
ebf1 : 6900             [ 2] 	adc #0
ebf3 : 8d0109           [ 4] 	sta scratch+1
AS65 Assembler for R6502 [1.42].                                     Page  171
---------------------------------- bank1.s -----------------------------------

ebf6 :                       df_rt_storeline
ebf6 : 2072d8           [ 6] 	jsr df_pg_line_number	; Save the line in the rig
ebf9 : 80c0             [ 3] 	bra df_rt_loadline		; Continue with next until b
                             
                             ; Somwehere to go to raise a file error!
ebfb :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
ebfd :                       df_rt_del
ebfd : 2080eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec00 : 208ec0           [ 6] 	jsr _fs_delete_w			; Delete file
ec03 : 60               [ 6] 	rts
                             
ec04 :                       df_rt_chdir
ec04 : 2080eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec07 : 205ec0           [ 6] 	jsr _fs_chdir_w				; Try and change directory
ec0a : b0ef             [ 4] 	bcs df_rt_file_errc
ec0c : 60               [ 6] 	rts
                             
ec0d :                       df_rt_mkdir
ec0d : 2080eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec10 : 2076c0           [ 6] 	jsr _fs_mkdir_w				; Try and make directory
ec13 : b0e6             [ 4] 	bcs df_rt_file_errc
ec15 : 60               [ 6] 	rts
                             
                             ; bload MEM,HEAD,ADDR,FNAME
ec16 :                       df_rt_bload
                             	; Get mem type, 0=RAM, else VRAM
ec16 : 202ed9           [ 6] 	jsr df_rt_neval				; Get mem type
ec19 : 2032f2           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
ec1c : e076             [ 2] 	cpx #'v'
ec1e : d003             [ 3] 	bne df_rt_bload_tryr
ec20 : 18               [ 2] 	clc							; Clear C for vram
ec21 : 8007             [ 3] 	bra df_rt_bload_savep
ec23 :                       df_rt_bload_tryr
ec23 : e072             [ 2] 	cpx #'r'
ec25 : f002             [ 3] 	beq	 df_rt_bload_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
ec29 :                       df_rt_bload_setR
ec29 : 38               [ 2] 	sec							; Set C for ram
ec2a :                       df_rt_bload_savep
                             	; save C, clear=VRAM, set=RAM
ec2a : 08               [ 3] 	php
                             	; jump over comma
ec2b : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
ec2d : 202ed9           [ 6] 	jsr df_rt_neval				; Get header length
ec30 : 2032f2           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
ec33 : da               [ 3] 	phx
                             	; jump over comma
ec34 : e6ca             [ 5] 	inc df_exeoff
ec36 : 8012             [ 3] 	bra df_rt_bvload
ec38 :                       df_rt_font
ec38 : 18               [ 2] 	clc							; Set to video
ec39 : 08               [ 3] 	php
ec3a : a900             [ 2] 	lda #0						; No header
ec3c : 48               [ 3] 	pha
ec3d : a901             [ 2] 	lda #1						; 0x100 address - hi
AS65 Assembler for R6502 [1.42].                                     Page  172
---------------------------------- bank1.s -----------------------------------

ec3f : 48               [ 3] 	pha
ec40 : a900             [ 2] 	lda #0						; 0x100 address - lo
ec42 : 48               [ 3] 	pha
ec43 : 800d             [ 3] 	bra df_rt_bload_file
ec45 :                       df_rt_vload
ec45 : 18               [ 2] 	clc							; Hardcode for VRAM
ec46 : 08               [ 3] 	php
ec47 : a207             [ 2] 	ldx #7						; Hardcode header length
ec49 : da               [ 3] 	phx
ec4a :                       df_rt_bvload
ec4a : 202ed9           [ 6] 	jsr df_rt_neval				; Get address
ec4d : 2032f2           [ 6] 	jsr df_ost_popInt			; X,A = Address
ec50 : 48               [ 3] 	pha
ec51 : da               [ 3] 	phx
ec52 :                       df_rt_bload_file
                             	; jump over comma
ec52 : e6ca             [ 5] 	inc df_exeoff
ec54 : 2087eb           [ 6] 	jsr df_rt_parse_file
ec57 : 20c3c5           [ 6] 	jsr io_open_read
ec5a : b09f             [ 4] 	bcs df_rt_file_errc		; Error condition resets th
                             	; On the stack:
                             	; 101+x = adlo
                             	; 102+x = adhi
                             	; 103+x = header length
                             	; 104+x = mem type (c=0 means video)
ec5c : ba               [ 2] 	tsx
ec5d : bc0301           [ 4] 	ldy 0x103,x					; Get header
ec60 : f008             [ 3] 	beq df_rt_vload_byte
ec62 :                       df_rt_vload_header
ec62 : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ec65 : b03c             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ec67 : 88               [ 2] 	dey
ec68 : d0f8             [ 3] 	bne df_rt_vload_header
ec6a :                       df_rt_vload_byte
ec6a : ba               [ 2] 	tsx							; Restore SP to X
ec6b : bd0401           [ 4] 	lda 0x104,x					; Get the C status
ec6e : 48               [ 3] 	pha
ec6f : 28               [ 4] 	plp							; C unaffected by next ops
                             	
ec70 : bd0101           [ 4] 	lda 0x101,x					; Get low address
ec73 : bc0201           [ 4] 	ldy 0x102,x					; Get high address
ec76 : aa               [ 2] 	tax							; X,Y contain address
                             
ec77 : b014             [ 3] 	bcs df_rt_vload_ram			; RAM or VRAM?
                             	; Poke to VRAM but skip 0x1800-0x1fff
ec79 : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ec7c : b025             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ec7e : c018             [ 2] 	cpy #0x18					; If page # <= 0x17
ec80 : 9006             [ 3] 	bcc df_rt_vload_do_vpoke	; then vpoke
ec82 : c020             [ 2] 	cpy #0x20					; Or page >= 0x20
ec84 : b002             [ 3] 	bcs df_rt_vload_do_vpoke	; then vpoke
ec86 : 8010             [ 3] 	bra df_rt_vload_next
ec88 :                       df_rt_vload_do_vpoke
ec88 : 201ec4           [ 6] 	jsr _vdp_poke				; Write to VRAM
ec8b : 800b             [ 3] 	bra df_rt_vload_next
ec8d :                       df_rt_vload_ram
                             	; Poke to RAM
ec8d : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ec90 : b011             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ec92 : 86e3             [ 3] 	stx df_tmpptra				; Save address
ec94 : 84e4             [ 3] 	sty df_tmpptra+1
ec96 : 92e3             [ 5] 	sta (df_tmpptra)			; Poke byte to RAM
AS65 Assembler for R6502 [1.42].                                     Page  173
---------------------------------- bank1.s -----------------------------------

ec98 :                       df_rt_vload_next
ec98 : ba               [ 2] 	tsx							; Get SP to X
ec99 : fe0101           [ 6] 	inc 0x101,x					; Increment low address
ec9c : d003             [ 3] 	bne df_rt_vload_byte_skip
ec9e : fe0201           [ 6] 	inc 0x102,x					; Increment high address
eca1 :                       df_rt_vload_byte_skip
eca1 : 80c7             [ 3] 	bra df_rt_vload_byte		; Back for next video byte
eca3 :                       df_rt_vload_done
                             	; Tidy the stack
eca3 : 68               [ 4] 	pla
eca4 : 68               [ 4] 	pla
eca5 : 68               [ 4] 	pla
eca6 : 68               [ 4] 	pla
eca7 : 4ca4eb           [ 3] 	jmp df_rt_file_cleanup
                             
ecaa :                       df_rt_dir_string				; Name of a directory
ecaa : 3c4449523e202000      	db "<DIR>  ",0				; 7 chars + terminator
ecb2 :                       df_rt_dir
ecb2 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ecb5 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ecb7 : da               [ 3] 	phx
ecb8 :                       df_rt_dir_show_entry
ecb8 : 18               [ 2] 	clc							; Only looking for valid files
ecb9 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ecbc : b052             [ 4] 	bcs df_rt_dir_done			; If C then no more entries
ecbe : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ecc0 : a909             [ 2] 	lda #hi(scratch)
ecc2 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ecc5 : a20c             [ 2] 	ldx #12						; Put a zero terminator after filen
ecc7 : 9e0009           [ 5] 	stz scratch,x
ecca : a200             [ 2] 	ldx #lo(scratch)			; Print filename
eccc : a909             [ 2] 	lda #hi(scratch)
ecce : 200bc6           [ 6] 	jsr io_print_line			; Print name
ecd1 : 209bc8           [ 6] 	jsr utilPrintSPC			; Gap
ecd4 : a563             [ 3] 	lda fh_handle+FH_Attr		; Is it a directory?
ecd6 : c910             [ 2] 	cmp #0x10
ecd8 : d009             [ 3] 	bne df_rt_dir_size
ecda : a2aa             [ 2] 	ldx #lo(df_rt_dir_string)	; Set up pointer to na
ecdc : a9ec             [ 2] 	lda #hi(df_rt_dir_string)
ecde : 200bc6           [ 6] 	jsr io_print_line			; Print directory indicator
ece1 : 800d             [ 3] 	bra df_rt_dir_line
ece3 :                       df_rt_dir_size
ece3 : a223             [ 2] 	ldx #lo(scratch+35)			; Print size (already term
ece5 : a909             [ 2] 	lda #hi(scratch+35)
ece7 : 200bc6           [ 6] 	jsr io_print_line			; Print size - 5 chars left 
ecea : 209bc8           [ 6] 	jsr utilPrintSPC			; Gap
eced : 209bc8           [ 6] 	jsr utilPrintSPC			; Gap
                             	; Printed exactly 20 chars per size
ecf0 :                       df_rt_dir_line
ecf0 : a527             [ 3] 	lda gr_scrngeom+gr_screen_w	; If 32 col screen t
ecf2 : c920             [ 2] 	cmp #32
ecf4 : d003             [ 3] 	bne df_rt_dir_skip_crlf
ecf6 : 20a3c8           [ 6] 	jsr utilPrintCRLF
ecf9 :                       df_rt_dir_skip_crlf
ecf9 : fa               [ 4] 	plx							; Decrement file line counter
ecfa : ca               [ 2] 	dex
ecfb : d00d             [ 4] 	bne df_rt_dir_skip_pause
ecfd : a217             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ecff : a9ed             [ 2] 	lda #hi(df_rt_pausemsg)
ed01 : 200bc6           [ 6] 	jsr io_print_line
ed04 : 38               [ 2] 	sec
ed05 : 20bdc5           [ 6] 	jsr io_get_ch				; Wait for any key
AS65 Assembler for R6502 [1.42].                                     Page  174
---------------------------------- bank1.s -----------------------------------

ed08 : a214             [ 2] 	ldx #20						; Reset line counter
ed0a :                       df_rt_dir_skip_pause	
ed0a : da               [ 3] 	phx							; Save line counter
ed0b : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ed0e : 80a8             [ 4] 	bra df_rt_dir_show_entry	; Find another entry
ed10 :                       df_rt_dir_done
ed10 : fa               [ 4] 	plx							; Pop line counter
ed11 : a90d             [ 2] 	lda #UTF_CR					; Final CR
ed13 : 20c0c5           [ 6] 	jsr io_put_ch
ed16 : 60               [ 6] 	rts
ed17 :                       df_rt_pausemsg
ed17 : 0d507265737320..      	db UTF_CR,"Press any key for more..",UTF_CR,0
                             
ed32 :                       df_rt_dirl						; Long listing format
ed32 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ed35 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ed37 : da               [ 3] 	phx
ed38 :                       df_rt_dirl_show_entry
ed38 : 18               [ 2] 	clc							; Only looking for valid files
ed39 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ed3c : b025             [ 3] 	bcs df_rt_dirl_done			; If C then no more entrie
ed3e : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ed40 : a909             [ 2] 	lda #hi(scratch)
ed42 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ed45 : a200             [ 2] 	ldx #lo(scratch)			; Print the whole entry
ed47 : a909             [ 2] 	lda #hi(scratch)
ed49 : 200bc6           [ 6] 	jsr io_print_line
ed4c :                       df_rt_dirl_line
ed4c : fa               [ 4] 	plx							; Decrement file line counter
ed4d : ca               [ 2] 	dex
ed4e : d00d             [ 3] 	bne df_rt_dirl_skip_pause
ed50 : a217             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ed52 : a9ed             [ 2] 	lda #hi(df_rt_pausemsg)
ed54 : 200bc6           [ 6] 	jsr io_print_line
ed57 : 38               [ 2] 	sec
ed58 : 20bdc5           [ 6] 	jsr io_get_ch				; Wait for any key
ed5b : a214             [ 2] 	ldx #20						; Reset line counter
ed5d :                       df_rt_dirl_skip_pause	
ed5d : da               [ 3] 	phx							; Save line counter
ed5e : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ed61 : 80d5             [ 3] 	bra df_rt_dirl_show_entry	; Find another entry
ed63 :                       df_rt_dirl_done
ed63 : fa               [ 4] 	plx							; Pop line counter
ed64 : 20a3c8           [ 6] 	jsr utilPrintCRLF			; Final CR
ed67 : 60               [ 6] 	rts
                             	
                             ; reset %var
ed68 :                       df_rt_reset
                             	; now get lvar X,A from current statement
ed68 : 2077dd           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ed6b : 86e5             [ 3] 	stx df_tmpptrb
ed6d : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
ed6f : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of counter (2 bytes only) without di
ed71 : a510             [ 3] 	lda vdp_int_cnt
ed73 :                       df_rt_safe_read
ed73 : 92e5             [ 5] 	sta (df_tmpptrb)
ed75 : a511             [ 3] 	lda vdp_int_cnt+1
ed77 : 91e5             [ 5] 	sta (df_tmpptrb),y
AS65 Assembler for R6502 [1.42].                                     Page  175
---------------------------------- bank1.s -----------------------------------

                             	; If first byte has changed since reading it
                             	; then re-read (might happen due to VBI)
ed79 : a510             [ 3] 	lda vdp_int_cnt
ed7b : d2e5             [ 5] 	cmp (df_tmpptrb)
ed7d : d0f4             [ 3] 	bne df_rt_safe_read
ed7f : 60               [ 6] 	rts
                             
                             ; timedate var$
                             ; output to string as dd/mm/yy hh:mm:ss
ed80 :                       df_rt_datetime
                             	; now get lvar X,A from current statement
ed80 : 2077dd           [ 6] 	jsr df_rt_getlvar
                             	; and save it
ed83 : da               [ 3] 	phx
ed84 : 48               [ 3] 	pha
                             	; Point to 6 bytes of scratch
ed85 : a200             [ 2] 	ldx #lo(scratch)
ed87 : a909             [ 2] 	lda #hi(scratch)
                             	; Populate timedate as hmsdmy
ed89 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Get destination pointer back
ed8c : 68               [ 4] 	pla
ed8d : 85e4             [ 3] 	sta df_tmpptra+1
ed8f : 68               [ 4] 	pla
ed90 : 85e3             [ 3] 	sta df_tmpptra
                             	; Start at first char of destination
ed92 : a000             [ 2] 	ldy #0
                             	; Get days binary and convert to BCD
ed94 : ae0309           [ 4] 	ldx scratch+3
                             	; Separator character
ed97 : a92f             [ 2] 	lda #'/'
ed99 : 20c5ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get months binary and convert to BCD
ed9c : ae0409           [ 4] 	ldx scratch+4
                             	; Separator character
ed9f : a92f             [ 2] 	lda #'/'
eda1 : 20c5ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get years binary and convert to BCD
eda4 : ae0509           [ 4] 	ldx scratch+5
                             	; Separator character is space between date and 
eda7 : a920             [ 2] 	lda #' '
eda9 : 20c5ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get hours binary and convert to BCD
edac : ae0009           [ 4] 	ldx scratch+0
                             	; Separator character
edaf : a93a             [ 2] 	lda #':'
edb1 : 20c5ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get minutes binary and convert to BCD
edb4 : ae0109           [ 4] 	ldx scratch+1
                             	; Separator character
edb7 : a93a             [ 2] 	lda #':'
edb9 : 20c5ed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get seconds binary and convert to BCD
edbc : ae0209           [ 4] 	ldx scratch+2
                             	; Separator character is null to terminate strin
edbf : a900             [ 2] 	lda #0
edc1 : 20c5ed           [ 6] 	jsr df_rt_datetime_conv
edc4 : 60               [ 6] 	rts
edc5 :                       df_rt_datetime_conv
edc5 : 48               [ 3] 	pha
edc6 : a900             [ 2] 	lda #0
edc8 : 20d3ca           [ 6] 	jsr word_to_bcd
AS65 Assembler for R6502 [1.42].                                     Page  176
---------------------------------- bank1.s -----------------------------------

                             	; We only need least 2 BCD digits
edcb : a585             [ 3] 	lda num_a+0
                             	; put nibbles in A,X
edcd : 20d0c8           [ 6] 	jsr str_a_to_x
                             	; And save to destination
edd0 : 91e3             [ 5] 	sta (df_tmpptra),y
edd2 : c8               [ 2] 	iny
edd3 : 8a               [ 2] 	txa
edd4 : 91e3             [ 5] 	sta (df_tmpptra),y
edd6 : c8               [ 2] 	iny
edd7 : 68               [ 4] 	pla
edd8 : 91e3             [ 5] 	sta (df_tmpptra),y
edda : c8               [ 2] 	iny
eddb : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
eddc :                       df_rt_deek
eddc : 38               [ 2] 	sec
eddd : 8001             [ 3] 	bra df_rt_readbyte
eddf :                       df_rt_peek
eddf : 18               [ 2] 	clc
ede0 :                       df_rt_readbyte
ede0 : 08               [ 3] 	php
                             ;	inc df_exeoff
ede1 : 2028d9           [ 6] 	jsr df_rt_getnval
ede4 : 86e3             [ 3] 	stx df_tmpptra
ede6 : 85e4             [ 3] 	sta df_tmpptra+1
ede8 : b2e3             [ 5] 	lda (df_tmpptra)
edea : aa               [ 2] 	tax
edeb : a900             [ 2] 	lda #0
eded : 28               [ 4] 	plp
edee : 9005             [ 3] 	bcc df_rt_readbyte_skip
edf0 : 18               [ 2] 	clc
edf1 : a001             [ 2] 	ldy #1
edf3 : b1e3             [ 5] 	lda (df_tmpptra),y
edf5 :                       df_rt_readbyte_skip
edf5 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
edf8 :                       df_rt_vpeek
                             ;	inc df_exeoff
edf8 : 2028d9           [ 6] 	jsr df_rt_getnval
edfb : 2006c4           [ 6] 	jsr _vdp_peek
edfe : aa               [ 2] 	tax
edff : a900             [ 2] 	lda #0
ee01 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
ee04 :                       df_rt_nvpeek
                             ;	inc df_exeoff
ee04 : 2028d9           [ 6] 	jsr df_rt_getnval
ee07 : 2096c4           [ 6] 	jsr _rtc_nvread
ee0a : aa               [ 2] 	tax
ee0b : a900             [ 2] 	lda #0
ee0d : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
ee10 :                       df_rt_rnd
                             ;	inc df_exeoff
ee10 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
AS65 Assembler for R6502 [1.42].                                     Page  177
---------------------------------- bank1.s -----------------------------------

ee13 : e000             [ 2] 	cpx #0
ee15 : d017             [ 3] 	bne df_rt_rnd_set
ee17 : c900             [ 2] 	cmp #0
ee19 : d013             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
ee1b : a5da             [ 3] 	lda df_rnd+1
ee1d : 4a               [ 2] 	lsr a
ee1e : 26d9             [ 5] 	rol df_rnd
ee20 : 9002             [ 3] 	bcc df_rt_rnd_noeor
ee22 : 49b4             [ 2] 	eor #0xb4
ee24 :                       df_rt_rnd_noeor
ee24 : 85da             [ 3] 	sta df_rnd+1
ee26 : 45d9             [ 3] 	eor df_rnd
ee28 : aa               [ 2] 	tax
ee29 : a900             [ 2] 	lda #0
ee2b : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             	; else set the seed to that number and done
ee2e :                       df_rt_rnd_set
ee2e : 86d9             [ 3] 	stx df_rnd
ee30 : 85da             [ 3] 	sta df_rnd+1
ee32 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; Get joystick status	
ee35 :                       df_rt_stick
                             ;	inc df_exeoff
ee35 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ee38 : 86e3             [ 3] 	stx df_tmpptra
ee3a : 20d6c3           [ 6] 	jsr _snd_get_joy0
ee3d : 98               [ 2] 	tya
                             	; invert the bits so that 1=switch on
ee3e : 49ff             [ 2] 	eor #0xff
ee40 : 25e3             [ 3] 	and df_tmpptra
ee42 : aa               [ 2] 	tax
ee43 : a900             [ 2] 	lda #0
ee45 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; l = msbyte(x)
ee48 :                       df_rt_msbyte
                             ;	inc df_exeoff
ee48 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; only high byte is used
ee4b : aa               [ 2] 	tax
ee4c : a900             [ 2] 	lda #0
ee4e : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             	
                             ; l = lsbyte(x)
ee51 :                       df_rt_lsbyte
                             ;	inc df_exeoff
ee51 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ee54 : a900             [ 2] 	lda #0
ee56 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
ee59 :                       df_rt_mem
AS65 Assembler for R6502 [1.42].                                     Page  178
---------------------------------- bank1.s -----------------------------------

                             ;	inc df_exeoff
ee59 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ee5c : e001             [ 2] 	cpx #1
ee5e : f016             [ 3] 	beq df_rt_mem_prg
ee60 : e002             [ 2] 	cpx #2
ee62 : f024             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
ee64 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
ee74 : 8022             [ 3] 	bra df_rt_mem_calc
ee76 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
ee86 : 8010             [ 3] 	bra df_rt_mem_calc
ee88 :                       df_rt_mem_var
                             	_cpyZPWord df_vntend,df_tmpptra
                             
                             	_cpyZPWord df_vvtstrt,df_tmpptrb
                             
ee98 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
ee98 : 38               [ 2] 	sec
ee99 : a5e3             [ 3] 	lda df_tmpptra
ee9b : e5e5             [ 3] 	sbc df_tmpptrb
ee9d : aa               [ 2] 	tax
ee9e : a5e4             [ 3] 	lda df_tmpptra+1
eea0 : e5e6             [ 3] 	sbc df_tmpptrb+1
eea2 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; %k=key(%sync) %sync>=1 means sync
eea5 :                       df_rt_get					; get is alias for key
eea5 :                       df_rt_key
                             ;	inc df_exeoff
eea5 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=1 if x==0 else x>0 makes c=0
eea8 : e001             [ 2] 	cpx #1
eeaa : 20bdc5           [ 6] 	jsr io_get_ch
eead : 9003             [ 3] 	bcc df_rt_key_valid
                             	; zero out A
eeaf : a900             [ 2] 	lda #0
eeb1 : 18               [ 2] 	clc
eeb2 :                       df_rt_key_valid
eeb2 : aa               [ 2] 	tax
eeb3 : a900             [ 2] 	lda #0
eeb5 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             	
                             ; s = scrn(x,y)
eeb8 :                       df_rt_scrn
                             ;	inc df_exeoff
eeb8 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
eebb : a6e3             [ 3] 	ldx df_tmpptra
eebd : a4e5             [ 3] 	ldy df_tmpptrb
eebf : 208ec3           [ 6] 	jsr _gr_get
eec2 : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  179
---------------------------------- bank1.s -----------------------------------

eec3 : a900             [ 2] 	lda #0
eec5 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; p = pixel(x,y)
eec8 :                       df_rt_pixel
                             ;	inc df_exeoff
eec8 : 20e9db           [ 6] 	jsr df_rt_parm_2ints
eecb : a6e3             [ 3] 	ldx df_tmpptra
eecd : a4e5             [ 3] 	ldy df_tmpptrb
eecf : a900             [ 2] 	lda #0
eed1 : 4c0ff2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %e=elapsed(%var)
eed4 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
eed4 : 2077dd           [ 6] 	jsr df_rt_getlvar
eed7 : e6ca             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
eed9 : 86e5             [ 3] 	stx df_tmpptrb
eedb : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
eedd : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of vdp counter without disabling int
eedf :                       df_rt_elapsed_rd
eedf : a510             [ 3] 	lda vdp_int_cnt
eee1 : a611             [ 3] 	ldx vdp_int_cnt+1
eee3 : c510             [ 3] 	cmp vdp_int_cnt			; If low counter changed due t
eee5 : d0f8             [ 3] 	bne df_rt_elapsed_rd
eee7 : 38               [ 2] 	sec
eee8 : f2e5             [ 5] 	sbc (df_tmpptrb)
eeea : aa               [ 2] 	tax
eeeb : a511             [ 3] 	lda vdp_int_cnt+1
eeed : f1e5             [ 5] 	sbc (df_tmpptrb),y
eeef : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
eef2 :                       df_rt_call
                             ;	inc df_exeoff
eef2 : 200bdc           [ 6] 	jsr df_rt_parm_4ints
eef5 : a5e5             [ 3] 	lda df_tmpptrb				; load A
eef7 : a6e7             [ 3] 	ldx	df_tmpptrc				; load X
eef9 : a4e9             [ 3] 	ldy df_tmpptrd				; load Y
eefb : 2001ef           [ 6] 	jsr df_rt_calljsr
eefe :                       df_rt_push_int1
eefe : 4c12f2           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value	
ef01 :                       df_rt_calljsr
ef01 : 6ce300           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
                             
ef04 :                       df_rt_sgn
                             ;	inc df_exeoff
ef04 : 2028d9           [ 6] 	jsr df_rt_getnval
ef07 : 86e3             [ 3] 	stx df_tmpptra
ef09 : 05e3             [ 3] 	ora df_tmpptra
ef0b : f00f             [ 3] 	beq df_rt_sgn_z
ef0d : 2980             [ 2] 	and #0x80
ef0f : d006             [ 3] 	bne df_rt_sgn_n
ef11 : a201             [ 2] 	ldx #1
ef13 : a900             [ 2] 	lda #0
ef15 : f0e7             [ 4] 	beq df_rt_push_int1			; Always
ef17 :                       df_rt_sgn_n
ef17 : a2ff             [ 2] 	ldx #0xff
ef19 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  180
---------------------------------- bank1.s -----------------------------------

ef1a : d0e2             [ 4] 	bne df_rt_push_int1			; Always
ef1c :                       df_rt_sgn_z
ef1c : a200             [ 2] 	ldx #0
ef1e : 8a               [ 2] 	txa
ef1f : f0dd             [ 4] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
ef21 :                       df_rt_addr
                             	; get lvar X,A from current statement
ef21 : 2077dd           [ 6] 	jsr df_rt_getlvar
ef24 : e6ca             [ 5] 	inc df_exeoff
ef26 : 4c12f2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
ef29 :                       df_rt_strlen_common
ef29 : 86e3             [ 3] 	stx df_tmpptra
ef2b : 85e4             [ 3] 	sta df_tmpptra+1
ef2d : a0ff             [ 2] 	ldy #0xff
ef2f :                       df_rt_strlen_count
ef2f : c8               [ 2] 	iny
ef30 : b1e3             [ 5] 	lda (df_tmpptra),y
ef32 : d0fb             [ 3] 	bne df_rt_strlen_count
ef34 : 98               [ 2] 	tya
ef35 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
ef36 :                       df_rt_str_extract
                             	; source string
ef36 : 202af2           [ 6] 	jsr df_ost_popStr
ef39 : 86e3             [ 3] 	stx df_tmpptra
ef3b : 85e4             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
ef3d : a5bc             [ 3] 	lda df_sevalptr
ef3f : 85e5             [ 3] 	sta df_tmpptrb
ef41 : a5bd             [ 3] 	lda df_sevalptr+1
ef43 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; start pos
ef45 : a4e7             [ 3] 	ldy df_tmpptrc
ef47 : a200             [ 2] 	ldx #0
ef49 :                       df_rt_str_cpy_ch
ef49 : c4e9             [ 3] 	cpy df_tmpptrd
ef4b : f011             [ 3] 	beq df_str_src_end
ef4d : b1e3             [ 5] 	lda (df_tmpptra),y
ef4f : f00d             [ 3] 	beq df_str_src_end
ef51 : 81e5             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
ef59 : c8               [ 2] 	iny
ef5a : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
ef5e :                       df_str_src_end
ef5e : a900             [ 2] 	lda #0
ef60 : 81e5             [ 6] 	sta (df_tmpptrb,x)
AS65 Assembler for R6502 [1.42].                                     Page  181
---------------------------------- bank1.s -----------------------------------

ef62 : a6bc             [ 3] 	ldx df_sevalptr
ef64 : a5bd             [ 3] 	lda df_sevalptr+1
ef66 : 4c07f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
ef69 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
ef69 : 2028d9           [ 6] 	jsr df_rt_getnval
ef6c : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
ef6e : 8a               [ 2] 	txa
ef6f : 91bc             [ 5] 	sta (df_sevalptr),y
ef71 : c8               [ 2] 	iny
                             	; zero terminator
ef72 : a900             [ 2] 	lda #0
ef74 : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
ef76 : a6bc             [ 3] 	ldx df_sevalptr
ef78 : a5bd             [ 3] 	lda df_sevalptr+1
ef7a : 4c07f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
ef7d :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
ef7d : 2028d9           [ 6] 	jsr df_rt_getnval
ef80 : 85e3             [ 3] 	sta df_tmpptra	; Save the high byte
ef82 : 8a               [ 2] 	txa				; Convert low byte first
ef83 : 20d0c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
ef86 : 85e5             [ 3] 	sta df_tmpptrb
ef88 : 8a               [ 2] 	txa				; Push low digit of low byte from X
ef89 : 48               [ 3] 	pha
ef8a : a5e5             [ 3] 	lda df_tmpptrb	; Get A back from temp
ef8c : 48               [ 3] 	pha				; Push high digit of low byte
ef8d : a5e3             [ 3] 	lda df_tmpptra	; Get the high byte
ef8f : 20d0c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
ef92 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
ef94 : 91bc             [ 5] 	sta (df_sevalptr),y
ef96 : c8               [ 2] 	iny
                             	; hi/lo
ef97 : 8a               [ 2] 	txa
ef98 : 91bc             [ 5] 	sta (df_sevalptr),y
ef9a : c8               [ 2] 	iny
                             	; lo/hi
ef9b : 68               [ 4] 	pla
ef9c : 91bc             [ 5] 	sta (df_sevalptr),y
ef9e : c8               [ 2] 	iny
                             	; lo/lo
ef9f : 68               [ 4] 	pla
efa0 : 91bc             [ 5] 	sta (df_sevalptr),y
efa2 : c8               [ 2] 	iny
                             	; zero terminator
efa3 : a900             [ 2] 	lda #0
efa5 : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
efa7 : a6bc             [ 3] 	ldx df_sevalptr
efa9 : a5bd             [ 3] 	lda df_sevalptr+1
efab : 4c07f2           [ 3] 	jmp df_ost_pushStr
                             
AS65 Assembler for R6502 [1.42].                                     Page  182
---------------------------------- bank1.s -----------------------------------

                             ; $c = dec(x)
efae :                       df_rt_dec
efae : 2028d9           [ 6] 	jsr df_rt_getnval
efb1 : 18               [ 2] 	clc						; No leading zeros
efb2 : 2017cb           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
efb5 : a295             [ 2] 	ldx #lo(num_buf)
efb7 : a900             [ 2] 	lda #hi(num_buf)
efb9 : 4c07f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
efbc :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
efbc : 20ded9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
efbf : e6ca             [ 5] 	inc df_exeoff
efc1 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
efc4 : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
efc6 : a000             [ 2] 	ldy #0
efc8 : 84e7             [ 3] 	sty df_tmpptrc
efca : 4c36ef           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
efcd :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
efcd : 20ded9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
efd0 : e6ca             [ 5] 	inc df_exeoff
efd2 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
efd5 : 86e7             [ 3] 	stx df_tmpptrc
                             	; end pos = len
efd7 : a6bc             [ 3] 	ldx df_sevalptr
efd9 : a5bd             [ 3] 	lda df_sevalptr+1
efdb : 2029ef           [ 6] 	jsr df_rt_strlen_common
efde : 85e9             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
efe0 : 38               [ 2] 	sec
efe1 : e5e7             [ 3] 	sbc df_tmpptrc
efe3 : 85e7             [ 3] 	sta df_tmpptrc
efe5 : 4c36ef           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
efe8 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
efe8 : 20ded9           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
efeb : e6ca             [ 5] 	inc df_exeoff
efed : 202ed9           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
eff0 : e6ca             [ 5] 	inc df_exeoff
eff2 : 2028d9           [ 6] 	jsr df_rt_getnval
eff5 : 86e9             [ 3] 	stx df_tmpptrd
AS65 Assembler for R6502 [1.42].                                     Page  183
---------------------------------- bank1.s -----------------------------------

                             	; start position
eff7 : 2032f2           [ 6] 	jsr df_ost_popInt
effa : ca               [ 2] 	dex					; zero offset rather than 1
effb : 86e7             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
effd : 8a               [ 2] 	txa
effe : 18               [ 2] 	clc
efff : 65e9             [ 3] 	adc df_tmpptrd
f001 : 85e9             [ 3] 	sta df_tmpptrd
f003 : 4c36ef           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f006 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f006 : 20ded9           [ 6] 	jsr df_rt_seval
f009 : 202af2           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f00c : 2029ef           [ 6] 	jsr df_rt_strlen_common
f00f : 4c0ff2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f012 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f012 : 20ded9           [ 6] 	jsr df_rt_seval
f015 : 202af2           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f018 : 86e3             [ 3] 	stx df_tmpptra
f01a : 85e4             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f01c : a200             [ 2] 	ldx #0
f01e : a1e3             [ 6] 	lda (df_tmpptra,x)
f020 : 4c0ff2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f023 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f023 : 20ded9           [ 6] 	jsr df_rt_seval
f026 : 202af2           [ 6] 	jsr df_ost_popStr
f029 : a000             [ 2] 	ldy #0				; any numeric format
f02b : 201bc9           [ 6] 	jsr con_n_to_a		; result in num_a
f02e : b007             [ 3] 	bcs df_rt_val_err
f030 : a685             [ 3] 	ldx num_a
f032 : a586             [ 3] 	lda num_a+1
                             	; Save as an int
f034 : 4c12f2           [ 3] 	jmp df_ost_pushInt
f037 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f039 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
                             ;* ok=fcreate(filename)
f03b :                       df_rt_fcreate
f03b : 2087eb           [ 6] 	jsr df_rt_parse_file
f03e : 20c6c5           [ 6] 	jsr io_open_write
f041 :                       df_rt_fcreate_check
AS65 Assembler for R6502 [1.42].                                     Page  184
---------------------------------- bank1.s -----------------------------------

                             	; Assume -1 which is OK
f041 : a2ff             [ 2] 	ldx #-1
f043 : 9002             [ 3] 	bcc df_rt_fcreate_ok
                             	; Else 0 which is error
f045 : a200             [ 2] 	ldx #0
f047 :                       df_rt_fcreate_ok
f047 : 8a               [ 2] 	txa				; make A=X
                             	; Save as an int
f048 : 2012f2           [ 6] 	jsr df_ost_pushInt
                             	; Ensure we're back to the normal IO device
f04b : 4ca2c5           [ 3] 	jmp io_set_default
                             	
                             ;* ok=fopen(filename)
f04e :                       df_rt_fopen
f04e : 2087eb           [ 6] 	jsr df_rt_parse_file
f051 : 20c3c5           [ 6] 	jsr io_open_read
f054 : 80eb             [ 3] 	bra df_rt_fcreate_check
                             
                             ;* ok=fclose()
f056 :                       df_rt_fclose
f056 : a902             [ 2] 	lda #2					; Only works for SD card now
f058 : 20a5c5           [ 6] 	jsr io_active_device
f05b : 20c9c5           [ 6] 	jsr io_close
                             	; Ensure we're back to the normal IO device
f05e : 4ca2c5           [ 3] 	jmp io_set_default
                             
                             ;* device <num>
f061 :                       df_rt_device
f061 : 2028d9           [ 6] 	jsr df_rt_getnval
                             	; Force update of status register
f064 : 8a               [ 2] 	txa
f065 : 300a             [ 3] 	bmi df_rt_device_default
                             	; Stop dflat from trying to read inputs for Ctrl
f067 : a59e             [ 3] 	lda df_checkmsk
f069 : 0980             [ 2] 	ora #0x80
f06b : 859e             [ 3] 	sta df_checkmsk
f06d : 8a               [ 2] 	txa
                             	; A contains the device to activate
f06e : 4ca5c5           [ 3] 	jmp io_active_device
f071 :                       df_rt_device_default
                             	; Allow dflat to read inputs for Ctrl-C
f071 : a59e             [ 3] 	lda df_checkmsk
f073 : 297f             [ 2] 	and #0x7f
f075 : 859e             [ 3] 	sta df_checkmsk
f077 : 4ca2c5           [ 3] 	jmp io_set_default
                             
f07a :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
AS65 Assembler for R6502 [1.42].                                     Page  185
---------------------------------- bank1.s -----------------------------------

                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f07a :                       mod_sz_proc_s
                             
f07a :                       df_rt_proc_parmerr
f07a :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f07c :                       df_rt_proc
                             	; move past escape token
f07c : a4ca             [ 3] 	ldy df_exeoff
f07e : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f07f : b1c8             [ 5] 	lda (df_currlin),y
f081 : aa               [ 2] 	tax
f082 : c8               [ 2] 	iny
f083 : b1c8             [ 5] 	lda (df_currlin),y
f085 : c8               [ 2] 	iny
f086 : 84ca             [ 3] 	sty df_exeoff
f088 : 86d0             [ 3] 	stx df_procptr
f08a : 85d1             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f08c : a003             [ 2] 	ldy #DFVVT_DIM1
f08e : b1d0             [ 5] 	lda (df_procptr),y
f090 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f092 : 2017dd           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f095 : 8445             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f097 : a002             [ 2] 	ldy #DFVVT_HI
f099 : 91d0             [ 5] 	sta (df_procptr),y
f09b : a001             [ 2] 	ldy #DFVVT_LO
f09d : 8a               [ 2] 	txa
f09e : 91d0             [ 5] 	sta (df_procptr),y
f0a0 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f0a2 : a545             [ 3] 	lda tmp_d
f0a4 : 91d0             [ 5] 	sta (df_procptr),y
f0a6 :                       df_rt_proc_addr
                             	; move past first open bracket
f0a6 : e6ca             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f0a8 : a004             [ 2] 	ldy #DFVVT_DIM2
f0aa : b1d0             [ 5] 	lda (df_procptr),y	
f0ac : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f0ae : 48               [ 3] 	pha
                             
f0af : c6ca             [ 5] 	dec df_exeoff		; Pre-adjust
AS65 Assembler for R6502 [1.42].                                     Page  186
---------------------------------- bank1.s -----------------------------------

f0b1 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f0b1 : e6ca             [ 5] 	inc df_exeoff
                             	; if at end then error!
f0b3 : a4ca             [ 3] 	ldy df_exeoff
f0b5 : b1c8             [ 5] 	lda (df_currlin),y
f0b7 : c929             [ 2] 	cmp #')'
f0b9 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f0bb : 202ed9           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f0be : 68               [ 4] 	pla
                             	; decrement
f0bf : 38               [ 2] 	sec
f0c0 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f0c2 : 48               [ 3] 	pha
                             	; go back and do all required parms
f0c3 : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f0c5 :                       df_rt_proc_parm_done
f0c5 : 68               [ 4] 	pla
f0c6 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f0c6 : a4ca             [ 3] 	ldy df_exeoff
f0c8 : b1c8             [ 5] 	lda (df_currlin),y
f0ca : c929             [ 2] 	cmp #')'
f0cc : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f0ce : a6d0             [ 3] 	ldx df_procptr
f0d0 : a5d1             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f0d2 :                       df_rt_exec_proc
                             	; save slot address
f0d2 : 86e3             [ 3] 	stx df_tmpptra
f0d4 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f0d6 : a5c8             [ 3] 	lda df_currlin
f0d8 : 48               [ 3] 	pha
f0d9 : a5c9             [ 3] 	lda df_currlin+1
f0db : 48               [ 3] 	pha
f0dc : a5ca             [ 3] 	lda df_exeoff
f0de : 48               [ 3] 	pha
f0df : a5c1             [ 3] 	lda df_nxtstidx
f0e1 : 48               [ 3] 	pha
f0e2 : a5c2             [ 3] 	lda df_curstidx
f0e4 : 48               [ 3] 	pha
f0e5 : a5c0             [ 3] 	lda df_eolidx
f0e7 : 48               [ 3] 	pha
f0e8 : a5d5             [ 3] 	lda df_ifnest
f0ea : 48               [ 3] 	pha
                             
                             	; now initialise the data
f0eb : a001             [ 2] 	ldy #DFVVT_LO
f0ed : b1e3             [ 5] 	lda (df_tmpptra),y
f0ef : 85c8             [ 3] 	sta df_currlin
AS65 Assembler for R6502 [1.42].                                     Page  187
---------------------------------- bank1.s -----------------------------------

f0f1 : c8               [ 2] 	iny
f0f2 : b1e3             [ 5] 	lda (df_tmpptra),y
f0f4 : 85c9             [ 3] 	sta df_currlin+1
f0f6 : c8               [ 2] 	iny
f0f7 : b1e3             [ 5] 	lda (df_tmpptra),y
f0f9 : 85ca             [ 3] 	sta df_exeoff
f0fb : 85c2             [ 3] 	sta df_curstidx
f0fd : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f0ff : b1c8             [ 5] 	lda (df_currlin),y
f101 : 85c1             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f103 : 2059dc           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f106 : 68               [ 4] 	pla
f107 : 85d5             [ 3] 	sta df_ifnest
f109 : 68               [ 4] 	pla
f10a : 85c0             [ 3] 	sta df_eolidx
f10c : 68               [ 4] 	pla
f10d : 85c2             [ 3] 	sta df_curstidx
f10f : 68               [ 4] 	pla
f110 : 85c1             [ 3] 	sta df_nxtstidx
f112 : 68               [ 4] 	pla
f113 : 85ca             [ 3] 	sta df_exeoff
f115 : 68               [ 4] 	pla
f116 : 85c9             [ 3] 	sta df_currlin+1
f118 : 68               [ 4] 	pla
f119 : 85c8             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f11b : 60               [ 6] 	rts
                             
                             
f11c :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f11c : a6ca             [ 3] 	ldx df_exeoff
f11e : e8               [ 2] 	inx
f11f : e8               [ 2] 	inx
f120 : e8               [ 2] 	inx
f121 : 86ca             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f123 : a201             [ 2] 	ldx #1									; index in to scratch
f125 : 86ce             [ 3] 	stx df_procargs							; Proc args is the #args-1
f127 : a4ca             [ 3] 	ldy df_exeoff
f129 :                       df_rt_def_find_var
f129 : c8               [ 2] 	iny
f12a : b1c8             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f12c : c929             [ 2] 	cmp #')'
f12e : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f130 : c911             [ 2] 	cmp #DFTK_VAR
f132 : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f134 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f136 : d0f1             [ 3] 	bne df_rt_def_find_var
f138 :                       df_rt_def_got_varparm
                             	; set high bit
f138 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f13a : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  188
---------------------------------- bank1.s -----------------------------------

f13b :                       df_rt_def_got_var
f13b : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f13d : 9d0009           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f140 : c8               [ 2] 	iny
f141 : b1c8             [ 5] 	lda (df_currlin),y
f143 : 9d2009           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f146 : c8               [ 2] 	iny
f147 : b1c8             [ 5] 	lda (df_currlin),y
f149 : 9d4009           [ 5] 	sta scratch+64,x
f14c : e8               [ 2] 	inx
f14d : e6ce             [ 5] 	inc df_procargs
f14f : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f151 :                       df_rt_def_parm_done
                             	; save index that we got to
f151 : 84ca             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f153 : 86cd             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f155 : a900             [ 2] 	lda #0
f157 : 85cf             [ 3] 	sta df_procloc
f159 :                       df_rt_def_load_var
f159 : c6ce             [ 5] 	dec df_procargs
f15b : f02f             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f15d : c6cd             [ 5] 	dec df_procmode
f15f : a6cd             [ 3] 	ldx df_procmode
f161 : bd2009           [ 4] 	lda scratch+32,x
f164 : 85e3             [ 3] 	sta df_tmpptra
f166 : bd4009           [ 4] 	lda scratch+64,x
f169 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
f16b : bd0009           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f16e : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f170 : a6e3             [ 3] 	ldx df_tmpptra
f172 : a5e4             [ 3] 	lda df_tmpptra+1
f174 : 20c0f1           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f177 : e6cf             [ 5] 	inc df_procloc
f179 :                       df_rt_def_initialise_parm
                             	; load type
f179 : a000             [ 2] 	ldy #DFVVT_TYPE
f17b : b1e3             [ 5] 	lda (df_tmpptra),y
f17d : a8               [ 2] 	tay					; Put the type into Y
f17e : 2034f2           [ 6] 	jsr df_ost_popParmX	; Try to get this off the st
                             	; update the variable
f181 : a002             [ 2] 	ldy #DFVVT_HI
f183 : 91e3             [ 5] 	sta (df_tmpptra),y
f185 : 88               [ 2] 	dey
f186 : 8a               [ 2] 	txa
f187 : 91e3             [ 5] 	sta (df_tmpptra),y
                             
f189 : 4c59f1           [ 3] 	jmp df_rt_def_load_var
f18c :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
AS65 Assembler for R6502 [1.42].                                     Page  189
---------------------------------- bank1.s -----------------------------------

f18c : a5cf             [ 3] 	lda df_procloc
f18e : 20d4f1           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f191 : 18               [ 2] 	clc
f192 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f193 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f193 : 202ed9           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f196 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f196 : 20ddf1           [ 6] 	jsr df_rst_popByte
f199 : aa               [ 2] 	tax
f19a : f020             [ 3] 	beq df_rt_proc_unload_done
f19c :                       df_rt_proc_unloadvar
f19c : 8a               [ 2] 	txa
f19d : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f19e : 20faf1           [ 6] 	jsr df_rst_popWord
f1a1 : 86e5             [ 3] 	stx df_tmpptrb
f1a3 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f1a5 : 20faf1           [ 6] 	jsr df_rst_popWord
f1a8 : 86e3             [ 3] 	stx df_tmpptra
f1aa : 85e4             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f1ac : a001             [ 2] 	ldy #DFVVT_LO
f1ae : a5e5             [ 3] 	lda df_tmpptrb
f1b0 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f1b2 : c8               [ 2] 	iny
f1b3 : a5e6             [ 3] 	lda df_tmpptrb+1
f1b5 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f1b7 : 68               [ 4] 	pla
f1b8 : aa               [ 2] 	tax
f1b9 : ca               [ 2] 	dex
f1ba : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f1bc :                       df_rt_proc_unload_done
f1bc : 68               [ 4] 	pla					; Pull the return address off stack
f1bd : 68               [ 4] 	pla					; to get to the previous level
f1be : 18               [ 2] 	clc
f1bf : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f1c0 :                       df_rt_proc_local
                             	; save address
f1c0 : 86e3             [ 3] 	stx df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  190
---------------------------------- bank1.s -----------------------------------

f1c2 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f1c4 : 20ecf1           [ 6] 	jsr df_rst_pushWord
f1c7 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f1c7 : a001             [ 2] 	ldy #DFVVT_LO
f1c9 : b1e3             [ 5] 	lda (df_tmpptra),y
f1cb : aa               [ 2] 	tax
f1cc : c8               [ 2] 	iny
f1cd : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f1cf : 20ecf1           [ 6] 	jsr df_rst_pushWord
f1d2 : 18               [ 2] 	clc
f1d3 : 60               [ 6] 	rts
                             		
f1d4 :                       mod_sz_proc_e
                             
                             
f1d4 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f1d4 :                       df_rst_pushByte
AS65 Assembler for R6502 [1.42].                                     Page  191
---------------------------------- bank1.s -----------------------------------

f1d4 : a4b8             [ 3] 	ldy df_rtstop
f1d6 : 99000b           [ 5] 	sta df_rtstck,y
f1d9 : 88               [ 2] 	dey
f1da : 84b8             [ 3] 	sty df_rtstop
f1dc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f1dd :                       df_rst_popByte
f1dd : a4b8             [ 3] 	ldy df_rtstop
f1df : c8               [ 2] 	iny
f1e0 : b9000b           [ 4] 	lda df_rtstck,y
f1e3 : 84b8             [ 3] 	sty df_rtstop
f1e5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f1e6 :                       df_rst_peekByte
f1e6 : a4b8             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f1e8 : b9010b           [ 4] 	lda df_rtstck+1,y
f1eb : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f1ec :                       df_rst_pushWord
f1ec : a4b8             [ 3] 	ldy df_rtstop
f1ee : 99000b           [ 5] 	sta df_rtstck,y
f1f1 : 88               [ 2] 	dey
f1f2 : 8a               [ 2] 	txa
f1f3 : 99000b           [ 5] 	sta df_rtstck,y
f1f6 : 88               [ 2] 	dey
f1f7 : 84b8             [ 3] 	sty df_rtstop
f1f9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f1fa :                       df_rst_popWord
f1fa : a4b8             [ 3] 	ldy df_rtstop
f1fc : c8               [ 2] 	iny
f1fd : be000b           [ 4] 	ldx df_rtstck,y
f200 : c8               [ 2] 	iny
f201 : b9000b           [ 4] 	lda df_rtstck,y
f204 : 84b8             [ 3] 	sty df_rtstop
f206 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f207 :                       df_ost_pushStr
f207 : a004             [ 2] 	ldy #DFST_STR
AS65 Assembler for R6502 [1.42].                                     Page  192
---------------------------------- bank1.s -----------------------------------

f209 : d009             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f20b :                       df_ost_pushPtr
f20b : a0ff             [ 2] 	ldy #DFST_PTR
f20d : d005             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f20f :                       df_ost_pushIntA
f20f : aa               [ 2] 	tax
f210 : a900             [ 2] 	lda #0
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f212 :                       df_ost_pushInt
f212 : a003             [ 2] 	ldy #DFST_INT
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f214 :                       df_ost_pushParmX
f214 : 8445             [ 3] 	sty tmp_d		; Save Type
f216 : a4b9             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f218 : 99000b           [ 5] 	sta df_rtstck,y
f21b : c8               [ 2] 	iny
                             	; push low byte next (X)
f21c : 8a               [ 2] 	txa
f21d : 99000b           [ 5] 	sta df_rtstck,y
f220 : c8               [ 2] 	iny
f221 : a545             [ 3] 	lda tmp_d		; get Type
f223 : 99000b           [ 5] 	sta df_rtstck,y
f226 : c8               [ 2] 	iny
                             	; save new top of stack
f227 : 84b9             [ 3] 	sty df_parmtop
f229 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f22a :                       df_ost_popStr
f22a : a904             [ 2] 	lda #DFST_STR
f22c : d006             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f22e :                       df_ost_popPtr
AS65 Assembler for R6502 [1.42].                                     Page  193
---------------------------------- bank1.s -----------------------------------

f22e : a9ff             [ 2] 	lda #0xff
f230 : d002             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             		
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f232 :                       df_ost_popInt
f232 : a903             [ 2] 	lda #DFST_INT
                             	; ***FALL THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* A - type expected
                             ;****************************************
f234 :                       df_ost_popParmX
f234 : a4b9             [ 3] 	ldy df_parmtop
                             	; pull type first
f236 : 88               [ 2] 	dey
f237 : 39000b           [ 4] 	and df_rtstck,y
f23a : f00b             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f23c : 88               [ 2] 	dey
f23d : be000b           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f240 : 88               [ 2] 	dey
f241 : b9000b           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f244 : 84b9             [ 3] 	sty df_parmtop
f246 : 60               [ 6] 	rts
f247 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f249 :                       df_ost_peekType
f249 : a4b9             [ 3] 	ldy df_parmtop
f24b : b9ff0a           [ 4] 	lda df_rtstck-1,y
f24e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f24f :                       df_st_malloc
                             	; save A in Y
f24f : a8               [ 2] 	tay
                             	; save old starend
f250 : a5b7             [ 3] 	lda df_starend+1
f252 : 48               [ 3] 	pha
f253 : a5b6             [ 3] 	lda df_starend
f255 : 48               [ 3] 	pha
                             	; restore A from Y
f256 : 98               [ 2] 	tya
                             	; add X,A to starend
f257 : 48               [ 3] 	pha
f258 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  194
---------------------------------- bank1.s -----------------------------------

f259 : 18               [ 2] 	clc
f25a : 65b6             [ 3] 	adc df_starend
f25c : 85b6             [ 3] 	sta df_starend
f25e : 68               [ 4] 	pla
f25f : 65b7             [ 3] 	adc df_starend+1
f261 : 85b7             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f263 : 68               [ 4] 	pla
f264 : aa               [ 2] 	tax
f265 : 68               [ 4] 	pla
f266 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f267 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f267 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f269 : 8d670c           [ 4] 	sta df_memtop
f26c : a9c0             [ 2] 	lda #hi(DF_MEMTOP)
f26e : 8d680c           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f271 : 2074f2           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f274 :                       df_clear
                             	; Start of program space
f274 : a969             [ 2] 	lda #lo(DF_PROGSTART)
f276 : 85a7             [ 3] 	sta df_prgstrt
f278 : 85a9             [ 3] 	sta df_prgend
f27a : a90c             [ 2] 	lda #hi(DF_PROGSTART)
f27c : 85a8             [ 3] 	sta df_prgstrt+1
f27e : 85aa             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f280 : a900             [ 2] 	lda #0
f282 : a8               [ 2] 	tay
f283 : 91a7             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f285 : 85b3             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f287 : ad670c           [ 4] 	lda df_memtop
f28a : 85af             [ 3] 	sta df_vvtstrt
f28c : 85b1             [ 3] 	sta df_vvtend
f28e : ad680c           [ 4] 	lda df_memtop+1
f291 : 85b0             [ 3] 	sta df_vvtstrt+1
f293 : 85b2             [ 3] 	sta df_vvtend+1
                             
AS65 Assembler for R6502 [1.42].                                     Page  195
---------------------------------- bank1.s -----------------------------------

                             	; Variable name table
                             	; Grows down from mem top
f295 : a5af             [ 3] 	lda df_vvtstrt
f297 : 85ab             [ 3] 	sta df_vntstrt
f299 : 85ad             [ 3] 	sta df_vntend
f29b : a5b0             [ 3] 	lda df_vvtstrt+1
f29d : 85ac             [ 3] 	sta df_vntstrt+1
f29f : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f2a1 : a900             [ 2] 	lda #lo(scratch)
f2a3 : 85bc             [ 3] 	sta df_sevalptr
f2a5 : a909             [ 2] 	lda #hi(scratch)
f2a7 : 85bd             [ 3] 	sta df_sevalptr+1
                             
f2a9 : 60               [ 6] 	rts
                             
f2aa :                       mod_sz_dflat_e
                             
                             	include "dflat\error.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page  196
---------------------------------- bank1.s -----------------------------------

                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f2aa :                       df_tk_errortab
f2aa : 4f6b00                	db	"Ok", 0
f2ad : 53796e74617800        	db	"Syntax", 0
f2b4 : 5479706500            	db	"Type", 0
f2b9 : 52652d64696d00        	db	"Re-dim", 0
f2c0 : 4e6f2072657065..      	db	"No repeat", 0
f2ca : 4e6f206465666e00      	db	"No defn", 0
f2d2 : 5061726d00            	db	"Parm", 0
f2d7 : 456e64656400          	db	"Ended", 0
f2dd : 4e6f20656e6469..      	db	"No endif", 0
f2e6 : 4e6f20696600          	db	"No if", 0
f2ec : 4e6f20666f7200        	db	"No for", 0
f2f3 : 4e6f7420666f75..      	db	"Not found", 0
f2fd : 546f6f206c6f6e..      	db	"Too long", 0
f306 : 427265616b00          	db	"Break", 0
f30c : 4e6f206461746100      	db	"No data", 0
f314 : 4e6f207768696c..      	db	"No while", 0
f31d : 4e6f206c696e6500      	db	"No line", 0
f325 : 4e6f2072657475..      	db	"No return ", 0
f330 : 41626f7274656400      	db	"Aborted", 0
f338 : 426f756e647300        	db	"Bounds", 0
f33f : 4e6f206f726700        	db	"No org", 0
f346 : 00                    	db	0
                             
f347 :                       df_tk_error_inline
f347 : 20696e206c696e..      	db	" in line ", 0
f351 :                       df_tk_error_atpos
f351 : 20706f732000          	db	" pos ", 0
f357 :                       df_tk_error_error
f357 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  197
---------------------------------- bank1.s -----------------------------------

                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f35e :                       df_trap_error
                             	; set IO back to normal
f35e : 20a2c5           [ 6] 	jsr io_set_default
f361 : 58               [ 2] 	cli
                             
f362 : a9aa             [ 2] 	lda #lo(df_tk_errortab)
f364 : 85e3             [ 3] 	sta df_tmpptra
f366 : a9f2             [ 2] 	lda #hi(df_tk_errortab)
f368 : 85e4             [ 3] 	sta df_tmpptra+1
f36a : a69f             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f36c : f002             [ 3] 	beq df_trap_go_monitor
f36e : 1003             [ 3] 	bpl df_trap_normal
f370 :                       df_trap_go_monitor
f370 : 4ceff3           [ 3] 	jmp df_trap_monitor
f373 :                       df_trap_normal
f373 : a000             [ 2] 	ldy #0
f375 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f375 : b1e3             [ 5] 	lda (df_tmpptra),y
f377 : f076             [ 3] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f379 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f37f : b1e3             [ 5] 	lda (df_tmpptra),y
f381 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f389 : ca               [ 2] 	dex
f38a : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f38c : a6e3             [ 3] 	ldx df_tmpptra
f38e : a5e4             [ 3] 	lda df_tmpptra+1
f390 : 200bc6           [ 6] 	jsr io_print_line
f393 : a257             [ 2] 	ldx #lo(df_tk_error_error)
f395 : a9f3             [ 2] 	lda #hi(df_tk_error_error)
f397 : 200bc6           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f39a : a001             [ 2] 	ldy #DFTK_LINNUM
f39c : b1c8             [ 5] 	lda (df_currlin),y
f39e : aa               [ 2] 	tax
f39f : c8               [ 2] 	iny
f3a0 : b1c8             [ 5] 	lda (df_currlin),y
f3a2 : d004             [ 3] 	bne df_show_err_linnum
f3a4 : e000             [ 2] 	cpx #0x00
f3a6 : f011             [ 3] 	beq df_show_err_fin
f3a8 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f3b5 : 18               [ 2] 	clc
f3b6 : 205acb           [ 6] 	jsr print_a_to_d
f3b9 :                       df_show_err_fin
f3b9 : a4be             [ 3] 	ldy df_linoff
f3bb : f02b             [ 3] 	beq df_show_err_done
AS65 Assembler for R6502 [1.42].                                     Page  198
---------------------------------- bank1.s -----------------------------------

                             	_println df_tk_error_atpos
                             
f3ca : 98               [ 2] 	tya
f3cb : aa               [ 2] 	tax
f3cc : a900             [ 2] 	lda #0
f3ce : 18               [ 2] 	clc
f3cf : 205acb           [ 6] 	jsr print_a_to_d
f3d2 : 20a3c8           [ 6] 	jsr utilPrintCRLF
f3d5 : a000             [ 2] 	ldy #0
                             	; Show the error line with error pos inverse
f3d7 :                       def_show_err_line
f3d7 : b9000a           [ 4] 	lda df_linbuff,y
f3da : f00c             [ 3] 	beq df_show_err_done
f3dc : c4be             [ 3] 	cpy df_linoff
f3de : d002             [ 3] 	bne def_show_err_line_skip
f3e0 : 0980             [ 2] 	ora #0x80
f3e2 :                       def_show_err_line_skip
f3e2 : 20c0c5           [ 6] 	jsr io_put_ch
f3e5 : c8               [ 2] 	iny
f3e6 : d0ef             [ 3] 	bne def_show_err_line	; Always
f3e8 :                       df_show_err_done
f3e8 : 20a3c8           [ 6] 	jsr utilPrintCRLF
f3eb : 18               [ 2] 	clc
                             	; back to editor
f3ec : 4c0bd8           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f3ef :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f3f6 : a5a5             [ 3] 	lda df_brkpc+1
f3f8 : 20abc8           [ 6] 	jsr utilPrintA
f3fb : a5a4             [ 3] 	lda df_brkpc
f3fd : 20abc8           [ 6] 	jsr utilPrintA
f400 : 209bc8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f40a : a585             [ 3] 	lda num_a
f40c : 20abc8           [ 6] 	jsr utilPrintA
f40f : 209bc8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f419 : a586             [ 3] 	lda num_a+1
f41b : 20abc8           [ 6] 	jsr utilPrintA
f41e : 209bc8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f428 : a587             [ 3] 	lda num_a+2
f42a : 20abc8           [ 6] 	jsr utilPrintA
f42d : 20a3c8           [ 6] 	jsr utilPrintCRLF
                             
f430 : 208be0           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f433 : 4c0bd8           [ 3] 	jmp df_pg_dflat
AS65 Assembler for R6502 [1.42].                                     Page  199
---------------------------------- bank1.s -----------------------------------

                             
f436 :                       df_msg_pc
f436 : 50433a00              	db "PC:\x0"
f43a :                       df_msg_acc
f43a : 413a00                	db "A:\x0"
f43d :                       df_msg_xreg
f43d : 583a00                	db "X:\x0"
f440 :                       df_msg_yreg
f440 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat\asm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f443 :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat\asm.i"
                             ;*	BBC-128 BREADBOARD COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
AS65 Assembler for R6502 [1.42].                                     Page  200
---------------------------------- bank1.s -----------------------------------

0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat\tkasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f443 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f443 :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f443 : 2078f4           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f446 : b01d             [ 3] 	bcs df_tk_asm_label
f448 :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f448 : a997             [ 2] 	lda #DFRT_ASM
f44a : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f44d : a5c5             [ 3] 	lda df_symoff
f44f : 0980             [ 2] 	ora #0x80
f451 : 205dce           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f454 : a001             [ 2] 	ldy #1
AS65 Assembler for R6502 [1.42].                                     Page  201
---------------------------------- bank1.s -----------------------------------

f456 : b1c3             [ 5] 	lda (df_symtab),y
                             	; Directive?
f458 : c910             [ 2] 	cmp #AM_DIR
f45a : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f45c : a5c5             [ 3] 	lda df_symoff
f45e : 4ccff4           [ 3] 	jmp df_tk_asm_exec_parser
f461 :                       df_tk_asm_parse_command_err
f461 : 60               [ 6] 	rts
f462 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f462 : 4cd4f4           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f465 :                       df_tk_asm_label
                             	; labels must start with '.'
f465 : a92e             [ 2] 	lda #'.'
f467 : 20d0ce           [ 6] 	jsr df_tk_expect
f46a : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f46c : a997             [ 2] 	lda #DFRT_ASM
f46e : 205dce           [ 6] 	jsr df_tk_put_tok
f471 : e6be             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f473 : a900             [ 2] 	lda #0
f475 : 4c94cf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f478 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f478 : a962             [ 2] 	lda #lo(df_asm_tokensyms)
f47a : 85c3             [ 3] 	sta df_symtab
f47c : a9f8             [ 2] 	lda #hi(df_asm_tokensyms)
f47e : 85c4             [ 3] 	sta df_symtab+1
f480 : a900             [ 2] 	lda #0
f482 : 85c5             [ 3] 	sta df_symoff
f484 : a200             [ 2] 	ldx #0
f486 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f486 : a4be             [ 3] 	ldy df_linoff
f488 :                       df_tk_asm_checktokch
                             	; Get symtable char
f488 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f48a : c920             [ 2] 	cmp #' '
f48c : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f48e : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f491 : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
AS65 Assembler for R6502 [1.42].                                     Page  202
---------------------------------- bank1.s -----------------------------------

                             	_incZPWord df_symtab
                             
f499 : c8               [ 2] 	iny
f49a : 4c88f4           [ 3] 	jmp df_tk_asm_checktokch
f49d :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f49d : e6c5             [ 5] 	inc df_symoff
f49f :                       df_tk_asm_symnextentry
f49f : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f4a1 : c920             [ 2] 	cmp #' '
f4a3 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f4ab : 4c9ff4           [ 3] 	jmp df_tk_asm_symnextentry
f4ae :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f4ae : 38               [ 2] 	sec
f4af : 65c3             [ 3] 	adc df_symtab
f4b1 : 85c3             [ 3] 	sta df_symtab
f4b3 : a5c4             [ 3] 	lda df_symtab+1
f4b5 : 6900             [ 2] 	adc #0
f4b7 : 85c4             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f4b9 : a1c3             [ 6] 	lda (df_symtab,x)
f4bb : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f4bd : 85c5             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f4bf : 38               [ 2] 	sec
f4c0 : 60               [ 6] 	rts
f4c1 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f4c1 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f4c4 : 20a2ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f4c7 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f4c9 : 84be             [ 3] 	sty df_linoff
f4cb : a5c5             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f4cd :                       df_tk_asm_addr_mode_ok
f4cd : 18               [ 2] 	clc
f4ce : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
AS65 Assembler for R6502 [1.42].                                     Page  203
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
f4cf :                       df_tk_asm_exec_parser
f4cf : 0a               [ 2] 	asl a
f4d0 : aa               [ 2] 	tax
f4d1 : 7cd3fb           [ 6] 	jmp (df_tk_asm_tokenjmp,x)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f4d4 :                       df_tk_asm_addr_mode
f4d4 : 20aece           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f4d7 : c900             [ 2] 	cmp #0					;End of line?
f4d9 : f0f2             [ 3] 	beq df_tk_asm_addr_mode_ok
f4db : c93a             [ 2] 	cmp #':'				;End of statement?
f4dd : f0ee             [ 3] 	beq df_tk_asm_addr_mode_ok
f4df : a923             [ 2] 	lda #'#'				; Check for immediate
f4e1 : 20dece           [ 6] 	jsr df_tk_expect_tok
f4e4 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f4e6 : 4c0bf5           [ 3] 	jmp df_tk_imm		; Process immediate
f4e9 :                       df_tk_asm_addr_mode_1
f4e9 : a928             [ 2] 	lda #'('				; One of indirect modes?
f4eb : 20dece           [ 6] 	jsr df_tk_expect_tok
f4ee : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f4f0 : 4c10f5           [ 3] 	jmp df_tk_indirect
f4f3 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f4f3 : 20dbd0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f4f6 : a92c             [ 2] 	lda #','
f4f8 : 20dece           [ 6] 	jsr df_tk_expect_tok
f4fb : b0d0             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f4fd : a978             [ 2] 	lda #'x'
f4ff : 20dece           [ 6] 	jsr df_tk_expect_tok
f502 : 90c9             [ 4] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f504 : a979             [ 2] 	lda #'y'
f506 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
f509 : 18               [ 2] 	clc
f50a : 60               [ 6] 	rts
                             	
                             	
                             ;* Toeknise immediate addressing mode	
f50b :                       df_tk_imm
                             	; Just one expression expected
f50b : 20dbd0           [ 6] 	jsr df_tk_expression
f50e : 18               [ 2] 	clc
f50f : 60               [ 6] 	rts
                             	
                             ;* Tokenise indirect
f510 :                       df_tk_indirect
                             	; Just one expression expected
f510 : 20dbd0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f513 : a92c             [ 2] 	lda #','
f515 : 20dece           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
AS65 Assembler for R6502 [1.42].                                     Page  204
---------------------------------- bank1.s -----------------------------------

f518 : b00c             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f51a : a978             [ 2] 	lda #'x'
f51c : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
f51f : a929             [ 2] 	lda #')'
f521 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
f524 : 18               [ 2] 	clc
f525 : 60               [ 6] 	rts
                             	
f526 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f526 : a929             [ 2] 	lda #')'
f528 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f52b : a92c             [ 2] 	lda #','
f52d : 20dece           [ 6] 	jsr df_tk_expect_tok
f530 : b007             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f532 : a979             [ 2] 	lda #'y'
f534 : 20e9ce           [ 6] 	jsr df_tk_expect_tok_err
f537 : 18               [ 2] 	clc
f538 : 60               [ 6] 	rts
                             
f539 :                       df_tk_indirect_done
f539 : 18               [ 2] 	clc
f53a : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  205
---------------------------------- bank1.s -----------------------------------

                             
                             
                             
                             
                             
f53b :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat\rtasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f53b :                       mod_sz_rtasm_s
                             
f53b :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f53b : a4ca             [ 3] 	ldy df_exeoff
f53d : b1c8             [ 5] 	lda (df_currlin),y
f53f : 1009             [ 3] 	bpl df_rt_asm_do_label
f541 : 204ef5           [ 6] 	jsr df_rt_asm_command
f544 : 2046f7           [ 6] 	jsr df_rt_asm_printCR
f547 : 4c4df5           [ 3] 	jmp df_rt_asm_assemble_done
f54a :                       df_rt_asm_do_label
f54a : 2072f5           [ 6] 	jsr df_rt_asm_label
f54d :                       df_rt_asm_assemble_done
                             	; any clean up here
f54d : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f54e :                       df_rt_asm_command
f54e : 297f             [ 2] 	and #0x7f
f550 : 48               [ 3] 	pha
f551 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f552 : 2014f8           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f555 : a001             [ 2] 	ldy #1
f557 : b1c3             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f559 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f55b : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f55d : 4c3af6           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
AS65 Assembler for R6502 [1.42].                                     Page  206
---------------------------------- bank1.s -----------------------------------

f560 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f560 : 68               [ 4] 	pla
f561 : 0a               [ 2] 	asl a
f562 : aa               [ 2] 	tax
                             	; jump over directive code
f563 : e6ca             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f565 : bdddfb           [ 4] 	lda df_rt_asm_tokenjmp,x
f568 : 85e3             [ 3] 	sta df_tmpptra
f56a : bddefb           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f56d : 85e4             [ 3] 	sta df_tmpptra+1
f56f : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f572 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f572 : 20ece5           [ 6] 	jsr df_rt_generate_lvar
f575 : 86e0             [ 3] 	stx df_asmoprnd
f577 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f579 : a000             [ 2] 	ldy #0
f57b : a5db             [ 3] 	lda df_asmpc
f57d : 91e0             [ 5] 	sta (df_asmoprnd),y
f57f : a5dc             [ 3] 	lda df_asmpc+1
f581 : c8               [ 2] 	iny
f582 : 91e0             [ 5] 	sta (df_asmoprnd),y
f584 : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f585 :                       df_rt_asm_org
                             	; Get the address from expression
f585 : 20f1f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f588 : a5e0             [ 3] 	lda df_asmoprnd
f58a : 85db             [ 3] 	sta df_asmpc
f58c : a5e1             [ 3] 	lda df_asmoprnd+1
f58e : 85dc             [ 3] 	sta df_asmpc+1
f590 : a903             [ 2] 	lda #3
f592 : 85e2             [ 3] 	sta df_asmlen
f594 : 4c08f7           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f597 :                       df_rt_asm_opt
                             	; Get the value from expression
f597 : 20f1f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f59a : a5e0             [ 3] 	lda df_asmoprnd
f59c : 85dd             [ 3] 	sta df_asmopt
f59e : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
AS65 Assembler for R6502 [1.42].                                     Page  207
---------------------------------- bank1.s -----------------------------------

                             ; list and write bytes or words
                             ; string expansion also handled
f59f :                       df_rt_asm_db
f59f : a902             [ 2] 	lda #2
f5a1 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f5a2 :                       df_rt_asm_dw
f5a2 : a903             [ 2] 	lda #3
f5a4 :                       df_rt_asm_db_start
f5a4 : 85e2             [ 3] 	sta df_asmlen
f5a6 : 2008f7           [ 6] 	jsr df_rt_asm_printPC
f5a9 : 2023f7           [ 6] 	jsr df_rt_asm_printSPC
f5ac :                       df_rt_asm_data
f5ac : 202ed9           [ 6] 	jsr df_rt_neval		; Evaluate expression
                             	_df_ost_peekType	; What is the type
                             
f5b4 : 2904             [ 2] 	and #DFST_STR
f5b6 : d00d             [ 3] 	bne df_rt_asm_string; If string
f5b8 : 2032f2           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f5bb : 86e0             [ 3] 	stx df_asmoprnd		; store low value
f5bd : 85e1             [ 3] 	sta df_asmoprnd+1	; store high value
f5bf : 20edf5           [ 6] 	jsr df_rt_asm_data_write
f5c2 : 4ce2f5           [ 3] 	jmp df_rt_asm_data_next
f5c5 :                       df_rt_asm_string
f5c5 : 202ef2           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f5c8 : 86e3             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f5ca : 85e4             [ 3] 	sta df_tmpptra+1
f5cc :                       df_rt_asm_string_ch
f5cc : a000             [ 2] 	ldy #0
f5ce : b1e3             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f5d0 : f010             [ 3] 	beq df_rt_asm_data_next
f5d2 : 85e0             [ 3] 	sta df_asmoprnd		; Save as operand
f5d4 : 84e1             [ 3] 	sty df_asmoprnd+1	; High is always zero
f5d6 : 20edf5           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
f5df : 4cccf5           [ 3] 	jmp df_rt_asm_string_ch
f5e2 :                       df_rt_asm_data_next
f5e2 : 201ee6           [ 6] 	jsr df_rt_eos		; End?
f5e5 : b005             [ 3] 	bcs df_rt_asm_data_done
f5e7 : e6ca             [ 5] 	inc df_exeoff		; Jump over ','
f5e9 : 4cacf5           [ 3] 	jmp df_rt_asm_data
f5ec :                       df_rt_asm_data_done
f5ec : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
f5ed :                       df_rt_asm_data_write
f5ed : 202cf7           [ 6] 	jsr df_rt_asm_printOPR
f5f0 :                       df_rt_asm_data_write_skip1
f5f0 : a902             [ 2] 	lda #2
f5f2 : 25dd             [ 3] 	and df_asmopt
f5f4 : f017             [ 4] 	beq df_rt_asm_data_write_skip2
f5f6 : a5e0             [ 3] 	lda df_asmoprnd
f5f8 : a000             [ 2] 	ldy #0
f5fa : 91db             [ 5] 	sta (df_asmpc),y
f5fc : c8               [ 2] 	iny
f5fd : a902             [ 2] 	lda #2
f5ff : c5e2             [ 3] 	cmp df_asmlen
f601 : d006             [ 3] 	bne df_rt_asm_data_write_hi
f603 : a5e1             [ 3] 	lda df_asmoprnd+1
f605 : d014             [ 3] 	bne df_rt_asm_data_write_err
AS65 Assembler for R6502 [1.42].                                     Page  208
---------------------------------- bank1.s -----------------------------------

f607 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
f609 :                       df_rt_asm_data_write_hi
f609 : a5e1             [ 3] 	lda df_asmoprnd+1
f60b : 91db             [ 5] 	sta (df_asmpc),y
f60d :                       df_rt_asm_data_write_skip2
f60d : a4e2             [ 3] 	ldy df_asmlen
f60f : 88               [ 2] 	dey					; Add 1 less!
f610 : 98               [ 2] 	tya
f611 : 18               [ 2] 	clc
f612 : 65db             [ 3] 	adc df_asmpc
f614 : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f618 : e6dc             [ 5] 	inc df_asmpc+1
f61a : 60               [ 6] 	rts
f61b :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
f61d :                       df_rt_asm_ds
f61d : 2008f7           [ 6] 	jsr df_rt_asm_printPC
f620 : 2023f7           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
f623 : 20f1f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
f626 : 18               [ 2] 	clc
f627 : a5e0             [ 3] 	lda df_asmoprnd
f629 : 65db             [ 3] 	adc df_asmpc
f62b : 85db             [ 3] 	sta df_asmpc
f62d : a5e1             [ 3] 	lda df_asmoprnd+1
f62f : 65dc             [ 3] 	adc df_asmpc+1
f631 : 85dc             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
f633 : a903             [ 2] 	lda #3
f635 : 85e2             [ 3] 	sta df_asmlen
f637 : 4c2cf7           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
f63a :                       df_rt_asm_mnem
f63a : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
f63b : e6ca             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
f63d : 2074f7           [ 6] 	jsr df_rt_asm_addrmode
                             
f640 :                       df_rt_asm_mnem_try
f640 : a5de             [ 3] 	lda df_asmadmd					; With the addressing mode
f642 : 20fcf7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
f645 : c900             [ 2] 	cmp #AM_NONE					; Exists?
f647 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
f649 :                       df_rt_asm_check_alt
f649 : a6de             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
f64b : bd51f8           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
f64e : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
f650 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
f652 : 20fcf7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
f655 : c900             [ 2] 	cmp #AM_NONE					; this instruction
f657 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
f659 : c5de             [ 3] 	cmp df_asmadmd					; Same as the original?
f65b : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
AS65 Assembler for R6502 [1.42].                                     Page  209
---------------------------------- bank1.s -----------------------------------

f65d :                       df_rt_asm_mnem_chk
f65d : 85de             [ 3] 	sta df_asmadmd					; This is the final mode
f65f : aa               [ 2] 	tax								; Get the length
f660 : bd40f8           [ 4] 	lda df_asm_length,x
f663 : a6e1             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
f665 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
f667 : c903             [ 2] 	cmp #3							; Else must be len 3?
f669 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
f66b :                       df_rt_asm_mnem_done
f66b : a6de             [ 3] 	ldx df_asmadmd					; Get the final mode index
f66d : bd40f8           [ 4] 	lda df_asm_length,x				; Get the length
f670 : 85e2             [ 3] 	sta df_asmlen
f672 : a5de             [ 3] 	lda df_asmadmd					; Get the final mode
f674 : 20fcf7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
f677 : c8               [ 2] 	iny
f678 : b1c3             [ 5] 	lda (df_symtab),y
f67a : 85df             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
f67c : 4c81f6           [ 3] 	jmp df_rt_asm_encode
                             	
f67f :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
f681 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
f681 : a5de             [ 3] 	lda df_asmadmd
f683 : c90f             [ 2] 	cmp #AM_REL
f685 : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
f687 : a5e1             [ 3] 	lda df_asmoprnd+1
f689 : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
f68b : 38               [ 2] 	sec
f68c : a5e0             [ 3] 	lda df_asmoprnd
f68e : e902             [ 2] 	sbc #2
f690 : 85e0             [ 3] 	sta df_asmoprnd
f692 : a5e1             [ 3] 	lda df_asmoprnd+1
f694 : e900             [ 2] 	sbc #0
f696 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
f698 : 38               [ 2] 	sec
f699 : a5e0             [ 3] 	lda df_asmoprnd
f69b : e5db             [ 3] 	sbc df_asmpc
f69d : 85e0             [ 3] 	sta df_asmoprnd
f69f : a5e1             [ 3] 	lda df_asmoprnd+1
f6a1 : e5dc             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
f6a3 : a000             [ 2] 	ldy #0
f6a5 : 84e1             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
AS65 Assembler for R6502 [1.42].                                     Page  210
---------------------------------- bank1.s -----------------------------------

f6a7 : a8               [ 2] 	tay
f6a8 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
f6aa : c9ff             [ 2] 	cmp #0xff
f6ac : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
f6ae : a5e0             [ 3] 	lda df_asmoprnd
f6b0 : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
f6b2 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
f6b4 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
f6b4 : a5e0             [ 3] 	lda df_asmoprnd
f6b6 : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
f6b8 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
f6b8 : c6e1             [ 5] 	dec df_asmoprnd+1
f6ba :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
f6ba : a902             [ 2] 	lda #0x02
f6bc : 25dd             [ 3] 	and df_asmopt
f6be : f028             [ 3] 	beq df_rt_asm_encode_print
f6c0 : a000             [ 2] 	ldy #0
f6c2 : a5df             [ 3] 	lda df_asmopcde
f6c4 : 91db             [ 5] 	sta (df_asmpc),y
f6c6 : a5e2             [ 3] 	lda df_asmlen
f6c8 : c901             [ 2] 	cmp #1						; No operand
f6ca : f01c             [ 3] 	beq df_rt_asm_encode_print
f6cc : c903             [ 2] 	cmp #3						; Word operand
f6ce : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
f6d0 : a5e1             [ 3] 	lda df_asmoprnd+1
f6d2 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
f6d6 :                       df_rt_asm_encode_writebyte
f6d6 : c8               [ 2] 	iny 
f6d7 : a5e0             [ 3] 	lda df_asmoprnd
f6d9 : 91db             [ 5] 	sta (df_asmpc),y
f6db : 4ce8f6           [ 3] 	jmp df_rt_asm_encode_print
f6de :                       df_rt_asm_encode_writeword
f6de : c8               [ 2] 	iny 
f6df : a5e0             [ 3] 	lda df_asmoprnd
f6e1 : 91db             [ 5] 	sta (df_asmpc),y
f6e3 : c8               [ 2] 	iny 
f6e4 : a5e1             [ 3] 	lda df_asmoprnd+1
f6e6 : 91db             [ 5] 	sta (df_asmpc),y	
f6e8 :                       df_rt_asm_encode_print
f6e8 : 20f8f6           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
f6eb : 18               [ 2] 	clc
f6ec : a5db             [ 3] 	lda df_asmpc
f6ee : 65e2             [ 3] 	adc df_asmlen
f6f0 : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f6f4 : e6dc             [ 5] 	inc df_asmpc+1
f6f6 : 18               [ 2] 	clc
f6f7 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
AS65 Assembler for R6502 [1.42].                                     Page  211
---------------------------------- bank1.s -----------------------------------

                             ; depends on df_asmopt
f6f8 :                       df_rt_asm_print_mmen
f6f8 : 2008f7           [ 6] 	jsr df_rt_asm_printPC
f6fb : 2023f7           [ 6] 	jsr df_rt_asm_printSPC
f6fe : 2018f7           [ 6] 	jsr df_rt_asm_printOPC
f701 : 2023f7           [ 6] 	jsr df_rt_asm_printSPC
f704 : 202cf7           [ 6] 	jsr df_rt_asm_printOPR
f707 :                       df_rt_asm_print_rts			; Hopefully subs can get he
f707 : 60               [ 6] 	rts
                             
f708 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
f708 : a901             [ 2] 	lda #0x01
f70a : 25dd             [ 3] 	and df_asmopt
f70c : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
f70e : a5dc             [ 3] 	lda df_asmpc+1
f710 : 20abc8           [ 6] 	jsr utilPrintA
f713 : a5db             [ 3] 	lda df_asmpc
f715 : 4cabc8           [ 3] 	jmp utilPrintA
                             
f718 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
f718 : a901             [ 2] 	lda #0x01
f71a : 25dd             [ 3] 	and df_asmopt
f71c : f0e9             [ 3] 	beq df_rt_asm_print_rts
f71e : a5df             [ 3] 	lda df_asmopcde
f720 : 4cabc8           [ 3] 	jmp utilPrintA
                             
f723 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
f723 : a901             [ 2] 	lda #0x01
f725 : 25dd             [ 3] 	and df_asmopt
f727 : f0de             [ 3] 	beq df_rt_asm_print_rts
f729 : 4c9bc8           [ 3] 	jmp utilPrintSPC
                             	
f72c :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
f72c : a901             [ 2] 	lda #0x01
f72e : 25dd             [ 3] 	and df_asmopt
f730 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
f732 : a5e2             [ 3] 	lda df_asmlen				; check how may operand bytes
f734 : c901             [ 2] 	cmp #1						; if only opcode, done
f736 : f0cf             [ 3] 	beq df_rt_asm_print_rts	
f738 : c902             [ 2] 	cmp #2
f73a : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
f73c : a5e1             [ 3] 	lda df_asmoprnd+1
f73e : 20abc8           [ 6] 	jsr utilPrintA
f741 :                       df_rt_asm_printOPR_1
f741 : a5e0             [ 3] 	lda df_asmoprnd
f743 : 4cabc8           [ 3] 	jmp utilPrintA
                             
f746 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
f746 : a901             [ 2] 	lda #0x01
f748 : 25dd             [ 3] 	and df_asmopt
f74a : f0bb             [ 3] 	beq df_rt_asm_print_rts
f74c : 4ca3c8           [ 3] 	jmp utilPrintCRLF
                             
f74f :                       df_rt_asm_printCH
f74f : 8545             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
AS65 Assembler for R6502 [1.42].                                     Page  212
---------------------------------- bank1.s -----------------------------------

f751 : a901             [ 2] 	lda #0x01
f753 : 25dd             [ 3] 	and df_asmopt
f755 : f0b0             [ 3] 	beq df_rt_asm_print_rts
f757 : a545             [ 3] 	lda tmp_d
f759 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
f75c :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
f75c : a901             [ 2] 	lda #0x01
f75e : 25dd             [ 3] 	and df_asmopt
f760 : f0a5             [ 3] 	beq df_rt_asm_print_rts
f762 : a5ca             [ 3] 	lda df_exeoff
f764 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
f76d : 208ce7           [ 6] 	jsr df_rt_list_line_only
f770 : 68               [ 4] 	pla
f771 : 85ca             [ 3] 	sta df_exeoff
f773 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
f774 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
f774 : a900             [ 2] 	lda #AM_NONE
f776 : 85de             [ 3] 	sta df_asmadmd
                             	; zero out the operand
f778 : a900             [ 2] 	lda #0
f77a : 85e0             [ 3] 	sta df_asmoprnd
f77c : 85e1             [ 3] 	sta df_asmoprnd+1
f77e : 201ee6           [ 6] 	jsr df_rt_eos			; End of statement?
f781 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
f783 : 206add           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
f786 : c923             [ 2] 	cmp #'#'				; Immediate?
f788 : f034             [ 3] 	beq df_rt_asm_AM_IMM
f78a : c928             [ 2] 	cmp #'('				; Indirect something?
f78c : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
f78e : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
f790 :                       df_rt_asm_AM_IMP
f790 : a90d             [ 2] 	lda #AM_IMP
f792 : 85de             [ 3] 	sta df_asmadmd
f794 : 60               [ 6] 	rts
                             ; Process ABS or REL
f795 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
f795 : 20f1f7           [ 6] 	jsr df_rt_asm_get_operand
                             
f798 : 201ee6           [ 6] 	jsr df_rt_eos			; End of statement?
f79b : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
f79d : c8               [ 2] 	iny						; Jump over ","
f79e : b1c8             [ 5] 	lda (df_currlin),y		; Load X or Y
f7a0 : c8               [ 2] 	iny						; Jump over index reg
f7a1 : 85ca             [ 3] 	sta df_exeoff			; Save exe offset
f7a3 : c978             [ 2] 	cmp #'x'				; Indirect X?
AS65 Assembler for R6502 [1.42].                                     Page  213
---------------------------------- bank1.s -----------------------------------

f7a5 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
f7a7 :                       df_rt_asm_AM_ABSY
f7a7 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
f7a9 : 85de             [ 3] 	sta df_asmadmd
f7ab : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
f7ac :                       df_rt_asm_AM_ABS
f7ac : a001             [ 2] 	ldy #1					; Check first addressing mode
f7ae : b1c3             [ 5] 	lda (df_symtab),y
f7b0 : c90f             [ 2] 	cmp #AM_REL
f7b2 : f002             [ 3] 	beq df_rt_asm_AM_REL
f7b4 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
f7b6 :                       df_rt_asm_AM_REL
f7b6 : 85de             [ 3] 	sta df_asmadmd
f7b8 : 60               [ 6] 	rts
                             ; Process ABSX
f7b9 :                       df_rt_asm_AM_ABSX
f7b9 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
f7bb : 85de             [ 3] 	sta df_asmadmd
f7bd : 60               [ 6] 	rts
                             ; Process Immediate
f7be :                       df_rt_asm_AM_IMM
                             	; skip over #
f7be : e6ca             [ 5] 	inc df_exeoff
                             	; Get operand
f7c0 : 20f1f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
f7c3 : a90c             [ 2] 	lda #AM_IMM
f7c5 : 85de             [ 3] 	sta df_asmadmd
f7c7 : 60               [ 6] 	rts
                             ; Process indirect
f7c8 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
f7c8 : e6ca             [ 5] 	inc df_exeoff
                             	; Calculate the operand
f7ca : 20f1f7           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
f7cd : a4ca             [ 3] 	ldy df_exeoff
f7cf : b1c8             [ 5] 	lda (df_currlin),y
f7d1 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
f7d3 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
f7d5 : c8               [ 2] 	iny
f7d6 : c8               [ 2] 	iny
f7d7 : 84ca             [ 3] 	sty df_exeoff
f7d9 : a908             [ 2] 	lda #AM_ZPINDX
f7db : 85de             [ 3] 	sta df_asmadmd
f7dd : 60               [ 6] 	rts
                             ; Pure indirect mode found
f7de :                       df_rt_asm_AM_ZPINDORY
f7de : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
f7e0 : c8               [ 2] 	iny
f7e1 : 84ca             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
f7e3 : 201ee6           [ 6] 	jsr df_rt_eos			; End of statement?
f7e6 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
f7e8 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
f7ea : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  214
---------------------------------- bank1.s -----------------------------------

f7eb : c8               [ 2] 	iny
f7ec : 84ca             [ 3] 	sty df_exeoff
f7ee :                       df_rt_asm_AM_ZPIND
f7ee : 85de             [ 3] 	sta df_asmadmd
f7f0 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
f7f1 :                       df_rt_asm_get_operand
                             	; evaluate
f7f1 : 202ed9           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
f7f4 : 2032f2           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
f7f7 : 86e0             [ 3] 	stx df_asmoprnd
f7f9 : 85e1             [ 3] 	sta df_asmoprnd+1
f7fb : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
f7fc :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
f7fc : 8545             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
f7fe : a0ff             [ 2] 	ldy #0xff
f800 : a200             [ 2] 	ldx #0
f802 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
f802 : c8               [ 2] 	iny
f803 : c8               [ 2] 	iny
                             	; if current index > num entries then error
f804 : 98               [ 2] 	tya
f805 : 38               [ 2] 	sec
f806 : e1c3             [ 6] 	sbc (df_symtab,x)
f808 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
f80a : b1c3             [ 5] 	lda (df_symtab),y
f80c : c545             [ 3] 	cmp tmp_d
f80e : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
f810 : 60               [ 6] 	rts
f811 :                       df_rt_asm_find_addr_mode_err
f811 : a900             [ 2] 	lda #AM_NONE
f813 :                       df_rt_asm_skip_to_sym_done; Used by function belo
f813 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
f814 :                       df_rt_asm_skip_to_sym
f814 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
f815 : a962             [ 2] 	lda #lo(df_asm_tokensyms)
f817 : 85c3             [ 3] 	sta df_symtab
f819 : a9f8             [ 2] 	lda #hi(df_asm_tokensyms)
f81b : 85c4             [ 3] 	sta df_symtab+1
f81d : a900             [ 2] 	lda #0
f81f : 85c5             [ 3] 	sta df_symoff
f821 : a8               [ 2] 	tay
f822 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
AS65 Assembler for R6502 [1.42].                                     Page  215
---------------------------------- bank1.s -----------------------------------

f822 : b1c3             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
f824 : c920             [ 2] 	cmp #' '
f826 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
f82e : 4c22f8           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
f831 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
f831 : ca               [ 2] 	dex
f832 : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
f834 : 38               [ 2] 	sec
f835 : 65c3             [ 3] 	adc df_symtab
f837 : 85c3             [ 3] 	sta df_symtab
                             	_bcc 2
                             
f83b : e6c4             [ 5] 	inc df_symtab+1
f83d : 4c22f8           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
f840 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat\asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
f840 :                       df_asm_length
f840 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
f851 :                       df_asm_altaddrmode
f851 : 00                    	db AM_NONE		;AM_NONE	= 0
f852 : 00                    	db AM_NONE		;AM_ABS	 	= 1
f853 : 00                    	db AM_NONE		;AM_ABSX	= 2
f854 : 00                    	db AM_NONE		;AM_ABSY	= 3
f855 : 01                    	db AM_ABS		;AM_ZP		= 4
f856 : 02                    	db AM_ABSX		;AM_ZPX		= 5
f857 : 03                    	db AM_ABSY		;AM_ZPY		= 6
f858 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
f859 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
f85a : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
f85b : 00                    	db AM_NONE		;AM_ABSIND	= 10
f85c : 00                    	db AM_NONE		;AM_ABSINDX	= 11
f85d : 00                    	db AM_NONE		;AM_IMM		= 12
AS65 Assembler for R6502 [1.42].                                     Page  216
---------------------------------- bank1.s -----------------------------------

f85e : 00                    	db AM_NONE		;AM_ACC		= 13
f85f : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
f860 : 0f                    	db AM_REL		;AM_REL		= 15
f861 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
f862 :                       df_asm_tokensyms
                             	;* Start with directives
f862 : 2e6f726702            	db	".org",		1*2
f867 : 1000                  	db	AM_DIR,		0x00
f869 : 2e6f707402            	db	".opt",		1*2
f86e : 1000                  	db	AM_DIR,		0x00
f870 : 2e646202              	db	".db",		1*2
f874 : 1000                  	db	AM_DIR,		0x00
f876 : 2e647702              	db	".dw",		1*2
f87a : 1000                  	db	AM_DIR,		0x00
f87c : 2e647302              	db	".ds",		1*2
f880 : 1000                  	db	AM_DIR,		0x00	
                             
f882 : 61646312              	db	"adc",		9*2
f886 : 0c69                  	db	AM_IMM,		0x69
f888 : 0465                  	db	AM_ZP,		0x65
f88a : 0575                  	db	AM_ZPX,		0x75
f88c : 016d                  	db	AM_ABS,		0x6d
f88e : 027d                  	db	AM_ABSX,	0x7d
f890 : 0379                  	db	AM_ABSY,	0x79
f892 : 0861                  	db	AM_ZPINDX,	0x61
f894 : 0971                  	db	AM_ZPINDY,	0x71
f896 : 0772                  	db	AM_ZPIND,	0x72
                             	
f898 : 616e6412              	db	"and",		9*2
f89c : 0c29                  	db	AM_IMM,		0x29
f89e : 0425                  	db	AM_ZP,		0x25
f8a0 : 0535                  	db	AM_ZPX,		0x35
f8a2 : 012d                  	db	AM_ABS,		0x2d
f8a4 : 023d                  	db	AM_ABSX,	0x3d
f8a6 : 0339                  	db	AM_ABSY,	0x39
f8a8 : 0821                  	db	AM_ZPINDX,	0x21
f8aa : 0931                  	db	AM_ZPINDY,	0x31
f8ac : 0732                  	db	AM_ZPIND,	0x32
                             
f8ae : 636d7012              	db	"cmp",		9*2
f8b2 : 0cc9                  	db	AM_IMM,		0xc9
f8b4 : 04c5                  	db	AM_ZP,		0xc5
f8b6 : 05d5                  	db	AM_ZPX,		0xd5
f8b8 : 01cd                  	db	AM_ABS,		0xcd
f8ba : 02dd                  	db	AM_ABSX,	0xdd
f8bc : 03d9                  	db	AM_ABSY,	0xd9
f8be : 08c1                  	db	AM_ZPINDX,	0xc1
f8c0 : 09d1                  	db	AM_ZPINDY,	0xd1
f8c2 : 07d2                  	db	AM_ZPIND,	0xd2
                             
f8c4 : 656f7212              	db	"eor",		9*2
f8c8 : 0c49                  	db	AM_IMM,		0x49
f8ca : 0445                  	db	AM_ZP,		0x45
f8cc : 0555                  	db	AM_ZPX,		0x55
f8ce : 014d                  	db	AM_ABS,		0x4d
f8d0 : 025d                  	db	AM_ABSX,	0x5d
f8d2 : 0359                  	db	AM_ABSY,	0x59
f8d4 : 0841                  	db	AM_ZPINDX,	0x41
AS65 Assembler for R6502 [1.42].                                     Page  217
---------------------------------- bank1.s -----------------------------------

f8d6 : 0951                  	db	AM_ZPINDY,	0x51
f8d8 : 0752                  	db	AM_ZPIND,	0x52
                             
f8da : 6c646112              	db	"lda",		9*2
f8de : 0ca9                  	db	AM_IMM,		0xa9
f8e0 : 04a5                  	db	AM_ZP,		0xa5
f8e2 : 05b5                  	db	AM_ZPX,		0xb5
f8e4 : 01ad                  	db	AM_ABS,		0xad
f8e6 : 02bd                  	db	AM_ABSX,	0xbd
f8e8 : 03b9                  	db	AM_ABSY,	0xb9
f8ea : 08a1                  	db	AM_ZPINDX,	0xa1
f8ec : 09b1                  	db	AM_ZPINDY,	0xb1
f8ee : 07b2                  	db	AM_ZPIND,	0xb2
                             
f8f0 : 6f726112              	db	"ora",		9*2
f8f4 : 0c09                  	db	AM_IMM,		0x09
f8f6 : 0405                  	db	AM_ZP,		0x05
f8f8 : 0515                  	db	AM_ZPX,		0x15
f8fa : 010d                  	db	AM_ABS,		0x0d
f8fc : 021d                  	db	AM_ABSX,	0x1d
f8fe : 0319                  	db	AM_ABSY,	0x19
f900 : 0801                  	db	AM_ZPINDX,	0x01
f902 : 0911                  	db	AM_ZPINDY,	0x11
f904 : 0712                  	db	AM_ZPIND,	0x12
                             
f906 : 73626312              	db	"sbc",		9*2
f90a : 0ce9                  	db	AM_IMM,		0xe9
f90c : 04e5                  	db	AM_ZP,		0xe5
f90e : 05f5                  	db	AM_ZPX,		0xf5
f910 : 01ed                  	db	AM_ABS,		0xed
f912 : 02fd                  	db	AM_ABSX,	0xfd
f914 : 03f9                  	db	AM_ABSY,	0xf9
f916 : 08e1                  	db	AM_ZPINDX,	0xe1
f918 : 09f1                  	db	AM_ZPINDY,	0xf1
f91a : 07f2                  	db	AM_ZPIND,	0xf2
                             
f91c : 73746110              	db	"sta",		8*2
f920 : 0485                  	db	AM_ZP,		0x85
f922 : 0595                  	db	AM_ZPX,		0x95
f924 : 018d                  	db	AM_ABS,		0x8d
f926 : 029d                  	db	AM_ABSX,	0x9d
f928 : 0399                  	db	AM_ABSY,	0x99
f92a : 0881                  	db	AM_ZPINDX,	0x81
f92c : 0991                  	db	AM_ZPINDY,	0x91
f92e : 0792                  	db	AM_ZPIND,	0x92
                             
f930 : 61736c0a              	db	"asl",		5*2
f934 : 0d0a                  	db	AM_IMP,		0x0a
f936 : 0406                  	db	AM_ZP,		0x06
f938 : 0516                  	db	AM_ZPX,		0x16
f93a : 010e                  	db	AM_ABS,		0x0e
f93c : 021e                  	db	AM_ABSX,	0x1e
f93e : 6465630a              	db	"dec",		5*2
f942 : 0d3a                  	db	AM_IMP,		0x3a
f944 : 04c6                  	db	AM_ZP,		0xc6
f946 : 05d6                  	db	AM_ZPX,		0xd6
f948 : 01ce                  	db	AM_ABS,		0xce
f94a : 02de                  	db	AM_ABSX,	0xde
f94c : 696e630a              	db	"inc",		5*2
f950 : 0d1a                  	db	AM_IMP,		0x1a
f952 : 04e6                  	db	AM_ZP,		0xe6
f954 : 05f6                  	db	AM_ZPX,		0xf6
AS65 Assembler for R6502 [1.42].                                     Page  218
---------------------------------- bank1.s -----------------------------------

f956 : 01ee                  	db	AM_ABS,		0xee
f958 : 02fe                  	db	AM_ABSX,	0xfe
f95a : 6c73720a              	db	"lsr",		5*2
f95e : 0d4a                  	db	AM_IMP,		0x4a
f960 : 0446                  	db	AM_ZP,		0x46
f962 : 0556                  	db	AM_ZPX,		0x56
f964 : 014e                  	db	AM_ABS,		0x4e
f966 : 025e                  	db	AM_ABSX,	0x5e
f968 : 726f6c0a              	db	"rol",		5*2
f96c : 0d2a                  	db	AM_IMP,		0x2a
f96e : 0426                  	db	AM_ZP,		0x26
f970 : 0536                  	db	AM_ZPX,		0x36
f972 : 012e                  	db	AM_ABS,		0x2e
f974 : 023e                  	db	AM_ABSX,	0x3e
f976 : 726f720a              	db	"ror",		5*2
f97a : 0d6a                  	db	AM_IMP,		0x6a
f97c : 0466                  	db	AM_ZP,		0x66
f97e : 0576                  	db	AM_ZPX,		0x76
f980 : 016e                  	db	AM_ABS,		0x6e
f982 : 027e                  	db	AM_ABSX,	0x7e
                             
f984 : 6269740a              	db	"bit",		5*2
f988 : 0c89                  	db	AM_IMM,		0x89
f98a : 0424                  	db	AM_ZP,		0x24
f98c : 0534                  	db	AM_ZPX,		0x34
f98e : 012c                  	db	AM_ABS,		0x2c
f990 : 023c                  	db	AM_ABSX,	0x3c
                             	
f992 : 62726b02              	db	"brk",		1*2
f996 : 0d00                  	db	AM_IMP,		0x00
f998 : 73747002              	db	"stp",		1*2
f99c : 0ddb                  	db	AM_IMP,		0xdb
f99e : 77616902              	db	"wai",		1*2
f9a2 : 0dcb                  	db	AM_IMP,		0xcb
                             	
f9a4 : 636c6302              	db	"clc",		1*2
f9a8 : 0d18                  	db	AM_IMP,		0x18
f9aa : 636c6402              	db	"cld",		1*2
f9ae : 0dd8                  	db	AM_IMP,		0xd8
f9b0 : 636c6902              	db	"cli",		1*2
f9b4 : 0d58                  	db	AM_IMP,		0x58
f9b6 : 636c7602              	db	"clv",		1*2
f9ba : 0db8                  	db	AM_IMP,		0xb8
f9bc : 73656302              	db	"sec",		1*2
f9c0 : 0d38                  	db	AM_IMP,		0x38
f9c2 : 73656402              	db	"sed",		1*2
f9c6 : 0df8                  	db	AM_IMP,		0xf8
f9c8 : 73656902              	db	"sei",		1*2
f9cc : 0d78                  	db	AM_IMP,		0x78
                             	
f9ce : 63707806              	db	"cpx",		3*2
f9d2 : 0ce0                  	db	AM_IMM,		0xe0
f9d4 : 04e4                  	db	AM_ZP,		0xe4
f9d6 : 01ec                  	db	AM_ABS,		0xec
f9d8 : 63707906              	db	"cpy",		3*2
f9dc : 0cc0                  	db	AM_IMM,		0xc0
f9de : 04c4                  	db	AM_ZP,		0xc4
f9e0 : 01cc                  	db	AM_ABS,		0xcc
f9e2 : 64657802              	db	"dex",		1*2
f9e6 : 0dca                  	db	AM_IMP,		0xca
f9e8 : 64657902              	db	"dey",		1*2
f9ec : 0d88                  	db	AM_IMP,		0x88
AS65 Assembler for R6502 [1.42].                                     Page  219
---------------------------------- bank1.s -----------------------------------

f9ee : 696e7802              	db	"inx",		1*2
f9f2 : 0de8                  	db	AM_IMP,		0xe8
f9f4 : 696e7902              	db	"iny",		1*2
f9f8 : 0dc8                  	db	AM_IMP,		0xc8
f9fa : 6c64780a              	db	"ldx",		5*2
f9fe : 0ca2                  	db	AM_IMM,		0xa2
fa00 : 04a6                  	db	AM_ZP,		0xa6
fa02 : 06b6                  	db	AM_ZPY,		0xb6
fa04 : 01ae                  	db	AM_ABS,		0xae
fa06 : 03be                  	db	AM_ABSY,	0xbe
fa08 : 6c64790a              	db	"ldy",		5*2
fa0c : 0ca0                  	db	AM_IMM,		0xa0
fa0e : 04a4                  	db	AM_ZP,		0xa4
fa10 : 05b4                  	db	AM_ZPX,		0xb4
fa12 : 01ac                  	db	AM_ABS,		0xac
fa14 : 02bc                  	db	AM_ABSX,	0xbc
fa16 : 73747806              	db	"stx",		3*2
fa1a : 0486                  	db	AM_ZP,		0x86
fa1c : 0696                  	db	AM_ZPY,		0x96
fa1e : 018e                  	db	AM_ABS,		0x8e
fa20 : 73747906              	db	"sty",		3*2
fa24 : 0484                  	db	AM_ZP,		0x84
fa26 : 0594                  	db	AM_ZPX,		0x94
fa28 : 018c                  	db	AM_ABS,		0x8c
fa2a : 73747a08              	db	"stz",		4*2
fa2e : 0464                  	db	AM_ZP,		0x64
fa30 : 0574                  	db	AM_ZPX,		0x74
fa32 : 019c                  	db	AM_ABS,		0x9c
fa34 : 029e                  	db	AM_ABSX,	0x9e
                             	
                             
fa36 : 62636302              	db	"bcc",		1*2
fa3a : 0f90                  	db	AM_REL,		0x90
fa3c : 62637302              	db	"bcs",		1*2
fa40 : 0fb0                  	db	AM_REL,		0xb0
fa42 : 62657102              	db	"beq",		1*2
fa46 : 0ff0                  	db	AM_REL,		0xf0
fa48 : 626d6902              	db	"bmi",		1*2
fa4c : 0f30                  	db	AM_REL,		0x30
fa4e : 626e6502              	db	"bne",		1*2
fa52 : 0fd0                  	db	AM_REL,		0xd0
fa54 : 62706c02              	db	"bpl",		1*2
fa58 : 0f10                  	db	AM_REL,		0x10
fa5a : 62726102              	db	"bra",		1*2
fa5e : 0f80                  	db	AM_REL,		0x80
fa60 : 62766302              	db	"bvc",		1*2
fa64 : 0f50                  	db	AM_REL,		0x50
fa66 : 62767302              	db	"bvs",		1*2
fa6a : 0f70                  	db	AM_REL,		0x70
fa6c : 6a6d7006              	db	"jmp",		3*2
fa70 : 014c                  	db	AM_ABS,		0x4c
fa72 : 0a6c                  	db	AM_ABSIND,	0x6c
fa74 : 0b7c                  	db	AM_ABSINDX,	0x7c
fa76 : 6a737202              	db	"jsr",		1*2
fa7a : 0120                  	db	AM_ABS,		0x20
                             	
fa7c : 6e6f7002              	db	"nop",		1*2
fa80 : 0dea                  	db	AM_IMP,		0xea
fa82 : 70686102              	db	"pha",		1*2
fa86 : 0d48                  	db	AM_IMP,		0x48
fa88 : 70687002              	db	"php",		1*2
fa8c : 0d08                  	db	AM_IMP,		0x08
AS65 Assembler for R6502 [1.42].                                     Page  220
---------------------------------- bank1.s -----------------------------------

fa8e : 70687802              	db	"phx",		1*2
fa92 : 0dda                  	db	AM_IMP,		0xda
fa94 : 70687902              	db	"phy",		1*2
fa98 : 0d5a                  	db	AM_IMP,		0x5a
fa9a : 706c6102              	db	"pla",		1*2
fa9e : 0d68                  	db	AM_IMP,		0x68
faa0 : 706c7002              	db	"plp",		1*2
faa4 : 0d28                  	db	AM_IMP,		0x28
faa6 : 706c7802              	db	"plx",		1*2
faaa : 0dfa                  	db	AM_IMP,		0xfa
faac : 706c7902              	db	"ply",		1*2
fab0 : 0d7a                  	db	AM_IMP,		0x7a
fab2 : 72746902              	db	"rti",		1*2
fab6 : 0d40                  	db	AM_IMP,		0x40
fab8 : 72747302              	db	"rts",		1*2
fabc : 0d60                  	db	AM_IMP,		0x60
fabe : 74617802              	db	"tax",		1*2
fac2 : 0daa                  	db	AM_IMP,		0xaa
fac4 : 74617902              	db	"tay",		1*2
fac8 : 0da8                  	db	AM_IMP,		0xa8
faca : 74737802              	db	"tsx",		1*2
face : 0dba                  	db	AM_IMP,		0xba
fad0 : 74786102              	db	"txa",		1*2
fad4 : 0d8a                  	db	AM_IMP,		0x8a
fad6 : 74787302              	db	"txs",		1*2
fada : 0d9a                  	db	AM_IMP,		0x9a
fadc : 74796102              	db	"tya",		1*2
fae0 : 0d98                  	db	AM_IMP,		0x98
                             	
fae2 : 74726204              	db	"trb",		2*2
fae6 : 0414                  	db	AM_ZP,		0x14
fae8 : 011c                  	db	AM_ABS,		0x1c
faea : 74736204              	db	"tsb",		2*2
faee : 0404                  	db	AM_ZP,		0x04
faf0 : 010c                  	db	AM_ABS,		0x0c
                             	
faf2 : 6262723002            	db	"bbr0",		1*2
faf7 : 0f0f                  	db	AM_REL,		0x0f
faf9 : 6262723102            	db	"bbr1",		1*2
fafe : 0f1f                  	db	AM_REL,		0x1f
fb00 : 6262723202            	db	"bbr2",		1*2
fb05 : 0f2f                  	db	AM_REL,		0x2f
fb07 : 6262723302            	db	"bbr3",		1*2
fb0c : 0f3f                  	db	AM_REL,		0x3f
fb0e : 6262723402            	db	"bbr4",		1*2
fb13 : 0f4f                  	db	AM_REL,		0x4f
fb15 : 6262723502            	db	"bbr5",		1*2
fb1a : 0f5f                  	db	AM_REL,		0x5f
fb1c : 6262723602            	db	"bbr6",		1*2
fb21 : 0f6f                  	db	AM_REL,		0x6f
fb23 : 6262723702            	db	"bbr7",		1*2
fb28 : 0f7f                  	db	AM_REL,		0x7f
fb2a : 6262733002            	db	"bbs0",		1*2
fb2f : 0f8f                  	db	AM_REL,		0x8f
fb31 : 6262733102            	db	"bbs1",		1*2
fb36 : 0f9f                  	db	AM_REL,		0x9f
fb38 : 6262733202            	db	"bbs2",		1*2
fb3d : 0faf                  	db	AM_REL,		0xaf
fb3f : 6262733302            	db	"bbs3",		1*2
fb44 : 0fbf                  	db	AM_REL,		0xbf
fb46 : 6262733402            	db	"bbs4",		1*2
fb4b : 0fcf                  	db	AM_REL,		0xcf
AS65 Assembler for R6502 [1.42].                                     Page  221
---------------------------------- bank1.s -----------------------------------

fb4d : 6262733502            	db	"bbs5",		1*2
fb52 : 0fdf                  	db	AM_REL,		0xdf
fb54 : 6262733602            	db	"bbs6",		1*2
fb59 : 0fef                  	db	AM_REL,		0xef
fb5b : 6262733702            	db	"bbs7",		1*2
fb60 : 0fff                  	db	AM_REL,		0xff
fb62 : 726d623002            	db	"rmb0",		1*2
fb67 : 0f07                  	db	AM_REL,		0x07
fb69 : 726d623102            	db	"rmb1",		1*2
fb6e : 0f17                  	db	AM_REL,		0x17
fb70 : 726d623202            	db	"rmb2",		1*2
fb75 : 0f27                  	db	AM_REL,		0x27
fb77 : 726d623302            	db	"rmb3",		1*2
fb7c : 0f37                  	db	AM_REL,		0x37
fb7e : 726d623402            	db	"rmb4",		1*2
fb83 : 0f47                  	db	AM_REL,		0x47
fb85 : 726d623502            	db	"rmb5",		1*2
fb8a : 0f57                  	db	AM_REL,		0x57
fb8c : 726d623602            	db	"rmb6",		1*2
fb91 : 0f67                  	db	AM_REL,		0x67
fb93 : 726d623702            	db	"rmb7",		1*2
fb98 : 0f77                  	db	AM_REL,		0x77
fb9a : 736d623002            	db	"smb0",		1*2
fb9f : 0f87                  	db	AM_REL,		0x87
fba1 : 736d623102            	db	"smb1",		1*2
fba6 : 0f97                  	db	AM_REL,		0x97
fba8 : 736d623202            	db	"smb2",		1*2
fbad : 0fa7                  	db	AM_REL,		0xa7
fbaf : 736d623302            	db	"smb3",		1*2
fbb4 : 0fb7                  	db	AM_REL,		0xb7
fbb6 : 736d623402            	db	"smb4",		1*2
fbbb : 0fc7                  	db	AM_REL,		0xc7
fbbd : 736d623502            	db	"smb5",		1*2
fbc2 : 0fd7                  	db	AM_REL,		0xd7
fbc4 : 736d623602            	db	"smb6",		1*2
fbc9 : 0fe7                  	db	AM_REL,		0xe7
fbcb : 736d623702            	db	"smb7",		1*2
fbd0 : 0ff7                  	db	AM_REL,		0xf7
                             	
                             	;* Terminates with a zero
fbd2 : 00                    	db	0
                             
                             	include	"dflat\asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
AS65 Assembler for R6502 [1.42].                                     Page  222
---------------------------------- bank1.s -----------------------------------

                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
fbd3 :                       df_tk_asm_tokenjmp
fbd3 : 0cd7                  	dw	df_tk_asm_org
fbd5 : 0cd7                  	dw	df_tk_asm_opt
fbd7 : 57d6                  	dw	df_tk_asm_db
fbd9 : 57d6                  	dw	df_tk_asm_dw
fbdb : 0cd7                  	dw	df_tk_asm_ds
                             
fbdd :                       df_rt_asm_tokenjmp
fbdd : 85f5                  	dw	df_rt_asm_org
fbdf : 97f5                  	dw	df_rt_asm_opt
fbe1 : 9ff5                  	dw	df_rt_asm_db
fbe3 : a2f5                  	dw	df_rt_asm_dw
fbe5 : 1df6                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fbe7 :                       asm_init
                             	; Zero the PC
fbe7 : 64db             [ 3] 	stz df_asmpc
fbe9 : 64dc             [ 3] 	stz df_asmpc+1
                             	; Zero the option
fbeb : 64dd             [ 3] 	stz df_asmopt
fbed : 60               [ 6] 	rts
                             	
fbee :                       mod_sz_asm_e
                             
                             
                             	; End of Code
fbee :                       _code_end
fbee :                       _bank1_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
