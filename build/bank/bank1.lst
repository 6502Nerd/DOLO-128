AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank1.s -----------------------------------

13460 lines read, no errors in pass 1.
c000 =                       _bank1_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank1.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank1.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank1.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank1.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank1.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank1.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank1.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank1.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank1.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank1.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank1.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank1.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0c69 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank1.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank1.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank1.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank1.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank1.s -----------------------------------

                             ; Interrupt routine addresses
0002 =                       int_nmi		 ds 2		; Master NMI handler
0004 =                       int_irq		 ds	2		; Master IRQ handler
0006 =                       int_brk		 ds	2		; Master BRK handler
0008 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
000a =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
000c =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Serial FIFO buffer pointers
000e =                       ser_first	ds	1		; Pointer to first byte in buffer
000f =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0010 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0012 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0013 =                       vdp_curstat	ds	1		; Cursor status
0014 =                       vdp_curval	ds	1		; Cursor value on screen
0015 =                       vdp_blank	ds	1		; Screen blank value normally 32
0016 =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
0017 =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0023 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0033 =                       kb_raw  	ds	1		; Raw keyboard code
0034 =                       kb_last		ds	1		; Raw code of last key
0035 =                       kb_code 	ds	1		; Converted keyboard code
0036 =                       kb_stat		ds	1		; Keyboard status for caps and shi
0037 =                       kb_deb		ds	1		; VB periods since last KB spike
0038 =                       kb_rep		ds	1		; Keyboard repeat timer
0039 =                       kb_rep_tim 	ds	1		; Default repeat speed
003a =                       kb_rep_del 	ds	1		; Default repeat delay timing
003b =                       kb_debounce ds	1		; Default repeat debounce
003c =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
003d =                       tmp_c		ds	2		; Temp address c
003f =                       tmp_v1		ds	2		; VDP temp addresses
0041 =                       tmp_a		ds	2		; Temp storage a
0043 =                       tmp_b 		ds	2		; Temp address b
0045 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
0047 =                       buf_adr		ds	2		; Line buffer address
0049 =                       buf_sz		ds	1		; Buffer size
004a =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
004b =                       sd_status	ds	1		; SD card status
004c =                       sd_slo		ds	1		; Sector pointer low
004d =                       sd_shi		ds	1		; Sector pointer high
004e =                       sd_sect		ds	4		; SD Card sector address
0052 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
0056 =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0085 =                       ztmp_16					; Start of 16 byte scratch area (all 
0085 =                       num_a		ds	4		; 4 byte primary accumulator
0089 =                       num_b		ds	4		; 4 byte secondary accumulator
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank1.s -----------------------------------

008d =                       num_x		ds	4		; 4 byte x register
0091 =                       num_tmp		ds	4		; 4 byte temp space
0095 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
009d =                       dflat_zp_s
009d =                       dflat_zp_save_s			; ZP save dflat from here
009d =                       df_checkkey	ds	1		; Key check interval counter
009e =                       df_checkmsk	ds	1		; Mask for check key
009f =                       errno		ds	1		; General error condition status
00a0 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
00a1 =                       df_sp		ds	1		; Stack pointer after error to resto
00a2 =                       df_pc		ds	2		; PC after error to return to
00a4 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
00a6 =                       df_brkval	ds	1		; Byte after BRK instruction
00a7 =                       df_prgstrt	ds	2		; Start of program code
00a9 =                       df_prgend	ds	2		; End of program code
00ab =                       df_vntstrt	ds	2		; Variable name table start
00ad =                       df_vntend	ds	2		; Variable name table end
00af =                       df_vvtstrt	ds	2		; Variable value table start
00b1 =                       df_vvtend	ds	2		; Variable value table end
00b3 =                       df_varcnt	ds	1		; Variable counter
00b4 =                       df_starstrt	ds	2		; String and array table start
00b6 =                       df_starend	ds	2		; String and array table end
00b8 =                       df_rtstop	ds	1		; Runtime stack pointer
00b9 =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ba =                       df_strbuff	ds	1		; String expression buffer
00bb =                       df_stridx	ds	1		; Top of string buffer (grows dow
00bc =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00be =                       df_linoff	ds	1		; Offset in to line buffer
00bf =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00c0 =                       df_eolidx	ds	1		; End of line index (i.e length)
00c1 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00c2 =                       df_curstidx	ds	1		; Offset to the start of curren
00c3 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00c5 =                       df_symoff	ds	1		; Offset in to token table
00c6 =                       df_symini	ds	2		; Start of symtab
00c8 =                       df_currlin	ds	2		; Execution current line pointer
00ca =                       df_exeoff	ds	1		; Execution line buffer offset
00cb =                       df_nextlin	ds	2		; Next line to execute
00cd =                       df_procmode	ds	1		; Only used during tokenisation
00ce =                       df_procargs	ds	1		; Only used during tokenisation
00cf =                       df_procloc	ds	1		; Counts the number of local par
00d0 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00d2 =                       df_lineptr	ds	2		; Pointer to line during searche
00d4 =                       df_lineidx	ds	1		; Pointer to line index during s
00d5 =                       df_ifnest	ds	1		; Global nested if counter
00d6 =                       df_currdat	ds	2		; Data current line pointer
00d8 =                       df_datoff	ds	1		; Data line buffer offset
00d9 =                       df_rnd		ds	2		; Random number seed
                             
00db =                       df_asmpc	ds	2		; Assembler program counter
00dd =                       df_asmopt	ds	1		; Assembler current option
00de =                       df_asmadmd	ds	1		; Addressing mode
00df =                       df_asmopcde	ds	1		; Current opcode
00e0 =                       df_asmoprnd	ds	2		; Current operand
00e2 =                       df_asmlen	ds	1		; Instruction length
                             
00e3 =                       dflat_zp_save_e			; Save up to this place
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank1.s -----------------------------------

                             
                             ; Temp space for dflat
00e3 =                       df_tmpptra	ds	2		; Temp pointer a
00e5 =                       df_tmpptrb	ds	2		; Temp pointer b
00e7 =                       df_tmpptrc	ds	2		; Temp pointer c
00e9 =                       df_tmpptrd	ds	2		; Temp pointer d
00eb =                       df_tmpptre	ds	2		; Temp pointer e
                             
                             
                             ;***** END OF ZERO PAGE *****
00ed =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
                             ; Active IO device settings
0c00 =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c01 =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c11 =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
                             ; Filesystem parameters
0c31 =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c35 =                       fs_fatsect	ds	4		; Start of FAT tables
0c39 =                       fs_rootsect	ds	4		; Start of Root Directory
0c3d =                       fs_datasect	ds	4		; Start of Data Area
0c41 =                       fs_dirsect	ds	4		; Current directory sector numbe
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank1.s -----------------------------------

0c45 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c47 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0c67 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0c69 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : fbc6                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : e8ca                  	fcw init			; 0xfffc : Reset Vector
fffe : 38c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
c000 : 80                    	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank1.s -----------------------------------

                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4c60c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4c5dc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4cf0c5           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c2ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c37c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4c99c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4c41c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4cfdc5           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c15c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f1e1, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d785, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d515, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d5a8, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d4b1, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d470, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d18d, 2
                             
c0d6 :                       _fs_open_read_w
                              _bankjsr $d35c, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d420, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank1.s -----------------------------------

c106 :                       _fs_put_byte_w
                              _bankjsr $d2e9, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $cfd0, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d006, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $cf8b, 2
                             
c166 :                       _get_byte
                              _bankjsr $d1d5, 0
                             
c17e :                       _put_byte
                              _bankjsr $d1ea, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e290, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e29d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $dd59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d1f7, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d182, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d1b3, 0
                             
c226 :                       _init_fs
                              _bankjsr $ce68, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cb62, 2
                             
c256 :                       _init_snd
                              _bankjsr $d5c0, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d209, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d218, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d283, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cb6b, 0
                             
c2ce :                       _gr_cls
                              _bankjsr $dd6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $dd16, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank1.s -----------------------------------

                             
c2fe :                       _gr_line
                              _bankjsr $e0ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $df0a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e015, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ddd7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $de15, 0
                             
c376 :                       _gr_point
                              _bankjsr $debb, 0
                             
c38e :                       _gr_get
                              _bankjsr $ddf2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $ddfa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d5b9, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c699, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c641, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c637, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c62a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $db00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d3df, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d545, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d496, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d5b0, 0
                             
c4ae :                       _rtc_nvwrite
                              _bankjsr $d598, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d5bc, 2
                             
c4de :                       _sd_sendcmd17
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank1.s -----------------------------------

                              _bankjsr $cd3a, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $cdb3, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cb62, 0
                             
c526 :                       mod_sz_autogen_e
                             
                             	
c526 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c526 :                       mod_sz_io_s
                             
                             ;****************************************
                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c526 :                       io_init
c526 : a900             [ 2] 	lda #0				; Assume it's serial
c528 : 48               [ 3] 	pha
c529 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c52c : 2910             [ 2] 	and #0x10
c52e : d00b             [ 3] 	bne io_init_set_default
c530 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c533 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c535 : f004             [ 3] 	beq io_init_set_default
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank1.s -----------------------------------

                             	; Else set to KB/screen for IO
c537 : 68               [ 4] 	pla
c538 : a901             [ 2] 	lda #1
c53a : 48               [ 3] 	pha
c53b :                       io_init_set_default
c53b : 68               [ 4] 	pla
c53c : 8d000c           [ 4] 	sta io_default
c53f : 4c42c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c542 :                       io_set_default			; Entry point for default
c542 : ad000c           [ 4] 	lda io_default
c545 :                       io_active_device		; Entry point for A set
c545 : 0a               [ 2] 	asl	a				; x16 the Block number
c546 : 0a               [ 2] 	asl a
c547 : 0a               [ 2] 	asl a
c548 : 0a               [ 2] 	asl a
c549 : a8               [ 2] 	tay
c54a : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c54c :                       io_copy_data
c54c : b9c0c5           [ 4] 	lda io_devices,y
c54f : 9d010c           [ 5] 	sta io_block,x
c552 : c8               [ 2] 	iny
c553 : e8               [ 2] 	inx
c554 : e010             [ 2] 	cpx #io_struct
c556 : d0f4             [ 3] 	bne io_copy_data
                             	
c558 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c55a : 854a             [ 3] 	sta buf_ef
c55c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
                             ;****************************************
c55d :                       io_get_ch
c55d : 6c010c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c560 :                       io_put_ch
c560 : 6c030c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank1.s -----------------------------------

                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c563 :                       io_open_read
c563 : 6c050c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c566 :                       io_open_write
c566 : 6c070c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c569 :                       io_close
c569 : 6c090c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c56c :                       io_delete
c56c : 6c0b0c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
                             ;****************************************
c56f :                       io_read_line
c56f : 8647             [ 3] 	stx buf_adr			; Save pointer to storage
c571 : 8548             [ 3] 	sta buf_adr+1
c573 : 8449             [ 3] 	sty buf_sz			; Max length
c575 : 08               [ 3] 	php					; Save echo state
c576 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c578 :                       io_get_line_byte
c578 : 38               [ 2] 	sec					; Getting bytes synchronously
c579 : 205dc5           [ 6] 	jsr io_get_ch		; Get a byte
c57c : b026             [ 3] 	bcs io_get_line_done; Got nothing then finish
c57e : 28               [ 4] 	plp					; Get echo state
c57f : 08               [ 3] 	php					; Instantly save it back
c580 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c582 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c584 : d005             [ 3] 	bne io_do_echo
c586 : c000             [ 2] 	cpy #0				; Already at beginning?
c588 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank1.s -----------------------------------

c58a : 88               [ 2] 	dey					; Else decrement length
c58b :                       io_do_echo
c58b : 2060c5           [ 6] 	jsr io_put_ch		; Echo it
c58e :                       io_skip_echo
c58e : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c590 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c592 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c594 : f003             [ 3] 	beq io_skip_special
c596 : 9147             [ 5] 	sta (buf_adr),y		; Save it
c598 : c8               [ 2] 	iny					; Increase length
c599 :                       io_skip_special
c599 : c54a             [ 3] 	cmp buf_ef			; Is it the terminating char?
c59b : f007             [ 3] 	beq io_get_line_done	; If yes then done
c59d : c449             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c59f : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c5a1 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c5a2 : 38               [ 2] 	sec					; Yes, set carry flag
c5a3 : 60               [ 6] 	rts					; And done
c5a4 :                       io_get_line_done
c5a4 : a900             [ 2] 	lda #0
c5a6 : 9147             [ 5] 	sta (buf_adr),y		; Terminate with 0
c5a8 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c5a9 : 18               [ 2] 	clc					; Clear carry flag
c5aa : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c5ab :                       io_print_line
c5ab : 48               [ 3] 	pha
                             
c5ac : 863d             [ 3] 	stx tmp_c					; Store the string pointer
c5ae : 853e             [ 3] 	sta tmp_c+1					; lo and hi
c5b0 : a000             [ 2] 	ldy #0						; Start at the beginning!
c5b2 :                       io_print_line_byte
c5b2 : b13d             [ 5] 	lda (tmp_c),y				; Copy byte to
c5b4 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c5b6 : 2060c5           [ 6] 	jsr io_put_ch				; Transmit
c5b9 : c8               [ 2] 	iny
c5ba : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
c5bc :                       io_print_done
c5bc : 68               [ 4] 	pla
c5bd : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c5be :                       io_null_op
c5be : 18               [ 2] 	clc
c5bf : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c5c0 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c5c0 :                       io_device0					; Serial device, input = Ser, outp
c5c0 : 66c1                  	dw	_get_byte			; io_get_ch
c5c2 : 7ec1                  	dw	_put_byte			; io_put_ch
c5c4 : bec5                  	dw	io_null_op			; io_open_r
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank1.s -----------------------------------

c5c6 : bec5                  	dw	io_null_op			; io_open_w
c5c8 : bec5                  	dw	io_null_op			; io_close_f
c5ca : bec5                  	dw	io_null_op			; io_del_f
c5cc : bec5                  	dw	io_null_op			; io_ext1
c5ce : bec5                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c5d0 :                       io_device1					; Default device, input = screen e
c5d0 : 96c1                  	dw	_gr_get_key			; io_get_ch
c5d2 : aec1                  	dw	_gr_put_byte		; io_put_ch
c5d4 : bec5                  	dw	io_null_op			; io_open_r
c5d6 : bec5                  	dw	io_null_op			; io_open_w
c5d8 : bec5                  	dw	io_null_op			; io_close_f
c5da : bec5                  	dw	io_null_op			; io_del_f
c5dc : bec5                  	dw	io_null_op			; io_ext1
c5de : bec5                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c5e0 :                       io_device2					; SD device, input = SD, output = 
c5e0 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c5e2 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c5e4 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c5e6 : eec0                  	dw	_fs_open_write_w	; io_open_w
c5e8 : a6c0                  	dw	_fs_close_w			; io_close_f
c5ea : 8ec0                  	dw	_fs_delete_w		; io_del_f
c5ec : bec5                  	dw	io_null_op			; io_ext1
c5ee : bec5                  	dw	io_null_op			; io_ext2
                             
c5f0 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5f0 :                       vdp_wr_reg
c5f0 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c5f3 : ea               [ 2] 	nop
c5f4 : ea               [ 2] 	nop
c5f5 : 0980             [ 2] 	ora #0x80
c5f7 : 8d0105           [ 4] 	sta VDP_MODE1
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank1.s -----------------------------------

c5fa : 4980             [ 2] 	eor #0x80
c5fc : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c5fd :                       vdp_wr_addr
c5fd : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c600 : ea               [ 2] 	nop
c601 : ea               [ 2] 	nop
c602 : ea               [ 2] 	nop
c603 : 0940             [ 2] 	ora #0x40		; Required by VDP
c605 : 8d0105           [ 4] 	sta VDP_MODE1
c608 : 4940             [ 2] 	eor #0x40		; Undo that bit
c60a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c60b :                       vdp_mem_wait
c60b : da               [ 3] 	phx								; 3
c60c : a616             [ 3] 	ldx vdp_delay					; 3
c60e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c610 :                       vdp_mem_wait_loop
c610 : ca               [ 2] 	dex								; 2
c611 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c613 :                       vdp_mem_wait_end
c613 : fa               [ 4] 	plx								; 3
c614 : 60               [ 6] 	rts								; 6
                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c615 :                       vdp_rd_addr
c615 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c618 : ea               [ 2] 	nop
c619 : ea               [ 2] 	nop
c61a : ea               [ 2] 	nop
c61b : 8d0105           [ 4] 	sta VDP_MODE1
c61e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank1.s -----------------------------------

                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c620 :                       vdp_rd_vram
c620 : ad0005           [ 4] 	lda VDP_VRAM
c623 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c625 :                       vdp_wr_vram
c625 : 8d0005           [ 4] 	sta VDP_VRAM
c628 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c62a :                       vdp_poke
c62a : 08               [ 3] 	php
c62b : 48               [ 3] 	pha
c62c : 98               [ 2] 	tya
c62d : 78               [ 2] 	sei
c62e : 20fdc5           [ 6] 	jsr vdp_wr_addr
c631 : 68               [ 4] 	pla
c632 : 2025c6           [ 6] 	jsr vdp_wr_vram
c635 : 28               [ 4] 	plp
c636 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c637 :                       vdp_peek
c637 : 08               [ 3] 	php
c638 : 78               [ 2] 	sei
c639 : 2015c6           [ 6] 	jsr vdp_rd_addr
c63c : 2020c6           [ 6] 	jsr vdp_rd_vram
c63f : 28               [ 4] 	plp
c640 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank1.s -----------------------------------

                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c641 :                       snd_set
c641 : 48               [ 3] 	pha
                             
c642 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c644 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c647 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c64a : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c64d : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c64f : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c651 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c654 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c656 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c659 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c65c : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c65e : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c661 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c663 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c666 : 68               [ 4] 	pla
                             	
c667 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c668 :                       snd_get
c668 : 48               [ 3] 	pha
                             
c669 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c66b : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c66e : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c671 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c674 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank1.s -----------------------------------

c676 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c678 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c67b : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c67d : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c680 : a900             [ 2] 	lda #0x00				; Set Port A to input
c682 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c685 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c688 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c68a : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c68c : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c68f : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c692 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c694 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c697 : 68               [ 4] 	pla
                             	
c698 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c699 :                       snd_get_joy0
c699 : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c69b : 2068c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c69e : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c69f :                       main
                             
c69f :                       infinity
c69f : 2046c0           [ 6] 	jsr _df_pg_dflat
c6a2 : 4c9fc6           [ 3] 	jmp infinity
                             
c6a5 :                       msg_hello_world
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank1.s -----------------------------------

                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c6a5 : 4275696c64203a..       db "Build : 05-01-2025\r"
c6b8 : 3132384b204272..       db "128K Breadboard Computer\r"
c6d1 : 42792040363530..       db "By @6502Nerd\r"
c6de : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c6f2 :                       init_nmi
                             	; Core IRQ handler
c6f2 : a9fb             [ 2] 	lda #lo(nmi)
c6f4 : 8502             [ 3] 	sta int_nmi
c6f6 : a9c6             [ 2] 	lda #hi(nmi)
c6f8 : 8503             [ 3] 	sta int_nmi+1
c6fa : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c6fb :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* Only the 6551 uses this - fills the receive bu
c6fb :                       nmi
c6fb : 48               [ 3] 	pha
                             
c6fc : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c6ff : 100c             [ 4] 	bpl	nmi_fin					; If no interrupt don't do anyth
                             
c701 : 5a               [ 3] 	phy
c702 : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c705 : a40f             [ 3] 	ldy ser_last				; Put byte in last position of F
c707 : 990008           [ 5] 	sta ser_buf,y
c70a : e60f             [ 5] 	inc ser_last				; Advance position of last
                             
c70c : 7a               [ 4] 	ply
c70d :                       nmi_fin
                             
c70d : 68               [ 4] 	pla
c70e : 40               [ 6] 	rti
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank1.s -----------------------------------

                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c70f :                       init_irq
                             	; Core IRQ handler
c70f : a949             [ 2] 	lda #lo(irq)
c711 : 8504             [ 3] 	sta int_irq
c713 : a9c7             [ 2] 	lda #hi(irq)
c715 : 8505             [ 3] 	sta int_irq+1
                             	
                             	; Core BRK handler
c717 : a977             [ 2] 	lda #lo(irq_brk)
c719 : 8506             [ 3] 	sta int_brk
c71b : a9c7             [ 2] 	lda #hi(irq_brk)
c71d : 8507             [ 3] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0, PIA1 interrupts
c71f : a948             [ 2] 	lda #lo(null_handler)
c721 : 8508             [ 3] 	sta int_uservdp
c723 : a9c7             [ 2] 	lda #hi(null_handler)
c725 : 8509             [ 3] 	sta int_uservdp+1
                             
c727 : a948             [ 2] 	lda #lo(null_handler)
c729 : 850a             [ 3] 	sta int_usercia0
c72b : a9c7             [ 2] 	lda #hi(null_handler)
c72d : 850b             [ 3] 	sta int_usercia0+1
                             
c72f : a948             [ 2] 	lda #lo(null_handler)
c731 : 850c             [ 3] 	sta int_usercia1
c733 : a9c7             [ 2] 	lda #hi(null_handler)
c735 : 850d             [ 3] 	sta int_usercia1+1
                             
c737 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c738 :                       call_irq_master
c738 : 6c0400           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c73b :                       call_irq_brk
c73b : 6c0600           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c73e :                       call_irq_uservdp
c73e : 6c0800           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c741 :                       call_irq_usercia0
c741 : 6c0a00           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c744 :                       call_irq_usercia1
c744 : 6c0c00           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c747 :                       null_irq
c747 : 40               [ 6] 	rti
                             
                             ;* null handler
c748 :                       null_handler
c748 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank1.s -----------------------------------

                             	
                             
                             ;* Master IRQ handler
c749 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c74c : ba               [ 2] 	tsx
c74d : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c750 : 2910             [ 2] 	and #0x10
c752 : d0e7             [ 3] 	bne call_irq_brk
                             	
c754 : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try PIA1 first for rapid Timer handling
c755 : ad8d04           [ 4] 	lda IO_1 + IFR
c758 : 1003             [ 3] 	bpl irq_check_vdp
c75a : 2044c7           [ 6] 	jsr call_irq_usercia1	; Call user cia1 handler
                             
                             	;* Try VDP next
c75d :                       irq_check_vdp	
c75d : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c760 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c762 : 203ec7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c765 : 20c4c7           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c768 : 20a2c7           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c76b :                       irq_check_cia0
c76b : ad0d04           [ 4] 	lda IO_0 + IFR
c76e : 1003             [ 3] 	bpl irq_fin
c770 : 2041c7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c773 :                       irq_fin
                             	_pullAXY
                             
c776 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c777 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c777 : 38               [ 2] 	sec
c778 : bd0501           [ 4] 	lda 0x0105,x
c77b : e902             [ 2] 	sbc #2
c77d : 85a4             [ 3] 	sta df_brkpc
c77f : bd0601           [ 4] 	lda 0x0106,x
c782 : e900             [ 2] 	sbc #0
c784 : 85a5             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c786 : a001             [ 2] 	ldy #1
c788 : b1a4             [ 5] 	lda (df_brkpc),y
c78a : 85a6             [ 3] 	sta df_brkval
c78c : 859f             [ 3] 	sta errno
                             	; now update the return address
c78e : a5a2             [ 3] 	lda df_pc
c790 : 9d0501           [ 5] 	sta 0x105,x
c793 : a5a3             [ 3] 	lda df_pc+1
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank1.s -----------------------------------

c795 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c79b : 8585             [ 3] 	sta num_a
c79d : 8686             [ 3] 	stx num_a+1
c79f : 8487             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c7a1 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c7a2 :                       int_kb_handler	
c7a2 : a537             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c7a4 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c7a6 : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c7a9 : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c7ab : f00c             [ 3] 	beq int_keys_up
c7ad :                       int_do_read
c7ad : 853c             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c7af : a53b             [ 3] 	lda kb_debounce			; Set debounce
c7b1 : 8537             [ 3] 	sta kb_deb
c7b3 :                       int_skip_scan
c7b3 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c7b5 : 8d0d04           [ 4] 	sta IO_0 + IFR
c7b8 : 60               [ 6] 	rts
c7b9 :                       int_keys_up					; No key pressed
c7b9 : 6433             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c7bb : 6434             [ 3] 	stz kb_last
c7bd : 6435             [ 3] 	stz kb_code
c7bf : 6437             [ 3] 	stz kb_deb
c7c1 : 6438             [ 3] 	stz kb_rep
c7c3 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c7c4 :                       int_vdp_handler
c7c4 : 20f0c7           [ 6] 	jsr update_timers	; If it is then update system 
                             
c7c7 : a512             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c7c9 : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c7cb : c613             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c7cd : a513             [ 3] 	lda vdp_curstat		; Check it
c7cf : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c7d1 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c7d3 : a513             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c7d5 : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c7d7 : 8513             [ 3] 	sta vdp_curstat		
                             
c7d9 : 18               [ 2] 	clc					; Add offset for cursor address in vram
c7da : a52c             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c7dc : 6529             [ 3] 	adc gr_scrngeom+gr_cur_off
c7de : aa               [ 2] 	tax
c7df : a52d             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank1.s -----------------------------------

c7e1 : 6900             [ 2] 	adc #0
                             
c7e3 : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	
c7e6 : a513             [ 3] 	lda vdp_curstat
c7e8 : 2980             [ 2] 	and #0x80
c7ea : 4514             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c7ec : 2025c6           [ 6] 	jsr vdp_wr_vram
c7ef :                       int_vdp_fin	
c7ef : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c7f0 :                       update_timers
c7f0 : e610             [ 5] 	inc vdp_int_cnt
c7f2 : d002             [ 3] 	bne inc_kb_timers
c7f4 : e611             [ 5] 	inc vdp_int_cnt+1
c7f6 :                       inc_kb_timers
c7f6 : a637             [ 3] 	ldx kb_deb			; Is debounce 0?
c7f8 : f002             [ 3] 	beq skip_kb_deb
c7fa : c637             [ 5] 	dec kb_deb
c7fc :                       skip_kb_deb
c7fc : a638             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c7fe : f002             [ 4] 	beq skip_kb_rep
c800 : c638             [ 5] 	dec kb_rep
c802 :                       skip_kb_rep
c802 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c803 :                       long_delay
c803 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c807 : a000             [ 2] 	ldy #0x00
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank1.s -----------------------------------

c809 :                       long_delay_1
c809 : ea               [ 2] 	nop
c80a : ea               [ 2] 	nop
c80b : ea               [ 2] 	nop
c80c : ea               [ 2] 	nop
c80d : 88               [ 2] 	dey
c80e : d0f9             [ 3] 	bne long_delay_1
c810 : ca               [ 2] 	dex
c811 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c816 : 28               [ 4] 	plp
                             	
c817 : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c818 :                       utilPrintSPC
c818 : 48               [ 3] 	pha
c819 : a920             [ 2] 	lda #' '
c81b : 2060c5           [ 6] 	jsr io_put_ch
c81e : 68               [ 4] 	pla
c81f : 60               [ 6] 	rts
                             
c820 :                       utilPrintCRLF
c820 : 48               [ 3] 	pha
c821 : a90d             [ 2] 	lda #UTF_CR
c823 : 2060c5           [ 6] 	jsr io_put_ch
c826 : 68               [ 4] 	pla
c827 : 60               [ 6] 	rts
                             
c828 :                       utilPrintA
c828 : 8545             [ 3] 	sta tmp_d
c82a : 48               [ 3] 	pha
c82b : 8a               [ 2] 	txa
c82c : 48               [ 3] 	pha
c82d : a545             [ 3] 	lda tmp_d
c82f : 204dc8           [ 6] 	jsr str_a_to_x
c832 : 2060c5           [ 6] 	jsr io_put_ch
c835 : 8a               [ 2] 	txa
c836 : 2060c5           [ 6] 	jsr io_put_ch
c839 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank1.s -----------------------------------

c83a : aa               [ 2] 	tax
c83b : 68               [ 4] 	pla
c83c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c83d :                       util_clr_mem
c83d : 48               [ 3] 	pha
c83e : 5a               [ 3] 	phy
c83f : 863f             [ 3] 	stx tmp_v1
c841 : 8540             [ 3] 	sta tmp_v1+1
c843 : a900             [ 2] 	lda #0
c845 :                       mem_clr_byte
c845 : 88               [ 2] 	dey
c846 : 913f             [ 5] 	sta (tmp_v1),y
c848 : d0fb             [ 3] 	bne mem_clr_byte
c84a : 7a               [ 4] 	ply
c84b : 68               [ 4] 	pla
c84c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c84d :                       str_a_to_x
c84d : 48               [ 3] 	pha					; Save the byte using later on
c84e : 290f             [ 2] 	and #0x0f			; Mask low nibble
c850 : 18               [ 2] 	clc
c851 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c853 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c855 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c857 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c859 :                       skip_a_f_1
c859 : aa               [ 2] 	tax					; Low char is in X
c85a : 68               [ 4] 	pla					; Get byte back
c85b : 4a               [ 2] 	lsr a				; Make high nibble low
c85c : 4a               [ 2] 	lsr a
c85d : 4a               [ 2] 	lsr a
c85e : 4a               [ 2] 	lsr a
c85f : 18               [ 2] 	clc
c860 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c862 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c864 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c866 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c868 :                       skip_a_f_2
                             
c868 : 18               [ 2] 	clc					; No error
c869 : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
c86a :                       str_x_to_a
c86a : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c86c : 38               [ 2] 	sec					; Process high char in A
c86d : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c86f : c90a             [ 2] 	cmp #10				; If A < 10 then
c871 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c873 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c875 :                       skip_x_f_1
c875 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c877 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c879 : 0a               [ 2] 	asl a				; This is the high nibble
c87a : 0a               [ 2] 	asl a
c87b : 0a               [ 2] 	asl a
c87c : 0a               [ 2] 	asl a
c87d : 48               [ 3] 	pha					; Save the high nibble
c87e : 8a               [ 2] 	txa					; Now process the low char in X
c87f : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c881 : 38               [ 2] 	sec
c882 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c884 : c90a             [ 2] 	cmp #10				; If A < 10 then
c886 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c888 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c88a :                       skip_x_f_2
c88a : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c88c : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c88e : 8585             [ 3] 	sta num_a			; Store low nibble in temp
c890 : 68               [ 4] 	pla					; Get high nibble
c891 : 0585             [ 3] 	ora num_a			; OR with low nibble
                             
c893 : 18               [ 2] 	clc					; No error
c894 : 60               [ 6] 	rts					; A contains value
                             
c895 :                       str_x_to_a_errl
c895 : 68               [ 4] 	pla
c896 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c898 :                       con_n_to_a
c898 : 8691             [ 3] 	stx num_tmp
c89a : 8592             [ 3] 	sta num_tmp+1
c89c : 6485             [ 3] 	stz num_a
c89e : 6486             [ 3] 	stz num_a+1
c8a0 : c000             [ 2] 	cpy #NUM_ANY
c8a2 : f014             [ 3] 	beq con_n_to_a_detect
c8a4 : 88               [ 2] 	dey
c8a5 : d003             [ 3] 	bne con_n_not_dec
c8a7 :                       con_dec_jmp
c8a7 : 4c3bc9           [ 3] 	jmp con_dec_to_a_int
c8aa :                       con_n_not_dec
c8aa : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank1.s -----------------------------------

c8ab : d003             [ 3] 	bne con_n_not_hex
c8ad :                       con_hex_jmp
c8ad : 4cd2c8           [ 3] 	jmp con_hex_to_a_int
c8b0 :                       con_n_not_hex
c8b0 : 88               [ 2] 	dey
c8b1 : d003             [ 3] 	bne con_n_err
c8b3 :                       con_bin_jmp
c8b3 : 4c11c9           [ 3] 	jmp con_bin_to_a_int
c8b6 :                       con_n_err
c8b6 : 38               [ 2] 	sec
c8b7 : 60               [ 6] 	rts
c8b8 :                       con_n_to_a_detect
c8b8 : b291             [ 5] 	lda (num_tmp)
c8ba : c930             [ 2] 	cmp #'0'
c8bc : d0e9             [ 3] 	bne con_dec_jmp
c8be : a001             [ 2] 	ldy #1
c8c0 : b191             [ 5] 	lda (num_tmp),y
c8c2 : 0920             [ 2] 	ora #0x20
c8c4 : c978             [ 2] 	cmp #'x'
c8c6 : f0e5             [ 3] 	beq con_hex_jmp
c8c8 : c962             [ 2] 	cmp #'b'
c8ca : f0e7             [ 3] 	beq con_bin_jmp
c8cc : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c8ce :                       con_hex_to_a
c8ce : 8691             [ 3] 	stx num_tmp
c8d0 : 8592             [ 3] 	sta num_tmp+1
c8d2 :                       con_hex_to_a_int
c8d2 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c8d4 : a002             [ 2] 	ldy #2			; start at first digit
c8d6 :                       con_hex_digit
c8d6 : b191             [ 5] 	lda (num_tmp),y
c8d8 : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c8da : 38               [ 2] 	sec							; Process high char in A
c8db : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c8dd : c90a             [ 2] 	cmp #10						; If A < 10 then
c8df : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c8e1 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c8e3 :                       con_hex_skip_x_f_1
c8e3 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c8e5 : b01c             [ 4] 	bcs	con_hex_done			; Potentially done if not
c8e7 : 48               [ 3] 	pha
                             	; make room for lo nibble
c8e8 : 0685             [ 5] 	asl num_a
c8ea : 2686             [ 5] 	rol num_a+1
c8ec : 0685             [ 5] 	asl num_a
c8ee : 2686             [ 5] 	rol num_a+1
c8f0 : 0685             [ 5] 	asl num_a
c8f2 : 2686             [ 5] 	rol num_a+1
c8f4 : 0685             [ 5] 	asl num_a
c8f6 : 2686             [ 5] 	rol num_a+1
                             	; save in low nibble
c8f8 : 68               [ 4] 	pla
c8f9 : 0585             [ 3] 	ora num_a
c8fb : 8585             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank1.s -----------------------------------

c8fd : c8               [ 2] 	iny
c8fe : ca               [ 2] 	dex
c8ff : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c901 :                       con_hex_err
c901 : 38               [ 2] 	sec
c902 : 60               [ 6] 	rts
                             	; found a non-hex digit
c903 :                       con_hex_done
                             	; if no digits processed then error
c903 : c002             [ 2] 	cpy #2
c905 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c907 : 98               [ 2] 	tya
c908 : aa               [ 2] 	tax
c909 : a902             [ 2] 	lda #NUM_HEX
c90b : 18               [ 2] 	clc
c90c : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c90d :                       con_bin_to_a
c90d : 8691             [ 3] 	stx num_tmp
c90f : 8592             [ 3] 	sta num_tmp+1
c911 :                       con_bin_to_a_int
c911 : a002             [ 2] 	ldy #2
c913 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c915 :                       con_bin_digit
c915 : b191             [ 5] 	lda (num_tmp),y
c917 : c930             [ 2] 	cmp #'0'
c919 : 9010             [ 3] 	bcc con_bin_done
c91b : c932             [ 2] 	cmp #'1'+1
c91d : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c91f : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c921 : 2685             [ 5] 	rol num_a
c923 : 2686             [ 5] 	rol num_a+1
c925 : c8               [ 2] 	iny
c926 : ca               [ 2] 	dex
c927 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c929 : 800a             [ 3] 	bra con_bin_err
c92b :                       con_bin_done
                             	; didn't process any digit = error
c92b : c002             [ 2] 	cpy #2
c92d : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c92f : 98               [ 2] 	tya
c930 : aa               [ 2] 	tax
c931 : a903             [ 2] 	lda #NUM_BIN
c933 : 18               [ 2] 	clc
c934 : 60               [ 6] 	rts
c935 :                       con_bin_err
c935 : 38               [ 2] 	sec
c936 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c937 :                       con_dec_to_a
c937 : 8691             [ 3] 	stx num_tmp
c939 : 8592             [ 3] 	sta num_tmp+1
c93b :                       con_dec_to_a_int
c93b : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c93d : b291             [ 5] 	lda (num_tmp)
c93f : c92d             [ 2] 	cmp #'-'
c941 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c943 : c8               [ 2] 	iny
c944 :                       str_d_find_end
c944 : b191             [ 5] 	lda (num_tmp),y
c946 : c930             [ 2] 	cmp #'0'
c948 : 9007             [ 3] 	bcc str_d_found_end
c94a : c93a             [ 2] 	cmp #'9'+1
c94c : b003             [ 3] 	bcs str_d_found_end
c94e : c8               [ 2] 	iny
c94f : 80f3             [ 3] 	bra str_d_find_end
c951 :                       str_d_found_end
c951 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c953 : b052             [ 3] 	bcs str_d_error		; e.g. -32767 including minus
c955 : 8494             [ 3] 	sty num_tmp+3
c957 : 6493             [ 3] 	stz num_tmp+2
c959 : 6485             [ 3] 	stz num_a
c95b : 6486             [ 3] 	stz num_a+1
c95d :                       str_d_process_digit
c95d : 88               [ 2] 	dey
c95e : 3026             [ 3] 	bmi str_d_digits_done
                             
c960 : b191             [ 5] 	lda (num_tmp),y
                             
c962 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
c964 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
c966 : 38               [ 2] 	sec
c967 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
c969 : 18               [ 2] 	clc
c96a : 0a               [ 2] 	asl a
c96b : 6593             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
c96d : aa               [ 2] 	tax
c96e : a585             [ 3] 	lda num_a
c970 : 7da9c9           [ 4] 	adc str_d_powers,x
c973 : 8585             [ 3] 	sta num_a
c975 : a586             [ 3] 	lda num_a+1
c977 : 7daac9           [ 4] 	adc str_d_powers+1,x
c97a : 8586             [ 3] 	sta num_a+1
c97c : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
c97e : a593             [ 3] 	lda num_tmp+2
c980 : 6914             [ 2] 	adc #20
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank1.s -----------------------------------

c982 : 8593             [ 3] 	sta num_tmp+2
c984 : 80d7             [ 3] 	bra str_d_process_digit
c986 :                       str_d_digits_done
                             	; check if minus
c986 : b291             [ 5] 	lda (num_tmp)
c988 : c92d             [ 2] 	cmp #'-'
c98a : d011             [ 3] 	bne str_d_skip_neg
c98c : a694             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
c98e : e002             [ 2] 	cpx #2				; else it's an error
c990 : 9015             [ 3] 	bcc str_d_error
c992 : a685             [ 3] 	ldx num_a
c994 : a586             [ 3] 	lda num_a+1
c996 : 200dca           [ 6] 	jsr twos_complement
c999 : 8685             [ 3] 	stx num_a
c99b : 8586             [ 3] 	sta num_a+1
c99d :                       str_d_skip_neg
c99d : a694             [ 3] 	ldx num_tmp+3
c99f : e001             [ 2] 	cpx #1				; must be at least 1 char
c9a1 : 9004             [ 3] 	bcc str_d_error
c9a3 : a901             [ 2] 	lda #NUM_DEC
c9a5 : 18               [ 2] 	clc
c9a6 : 60               [ 6] 	rts
c9a7 :                       str_d_error
c9a7 : 38               [ 2] 	sec
c9a8 : 60               [ 6] 	rts
                             
c9a9 :                       str_d_powers
c9a9 : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
c9bd : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
c9d1 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
c9e5 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
c9f9 : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
ca0d :                       twos_complement
ca0d : 49ff             [ 2] 	eor #0xff
ca0f : 48               [ 3] 	pha
ca10 : 8a               [ 2] 	txa
ca11 : 49ff             [ 2] 	eor #0xff
ca13 : aa               [ 2] 	tax
ca14 : 68               [ 4] 	pla
ca15 : e8               [ 2] 	inx
ca16 : d001             [ 3] 	bne twos_complement_skip_X
ca18 : 1a               [ 2] 	inc a
ca19 :                       twos_complement_skip_X
ca19 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank1.s -----------------------------------

ca1a :                       int_to_bcd
ca1a : 08               [ 3] 	php
ca1b : 48               [ 3] 	pha
ca1c : da               [ 3] 	phx
                             
ca1d : 8691             [ 3] 	stx num_tmp
ca1f : 8592             [ 3] 	sta num_tmp+1
ca21 : c980             [ 2] 	cmp #0x80			; Negative?
ca23 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
ca25 : 200dca           [ 6] 	jsr twos_complement
ca28 :                       int_to_bcd_skip_neg
ca28 : 6485             [ 3] 	stz num_a
ca2a : 6486             [ 3] 	stz num_a+1
ca2c : 6487             [ 3] 	stz num_a+2
ca2e : 6488             [ 3] 	stz num_a+3
ca30 : a210             [ 2] 	ldx #16
ca32 : f8               [ 2] 	sed
ca33 :                       int_to_bcd_bit
ca33 : 0691             [ 5] 	asl num_tmp
ca35 : 2692             [ 5] 	rol num_tmp+1
ca37 : a585             [ 3] 	lda num_a
ca39 : 6585             [ 3] 	adc num_a
ca3b : 8585             [ 3] 	sta num_a
ca3d : a586             [ 3] 	lda num_a+1
ca3f : 6586             [ 3] 	adc num_a+1
ca41 : 8586             [ 3] 	sta num_a+1
ca43 : a587             [ 3] 	lda num_a+2
ca45 : 6587             [ 3] 	adc num_a+2
ca47 : 8587             [ 3] 	sta num_a+2
ca49 : ca               [ 2] 	dex
ca4a : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
ca4c : fa               [ 4] 	plx
ca4d : 68               [ 4] 	pla
ca4e : 28               [ 4] 	plp
ca4f : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
ca50 :                       word_to_bcd
ca50 : 08               [ 3] 	php
ca51 : 48               [ 3] 	pha
ca52 : da               [ 3] 	phx
                             
ca53 : 8691             [ 3] 	stx num_tmp
ca55 : 8592             [ 3] 	sta num_tmp+1
ca57 : 6485             [ 3] 	stz num_a
ca59 : 6486             [ 3] 	stz num_a+1
ca5b : 6487             [ 3] 	stz num_a+2
ca5d : 6488             [ 3] 	stz num_a+3
ca5f : a210             [ 2] 	ldx #16			; 16 binary bits
ca61 : f8               [ 2] 	sed
ca62 :                       word_to_bcd_bit
ca62 : 0691             [ 5] 	asl num_tmp
ca64 : 2692             [ 5] 	rol num_tmp+1
ca66 : a585             [ 3] 	lda num_a
ca68 : 6585             [ 3] 	adc num_a
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank1.s -----------------------------------

ca6a : 8585             [ 3] 	sta num_a
ca6c : a586             [ 3] 	lda num_a+1
ca6e : 6586             [ 3] 	adc num_a+1
ca70 : 8586             [ 3] 	sta num_a+1
ca72 : a587             [ 3] 	lda num_a+2
ca74 : 6587             [ 3] 	adc num_a+2
ca76 : 8587             [ 3] 	sta num_a+2
ca78 : ca               [ 2] 	dex
ca79 : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
ca7b : fa               [ 4] 	plx
ca7c : 68               [ 4] 	pla
ca7d : 28               [ 4] 	plp
ca7e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
ca7f :                       int_to_str_ch
ca7f : 290f             [ 2] 	and #0xf
ca81 : 0930             [ 2] 	ora #0x30					; Convert to ascii
ca83 : 4930             [ 2] 	eor #0x30					; Check if zero digit
ca85 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
ca87 : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
ca89 : 4930             [ 2] 	eor #0x30					; Restore A
ca8b : 60               [ 6] 	rts							; Return without storing anything
ca8c :                       int_to_str_nz
ca8c : 4930             [ 2] 	eor #0x30					; Restore A
ca8e : 999500           [ 5] 	sta num_buf,y
ca91 : c8               [ 2] 	iny
ca92 : 38               [ 2] 	sec							; Set C as a non-zero encountered
ca93 :                       int_to_str_ch_fin
ca93 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
ca94 :                       int_to_str
                             	_pushAXY
                             
ca97 : a000             [ 2] 	ldy #0						; first pos of num_buf
ca99 : 0900             [ 2] 	ora #0						; Test A for sign bit
ca9b : 08               [ 3] 	php							; Remember C bit of P
ca9c : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
ca9e : 200dca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
caa1 : 48               [ 3] 	pha							; Remember A
caa2 : a92d             [ 2] 	lda #'-'					; Put in negative sign
caa4 : 8595             [ 3] 	sta num_buf
caa6 : c8               [ 2] 	iny							; Start at second buffer pos
caa7 : 68               [ 4] 	pla							; Restore A
caa8 :                       int_to_str_skip_neg
caa8 : 2050ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
caab : a202             [ 2] 	ldx #2						; Start at BCD high byte
caad :                       int_str
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank1.s -----------------------------------

caad : 28               [ 4] 	plp							; Get C but immediately
caae : 08               [ 3] 	php							; Save C (due to loop check later)
caaf : b585             [ 4] 	lda num_a,x					; Get BCD digit
cab1 : 859c             [ 3] 	sta num_buf+7				; Save A it for the units later
cab3 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cab4 : 4a               [ 2] 	lsr a
cab5 : 4a               [ 2] 	lsr a
cab6 : 4a               [ 2] 	lsr a
cab7 : 28               [ 4] 	plp							; Get C
cab8 : 207fca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cabb : a59c             [ 3] 	lda num_buf+7				; Get A for the units
cabd : 207fca           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cac0 : 08               [ 3] 	php							; Save C
cac1 : ca               [ 2] 	dex
cac2 : 10e9             [ 3] 	bpl int_str
cac4 : 28               [ 4] 	plp							; Check C
cac5 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cac7 : a930             [ 2] 	lda #'0'					; Stuff a zero
cac9 : 8595             [ 3] 	sta num_buf					; Must be in first position..
cacb : c8               [ 2] 	iny
cacc :                       int_to_str_fin
cacc : a900             [ 2] 	lda #0						; Terminator
cace : 999500           [ 5] 	sta num_buf,y
cad1 : c8               [ 2] 	iny
                             	_pullAXY
                             
cad5 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank1.s -----------------------------------

                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank1.s -----------------------------------

                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cad6 :                       str_a_to_d
cad6 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cad7 :                       print_a_to_d
cad7 : 2094ca           [ 6] 	jsr int_to_str
cada : a000             [ 2] 	ldy #0
cadc :                       print_a_to_d_ch
cadc : b99500           [ 4] 	lda num_buf,y
cadf : f006             [ 3] 	beq print_a_to_d_fin
cae1 : 2060c5           [ 6] 	jsr io_put_ch
cae4 : c8               [ 2] 	iny
cae5 : d0f5             [ 3] 	bne print_a_to_d_ch
cae7 :                       print_a_to_d_fin
cae7 : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cae8 :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cae8 : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
caea : 9a               [ 2] 	txs
caeb : 4c43cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
caee :                       init_2					; init_ram will jump back to here
                             	
caee : 20f4ca           [ 6] 	jsr kernel_init
                             
caf1 : 4c9fc6           [ 3] 	jmp main
                             
caf4 :                       kernel_init
caf4 : 20f2c6           [ 6] 	jsr init_nmi		; Initialise NMI handling
caf7 : 200fc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cafa : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cafd : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cb00 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
                             
cb03 :                       kernel_test
cb03 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cb06 : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cb09 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cb0c : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cb0e : 48               [ 3] 	pha
cb0f : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cb11 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cb14 : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cb16 : aa               [ 2] 	tax					; Save the mode temporarily
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank1.s -----------------------------------

cb17 : 68               [ 4] 	pla					; Get the default mode from stack
cb18 : 8a               [ 2] 	txa					; And push the NV mode that was read
cb19 : 48               [ 3] 	pha
cb1a : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cb1c : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cb1f : 8521             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
cb21 :                       kernel_skip_nv	
cb21 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cb22 : 20c6c1           [ 6] 	jsr _gr_init_screen
cb25 : 2026c5           [ 6] 	jsr io_init			; Set default input/output device
cb28 : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cb36 : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cb39 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cb3c : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cb3f : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cb42 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cb43 :                       init_ram
cb43 : 6400             [ 3] 	stz 0x00			; Start at page 0
cb45 : 6401             [ 3] 	stz 0x01
cb47 : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cb49 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cb4b : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cb4d :                       init_ram_1
cb4d : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cb4f : 9004             [ 3] 	bcc init_ram_fill
cb51 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cb53 : 9005             [ 3] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cb55 :                       init_ram_fill
cb55 : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cb57 : c8               [ 2] 	iny
cb58 : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cb5a :                       init_ram_skip
cb5a : e8               [ 2] 	inx					; Increment page counter
cb5b : 8601             [ 3] 	stx 0x01			; Save to address pointer
cb5d : d0ee             [ 3] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cb5f : 4ceeca           [ 3] 	jmp init_2			; Carry on initialisation
                             
cb62 :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "utils\intmath.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank1.s -----------------------------------

                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
cb62 :                       int_add
cb62 : 18               [ 2] 	clc
cb63 : a585             [ 3] 	lda num_a
cb65 : 6589             [ 3] 	adc num_b
cb67 : 8585             [ 3] 	sta num_a
cb69 : a586             [ 3] 	lda num_a+1
cb6b : 658a             [ 3] 	adc num_b+1
cb6d : 8586             [ 3] 	sta num_a+1
cb6f : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
cb70 :                       int_sub
cb70 : 38               [ 2] 	sec
cb71 : a585             [ 3] 	lda num_a
cb73 : e589             [ 3] 	sbc num_b
cb75 : 8585             [ 3] 	sta num_a
cb77 : a586             [ 3] 	lda num_a+1
cb79 : 658a             [ 3] 	adc num_b+1
cb7b : 8586             [ 3] 	sta num_a+1
cb7d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
cb7e :                       int_swp
cb7e : a585             [ 3] 	lda num_a
cb80 : a689             [ 3] 	ldx num_b
cb82 : 8589             [ 3] 	sta num_b
cb84 : 8685             [ 3] 	stx num_a
cb86 : a586             [ 3] 	lda num_a+1
cb88 : a68a             [ 3] 	ldx num_b+1
cb8a : 858a             [ 3] 	sta num_b+1
cb8c : 8686             [ 3] 	stx num_a+1
cb8e : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
cb8f :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
cb97 : 6485             [ 3] 	stz num_a
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank1.s -----------------------------------

cb99 : 6486             [ 3] 	stz num_a+1
cb9b : a008             [ 2] 	ldy #8
cb9d :                       int_fast_mult_cycle
cb9d : 4689             [ 5] 	lsr num_b
cb9f : 900d             [ 3] 	bcc int_fast_mult_next
cba1 : 18               [ 2] 	clc
cba2 : a585             [ 3] 	lda num_a
cba4 : 6591             [ 3] 	adc num_tmp
cba6 : 8585             [ 3] 	sta num_a
cba8 : a586             [ 3] 	lda num_a+1
cbaa : 6592             [ 3] 	adc num_tmp+1
cbac : 8586             [ 3] 	sta num_a+1
cbae :                       int_fast_mult_next
cbae : 0691             [ 5] 	asl num_tmp
cbb0 : 2692             [ 5] 	rol num_tmp+1
cbb2 : 88               [ 2] 	dey
cbb3 : d0e8             [ 3] 	bne int_fast_mult_cycle
cbb5 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
cbb6 :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
cbbe : 6485             [ 3] 	stz num_a
cbc0 : 6486             [ 3] 	stz num_a+1
cbc2 : a010             [ 2] 	ldy #16
cbc4 :                       int_mult_cycle
cbc4 : 468a             [ 5] 	lsr num_b+1
cbc6 : 6689             [ 5] 	ror num_b
cbc8 : 900d             [ 3] 	bcc int_mult_next
cbca : 18               [ 2] 	clc
cbcb : a585             [ 3] 	lda num_a
cbcd : 6591             [ 3] 	adc num_tmp
cbcf : 8585             [ 3] 	sta num_a
cbd1 : a586             [ 3] 	lda num_a+1
cbd3 : 6592             [ 3] 	adc num_tmp+1
cbd5 : 8586             [ 3] 	sta num_a+1
cbd7 :                       int_mult_next
cbd7 : 0691             [ 5] 	asl num_tmp
cbd9 : 2692             [ 5] 	rol num_tmp+1
cbdb : 88               [ 2] 	dey
cbdc : d0e6             [ 3] 	bne int_mult_cycle
cbde : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
cbdf :                       int_div
                             	; adjust signs
cbdf : 6491             [ 3] 	stz num_tmp				; Assume all +ve
cbe1 : a586             [ 3] 	lda num_a+1				; Check A hi
cbe3 : 100f             [ 3] 	bpl int_div_skip_negA
cbe5 : e691             [ 5] 	inc num_tmp				; Record sign flip
cbe7 : 38               [ 2] 	sec						; 2's complement A
cbe8 : a900             [ 2] 	lda #0					; by 0-A
cbea : e585             [ 3] 	sbc num_a				; A is now +ve
cbec : 8585             [ 3] 	sta num_a
cbee : a900             [ 2] 	lda #0
cbf0 : e586             [ 3] 	sbc num_a+1
cbf2 : 8586             [ 3] 	sta num_a+1	
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank1.s -----------------------------------

cbf4 :                       int_div_skip_negA
cbf4 : a58a             [ 3] 	lda num_b+1				; Check B hi
cbf6 : 100f             [ 4] 	bpl int_div_skip_negB
cbf8 : e691             [ 5] 	inc num_tmp				; Record sign flip
cbfa : 38               [ 2] 	sec						; 2's complement B
cbfb : a900             [ 2] 	lda #0					; by 0-B
cbfd : e589             [ 3] 	sbc num_b				; B is now +ve
cbff : 8589             [ 3] 	sta num_b
cc01 : a900             [ 2] 	lda #0
cc03 : e58a             [ 3] 	sbc num_b+1
cc05 : 858a             [ 3] 	sta num_b+1
cc07 :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
cc07 : 648d             [ 3] 	stz num_x
cc09 : 648e             [ 3] 	stz num_x+1
                             	; 16 bit division
cc0b : a010             [ 2] 	ldy #16
cc0d :                       int_div_cycle
                             	; shift a left 1 bit
cc0d : 0685             [ 5] 	asl num_a
cc0f : 2686             [ 5] 	rol num_a+1
                             	; shift in to remainder
cc11 : 268d             [ 5] 	rol num_x
cc13 : 268e             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
cc15 : 38               [ 2] 	sec
cc16 : a58d             [ 3] 	lda num_x
cc18 : e589             [ 3] 	sbc num_b
cc1a : aa               [ 2] 	tax
cc1b : a58e             [ 3] 	lda num_x+1
cc1d : e58a             [ 3] 	sbc num_b+1
cc1f : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
cc21 : 868d             [ 3] 	stx num_x
cc23 : 858e             [ 3] 	sta num_x+1
cc25 : e685             [ 5] 	inc num_a
cc27 :                       int_div_skip
                             	; carry on for 16 bits
cc27 : 88               [ 2] 	dey
cc28 : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
cc2a : a591             [ 3] 	lda num_tmp
cc2c : 2901             [ 2] 	and #1
cc2e : f00d             [ 3] 	beq int_div_noflip
cc30 : 38               [ 2] 	sec						; 2's complement A
cc31 : a900             [ 2] 	lda #0					; by 0-A
cc33 : e585             [ 3] 	sbc num_a				; A is now +ve
cc35 : 8585             [ 3] 	sta num_a
cc37 : a900             [ 2] 	lda #0
cc39 : e586             [ 3] 	sbc num_a+1
cc3b : 8586             [ 3] 	sta num_a+1	
cc3d :                       int_div_noflip
cc3d : 60               [ 6] 	rts
                             	
                             
                             	include "dflat\dflat.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank1.s -----------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cc3e :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank1.s -----------------------------------

                             
                             	; ROM code
                             	code  
                             
cc3e :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
cc3e :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
cc4e :                       df_var_match_vnt
                             	; If reached top of VVT then not found
cc4e : a5e3             [ 3] 	lda df_tmpptra
cc50 : c5af             [ 3] 	cmp df_vvtstrt
cc52 : d006             [ 3] 	bne df_var_match_vnt_do
cc54 : a5e4             [ 3] 	lda df_tmpptra+1
cc56 : c5b0             [ 3] 	cmp df_vvtstrt+1
cc58 : f042             [ 3] 	beq df_var_find_no_vnt
cc5a :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
cc5a : a4be             [ 3] 	ldy df_linoff
cc5c : a200             [ 2] 	ldx #0
cc5e :                       df_var_match_vnt_sym
cc5e : b9000a           [ 4] 	lda df_linbuff,y
cc61 : c1e5             [ 6] 	cmp (df_tmpptrb,x)
cc63 : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
cc65 : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
cc6c : a1e5             [ 6] 	lda (df_tmpptrb,x)
cc6e : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
cc70 : b9000a           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
cc73 : 201cce           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
cc76 : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
cc78 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
cc78 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
cc7a : d025             [ 3] 	bne df_var_find_true
cc7c :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
cc7c : a1e5             [ 6] 	lda (df_tmpptrb,x)
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank1.s -----------------------------------

cc7e : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
cc86 : 4c7ccc           [ 3] 	jmp df_var_vnt_sym_nomatch
cc89 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
cc8f : 18               [ 2] 	clc
cc90 : a5e3             [ 3] 	lda df_tmpptra
cc92 : 6908             [ 2] 	adc #8
cc94 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
cc98 : e6e4             [ 5] 	inc df_tmpptra+1
cc9a : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
cc9c :                       df_var_find_no_vnt
cc9c : a900             [ 2] 	lda #0
cc9e : aa               [ 2] 	tax
cc9f : 38               [ 2] 	sec
cca0 : 60               [ 6] 	rts
                             
cca1 :                       df_var_find_true
                             	; Get slot address into x,a
cca1 : a6e3             [ 3] 	ldx df_tmpptra
cca3 : a5e4             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
cca5 : 84be             [ 3] 	sty df_linoff
cca7 : 18               [ 2] 	clc
cca8 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
cca9 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
cca9 : 38               [ 2] 	sec
ccaa : a5ab             [ 3] 	lda df_vntstrt
ccac : e908             [ 2] 	sbc #DFVVT_SZ
ccae : 85ab             [ 3] 	sta df_vntstrt
ccb0 : a5ac             [ 3] 	lda df_vntstrt+1
ccb2 : e900             [ 2] 	sbc #0
ccb4 : 85ac             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
ccb6 : 38               [ 2] 	sec
ccb7 : a5ad             [ 3] 	lda df_vntend
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank1.s -----------------------------------

ccb9 : e908             [ 2] 	sbc #DFVVT_SZ
ccbb : 85ad             [ 3] 	sta df_vntend
ccbd : a5ae             [ 3] 	lda df_vntend+1
ccbf : e900             [ 2] 	sbc #0
ccc1 : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
cccb :                       df_var_move_byte
                             	; When pointer = vntend then done
cccb : a5e3             [ 3] 	lda df_tmpptra
cccd : c5ad             [ 3] 	cmp df_vntend
cccf : d006             [ 3] 	bne df_var_move_byte_do
ccd1 : a5e4             [ 3] 	lda df_tmpptra+1
ccd3 : c5ae             [ 3] 	cmp df_vntend+1
ccd5 : f011             [ 3] 	beq df_var_move_byte_fin
ccd7 :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
ccd7 : a008             [ 2] 	ldy #DFVVT_SZ
ccd9 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
ccdb : a000             [ 2] 	ldy #0
ccdd : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
cce5 : 4ccbcc           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
cce8 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
cce8 : 8645             [ 3] 	stx tmp_d
ccea : 38               [ 2] 	sec
cceb : a5ab             [ 3] 	lda df_vntstrt
cced : e545             [ 3] 	sbc tmp_d
ccef : 85ab             [ 3] 	sta df_vntstrt
ccf1 : a5ac             [ 3] 	lda df_vntstrt+1
ccf3 : e900             [ 2] 	sbc #0
ccf5 : 85ac             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
ccff : e6b3             [ 5] 	inc df_varcnt
cd01 : 18               [ 2] 	clc
cd02 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Iterate through a valid variable name
                             ;* starts with alpha, then any number of
                             ;* alphanums.
                             ;****************************************
cd03 :                       df_var_countlen
                             	; count alpha nums
cd03 : c8               [ 2] 	iny
cd04 : e8               [ 2] 	inx
cd05 : b9000a           [ 4] 	lda df_linbuff,y
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank1.s -----------------------------------

                             	; first char has to be alpha, rest can be alpha-
cd08 : e000             [ 2] 	cpx #0
cd0a : d006             [ 3] 	bne df_var_countlen_alphanum
cd0c : 200fce           [ 6] 	jsr df_tk_isalpha
cd0f : 4c15cd           [ 3] 	jmp df_var_countlen_loop
cd12 :                       df_var_countlen_alphanum
cd12 : 201cce           [ 6] 	jsr df_tk_isalphanum
cd15 :                       df_var_countlen_loop
cd15 : b0ec             [ 3] 	bcs df_var_countlen
cd17 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
cd18 :                       df_var_analyse
                             	; start at the current buffer position
cd18 : a4be             [ 3] 	ldy df_linoff
                             	
                             	; actual number of alpha nums = -1 to start
cd1a : a2ff             [ 2] 	ldx #-1
                             
                             	; Default type is INT
cd1c : a901             [ 2] 	lda #DFVVT_INT
cd1e : 85e3             [ 3] 	sta df_tmpptra
                             	
                             	; check for PROC prefix
cd20 : b9000a           [ 4] 	lda df_linbuff,y
cd23 : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
cd25 : d011             [ 3] 	bne df_var_not_proc
                             	; analyse for proc variable names
                             	; else set type to PROC
cd27 : a940             [ 2] 	lda #DFVVT_PROC
cd29 : 85e3             [ 3] 	sta df_tmpptra
cd2b : 2003cd           [ 6] 	jsr df_var_countlen
                             	; Length must be >=1
cd2e : e001             [ 2] 	cpx #1
cd30 : 9004             [ 3] 	bcc df_var_analyse_fatal_err
                             	; Next char has to be '('
cd32 : c928             [ 2] 	cmp #'('
cd34 : f022             [ 3] 	beq df_var_finalise_len
cd36 :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
                             	; Analyse for non-proc variable names
cd38 :                       df_var_not_proc
                             	; go back on pos on index as loop always does in
cd38 : 88               [ 2] 	dey
cd39 : 2003cd           [ 6] 	jsr df_var_countlen
cd3c : e000             [ 2] 	cpx #0
cd3e : d002             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
cd40 : 38               [ 2] 	sec
cd41 : 60               [ 6] 	rts
                             	; check for post qualifiers e.g. $
cd42 :                       df_var_analyse_chk_post
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank1.s -----------------------------------

                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ; Set to INT type although it is the default alre
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
cd42 :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
cd42 : c924             [ 2] 	cmp #'$'
cd44 : d005             [ 3] 	bne df_var_analyse_chk_arry
                             	; Set to STRING type
cd46 : a904             [ 2] 	lda #DFVVT_STR
cd48 : 85e3             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
cd4a : c8               [ 2] 	iny
cd4b :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
cd4b : b9000a           [ 4] 	lda df_linbuff,y
cd4e : c95b             [ 2] 	cmp #'['
cd50 : d006             [ 3] 	bne df_var_finalise_len
cd52 : a5e3             [ 3] 	lda df_tmpptra
cd54 : 0980             [ 2] 	ora #DFVVT_PTR
cd56 : 85e3             [ 3] 	sta df_tmpptra
cd58 :                       df_var_finalise_len
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
cd58 : 98               [ 2] 	tya
cd59 : 38               [ 2] 	sec
cd5a : e5be             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
cd5c : aa               [ 2] 	tax
                             	; put type in A
cd5d : a5e3             [ 3] 	lda df_tmpptra
cd5f : 18               [ 2] 	clc
cd60 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
cd61 :                       df_var_findcreate
                             	; save mask
cd61 : 48               [ 3] 	pha
cd62 : 203ecc           [ 6] 	jsr df_var_find
cd65 : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
cd67 : 68               [ 4] 	pla
cd68 : 48               [ 3] 	pha
                             	; don't check mask if zero
cd69 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
cd6b : 68               [ 4] 	pla
cd6c : a000             [ 2] 	ldy #DFVVT_TYPE
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank1.s -----------------------------------

cd6e : 31e3             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
cd70 : f019             [ 3] 	beq df_var_findcreate_err
cd72 : 48               [ 3] 	pha		; Dummy push to match the pla
cd73 :                       df_var_findcreate_found
                             	; discard mask
cd73 : 68               [ 4] 	pla	
                             	; put slot address in x,a
cd74 : a6e3             [ 3] 	ldx df_tmpptra
cd76 : a5e4             [ 3] 	lda df_tmpptra+1
cd78 : 18               [ 2] 	clc
cd79 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
cd7a :                       df_var_findcreate_create
                             	; find type (A) and length (X)
cd7a : 2018cd           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
cd7d : 85e3             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
cd7f : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
cd81 : 68               [ 4] 	pla
cd82 : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
cd84 : 25e3             [ 3] 	and df_tmpptra
                             	; mask match is ok
cd86 : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
cd88 : f001             [ 3] 	beq df_var_findcreate_err
cd8a :                       df_var_findcreate_errp
cd8a : 68               [ 4] 	pla
cd8b :                       df_var_findcreate_err
cd8b : 38               [ 2] 	sec
cd8c : 60               [ 6] 	rts
                             
cd8d :                       df_var_analyse_ok
                             	; extra space for zero terminator
cd8d : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
cd8e : a5e3             [ 3] 	lda df_tmpptra
cd90 : 48               [ 3] 	pha
cd91 : 8a               [ 2] 	txa
cd92 : 48               [ 3] 	pha
                             	
cd93 : 20a9cc           [ 6] 	jsr df_var_insert_space
cd96 : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
cd9a :                       df_var_initialise_var
cd9a : 68               [ 4] 	pla
cd9b : 85e7             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
cd9d : 68               [ 4] 	pla							; type
cd9e : a000             [ 2] 	ldy #DFVVT_TYPE
cda0 : 91b1             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
cda2 : a900             [ 2] 	lda #0						; zero the rest
cda4 : a007             [ 2] 	ldy #7
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank1.s -----------------------------------

cda6 :                       df_var_zero_vnt
cda6 : 91b1             [ 5] 	sta (df_vvtend),y
cda8 : 88               [ 2] 	dey
cda9 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
cdab : c6e7             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
cdad : a6be             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
cdaf :                       df_var_findcreate_copy
cdaf : bd000a           [ 4] 	lda df_linbuff,x
cdb2 : 91ab             [ 5] 	sta (df_vntstrt),y
cdb4 : e8               [ 2] 	inx
cdb5 : c8               [ 2] 	iny
cdb6 : c6e7             [ 5] 	dec df_tmpptrc
cdb8 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
cdba : a900             [ 2] 	lda #0
cdbc : 91ab             [ 5] 	sta (df_vntstrt),y
                             
cdbe : 86be             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
cdc0 : a6b1             [ 3] 	ldx df_vvtend
cdc2 : a5b2             [ 3] 	lda df_vvtend+1
                             	
cdc4 : 18               [ 2] 	clc
cdc5 : 60               [ 6] 	rts
                             	
cdc6 :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank1.s -----------------------------------

                             	code
                             
cdc6 :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
cdc6 :                       df_tk_peek_buf
cdc6 : a4be             [ 3] 	ldy df_linoff
cdc8 : b9000a           [ 4] 	lda df_linbuff,y
cdcb : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
cdcc :                       df_tk_get_buf
cdcc : a4be             [ 3] 	ldy df_linoff
cdce : b9000a           [ 4] 	lda df_linbuff,y
cdd1 : f003             [ 3] 	beq df_tk_get_buf_null
cdd3 : c8               [ 2] 	iny
cdd4 : 84be             [ 3] 	sty df_linoff
cdd6 :                       df_tk_get_buf_null
cdd6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
cdd7 :                       df_tk_put_tok
cdd7 : a4bf             [ 3] 	ldy df_tokoff
cdd9 : 99800a           [ 5] 	sta df_tokbuff,y
cddc : c8               [ 2] 	iny
cddd : 3004             [ 3] 	bmi df_tk_put_overflow
cddf : 84bf             [ 3] 	sty df_tokoff
cde1 : 18               [ 2] 	clc
cde2 : 60               [ 6] 	rts
cde3 :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cde5 :                       df_tk_isdigit
cde5 : c93a             [ 2] 	cmp #'9'+1
cde7 : b005             [ 3] 	bcs df_tk_isdigit_false
cde9 : c930             [ 2] 	cmp #'0'
cdeb : 9001             [ 3] 	bcc df_tk_isdigit_false
cded : 60               [ 6] 	rts						; C must be 1
cdee :                       df_tk_isdigit_false
cdee : 18               [ 2] 	clc
cdef : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank1.s -----------------------------------

                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdf0 :                       df_tk_isbin
cdf0 : c930             [ 2] 	cmp #'0'
cdf2 : f005             [ 3] 	beq df_tk_isbin_true	; C=1
cdf4 : c931             [ 2] 	cmp #'1'
cdf6 : f001             [ 3] 	beq df_tk_isbin_true	; C=1
cdf8 : 18               [ 2] 	clc
cdf9 :                       df_tk_isbin_true
cdf9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
cdfa :                       df_tk_ishex
cdfa : 48               [ 3] 	pha
cdfb : 20e5cd           [ 6] 	jsr df_tk_isdigit
cdfe : b00a             [ 4] 	bcs df_tk_ishex_truep
ce00 : 0920             [ 2] 	ora #0x20
ce02 : c967             [ 2] 	cmp #'f'+1
ce04 : b006             [ 3] 	bcs df_tk_ishex_false
ce06 : c961             [ 2] 	cmp #'a'
ce08 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
ce0a :                       df_tk_ishex_truep
ce0a : 68               [ 4] 	pla
ce0b : 60               [ 6] 	rts
ce0c :                       df_tk_ishex_false
ce0c :                       df_tk_isalpha_false
ce0c : 18               [ 2] 	clc
ce0d : 68               [ 4] 	pla
ce0e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce0f :                       df_tk_isalpha
ce0f : 48               [ 3] 	pha
ce10 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
ce12 : c97b             [ 2] 	cmp #'z'+1
ce14 : b0f6             [ 3] 	bcs df_tk_isalpha_false
ce16 : c961             [ 2] 	cmp #'a'
ce18 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
ce1a : 68               [ 4] 	pla
ce1b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce1c :                       df_tk_isalphanum
ce1c : 200fce           [ 6] 	jsr df_tk_isalpha
ce1f : 90c4             [ 4] 	bcc df_tk_isdigit
ce21 :                       df_tk_rts1				; branch to this RTS where possible
ce21 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce22 :                       df_tk_isproc
ce22 : c95f             [ 2] 	cmp #'_'
ce24 : f001             [ 3] 	beq df_tk_isproc_true	; C=1
ce26 : 18               [ 2] 	clc
ce27 :                       df_tk_isproc_true
ce27 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ce28 :                       df_tk_skip_ws
ce28 :                       df_tk_ws_loop1
ce28 : 20c6cd           [ 6] 	jsr df_tk_peek_buf
ce2b : 2043ce           [ 6] 	jsr df_tk_isws
ce2e : 90f1             [ 3] 	bcc df_tk_rts1
ce30 : e6be             [ 5] 	inc df_linoff
ce32 : 20d7cd           [ 6] 	jsr df_tk_put_tok
ce35 : 90f1             [ 3] 	bcc df_tk_skip_ws		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_strip_ws
                             ;* Strip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ce37 :                       df_tk_strip_ws
ce37 : 20c6cd           [ 6] 	jsr df_tk_peek_buf
ce3a : 2043ce           [ 6] 	jsr df_tk_isws
ce3d : 90e2             [ 3] 	bcc df_tk_rts1
ce3f : e6be             [ 5] 	inc df_linoff
ce41 : d0f4             [ 3] 	bne df_tk_strip_ws		; Always as linoff is not ze
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce43 :                       df_tk_isws
ce43 : c920             [ 2] 	cmp #' '
ce45 : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
ce47 : 60               [ 6] 	rts
ce48 :                       df_tk_isws_false
ce48 :                       df_tk_expectok
ce48 : 18               [ 2] 	clc
ce49 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
ce4a :                       df_tk_expect
ce4a : 48               [ 3] 	pha
                             	; skip ws
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank1.s -----------------------------------

ce4b : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
ce4e : 68               [ 4] 	pla
ce4f : a4be             [ 3] 	ldy df_linoff
ce51 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
ce54 : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
ce56 :                       df_tk_num_err
ce56 :                       df_tk_char_err
ce56 : 38               [ 2] 	sec
ce57 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
ce58 :                       df_tk_expect_tok
ce58 : 204ace           [ 6] 	jsr df_tk_expect
ce5b : b0c4             [ 3] 	bcs df_tk_rts1
ce5d : 20cccd           [ 6] 	jsr df_tk_get_buf
ce60 : 4cd7cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
ce63 :                       df_tk_expect_tok_err
ce63 : 2058ce           [ 6] 	jsr df_tk_expect_tok
ce66 : 90b9             [ 3] 	bcc df_tk_rts1
ce68 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
ce6a :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
ce6a : 18               [ 2] 	clc
ce6b : a900             [ 2] 	lda #lo(df_linbuff)
ce6d : 65be             [ 3] 	adc df_linoff
ce6f : aa               [ 2] 	tax
ce70 : a90a             [ 2] 	lda #hi(df_linbuff)
ce72 : 6900             [ 2] 	adc #0
ce74 : a000             [ 2] 	ldy #0				; any numeric format
ce76 : 2098c8           [ 6] 	jsr con_n_to_a
ce79 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
ce7b : a8               [ 2] 	tay
ce7c : 18               [ 2] 	clc
ce7d : 8a               [ 2] 	txa
ce7e : 65be             [ 3] 	adc df_linoff
ce80 : 85be             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
ce82 : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank1.s -----------------------------------

ce83 : c901             [ 2] 	cmp #NUM_DEC
ce85 : d004             [ 3] 	bne df_tk_num_hexbin
ce87 : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
ce89 : d016             [ 3] 	bne df_tk_num_put
ce8b :                       df_tk_num_hexbin
ce8b : c902             [ 2] 	cmp #NUM_HEX
ce8d : d00a             [ 3] 	bne df_tk_num_bin
ce8f : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
ce91 : e005             [ 2] 	cpx #5				; If >4 chars then INT
ce93 : 900c             [ 3] 	bcc df_tk_num_put
ce95 : a90a             [ 2] 	lda #DFTK_INTHEX
ce97 : d008             [ 3] 	bne df_tk_num_put
ce99 :                       df_tk_num_bin
ce99 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
ce9b : e00b             [ 2] 	cpx #11				; If >10 chars then INT
ce9d : 9002             [ 3] 	bcc df_tk_num_put
ce9f : a90b             [ 2] 	lda #DFTK_INTBIN
cea1 :                       df_tk_num_put
cea1 : 20d7cd           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
cea4 : a585             [ 3] 	lda num_a
cea6 : 20d7cd           [ 6] 	jsr df_tk_put_tok
cea9 : a586             [ 3] 	lda num_a+1
ceab : 4cd7cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
ceae :                       df_tk_char
                             	; skip the first quote
ceae : 20cccd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
ceb1 : a900             [ 2] 	lda #DFTK_CHR
ceb3 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
ceb6 : 20cccd           [ 6] 	jsr df_tk_get_buf
ceb9 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
cebc : a900             [ 2] 	lda #0
cebe : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
cec1 : 20cccd           [ 6] 	jsr df_tk_get_buf
cec4 : c927             [ 2] 	cmp #0x27
cec6 : d08e             [ 3] 	bne df_tk_char_err
cec8 : 18               [ 2] 	clc
cec9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
ceca :                       df_tk_str
                             	; skip the first quote
ceca : 20cccd           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cecd : a910             [ 2] 	lda #DFTK_STRLIT
cecf : 20d7cd           [ 6] 	jsr df_tk_put_tok
ced2 :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
ced2 : 20cccd           [ 6] 	jsr df_tk_get_buf
ced5 : c900             [ 2] 	cmp #0
ced7 : f011             [ 3] 	beq df_tk_str_err
ced9 : c922             [ 2] 	cmp #0x22
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank1.s -----------------------------------

cedb : f006             [ 3] 	beq df_tk_str_don
cedd : 20d7cd           [ 6] 	jsr df_tk_put_tok
cee0 : 4cd2ce           [ 3] 	jmp df_tk_str_ch
cee3 :                       df_tk_str_don
                             	; zero terminated strings
cee3 : a900             [ 2] 	lda #0
cee5 : 4cd7cd           [ 3] 	jmp df_tk_put_tok
cee8 :                       df_tk_var_noarry
cee8 : 18               [ 2] 	clc
cee9 : 60               [ 6] 	rts
ceea :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
ceec :                       df_tk_const
ceec : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
ceef : 20c6cd           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
cef2 : c92d             [ 2] 	cmp #'-'
cef4 : f005             [ 3] 	beq df_tk_const_try_num
cef6 : 20e5cd           [ 6] 	jsr df_tk_isdigit
cef9 : 9003             [ 3] 	bcc df_tk_const_try_str
cefb :                       df_tk_const_try_num
cefb : 4c6ace           [ 3] 	jmp df_tk_num
cefe :                       df_tk_const_try_str
                             	; check for double quote
cefe : c922             [ 2] 	cmp #0x22
cf00 : d003             [ 3] 	bne df_tk_const_try_char
cf02 : 4ccace           [ 3] 	jmp df_tk_str
cf05 :                       df_tk_const_try_char
                             	; check for single apostrophe
cf05 : c927             [ 2] 	cmp #0x27
cf07 : d003             [ 3] 	bne df_tk_const_err
cf09 : 4caece           [ 3] 	jmp df_tk_char
cf0c :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
cf0e :                       df_tk_var
                             	; Find or create variable, address in X,A
cf0e : 2061cd           [ 6] 	jsr df_var_findcreate
cf11 : 9001             [ 3] 	bcc df_tk_var_cont
cf13 : 60               [ 6] 	rts
cf14 :                       df_tk_var_cont
                             	; Save X,A for later
cf14 : 48               [ 3] 	pha
cf15 : 8a               [ 2] 	txa
cf16 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf17 : a911             [ 2] 	lda #DFTK_VAR
cf19 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf1c : 68               [ 4] 	pla
cf1d : 20d7cd           [ 6] 	jsr df_tk_put_tok
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank1.s -----------------------------------

cf20 : 68               [ 4] 	pla
cf21 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
cf24 :                       df_tk_var_ck
                             	; check if array procesing needed
cf24 : a95b             [ 2] 	lda #'['
cf26 : 2058ce           [ 6] 	jsr df_tk_expect_tok
cf29 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
cf2b : 4cd5cf           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
cf2e :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
cf2e : 20c6cd           [ 6] 	jsr df_tk_peek_buf
cf31 : c926             [ 2] 	cmp #DFTK_VARPARM
cf33 : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
cf35 : 20cccd           [ 6] 	jsr df_tk_get_buf
cf38 : 20d7cd           [ 6] 	jsr df_tk_put_tok
cf3b :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
cf3b : a900             [ 2] 	lda #0
cf3d : 4c0ecf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
cf40 :                       df_tk_localvar
                             	; Find or create variable, index in A
cf40 : 2061cd           [ 6] 	jsr df_var_findcreate
cf43 : 9001             [ 3] 	bcc df_tk_localvar_cont
cf45 : 60               [ 6] 	rts
cf46 :                       df_tk_localvar_cont
                             	; Save variable address for later
cf46 : 48               [ 3] 	pha
cf47 : 8a               [ 2] 	txa
cf48 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cf49 : a911             [ 2] 	lda #DFTK_VAR
cf4b : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
cf4e : 68               [ 4] 	pla
cf4f : 20d7cd           [ 6] 	jsr df_tk_put_tok
cf52 : 68               [ 4] 	pla
cf53 : 4cd7cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
cf56 :                       df_tk_arrvar
                             	; Like a local var at first
cf56 : 2040cf           [ 6] 	jsr df_tk_localvar
                             	; but must be array
cf59 : a95b             [ 2] 	lda #'['
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank1.s -----------------------------------

cf5b : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
cf5e : 4cd5cf           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
cf61 :                       df_tk_proc
cf61 : 85cd             [ 3] 	sta df_procmode
cf63 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
cf66 : a940             [ 2] 	lda #DFVVT_PROC
cf68 : 2061cd           [ 6] 	jsr df_var_findcreate
cf6b : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
cf6d : 86d0             [ 3] 	stx df_procptr
cf6f : 85d1             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
cf71 : a912             [ 2] 	lda #DFTK_PROC
cf73 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cf76 : a5d0             [ 3] 	lda df_procptr
cf78 : 20d7cd           [ 6] 	jsr df_tk_put_tok
cf7b : a5d1             [ 3] 	lda df_procptr+1
cf7d : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
cf80 : a900             [ 2] 	lda #0
cf82 : 85ce             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
cf84 : a928             [ 2] 	lda #'('
cf86 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
cf89 : 20c6cd           [ 6] 	jsr df_tk_peek_buf
cf8c : c929             [ 2] 	cmp #')'
cf8e : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
cf90 :                       df_tk_proc_parms
cf90 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
cf93 : a5cd             [ 3] 	lda df_procmode
cf95 : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
cf97 : 202ecf           [ 6] 	jsr df_tk_parm
cf9a : 4ca6cf           [ 3] 	jmp df_tk_proc_skip_call
cf9d :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
cf9d : a5ce             [ 3] 	lda df_procargs	; procargs could be impacted ins
cf9f : 48               [ 3] 	pha
cfa0 : 2055d0           [ 6] 	jsr df_tk_expression
cfa3 : 68               [ 4] 	pla
cfa4 : 85ce             [ 3] 	sta df_procargs
cfa6 :                       df_tk_proc_skip_call
cfa6 : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
cfa8 : e6ce             [ 5] 	inc df_procargs
                             	; what is next non ws char
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank1.s -----------------------------------

cfaa : 2028ce           [ 6] 	jsr df_tk_skip_ws
cfad : c92c             [ 2] 	cmp #','
cfaf : f006             [ 3] 	beq df_tk_proc_comma
cfb1 : c929             [ 2] 	cmp #')'
cfb3 : d01d             [ 3] 	bne df_tk_proc_errp
cfb5 : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
cfb7 :                       df_tk_proc_comma
cfb7 : 20cccd           [ 6] 	jsr df_tk_get_buf
cfba : 20d7cd           [ 6] 	jsr df_tk_put_tok
cfbd : 4c90cf           [ 3] 	jmp df_tk_proc_parms
cfc0 :                       df_tk_proc_noparm
                             	; consume the close bracket
cfc0 : 20cccd           [ 6] 	jsr df_tk_get_buf
cfc3 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
cfc6 : a6cd             [ 3] 	ldx df_procmode
cfc8 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
cfca : a004             [ 2] 	ldy #DFVVT_DIM2
cfcc : a5ce             [ 3] 	lda df_procargs
cfce : 91d0             [ 5] 	sta (df_procptr),y
cfd0 :                       df_tk_proc_skip_args
cfd0 : 18               [ 2] 	clc
cfd1 : 60               [ 6] 	rts
cfd2 :                       df_tk_proc_errp
cfd2 : 68               [ 4] 	pla
cfd3 :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
cfd5 :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
cfd5 : 2055d0           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
cfd8 : a92c             [ 2] 	lda #','
cfda : 2058ce           [ 6] 	jsr df_tk_expect_tok
cfdd : b003             [ 3] 	bcs df_tk_narry_end
cfdf : 2055d0           [ 6] 	jsr df_tk_expression
cfe2 :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
cfe2 : a95d             [ 2] 	lda #']'
cfe4 : 4c63ce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
cfe7 :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
cfe7 : 2055d0           [ 6] 	jsr df_tk_expression
cfea : a929             [ 2] 	lda #')'
cfec : 4c63ce           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
cfef :                       df_tk_nterm_proc
                             	; call mode
cfef : a901             [ 2] 	lda #1
cff1 : 4c61cf           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
cff4 :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
cff4 : 2028ce           [ 6] 	jsr df_tk_skip_ws
cff7 : c900             [ 2] 	cmp #0
cff9 : f004             [ 3] 	beq df_tk_nterm_done
cffb : c93a             [ 2] 	cmp #':'
cffd : d002             [ 4] 	bne df_tk_nterm_cont
cfff :                       df_tk_nterm_done
cfff :                       df_tk_nop_false
cfff : 38               [ 2] 	sec
d000 : 60               [ 6] 	rts
d001 :                       df_tk_nterm_cont
                             	; if open bracket then process it
d001 : c928             [ 2] 	cmp #'('
d003 : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d005 : 20cccd           [ 6] 	jsr df_tk_get_buf
d008 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d00b : 4ce7cf           [ 3] 	jmp df_tk_nbrkt
d00e :                       df_tk_nterm_tryfn
d00e : 48               [ 3] 	pha
                             	; try decoding a built-in function
d00f : a902             [ 2] 	lda #DFTK_FN
d011 : 2048d1           [ 6] 	jsr df_tk_matchtok
d014 : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d016 : 68               [ 4] 	pla
d017 : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d018 : 8a               [ 2] 	txa
d019 : 0980             [ 2] 	ora #0x80
d01b : 20d7cd           [ 6] 	jsr df_tk_put_tok
d01e : 201ad1           [ 6] 	jsr df_tk_exec_parser
d021 : b01b             [ 3] 	bcs df_tk_nterm_err
d023 : 60               [ 6] 	rts
d024 :                       df_tk_nterm_try_proc
d024 : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d025 : 2022ce           [ 6] 	jsr df_tk_isproc
d028 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d02a : 20efcf           [ 6] 	jsr df_tk_nterm_proc
d02d : b00f             [ 3] 	bcs df_tk_nterm_err
d02f : 60               [ 6] 	rts
d030 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d030 : a900             [ 2] 	lda #0
d032 : 200ecf           [ 6] 	jsr df_tk_var
d035 : b001             [ 3] 	bcs df_tk_nterm_try_const
d037 : 60               [ 6] 	rts
d038 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank1.s -----------------------------------

d038 : 20ecce           [ 6] 	jsr df_tk_const
d03b : b001             [ 3] 	bcs df_tk_nterm_err
d03d : 60               [ 6] 	rts
d03e :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d040 :                       df_tk_nop
d040 : 2028ce           [ 6] 	jsr df_tk_skip_ws
d043 : c900             [ 2] 	cmp #0
d045 : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d047 : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d049 : 2048d1           [ 6] 	jsr df_tk_matchtok
d04c : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d04e : 0980             [ 2] 	ora #DFTK_TOKEN
d050 : 20d7cd           [ 6] 	jsr df_tk_put_tok
d053 : 18               [ 2] 	clc
d054 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d055 :                       df_tk_expression
                             	; Tokenise a numeric term
d055 : 20f4cf           [ 6] 	jsr df_tk_nterm
d058 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d05a : 2040d0           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d05d : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d05f :                       df_tk_not_eos
d05f : 18               [ 2] 	clc
d060 :                       df_tk_expre_err
d060 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d061 :                       df_tk_tok_expression
d061 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
d064 : 4c55d0           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d067 :                       df_tk_isEOS
d067 : a93a             [ 2] 	lda #':'
d069 : 2058ce           [ 6] 	jsr df_tk_expect_tok
d06c : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d06e : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank1.s -----------------------------------

d070 : a4c1             [ 3] 	ldy df_nxtstidx
d072 : 99800a           [ 5] 	sta df_tokbuff,y
d075 : 38               [ 2] 	sec
d076 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d077 :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d077 : a981             [ 2] 	lda #0x81
d079 : 20d7cd           [ 6] 	jsr df_tk_put_tok
d07c : a901             [ 2] 	lda #1
d07e : 4c61cf           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d081 :                       df_tk_parse_command
                             	; only looking for keywords
d081 : a901             [ 2] 	lda #DFTK_KW
d083 : 2048d1           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d086 : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d088 : 0980             [ 2] 	ora #0x80
d08a : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d08d : a5c5             [ 3] 	lda df_symoff
d08f : 201ad1           [ 6] 	jsr df_tk_exec_parser
d092 : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d094 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d097 :                       df_tk_parse_command_done
d097 : 18               [ 2] 	clc
d098 :                       df_tk_parse_command_err
d098 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d099 :                       df_lexer_line
d099 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d09b : 85be             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d09d : 85bf             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d09f : a980             [ 2] 	lda #lo(df_tokbuff)
d0a1 : 85c8             [ 3] 	sta df_currlin
d0a3 : a90a             [ 2] 	lda #hi(df_tokbuff)
d0a5 : 85c9             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d0a7 : a900             [ 2] 	lda #0
d0a9 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank1.s -----------------------------------

                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d0ac : 20c6cd           [ 6] 	jsr df_tk_peek_buf
d0af : 20e5cd           [ 6] 	jsr df_tk_isdigit
d0b2 : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d0b4 : 2029d1           [ 6] 	jsr df_tk_linenum
d0b7 : 4cc2d0           [ 3] 	jmp df_tk_body
d0ba :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d0ba : a900             [ 2] 	lda #0
d0bc : 20d7cd           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d0bf : 20d7cd           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d0c2 :                       df_tk_body
                             	; Offset for next statement
d0c2 : a5bf             [ 3] 	lda df_tokoff
d0c4 : 85c1             [ 3] 	sta df_nxtstidx
d0c6 : a900             [ 2] 	lda #0
d0c8 : 20d7cd           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d0cb : 20c6cd           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d0ce : 2043ce           [ 6] 	jsr df_tk_isws					; and first character
d0d1 : 9002             [ 3] 	bcc df_tk_skip_1_spc
d0d3 : e6be             [ 5] 	inc df_linoff					; Don't tokenise this single s
d0d5 :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d0d5 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d0d8 : c900             [ 2] 	cmp #0
d0da : f03a             [ 4] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d0dc : 2022ce           [ 6] 	jsr df_tk_isproc
d0df : 9006             [ 3] 	bcc df_tk_try_command
d0e1 : 2077d0           [ 6] 	jsr df_tk_parse_user_proc
d0e4 : 4cf8d0           [ 3] 	jmp df_tk_done
d0e7 :                       df_tk_try_command
                             	; try  a keyword
d0e7 : 2081d0           [ 6] 	jsr df_tk_parse_command
d0ea : b002             [ 3] 	bcs	df_tk_try_asm
d0ec : 900a             [ 3] 	bcc df_tk_done
d0ee :                       df_tk_try_asm
                             	; try an asm keyword
d0ee : 20bdf3           [ 6] 	jsr df_tk_asm_parse_command
d0f1 : 9005             [ 3] 	bcc df_tk_done
d0f3 :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d0f3 : 206cd5           [ 6] 	jsr df_tk_assign
d0f6 : b020             [ 4] 	bcs	df_tk_parseerror
d0f8 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d0f8 : 2067d0           [ 6] 	jsr df_tk_isEOS
d0fb : b0c5             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d0fd : 20c6cd           [ 6] 	jsr df_tk_peek_buf
d100 : c900             [ 2] 	cmp #0
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank1.s -----------------------------------

d102 : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
d104 : a5bf             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d106 : a4c1             [ 3] 	ldy df_nxtstidx
d108 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d10b : a4bf             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d10d : a900             [ 2] 	lda #0
d10f : 99800a           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d112 : 98               [ 2] 	tya
d113 : 8d800a           [ 4] 	sta df_tokbuff
d116 :                       df_tk_line_empty
d116 : 18               [ 2] 	clc
d117 : 60               [ 6] 	rts
d118 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d11a :                       df_tk_exec_parser
d11a : 0a               [ 2] 	asl a
d11b : aa               [ 2] 	tax
d11c : bddad3           [ 4] 	lda df_tk_tokenjmp,x
d11f : 85e3             [ 3] 	sta df_tmpptra
d121 : bddbd3           [ 4] 	lda df_tk_tokenjmp+1,x
d124 : 85e4             [ 3] 	sta df_tmpptra+1
d126 : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d129 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d129 : 18               [ 2] 	clc
d12a : a900             [ 2] 	lda #lo(df_linbuff)
d12c : 65be             [ 3] 	adc df_linoff
d12e : aa               [ 2] 	tax
d12f : a90a             [ 2] 	lda #hi(df_linbuff)
d131 : 6900             [ 2] 	adc #0
d133 : a001             [ 2] 	ldy #1			; Decimal format only
d135 : 2098c8           [ 6] 	jsr con_n_to_a
d138 : 18               [ 2] 	clc
d139 : 8a               [ 2] 	txa
d13a : 65be             [ 3] 	adc df_linoff
d13c : 85be             [ 3] 	sta df_linoff
                             	; Now save line number
d13e : a585             [ 3] 	lda num_a
d140 : 20d7cd           [ 6] 	jsr df_tk_put_tok
d143 : a586             [ 3] 	lda num_a+1
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank1.s -----------------------------------

d145 : 4cd7cd           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d148 :                       df_tk_matchtok
                             	; save the mask to check types against
d148 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d149 : a9ca             [ 2] 	lda #lo(df_tokensyms)
d14b : 85c3             [ 3] 	sta df_symtab
d14d : a9d1             [ 2] 	lda #hi(df_tokensyms)
d14f : 85c4             [ 3] 	sta df_symtab+1
d151 : a900             [ 2] 	lda #0
d153 : 85c5             [ 3] 	sta df_symoff
d155 :                       df_tk_checknexttok
                             	; check this token type first
d155 : 68               [ 4] 	pla
d156 : 48               [ 3] 	pha
d157 : a6c5             [ 3] 	ldx df_symoff
d159 : 3dcad4           [ 4] 	and df_tk_tokentype,x
d15c : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
d15e : bdcad4           [ 4] 	lda df_tk_tokentype,x
d161 : 2908             [ 2] 	and #DFTK_OP
d163 : f009             [ 3] 	beq df_tk_matchtok_skip_op
d165 : 68               [ 4] 	pla
d166 : 48               [ 3] 	pha
d167 : 2908             [ 2] 	and #DFTK_OP
d169 : 3dcad4           [ 4] 	and df_tk_tokentype,x
d16c : f022             [ 3] 	beq df_tk_symnomatch
d16e :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
d16e : a4be             [ 3] 	ldy df_linoff
d170 : a200             [ 2] 	ldx #0
d172 :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
d172 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
d174 : 48               [ 3] 	pha
d175 : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
d177 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
d17a : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
d17c : 68               [ 4] 	pla
d17d : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank1.s -----------------------------------

                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
d185 : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
d186 : b9000a           [ 4] 	lda df_linbuff,y
d189 : c92e             [ 2] 	cmp #'.'
d18b : f025             [ 3] 	beq df_tk_symfound
d18d : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
d18f :                       df_tk_symnomatchp
d18f : 68               [ 4] 	pla
d190 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
d190 : e6c5             [ 5] 	inc df_symoff
d192 :                       df_tk_symnextentry
d192 : a200             [ 2] 	ldx #0
d194 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
d196 : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
d19e : 4c92d1           [ 3] 	jmp df_tk_symnextentry
d1a1 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
d1a7 : a1c3             [ 6] 	lda (df_symtab,x)
d1a9 : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
d1ab : 68               [ 4] 	pla
                             	; Zero symbol counter
d1ac : a900             [ 2] 	lda #0
d1ae : 85c5             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
d1b0 : 38               [ 2] 	sec
d1b1 : 60               [ 6] 	rts
d1b2 :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
d1b2 : c8               [ 2] 	iny
                             	; First mask off MSB
d1b3 : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
d1b5 : 200fce           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
d1b8 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
d1ba : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
d1bd : 201cce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
d1c0 : b0ce             [ 3] 	bcs df_tk_symnomatch
d1c2 :                       df_tk_symfound_final
                             	; pop mask off stack
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank1.s -----------------------------------

d1c2 : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
d1c3 : 84be             [ 3] 	sty df_linoff
d1c5 : a5c5             [ 3] 	lda df_symoff
d1c7 : aa               [ 2] 	tax
d1c8 : 18               [ 2] 	clc
d1c9 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
d1ca :                       df_tokensyms
d1ca : 80                    	db	0x80						; Implicit numeric assign
d1cb : 80                    	db	0x80						; Implicit call procedure
d1cc : bb                    	db	";"+0x80					; Comment
d1cd : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
d1d4 : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
d1db : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
d1e0 : 6465e6                	db	"de",'f'+0x80				; def_subname
d1e3 : 656e646465e6          	db	"endde",'f'+0x80			; enddef
d1e9 : 7265747572ee          	db	"retur",'n'+0x80			; return
d1ef : 61626f72f4            	db	"abor",'t'+0x80				; abort
d1f4 : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
d1f9 : 6469ed                	db	"di",'m'+0x80				; dim varlist
d1fc : 7265706561f4          	db	"repea",'t'+0x80			; repeat
d202 : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
d207 : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
d20a : 6e6578f4              	db	"nex",'t'+0x80				; next
d20e : 7768696ce5            	db	"whil",'e'+0x80				; while condition
d213 : 77656ee4              	db	"wen",'d'+0x80				; wend
d217 : 69e6                  	db	"i",'f'+0x80				; if condition
d219 : 656c73e5              	db	"els",'e'+0x80				; else
d21d : 656e6469e6            	db	"endi",'f'+0x80				; endif
d222 : 656c69e6              	db	"eli",'f'+0x80				; elif condition
d226 : 646174e1              	db	"dat",'a'+0x80				; data
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank1.s -----------------------------------

d22a : ff                    	db	0xff						; assembler command (non standard p
d22b : 7275ee                	db	"ru",'n'+0x80				; run
d22e : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
d232 : 696e7075f4            	db	"inpu",'t'+0x80				; input var
d237 : 6d6f64e5              	db	"mod",'e'+0x80				; mode n
d23b : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
d23f : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
d245 : 636cf3                	db	"cl",'s'+0x80				; cls
d248 : 76706f6be5            	db	"vpok",'e'+0x80				; vpoke addr,val
d24d : 7365747664f0          	db	"setvd",'p'+0x80			; setvdp reg,val
d253 : 636f6c6f75f2          	db	"colou",'r'+0x80			; colour reg,val
d259 : 73707269746570..      	db	"spritepa",'t'+0x80			; spritepat patnum,arra
d262 : 73707269746570..      	db	"spritepo",'s'+0x80			; spritepos sprnum,x,y
d26b : 73707269746563..      	db	"spriteco",'l'+0x80			; spritecol sprnum,col
d274 : 7370726974656e..      	db	"spritenm",'e'+0x80			; spritenme sprnum,patn
d27d : 7370726974e5          	db	"sprit",'e'+0x80			; sprite n,x,y,p,c
d283 : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
d287 : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
d28b : 736f756ee4            	db	"soun",'d'+0x80				; sound
d290 : 6d757369e3            	db	"musi",'c'+0x80				; music
d295 : 706c61f9              	db	"pla",'y'+0x80				; play
d299 : 736176e5              	db	"sav",'e'+0x80				; save
d29d : 6c6f61e4              	db	"loa",'d'+0x80				; load
d2a1 : 6469f2                	db	"di",'r'+0x80				; dir (compact listing)
d2a4 : 646972ec              	db	"dir",'l'+0x80				; dirl (long listing)
d2a8 : 6465ec                	db 	"de",'l'+0x80				; del
d2ab : 726561e4              	db	"rea",'d'+0x80				; read
d2af : 6e65f7                	db	"ne",'w'+0x80				; new
d2b2 : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
d2b7 : 776169f4              	db	"wai",'t'+0x80				; wait delay
d2bb : 72657365f4            	db	"rese",'t'+0x80				; reset var
d2c0 : 68697265f3            	db	"hire",'s'+0x80				; hires col
d2c5 : 706f696ef4            	db	"poin",'t'+0x80				; point x,y,mode
d2ca : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
d2ce : 68706c6ff4            	db	"hplo",'t'+0x80				; hplot x,y,char|string
d2d3 : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
d2da : 7069786d6173eb        	db	"pixmas",'k'+0x80			; pixmask n
d2e1 : 706978636fec          	db	"pixco",'l'+0x80			; pixcol n
d2e7 : 626ff8                	db	"bo",'x'+0x80				; box x0,y0,x1,y1
d2ea : 636972636ce5          	db	"circl",'e'+0x80			; circle x0,y0,r
d2f0 : 73686170e5            	db	"shap",'e'+0x80				; shape x,y,coords[]
d2f5 : 766c6f61e4            	db	"vloa",'d'+0x80				; vload addr,filename
d2fa : 626c6f61e4            	db	"bloa",'d'+0x80				; bload mem,hrd,addr,filen
d2ff : 62736176e5            	db	"bsav",'e'+0x80				; bsave mem,hdr,addr,len,f
d304 : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
d309 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
d310 : 63686469f2            	db	"chdi",'r'+0x80				; chdir fname
d315 : 6d6b6469f2            	db	"mkdi",'r'+0x80				; mkdir fname
d31a : 6461746574696de5      	db	"datetim",'e'+0x80			; datetime string output
d322 : 6e76706f6be5          	db	"nvpok",'e'+0x80			; NV poke addr,val
d328 : 666f6ef4              	db	"fon",'t'+0x80				; font <font file>
d32c : 6465766963e5          	db	"devic",'e'+0x80			; device <devnum>
d332 : 66636c6f73e5          	db	"fclos",'e'+0x80			; fclose
d338 : 72656469ed            	db	"redi",'m'+0x80				; redim varlist
d33d : 7075f4                	db  "pu",'t'+0x80				; put(byte)
                             ; Functions
d340 : 767065656ba8          	db	"vpeek",'('+0x80			; vpeek(x)
d346 : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
d34b : 6465656ba8            	db	"deek",'('+0x80				; deek(x)
d350 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
d356 : 6b6579a8              	db	"key",'('+0x80				; key(x)
d35a : 636872a8              	db	"chr",'('+0x80				; chr(x)
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank1.s -----------------------------------

d35e : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
d363 : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
d369 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
d36d : 6c656ea8              	db	"len",'('+0x80				; len(x$)
d371 : 6d656da8              	db	"mem",'('+0x80				; mem(x)
d375 : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
d37a : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
d37e : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
d386 : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
d38b : 686578a8              	db	"hex",'('+0x80				; hex(x)
d38f : 646563a8              	db	"dec","("+0x80				; dec(x)
d393 : 617363a8              	db	"asc",'('+0x80				; asc(x$)
d397 : 76616ca8              	db	"val",'('+0x80				; val(x$)
d39b : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
d3a1 : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
d3a5 : 61646472a8            	db	"addr",'('+0x80				; addr(var)
d3aa : 6e767065656ba8        	db  "nvpeek",'('+0x80			; nvpeek(addr)
d3b1 : 66637265617465a8      	db	"fcreate",'('+0x80			; success=fcreate(filena
d3b9 : 666f70656ea8          	db	"fopen",'('+0x80			; success=fopen(filename)
d3bf : 676574a8              	db	"get",'('+0x80				; alias for key()
                             ; Numeric operators, in priority
d3c3 : aa                    	db	'*'+0x80					; Multiply
d3c4 : af                    	db 	'/'+0x80					; Divide
d3c5 : dc                    	db 	'\\'+0x80					; Modulus
d3c6 : 3cbc                  	db	'<','<'+0x80				; Shift left
d3c8 : 3ebe                  	db	'>','>'+0x80				; Shift right
d3ca : ab                    	db 	'+'+0x80					; Add
d3cb : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
d3cc : a6                    	db '&'+0x80						; AND
d3cd : fc                    	db '|'+0x80						; OR
d3ce : de                    	db '^'+0x80						; EOR
d3cf : 3cbd                  	db "<",'='+0x80					; Less than or equal
d3d1 : 3ebd                  	db ">",'='+0x80					; Greater than or equal
d3d3 : 3cbe                  	db "<",'>'+0x80					; Not equal
d3d5 : bc                    	db '<'+0x80						; Less than
d3d6 : be                    	db '>'+0x80						; Greater than
d3d7 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
d3d9 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank1.s -----------------------------------

                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
d3da :                       df_tk_tokenjmp
d3da : 6cd5                  	dw	df_tk_assign
d3dc : 41d6                  	dw	df_tk_callproc
d3de : 74d5                  	dw	df_tk_comment
d3e0 : d1d5                  	dw	df_tk_println
d3e2 : c5d5                  	dw	df_tk_printat
d3e4 : d1d5                  	dw	df_tk_print
d3e6 : 19d6                  	dw	df_tk_def
d3e8 : 81d6                  	dw	df_tk_enddef
d3ea : 83d6                  	dw	df_tk_return
d3ec : 81d6                  	dw	df_tk_abort
d3ee : 07d6                  	dw	df_tk_local
d3f0 : f8d5                  	dw	df_tk_dim
d3f2 : 81d6                  	dw	df_tk_repeat
d3f4 : 86d6                  	dw	df_tk_until
d3f6 : 1fd6                  	dw	df_tk_for
d3f8 : 81d6                  	dw	df_tk_next
d3fa : 86d6                  	dw	df_tk_while
d3fc : 81d6                  	dw	df_tk_wend
d3fe : 86d6                  	dw	df_tk_if
d400 : 81d6                  	dw	df_tk_else
d402 : 81d6                  	dw	df_tk_endif
d404 : 86d6                  	dw	df_tk_elseif
d406 : d1d5                  	dw	df_tk_data
d408 : 69f3                  	dw	df_trap_monitor
d40a : 81d6                  	dw	df_tk_run
d40c : a3d5                  	dw	df_tk_list
d40e : dfd5                  	dw	df_tk_input
d410 : 86d6                  	dw	df_tk_mode
d412 : 96d6                  	dw	df_tk_plot
d414 : 86d6                  	dw	df_tk_cursor
d416 : 81d6                  	dw	df_tk_cls
d418 : 8ad6                  	dw	df_tk_vpoke
d41a : 8ad6                  	dw	df_tk_setvdp
d41c : 96d6                  	dw	df_tk_colour
d41e : 8ad6                  	dw	df_tk_spritepat
d420 : 96d6                  	dw	df_tk_spritepos
d422 : 8ad6                  	dw	df_tk_spritecol
d424 : 8ad6                  	dw	df_tk_spritenme
d426 : aed6                  	dw	df_tk_sprite
d428 : 8ad6                  	dw	df_tk_poke
d42a : 8ad6                  	dw	df_tk_doke
d42c : 96d6                  	dw	df_tk_sound
d42e : a2d6                  	dw	df_tk_music
d430 : a2d6                  	dw	df_tk_play
d432 : 86d6                  	dw	df_tk_save
d434 : 86d6                  	dw	df_tk_load
d436 : 81d6                  	dw	df_tk_dir
d438 : 81d6                  	dw	df_tk_dirl
d43a : 86d6                  	dw	df_tk_del
d43c : e9d5                  	dw	df_tk_read
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank1.s -----------------------------------

d43e : 81d6                  	dw	df_tk_new
d440 : 96d6                  	dw	df_tk_renum
d442 : 86d6                  	dw	df_tk_wait
d444 : 43d6                  	dw	df_tk_reset
d446 : 86d6                  	dw	df_tk_hires
d448 : 8ad6                  	dw	df_tk_point
d44a : a2d6                  	dw	df_tk_line
d44c : 96d6                  	dw	df_tk_hplot
d44e : 86d6                  	dw	df_tk_pixmode
d450 : 86d6                  	dw	df_tk_pixmask
d452 : 86d6                  	dw	df_tk_pixcol
d454 : a2d6                  	dw	df_tk_box
d456 : 96d6                  	dw	df_tk_circle
d458 : 96d6                  	dw	df_tk_shape
d45a : 8ad6                  	dw	df_tk_vload
d45c : a2d6                  	dw	df_tk_bload
d45e : aed6                  	dw	df_tk_bsave
d460 : 86d6                  	dw	df_tk_himem
d462 : 81d6                  	dw	df_tk_monitor
d464 : 86d6                  	dw	df_tk_chdir
d466 : 86d6                  	dw	df_tk_mkdir
d468 : 4cd6                  	dw	df_tk_datetime
d46a : 8ad6                  	dw	df_tk_nvpoke
d46c : 86d6                  	dw	df_tk_font
d46e : 86d6                  	dw	df_tk_device
d470 : 81d6                  	dw	df_tk_fclose
d472 : f8d5                  	dw	df_tk_redim
d474 : 86d6                  	dw  df_tk_put
                             
d476 : 55d6                  	dw	df_tk_vpeek
d478 : 55d6                  	dw	df_tk_peek
d47a : 55d6                  	dw	df_tk_deek
d47c : 55d6                  	dw	df_tk_stick
d47e : 55d6                  	dw	df_tk_key
d480 : 55d6                  	dw	df_tk_chr
d482 : 67d6                  	dw	df_tk_left
d484 : 67d6                  	dw	df_tk_right
d486 : 6dd6                  	dw	df_tk_mid
d488 : 55d6                  	dw	df_tk_len
d48a : 55d6                  	dw	df_tk_mem
d48c : 67d6                  	dw	df_tk_scrn
d48e : 55d6                  	dw	df_tk_rnd
d490 : 5ed6                  	dw	df_tk_elapsed
d492 : 73d6                  	dw	df_tk_call
d494 : 55d6                  	dw	df_tk_hex
d496 : 55d6                  	dw	df_tk_dec
d498 : 55d6                  	dw	df_tk_asc
d49a : 55d6                  	dw	df_tk_val
d49c : 67d6                  	dw	df_tk_pixel
d49e : 55d6                  	dw	df_tk_sgn
d4a0 : 5ed6                  	dw	df_tk_addr
d4a2 : 55d6                  	dw	df_tk_nvpeek
d4a4 : 55d6                  	dw	df_tk_fcreate
d4a6 : 55d6                  	dw	df_tk_fopen
d4a8 : 55d6                  	dw  df_tk_get
                             	
d4aa : 81d6                  	dw	df_tk_mult
d4ac : 81d6                  	dw	df_tk_div
d4ae : 81d6                  	dw	df_tk_mod
d4b0 : 81d6                  	dw	df_tk_asl
d4b2 : 81d6                  	dw	df_tk_lsr
d4b4 : 81d6                  	dw	df_tk_add
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank1.s -----------------------------------

d4b6 : 81d6                  	dw	df_tk_sub
                             	
d4b8 : 81d6                  	dw	df_tk_and
d4ba : 81d6                  	dw	df_tk_or
d4bc : 81d6                  	dw	df_tk_eor
d4be : 81d6                  	dw	df_tk_lte
d4c0 : 81d6                  	dw	df_tk_gte
d4c2 : 81d6                  	dw	df_tk_ne
d4c4 : 81d6                  	dw	df_tk_lt
d4c6 : 81d6                  	dw	df_tk_gt
d4c8 : 81d6                  	dw	df_tk_eq
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
d4ca :                       df_tk_tokentype
d4ca : 01                    	db	DFTK_KW
d4cb : 01                    	db	DFTK_KW
d4cc : 01                    	db	DFTK_KW
d4cd : 01                    	db	DFTK_KW
d4ce : 01                    	db	DFTK_KW
d4cf : 01                    	db	DFTK_KW
d4d0 : 01                    	db	DFTK_KW
d4d1 : 01                    	db	DFTK_KW
d4d2 : 01                    	db	DFTK_KW
d4d3 : 01                    	db	DFTK_KW
d4d4 : 01                    	db	DFTK_KW
d4d5 : 01                    	db	DFTK_KW
d4d6 : 01                    	db	DFTK_KW
d4d7 : 01                    	db	DFTK_KW
d4d8 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank1.s -----------------------------------

d4d9 : 01                    	db	DFTK_KW
d4da : 01                    	db	DFTK_KW
d4db : 01                    	db	DFTK_KW
d4dc : 01                    	db	DFTK_KW
d4dd : 01                    	db	DFTK_KW
d4de : 01                    	db	DFTK_KW
d4df : 01                    	db	DFTK_KW
d4e0 : 01                    	db	DFTK_KW
d4e1 : 01                    	db	DFTK_KW
d4e2 : 01                    	db	DFTK_KW
d4e3 : 01                    	db	DFTK_KW
d4e4 : 01                    	db	DFTK_KW
d4e5 : 01                    	db	DFTK_KW
d4e6 : 01                    	db	DFTK_KW
d4e7 : 01                    	db	DFTK_KW
d4e8 : 01                    	db	DFTK_KW
d4e9 : 01                    	db	DFTK_KW
d4ea : 01                    	db	DFTK_KW
d4eb : 01                    	db	DFTK_KW
d4ec : 01                    	db	DFTK_KW
d4ed : 01                    	db	DFTK_KW
d4ee : 01                    	db	DFTK_KW
d4ef : 01                    	db	DFTK_KW
d4f0 : 01                    	db	DFTK_KW
d4f1 : 01                    	db	DFTK_KW
d4f2 : 01                    	db	DFTK_KW
d4f3 : 01                    	db	DFTK_KW
d4f4 : 01                    	db	DFTK_KW
d4f5 : 01                    	db	DFTK_KW
d4f6 : 01                    	db	DFTK_KW
d4f7 : 01                    	db	DFTK_KW
d4f8 : 01                    	db	DFTK_KW
d4f9 : 01                    	db	DFTK_KW
d4fa : 01                    	db	DFTK_KW
d4fb : 01                    	db	DFTK_KW
d4fc : 01                    	db	DFTK_KW
d4fd : 01                    	db	DFTK_KW
d4fe : 01                    	db	DFTK_KW
d4ff : 01                    	db	DFTK_KW
d500 : 01                    	db	DFTK_KW
d501 : 01                    	db	DFTK_KW
d502 : 01                    	db	DFTK_KW
d503 : 01                    	db	DFTK_KW
d504 : 01                    	db	DFTK_KW
d505 : 01                    	db	DFTK_KW
d506 : 01                    	db	DFTK_KW
d507 : 01                    	db	DFTK_KW
d508 : 01                    	db	DFTK_KW
d509 : 01                    	db	DFTK_KW
d50a : 01                    	db	DFTK_KW
d50b : 01                    	db	DFTK_KW
d50c : 01                    	db	DFTK_KW
d50d : 01                    	db	DFTK_KW
d50e : 01                    	db	DFTK_KW
d50f : 01                    	db	DFTK_KW
d510 : 01                    	db	DFTK_KW
d511 : 01                    	db	DFTK_KW
d512 : 01                    	db	DFTK_KW
d513 : 01                    	db	DFTK_KW
d514 : 01                    	db	DFTK_KW
d515 : 01                    	db	DFTK_KW
d516 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank1.s -----------------------------------

d517 : 01                    	db	DFTK_KW
                             
d518 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d519 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d51a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d51b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d51c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d51d : 42                    	db 	DFTK_FN | DFTK_STR
d51e : 42                    	db 	DFTK_FN | DFTK_STR
d51f : 42                    	db 	DFTK_FN | DFTK_STR
d520 : 42                    	db 	DFTK_FN | DFTK_STR
d521 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d522 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d523 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d524 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d525 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d526 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d527 : 42                    	db 	DFTK_FN | DFTK_STR
d528 : 42                    	db 	DFTK_FN | DFTK_STR
d529 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d52f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d530 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d531 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
d532 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d533 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d534 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d535 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d536 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d537 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
d538 : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
d539 : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d53a : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d53b : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d53c : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d53d : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d53e : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d53f : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d540 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d541 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-1 HOMEBREW COMPUTER
                             ;*	Hardware and software design by Dolo Miah
                             ;*	Copyright 2014-18
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank1.s -----------------------------------

                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;* General routine to tokenise a mandatory variab
d542 :                       df_tk_variable
d542 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d545 : 20c6cd           [ 6] 	jsr df_tk_peek_buf
d548 : 200fce           [ 6] 	jsr df_tk_isalpha
d54b : 901d             [ 3] 	bcc df_tk_error
d54d : a900             [ 2] 	lda #0
d54f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
d550 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
d550 : a980             [ 2] 	lda #0x80
d552 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
d555 : 2042d5           [ 6] 	jsr df_tk_variable
d558 : 200ecf           [ 6] 	jsr df_tk_var
                             	; next char sound be =
d55b : a93d             [ 2] 	lda #'='
d55d : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; skip more ws
d560 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; should not be at end of line
d563 : 20c6cd           [ 6] 	jsr df_tk_peek_buf
d566 : f002             [ 3] 	beq df_tk_parse_ass_err
d568 : 18               [ 2] 	clc
d569 : 60               [ 6] 	rts
d56a :                       df_tk_parse_ass_err
d56a :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
d56c :                       df_tk_assign
d56c : 2050d5           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
d56f : 2055d0           [ 6] 	jsr df_tk_expression
d572 : 18               [ 2] 	clc
d573 : 60               [ 6] 	rts
                             
                             
d574 :                       df_tk_comment
                             	; copy all subsequent chars to token
d574 : 20cccd           [ 6] 	jsr df_tk_get_buf
d577 : f005             [ 3] 	beq df_tk_comment_done
d579 : 20d7cd           [ 6] 	jsr df_tk_put_tok
d57c : 80f6             [ 3] 	bra df_tk_comment
d57e :                       df_tk_comment_done
d57e : 18               [ 2] 	clc
d57f : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
d580 :                       df_tk_listp_procname
                             	; try and find the first proc
d580 : a95f             [ 2] 	lda #'_'
d582 : 2058ce           [ 6] 	jsr df_tk_expect_tok
d585 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
d587 : 20c6cd           [ 6] 	jsr df_tk_peek_buf
d58a : 200fce           [ 6] 	jsr df_tk_isalpha
d58d : 9012             [ 3] 	bcc df_tk_listp_procname_err
d58f :                       df_tk_listp_procname_ch
d58f : 20c6cd           [ 6] 	jsr df_tk_peek_buf
d592 : 201cce           [ 6] 	jsr df_tk_isalphanum
d595 : 9008             [ 3] 	bcc df_tk_listp_procname_ok
d597 : 20cccd           [ 6] 	jsr df_tk_get_buf
d59a : 20d7cd           [ 6] 	jsr df_tk_put_tok
d59d : 80f0             [ 3] 	bra df_tk_listp_procname_ch
d59f :                       df_tk_listp_procname_ok
d59f : 18               [ 2] 	clc
d5a0 : 60               [ 6] 	rts
d5a1 :                       df_tk_listp_procname_err
d5a1 : 38               [ 2] 	sec
d5a2 : 60               [ 6] 	rts
                             
d5a3 :                       df_tk_list
d5a3 : 2080d5           [ 6] 	jsr df_tk_listp_procname
                             	; if not found try '*' or normal list
d5a6 : b007             [ 3] 	bcs df_tk_list_procs
                             	; the '-' allows to list to end
d5a8 : a92d             [ 2] 	lda #'-'
                             	; find and add if it exists
d5aa : 2058ce           [ 6] 	jsr df_tk_expect_tok
d5ad : 8014             [ 3] 	bra df_tk_list_done
                             	; '*' means list procs
d5af :                       df_tk_list_procs
                             	; try and find the first proc
d5af : a92a             [ 2] 	lda #'*'
d5b1 : 2058ce           [ 6] 	jsr df_tk_expect_tok
d5b4 : 900d             [ 3] 	bcc df_tk_list_done
                             	; else normal line number
d5b6 :                       df_tk_list_line
                             	; tokenise an expression
d5b6 : 2055d0           [ 6] 	jsr df_tk_expression
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank1.s -----------------------------------

                             	; if not at the end then keep going
d5b9 : a92c             [ 2] 	lda #','
d5bb : 2058ce           [ 6] 	jsr df_tk_expect_tok
d5be : b003             [ 3] 	bcs df_tk_list_done
                             	; else get the next expression
d5c0 : 2055d0           [ 6] 	jsr df_tk_expression	
d5c3 :                       df_tk_list_done
d5c3 : 18               [ 2] 	clc
d5c4 : 60               [ 6] 	rts
                             
d5c5 :                       df_tk_printat
                             	; Must get 2 parms for x,y
d5c5 : 208ad6           [ 6] 	jsr df_tk_2parms
                             	; if not at the end then keep going
d5c8 : a92c             [ 2] 	lda #','
d5ca : 2058ce           [ 6] 	jsr df_tk_expect_tok
d5cd : 9002             [ 3] 	bcc df_tk_print
                             	; else done
d5cf : 18               [ 2] 	clc
d5d0 : 60               [ 6] 	rts
d5d1 :                       df_tk_data
d5d1 :                       df_tk_println
d5d1 :                       df_tk_print
d5d1 :                       df_tk_asm_db
d5d1 :                       df_tk_asm_dw
                             	; tokenise an expression
d5d1 : 2055d0           [ 6] 	jsr df_tk_expression
                             	; is there more to come?
d5d4 : a92c             [ 2] 	lda #','
d5d6 : 2058ce           [ 6] 	jsr df_tk_expect_tok
d5d9 : b002             [ 3] 	bcs df_tk_print_done
d5db : 80f4             [ 3] 	bra df_tk_print
d5dd :                       df_tk_print_done
d5dd : 18               [ 2] 	clc
d5de : 60               [ 6] 	rts
                             
d5df :                       df_tk_input
d5df : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d5e2 : 2042d5           [ 6] 	jsr df_tk_variable
d5e5 : 200ecf           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
d5e8 : 60               [ 6] 	rts
                             	
d5e9 :                       df_tk_read
                             	; tokenise a variable
d5e9 : 2042d5           [ 6] 	jsr df_tk_variable
d5ec : 200ecf           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
d5ef : a92c             [ 2] 	lda #','
d5f1 : 2058ce           [ 6] 	jsr df_tk_expect_tok
d5f4 : 90f3             [ 3] 	bcc df_tk_read
d5f6 : 18               [ 2] 	clc
d5f7 : 60               [ 6] 	rts
                             
d5f8 :                       df_tk_dim
d5f8 :                       df_tk_redim
                             	; tokenise a variable
d5f8 : 2042d5           [ 6] 	jsr df_tk_variable
d5fb : 2056cf           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
d5fe : a92c             [ 2] 	lda #','
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank1.s -----------------------------------

d600 : 2058ce           [ 6] 	jsr df_tk_expect_tok
d603 : 90f3             [ 4] 	bcc df_tk_dim
d605 : 18               [ 2] 	clc
d606 : 60               [ 6] 	rts
                             
d607 :                       df_tk_local
d607 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d60a : 2042d5           [ 6] 	jsr df_tk_variable
d60d : 2040cf           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
d610 : a92c             [ 2] 	lda #','
d612 : 2058ce           [ 6] 	jsr df_tk_expect_tok
d615 : 90f0             [ 3] 	bcc df_tk_local
d617 : 18               [ 2] 	clc
d618 : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
d619 :                       df_tk_def
d619 : a900             [ 2] 	lda #0
d61b : 2061cf           [ 6] 	jsr df_tk_proc
d61e : 60               [ 6] 	rts
                             
                             
                             ; syntax : for %a=1,10,1
d61f :                       df_tk_for
d61f : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
d622 : a901             [ 2] 	lda #DFVVT_INT
d624 : 200ecf           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
d627 : a93d             [ 2] 	lda #'='
d629 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; starting value
d62c : 2055d0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d62f : a92c             [ 2] 	lda #','
d631 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; ending value
d634 : 2055d0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d637 : a92c             [ 2] 	lda #','
d639 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             	
                             	; step value
d63c : 2055d0           [ 6] 	jsr df_tk_expression
d63f :                       df_tk_for_done
d63f : 18               [ 2] 	clc
d640 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
d641 :                       df_tk_callproc
d641 : 38               [ 2] 	sec
d642 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank1.s -----------------------------------

                             ; timer reset expects an int variable only
d643 :                       df_tk_reset
d643 : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d646 : a901             [ 2] 	lda #DFVVT_INT
d648 : 200ecf           [ 6] 	jsr df_tk_var
d64b : 60               [ 6] 	rts
                             
                             ; date time expects a string variable only
d64c :                       df_tk_datetime
d64c : 2028ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d64f : a904             [ 2] 	lda #DFVVT_STR
d651 : 200ecf           [ 6] 	jsr df_tk_var
d654 : 60               [ 6] 	rts
                             
                             ; These functions expect 1 parmeter
d655 :                       df_tk_len
d655 :                       df_tk_chr
d655 :                       df_tk_key
d655 :                       df_tk_get
d655 :                       df_tk_stick
d655 :                       df_tk_deek
d655 :                       df_tk_vpeek
d655 :                       df_tk_peek
d655 :                       df_tk_nvpeek
d655 :                       df_tk_mem
d655 :                       df_tk_rnd
d655 :                       df_tk_hex
d655 :                       df_tk_dec
d655 :                       df_tk_asc
d655 :                       df_tk_val
d655 :                       df_tk_sgn
d655 :                       df_tk_fcreate
d655 :                       df_tk_fopen
d655 : 2055d0           [ 6] 	jsr df_tk_expression
d658 :                       df_tk_closebrkt
d658 : a929             [ 2] 	lda #')'
d65a : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
d65d : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
d65e :                       df_tk_addr
d65e :                       df_tk_elapsed
d65e : 2042d5           [ 6] 	jsr df_tk_variable
d661 : 200ecf           [ 6] 	jsr df_tk_var
                             	; must have close braket
d664 : 4c58d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
d667 :                       df_tk_left
d667 :                       df_tk_right
d667 :                       df_tk_scrn
d667 :                       df_tk_pixel
d667 : 208ad6           [ 6] 	jsr df_tk_2parms
d66a : 4c58d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
d66d :                       df_tk_mid
d66d : 2096d6           [ 6] 	jsr df_tk_3parms
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank1.s -----------------------------------

d670 : 4c58d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
d673 :                       df_tk_call
d673 : 208ad6           [ 6] 	jsr df_tk_2parms
d676 : a92c             [ 2] 	lda #','
d678 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
d67b : 208ad6           [ 6] 	jsr df_tk_2parms
d67e : 4c58d6           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
d681 :                       df_tk_else
d681 :                       df_tk_endif
d681 :                       df_tk_enddef
d681 :                       df_tk_abort
d681 :                       df_tk_repeat
d681 :                       df_tk_next
d681 :                       df_tk_wend
d681 :                       df_tk_run
d681 :                       df_tk_add
d681 :                       df_tk_sadd
d681 :                       df_tk_dir
d681 :                       df_tk_dirl
d681 :                       df_tk_cls
d681 :                       df_tk_new
d681 :                       df_tk_mult
d681 :                       df_tk_div
d681 :                       df_tk_mod
d681 :                       df_tk_asl
d681 :                       df_tk_lsr
d681 :                       df_tk_sub
d681 :                       df_tk_and
d681 :                       df_tk_or
d681 :                       df_tk_eor
d681 :                       df_tk_lte
d681 :                       df_tk_lt
d681 :                       df_tk_gte
d681 :                       df_tk_gt
d681 :                       df_tk_ne
d681 :                       df_tk_eq
d681 :                       df_tk_monitor
d681 :                       df_tk_fclose
                             ;df_tk_retsub
d681 : 18               [ 2] 	clc
d682 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
d683 :                       df_tk_return
d683 : 4c55d0           [ 3] 	jmp df_tk_expression
                             
                             ; These commands expect 1 parameter	
d686 :                       df_tk_while
d686 :                       df_tk_until
d686 :                       df_tk_if
d686 :                       df_tk_elseif
d686 :                       df_tk_wait
d686 :                       df_tk_cursor
d686 :                       df_tk_mode
d686 :                       df_tk_del
d686 :                       df_tk_chdir
d686 :                       df_tk_mkdir
d686 :                       df_tk_hires
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank1.s -----------------------------------

d686 :                       df_tk_load
d686 :                       df_tk_save
d686 :                       df_tk_pixmode
d686 :                       df_tk_pixmask
d686 :                       df_tk_pixcol
d686 :                       df_tk_put
d686 :                       df_tk_himem
d686 :                       df_tk_font
d686 :                       df_tk_device
                             ;df_tk_goto
                             ;df_tk_gosub
                             
d686 :                       df_tk_asm_org
d686 :                       df_tk_asm_opt
d686 :                       df_tk_asm_ds
                             
                             	; first parm
d686 : 2055d0           [ 6] 	jsr df_tk_expression
d689 : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
d68a :                       df_tk_setvdp
d68a :                       df_tk_spritepat
d68a :                       df_tk_spritecol
d68a :                       df_tk_spritenme
d68a :                       df_tk_vpoke
d68a :                       df_tk_poke
d68a :                       df_tk_doke
d68a :                       df_tk_nvpoke
d68a :                       df_tk_point
d68a :                       df_tk_vload
d68a :                       df_tk_2parms
                             	; first parm
d68a : 2055d0           [ 6] 	jsr df_tk_expression
d68d : a92c             [ 2] 	lda #','
d68f : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise second parm
d692 : 2055d0           [ 6] 	jsr df_tk_expression
d695 : 60               [ 6] 	rts
                             
                             ; these commands expect 3 numeric parameters
d696 :                       df_tk_hplot
d696 :                       df_tk_plot
d696 :                       df_tk_circle
d696 :                       df_tk_sound
d696 :                       df_tk_colour
d696 :                       df_tk_spritepos
d696 :                       df_tk_shape
d696 :                       df_tk_renum
d696 :                       df_tk_3parms
d696 : 208ad6           [ 6] 	jsr df_tk_2parms
d699 : a92c             [ 2] 	lda #','
d69b : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise third parm
d69e : 2055d0           [ 6] 	jsr df_tk_expression
d6a1 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
d6a2 :                       df_tk_play
d6a2 :                       df_tk_music
d6a2 :                       df_tk_line
d6a2 :                       df_tk_box
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank1.s -----------------------------------

d6a2 :                       df_tk_bload
d6a2 :                       df_tk_4parms
d6a2 : 208ad6           [ 6] 	jsr df_tk_2parms
d6a5 : a92c             [ 2] 	lda #','
d6a7 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
d6aa : 208ad6           [ 6] 	jsr df_tk_2parms
d6ad : 60               [ 6] 	rts
                             
                             ; these commands expect 5 numeric parameters
d6ae :                       df_tk_sprite
d6ae :                       df_tk_bsave
d6ae :                       df_tk_5parms
d6ae : 20a2d6           [ 6] 	jsr df_tk_4parms
d6b1 : a92c             [ 2] 	lda #','
d6b3 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
d6b6 : 2055d0           [ 6] 	jsr df_tk_expression
d6b9 : 60               [ 6] 	rts
                             
                             
                             
d6ba :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
d6ba :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank1.s -----------------------------------

d6ba :                       df_pg_find_line
d6ba : a4a7             [ 3] 	ldy df_prgstrt		; num_tmp contains starting poin
d6bc : 8491             [ 3] 	sty num_tmp
d6be : a4a8             [ 3] 	ldy df_prgstrt+1
d6c0 : 8492             [ 3] 	sty num_tmp+1
d6c2 : 8685             [ 3] 	stx num_a			; num_a contains the line number to 
d6c4 : 8586             [ 3] 	sta num_a+1
d6c6 :                       df_pg_check_next_line	; Also used during runtime 
d6c6 : a591             [ 3] 	lda num_tmp
d6c8 : c5a9             [ 3] 	cmp df_prgend
d6ca : d011             [ 3] 	bne df_pg_check_line
d6cc : a592             [ 3] 	lda num_tmp+1
d6ce : c5aa             [ 3] 	cmp df_prgend+1
d6d0 : d00b             [ 3] 	bne df_pg_check_line
d6d2 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
d6d2 : a200             [ 2] 	ldx #0
d6d4 : a191             [ 6] 	lda (num_tmp,x)
d6d6 : a8               [ 2] 	tay
d6d7 : a691             [ 3] 	ldx num_tmp
d6d9 : a592             [ 3] 	lda num_tmp+1
d6db : 38               [ 2] 	sec
d6dc : 60               [ 6] 	rts
d6dd :                       df_pg_check_line
d6dd : 38               [ 2] 	sec					; Do a trial subtract of
d6de : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
d6e0 : a585             [ 3] 	lda num_a
d6e2 : f191             [ 5] 	sbc (num_tmp),y
d6e4 : 8593             [ 3] 	sta num_tmp+2		; Partial result of sbc
d6e6 : c8               [ 2] 	iny
d6e7 : a586             [ 3] 	lda num_a+1
d6e9 : f191             [ 5] 	sbc (num_tmp),y
d6eb : 0593             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
d6ed : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
d6ef : f00f             [ 4] 	beq df_pr_line_match
                             	; Else we go to next line
d6f1 : a200             [ 2] 	ldx #0
d6f3 : 18               [ 2] 	clc
d6f4 : a591             [ 3] 	lda num_tmp
d6f6 : 6191             [ 6] 	adc (num_tmp,x)
d6f8 : 8591             [ 3] 	sta num_tmp
d6fa : 90ca             [ 3] 	bcc df_pg_check_next_line
d6fc : e692             [ 5] 	inc num_tmp+1
d6fe : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
d700 :                       df_pr_line_match
d700 : a200             [ 2] 	ldx #0
d702 : a191             [ 6] 	lda (num_tmp,x)
d704 : a8               [ 2] 	tay
d705 : a691             [ 3] 	ldx num_tmp
d707 : a592             [ 3] 	lda num_tmp+1
d709 : 18               [ 2] 	clc
d70a : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
d70b :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
d70b : 8685             [ 3] 	stx num_a
d70d : 8586             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
d70f : a5a9             [ 3] 	lda df_prgend
d711 : 858d             [ 3] 	sta num_x
d713 : a5aa             [ 3] 	lda df_prgend+1
d715 : 858e             [ 3] 	sta num_x+1	
d717 :                       df_pg_insert_byte
                             	; Move a byte from the current top
d717 : a200             [ 2] 	ldx #0
d719 : a18d             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
d71b : 918d             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
d71d : a58d             [ 3] 	lda num_x
d71f : c585             [ 3] 	cmp num_a
d721 : d012             [ 3] 	bne df_pg_insert_next_byte
d723 : a58e             [ 3] 	lda num_x+1
d725 : c586             [ 3] 	cmp num_a+1
d727 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
d729 : 18               [ 2] 	clc
d72a : 98               [ 2] 	tya
d72b : 65a9             [ 3] 	adc df_prgend
d72d : 85a9             [ 3] 	sta df_prgend
                             	_bcc 2
                             
d731 : e6aa             [ 5] 	inc df_prgend+1
d733 : 18               [ 2] 	clc
d734 : 60               [ 6] 	rts	; C=0
d735 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
d742 : 4c17d7           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d745 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
d745 : 8685             [ 3] 	stx num_a
d747 : 8586             [ 3] 	sta num_a+1
d749 : a200             [ 2] 	ldx #0	; No indirect indexing
d74b :                       df_pg_delete_byte
                             	; Move a byte from current+Y
d74b : b185             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
d74d : 8185             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------------------- bank1.s -----------------------------------

d74f : a585             [ 3] 	lda num_a
d751 : c5a9             [ 3] 	cmp df_prgend
d753 : d017             [ 3] 	bne df_pg_delete_next_byte
d755 : a586             [ 3] 	lda num_a+1
d757 : c5aa             [ 3] 	cmp df_prgend+1
d759 : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
d75b : 8485             [ 3] 	sty num_a
d75d : 38               [ 2] 	sec
d75e : a5a9             [ 3] 	lda df_prgend
d760 : e585             [ 3] 	sbc num_a
d762 : 85a9             [ 3] 	sta df_prgend
d764 : a5aa             [ 3] 	lda df_prgend+1
d766 : e900             [ 2] 	sbc #0
d768 : 85aa             [ 3] 	sta df_prgend+1
d76a : 18               [ 2] 	clc
d76b : 60               [ 6] 	rts
d76c :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
d772 : 4c4bd7           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
d775 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input into df_linbuff
d775 : a200             [ 2] 	ldx #lo(df_linbuff)
d777 : a90a             [ 2] 	lda #hi(df_linbuff)
d779 : a078             [ 2] 	ldy #120
d77b : 206fc5           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
d77e : 98               [ 2] 	tya
d77f : d002             [ 3] 	bne df_pg_inputline_ok
d781 : 38               [ 2] 	sec
d782 : 60               [ 6] 	rts
d783 :                       df_pg_inputline_ok
d783 : 18               [ 2] 	clc
d784 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
d785 :                       df_pg_dflat
                             	; reset stack pointer
d785 : a2ff             [ 2] 	ldx #255
d787 : 9a               [ 2] 	txs
                             
                             	; error handler address
d788 : a9d8             [ 2] 	lda #lo(df_trap_error)
d78a : 85a2             [ 3] 	sta df_pc
d78c : a9f2             [ 2] 	lda #hi(df_trap_error)
d78e : 85a3             [ 3] 	sta df_pc+1
                             	
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------------------- bank1.s -----------------------------------

                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
d790 :                       df_pg_prompt
d790 : a22e             [ 2] 	ldx #lo(df_pg_prompt_msg)
d792 : a9d8             [ 2] 	lda #hi(df_pg_prompt_msg)
d794 : 20abc5           [ 6] 	jsr io_print_line
d797 : a900             [ 2] 	lda #0
d799 : 85a0             [ 3] 	sta df_immed
d79b :                       df_pg_getcommand
                             	; current line is the token buffer when editing
d79b : a980             [ 2] 	lda #lo(df_tokbuff)
d79d : 85c8             [ 3] 	sta df_currlin
d79f : a90a             [ 2] 	lda #hi(df_tokbuff)
d7a1 : 85c9             [ 3] 	sta df_currlin+1
d7a3 : 38               [ 2] 	sec
d7a4 : 2075d7           [ 6] 	jsr df_pg_inputline
d7a7 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
d7a9 : ad000a           [ 4] 	lda df_linbuff		; Check if first char is ! to es
d7ac : c921             [ 2] 	cmp #'!'
d7ae : d005             [ 3] 	bne df_pg_skip_mon
d7b0 : 200ec5           [ 6] 	jsr _cmd_immediate	; If so call monitor immediat
d7b3 : 80db             [ 3] 	bra df_pg_prompt
d7b5 :                       df_pg_skip_mon
d7b5 : 20ced7           [ 6] 	jsr df_pg_tokenise
d7b8 : a5a0             [ 3] 	lda df_immed
d7ba : f0df             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
d7bc : 2035d8           [ 6] 	jsr df_initrun
                             	; run from tokbuff
d7bf : a280             [ 2] 	ldx #lo(df_tokbuff)
d7c1 : a90a             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
d7c3 : a003             [ 2] 	ldy #3
                             ;	sty df_exeoff
                             	; init currlin
d7c5 : 20c2db           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
d7c8 : 20d3db           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
d7cb : 4c90d7           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
d7ce :                       df_pg_tokenise
d7ce : a900             [ 2] 	lda #0
d7d0 : 859f             [ 3] 	sta errno
d7d2 : 2099d0           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
d7d5 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d7d8 : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
d7db : d00f             [ 3] 	bne df_pg_line_number
                             	; check if line empty
d7dd : ad800a           [ 4] 	lda df_tokbuff
d7e0 : f009             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
d7e2 : a901             [ 2] 	lda #1
d7e4 : 85a0             [ 3] 	sta df_immed
                             	; Zero out text line buffer
d7e6 : a900             [ 2] 	lda #0
d7e8 : 8d000a           [ 4] 	sta df_linbuff
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------------------- bank1.s -----------------------------------

d7eb :                       df_pg_nothing
d7eb : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
d7ec :                       df_pg_line_number
                             	; Check if this line exists
d7ec : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d7ef : aa               [ 2] 	tax
d7f0 : ad820a           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
d7f3 : 20bad6           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
d7f6 : 8545             [ 3] 	sta tmp_d
d7f8 : 8a               [ 2] 	txa
d7f9 : 48               [ 3] 	pha
d7fa : a545             [ 3] 	lda tmp_d
d7fc : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
d7fd : b003             [ 4] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
d7ff : 2045d7           [ 6] 	jsr df_pg_delete_block
d802 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
d802 : ad800a           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
d805 : 48               [ 3] 	pha
d806 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
d808 : 68               [ 4] 	pla
d809 : 68               [ 4] 	pla
d80a : 68               [ 4] 	pla
d80b : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
d80c :                       df_pg_insertline
                             	; Restore previously saved length
d80c : 68               [ 4] 	pla
d80d : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
d80e : 68               [ 4] 	pla
d80f : 8545             [ 3] 	sta tmp_d
d811 : 68               [ 4] 	pla
d812 : aa               [ 2] 	tax
d813 : a545             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
d818 : 200bd7           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
d81b : 68               [ 4] 	pla
d81c : a8               [ 2] 	tay
d81d : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
d81e : 68               [ 4] 	pla
d81f : aa               [ 2] 	tax
d820 : 8685             [ 3] 	stx num_a
d822 : 68               [ 4] 	pla
d823 : 8586             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
d825 :                       df_pg_insertlinbyte
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------------------- bank1.s -----------------------------------

d825 : b9800a           [ 4] 	lda df_tokbuff,y
d828 : 9185             [ 5] 	sta (num_a),y
d82a : 88               [ 2] 	dey
d82b : 10f8             [ 3] 	bpl df_pg_insertlinbyte
d82d : 60               [ 6] 	rts
                             	
d82e :                       df_pg_prompt_msg
d82e : 52656164790d00        	db "Ready",UTF_CR,0
                             
d835 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d835 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
d835 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
d835 : a910             [ 2] 	lda #0x10
d837 : 859e             [ 3] 	sta df_checkmsk
d839 : 859d             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
d851 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
d853 : 86b8             [ 3] 	stx df_rtstop
                             	; make X=0
d855 : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------------------- bank1.s -----------------------------------

                             	; Reset parameter stack (grows up)
d856 : 86b9             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
d858 : 86d7             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
d85a : 86d5             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
d85c : 2060d8           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
d85f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
d860 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d868 : a200             [ 2] 	ldx #0
d86a :                       df_rt_init_vvt_slot
d86a : a5e3             [ 3] 	lda df_tmpptra
d86c : c5af             [ 3] 	cmp df_vvtstrt
d86e : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
d870 : a5e4             [ 3] 	lda df_tmpptra+1
d872 : c5b0             [ 3] 	cmp df_vvtstrt+1
d874 : f02b             [ 3] 	beq df_rt_init_done
d876 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
d876 : a000             [ 2] 	ldy #0
d878 : b1e3             [ 5] 	lda (df_tmpptra),y
d87a : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_PTR
d87c : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
d87e : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
d87f : a900             [ 2] 	lda #0
d881 : 91e3             [ 5] 	sta (df_tmpptra),y
d883 : c8               [ 2] 	iny
d884 : 91e3             [ 5] 	sta (df_tmpptra),y
d886 : c8               [ 2] 	iny
d887 : 91e3             [ 5] 	sta (df_tmpptra),y
d889 : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
                             ;	lda (df_tmpptra,x)
d88a : b2e3             [ 5] 	lda (df_tmpptra)
d88c : 2940             [ 2] 	and #DFVVT_PROC
d88e : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
d890 : a900             [ 2] 	lda #0
d892 : 91e3             [ 5] 	sta (df_tmpptra),y
d894 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
                             ;	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
d89f : 80c9             [ 3] 	bra df_rt_init_vvt_slot 	; Don't rely on bcc
d8a1 :                       df_rt_init_done
d8a1 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
d8a2 :                       df_rt_getnval
                             	; evaluate the expression
d8a2 : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
d8a5 : 4cacf1           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
d8a8 :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
d8a8 : a900             [ 2] 	lda #0
d8aa : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
d8ab :                       df_rt_neval_optk
d8ab : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
d8ad : c4c1             [ 3] 	cpy df_nxtstidx
d8af : f03a             [ 3] 	beq df_rt_neval_process
d8b1 : b1c8             [ 5] 	lda (df_currlin),y		; Get the byte which could b
d8b3 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
d8b5 : c920             [ 2] 	cmp #DFTK_ESCVAL		; >=32 means it's an normal ch
d8b7 : b007             [ 3] 	bcs df_rt_neval_chr
d8b9 :                       df_rt_neval_esc
d8b9 : 202dd9           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
d8bc : e6ca             [ 5] 	inc df_exeoff
d8be : d0eb             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
d8c0 :                       df_rt_neval_chr
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
d8c0 : c92c             [ 2] 	cmp #','
d8c2 : f027             [ 3] 	beq df_rt_neval_process
d8c4 : c95d             [ 2] 	cmp #']'
d8c6 : f023             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
d8c8 : c929             [ 2] 	cmp #')'
d8ca : f01f             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
d8cc : e6ca             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
d8ce : c928             [ 2] 	cmp #'('
d8d0 : d0d9             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
d8d2 : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; move to next byte
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------------------- bank1.s -----------------------------------

d8d5 : e6ca             [ 5] 	inc df_exeoff
d8d7 : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
d8d9 :                       df_rt_neval_tk
d8d9 : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
d8db : aa               [ 2] 	tax
d8dc : bdcad4           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
d8df : 48               [ 3] 	pha
d8e0 : 2908             [ 2] 	and #DFTK_OP
d8e2 : d01c             [ 4] 	bne df_rt_neval_tk_opp
                             	; check if fn
d8e4 : 68               [ 4] 	pla
d8e5 : 2902             [ 2] 	and #DFTK_FN
d8e7 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
d8eb :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
d8eb : 68               [ 4] 	pla
d8ec : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
d8ee : 2039dc           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
d8f1 : 4cebd8           [ 3] 	jmp df_rt_neval_process
d8f4 :                       df_rt_neval_done
d8f4 : 60               [ 6] 	rts
                             
d8f5 :                       df_rt_neval_tk_fn
d8f5 : 18               [ 2] 	clc
d8f6 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
d8f7 : e6ca             [ 5] 	inc df_exeoff
d8f9 : 2039dc           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
d8fc :                       df_rt_neval_nextbyte
d8fc : e6ca             [ 5] 	inc df_exeoff
d8fe : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
d900 :                       df_rt_neval_tk_opp
d900 : 68               [ 4] 	pla				; Get A off stack which is the type
d901 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
d901 : 86e3             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
d903 : 2907             [ 2] 	and #DFTK_OPMSK
d905 : 85e5             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------------------- bank1.s -----------------------------------

d907 : 68               [ 4] 	pla
d908 : 48               [ 3] 	pha
d909 : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
d90a : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
d90c : bdcad4           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
d90f : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
d911 : c5e5             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
d913 : f002             [ 3] 	beq df_rt_neval_donow
d915 : b011             [ 3] 	bcs df_rt_neval_pushOp
d917 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
d917 : 68               [ 4] 	pla
d918 : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
d919 : a5e3             [ 3] 	lda df_tmpptra
d91b : 48               [ 3] 	pha
d91c : aa               [ 2] 	tax		; X = current op
d91d : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
d91e : 2039dc           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
d921 : 68               [ 4] 	pla
d922 : aa               [ 2] 	tax
                             	; get the token type in to A
d923 : bdcad4           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
d926 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
d928 :                       df_rt_neval_pushOp
                             	; push the operator
d928 : a5e3             [ 3] 	lda df_tmpptra
d92a : 48               [ 3] 	pha
                             	; move to next byte
d92b : d0cf             [ 4] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
d92d :                       df_rt_eval_esc
d92d : 0a               [ 2] 	asl a
d92e : aa               [ 2] 	tax
d92f : 7c32d9           [ 6] 	jmp (df_rt_eval_esc_tab,x)
                             ;	lda df_rt_eval_esc_tab,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_eval_esc_tab+1,x
                             ;	sta df_tmpptra+1
                             ;	jmp (df_tmpptra)
                             
d932 :                       df_rt_eval_esc_tab
d932 : efd9                  	dw df_rt_eval_chr
d934 : fbd9                  	dw df_rt_eval_reserved
d936 : fbd9                  	dw df_rt_eval_reserved
d938 : fbd9                  	dw df_rt_eval_reserved
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------------------- bank1.s -----------------------------------

d93a : fbd9                  	dw df_rt_eval_reserved
d93c : fbd9                  	dw df_rt_eval_reserved	; no such thing as bytdec
d93e : efd9                  	dw df_rt_eval_bythex
d940 : efd9                  	dw df_rt_eval_bytbin
d942 : fbd9                  	dw df_rt_eval_reserved
d944 : efd9                  	dw df_rt_eval_intdec
d946 : efd9                  	dw df_rt_eval_inthex
d948 : efd9                  	dw df_rt_eval_intbin
d94a : fbd9                  	dw df_rt_eval_reserved
d94c : fbd9                  	dw df_rt_eval_reserved
d94e : fbd9                  	dw df_rt_eval_reserved
d950 : fbd9                  	dw df_rt_eval_reserved
d952 : fdd9                  	dw df_rt_eval_strlit
d954 : 42da                  	dw df_rt_eval_var
d956 : 36db                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
d958 :                       df_rt_seval
d958 : a6bc             [ 3] 	ldx df_sevalptr
d95a : a5bd             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
d95c :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
d95c : 8545             [ 3] 	sta tmp_d
d95e : 48               [ 3] 	pha
d95f : 8a               [ 2] 	txa
d960 : 48               [ 3] 	pha
d961 : a545             [ 3] 	lda tmp_d
                             	; push original destination
d963 : 2081f1           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_ost_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
d966 :                       df_rt_seval_optk
d966 : a4ca             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
d968 : c4c1             [ 3] 	cpy df_nxtstidx
d96a : f069             [ 3] 	beq df_rt_seval_done
                             
d96c : b1c8             [ 5] 	lda (df_currlin),y
d96e : 301c             [ 3] 	bmi df_rt_seval_tk
                             
d970 : c920             [ 2] 	cmp #DFTK_ESCVAL
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------------------- bank1.s -----------------------------------

d972 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
d974 : c92c             [ 2] 	cmp #','
d976 : f05d             [ 3] 	beq df_rt_seval_done
d978 : c929             [ 2] 	cmp #')'
d97a : f059             [ 3] 	beq df_rt_seval_done
d97c : d04a             [ 3] 	bne df_rt_seval_nextbyte
d97e :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
d97e : c910             [ 2] 	cmp #DFTK_STRLIT
d980 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
d982 : c911             [ 2] 	cmp #DFTK_VAR
d984 : f028             [ 3] 	beq	df_rt_seval_esc_var
d986 : c912             [ 2] 	cmp #DFTK_PROC
d988 : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
d98c :                       df_rt_seval_tk
d98c : 84ca             [ 3] 	sty df_exeoff
d98e : 297f             [ 2] 	and #0x7f
                             	; check if op
d990 : aa               [ 2] 	tax
d991 : bdcad4           [ 4] 	lda df_tk_tokentype,x
d994 : 2904             [ 2] 	and #DFTK_STROP
d996 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
d998 : bdcad4           [ 4] 	lda df_tk_tokentype,x
d99b : 2902             [ 2] 	and #DFTK_FN
d99d : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
d9a1 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
d9a1 : 8a               [ 2] 	txa
d9a2 : 4cc8d9           [ 3] 	jmp df_rt_seval_nextbyte
                             
d9a5 :                       df_rt_seval_tk_fn
d9a5 : 8a               [ 2] 	txa
d9a6 : e6ca             [ 5] 	inc df_exeoff
d9a8 : 2039dc           [ 6] 	jsr df_rt_run_token
d9ab : 4cb2d9           [ 3] 	jmp df_rt_seval_copy
                             
d9ae :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
d9ae : 18               [ 2] 	clc
d9af : 2042da           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
d9b2 :                       df_rt_seval_copy
                             	; pull destination pointer
d9b2 : 68               [ 4] 	pla
d9b3 : 85e3             [ 3] 	sta df_tmpptra
d9b5 : 68               [ 4] 	pla
d9b6 : 85e4             [ 3] 	sta df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------------------- bank1.s -----------------------------------

                             	; pop source string pointer off stack
d9b8 : 20a4f1           [ 6] 	jsr df_ost_popStr
d9bb : 86e5             [ 3] 	stx df_tmpptrb
d9bd : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
d9bf : 20d9d9           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
d9c2 : a5e4             [ 3] 	lda df_tmpptra+1
d9c4 : 48               [ 3] 	pha
d9c5 : a5e3             [ 3] 	lda df_tmpptra
d9c7 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
d9c8 :                       df_rt_seval_nextbyte
d9c8 : e6ca             [ 5] 	inc df_exeoff
d9ca : 4c66d9           [ 3] 	jmp df_rt_seval_optk
                             
d9cd :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
d9cd : 20fdd9           [ 6] 	jsr df_rt_eval_strlit
d9d0 : 4cb2d9           [ 3] 	jmp df_rt_seval_copy
                             
d9d3 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
d9d5 :                       df_rt_seval_done
                             	;
d9d5 : 68               [ 4] 	pla
d9d6 : 68               [ 4] 	pla
                             
d9d7 : 18               [ 2] 	clc
d9d8 : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
d9d9 :                       df_rt_copyStr
d9d9 : a000             [ 2] 	ldy #0
d9db :                       df_rt_copyStr_ch
d9db : b1e5             [ 5] 	lda (df_tmpptrb),y
d9dd : 91e3             [ 5] 	sta (df_tmpptra),y
d9df : f003             [ 3] 	beq df_rt_copyStr_done
d9e1 : c8               [ 2] 	iny
d9e2 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
d9e4 :                       df_rt_copyStr_done
d9e4 : 98               [ 2] 	tya
d9e5 : 18               [ 2] 	clc
d9e6 : 65e3             [ 3] 	adc df_tmpptra
d9e8 : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
d9ec : e6e4             [ 5] 	inc df_tmpptra+1
d9ee : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
d9ef :                       df_rt_eval_intdec
d9ef :                       df_rt_eval_bytdec
d9ef :                       df_rt_eval_inthex
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------------------- bank1.s -----------------------------------

d9ef :                       df_rt_eval_bythex
d9ef :                       df_rt_eval_intbin
d9ef :                       df_rt_eval_bytbin
d9ef :                       df_rt_eval_chr
                             	; numeric constant
d9ef : c8               [ 2] 	iny
d9f0 : b1c8             [ 5] 	lda (df_currlin),y
d9f2 : aa               [ 2] 	tax
d9f3 : c8               [ 2] 	iny
d9f4 : b1c8             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
d9f6 : 84ca             [ 3] 	sty df_exeoff
                             	; push number on to stack
d9f8 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
d9fb :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
d9fd :                       df_rt_eval_strlit
d9fd : 84ca             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
d9ff : 98               [ 2] 	tya
                             	; set carry to add one extra
da00 : 38               [ 2] 	sec
da01 : 65c8             [ 3] 	adc df_currlin
da03 : aa               [ 2] 	tax
da04 : a5c9             [ 3] 	lda df_currlin+1
da06 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
da08 : 2081f1           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
da0b : a4ca             [ 3] 	ldy df_exeoff
da0d :                       df_rt_eval_strlit_ch
da0d : b1c8             [ 5] 	lda (df_currlin),y
da0f : f003             [ 3] 	beq df_rt_eval_strlit_done
da11 : c8               [ 2] 	iny
da12 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
da14 :                       df_rt_eval_strlit_done	; Always relying on Y neve
da14 : 84ca             [ 3] 	sty df_exeoff
da16 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
da17 :                       df_rt_arry_parm
                             	; move past open bracket or comma
da17 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
da19 : 20a2d8           [ 6] 	jsr df_rt_getnval
da1c : 8a               [ 2] 	txa
                             ;	clc
da1d : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------------------- bank1.s -----------------------------------

                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
da1e :                       df_rt_arry_parm2
                             	; go get array parm 1
da1e : 2017da           [ 6] 	jsr df_rt_arry_parm
da21 : 48               [ 3] 	pha
da22 : a200             [ 2] 	ldx #0
da24 : a4ca             [ 3] 	ldy df_exeoff
da26 :                       df_rt_arry_parm2_term
da26 : b1c8             [ 5] 	lda (df_currlin),y
da28 : c95d             [ 2] 	cmp #']'
da2a : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
da2c : c92c             [ 2] 	cmp #','
da2e : f006             [ 3] 	beq df_rt_arry_parm2_arry2
da30 : 84ca             [ 3] 	sty df_exeoff
da32 : c8               [ 2] 	iny
da33 : 4c26da           [ 3] 	jmp df_rt_arry_parm2_term
da36 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
da36 : 2017da           [ 6] 	jsr df_rt_arry_parm
da39 : a8               [ 2] 	tay
da3a : 68               [ 4] 	pla
da3b : aa               [ 2] 	tax
                             ;	clc
da3c : 60               [ 6] 	rts
da3d :                       df_rt_arry_parm2_skiparry2
da3d : a000             [ 2] 	ldy #0
da3f : 68               [ 4] 	pla
da40 : aa               [ 2] 	tax
                             ;	clc
da41 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
da42 :                       df_rt_eval_var
                             	; save carry bit
da42 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
da43 : b00e             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
da45 : c8               [ 2] 	iny
                             	; get var vvt address
da46 : b1c8             [ 5] 	lda (df_currlin),y
da48 : 85e3             [ 3] 	sta df_tmpptra
da4a : c8               [ 2] 	iny
da4b : 84ca             [ 3] 	sty df_exeoff
da4d : b1c8             [ 5] 	lda (df_currlin),y
da4f : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
da51 : b2e3             [ 5] 	lda (df_tmpptra)
da53 :                       df_rt_eval_lvskip
da53 : 48               [ 3] 	pha
                             	; Test A for array or string
da54 : 2984             [ 2] 	and #DFVVT_PTR|DFVVT_STR
                             	; simple variable
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------------------- bank1.s -----------------------------------

da56 : f00e             [ 3] 	beq df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
da58 : c4c1             [ 3] 	cpy df_nxtstidx
da5a : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
da5c : c8               [ 2] 	iny
da5d : b1c8             [ 5] 	lda (df_currlin),y
da5f : 88               [ 2] 	dey
da60 : c95b             [ 2] 	cmp #'['
da62 : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
da64 : f02d             [ 3] 	beq df_rt_eval_var_do_arry
da66 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
da66 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
da67 : 28               [ 4] 	plp
da68 : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
da6a : a001             [ 2] 	ldy #DFVVT_LO
da6c : b1e3             [ 5] 	lda (df_tmpptra),y
da6e : aa               [ 2] 	tax
da6f : a002             [ 2] 	ldy #DFVVT_HI
da71 : b1e3             [ 5] 	lda (df_tmpptra),y
                             
da73 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
da76 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
da76 : 18               [ 2] 	clc
da77 : a901             [ 2] 	lda #DFVVT_LO
da79 : 65e3             [ 3] 	adc df_tmpptra
da7b : aa               [ 2] 	tax
da7c : a5e4             [ 3] 	lda df_tmpptra+1
da7e : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
da80 : 4c85f1           [ 3] 	jmp df_ost_pushPtr
                             
                             	; Simple push of pointer, needs to be valid
da83 :                       df_rt_eval_var_simple
                             	; clean up stack
da83 : 68               [ 4] 	pla
da84 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
da85 : a001             [ 2] 	ldy #DFVVT_LO
da87 : b1e3             [ 5] 	lda (df_tmpptra),y
da89 : aa               [ 2] 	tax
da8a : a002             [ 2] 	ldy #DFVVT_HI
da8c : b1e3             [ 5] 	lda (df_tmpptra),y
da8e : f078             [ 4] 	beq df_rt_not_dimed
da90 : 4c85f1           [ 3] 	jmp df_ost_pushPtr
                             
da93 :                       df_rt_eval_var_do_arry
                             	; move past var index
da93 : e6ca             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
da95 : a200             [ 2] 	ldx #0
da97 : a000             [ 2] 	ldy #0
                             
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------------------- bank1.s -----------------------------------

                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
da99 : a5e4             [ 3] 	lda df_tmpptra+1
da9b : 48               [ 3] 	pha
da9c : a5e3             [ 3] 	lda df_tmpptra
da9e : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
da9f : 201eda           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
daa2 : 68               [ 4] 	pla
daa3 : 85e3             [ 3] 	sta df_tmpptra
daa5 : 68               [ 4] 	pla
daa6 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
daa8 : 86e5             [ 3] 	stx df_tmpptrb
daaa : 84e6             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
daac : c000             [ 2] 	cpy #0
daae : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
dab0 : a004             [ 2] 	ldy #DFVVT_DIM2
dab2 : b1e3             [ 5] 	lda (df_tmpptra),y
dab4 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
dab6 : a6e5             [ 3] 	ldx df_tmpptrb
dab8 : a4e6             [ 3] 	ldy df_tmpptrb+1
daba : 86e6             [ 3] 	stx df_tmpptrb+1
dabc : 84e5             [ 3] 	sty df_tmpptrb
                             
dabe :                       df_rt_eval_var_dim2adj
dabe : a6e5             [ 3] 	ldx df_tmpptrb
dac0 : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
dac2 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
dac4 : c8               [ 2] 	iny
dac5 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
dac5 : e000             [ 2] 	cpx #0
dac7 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
dac9 : e8               [ 2] 	inx
daca :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
daca : ca               [ 2] 	dex
dacb : a900             [ 2] 	lda #0
dacd : 8586             [ 3] 	sta num_a+1
dacf : 88               [ 2] 	dey
                             	; (y-1)
dad0 : 8485             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
dad2 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
dad4 : a003             [ 2] 	ldy #DFVVT_DIM1
dad6 : a900             [ 2] 	lda #0
dad8 : 858a             [ 3] 	sta num_b+1
dada : b1e3             [ 5] 	lda (df_tmpptra),y
dadc : 8589             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
dade : 208fcb           [ 6] 	jsr int_fast_mult
dae1 :                       df_rt_eval_var_nomult
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------------------- bank1.s -----------------------------------

                             	; move x to a
dae1 : 8a               [ 2] 	txa
                             	; add x to num_a
dae2 : 18               [ 2] 	clc
dae3 : 6585             [ 3] 	adc num_a
dae5 : 8585             [ 3] 	sta num_a
                             	_bcc 2
                             
dae9 : e686             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
daeb : a6e5             [ 3] 	ldx df_tmpptrb
daed : a4e6             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
daef : 68               [ 4] 	pla
daf0 : 48               [ 3] 	pha
daf1 : 2901             [ 2] 	and #DFVVT_INT
daf3 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
daf5 : 0685             [ 5] 	asl num_a
daf7 : 2686             [ 5] 	rol num_a+1
daf9 :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
daf9 : 18               [ 2] 	clc
dafa : a001             [ 2] 	ldy #DFVVT_LO
dafc : b1e3             [ 5] 	lda (df_tmpptra),y
dafe : 6585             [ 3] 	adc num_a
db00 : 8585             [ 3] 	sta num_a
db02 : a002             [ 2] 	ldy #DFVVT_HI
db04 : b1e3             [ 5] 	lda (df_tmpptra),y
db06 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
db08 :                       df_rt_not_dimed
                             	SWBRK DFERR_DIM
                             
db0a :                       df_rt_array_exists
db0a : 6586             [ 3] 	adc num_a+1
db0c : 8586             [ 3] 	sta num_a+1
                             	; get the type
db0e : 68               [ 4] 	pla
                             	; if not int or byte then push string
db0f : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
db11 : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
db13 : 28               [ 4] 	plp
db14 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
db16 : 2901             [ 2] 	and #DFVVT_INT
db18 : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
db1a : a000             [ 2] 	ldy #0
db1c : b185             [ 5] 	lda (num_a),y
db1e : aa               [ 2] 	tax
db1f : c8               [ 2] 	iny
db20 : b185             [ 5] 	lda (num_a),y
db22 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
db25 :                       df_rt_eval_byt
db25 : a000             [ 2] 	ldy #0
db27 : b185             [ 5] 	lda (num_a),y
db29 : aa               [ 2] 	tax
db2a : 98               [ 2] 	tya			; Make A=0
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------------------- bank1.s -----------------------------------

db2b : 4c8cf1           [ 3] 	jmp df_ost_pushInt
db2e :                       df_rt_eval_var_str
db2e : 28               [ 4] 	plp
db2f :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
db2f : a685             [ 3] 	ldx num_a
db31 : a586             [ 3] 	lda num_a+1
db33 : 4c85f1           [ 3] 	jmp df_ost_pushPtr
                             
db36 :                       df_rt_eval_proc
db36 : a5b9             [ 3] 	lda df_parmtop				; Save current position of par
db38 : 48               [ 3] 	pha
db39 : 20f6ef           [ 6] 	jsr df_rt_proc				; Go and call the user functio
db3c : 68               [ 4] 	pla							; Get back the original parameter stac
db3d : c5b9             [ 3] 	cmp df_parmtop				; if it is the same, then no r
db3f : f002             [ 3] 	beq df_rt_eval_proc_err
db41 : 18               [ 2] 	clc
db42 : 60               [ 6] 	rts
db43 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
db45 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
db45 : 20acf1           [ 6] 	jsr df_ost_popInt
db48 : 86e5             [ 3] 	stx df_tmpptrb
db4a : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db4c : 20acf1           [ 6] 	jsr df_ost_popInt
db4f : 86e3             [ 3] 	stx df_tmpptra
db51 : 85e4             [ 3] 	sta df_tmpptra+1
db53 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
db54 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
db54 : 20a4f1           [ 6] 	jsr df_ost_popStr
db57 : 86e5             [ 3] 	stx df_tmpptrb
db59 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
db5b : 20a4f1           [ 6] 	jsr df_ost_popStr
db5e : 86e3             [ 3] 	stx df_tmpptra
db60 : 85e4             [ 3] 	sta df_tmpptra+1
db62 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
db63 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
db63 : 20a8d8           [ 6] 	jsr df_rt_neval
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------------------- bank1.s -----------------------------------

                             	; jump over comma
db66 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db68 : 20a8d8           [ 6] 	jsr df_rt_neval
                             	
db6b : 4c45db           [ 3] 	jmp df_rt_get2Ints
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
db6e :                       df_rt_parm_3ints
                             	; evaluate 1st parm
db6e : 20a8d8           [ 6] 	jsr df_rt_neval
db71 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db73 : 20a8d8           [ 6] 	jsr df_rt_neval
db76 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db78 : 20a8d8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
db7b :                       df_rt_parm_pop3
db7b : 20acf1           [ 6] 	jsr df_ost_popInt
db7e : 86e7             [ 3] 	stx df_tmpptrc
db80 : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
db82 : 4c45db           [ 3] 	jmp df_rt_get2Ints
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
db85 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
db85 : 20a8d8           [ 6] 	jsr df_rt_neval
db88 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
db8a : 20a8d8           [ 6] 	jsr df_rt_neval
db8d : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
db8f : 20a8d8           [ 6] 	jsr df_rt_neval
db92 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
db94 : 20a8d8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------------------- bank1.s -----------------------------------

db97 :                       df_rt_parm_pop4
db97 : 20acf1           [ 6] 	jsr df_ost_popInt
db9a : 86e9             [ 3] 	stx df_tmpptrd
db9c : 85ea             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
db9e : 4c7bdb           [ 3] 	jmp df_rt_parm_pop3
                             
                             	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             	; pop 1st parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;	rts
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
dba1 :                       df_rt_parm_5ints
                             	; evaluate 1st parm
dba1 : 20a8d8           [ 6] 	jsr df_rt_neval
dba4 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dba6 : 20a8d8           [ 6] 	jsr df_rt_neval
dba9 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dbab : 20a8d8           [ 6] 	jsr df_rt_neval
dbae : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dbb0 : 20a8d8           [ 6] 	jsr df_rt_neval
dbb3 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
dbb5 : 20a8d8           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
dbb8 : 20acf1           [ 6] 	jsr df_ost_popInt
dbbb : 86eb             [ 3] 	stx df_tmpptre
dbbd : 85ec             [ 3] 	sta df_tmpptre+1
                             
                             	; pop 4,3,2,1 parms
dbbf : 4c97db           [ 3] 	jmp df_rt_parm_pop4
                             
                             ;	; pop 4th parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrd
                             ;	sta df_tmpptrd+1
                             ;	; pop 3rd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrc
                             ;	sta df_tmpptrc+1
                             ;	; pop 2nd parm
                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptrb
                             ;	sta df_tmpptrb+1
                             ;	; pop 1st parm
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------------------- bank1.s -----------------------------------

                             ;	jsr df_ost_popInt
                             ;	stx df_tmpptra
                             ;	sta df_tmpptra+1
                             ;
                             ;	rts
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
dbc2 :                       df_rt_init_stat_ptr
                             	; save current line
dbc2 : 86c8             [ 3] 	stx df_currlin
dbc4 : 85c9             [ 3] 	sta df_currlin+1
dbc6 : 84ca             [ 3] 	sty df_exeoff
dbc8 : 84c2             [ 3] 	sty df_curstidx
dbca : b1c8             [ 5] 	lda (df_currlin),y
dbcc : 85c1             [ 3] 	sta df_nxtstidx
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dbce : b2c8             [ 5] 	lda (df_currlin)
dbd0 : 85c0             [ 3] 	sta df_eolidx
dbd2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
dbd3 :                       df_rt_exec_stat
dbd3 : a6c8             [ 3] 	ldx df_currlin
dbd5 : a5c9             [ 3] 	lda df_currlin+1
dbd7 : a4ca             [ 3] 	ldy df_exeoff
dbd9 :                       df_rt_exec_init_ptr
dbd9 : 20c2db           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
                             ;	lda #0
                             ;	sta df_nextlin+1
dbdc : 64cc             [ 3] 	stz df_nextlin+1
                             
                             	; find first token in statement
dbde :                       df_rt_exec_find_tok
dbde : c8               [ 2] 	iny
dbdf : b1c8             [ 5] 	lda (df_currlin),y
dbe1 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
dbe3 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
dbe3 : c8               [ 2] 	iny
dbe4 : 84ca             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
dbe6 : 2039dc           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
dbe9 : a59e             [ 3] 	lda df_checkmsk
dbeb : 300e             [ 3] 	bmi df_rt_exec_no_key
dbed : c69d             [ 5] 	dec df_checkkey
dbef : d00a             [ 3] 	bne df_rt_exec_no_key
dbf1 : a59e             [ 3] 	lda df_checkmsk
dbf3 : 859d             [ 3] 	sta df_checkkey
dbf5 : 18               [ 2] 	clc
dbf6 : 205dc5           [ 6] 	jsr io_get_ch
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------------------- bank1.s -----------------------------------

dbf9 : 9027             [ 4] 	bcc df_rt_exec_check_key
dbfb :                       df_rt_exec_no_key
                             	; check if normal flow of control
dbfb : a5cc             [ 3] 	lda df_nextlin+1
dbfd : d031             [ 4] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
dbff : a4c1             [ 3] 	ldy df_nxtstidx
dc01 : c4c0             [ 3] 	cpy df_eolidx
dc03 : 84ca             [ 3] 	sty df_exeoff
dc05 : d0cc             [ 4] 	bne df_rt_exec_stat
                             	
                             
                             	; reached end of line, move to next
dc07 : 18               [ 2] 	clc
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dc08 : b2c8             [ 5] 	lda (df_currlin)
dc0a : 65c8             [ 3] 	adc df_currlin
dc0c : 85c8             [ 3] 	sta df_currlin
                             	_bcc 2
                             
dc10 : e6c9             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
dc12 : a003             [ 2] 	ldy #3
dc14 : 84ca             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
                             ;	lda (df_currlin,x)
dc16 : b2c8             [ 5] 	lda (df_currlin)
dc18 : 85c0             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
dc1a : d0b7             [ 4] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
dc1c : a5a0             [ 3] 	lda df_immed
dc1e : f00e             [ 3] 	beq df_rt_unexpected_end
dc20 :                       df_rt_exec_end
dc20 : 18               [ 2] 	clc
dc21 : 60               [ 6] 	rts
dc22 :                       df_rt_exec_check_key
dc22 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
dc24 : f006             [ 3] 	beq df_rt_exec_ctrl_z
dc26 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
dc28 : d0d1             [ 4] 	bne df_rt_exec_no_key			; None relevant keys, go
dc2a :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
dc2c :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
dc2e :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
dc30 :                       df_rt_exec_jump
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------------------- bank1.s -----------------------------------

                             	; initialise statement pointer from nextlin,toks
dc30 : a6cb             [ 3] 	ldx df_nextlin
dc32 : a5cc             [ 3] 	lda df_nextlin+1
dc34 : a4c1             [ 3] 	ldy df_nxtstidx
dc36 : 4cd9db           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
dc39 :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
dc39 : 0a               [ 2] 	asl a
dc3a : aa               [ 2] 	tax
dc3b : 7c16dd           [ 6] 	jmp (df_rt_tokenjmp,x)
                             ;	lda df_rt_tokenjmp,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_tokenjmp+1,x
                             ;	sta df_tmpptra+1
                             ;	; execution code finishes with rts
                             ;	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
dc3e :                       df_rt_nextstat
                             	; save pointer
dc3e : 86d2             [ 3] 	stx df_lineptr
dc40 : 85d3             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dc42 : b2d2             [ 5] 	lda (df_lineptr)
dc44 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
dc46 : b1d2             [ 5] 	lda (df_lineptr),y
                             ;	cmp (df_lineptr,x)
dc48 : d2d2             [ 5] 	cmp (df_lineptr)
dc4a : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
dc4c : a8               [ 2] 	tay
                             	; X = line low
dc4d : a6d2             [ 3] 	ldx df_lineptr
                             	; A = line high
dc4f : a5d3             [ 3] 	lda df_lineptr+1
dc51 : 18               [ 2] 	clc
dc52 : 60               [ 6] 	rts
dc53 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
dc53 : 18               [ 2] 	clc
dc54 : 65d2             [ 3] 	adc df_lineptr
dc56 : 85d2             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------------------- bank1.s -----------------------------------

dc5a : e6d3             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
                             ;	lda (df_lineptr,x)
dc5c : b2d2             [ 5] 	lda (df_lineptr)
dc5e : f008             [ 3] 	beq df_rt_nextstat_err
dc60 : a6d2             [ 3] 	ldx df_lineptr
dc62 : a5d3             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
dc64 : a003             [ 2] 	ldy #3
dc66 : 18               [ 2] 	clc
dc67 : 60               [ 6] 	rts
dc68 :                       df_rt_nextstat_err
dc68 : a000             [ 2] 	ldy #0
dc6a : 38               [ 2] 	sec
dc6b : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
dc6c :                       df_rt_push_stat
dc6c : a5c2             [ 3] 	lda df_curstidx
dc6e : 204ef1           [ 6] 	jsr df_rst_pushByte
dc71 : a5c9             [ 3] 	lda df_currlin+1
dc73 : a6c8             [ 3] 	ldx df_currlin
dc75 : 4c66f1           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
dc78 :                       df_rt_pop_stat
dc78 : 2074f1           [ 6] 	jsr df_rst_popWord
dc7b : 86cb             [ 3] 	stx	df_nextlin
dc7d : 85cc             [ 3] 	sta df_nextlin+1
dc7f : 2057f1           [ 6] 	jsr df_rst_popByte
dc82 : a8               [ 2] 	tay
dc83 : a6cb             [ 3] 	ldx df_nextlin
dc85 : a5cc             [ 3] 	lda df_nextlin+1
dc87 : 203edc           [ 6] 	jsr df_rt_nextstat
dc8a : 86cb             [ 3] 	stx df_nextlin
dc8c : 85cc             [ 3] 	sta df_nextlin+1
dc8e : 84c1             [ 3] 	sty df_nxtstidx
                             ;	clc
dc90 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
dc91 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
dc99 : a003             [ 2] 	ldy #3
dc9b : 84d4             [ 3] 	sty df_lineidx
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dc9d : b2d2             [ 5] 	lda (df_lineptr)
dc9f : f034             [ 3] 	beq df_rt_findproc_err
dca1 :                       df_rt_findproc_cmd
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------------------- bank1.s -----------------------------------

dca1 : c8               [ 2] 	iny
dca2 : b1d2             [ 5] 	lda (df_lineptr),y
dca4 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
dca6 : c986             [ 2] 	cmp #DFRT_DEF
dca8 : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
dcaa : c8               [ 2] 	iny
                             	; skip proc escape token
dcab : c8               [ 2] 	iny
                             	; now check the proc address against procptr
dcac : b1d2             [ 5] 	lda (df_lineptr),y
dcae : c5d0             [ 3] 	cmp df_procptr
dcb0 : d00f             [ 3] 	bne df_rt_findproc_nextstat
dcb2 : c8               [ 2] 	iny
dcb3 : b1d2             [ 5] 	lda (df_lineptr),y
dcb5 : c5d1             [ 3] 	cmp df_procptr+1
dcb7 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
dcb9 : a6d2             [ 3] 	ldx df_lineptr
dcbb : a5d3             [ 3] 	lda df_lineptr+1
dcbd : a4d4             [ 3] 	ldy df_lineidx
dcbf : 18               [ 2] 	clc
dcc0 : 60               [ 6] 	rts
dcc1 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
dcc1 : a6d2             [ 3] 	ldx df_lineptr
dcc3 : a5d3             [ 3] 	lda df_lineptr+1
dcc5 : a4d4             [ 3] 	ldy df_lineidx
dcc7 : 203edc           [ 6] 	jsr df_rt_nextstat
dcca : b009             [ 3] 	bcs df_rt_findproc_err
dccc : 86d2             [ 3] 	stx df_lineptr
dcce : 85d3             [ 3] 	sta df_lineptr+1
dcd0 : 84d4             [ 3] 	sty df_lineidx
dcd2 : 4ca1dc           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
dcd5 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
dcd7 :                       df_rt_findescval
dcd7 : a4ca             [ 3] 	ldy df_exeoff
dcd9 : 88               [ 2] 	dey
dcda :                       df_rt_findescval_loop
dcda : c8               [ 2] 	iny
dcdb : b1c8             [ 5] 	lda (df_currlin),y
dcdd : c920             [ 2] 	cmp #DFTK_ESCVAL
dcdf : b0f9             [ 3] 	bcs df_rt_findescval_loop
dce1 : 84ca             [ 3] 	sty df_exeoff
dce3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
dce4 :                       df_rt_skip_ws
dce4 : a4ca             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------------------- bank1.s -----------------------------------

dce6 : 88               [ 2] 	dey
dce7 :                       df_rt_skip_ws_loop
dce7 : c8               [ 2] 	iny
dce8 : b1c8             [ 5] 	lda (df_currlin),y
dcea : c920             [ 2] 	cmp #' '
dcec : f0f9             [ 3] 	beq df_rt_skip_ws_loop
dcee : 84ca             [ 3] 	sty df_exeoff
dcf0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
dcf1 :                       df_rt_getlvar
dcf1 : 20d7dc           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
dcf4 : c8               [ 2] 	iny
                             
                             	; get variable address
dcf5 : b1c8             [ 5] 	lda (df_currlin),y
dcf7 : 85e3             [ 3] 	sta df_tmpptra
dcf9 : c8               [ 2] 	iny
dcfa : b1c8             [ 5] 	lda (df_currlin),y
dcfc : 85e4             [ 3] 	sta df_tmpptra+1
                             
dcfe : 84ca             [ 3] 	sty df_exeoff
                             	; get the type
dd00 : a000             [ 2] 	ldy #0
dd02 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
dd04 : 38               [ 2] 	sec
dd05 : a4ca             [ 3] 	ldy df_exeoff
dd07 : 2042da           [ 6] 	jsr df_rt_eval_var
dd0a : 4ca8f1           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
dd0d :                       df_rt_pop_stat_go
dd0d : 2078dc           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
dd10 : 68               [ 4] 	pla
dd11 : a8               [ 2] 	tay
dd12 : 84b8             [ 3] 	sty df_rtstop
dd14 : 18               [ 2] 	clc
dd15 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------------------- bank1.s -----------------------------------

                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
dd16 :                       df_rt_tokenjmp
dd16 : 90e5                  	dw	df_rt_assign
dd18 : f6ef                  	dw	df_rt_proc
dd1a : 96e5                  	dw	df_rt_comment
dd1c : 44e5                  	dw	df_rt_println
dd1e : 09e5                  	dw	df_rt_printat
dd20 : 13e5                  	dw	df_rt_print
dd22 : 96f0                  	dw	df_rt_def			; 0x86
dd24 : 10f1                  	dw	df_rt_enddef		; 0x87
dd26 : 0df1                  	dw	df_rt_return		; 0x88
dd28 : b3ef                  	dw	df_rt_abort			; 0x89
dd2a : eae2                  	dw	df_rt_local
dd2c : 16e3                  	dw	df_rt_dim
dd2e : bfe1                  	dw	df_rt_repeat		; 0x8c
dd30 : c7e1                  	dw	df_rt_until
dd32 : 2ae1                  	dw	df_rt_for			; 0x8e
dd34 : 64e1                  	dw	df_rt_next			; 0x8f
dd36 : 0ce0                  	dw	df_rt_while			; 0x90
dd38 : 71e0                  	dw	df_rt_wend			; 0x81
dd3a : ebe0                  	dw	df_rt_if			; 0x92
dd3c : d9e0                  	dw	df_rt_else			; 0x93
dd3e : d4e0                  	dw	df_rt_endif			; 0x94
dd40 : d9e0                  	dw	df_rt_elseif		; 0x95
dd42 : 96e5                  	dw	df_rt_data			; 0x96
dd44 : b5f4                  	dw	df_rt_asm_assemble	; 0x97
dd46 : 97e5                  	dw	df_rt_run
dd48 : 8ce6                  	dw	df_rt_list
dd4a : b5e2                  	dw	df_rt_input
dd4c : 20e4                  	dw	df_rt_mode
dd4e : a4e3                  	dw	df_rt_plot
dd50 : 0de4                  	dw	df_rt_cursor
dd52 : 9ae3                  	dw	df_rt_cls
dd54 : f0e8                  	dw	df_rt_vpoke
dd56 : 07e9                  	dw	df_rt_setvdp
dd58 : 11e9                  	dw	df_rt_colour
dd5a : 60e9                  	dw	df_rt_spritepat
dd5c : 8ee9                  	dw	df_rt_spritepos
dd5e : cce9                  	dw	df_rt_spritecol
dd60 : d1e9                  	dw	df_rt_spritenme
dd62 : 37e9                  	dw	df_rt_sprite
dd64 : e8e8                  	dw	df_rt_poke
dd66 : dae8                  	dw	df_rt_doke
dd68 : ffe9                  	dw	df_rt_sound
dd6a : 13ea                  	dw	df_rt_music
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------------------- bank1.s -----------------------------------

dd6c : 31ea                  	dw	df_rt_play
dd6e : 0aeb                  	dw	df_rt_save
dd70 : 25eb                  	dw	df_rt_load
dd72 : 2cec                  	dw	df_rt_dir
dd74 : acec                  	dw	df_rt_dirl
dd76 : 77eb                  	dw	df_rt_del
dd78 : 9de2                  	dw	df_rt_read
dd7a : 09e0                  	dw	df_rt_new
dd7c : a8e5                  	dw	df_rt_renum
dd7e : f0e4                  	dw	df_rt_wait
dd80 : e2ec                  	dw	df_rt_reset
dd82 : 20e4                  	dw	df_rt_hires
dd84 : 41e4                  	dw	df_rt_point
dd86 : 69e4                  	dw	df_rt_line
dd88 : 4be4                  	dw	df_rt_hplot
dd8a : 27e4                  	dw	df_rt_pixmode
dd8c : 2de4                  	dw	df_rt_pixmask
dd8e : 33e4                  	dw	df_rt_pixcol
dd90 : 7fe4                  	dw	df_rt_box
dd92 : 57e4                  	dw	df_rt_circle
dd94 : 95e4                  	dw	df_rt_shape
dd96 : bfeb                  	dw	df_rt_vload
dd98 : 90eb                  	dw	df_rt_bload
dd9a : 62ea                  	dw	df_rt_bsave
dd9c : 13e4                  	dw	df_rt_himem
dd9e : 05e0                  	dw	df_rt_monitor
dda0 : 7eeb                  	dw	df_rt_chdir
dda2 : 87eb                  	dw	df_rt_mkdir
dda4 : faec                  	dw	df_rt_datetime
dda6 : fce8                  	dw	df_rt_nvpoke
dda8 : b2eb                  	dw	df_rt_font
ddaa : dbef                  	dw	df_rt_device
ddac : d0ef                  	dw	df_rt_fclose
ddae : 13e3                  	dw	df_rt_redim
ddb0 : 39e4                  	dw  df_rt_put
                             
ddb2 : 72ed                  	dw	df_rt_vpeek
ddb4 : 59ed                  	dw	df_rt_peek
ddb6 : 56ed                  	dw	df_rt_deek
ddb8 : afed                  	dw	df_rt_stick
ddba : 1fee                  	dw	df_rt_key
ddbc : e3ee                  	dw	df_rt_chr
ddbe : 36ef                  	dw	df_rt_left
ddc0 : 47ef                  	dw	df_rt_right
ddc2 : 62ef                  	dw	df_rt_mid
ddc4 : 80ef                  	dw	df_rt_len
ddc6 : d3ed                  	dw	df_rt_mem
ddc8 : 32ee                  	dw	df_rt_scrn
ddca : 8aed                  	dw	df_rt_rnd
ddcc : 4eee                  	dw	df_rt_elapsed
ddce : 6cee                  	dw	df_rt_call
ddd0 : f7ee                  	dw	df_rt_hex
ddd2 : 28ef                  	dw	df_rt_dec
ddd4 : 8cef                  	dw	df_rt_asc
ddd6 : 9def                  	dw	df_rt_val
ddd8 : 42ee                  	dw	df_rt_pixel
ddda : 7eee                  	dw	df_rt_sgn
dddc : 9bee                  	dw	df_rt_addr
ddde : 7eed                  	dw	df_rt_nvpeek
dde0 : b5ef                  	dw	df_rt_fcreate
dde2 : c8ef                  	dw	df_rt_fopen
dde4 : 1fee                  	dw  df_rt_get
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------------------- bank1.s -----------------------------------

                             	
dde6 : 59de                  	dw	df_rt_mult
dde8 : 7ade                  	dw	df_rt_div
ddea : 9bde                  	dw	df_rt_mod
ddec : bcde                  	dw	df_rt_asl
ddee : cfde                  	dw	df_rt_lsr
ddf0 : 33de                  	dw	df_rt_add
ddf2 : 46de                  	dw	df_rt_sub
                             	
ddf4 : e2de                  	dw	df_rt_and
ddf6 : f1de                  	dw	df_rt_or
ddf8 : 00df                  	dw	df_rt_eor
ddfa : 9fdf                  	dw	df_rt_comlte
ddfc : aadf                  	dw	df_rt_comgte
ddfe : b5df                  	dw	df_rt_comne
de00 : 7edf                  	dw	df_rt_comlt
de02 : 89df                  	dw	df_rt_comgt
de04 : 94df                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
de06 :                       df_rt_escjmp
de06 : 60e7                  	dw df_rt_lst_chr
de08 : 5fe7                  	dw df_rt_lst_reserved
de0a : 5fe7                  	dw df_rt_lst_reserved
de0c : 5fe7                  	dw df_rt_lst_reserved
de0e : 5fe7                  	dw df_rt_lst_reserved	
de10 : 5fe7                  	dw df_rt_lst_reserved	; no such thing as bytdec
de12 : 7de7                  	dw df_rt_lst_bythex
de14 : a2e7                  	dw df_rt_lst_bytbin
de16 : 5fe7                  	dw df_rt_lst_reserved	
de18 : c6e7                  	dw df_rt_lst_intdec
de1a : 90e7                  	dw df_rt_lst_inthex
de1c : aae7                  	dw df_rt_lst_intbin
de1e : 5fe7                  	dw df_rt_lst_reserved
de20 : 5fe7                  	dw df_rt_lst_reserved
de22 : 5fe7                  	dw df_rt_lst_reserved
de24 : 5fe7                  	dw df_rt_lst_reserved	
de26 : 23e8                  	dw df_rt_lst_strlit
de28 : d1e7                  	dw df_rt_lst_var
de2a : d1e7                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------------------- bank1.s -----------------------------------

                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
de2c :                       mod_sz_rtsubs_s
                             
                             	include "dflat\numop.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
de2c :                       df_rt_putintres
de2c : a6e3             [ 3] 	ldx df_tmpptra
de2e : a5e4             [ 3] 	lda df_tmpptra+1
de30 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
de33 :                       df_rt_add
de33 : 2045db           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
de43 : 4c2cde           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
de46 :                       df_rt_sub
de46 : 2045db           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
de56 : 4c2cde           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
de59 :                       df_rt_mult
de59 : 2045db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de6c : 20b6cb           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
de77 : 4c2cde           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
de7a :                       df_rt_div
de7a : 2045db           [ 6] 	jsr df_rt_get2Ints
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------------------- bank1.s -----------------------------------

                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
de8d : 20dfcb           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
de98 : 4c2cde           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
de9b :                       df_rt_mod
de9b : 2045db           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
deae : 20dfcb           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
deb9 : 4c2cde           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
debc :                       df_rt_asl
debc : 2045db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
debf : a6e5             [ 3] 	ldx df_tmpptrb
dec1 : e8               [ 2] 	inx
dec2 :                       df_rt_aslbit
dec2 : ca               [ 2] 	dex
dec3 : f007             [ 3] 	beq df_rt_asldone
dec5 : 06e3             [ 5] 	asl df_tmpptra
dec7 : 26e4             [ 5] 	rol df_tmpptra+1
dec9 : 4cc2de           [ 3] 	jmp df_rt_aslbit
decc :                       df_rt_asldone
decc : 4c2cde           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
decf :                       df_rt_lsr
decf : 2045db           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
ded2 : a6e5             [ 3] 	ldx df_tmpptrb
ded4 : e8               [ 2] 	inx
ded5 :                       df_rt_lsrbit
ded5 : ca               [ 2] 	dex
ded6 : f007             [ 3] 	beq df_rt_lsrdone
ded8 : 46e4             [ 5] 	lsr df_tmpptra+1
deda : 66e3             [ 5] 	ror df_tmpptra
dedc : 4cd5de           [ 3] 	jmp df_rt_lsrbit
dedf :                       df_rt_lsrdone
dedf : 4c2cde           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
dee2 :                       df_rt_and
dee2 : 2045db           [ 6] 	jsr df_rt_get2Ints
dee5 : a5e3             [ 3] 	lda df_tmpptra
dee7 : 25e5             [ 3] 	and df_tmpptrb
dee9 : aa               [ 2] 	tax
deea : a5e4             [ 3] 	lda df_tmpptra+1
deec : 25e6             [ 3] 	and df_tmpptrb+1
deee : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------------------- bank1.s -----------------------------------

def1 :                       df_rt_or
def1 : 2045db           [ 6] 	jsr df_rt_get2Ints
def4 : a5e3             [ 3] 	lda df_tmpptra
def6 : 05e5             [ 3] 	ora df_tmpptrb
def8 : aa               [ 2] 	tax
def9 : a5e4             [ 3] 	lda df_tmpptra+1
defb : 05e6             [ 3] 	ora df_tmpptrb+1
defd : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
df00 :                       df_rt_eor
df00 : 2045db           [ 6] 	jsr df_rt_get2Ints
df03 : a5e3             [ 3] 	lda df_tmpptra
df05 : 45e5             [ 3] 	eor df_tmpptrb
df07 : aa               [ 2] 	tax
df08 : a5e4             [ 3] 	lda df_tmpptra+1
df0a : 45e6             [ 3] 	eor df_tmpptrb+1
df0c : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
df0f :                       df_rt_aequb
df0f : a5e3             [ 3] 	lda df_tmpptra
df11 : c5e5             [ 3] 	cmp df_tmpptrb
df13 : d004             [ 3] 	bne df_rt_aequbFin
df15 : a5e4             [ 3] 	lda df_tmpptra+1
df17 : c5e6             [ 3] 	cmp df_tmpptrb+1
df19 :                       df_rt_aequbFin
df19 : 60               [ 6] 	rts
                             
                             ; a-b common function
df1a :                       df_rt_asubb
df1a : 38               [ 2] 	sec
df1b : a5e3             [ 3] 	lda df_tmpptra
df1d : e5e5             [ 3] 	sbc df_tmpptrb
df1f : a5e4             [ 3] 	lda df_tmpptra+1
df21 : e5e6             [ 3] 	sbc df_tmpptrb+1
df23 : 5002             [ 3] 	bvc df_rt_asubbFin
df25 : 4980             [ 2] 	eor #0x80
df27 :                       df_rt_asubbFin
df27 : 60               [ 6] 	rts
                             
                             ; b-a common function
df28 :                       df_rt_bsuba
df28 : 38               [ 2] 	sec
df29 : a5e5             [ 3] 	lda df_tmpptrb
df2b : e5e3             [ 3] 	sbc df_tmpptra
df2d : a5e6             [ 3] 	lda df_tmpptrb+1
df2f : e5e4             [ 3] 	sbc df_tmpptra+1
df31 : 5002             [ 3] 	bvc df_rt_bsubaFin
df33 : 4980             [ 2] 	eor #0x80
df35 :                       df_rt_bsubaFin
df35 : 60               [ 6] 	rts
                             
                             ; common routine push true
df36 :                       df_rt_true
df36 : a2ff             [ 2] 	ldx #0xff
df38 : 8a               [ 2] 	txa
df39 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
df3c :                       df_rt_false
df3c : a200             [ 2] 	ldx #0x00
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------------------- bank1.s -----------------------------------

df3e : 8a               [ 2] 	txa
df3f : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
df42 :                       df_rt_lt
df42 : 2045db           [ 6] 	jsr df_rt_get2Ints
df45 : 201adf           [ 6] 	jsr df_rt_asubb
df48 : 30ec             [ 3] 	bmi df_rt_true
df4a : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
df4c :                       df_rt_lte
df4c : 2045db           [ 6] 	jsr df_rt_get2Ints
df4f :                       df_rt_lte_calc
df4f : 2028df           [ 6] 	jsr df_rt_bsuba
df52 : 30e8             [ 3] 	bmi df_rt_false
df54 : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
df56 :                       df_rt_gt
df56 : 2045db           [ 6] 	jsr df_rt_get2Ints
df59 : 2028df           [ 6] 	jsr df_rt_bsuba
df5c : 30d8             [ 3] 	bmi df_rt_true
df5e : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
df60 :                       df_rt_gte
df60 : 2045db           [ 6] 	jsr df_rt_get2Ints
df63 :                       df_rt_gte_calc
df63 : 201adf           [ 6] 	jsr df_rt_asubb
df66 : 10ce             [ 3] 	bpl df_rt_true
df68 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
df6a :                       df_rt_eq
df6a : 2045db           [ 6] 	jsr df_rt_get2Ints
df6d : 200fdf           [ 6] 	jsr df_rt_aequb
df70 : d0ca             [ 3] 	bne df_rt_false
df72 : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
df74 :                       df_rt_ne
df74 : 2045db           [ 6] 	jsr df_rt_get2Ints
df77 : 200fdf           [ 6] 	jsr df_rt_aequb
df7a : f0c0             [ 3] 	beq df_rt_false
df7c : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
df7e :                       df_rt_comlt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df83 : 2904             [ 2] 	and #DFST_STR
df85 : d054             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
df87 : f0b9             [ 3] 	beq df_rt_lt
                             
df89 :                       df_rt_comgt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------------------- bank1.s -----------------------------------

df8e : 2904             [ 2] 	and #DFST_STR
df90 : d050             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
df92 : f0c2             [ 3] 	beq df_rt_gt
                             
df94 :                       df_rt_comeq
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
df99 : 2904             [ 2] 	and #DFST_STR
df9b : d04e             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
df9d : f0cb             [ 3] 	beq df_rt_eq
                             
df9f :                       df_rt_comlte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
dfa4 : 2904             [ 2] 	and #DFST_STR
dfa6 : d018             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
dfa8 : f0a2             [ 3] 	beq df_rt_lte
                             	
dfaa :                       df_rt_comgte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
dfaf : 2904             [ 2] 	and #DFST_STR
dfb1 : d01a             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
dfb3 : f0ab             [ 3] 	beq df_rt_gte
                             
dfb5 :                       df_rt_comne
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
dfba : 2904             [ 2] 	and #DFST_STR
dfbc : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
dfbe : f0b4             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
dfc0 :                       df_rt_slte
dfc0 : 20f2df           [ 6] 	jsr df_rt_str_comp
dfc3 : 9005             [ 3] 	bcc df_rt_str_comp_true
dfc5 : f003             [ 3] 	beq df_rt_str_comp_true
dfc7 :                       df_rt_str_comp_false
dfc7 : 4c3cdf           [ 3] 	jmp df_rt_false
dfca :                       df_rt_str_comp_true
dfca : 4c36df           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
dfcd :                       df_rt_sgte
dfcd : 20f2df           [ 6] 	jsr df_rt_str_comp
dfd0 : b0f8             [ 3] 	bcs df_rt_str_comp_true
dfd2 : 90f3             [ 3] 	bcc df_rt_str_comp_false
                             
                             ; string not equal
dfd4 :                       df_rt_sne
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------------------- bank1.s -----------------------------------

dfd4 : 20f2df           [ 6] 	jsr df_rt_str_comp
dfd7 : d0f1             [ 3] 	bne df_rt_str_comp_true
dfd9 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
dfdb :                       df_rt_slt
dfdb : 20f2df           [ 6] 	jsr df_rt_str_comp
dfde : 90ea             [ 3] 	bcc df_rt_str_comp_true
dfe0 : b0e5             [ 3] 	bcs df_rt_str_comp_false
                             
                             ; string greater than
dfe2 :                       df_rt_sgt
dfe2 : 20f2df           [ 6] 	jsr df_rt_str_comp
dfe5 : f0e0             [ 3] 	beq df_rt_str_comp_false
dfe7 : 90de             [ 3] 	bcc df_rt_str_comp_false
dfe9 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
dfeb :                       df_rt_seq
dfeb : 20f2df           [ 6] 	jsr df_rt_str_comp
dfee : f0da             [ 3] 	beq df_rt_str_comp_true
dff0 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; C=0 means <
                             ; C=1,Z=0 means >
                             ; C=1,Z=1 means ==
dff2 :                       df_rt_str_comp
dff2 : 2054db           [ 6] 	jsr df_rt_get2Strs
dff5 : a000             [ 2] 	ldy #0
dff7 :                       df_rt_str_comp_byte
dff7 : b1e3             [ 5] 	lda (df_tmpptra),y
dff9 : d1e5             [ 5] 	cmp (df_tmpptrb),y
dffb : d007             [ 4] 	bne df_rt_str_comp_done
                             	; if here then both strings still the same
dffd : c900             [ 2] 	cmp #0				; What was op1 char
                             	; if char is zero then end
dfff : f003             [ 4] 	beq df_rt_str_comp_done
                             	; else do next char
e001 : c8               [ 2] 	iny
e002 : d0f3             [ 4] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e004 :                       df_rt_str_comp_done
e004 : 60               [ 6] 	rts
                             
                             
                             
                             
e005 :                       df_rt_monitor
e005 : 20b6c2           [ 6] 	jsr _command_line
e008 : 60               [ 6] 	rts
                             	
e009 :                       df_rt_new
e009 : 4ceef1           [ 3] 	jmp df_clear
                             
                             ; df_rt_gotosub_common
                             ; 	; get line number in A,X and put in num_a
                             ; 	jsr df_rt_getnval
                             ; 	stx num_a
                             ; 	sta num_a+1
                             ; 	; For the moment start from the beginning
                             ; 	ldy df_prgstrt		; num_tmp contains starting po
                             ; 	sty num_tmp
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------------------- bank1.s -----------------------------------

                             ; 	ldy df_prgstrt+1
                             ; 	sty num_tmp+1
                             ; 	; if current line number > target then start f
                             ; 	; else start from this line number
                             ; 	; do a trial substract of current - target
                             ; 	sec
                             ; 	ldy #DFTK_LINNUM
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a
                             ; 	iny
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a+1
                             ; 	; if C=1 then current >= target so start from 
                             ; 	bcs df_rt_goto_find_line
                             ; 	; else use current line address
                             ; 	lda df_currlin
                             ; 	sta num_tmp
                             ; 	lda df_currlin+1
                             ; 	sta num_tmp+1
                             ; df_rt_goto_find_line
                             ; 	jsr df_pg_check_next_line	; Reuses the line fi
                             ; 	bcs df_rt_goto_not_found	; If no exact match t
                             ; 	rts							; X,A contains address of target lin
                             ; df_rt_goto_not_found
                             ; 	SWBRK DFERR_NOLINE
                             
                             ; df_rt_gosub
                             ; 	; push statement address for return
                             ; 	jsr df_rt_push_stat
                             ; 	; DFRT_WHILE token
                             ; 	lda #DFRT_GOSUB
                             ; 	jsr df_rst_pushByte
                             ; 	; *IMPORTANT* : falls through to the goto code
                             ; df_rt_goto
                             ; 	; Find the line number to goto
                             ; 	jsr df_rt_gotosub_common
                             ; 	; Save it in the next line property
                             ; 	stx df_nextlin
                             ; 	sta df_nextlin+1
                             ; 	; GOTO is from the beginning of a line only
                             ; 	ldy #3
                             ; 	sty df_nxtstidx
                             ; 	; Runtime will change flow to use next line pr
                             ; 	rts
                             
                             ; df_rt_retsub
                             ; 	; The top of stack needs to be a gosub return 
                             ; 	jsr df_rst_popByte
                             ; 	cmp #DFRT_GOSUB
                             ; 	bne df_rt_retsub_err
                             ; 	; pop the stat and continue
                             ; 	jmp df_rt_pop_stat
                             ; df_rt_retsub_err
                             ; 	SWBRK DFERR_RETURN
                             
                             
e00c :                       df_rt_while
                             	; push statement address
e00c : 206cdc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e00f : a990             [ 2] 	lda #DFRT_WHILE
e011 : 204ef1           [ 6] 	jsr df_rst_pushByte
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------------------- bank1.s -----------------------------------

                             
                             	; get value in A,X
e014 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e017 : e000             [ 2] 	cpx #0
e019 : f001             [ 3] 	beq df_rt_while_done
e01b : 60               [ 6] 	rts
e01c :                       df_rt_while_done
                             	; pop while data off stack as not needed
e01c : 2057f1           [ 6] 	jsr df_rst_popByte
e01f : 2057f1           [ 6] 	jsr df_rst_popByte
e022 : 2074f1           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e025 : a5d5             [ 3] 	lda df_ifnest
e027 : 48               [ 3] 	pha
e028 : a901             [ 2] 	lda #1
e02a : 85d5             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e034 :                       df_rt_findwend
e034 : a6cb             [ 3] 	ldx df_nextlin
e036 : a5cc             [ 3] 	lda df_nextlin+1
e038 : a4c2             [ 3] 	ldy df_curstidx
e03a : 203edc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e03d : b030             [ 3] 	bcs df_rt_wend_end
e03f : 86cb             [ 3] 	stx df_nextlin
e041 : 85cc             [ 3] 	sta df_nextlin+1
e043 : 84c2             [ 3] 	sty df_curstidx
                             	; find the command token
e045 :                       df_rt_while_cmd
e045 : c8               [ 2] 	iny
e046 : b1cb             [ 5] 	lda (df_nextlin),y
e048 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e04a : c991             [ 2] 	cmp #DFRT_WEND
e04c : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e04e : c6d5             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e050 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e052 : 68               [ 4] 	pla
e053 : 85d5             [ 3] 	sta df_ifnest
e055 : a6cb             [ 3] 	ldx df_nextlin
e057 : a5cc             [ 3] 	lda df_nextlin+1
e059 : a4c2             [ 3] 	ldy df_curstidx
e05b : 203edc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e05e : b00f             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e060 : 86cb             [ 3] 	stx df_nextlin
e062 : 85cc             [ 3] 	sta df_nextlin+1
e064 : 84c1             [ 3] 	sty df_nxtstidx	
e066 : 60               [ 6] 	rts
e067 :                       df_rt_check_while
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------------------- bank1.s -----------------------------------

                             	; check for while
e067 : c990             [ 2] 	cmp #DFRT_WHILE
e069 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e06b : e6d5             [ 5] 	inc df_ifnest
e06d : 80c5             [ 3] 	bra df_rt_findwend
e06f :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e071 :                       df_rt_wend
e071 : 2057f1           [ 6] 	jsr df_rst_popByte
e074 : c990             [ 2] 	cmp #DFRT_WHILE
e076 : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e078 : 2074f1           [ 6] 	jsr df_rst_popWord
e07b : 86cb             [ 3] 	stx	df_nextlin
e07d : 85cc             [ 3] 	sta df_nextlin+1
e07f : 2057f1           [ 6] 	jsr df_rst_popByte
e082 : 85c1             [ 3] 	sta df_nxtstidx
e084 : 60               [ 6] 	rts
e085 :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e087 :                       df_rt_if_stat
e087 : a6cb             [ 3] 	ldx df_nextlin
e089 : a5cc             [ 3] 	lda df_nextlin+1
e08b : a4c2             [ 3] 	ldy df_curstidx
e08d : 203edc           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e090 : b009             [ 3] 	bcs df_rt_if_stat_err
e092 : 86cb             [ 3] 	stx df_nextlin
e094 : 85cc             [ 3] 	sta df_nextlin+1
e096 : 84c2             [ 3] 	sty df_curstidx
e098 : 84c1             [ 3] 	sty df_nxtstidx
e09a : 60               [ 6] 	rts
                             ; program ended with no match
e09b :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             	
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e09d :                       df_rt_if_match
                             	; save the current if nest level
e09d : a5d5             [ 3] 	lda df_ifnest
e09f : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e0a0 : 64d5             [ 3] 	stz df_ifnest	
                             	; save match pref
e0a2 : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e0a3 :                       df_rt_findelseendif
e0a3 : 2087e0           [ 6] 	jsr df_rt_if_stat
                             	; find command
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------------------- bank1.s -----------------------------------

e0a6 :                       df_rt_ifcmd
e0a6 : c8               [ 2] 	iny
e0a7 : b1cb             [ 5] 	lda (df_nextlin),y
e0a9 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e0ab : c994             [ 2] 	cmp #DFRT_ENDIF
e0ad : f014             [ 3] 	beq df_rt_ifelse
                             
e0af : 28               [ 4] 	plp
e0b0 : 08               [ 3] 	php
                             	
e0b1 : b008             [ 3] 	bcs df_rt_ifskipelseif
e0b3 : c993             [ 2] 	cmp #DFRT_ELSE
e0b5 : f00c             [ 3] 	beq df_rt_ifelse
e0b7 : c995             [ 2] 	cmp #DFRT_ELSEIF
e0b9 : f008             [ 3] 	beq df_rt_ifelse
e0bb :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e0bb : c992             [ 2] 	cmp #DFRT_IF
e0bd : d002             [ 3] 	bne df_rt_skipnestif
e0bf : e6d5             [ 5] 	inc df_ifnest
e0c1 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e0c1 : 80e0             [ 3] 	bra df_rt_findelseendif
                             	
                             	; found else/elseif/endif
                             	; but check if this is nested
e0c3 :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e0c3 : a6d5             [ 3] 	ldx df_ifnest
e0c5 : f008             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e0c7 : c994             [ 2] 	cmp #DFRT_ENDIF
e0c9 : d002             [ 3] 	bne df_rt_skipnestendif
e0cb : c6d5             [ 5] 	dec df_ifnest
e0cd :                       df_rt_skipnestendif	
                             	; continue to search for else/endif
e0cd : 80d4             [ 3] 	bra df_rt_findelseendif
                             	; ok got a match
e0cf :                       df_rt_if_found
                             	; remove pref
e0cf : 28               [ 4] 	plp
                             	; restore global if nest
e0d0 : fa               [ 4] 	plx
e0d1 : 86d5             [ 3] 	stx df_ifnest
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e0d3 : 60               [ 6] 	rts
                             
e0d4 :                       df_rt_endif
                             	; decrement if next level
e0d4 : c6d5             [ 5] 	dec df_ifnest
e0d6 : 3011             [ 3] 	bmi df_rt_noif_err
                             ;	clc
e0d8 : 60               [ 6] 	rts
                             	
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e0d9 :                       df_rt_elseif
e0d9 :                       df_rt_else
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------------------- bank1.s -----------------------------------

                             	; not in if mode then error
e0d9 : a5d5             [ 3] 	lda df_ifnest
e0db : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e0e5 : 38               [ 2] 	sec
e0e6 : 4c9de0           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if	
e0e9 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             	
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e0eb :                       df_rt_if
                             	; increment global if nest counter
e0eb : e6d5             [ 5] 	inc df_ifnest
e0ed :                       df_rt_ifeval
                             	; get value
e0ed : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e0f0 : c900             [ 2] 	cmp #0
e0f2 : d035             [ 4] 	bne df_rt_if_done
e0f4 : e000             [ 2] 	cpx #0
e0f6 : d031             [ 4] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e100 : 18               [ 2] 	clc						
e101 : 209de0           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e104 : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e106 : f01e             [ 3] 	beq df_rt_do_else
                             
e108 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e10a : f01d             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e114 : c8               [ 2] 	iny
e115 : 5a               [ 3] 	phy
                             	; initialise statement pointer
e116 : a4c2             [ 3] 	ldy df_curstidx
e118 : a6c8             [ 3] 	ldx df_currlin
e11a : a5c9             [ 3] 	lda df_currlin+1
e11c : 20c2db           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e11f : 7a               [ 4] 	ply
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------------------- bank1.s -----------------------------------

e120 : 84ca             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e122 : 64cc             [ 3] 	stz df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e124 : 80c7             [ 4] 	bra df_rt_ifeval
                             	
e126 :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e126 : 2087e0           [ 6] 	jsr df_rt_if_stat
e129 :                       df_rt_if_done
                             ;	clc
e129 : 60               [ 6] 	rts
                             	
e12a :                       df_rt_for
                             	; push statement address to rt stack
e12a : 206cdc           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e12d : 20f1dc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e130 : 48               [ 3] 	pha
e131 : da               [ 3] 	phx
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e132 : e6ca             [ 5] 	inc df_exeoff
e134 : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter
e137 : fa               [ 4] 	plx
e138 : 86e3             [ 3] 	stx df_tmpptra
e13a : 68               [ 4] 	pla
e13b : 85e4             [ 3] 	sta df_tmpptra+1
e13d : 48               [ 3] 	pha
e13e : da               [ 3] 	phx
                             	; get the starting value from op stack
e13f : 20acf1           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e142 : a001             [ 2] 	ldy #1
e144 : 91e3             [ 5] 	sta (df_tmpptra),y
e146 : 8a               [ 2] 	txa
e147 : 88               [ 2] 	dey
e148 : 92e3             [ 5] 	sta (df_tmpptra)
                             
                             	; find end value
                             	; evaluate the end value
e14a : e6ca             [ 5] 	inc df_exeoff
e14c : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e14f : 2066f1           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e152 : e6ca             [ 5] 	inc df_exeoff
e154 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e157 : 2066f1           [ 6] 	jsr df_rst_pushWord
                             	; save the counter slot address
e15a : fa               [ 4] 	plx
e15b : 68               [ 4] 	pla
e15c : 2066f1           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------------------- bank1.s -----------------------------------

                             	; now push for token
e15f : a98e             [ 2] 	lda #DFRT_FOR
e161 : 4c4ef1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             
e164 :                       df_rt_next
                             	; remember stack position
e164 : a4b8             [ 3] 	ldy df_rtstop
e166 : 5a               [ 3] 	phy
e167 : 2057f1           [ 6] 	jsr df_rst_popByte
e16a : c98e             [ 2] 	cmp #DFRT_FOR
e16c : d04f             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e16e : 2074f1           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e171 : 86e9             [ 3] 	stx df_tmpptrd
e173 : 85ea             [ 3] 	sta df_tmpptrd+1
e175 : b2e9             [ 5] 	lda (df_tmpptrd)
e177 : 85e3             [ 3] 	sta df_tmpptra
e179 : a001             [ 2] 	ldy #1
e17b : b1e9             [ 5] 	lda (df_tmpptrd),y
e17d : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; get step value, save in ptrb
e17f : 2074f1           [ 6] 	jsr df_rst_popWord
e182 : 86e5             [ 3] 	stx df_tmpptrb
e184 : 85e6             [ 3] 	sta df_tmpptrb+1
e186 : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e194 : a5e3             [ 3] 	lda df_tmpptra
e196 : 92e9             [ 5] 	sta (df_tmpptrd)
e198 : a001             [ 2] 	ldy #1
e19a : a5e4             [ 3] 	lda df_tmpptra+1
e19c : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	
                             	; get end value, save in ptrb
e19e : 2074f1           [ 6] 	jsr df_rst_popWord
e1a1 : 86e5             [ 3] 	stx df_tmpptrb
e1a3 : 85e6             [ 3] 	sta df_tmpptrb+1
e1a5 : 68               [ 4] 	pla					; check if if +ve or -ve step
e1a6 : 1005             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e1a8 : 2063df           [ 6] 	jsr df_rt_gte_calc
e1ab : 8003             [ 3] 	bra df_rt_next_check
e1ad :                       df_rt_check_pos	
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e1ad : 204fdf           [ 6] 	jsr df_rt_lte_calc
e1b0 :                       df_rt_next_check
                             	; check if true or false
e1b0 : 20acf1           [ 6] 	jsr df_ost_popInt
e1b3 : e000             [ 2] 	cpx #0
                             	; if false then next is done
e1b5 : f003             [ 3] 	beq df_next_done
                             	; else we continue
e1b7 : 4c0ddd           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e1ba :                       df_next_done
AS65 Assembler for R6502 [1.42].                                     Page  138
---------------------------------- bank1.s -----------------------------------

e1ba : 4cdbe1           [ 3] 	jmp df_rt_untilnext_done
                             	
e1bd :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             	
e1bf :                       df_rt_repeat
                             	; push statement address
e1bf : 206cdc           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e1c2 : a98c             [ 2] 	lda #DFRT_REPEAT
e1c4 : 4c4ef1           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             	
e1c7 :                       df_rt_until
                             	; remember stack position
e1c7 : a4b8             [ 3] 	ldy df_rtstop
e1c9 : 5a               [ 3] 	phy
e1ca : 2057f1           [ 6] 	jsr df_rst_popByte
e1cd : c98c             [ 2] 	cmp #DFRT_REPEAT
e1cf : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e1d1 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e1d4 : e000             [ 2] 	cpx #0
e1d6 : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e1d8 : 4c0ddd           [ 3] 	jmp df_rt_pop_stat_go
                             
e1db :                       df_rt_untilnext_done
e1db : 7a               [ 4] 	ply
                             	; pop 2 items off stack (line address, index)
e1dc : 2074f1           [ 6] 	jsr df_rst_popWord
e1df : 4c57f1           [ 3] 	jmp df_rst_popByte
                             	; and continue
                             ;	clc
                             ;	rts
                             
e1e2 :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             	
e1e4 :                       df_rt_sadd
                             ;	clc
e1e4 : 60               [ 6] 	rts
                             	
e1e5 :                       df_rt_print_num
e1e5 : 20acf1           [ 6] 	jsr df_ost_popInt
e1e8 : 18               [ 2] 	clc
e1e9 : 4cd7ca           [ 3] 	jmp print_a_to_d
                             ;	rts
                             	
e1ec :                       df_rt_print_str
e1ec : 20a4f1           [ 6] 	jsr df_ost_popStr
e1ef : 86e3             [ 3] 	stx df_tmpptra
e1f1 : 85e4             [ 3] 	sta df_tmpptra+1
e1f3 : a000             [ 2] 	ldy #0
e1f5 :                       df_rt_print_str_ch
e1f5 : b1e3             [ 5] 	lda (df_tmpptra),y
e1f7 : f006             [ 3] 	beq df_rt_print_str_done
AS65 Assembler for R6502 [1.42].                                     Page  139
---------------------------------- bank1.s -----------------------------------

e1f9 : 2060c5           [ 6] 	jsr io_put_ch
e1fc : c8               [ 2] 	iny
e1fd : 80f6             [ 3] 	bra df_rt_print_str_ch
e1ff :                       df_rt_print_str_done
                             ;	clc
e1ff : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e200 :                       df_rt_nextdatum
e200 : a200             [ 2] 	ldx #0
                             	; load data line offset
e202 : a4d8             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e204 : a5d7             [ 3] 	lda df_currdat+1
e206 : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e210 :                       df_rt_datlinstart
                             	; if end of program then error
e210 : a1d6             [ 6] 	lda (df_currdat,x)
e212 : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
e214 : a003             [ 2] 	ldy #3
e216 : 84d8             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e218 :                       df_rt_datastatement
e218 : c8               [ 2] 	iny
e219 : 98               [ 2] 	tya
                             	; end of line reached?
e21a : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e21c : d00e             [ 3] 	bne df_rt_getdatatk
e21e :                       df_rt_datnextlin
                             	; if so then go to next line
e21e : 18               [ 2] 	clc
e21f : a5d6             [ 3] 	lda df_currdat
e221 : 61d6             [ 6] 	adc (df_currdat,x)
e223 : 85d6             [ 3] 	sta df_currdat
                             	_bcc 2
                             
e227 : e6d7             [ 5] 	inc df_currdat+1
e229 : 4c10e2           [ 3] 	jmp df_rt_datlinstart
e22c :                       df_rt_getdatatk
e22c : b1d6             [ 5] 	lda (df_currdat),y
e22e : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e230 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e232 : d0ea             [ 3] 	bne df_rt_datnextlin
e234 : 84d8             [ 3] 	sty df_datoff
e236 :                       df_rt_skipinitdataptr
e236 : 98               [ 2] 	tya
                             	; end of line reached?
e237 : c1d6             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e239 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e23b : b1d6             [ 5] 	lda (df_currdat),y
e23d : c920             [ 2] 	cmp #DFTK_ESCVAL
e23f : c8               [ 2] 	iny
e240 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
AS65 Assembler for R6502 [1.42].                                     Page  140
---------------------------------- bank1.s -----------------------------------

                             	; ok found an escape value
                             	; save position and return
e242 : 88               [ 2] 	dey
e243 : 84d8             [ 3] 	sty df_datoff
e245 : 60               [ 6] 	rts
e246 :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e248 :                       df_rt_readdatum
                             	; update data pointer to next data item
e248 : 2000e2           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e24b : 20f1dc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e24e : 86e5             [ 3] 	stx df_tmpptrb
e250 : 85e6             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e252 : a5c8             [ 3] 	lda df_currlin
e254 : 48               [ 3] 	pha
e255 : a5c9             [ 3] 	lda df_currlin+1
e257 : 48               [ 3] 	pha
e258 : a5ca             [ 3] 	lda df_exeoff
e25a : 48               [ 3] 	pha
e25b : a5c0             [ 3] 	lda df_eolidx
e25d : 48               [ 3] 	pha
e25e : a5c1             [ 3] 	lda df_nxtstidx
e260 : 48               [ 3] 	pha
e261 : a5c2             [ 3] 	lda df_curstidx
e263 : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
e26c : a5d8             [ 3] 	lda df_datoff
e26e : 85ca             [ 3] 	sta df_exeoff
e270 : a200             [ 2] 	ldx #0
e272 : a1d6             [ 6] 	lda (df_currdat,x)
e274 : 85c0             [ 3] 	sta df_eolidx
e276 : 85c1             [ 3] 	sta df_nxtstidx
e278 : a903             [ 2] 	lda #3
e27a : 85c2             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
e27c : a1e3             [ 6] 	lda (df_tmpptra,x)
e27e : a8               [ 2] 	tay
                             	; get lvar point from tmpb
e27f : a6e5             [ 3] 	ldx df_tmpptrb
e281 : a5e6             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
e283 : 2082e5           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
e286 : a5ca             [ 3] 	lda df_exeoff
e288 : 85d8             [ 3] 	sta df_datoff
                             	; restore line settings
e28a : 68               [ 4] 	pla
e28b : 85c2             [ 3] 	sta df_curstidx
e28d : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  141
---------------------------------- bank1.s -----------------------------------

e28e : 85c1             [ 3] 	sta df_nxtstidx
e290 : 68               [ 4] 	pla
e291 : 85c0             [ 3] 	sta df_eolidx
e293 : 68               [ 4] 	pla
e294 : 85ca             [ 3] 	sta df_exeoff
e296 : 68               [ 4] 	pla
e297 : 85c9             [ 3] 	sta df_currlin+1
e299 : 68               [ 4] 	pla
e29a : 85c8             [ 3] 	sta df_currlin
e29c : 60               [ 6] 	rts
                             
                             
e29d :                       df_rt_read
                             	; find variable to read in to from current posit
e29d : a4ca             [ 3] 	ldy df_exeoff
e29f :                       df_rt_read_find_var
e29f : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
e2a0 : c4c1             [ 3] 	cpy df_nxtstidx
e2a2 : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
e2a4 : b1c8             [ 5] 	lda (df_currlin),y
e2a6 : c920             [ 2] 	cmp #DFTK_ESCVAL
e2a8 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
e2aa : 84ca             [ 3] 	sty df_exeoff
                             	; go and read in the value
e2ac : 2048e2           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
e2af : 4c9de2           [ 3] 	jmp df_rt_read
                             
e2b2 :                       df_rt_read_done
                             	; save position
e2b2 : 84ca             [ 3] 	sty df_exeoff
e2b4 : 60               [ 6] 	rts
                             
                             
e2b5 :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
e2b5 : 20f1dc           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e2b8 : 86e5             [ 3] 	stx df_tmpptrb
e2ba : 85e6             [ 3] 	sta df_tmpptrb+1
e2bc : a078             [ 2] 	ldy #120
                             	; go read a line of input
                             	; X,A is ptr has the input, Y is size
e2be : 38               [ 2] 	sec
e2bf : 206fc5           [ 6] 	jsr io_read_line
                             	; check the type
e2c2 : b2e3             [ 5] 	lda (df_tmpptra)
e2c4 : 2904             [ 2] 	and #DFVVT_STR
e2c6 : d008             [ 3] 	bne df_rt_input_str
e2c8 : b2e3             [ 5] 	lda (df_tmpptra)
e2ca : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e2cc : d003             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
e2ce : 8018             [ 3] 	bra df_rt_input_err
e2d0 :                       df_rt_input_str
                             	; If string then done!
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  142
---------------------------------- bank1.s -----------------------------------

e2d0 : 60               [ 6] 	rts
                             
e2d1 :                       df_rt_input_num
                             	; X,A = address from tmpb, linbuff must be on pa
e2d1 : a6e5             [ 3] 	ldx df_tmpptrb
e2d3 : a5e6             [ 3] 	lda df_tmpptrb+1
e2d5 : a000             [ 2] 	ldy #0				; any numeric format
e2d7 : 2098c8           [ 6] 	jsr con_n_to_a
e2da : b00c             [ 3] 	bcs df_rt_input_err
e2dc : a000             [ 2] 	ldy #0
e2de : a585             [ 3] 	lda num_a
e2e0 : 91e5             [ 5] 	sta (df_tmpptrb),y
e2e2 : c8               [ 2] 	iny
e2e3 : a586             [ 3] 	lda num_a+1
e2e5 : 91e5             [ 5] 	sta (df_tmpptrb),y
                             ;	clc
e2e7 : 60               [ 6] 	rts
e2e8 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             	
e2ea :                       df_rt_local
                             	; get current local count off rt stack
e2ea : 2057f1           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
e2ed : 48               [ 3] 	pha
e2ee : a4ca             [ 3] 	ldy df_exeoff
e2f0 : 88               [ 2] 	dey
e2f1 :                       df_rt_local_findesc
e2f1 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
e2f2 : c4c1             [ 3] 	cpy df_nxtstidx
e2f4 : f019             [ 4] 	beq df_rt_local_done
                             	; find a var
e2f6 : b1c8             [ 5] 	lda (df_currlin),y
e2f8 : c911             [ 2] 	cmp #DFTK_VAR
e2fa : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
e2fc : c8               [ 2] 	iny
                             	; get var slot in A,X
e2fd : b1c8             [ 5] 	lda (df_currlin),y
e2ff : aa               [ 2] 	tax
e300 : c8               [ 2] 	iny
e301 : b1c8             [ 5] 	lda (df_currlin),y
e303 : 84ca             [ 3] 	sty df_exeoff
                             	; localise this variable
e305 : 203af1           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
e308 : 68               [ 4] 	pla
e309 : 1a               [ 2] 	inc a
e30a : 48               [ 3] 	pha
e30b : a4ca             [ 3] 	ldy df_exeoff
e30d : 80e2             [ 4] 	bra df_rt_local_findesc
e30f :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
e30f : 68               [ 4] 	pla
e310 : 4c4ef1           [ 3] 	jmp df_rst_pushByte
                             ;	clc
                             ;	rts
AS65 Assembler for R6502 [1.42].                                     Page  143
---------------------------------- bank1.s -----------------------------------

                             	
e313 :                       df_rt_redim
e313 : 38               [ 2] 	sec
e314 : b001             [ 3] 	bcs df_rt_dim_main
e316 :                       df_rt_dim
e316 : 18               [ 2] 	clc
e317 :                       df_rt_dim_main
e317 : 08               [ 3] 	php
e318 :                       df_rt_dim_loop
e318 : a4ca             [ 3] 	ldy df_exeoff
e31a : 88               [ 2] 	dey
e31b :                       df_rt_dim_findesc
                             	; check end of line
e31b : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
e31c : c4c1             [ 3] 	cpy df_nxtstidx
e31e : f076             [ 3] 	beq df_rt_dim_done
                             	; find a var
e320 : b1c8             [ 5] 	lda (df_currlin),y
e322 : c911             [ 2] 	cmp #DFTK_VAR
e324 : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
e326 : c8               [ 2] 	iny
                             	; get var address
e327 : b1c8             [ 5] 	lda (df_currlin),y
e329 : 85e3             [ 3] 	sta df_tmpptra
e32b : c8               [ 2] 	iny
e32c : b1c8             [ 5] 	lda (df_currlin),y
e32e : 85e4             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
e330 : c8               [ 2] 	iny
e331 : 84ca             [ 3] 	sty df_exeoff
                             	; If re-dim, don't check for existing dimensions
e333 : 28               [ 4] 	plp
e334 : 08               [ 3] 	php
e335 : b006             [ 3] 	bcs df_rt_skip_dim_chk
                             	; check if already dim'd
e337 : a003             [ 2] 	ldy #DFVVT_DIM1
e339 : b1e3             [ 5] 	lda (df_tmpptra),y
e33b : d05b             [ 3] 	bne df_rt_dim_err
e33d :                       df_rt_skip_dim_chk
                             	; Save slot address found earlier
e33d : a5e3             [ 3] 	lda df_tmpptra
e33f : 48               [ 3] 	pha
e340 : a5e4             [ 3] 	lda df_tmpptra+1
e342 : 48               [ 3] 	pha
e343 : 201eda           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
e346 : 68               [ 4] 	pla
e347 : 85e4             [ 3] 	sta df_tmpptra+1
e349 : 68               [ 4] 	pla
e34a : 85e3             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
e34c : 5a               [ 3] 	phy
e34d : da               [ 3] 	phx
e34e : a003             [ 2] 	ldy #DFVVT_DIM1
e350 : 68               [ 4] 	pla
e351 : 91e3             [ 5] 	sta (df_tmpptra),y
e353 : c8               [ 2] 	iny
e354 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  144
---------------------------------- bank1.s -----------------------------------

e355 : 91e3             [ 5] 	sta (df_tmpptra),y	
e357 : 28               [ 4] 	plp
e358 : 08               [ 3] 	php
e359 : b02f             [ 3] 	bcs df_rt_dim_set_type
e35b :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
e35b : a003             [ 2] 	ldy #DFVVT_DIM1
e35d : b1e3             [ 5] 	lda (df_tmpptra),y
e35f : 8585             [ 3] 	sta num_a
e361 : 6486             [ 3] 	stz num_a+1
e363 : c8               [ 2] 	iny
e364 : b1e3             [ 5] 	lda (df_tmpptra),y
e366 : d002             [ 3] 	bne df_rt_dim2_nz
e368 : a901             [ 2] 	lda #1
e36a :                       df_rt_dim2_nz
e36a : 8589             [ 3] 	sta num_b
e36c : 648a             [ 3] 	stz num_b+1
e36e : 208fcb           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
e371 : b2e3             [ 5] 	lda (df_tmpptra)
e373 : 2901             [ 2] 	and #DFVVT_INT
e375 : f004             [ 3] 	beq df_rt_dim2_mul2
e377 : 0685             [ 5] 	asl num_a
e379 : 2686             [ 5] 	rol num_a+1
e37b :                       df_rt_dim2_mul2	
                             	; finally, we have a size of array
e37b : a685             [ 3] 	ldx num_a
e37d : a586             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
e37f : 20c9f1           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
e382 : a002             [ 2] 	ldy #DFVVT_HI
e384 : 91e3             [ 5] 	sta (df_tmpptra),y
e386 : 8a               [ 2] 	txa
e387 : 88               [ 2] 	dey
e388 : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
e38a :                       df_rt_dim_set_type
e38a : b2e3             [ 5] 	lda (df_tmpptra)
e38c : 0980             [ 2] 	ora #DFVVT_PTR
e38e : 92e3             [ 5] 	sta (df_tmpptra)
                             	; don't increment byte again - go check for more
e390 : 8086             [ 3] 	bra df_rt_dim_loop	
e392 :                       df_rt_dim_next_byte
e392 : e6ca             [ 5] 	inc df_exeoff
e394 : 8080             [ 3] 	bra df_rt_dim
e396 :                       df_rt_dim_done
                             ;	clc
e396 : 28               [ 4] 	plp
e397 : 60               [ 6] 	rts
e398 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
e39a :                       df_rt_cls
                             	; set cursror position to top left first
e39a : a200             [ 2] 	ldx #0
e39c : a000             [ 2] 	ldy #0
e39e : 20a6c3           [ 6] 	jsr _gr_set_cur
e3a1 : 4ccec2           [ 3] 	jmp _gr_cls
AS65 Assembler for R6502 [1.42].                                     Page  145
---------------------------------- bank1.s -----------------------------------

                             ;	clc
                             ;	rts
                             	
e3a4 :                       df_rt_plot
                             	; evaluate the expression
e3a4 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e3a7 : da               [ 3] 	phx
                             	; jump over comma
e3a8 : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e3aa : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e3ad : da               [ 3] 	phx
                             	; jump over comma
e3ae : e6ca             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e3b0 : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
                             	_df_ost_peekType
                             
                             	; if >=0x80 then a pointer / string
e3b8 : 2904             [ 2] 	and #DFST_STR
e3ba : d014             [ 3] 	bne df_rt_plotstr
                             	; else it is int
e3bc : 20acf1           [ 6] 	jsr df_ost_popInt
                             	; put low byte of pop result in a
e3bf : 8a               [ 2] 	txa
e3c0 : a622             [ 3] 	ldx vdp_base+vdp_gmode	; Check if in hires mode
e3c2 : e010             [ 2] 	cpx #0x10
e3c4 : b005             [ 3] 	bcs df_rt_hchar
                             	; get y and x in that order
e3c6 : 7a               [ 4] 	ply
e3c7 : fa               [ 4] 	plx
e3c8 : 4c46c3           [ 3] 	jmp _gr_plot
e3cb :                       df_rt_hchar
                             	; get y and x in that order
e3cb : 7a               [ 4] 	ply
e3cc : fa               [ 4] 	plx
e3cd : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e3d0 :                       df_rt_plotstr
                             	; pop string pointer
e3d0 : 20a8f1           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
e3d3 : 86e3             [ 3] 	stx df_tmpptra
e3d5 : 85e4             [ 3] 	sta df_tmpptra+1
e3d7 : a422             [ 3] 	ldy vdp_base+vdp_gmode	; Check if in hires mode
e3d9 : c010             [ 2] 	cpy #0x10
e3db : b017             [ 3] 	bcs df_rt_hplotstr
                             	; get y and x in that order
e3dd : 7a               [ 4] 	ply
e3de : fa               [ 4] 	plx
                             	; set cursror position
e3df :                       df_rt_plotstrch
e3df : b2e3             [ 5] 	lda (df_tmpptra)
e3e1 : f010             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e3e9 : da               [ 3] 	phx
e3ea : 5a               [ 3] 	phy
e3eb : 2046c3           [ 6] 	jsr _gr_plot
AS65 Assembler for R6502 [1.42].                                     Page  146
---------------------------------- bank1.s -----------------------------------

e3ee : 7a               [ 4] 	ply
e3ef : fa               [ 4] 	plx
e3f0 : e8               [ 2] 	inx
e3f1 : 80ec             [ 3] 	bra df_rt_plotstrch
e3f3 :                       df_rt_plotstrdone
e3f3 : 60               [ 6] 	rts
e3f4 :                       df_rt_hplotstr
                             	; get y and x in that order
e3f4 : 7a               [ 4] 	ply
e3f5 : fa               [ 4] 	plx
                             	; set cursror position
e3f6 :                       df_rt_hplotstrch
e3f6 : b2e3             [ 5] 	lda (df_tmpptra)
e3f8 : f0f9             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e400 : da               [ 3] 	phx
e401 : 5a               [ 3] 	phy
e402 : 205ec3           [ 6] 	jsr _gr_hchar
e405 : 7a               [ 4] 	ply
e406 : 68               [ 4] 	pla
e407 : 18               [ 2] 	clc			; Assume pitch 8 for now
e408 : 6908             [ 2] 	adc #8
e40a : aa               [ 2] 	tax
e40b : 80e9             [ 4] 	bra df_rt_hplotstrch
                             
e40d :                       df_rt_cursor
                             	; evaluate the expression
e40d : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
e410 : 8612             [ 3] 	stx vdp_curoff
                             ;	clc
e412 : 60               [ 6] 	rts
                             		
e413 :                       df_rt_himem
                             	; evaluate the expression
e413 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
e416 : 8e670c           [ 4] 	stx df_memtop
e419 : 8d680c           [ 4] 	sta df_memtop+1
                             	; now clear everything down
e41c : 4ceef1           [ 3] 	jmp df_clear
e41f : 60               [ 6] 	rts
                             
e420 :                       df_rt_mode
e420 :                       df_rt_hires
                             	; evaluate the expression
e420 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; only interested in low byte
e423 : 8a               [ 2] 	txa
e424 : 4cc6c1           [ 3] 	jmp _gr_init_screen
                             	
e427 :                       df_rt_pixmode
                             	; evaluate the expression X = mode
e427 : 20a2d8           [ 6] 	jsr df_rt_getnval
e42a : 862e             [ 3] 	stx gr_scrngeom+gr_pixmode
                             ;	clc
e42c : 60               [ 6] 	rts
                             
e42d :                       df_rt_pixmask
                             	; evaluate the expression X = mask
AS65 Assembler for R6502 [1.42].                                     Page  147
---------------------------------- bank1.s -----------------------------------

e42d : 20a2d8           [ 6] 	jsr df_rt_getnval
e430 : 862f             [ 3] 	stx gr_scrngeom+gr_pixmask
                             ;	clc
e432 : 60               [ 6] 	rts
                             
e433 :                       df_rt_pixcol
                             	; evaluate the expression X = col
e433 : 20a2d8           [ 6] 	jsr df_rt_getnval
e436 : 8630             [ 3] 	stx gr_scrngeom+gr_pixcol
                             ;	clc
e438 : 60               [ 6] 	rts
                             
e439 :                       df_rt_put
                             	; evaluate the byte to put
e439 : 20a2d8           [ 6] 	jsr df_rt_getnval
e43c : 8a               [ 2] 	txa
e43d : 2060c5           [ 6] 	jsr io_put_ch
e440 : 60               [ 6] 	rts
                             
e441 :                       df_rt_point
e441 : 2063db           [ 6] 	jsr df_rt_parm_2ints
e444 : a6e3             [ 3] 	ldx df_tmpptra
e446 : a4e5             [ 3] 	ldy df_tmpptrb
e448 : 4c76c3           [ 3] 	jmp _gr_point
                             ;	clc
                             ;	rts
                             
e44b :                       df_rt_hplot
e44b : 206edb           [ 6] 	jsr df_rt_parm_3ints
e44e : a6e3             [ 3] 	ldx df_tmpptra				; load x
e450 : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e452 : a5e7             [ 3] 	lda df_tmpptrc				; load char
e454 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e457 :                       df_rt_circle
e457 : 206edb           [ 6] 	jsr df_rt_parm_3ints
e45a : a5e3             [ 3] 	lda df_tmpptra				; load x0
e45c : 8585             [ 3] 	sta num_a
e45e : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e460 : 8586             [ 3] 	sta num_a+1
e462 : a5e7             [ 3] 	lda df_tmpptrc				; load r
e464 : 8587             [ 3] 	sta num_a+2
e466 : 4c2ec3           [ 3] 	jmp _gr_circle
                             
e469 :                       df_rt_line
e469 : 2085db           [ 6] 	jsr df_rt_parm_4ints
e46c : a5e3             [ 3] 	lda df_tmpptra				; load x0
e46e : 8585             [ 3] 	sta num_a
e470 : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e472 : 8586             [ 3] 	sta num_a+1
e474 : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e476 : 8587             [ 3] 	sta num_a+2
e478 : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e47a : 8588             [ 3] 	sta num_a+3
e47c : 4cfec2           [ 3] 	jmp _gr_line
                             
e47f :                       df_rt_box
e47f : 2085db           [ 6] 	jsr df_rt_parm_4ints
e482 : a5e3             [ 3] 	lda df_tmpptra				; load x0
e484 : 8585             [ 3] 	sta num_a
e486 : a5e5             [ 3] 	lda	df_tmpptrb				; load y0
e488 : 8586             [ 3] 	sta num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  148
---------------------------------- bank1.s -----------------------------------

e48a : a5e7             [ 3] 	lda df_tmpptrc				; load x1
e48c : 8587             [ 3] 	sta num_a+2
e48e : a5e9             [ 3] 	lda df_tmpptrd				; load y1
e490 : 8588             [ 3] 	sta num_a+3
e492 : 4c16c3           [ 3] 	jmp _gr_box
                             
e495 :                       df_rt_shape
e495 : 206edb           [ 6] 	jsr df_rt_parm_3ints
e498 : a6e3             [ 3] 	ldx df_tmpptra				; load x
e49a : da               [ 3] 	phx
e49b : a4e5             [ 3] 	ldy	df_tmpptrb				; load y
e49d : 5a               [ 3] 	phy
e49e : a6e7             [ 3] 	ldx df_tmpptrc				; load coords[]
e4a0 : a5e8             [ 3] 	lda df_tmpptrc+1			; load coords[]
e4a2 : 2066f1           [ 6] 	jsr df_rst_pushWord
e4a5 :                       df_rt_shapeLoop
e4a5 : 2074f1           [ 6] 	jsr df_rst_popWord			; Get pointer
e4a8 : 86e3             [ 3] 	stx df_tmpptra
e4aa : 85e4             [ 3] 	sta df_tmpptra+1
e4ac : b2e3             [ 5] 	lda (df_tmpptra)			; Get X coord as int
e4ae : 853f             [ 3] 	sta tmp_v1
e4b0 : a001             [ 2] 	ldy #1
e4b2 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get X hi byte
e4b4 : 8540             [ 3] 	sta tmp_v1+1
e4b6 : c8               [ 2] 	iny
e4b7 : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y coord as int
e4b9 : 8543             [ 3] 	sta tmp_b
e4bb : c8               [ 2] 	iny
e4bc : b1e3             [ 5] 	lda (df_tmpptra),y			; Get Y hi byte
e4be : 8544             [ 3] 	sta tmp_b+1
e4c0 : a53f             [ 3] 	lda tmp_v1					; If X and Y low are zero then en
e4c2 : d007             [ 3] 	bne df_rt_shapeCalc
e4c4 : a543             [ 3] 	lda tmp_b
e4c6 : d003             [ 3] 	bne df_rt_shapeCalc
                             	; Got here then must be finished
e4c8 : 68               [ 4] 	pla							; Pop bytes off 6502 stack
e4c9 : 68               [ 4] 	pla
e4ca : 60               [ 6] 	rts
e4cb :                       df_rt_shapeCalc
e4cb : 18               [ 2] 	clc
e4cc : a5e3             [ 3] 	lda df_tmpptra				; Increment coord pointer 
e4ce : 6904             [ 2] 	adc #4						; 2 ints is 4 bytes per coord
e4d0 : aa               [ 2] 	tax
e4d1 : a5e4             [ 3] 	lda df_tmpptra+1
e4d3 : 6900             [ 2] 	adc #0
e4d5 : 2066f1           [ 6] 	jsr df_rst_pushWord			; Put pointer on runtime s
                             	; previous cursor is starting position
                             	; plus delta is new position
e4d8 : 68               [ 4] 	pla							; get y0 off stack
e4d9 : 18               [ 2] 	clc
e4da : 8586             [ 3] 	sta num_a+1
e4dc : 6543             [ 3] 	adc tmp_b
e4de : 8588             [ 3] 	sta num_a+3					; y1 = y0+dy
e4e0 : aa               [ 2] 	tax							; save y1 in X reg
e4e1 : 68               [ 4] 	pla							; get x0 off stack
e4e2 : 18               [ 2] 	clc
e4e3 : 8585             [ 3] 	sta num_a					; x0
e4e5 : 653f             [ 3] 	adc tmp_v1
e4e7 : 8587             [ 3] 	sta num_a+2					; x1
e4e9 : 48               [ 3] 	pha							; save x1
e4ea : da               [ 3] 	phx							; save y1
e4eb : 20fec2           [ 6] 	jsr _gr_line				; line x0,y0,x1,y1
AS65 Assembler for R6502 [1.42].                                     Page  149
---------------------------------- bank1.s -----------------------------------

e4ee : 80b5             [ 3] 	bra df_rt_shapeLoop			; go back to next coord
                             	
e4f0 :                       df_rt_wait
                             	; evaluate the expression
e4f0 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
e4f3 : a8               [ 2] 	tay
e4f4 :                       df_rt_wait_loop
                             	; check X,Y==0
e4f4 : 8a               [ 2] 	txa
e4f5 : d004             [ 3] 	bne df_rt_wait_countdown
e4f7 : 98               [ 2] 	tya
e4f8 : d001             [ 3] 	bne df_rt_wait_countdown
                             	; Done (wait 0 returns immediately)
e4fa : 60               [ 6] 	rts
e4fb :                       df_rt_wait_countdown
                             	; get vdp low byte timer val in A for tick wait
e4fb : a510             [ 3] 	lda vdp_int_cnt
e4fd : ca               [ 2] 	dex
e4fe : e0ff             [ 2] 	cpx #0xff
e500 : d001             [ 3] 	bne df_rt_wait_tick
e502 : 88               [ 2] 	dey
e503 :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
e503 : c510             [ 3] 	cmp vdp_int_cnt
e505 : f0fc             [ 3] 	beq df_rt_wait_tick
e507 : d0eb             [ 4] 	bne df_rt_wait_loop		; Always
                             	
e509 :                       df_rt_printat
                             	; Get x,y
e509 : 2063db           [ 6] 	jsr df_rt_parm_2ints
e50c : a6e3             [ 3] 	ldx df_tmpptra
e50e : a4e5             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
e510 : 20a6c3           [ 6] 	jsr _gr_set_cur
                             	; and continue to normal print command
e513 :                       df_rt_print
e513 : a4ca             [ 3] 	ldy df_exeoff
e515 : 88               [ 2] 	dey
e516 :                       df_rt_print_ws
e516 : c8               [ 2] 	iny
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
e517 : c4c1             [ 3] 	cpy df_nxtstidx
e519 : f026             [ 3] 	beq df_rt_print_done
e51b : b1c8             [ 5] 	lda (df_currlin),y
e51d : c93a             [ 2] 	cmp #':'
e51f : f020             [ 3] 	beq df_rt_print_done
e521 : c920             [ 2] 	cmp #' '
e523 : f0f1             [ 3] 	beq df_rt_print_ws
e525 : c92c             [ 2] 	cmp #','
e527 : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
e529 : 84ca             [ 3] 	sty df_exeoff
                             	
                             	; if starts with string literal then process sev
                             ;	cmp #DFTK_STRLIT
                             ;	beq df_rt_print_string
                             	; else evaluate a numeric
e52b : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
AS65 Assembler for R6502 [1.42].                                     Page  150
---------------------------------- bank1.s -----------------------------------

                             	_df_ost_peekType
                             
e533 : 2904             [ 2] 	and #DFST_STR
e535 : d005             [ 3] 	bne df_rt_print_gotstr
e537 : 20e5e1           [ 6] 	jsr df_rt_print_num
e53a : 80d7             [ 3] 	bra df_rt_print
e53c :                       df_rt_print_gotstr
e53c : 20ece1           [ 6] 	jsr df_rt_print_str
e53f : 80d2             [ 3] 	bra df_rt_print
                             ;df_rt_print_string
                             ;	; point to string accumulator
                             ;	ldx df_sevalptr
                             ;	lda df_sevalptr+1
                             ;	jsr df_rt_seval
                             ;	bra df_rt_print_gotstr
e541 :                       df_rt_print_done
e541 : 84ca             [ 3] 	sty df_exeoff
e543 : 60               [ 6] 	rts
                             	
e544 :                       df_rt_println
e544 : 2013e5           [ 6] 	jsr df_rt_print
e547 : a90d             [ 2] 	lda #UTF_CR
e549 : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
e54c :                       df_rt_nassign
e54c : 48               [ 3] 	pha
e54d : da               [ 3] 	phx
                             	; now go evaluate expression in to A,X
e54e : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to
e551 : 7a               [ 4] 	ply
e552 : 84e3             [ 3] 	sty df_tmpptra
e554 : 7a               [ 4] 	ply
e555 : 84e4             [ 3] 	sty df_tmpptra+1
                             	; save X,A int in contents section
e557 : a001             [ 2] 	ldy #1
e559 : 91e3             [ 5] 	sta (df_tmpptra),y
e55b : 8a               [ 2] 	txa
e55c : 88               [ 2] 	dey
e55d : 91e3             [ 5] 	sta (df_tmpptra),y
                             
e55f : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
e560 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being X,A
e560 : 205cd9           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
e563 : 4ca4f1           [ 3] 	jmp df_ost_popStr
                             	
                             ;	clc
                             ;	rts
                             
                             ; generate lvar from a var token ready for assign
e566 :                       df_rt_generate_lvar
                             	; move past escape val
AS65 Assembler for R6502 [1.42].                                     Page  151
---------------------------------- bank1.s -----------------------------------

e566 : a4ca             [ 3] 	ldy df_exeoff
e568 : c8               [ 2] 	iny
                             	; pointing to variable index
e569 : b1c8             [ 5] 	lda (df_currlin),y
e56b : 85e3             [ 3] 	sta df_tmpptra
e56d : c8               [ 2] 	iny
e56e : b1c8             [ 5] 	lda (df_currlin),y
e570 : 84ca             [ 3] 	sty df_exeoff
e572 : 85e4             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
e574 : b2e3             [ 5] 	lda (df_tmpptra)
e576 : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
e577 : 38               [ 2] 	sec
e578 : 2042da           [ 6] 	jsr df_rt_eval_var
e57b : 20a8f1           [ 6] 	jsr df_ost_popPtr
                             	; pull the type previously saved into Y
e57e : 7a               [ 4] 	ply
                             	; move past the lvar variable index
e57f : e6ca             [ 5] 	inc df_exeoff
                             ;	clc
e581 : 60               [ 6] 	rts
                             
                             ; assign
                             ; X,A,Y contain lvar pointer and type
e582 :                       df_rt_doassign
                             	; save A and put type Y in to A
e582 : 48               [ 3] 	pha
e583 : 98               [ 2] 	tya
e584 : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
e586 : f004             [ 3] 	beq df_rt_assign_num
                             	; remember to restore A
                             	; jump to string expression evaluator
e588 : 68               [ 4] 	pla
e589 : 4c60e5           [ 3] 	jmp df_rt_sassign
e58c :                       df_rt_assign_num
                             	; else jump to numeric expression evaluator
                             	; remember to restore A
e58c : 68               [ 4] 	pla
e58d : 4c4ce5           [ 3] 	jmp df_rt_nassign
                             
                             ; general assignment execution
e590 :                       df_rt_assign
e590 : 2066e5           [ 6] 	jsr df_rt_generate_lvar
                             	; go and do the assignment
e593 : 4c82e5           [ 3] 	jmp df_rt_doassign
                             	
                             ; comment or data token is ignored by runtime
e596 :                       df_rt_comment
e596 :                       df_rt_data
                             ;	clc
e596 : 60               [ 6] 	rts
                             
                             	
                             ; run token	
e597 :                       df_rt_run
                             ;	sec
e597 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  152
---------------------------------- bank1.s -----------------------------------

                             ; end of line / statement indicator
                             ; CS = End, CC = not end
e598 :                       df_rt_eos
e598 : a4ca             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
e59a : c4c1             [ 3] 	cpy df_nxtstidx
e59c : f008             [ 3] 	beq df_rt_eos_true
e59e : b1c8             [ 5] 	lda (df_currlin),y
e5a0 : c93a             [ 2] 	cmp #':'
e5a2 : f002             [ 3] 	beq df_rt_eos_true
e5a4 : 18               [ 2] 	clc
e5a5 : 60               [ 6] 	rts
e5a6 :                       df_rt_eos_true
e5a6 : 38               [ 2] 	sec
e5a7 : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
e5a8 :                       df_rt_renum
e5a8 : e6ca             [ 5] 	inc df_exeoff
e5aa : 206edb           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
e5ad : a6e3             [ 3] 	ldx df_tmpptra
e5af : a5e4             [ 3] 	lda df_tmpptra+1
e5b1 : 20bad6           [ 6] 	jsr df_pg_find_line
e5b4 : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
e5b8 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
e5b8 : 86e9             [ 3] 	stx df_tmpptrd
e5ba : 85ea             [ 3] 	sta df_tmpptrd+1
e5bc :                       df_rt_renum_do
                             	; if not end of program
e5bc : a000             [ 2] 	ldy #0
e5be : b1e9             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
e5c0 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
e5c2 : 60               [ 6] 	rts
e5c3 :                       df_rt_renum_update
                             	; so set this line number to new line number
e5c3 : a001             [ 2] 	ldy #DFTK_LINNUM
e5c5 : a5e5             [ 3] 	lda df_tmpptrb
e5c7 : 91e9             [ 5] 	sta (df_tmpptrd),y
e5c9 : c8               [ 2] 	iny
e5ca : a5e6             [ 3] 	lda df_tmpptrb+1
e5cc : 91e9             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
e5db :                       df_rt_renum_next
                             	; point ptrd to the next line
e5db : 18               [ 2] 	clc
e5dc : a5e9             [ 3] 	lda df_tmpptrd
e5de : a200             [ 2] 	ldx #0
e5e0 : 61e9             [ 6] 	adc (df_tmpptrd,x)
e5e2 : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e5e6 : e6ea             [ 5] 	inc df_tmpptrd+1
AS65 Assembler for R6502 [1.42].                                     Page  153
---------------------------------- bank1.s -----------------------------------

e5e8 : 4cbce5           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
e5eb :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
e5f3 : a5b3             [ 3] 	lda df_varcnt
e5f5 : 85e5             [ 3] 	sta df_tmpptrb
e5f7 :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
e5f7 : a5e5             [ 3] 	lda df_tmpptrb
e5f9 : f03a             [ 4] 	beq df_rt_listpn_done
e5fb : a000             [ 2] 	ldy #0
e5fd : b1e3             [ 5] 	lda (df_tmpptra),y
e5ff : c95f             [ 2] 	cmp #'_'
e601 : d01b             [ 3] 	bne df_rt_listnextvnt
e603 :                       df_rt_listprocch
e603 : b1e3             [ 5] 	lda (df_tmpptra),y
e605 : 2060c5           [ 6] 	jsr io_put_ch
e608 : aa               [ 2] 	tax
e609 : f003             [ 3] 	beq df_rt_listproccr
e60b : c8               [ 2] 	iny
e60c : d0f5             [ 3] 	bne df_rt_listprocch		; Always
e60e :                       df_rt_listproccr
e60e : a90d             [ 2] 	lda #UTF_CR
e610 : 2060c5           [ 6] 	jsr io_put_ch
e613 : 18               [ 2] 	clc
e614 :                       df_rt_listprocpause
e614 : 205dc5           [ 6] 	jsr io_get_ch
e617 : c920             [ 2] 	cmp #' '
e619 : d003             [ 3] 	bne df_rt_listnextvnt
e61b :                       df_rt_listwait
e61b : 38               [ 2] 	sec
e61c : b0f6             [ 3] 	bcs df_rt_listprocpause
e61e :                       df_rt_listnextvnt
e61e : b1e3             [ 5] 	lda (df_tmpptra),y
e620 : f003             [ 3] 	beq df_rt_listgotnext
e622 : c8               [ 2] 	iny
e623 : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
e625 :                       df_rt_listgotnext
                             	; dec vnt #
e625 : c6e5             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
e627 : c8               [ 2] 	iny
                             	; add this to vnt pointer
e628 : 18               [ 2] 	clc
e629 : 98               [ 2] 	tya
e62a : 65e3             [ 3] 	adc df_tmpptra
e62c : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e630 : e6e4             [ 5] 	inc df_tmpptra+1
e632 : 4cf7e5           [ 3] 	jmp df_rt_listcheckvnt
e635 :                       df_rt_listpn_done
e635 : 60               [ 6] 	rts
                             
e636 :                       df_rt_listproc
                             	; A already contains '_'
e636 : 8d000a           [ 4] 	sta df_linbuff
AS65 Assembler for R6502 [1.42].                                     Page  154
---------------------------------- bank1.s -----------------------------------

e639 : a200             [ 2] 	ldx #0
e63b : a4ca             [ 3] 	ldy df_exeoff
e63d :                       df_rt_listp_copy
e63d : c8               [ 2] 	iny
e63e : e8               [ 2] 	inx
e63f : b1c8             [ 5] 	lda (df_currlin),y
e641 : 9d000a           [ 5] 	sta df_linbuff,x
e644 : 201cce           [ 6] 	jsr df_tk_isalphanum
e647 : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
e649 : a200             [ 2] 	ldx #0
e64b : 86be             [ 3] 	stx df_linoff
                             	; save runtime pos
e64d : 84ca             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
e64f : 203ecc           [ 6] 	jsr df_var_find
e652 : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
e654 : 86d0             [ 3] 	stx df_procptr
e656 : 85d1             [ 3] 	sta df_procptr+1
e658 : 2091dc           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
e65b : 86e3             [ 3] 	stx df_tmpptra
e65d : 85e4             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
e65f :                       df_rt_listp_findend
                             	; Go to next stat
e65f : 203edc           [ 6] 	jsr df_rt_nextstat
e662 : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
e664 : 98               [ 2] 	tya
e665 : 48               [ 3] 	pha
                             	; find the command
e666 :                       df_rt_listp_findcmd
e666 : c8               [ 2] 	iny
e667 : b1d2             [ 5] 	lda (df_lineptr),y
e669 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
e66b : 8545             [ 3] 	sta tmp_d
e66d : 68               [ 4] 	pla
e66e : a8               [ 2] 	tay
e66f : a545             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
e671 : c987             [ 2] 	cmp #DFRT_ENDDEF
e673 : f00b             [ 3] 	beq df_rt_listp_done
e675 : c986             [ 2] 	cmp #DFRT_DEF
e677 : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
e679 : a6d2             [ 3] 	ldx df_lineptr
AS65 Assembler for R6502 [1.42].                                     Page  155
---------------------------------- bank1.s -----------------------------------

e67b : a5d3             [ 3] 	lda df_lineptr+1
e67d : 4c5fe6           [ 3] 	jmp df_rt_listp_findend
e680 :                       df_rt_listp_done
                             	; Push end line on to stack
e680 : a5d3             [ 3] 	lda df_lineptr+1
e682 : 48               [ 3] 	pha
e683 : 8a               [ 2] 	txa
e684 : 48               [ 3] 	pha
e685 : a5d3             [ 3] 	lda df_lineptr+1
e687 : 4cc1e6           [ 3] 	jmp df_rt_list_line
e68a :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
e68c :                       df_rt_list
e68c : a900             [ 2] 	lda #0
e68e : 85eb             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
e690 : 20e4dc           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
e693 : 2098e5           [ 6] 	jsr df_rt_eos
                             	; so list whole program
e696 : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
e698 : c95f             [ 2] 	cmp #'_'
e69a : d003             [ 3] 	bne df_rt_list_all
e69c : 4c36e6           [ 3] 	jmp df_rt_listproc
e69f :                       df_rt_list_all
                             	;if '*' then display all procnames
e69f : c92a             [ 2] 	cmp #'*'
e6a1 : d003             [ 3] 	bne df_rt_list_linno
e6a3 : 4cebe5           [ 3] 	jmp df_rt_listprocnames
e6a6 :                       df_rt_list_linno
                             	; else get 1st parameter
e6a6 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
e6a9 : 20bad6           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
e6ac : 86e3             [ 3] 	stx df_tmpptra
e6ae : 85e4             [ 3] 	sta df_tmpptra+1
e6b0 : 4cbbe6           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
e6b3 :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
e6bb :                       df_rt_listprgend
e6bb : a5aa             [ 3] 	lda df_prgend+1
e6bd : 48               [ 3] 	pha						; df_prgend hi at 102,x
e6be : a5a9             [ 3] 	lda df_prgend
e6c0 : 48               [ 3] 	pha						; df_prgend lo at 101,x
e6c1 :                       df_rt_list_line
                             	; if line length = 0 then end of program
e6c1 : a000             [ 2] 	ldy #0
e6c3 : b1e3             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  156
---------------------------------- bank1.s -----------------------------------

e6c5 : f039             [ 4] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
e6c7 : a5eb             [ 3] 	lda df_tmpptre
e6c9 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
e6cb : 18               [ 2] 	clc
e6cc :                       df_rt_list_synckey
e6cc : a5eb             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
e6ce : d00b             [ 3] 	bne df_rt_list_line_cont
e6d0 :                       df_rt_list_pause
e6d0 : 205dc5           [ 6] 	jsr io_get_ch
e6d3 : c920             [ 2] 	cmp #' '						; Space = PAUSE
e6d5 : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
e6d7 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e6d9 : f025             [ 4] 	beq df_rt_list_line_fin
e6db :                       df_rt_list_line_cont
e6db : a000             [ 2] 	ldy #0
e6dd : 84be             [ 3] 	sty df_linoff
e6df : 2003e7           [ 6] 	jsr df_rt_list_all_line
e6e2 :                       df_rt_list_next_line
                             	; new line
e6e2 : 2020c8           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
e6e5 : 18               [ 2] 	clc
e6e6 : a5e3             [ 3] 	lda df_tmpptra
e6e8 : a000             [ 2] 	ldy #0
e6ea : 71e3             [ 5] 	adc (df_tmpptra),y
e6ec : 85e3             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e6f0 : e6e4             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
e6f2 : ba               [ 2] 	tsx
e6f3 : 38               [ 2] 	sec
e6f4 : bd0101           [ 4] 	lda 0x101,x						; get prend lo from stack frame
e6f7 : e5e3             [ 3] 	sbc df_tmpptra
e6f9 : bd0201           [ 4] 	lda 0x102,x						; get prend hi from stack frame
e6fc : e5e4             [ 3] 	sbc df_tmpptra+1
e6fe : b0c1             [ 3] 	bcs df_rt_list_line
e700 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
e700 : 68               [ 4] 	pla
e701 : 68               [ 4] 	pla
e702 :                       df_rt_list_line_only_fin
e702 : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
e703 :                       df_rt_list_all_line				; Start here to include nu
e703 : 203de8           [ 6] 	jsr df_rt_list_linnum
e706 :                       df_rt_list_line_only			; Start here for just the 
e706 : a003             [ 2] 	ldy #3
e708 : b1e3             [ 5] 	lda (df_tmpptra),y
e70a : 85d4             [ 3] 	sta df_lineidx
e70c : c8               [ 2] 	iny
e70d : 84be             [ 3] 	sty df_linoff
e70f :                       df_rt_list_decode
e70f : a4be             [ 3] 	ldy df_linoff
e711 : b1e3             [ 5] 	lda (df_tmpptra),y
e713 : 3010             [ 3] 	bmi df_rt_list_token
e715 : c920             [ 2] 	cmp #DFTK_ESCVAL
e717 : 9006             [ 3] 	bcc df_rt_list_escval
AS65 Assembler for R6502 [1.42].                                     Page  157
---------------------------------- bank1.s -----------------------------------

                             	; normal char just print it
e719 : 2060c5           [ 6] 	jsr io_put_ch
e71c : 4c28e7           [ 3] 	jmp df_rt_list_nexttok
e71f :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
e71f : 2041e7           [ 6] 	jsr df_rt_list_decode_esc
e722 : 4c28e7           [ 3] 	jmp df_rt_list_nexttok
e725 :                       df_rt_list_token
e725 : 204ee8           [ 6] 	jsr df_rt_list_decode_token
e728 :                       df_rt_list_nexttok
                             	; advance the line offset
e728 : e6be             [ 5] 	inc df_linoff
e72a : a5be             [ 3] 	lda df_linoff
                             	; check if at end of line
e72c : a200             [ 2] 	ldx #0
e72e : c1e3             [ 6] 	cmp (df_tmpptra,x)
e730 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
e732 : c5d4             [ 3] 	cmp df_lineidx
e734 : d0d9             [ 3] 	bne df_rt_list_decode
e736 : a8               [ 2] 	tay
                             	; save the next statement offset
e737 : b1e3             [ 5] 	lda (df_tmpptra),y
e739 : 85d4             [ 3] 	sta df_lineidx
e73b : c8               [ 2] 	iny
e73c : 84be             [ 3] 	sty df_linoff
e73e : 4c0fe7           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
e741 :                       df_rt_list_decode_esc
                             	; jump over esc byte
e741 : c8               [ 2] 	iny
e742 : 84be             [ 3] 	sty df_linoff
e744 : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
e745 : b1e3             [ 5] 	lda (df_tmpptra),y
e747 : 85e5             [ 3] 	sta df_tmpptrb
e749 : c8               [ 2] 	iny
e74a : b1e3             [ 5] 	lda (df_tmpptra),y
e74c : 85e6             [ 3] 	sta df_tmpptrb+1
e74e : 88               [ 2] 	dey				; Y is on byte after esc byte
e74f : 68               [ 4] 	pla
                             	; x2 to get jmp offset
e750 : 0a               [ 2] 	asl a
e751 : aa               [ 2] 	tax
e752 : bd06de           [ 4] 	lda df_rt_escjmp,x
e755 : 85e7             [ 3] 	sta df_tmpptrc
e757 : bd07de           [ 4] 	lda df_rt_escjmp+1,x
e75a : 85e8             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
e75c : 6ce700           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
e75f :                       df_rt_lst_reserved
e75f : 60               [ 6] 	rts
                             
                             ; decode a byte char
e760 :                       df_rt_lst_chr
e760 : a927             [ 2] 	lda #0x27			; Single quote
e762 : 2060c5           [ 6] 	jsr io_put_ch
AS65 Assembler for R6502 [1.42].                                     Page  158
---------------------------------- bank1.s -----------------------------------

e765 : a5e5             [ 3] 	lda df_tmpptrb
e767 : 2060c5           [ 6] 	jsr io_put_ch
e76a : a927             [ 2] 	lda #0x27			; Single quote
e76c : 2060c5           [ 6] 	jsr io_put_ch
e76f : c8               [ 2] 	iny
e770 : 84be             [ 3] 	sty df_linoff
e772 : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
e773 :                       df_rt_lst_hex_pre
e773 : a930             [ 2] 	lda #'0'
e775 : 2060c5           [ 6] 	jsr io_put_ch
e778 : a978             [ 2] 	lda #'x'
e77a : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
e77d :                       df_rt_lst_bythex
e77d : 2073e7           [ 6] 	jsr df_rt_lst_hex_pre
e780 :                       df_rt_lst_lo_hex
e780 : a5e5             [ 3] 	lda df_tmpptrb
e782 : 204dc8           [ 6] 	jsr str_a_to_x
e785 : 2060c5           [ 6] 	jsr io_put_ch
e788 : 8a               [ 2] 	txa
e789 : 2060c5           [ 6] 	jsr io_put_ch
e78c :                       df_rt_lst_const_done
e78c : c8               [ 2] 	iny
e78d : 84be             [ 3] 	sty df_linoff
e78f : 60               [ 6] 	rts
                             
                             ; Decode an int hex
e790 :                       df_rt_lst_inthex
e790 : 2073e7           [ 6] 	jsr df_rt_lst_hex_pre
e793 : a5e6             [ 3] 	lda df_tmpptrb+1
e795 : 204dc8           [ 6] 	jsr str_a_to_x
e798 : 2060c5           [ 6] 	jsr io_put_ch
e79b : 8a               [ 2] 	txa
e79c : 2060c5           [ 6] 	jsr io_put_ch
e79f : 4c80e7           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
e7a2 :                       df_rt_lst_bytbin
e7a2 : a5e5             [ 3] 	lda df_tmpptrb
e7a4 : 85e6             [ 3] 	sta df_tmpptrb+1
e7a6 : a208             [ 2] 	ldx #8
e7a8 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
e7aa :                       df_rt_lst_intbin
e7aa : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
e7ac :                       df_rt_lst_bin
e7ac : a930             [ 2] 	lda #'0'
e7ae : 2060c5           [ 6] 	jsr io_put_ch
e7b1 : a962             [ 2] 	lda #'b'
e7b3 : 2060c5           [ 6] 	jsr io_put_ch
e7b6 :                       df_rt_lst_bit
e7b6 : a930             [ 2] 	lda #'0'
e7b8 : 06e5             [ 5] 	asl df_tmpptrb
e7ba : 26e6             [ 5] 	rol df_tmpptrb+1
e7bc : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
AS65 Assembler for R6502 [1.42].                                     Page  159
---------------------------------- bank1.s -----------------------------------

e7be :                       df_rt_lst_bit_skip0
e7be : 2060c5           [ 6] 	jsr io_put_ch
e7c1 : ca               [ 2] 	dex
e7c2 : d0f2             [ 3] 	bne df_rt_lst_bit
e7c4 : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
e7c6 :                       df_rt_lst_intdec
e7c6 : a6e5             [ 3] 	ldx df_tmpptrb
e7c8 : a5e6             [ 3] 	lda df_tmpptrb+1
e7ca : c8               [ 2] 	iny
e7cb : 84be             [ 3] 	sty df_linoff
e7cd : 18               [ 2] 	clc
e7ce : 4cd7ca           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
e7d1 :                       df_rt_lst_var
e7d1 :                       df_rt_lst_proc
                             	; jump over the address bytes
e7d1 : c8               [ 2] 	iny
e7d2 : 84be             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
e7e4 : a000             [ 2] 	ldy #0
e7e6 :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
e7e6 : a5e9             [ 3] 	lda df_tmpptrd
e7e8 : c5e5             [ 3] 	cmp df_tmpptrb
e7ea : d006             [ 3] 	bne df_rt_list_vvtend
e7ec : a5ea             [ 3] 	lda df_tmpptrd+1
e7ee : c5e6             [ 3] 	cmp df_tmpptrb+1
e7f0 : f021             [ 4] 	beq df_rt_list_gotvvt
e7f2 :                       df_rt_list_vvtend
e7f2 : b1e7             [ 5] 	lda (df_tmpptrc),y
e7f4 : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
e7fc : 4cf2e7           [ 3] 	jmp df_rt_list_vvtend
e7ff :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
e805 : 18               [ 2] 	clc
e806 : a5e9             [ 3] 	lda df_tmpptrd
e808 : 6908             [ 2] 	adc #DFVVT_SZ
e80a : 85e9             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e80e : e6ea             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
e810 : 4ce6e7           [ 3] 	jmp df_rt_list_findvvt
e813 :                       df_rt_list_gotvvt
e813 : b1e7             [ 5] 	lda (df_tmpptrc),y
e815 : f025             [ 3] 	beq df_rt_list_donvvt
AS65 Assembler for R6502 [1.42].                                     Page  160
---------------------------------- bank1.s -----------------------------------

e817 : 2060c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
e820 : 4c13e8           [ 3] 	jmp df_rt_list_gotvvt
                             
e823 :                       df_rt_lst_strlit
e823 : a922             [ 2] 	lda #0x22
e825 : 2060c5           [ 6] 	jsr io_put_ch
e828 : a4be             [ 3] 	ldy df_linoff
e82a :                       df_rt_lst_strlitch
e82a : b1e3             [ 5] 	lda (df_tmpptra),y
e82c : f007             [ 3] 	beq df_rt_lst_strlitdon
e82e : 2060c5           [ 6] 	jsr io_put_ch
e831 : c8               [ 2] 	iny
e832 : 4c2ae8           [ 3] 	jmp df_rt_lst_strlitch
e835 :                       df_rt_lst_strlitdon
e835 : a922             [ 2] 	lda #0x22
e837 : 2060c5           [ 6] 	jsr io_put_ch
e83a : 84be             [ 3] 	sty df_linoff
e83c :                       df_rt_list_donvvt
e83c : 60               [ 6] 	rts
                             
e83d :                       df_rt_list_linnum
e83d : a001             [ 2] 	ldy #1
e83f : b1e3             [ 5] 	lda (df_tmpptra),y
e841 : aa               [ 2] 	tax
e842 : c8               [ 2] 	iny
e843 : b1e3             [ 5] 	lda (df_tmpptra),y
e845 : 18               [ 2] 	clc
e846 : 20d7ca           [ 6] 	jsr print_a_to_d
e849 : a920             [ 2] 	lda #0x20			; Always add a space after line num
e84b : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
e84e :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
e84e : c997             [ 2] 	cmp #DFRT_ASM
e850 : d003             [ 3] 	bne df_rt_list_decode_token_normal
e852 : 4c8ce8           [ 3] 	jmp df_rt_asm_decode_token
e855 :                       df_rt_list_decode_token_normal
e855 : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
e857 : c902             [ 2] 	cmp #2
e859 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
e85b : 60               [ 6] 	rts
e85c :                       df_rt_list_do_decode_tkn
e85c : aa               [ 2] 	tax
e85d : a9ca             [ 2] 	lda #lo(df_tokensyms)
e85f : 85e5             [ 3] 	sta df_tmpptrb
e861 : a9d1             [ 2] 	lda #hi(df_tokensyms)
e863 : 85e6             [ 3] 	sta df_tmpptrb+1
e865 :                       df_rt_list_find_sym
e865 : 8a               [ 2] 	txa
e866 : f012             [ 3] 	beq df_rt_list_got_sym
e868 : a000             [ 2] 	ldy #0
e86a :                       df_rt_list_next_ch
e86a : b1e5             [ 5] 	lda (df_tmpptrb),y
e86c : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
e873 : 68               [ 4] 	pla
e874 : 10f4             [ 3] 	bpl df_rt_list_next_ch
AS65 Assembler for R6502 [1.42].                                     Page  161
---------------------------------- bank1.s -----------------------------------

e876 :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
e876 : ca               [ 2] 	dex
e877 : 4c65e8           [ 3] 	jmp df_rt_list_find_sym
e87a :                       df_rt_list_got_sym
e87a : a1e5             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
e87c : 08               [ 3] 	php
e87d : 297f             [ 2] 	and #0x7f
e87f : 2060c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e888 : 28               [ 4] 	plp
e889 : 10ef             [ 3] 	bpl df_rt_list_got_sym
e88b : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
e88c :                       df_rt_asm_decode_token
e88c : e6be             [ 5] 	inc df_linoff		; Point to token after asm token
e88e : a4be             [ 3] 	ldy df_linoff
e890 : b1e3             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
e892 : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
e894 : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
e896 : 2060c5           [ 6] 	jsr io_put_ch
e899 : b1e3             [ 5] 	lda (df_tmpptra),y	;Get asm token back
e89b : 4c41e7           [ 3] 	jmp df_rt_list_decode_esc
e89e :                       df_rt_asm_decode_token_keyword
e89e : 297f             [ 2] 	and #0x7f			; Mask off MSB
e8a0 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
e8a1 : a9dc             [ 2] 	lda #lo(df_asm_tokensyms)
e8a3 : 85e5             [ 3] 	sta df_tmpptrb
e8a5 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
e8a7 : 85e6             [ 3] 	sta df_tmpptrb+1
e8a9 :                       df_rt_list_find_asm_sym
e8a9 : 8a               [ 2] 	txa
e8aa : f01b             [ 3] 	beq df_rt_list_got_asm_sym
e8ac : a000             [ 2] 	ldy #0
e8ae :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
e8b4 : b1e5             [ 5] 	lda (df_tmpptrb),y
e8b6 : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
e8b8 : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
e8ba : 38               [ 2] 	sec					; Skip offset and mode bytes
e8bb : 65e5             [ 3] 	adc df_tmpptrb
e8bd : 85e5             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
e8c1 : e6e6             [ 5] 	inc df_tmpptrb+1
e8c3 : ca               [ 2] 	dex					; One less symbol to skip over
e8c4 : 4ca9e8           [ 3] 	jmp df_rt_list_find_asm_sym
e8c7 :                       df_rt_list_got_asm_sym
e8c7 : a1e5             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
e8c9 : c920             [ 2] 	cmp #' '
e8cb : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
e8cd : 2060c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e8d6 : 4cc7e8           [ 3] 	jmp df_rt_list_got_asm_sym
e8d9 :                       df_rt_asm_decode_token_done
e8d9 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  162
---------------------------------- bank1.s -----------------------------------

                             
                             
e8da :                       df_rt_doke
e8da : 2063db           [ 6] 	jsr df_rt_parm_2ints
e8dd : a5e5             [ 3] 	lda df_tmpptrb
e8df : 92e3             [ 5] 	sta (df_tmpptra)
                             	; get high byte to doke
e8e1 : a5e6             [ 3] 	lda df_tmpptrb+1
e8e3 : a001             [ 2] 	ldy #1
                             	; poke hi byte
e8e5 : 91e3             [ 5] 	sta (df_tmpptra),y
e8e7 : 60               [ 6] 	rts
                             	
e8e8 :                       df_rt_poke
e8e8 : 2063db           [ 6] 	jsr df_rt_parm_2ints
e8eb : a5e5             [ 3] 	lda df_tmpptrb
e8ed : 92e3             [ 5] 	sta (df_tmpptra)
                             ;	clc
e8ef : 60               [ 6] 	rts
                             
e8f0 :                       df_rt_vpoke
e8f0 : 2063db           [ 6] 	jsr df_rt_parm_2ints
e8f3 : a6e3             [ 3] 	ldx df_tmpptra
e8f5 : a4e4             [ 3] 	ldy df_tmpptra+1
e8f7 : a5e5             [ 3] 	lda df_tmpptrb
e8f9 : 4c1ec4           [ 3] 	jmp _vdp_poke
                             ;	clc
                             ;	rts
                             
e8fc :                       df_rt_nvpoke
e8fc : 2063db           [ 6] 	jsr df_rt_parm_2ints
e8ff : a6e3             [ 3] 	ldx df_tmpptra
e901 : a5e5             [ 3] 	lda df_tmpptrb
e903 : 4caec4           [ 3] 	jmp _rtc_nvwrite
                             ;	clc
e906 : 60               [ 6] 	rts
                             
e907 :                       df_rt_setvdp
e907 : 2063db           [ 6] 	jsr df_rt_parm_2ints
e90a : a5e3             [ 3] 	lda df_tmpptra
e90c : a6e5             [ 3] 	ldx df_tmpptrb
e90e : 4cf0c5           [ 3] 	jmp vdp_wr_reg
                             ;	clc
                             ;	rts
                             
e911 :                       df_rt_colour
e911 : 206edb           [ 6] 	jsr df_rt_parm_3ints
                             	; colour is a combination of b and c parms
e914 : a5e5             [ 3] 	lda df_tmpptrb
e916 : 0a               [ 2] 	asl a
e917 : 0a               [ 2] 	asl a
e918 : 0a               [ 2] 	asl a
e919 : 0a               [ 2] 	asl a
e91a : 05e7             [ 3] 	ora df_tmpptrc
e91c : 48               [ 3] 	pha
e91d : a5e3             [ 3] 	lda df_tmpptra
e91f : c920             [ 2] 	cmp #32					; 32 = border colour
e921 : f00e             [ 3] 	beq df_rt_colour_border
                             	; else write to the colour table
                             	; first calculate the colour table address
e923 : 18               [ 2] 	clc
e924 : 6519             [ 3] 	adc vdp_base+vdp_addr_col
AS65 Assembler for R6502 [1.42].                                     Page  163
---------------------------------- bank1.s -----------------------------------

e926 : aa               [ 2] 	tax
e927 : a51a             [ 3] 	lda vdp_base+vdp_addr_col+1
e929 : 6900             [ 2] 	adc #0
e92b : a8               [ 2] 	tay
e92c : 68               [ 4] 	pla
                             	; A = colour, YX = address
e92d : 202ac6           [ 6] 	jsr vdp_poke
e930 : 60               [ 6] 	rts
e931 :                       df_rt_colour_border
e931 : a907             [ 2] 	lda #7
e933 : fa               [ 4] 	plx
e934 : 4cf0c5           [ 3] 	jmp vdp_wr_reg
                             
e937 :                       df_rt_sprite
e937 : 20a1db           [ 6] 	jsr df_rt_parm_5ints
                             	; calculate the sprite number in vram
e93a : a5e3             [ 3] 	lda df_tmpptra
e93c : 0a               [ 2] 	asl a
e93d : 0a               [ 2] 	asl a
e93e : 18               [ 2] 	clc
e93f : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e941 : aa               [ 2] 	tax
e942 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e944 : 6900             [ 2] 	adc #0
e946 : 78               [ 2] 	sei				; Disable interrupts
e947 : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e94a : a5e7             [ 3] 	lda df_tmpptrc
e94c : 2025c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e94f : a5e5             [ 3] 	lda df_tmpptrb
e951 : 2025c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the pattern name (tmpd)
e954 : a5e9             [ 3] 	lda df_tmpptrd
e956 : 2025c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the colour / ec byte (tmpe)
e959 : a5eb             [ 3] 	lda df_tmpptre
e95b : 2025c6           [ 6] 	jsr vdp_wr_vram
e95e : 58               [ 2] 	cli				; Enable interrupts
e95f : 60               [ 6] 	rts
                             
                             
                             ; copy pattern array to sprite pattern vram
                             ; pattern array is a mim 4 element int
e960 :                       df_rt_spritepat
e960 : 2063db           [ 6] 	jsr df_rt_parm_2ints
                             	; save sprite number
e963 : 86e3             [ 3] 	stx df_tmpptra
e965 : 64e4             [ 3] 	stz df_tmpptra+1
                             	; multiply by 8 to get pattern offset
e967 : 06e3             [ 5] 	asl df_tmpptra
e969 : 26e4             [ 5] 	rol df_tmpptra+1
e96b : 06e3             [ 5] 	asl df_tmpptra
e96d : 26e4             [ 5] 	rol df_tmpptra+1
e96f : 06e3             [ 5] 	asl df_tmpptra
e971 : 26e4             [ 5] 	rol df_tmpptra+1
                             	; add offset to sprite pattern base
                             	; and put in X,A
e973 : a5e3             [ 3] 	lda df_tmpptra
e975 : 651f             [ 3] 	adc vdp_base+vdp_addr_spp
e977 : aa               [ 2] 	tax
e978 : a5e4             [ 3] 	lda df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  164
---------------------------------- bank1.s -----------------------------------

e97a : 6520             [ 3] 	adc vdp_base+vdp_addr_spp+1
e97c : 78               [ 2] 	sei			; Disable interrupts
                             	; set vdp address
e97d : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	; start from beginning of array
e980 : a000             [ 2] 	ldy #0
e982 :                       df_rt_spritepat_line
                             	; get the sprite patten from array
e982 : b1e5             [ 5] 	lda (df_tmpptrb),y
                             	; and write to vdp
e984 : 2025c6           [ 6] 	jsr vdp_wr_vram
e987 : c8               [ 2] 	iny
                             	; do this for 8 bytes (4 elements)
e988 : c008             [ 2] 	cpy #8
e98a : d0f6             [ 3] 	bne df_rt_spritepat_line
e98c : 58               [ 2] 	cli			; Enable interrupts
e98d : 60               [ 6] 	rts
                             
e98e :                       df_rt_spritepos
e98e : 206edb           [ 6] 	jsr df_rt_parm_3ints
                             	; calculate the sprite number in vram
e991 : a5e3             [ 3] 	lda df_tmpptra
e993 : 0a               [ 2] 	asl a
e994 : 0a               [ 2] 	asl a
e995 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e997 : aa               [ 2] 	tax
e998 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e99a : 6900             [ 2] 	adc #0
e99c : 78               [ 2] 	sei
e99d : 20fdc5           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
e9a0 : a5e7             [ 3] 	lda df_tmpptrc
e9a2 : 2025c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
e9a5 : a5e5             [ 3] 	lda df_tmpptrb
e9a7 : 2025c6           [ 6] 	jsr vdp_wr_vram
e9aa : 58               [ 2] 	cli
e9ab : 60               [ 6] 	rts
                             
                             ; common routine for col and nme variations
                             ; A contains offset in to sprite table to update
e9ac :                       df_rt_spriteattr
                             	; save A which contains the offset
e9ac : 48               [ 3] 	pha
e9ad : 2063db           [ 6] 	jsr df_rt_parm_2ints
                             	; calculate the sprite number in vram
e9b0 : a5e3             [ 3] 	lda df_tmpptra
e9b2 : 0a               [ 2] 	asl a
e9b3 : 0a               [ 2] 	asl a
e9b4 : 651d             [ 3] 	adc vdp_base+vdp_addr_spa
e9b6 : 85e3             [ 3] 	sta df_tmpptra
e9b8 : a51e             [ 3] 	lda vdp_base+vdp_addr_spa+1
e9ba : 6900             [ 2] 	adc #0
e9bc : 85e4             [ 3] 	sta df_tmpptra+1
                             	; add offset and put in X,A to set VRAM address
e9be : 68               [ 4] 	pla							; get offset from stack
e9bf : 65e3             [ 3] 	adc df_tmpptra
e9c1 : aa               [ 2] 	tax
e9c2 : a5e4             [ 3] 	lda df_tmpptra+1
e9c4 : 6900             [ 2] 	adc #0
e9c6 : a8               [ 2] 	tay
e9c7 : a5e5             [ 3] 	lda df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  165
---------------------------------- bank1.s -----------------------------------

e9c9 : 4c2ac6           [ 3] 	jmp vdp_poke
                             
e9cc :                       df_rt_spritecol
                             	; offset is 3 for colour byte
e9cc : a903             [ 2] 	lda #3
e9ce : 4cace9           [ 3] 	jmp df_rt_spriteattr
                             
e9d1 :                       df_rt_spritenme
                             	; offset is 2 for name byte
e9d1 : a902             [ 2] 	lda #2
e9d3 : 4cace9           [ 3] 	jmp df_rt_spriteattr
                             
e9d6 :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
e9d6 : a5e3             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
e9d8 : 3a               [ 2] 	dec a
e9d9 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
e9db : 0a               [ 2] 	asl a
e9dc : aa               [ 2] 	tax
                             	; get low byte of period
e9dd : a4e5             [ 3] 	ldy df_tmpptrb
e9df : 20eec3           [ 6] 	jsr _snd_set
                             	; increment reg number to high byte
e9e2 : e8               [ 2] 	inx
                             	; get high byte of period
e9e3 : a5e6             [ 3] 	lda df_tmpptrb+1
e9e5 : 290f             [ 2] 	and #0x0f
e9e7 : a8               [ 2] 	tay
                             	; set period
e9e8 : 20eec3           [ 6] 	jsr _snd_set
                             	; get volume register index (8 = channel 1)
e9eb : 18               [ 2] 	clc
e9ec : a5e3             [ 3] 	lda df_tmpptra
e9ee : 2903             [ 2] 	and #3
e9f0 : 6907             [ 2] 	adc #7
e9f2 : aa               [ 2] 	tax
                             	; get volume
e9f3 : a5e7             [ 3] 	lda df_tmpptrc
e9f5 : 290f             [ 2] 	and #0x0f
e9f7 : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
e9f9 : 0910             [ 2] 	ora #0x10
e9fb :                       df_rt_sound_env_skip
e9fb : a8               [ 2] 	tay
e9fc : 4ceec3           [ 3] 	jmp _snd_set
                             ;	rts
                             
                             ; sound chan,period,volume	
e9ff :                       df_rt_sound
e9ff : 206edb           [ 6] 	jsr df_rt_parm_3ints
ea02 :                       df_rt_dosound
                             	; check which channel (0 = noise)
ea02 : a5e3             [ 3] 	lda df_tmpptra
ea04 : f003             [ 3] 	beq df_rt_sound_noise
ea06 : 4cd6e9           [ 3] 	jmp df_rt_snd_common
ea09 :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
ea09 : a206             [ 2] 	ldx #6
ea0b : a5e5             [ 3] 	lda df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  166
---------------------------------- bank1.s -----------------------------------

ea0d : 291f             [ 2] 	and #0x1f
ea0f : a8               [ 2] 	tay
ea10 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             ; music chan,octave,note,volume
ea13 :                       df_rt_music
ea13 : 2085db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
ea16 : 18               [ 2] 	clc
ea17 : a5e5             [ 3] 	lda df_tmpptrb
ea19 : 65e5             [ 3] 	adc df_tmpptrb
ea1b : 65e5             [ 3] 	adc df_tmpptrb
ea1d : 0a               [ 2] 	asl a
ea1e : 0a               [ 2] 	asl a
                             	; we have x12, now add note to get index
ea1f : 65e7             [ 3] 	adc df_tmpptrc
ea21 : 0a               [ 2] 	asl a
ea22 : a8               [ 2] 	tay
                             	; get period A,X (hi/lo)
ea23 : 20bec3           [ 6] 	jsr _snd_get_note
ea26 : 86e5             [ 3] 	stx df_tmpptrb
ea28 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
ea2a : a5e9             [ 3] 	lda df_tmpptrd
ea2c : 85e7             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
ea2e : 4c02ea           [ 3] 	jmp df_rt_dosound
                             	
                             	
                             ; play tonemask,noisemask,envelope,period
ea31 :                       df_rt_play
ea31 : 2085db           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
ea34 : a5e3             [ 3] 	lda df_tmpptra
ea36 : 2907             [ 2] 	and #7
ea38 : 85e3             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
ea3a : a5e5             [ 3] 	lda df_tmpptrb
ea3c : 2907             [ 2] 	and #7
ea3e : 0a               [ 2] 	asl a
ea3f : 0a               [ 2] 	asl a
ea40 : 0a               [ 2] 	asl a
ea41 : 05e3             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; keep top 2 bits 0 as these are port a and b in
ea43 : 493f             [ 2] 	eor #0x3f
ea45 : a8               [ 2] 	tay
                             	; reg 7 is control register
ea46 : a207             [ 2] 	ldx #7
ea48 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 3 = envelope mode
ea4b : a5e7             [ 3] 	lda df_tmpptrc
ea4d : 290f             [ 2] 	and #0xf
ea4f : a8               [ 2] 	tay
                             	; 13 is envelope shape register
ea50 : a20d             [ 2] 	ldx #13
ea52 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
AS65 Assembler for R6502 [1.42].                                     Page  167
---------------------------------- bank1.s -----------------------------------

ea55 : a20b             [ 2] 	ldx #11
                             	; get low
ea57 : a4e9             [ 3] 	ldy df_tmpptrd
ea59 : 20eec3           [ 6] 	jsr _snd_set
                             	; get high
ea5c : e8               [ 2] 	inx
ea5d : a4ea             [ 3] 	ldy df_tmpptrd+1
ea5f : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             
                             ;* Binary save mem,hdr,addr,len,filename
ea62 :                       df_rt_bsave
                             	; Get mem type, 0=RAM, else VRAM
ea62 : 20a8d8           [ 6] 	jsr df_rt_neval				; Get mem type
ea65 : 20acf1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
ea68 : e076             [ 2] 	cpx #'v'
ea6a : d003             [ 3] 	bne df_rt_bsave_tryr
ea6c : 18               [ 2] 	clc							; Clear C for vram
ea6d : 8007             [ 3] 	bra df_rt_bsave_savep
ea6f :                       df_rt_bsave_tryr
ea6f : e072             [ 2] 	cpx #'r'
ea71 : f002             [ 3] 	beq	 df_rt_bsave_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
ea75 :                       df_rt_bsave_setR
ea75 : 38               [ 2] 	sec							; Set C for ram
ea76 :                       df_rt_bsave_savep
                             	; save C, clear=VRAM, set=RAM
ea76 : 08               [ 3] 	php
                             
                             	; jump over comma
ea77 : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
ea79 : 20a8d8           [ 6] 	jsr df_rt_neval				; Get header length
ea7c : 20acf1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
ea7f : da               [ 3] 	phx
                             
                             	; jump over comma
ea80 : e6ca             [ 5] 	inc df_exeoff
ea82 : 20a8d8           [ 6] 	jsr df_rt_neval				; Get address
ea85 : 20acf1           [ 6] 	jsr df_ost_popInt			; X,A = Address
ea88 : 48               [ 3] 	pha
ea89 : da               [ 3] 	phx
                             
                             	; jump over comma
ea8a : e6ca             [ 5] 	inc df_exeoff
ea8c : 20a8d8           [ 6] 	jsr df_rt_neval				; Get length
ea8f : 20acf1           [ 6] 	jsr df_ost_popInt			; X,A = Length
ea92 : 48               [ 3] 	pha
ea93 : da               [ 3] 	phx
                             
                             	; jump over comma
ea94 : e6ca             [ 5] 	inc df_exeoff
                             	; Process filename
ea96 : 2001eb           [ 6] 	jsr df_rt_parse_file
ea99 : 2066c5           [ 6] 	jsr io_open_write
ea9c : b05a             [ 3] 	bcs df_rt_file_errc3		; Error condition resets t
                             
AS65 Assembler for R6502 [1.42].                                     Page  168
---------------------------------- bank1.s -----------------------------------

                             	; On the stack, we have lenlo,lenhi,adlo,adhi,he
ea9e : ba               [ 2] 	tsx
ea9f : bc0501           [ 4] 	ldy 0x105,x					; Get header len
eaa2 : f008             [ 3] 	beq df_rt_bsave_byte
eaa4 : a900             [ 2] 	lda #0						; Zero filler
eaa6 :                       df_rt_bsave_header
eaa6 : 2060c5           [ 6] 	jsr io_put_ch				; Write a byte to disk
eaa9 : 88               [ 2] 	dey
eaaa : d0fa             [ 3] 	bne df_rt_bsave_header
eaac :                       df_rt_bsave_byte
eaac : ba               [ 2] 	tsx							; Restore SP to X
eaad : bd0101           [ 4] 	lda 0x101,x					; low<>0 carry on
eab0 : d005             [ 3] 	bne df_rt_bsave_byte_do
eab2 : bd0201           [ 4] 	lda 0x102,x					; hi<>0 carry on
eab5 : f038             [ 3] 	beq df_rt_bsave_done		; else done
eab7 :                       df_rt_bsave_byte_do
eab7 : bd0601           [ 4] 	lda 0x106,x					; Get the C status
eaba : 48               [ 3] 	pha
eabb : 28               [ 4] 	plp							; C unaffected by next ops
                             	
eabc : bd0301           [ 4] 	lda 0x103,x					; Get low address
eabf : bc0401           [ 4] 	ldy 0x104,x					; Get high address
eac2 : aa               [ 2] 	tax							; X,Y contain address
                             
eac3 : b006             [ 3] 	bcs df_rt_bsave_ram			; RAM or VRAM?
                             	; Read from VRAM
eac5 : 98               [ 2] 	tya							; A needs to contain high byte
eac6 : 2006c4           [ 6] 	jsr _vdp_peek				; Peek VRAM
eac9 : 8006             [ 3] 	bra df_rt_bsave_write
eacb :                       df_rt_bsave_ram
                             	; Read from RAM
eacb : 86e3             [ 3] 	stx df_tmpptra				; Save address
eacd : 84e4             [ 3] 	sty df_tmpptra+1
eacf : b2e3             [ 5] 	lda (df_tmpptra)			; Peek RAM
ead1 :                       df_rt_bsave_write
ead1 : 2060c5           [ 6] 	jsr io_put_ch				; Write to disk
ead4 : ba               [ 2] 	tsx							; Get SP to X
ead5 : fe0301           [ 6] 	inc 0x103,x					; Increment low address
ead8 : d003             [ 3] 	bne df_rt_bsave_skiph
eada : fe0401           [ 6] 	inc 0x104,x					; Increment high address
eadd :                       df_rt_bsave_skiph
eadd : bc0101           [ 4] 	ldy 0x101,x					; Get low len byte
eae0 : f005             [ 3] 	beq df_rt_bsave_dech
eae2 : de0101           [ 6] 	dec 0x101,x					; A simple decrement
eae5 : 80c5             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eae7 :                       df_rt_bsave_dech
eae7 : de0101           [ 6] 	dec 0x101,x					; Decrement low in readiness
eaea : de0201           [ 6] 	dec 0x102,x					; Decrement high
eaed : 80bd             [ 3] 	bra df_rt_bsave_byte		; Process next byte
eaef :                       df_rt_bsave_done
                             	; Tidy the stack
eaef : 68               [ 4] 	pla
eaf0 : 68               [ 4] 	pla
eaf1 : 68               [ 4] 	pla
eaf2 : 68               [ 4] 	pla
eaf3 : 68               [ 4] 	pla
eaf4 : 68               [ 4] 	pla
eaf5 : 4c1eeb           [ 3] 	jmp df_rt_file_cleanup		; Clean up FS
                             
eaf8 :                       df_rt_file_errc3				; Stepping stone!!!
eaf8 : b0fe             [ 3] 	bcs df_rt_file_errc3
                             
AS65 Assembler for R6502 [1.42].                                     Page  169
---------------------------------- bank1.s -----------------------------------

                             ;* common filename procesing routine
                             ;* 
eafa :                       df_rt_init_filename
                             	; evaluate string X,A has the string pointer
eafa : 20a8d8           [ 6] 	jsr df_rt_neval
eafd : 20a4f1           [ 6] 	jsr df_ost_popStr
                             
eb00 : 60               [ 6] 	rts
                             	
                             ;* common file parsing routine
eb01 :                       df_rt_parse_file
eb01 : a902             [ 2] 	lda #2					; Only works for SD card now
eb03 : 2045c5           [ 6] 	jsr io_active_device
                             
                             	; now process filename, XA has pointer
eb06 : 20faea           [ 6] 	jsr df_rt_init_filename
eb09 : 60               [ 6] 	rts
                             ; save "file"
eb0a :                       df_rt_save
eb0a : 2001eb           [ 6] 	jsr df_rt_parse_file
eb0d : 2066c5           [ 6] 	jsr io_open_write
eb10 : b063             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
eb12 : a901             [ 2] 	lda #1
eb14 : 85eb             [ 3] 	sta df_tmpptre
eb16 : 20b3e6           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
eb19 : a90d             [ 2] 	lda #UTF_CR
eb1b : 2060c5           [ 6] 	jsr io_put_ch
eb1e :                       df_rt_file_cleanup
                             	; close the file
eb1e : 2069c5           [ 6] 	jsr io_close
eb21 : 18               [ 2] 	clc
                             	; restore to default device io
eb22 : 4c42c5           [ 3] 	jmp io_set_default
                             ;	clc
                             ;	rts
                             
                             ; load 'x',"file" where 0=serial, 1=SDCard
eb25 :                       df_rt_load
eb25 : 2001eb           [ 6] 	jsr df_rt_parse_file
eb28 : 2063c5           [ 6] 	jsr io_open_read
eb2b : b048             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
                             
                             	; Initialise to line 10 in scratch, scratch+1
eb2d : a90a             [ 2] 	lda #10
eb2f : 8d0009           [ 4] 	sta scratch
eb32 : 9c0109           [ 4] 	stz scratch+1
eb35 :                       df_rt_loadline
eb35 : 18               [ 2] 	clc
eb36 : 2075d7           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
eb39 : 9013             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
eb3b : 9c800a           [ 4] 	stz df_tokbuff			; Offset to next line
eb3e : 9c810a           [ 4] 	stz df_tokbuff+1		; Clear line low
AS65 Assembler for R6502 [1.42].                                     Page  170
---------------------------------- bank1.s -----------------------------------

eb41 : 9c820a           [ 4] 	stz df_tokbuff+2		; Clear line high
eb44 : 64c1             [ 3] 	stz df_nxtstidx			; Clear next statement
eb46 : 64c0             [ 3] 	stz df_eolidx			; Clear end of line too
eb48 : a901             [ 2] 	lda #1					; Set immediate mode to get a 'Ready'
eb4a : 85a0             [ 3] 	sta df_immed			; But nothing to run
eb4c : 80d0             [ 3] 	bra df_rt_file_cleanup	; Ok now can close and do
eb4e :                       df_rt_ldtokenise
eb4e : 2099d0           [ 6] 	jsr df_lexer_line		; Tokenise loaded string - ju
                             	; check if line number == 0
eb51 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
eb54 : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
eb57 : d017             [ 3] 	bne df_rt_storeline		; No, then store the line
                             	; Else insert current line number to buffer posi
                             	; also add 10 to the current line number
eb59 : 18               [ 2] 	clc
eb5a : ad0009           [ 4] 	lda scratch				; Get line number lo
eb5d : 8d810a           [ 4] 	sta df_tokbuff+1		; Use current line number
eb60 : 690a             [ 2] 	adc #10					; But increment for next by 10
eb62 : 8d0009           [ 4] 	sta scratch
eb65 : ad0109           [ 4] 	lda scratch+1			; Get line number hi
eb68 : 8d820a           [ 4] 	sta df_tokbuff+2
eb6b : 6900             [ 2] 	adc #0
eb6d : 8d0109           [ 4] 	sta scratch+1
eb70 :                       df_rt_storeline
eb70 : 20ecd7           [ 6] 	jsr df_pg_line_number	; Save the line in the rig
eb73 : 80c0             [ 3] 	bra df_rt_loadline		; Continue with next until b
                             
                             ; Somwehere to go to raise a file error!
eb75 :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
eb77 :                       df_rt_del
eb77 : 20faea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb7a : 208ec0           [ 6] 	jsr _fs_delete_w			; Delete file
eb7d : 60               [ 6] 	rts
                             
eb7e :                       df_rt_chdir
eb7e : 20faea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb81 : 205ec0           [ 6] 	jsr _fs_chdir_w				; Try and change directory
eb84 : b0ef             [ 3] 	bcs df_rt_file_errc
eb86 : 60               [ 6] 	rts
                             
eb87 :                       df_rt_mkdir
eb87 : 20faea           [ 6] 	jsr df_rt_init_filename		; Parse filename
eb8a : 2076c0           [ 6] 	jsr _fs_mkdir_w				; Try and make directory
eb8d : b0e6             [ 3] 	bcs df_rt_file_errc
eb8f : 60               [ 6] 	rts
                             
                             ; bload MEM,HEAD,ADDR,FNAME
eb90 :                       df_rt_bload
                             	; Get mem type, 0=RAM, else VRAM
eb90 : 20a8d8           [ 6] 	jsr df_rt_neval				; Get mem type
eb93 : 20acf1           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
eb96 : e076             [ 2] 	cpx #'v'
eb98 : d003             [ 3] 	bne df_rt_bload_tryr
eb9a : 18               [ 2] 	clc							; Clear C for vram
eb9b : 8007             [ 3] 	bra df_rt_bload_savep
eb9d :                       df_rt_bload_tryr
eb9d : e072             [ 2] 	cpx #'r'
eb9f : f002             [ 3] 	beq	 df_rt_bload_setR
AS65 Assembler for R6502 [1.42].                                     Page  171
---------------------------------- bank1.s -----------------------------------

                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
eba3 :                       df_rt_bload_setR
eba3 : 38               [ 2] 	sec							; Set C for ram
eba4 :                       df_rt_bload_savep
                             	; save C, clear=VRAM, set=RAM
eba4 : 08               [ 3] 	php
                             	; jump over comma
eba5 : e6ca             [ 5] 	inc df_exeoff
                             	; Get header length
eba7 : 20a8d8           [ 6] 	jsr df_rt_neval				; Get header length
ebaa : 20acf1           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
ebad : da               [ 3] 	phx
                             	; jump over comma
ebae : e6ca             [ 5] 	inc df_exeoff
ebb0 : 8012             [ 3] 	bra df_rt_bvload
ebb2 :                       df_rt_font
ebb2 : 18               [ 2] 	clc							; Set to video
ebb3 : 08               [ 3] 	php
ebb4 : a900             [ 2] 	lda #0						; No header
ebb6 : 48               [ 3] 	pha
ebb7 : a901             [ 2] 	lda #1						; 0x100 address - hi
ebb9 : 48               [ 3] 	pha
ebba : a900             [ 2] 	lda #0						; 0x100 address - lo
ebbc : 48               [ 3] 	pha
ebbd : 800d             [ 3] 	bra df_rt_bload_file
ebbf :                       df_rt_vload
ebbf : 18               [ 2] 	clc							; Hardcode for VRAM
ebc0 : 08               [ 3] 	php
ebc1 : a207             [ 2] 	ldx #7						; Hardcode header length
ebc3 : da               [ 3] 	phx
ebc4 :                       df_rt_bvload
ebc4 : 20a8d8           [ 6] 	jsr df_rt_neval				; Get address
ebc7 : 20acf1           [ 6] 	jsr df_ost_popInt			; X,A = Address
ebca : 48               [ 3] 	pha
ebcb : da               [ 3] 	phx
ebcc :                       df_rt_bload_file
                             	; jump over comma
ebcc : e6ca             [ 5] 	inc df_exeoff
ebce : 2001eb           [ 6] 	jsr df_rt_parse_file
ebd1 : 2063c5           [ 6] 	jsr io_open_read
ebd4 : b09f             [ 3] 	bcs df_rt_file_errc		; Error condition resets th
                             	; On the stack:
                             	; 101+x = adlo
                             	; 102+x = adhi
                             	; 103+x = header length
                             	; 104+x = mem type (c=0 means video)
ebd6 : ba               [ 2] 	tsx
ebd7 : bc0301           [ 4] 	ldy 0x103,x					; Get header
ebda : f008             [ 3] 	beq df_rt_vload_byte
ebdc :                       df_rt_vload_header
ebdc : 205dc5           [ 6] 	jsr io_get_ch				; Get a character
ebdf : b03c             [ 4] 	bcs df_rt_vload_done		; If EOF then done
ebe1 : 88               [ 2] 	dey
ebe2 : d0f8             [ 3] 	bne df_rt_vload_header
ebe4 :                       df_rt_vload_byte
ebe4 : ba               [ 2] 	tsx							; Restore SP to X
ebe5 : bd0401           [ 4] 	lda 0x104,x					; Get the C status
ebe8 : 48               [ 3] 	pha
ebe9 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
AS65 Assembler for R6502 [1.42].                                     Page  172
---------------------------------- bank1.s -----------------------------------

ebea : bd0101           [ 4] 	lda 0x101,x					; Get low address
ebed : bc0201           [ 4] 	ldy 0x102,x					; Get high address
ebf0 : aa               [ 2] 	tax							; X,Y contain address
                             
ebf1 : b014             [ 4] 	bcs df_rt_vload_ram			; RAM or VRAM?
                             	; Poke to VRAM but skip 0x1800-0x1fff
ebf3 : 205dc5           [ 6] 	jsr io_get_ch				; Get a character
ebf6 : b025             [ 4] 	bcs df_rt_vload_done		; If EOF then done
ebf8 : c018             [ 2] 	cpy #0x18					; If page # <= 0x17
ebfa : 9006             [ 4] 	bcc df_rt_vload_do_vpoke	; then vpoke
ebfc : c020             [ 2] 	cpy #0x20					; Or page >= 0x20
ebfe : b002             [ 4] 	bcs df_rt_vload_do_vpoke	; then vpoke
ec00 : 8010             [ 3] 	bra df_rt_vload_next
ec02 :                       df_rt_vload_do_vpoke
ec02 : 201ec4           [ 6] 	jsr _vdp_poke				; Write to VRAM
ec05 : 800b             [ 3] 	bra df_rt_vload_next
ec07 :                       df_rt_vload_ram
                             	; Poke to RAM
ec07 : 205dc5           [ 6] 	jsr io_get_ch				; Get a character
ec0a : b011             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ec0c : 86e3             [ 3] 	stx df_tmpptra				; Save address
ec0e : 84e4             [ 3] 	sty df_tmpptra+1
ec10 : 92e3             [ 5] 	sta (df_tmpptra)			; Poke byte to RAM
ec12 :                       df_rt_vload_next
ec12 : ba               [ 2] 	tsx							; Get SP to X
ec13 : fe0101           [ 6] 	inc 0x101,x					; Increment low address
ec16 : d003             [ 3] 	bne df_rt_vload_byte_skip
ec18 : fe0201           [ 6] 	inc 0x102,x					; Increment high address
ec1b :                       df_rt_vload_byte_skip
ec1b : 80c7             [ 4] 	bra df_rt_vload_byte		; Back for next video byte
ec1d :                       df_rt_vload_done
                             	; Tidy the stack
ec1d : 68               [ 4] 	pla
ec1e : 68               [ 4] 	pla
ec1f : 68               [ 4] 	pla
ec20 : 68               [ 4] 	pla
ec21 : 4c1eeb           [ 3] 	jmp df_rt_file_cleanup
                             
ec24 :                       df_rt_dir_string				; Name of a directory
ec24 : 3c4449523e202000      	db "<DIR>  ",0				; 7 chars + terminator
ec2c :                       df_rt_dir
ec2c : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ec2f : a214             [ 2] 	ldx #20						; Count of how many files before pa
ec31 : da               [ 3] 	phx
ec32 :                       df_rt_dir_show_entry
ec32 : 18               [ 2] 	clc							; Only looking for valid files
ec33 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ec36 : b052             [ 3] 	bcs df_rt_dir_done			; If C then no more entries
ec38 : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ec3a : a909             [ 2] 	lda #hi(scratch)
ec3c : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ec3f : a20c             [ 2] 	ldx #12						; Put a zero terminator after filen
ec41 : 9e0009           [ 5] 	stz scratch,x
ec44 : a200             [ 2] 	ldx #lo(scratch)			; Print filename
ec46 : a909             [ 2] 	lda #hi(scratch)
ec48 : 20abc5           [ 6] 	jsr io_print_line			; Print name
ec4b : 2018c8           [ 6] 	jsr utilPrintSPC			; Gap
ec4e : a563             [ 3] 	lda fh_handle+FH_Attr		; Is it a directory?
ec50 : c910             [ 2] 	cmp #0x10
ec52 : d009             [ 3] 	bne df_rt_dir_size
ec54 : a224             [ 2] 	ldx #lo(df_rt_dir_string)	; Set up pointer to na
ec56 : a9ec             [ 2] 	lda #hi(df_rt_dir_string)
AS65 Assembler for R6502 [1.42].                                     Page  173
---------------------------------- bank1.s -----------------------------------

ec58 : 20abc5           [ 6] 	jsr io_print_line			; Print directory indicator
ec5b : 800d             [ 3] 	bra df_rt_dir_line
ec5d :                       df_rt_dir_size
ec5d : a223             [ 2] 	ldx #lo(scratch+35)			; Print size (already term
ec5f : a909             [ 2] 	lda #hi(scratch+35)
ec61 : 20abc5           [ 6] 	jsr io_print_line			; Print size - 5 chars left 
ec64 : 2018c8           [ 6] 	jsr utilPrintSPC			; Gap
ec67 : 2018c8           [ 6] 	jsr utilPrintSPC			; Gap
                             	; Printed exactly 20 chars per size
ec6a :                       df_rt_dir_line
ec6a : a527             [ 3] 	lda gr_scrngeom+gr_screen_w	; If 32 col screen t
ec6c : c920             [ 2] 	cmp #32
ec6e : d003             [ 3] 	bne df_rt_dir_skip_crlf
ec70 : 2020c8           [ 6] 	jsr utilPrintCRLF
ec73 :                       df_rt_dir_skip_crlf
ec73 : fa               [ 4] 	plx							; Decrement file line counter
ec74 : ca               [ 2] 	dex
ec75 : d00d             [ 3] 	bne df_rt_dir_skip_pause
ec77 : a291             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ec79 : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ec7b : 20abc5           [ 6] 	jsr io_print_line
ec7e : 38               [ 2] 	sec
ec7f : 205dc5           [ 6] 	jsr io_get_ch				; Wait for any key
ec82 : a214             [ 2] 	ldx #20						; Reset line counter
ec84 :                       df_rt_dir_skip_pause	
ec84 : da               [ 3] 	phx							; Save line counter
ec85 : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ec88 : 80a8             [ 3] 	bra df_rt_dir_show_entry	; Find another entry
ec8a :                       df_rt_dir_done
ec8a : fa               [ 4] 	plx							; Pop line counter
ec8b : a90d             [ 2] 	lda #UTF_CR					; Final CR
ec8d : 2060c5           [ 6] 	jsr io_put_ch
ec90 : 60               [ 6] 	rts
ec91 :                       df_rt_pausemsg
ec91 : 0d507265737320..      	db UTF_CR,"Press any key for more..",UTF_CR,0
                             
ecac :                       df_rt_dirl						; Long listing format
ecac : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ecaf : a214             [ 2] 	ldx #20						; Count of how many files before pa
ecb1 : da               [ 3] 	phx
ecb2 :                       df_rt_dirl_show_entry
ecb2 : 18               [ 2] 	clc							; Only looking for valid files
ecb3 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ecb6 : b025             [ 3] 	bcs df_rt_dirl_done			; If C then no more entrie
ecb8 : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ecba : a909             [ 2] 	lda #hi(scratch)
ecbc : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ecbf : a200             [ 2] 	ldx #lo(scratch)			; Print the whole entry
ecc1 : a909             [ 2] 	lda #hi(scratch)
ecc3 : 20abc5           [ 6] 	jsr io_print_line
ecc6 :                       df_rt_dirl_line
ecc6 : fa               [ 4] 	plx							; Decrement file line counter
ecc7 : ca               [ 2] 	dex
ecc8 : d00d             [ 3] 	bne df_rt_dirl_skip_pause
ecca : a291             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
eccc : a9ec             [ 2] 	lda #hi(df_rt_pausemsg)
ecce : 20abc5           [ 6] 	jsr io_print_line
ecd1 : 38               [ 2] 	sec
ecd2 : 205dc5           [ 6] 	jsr io_get_ch				; Wait for any key
ecd5 : a214             [ 2] 	ldx #20						; Reset line counter
ecd7 :                       df_rt_dirl_skip_pause	
ecd7 : da               [ 3] 	phx							; Save line counter
AS65 Assembler for R6502 [1.42].                                     Page  174
---------------------------------- bank1.s -----------------------------------

ecd8 : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ecdb : 80d5             [ 3] 	bra df_rt_dirl_show_entry	; Find another entry
ecdd :                       df_rt_dirl_done
ecdd : fa               [ 4] 	plx							; Pop line counter
ecde : 2020c8           [ 6] 	jsr utilPrintCRLF			; Final CR
ece1 : 60               [ 6] 	rts
                             	
                             ; reset %var
ece2 :                       df_rt_reset
                             	; now get lvar X,A from current statement
ece2 : 20f1dc           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ece5 : 86e5             [ 3] 	stx df_tmpptrb
ece7 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
ece9 : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of counter (2 bytes only) without di
eceb : a510             [ 3] 	lda vdp_int_cnt
eced :                       df_rt_safe_read
eced : 92e5             [ 5] 	sta (df_tmpptrb)
ecef : a511             [ 3] 	lda vdp_int_cnt+1
ecf1 : 91e5             [ 5] 	sta (df_tmpptrb),y
                             	; If first byte has changed since reading it
                             	; then re-read (might happen due to VBI)
ecf3 : a510             [ 3] 	lda vdp_int_cnt
ecf5 : d2e5             [ 5] 	cmp (df_tmpptrb)
ecf7 : d0f4             [ 3] 	bne df_rt_safe_read
ecf9 : 60               [ 6] 	rts
                             
                             ; timedate var$
                             ; output to string as dd/mm/yy hh:mm:ss
ecfa :                       df_rt_datetime
                             	; now get lvar X,A from current statement
ecfa : 20f1dc           [ 6] 	jsr df_rt_getlvar
                             	; and save it
ecfd : da               [ 3] 	phx
ecfe : 48               [ 3] 	pha
                             	; Point to 6 bytes of scratch
ecff : a200             [ 2] 	ldx #lo(scratch)
ed01 : a909             [ 2] 	lda #hi(scratch)
                             	; Populate timedate as hmsdmy
ed03 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Get destination pointer back
ed06 : 68               [ 4] 	pla
ed07 : 85e4             [ 3] 	sta df_tmpptra+1
ed09 : 68               [ 4] 	pla
ed0a : 85e3             [ 3] 	sta df_tmpptra
                             	; Start at first char of destination
ed0c : a000             [ 2] 	ldy #0
                             	; Get days binary and convert to BCD
ed0e : ae0309           [ 4] 	ldx scratch+3
                             	; Separator character
ed11 : a92f             [ 2] 	lda #'/'
ed13 : 203fed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get months binary and convert to BCD
ed16 : ae0409           [ 4] 	ldx scratch+4
                             	; Separator character
ed19 : a92f             [ 2] 	lda #'/'
ed1b : 203fed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get years binary and convert to BCD
ed1e : ae0509           [ 4] 	ldx scratch+5
AS65 Assembler for R6502 [1.42].                                     Page  175
---------------------------------- bank1.s -----------------------------------

                             	; Separator character is space between date and 
ed21 : a920             [ 2] 	lda #' '
ed23 : 203fed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get hours binary and convert to BCD
ed26 : ae0009           [ 4] 	ldx scratch+0
                             	; Separator character
ed29 : a93a             [ 2] 	lda #':'
ed2b : 203fed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get minutes binary and convert to BCD
ed2e : ae0109           [ 4] 	ldx scratch+1
                             	; Separator character
ed31 : a93a             [ 2] 	lda #':'
ed33 : 203fed           [ 6] 	jsr df_rt_datetime_conv
                             	; Get seconds binary and convert to BCD
ed36 : ae0209           [ 4] 	ldx scratch+2
                             	; Separator character is null to terminate strin
ed39 : a900             [ 2] 	lda #0
ed3b : 203fed           [ 6] 	jsr df_rt_datetime_conv
ed3e : 60               [ 6] 	rts
ed3f :                       df_rt_datetime_conv
ed3f : 48               [ 3] 	pha
ed40 : a900             [ 2] 	lda #0
ed42 : 2050ca           [ 6] 	jsr word_to_bcd
                             	; We only need least 2 BCD digits
ed45 : a585             [ 3] 	lda num_a+0
                             	; put nibbles in A,X
ed47 : 204dc8           [ 6] 	jsr str_a_to_x
                             	; And save to destination
ed4a : 91e3             [ 5] 	sta (df_tmpptra),y
ed4c : c8               [ 2] 	iny
ed4d : 8a               [ 2] 	txa
ed4e : 91e3             [ 5] 	sta (df_tmpptra),y
ed50 : c8               [ 2] 	iny
ed51 : 68               [ 4] 	pla
ed52 : 91e3             [ 5] 	sta (df_tmpptra),y
ed54 : c8               [ 2] 	iny
ed55 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
ed56 :                       df_rt_deek
ed56 : 38               [ 2] 	sec
ed57 : 8001             [ 3] 	bra df_rt_readbyte
ed59 :                       df_rt_peek
ed59 : 18               [ 2] 	clc
ed5a :                       df_rt_readbyte
ed5a : 08               [ 3] 	php
                             ;	inc df_exeoff
ed5b : 20a2d8           [ 6] 	jsr df_rt_getnval
ed5e : 86e3             [ 3] 	stx df_tmpptra
ed60 : 85e4             [ 3] 	sta df_tmpptra+1
ed62 : b2e3             [ 5] 	lda (df_tmpptra)
ed64 : aa               [ 2] 	tax
ed65 : a900             [ 2] 	lda #0
ed67 : 28               [ 4] 	plp
ed68 : 9005             [ 3] 	bcc df_rt_readbyte_skip
ed6a : 18               [ 2] 	clc
ed6b : a001             [ 2] 	ldy #1
ed6d : b1e3             [ 5] 	lda (df_tmpptra),y
ed6f :                       df_rt_readbyte_skip
ed6f : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
AS65 Assembler for R6502 [1.42].                                     Page  176
---------------------------------- bank1.s -----------------------------------

ed72 :                       df_rt_vpeek
                             ;	inc df_exeoff
ed72 : 20a2d8           [ 6] 	jsr df_rt_getnval
ed75 : 2006c4           [ 6] 	jsr _vdp_peek
ed78 : aa               [ 2] 	tax
ed79 : a900             [ 2] 	lda #0
ed7b : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
ed7e :                       df_rt_nvpeek
                             ;	inc df_exeoff
ed7e : 20a2d8           [ 6] 	jsr df_rt_getnval
ed81 : 2096c4           [ 6] 	jsr _rtc_nvread
ed84 : aa               [ 2] 	tax
ed85 : a900             [ 2] 	lda #0
ed87 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
ed8a :                       df_rt_rnd
                             ;	inc df_exeoff
ed8a : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
ed8d : e000             [ 2] 	cpx #0
ed8f : d017             [ 3] 	bne df_rt_rnd_set
ed91 : c900             [ 2] 	cmp #0
ed93 : d013             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
ed95 : a5da             [ 3] 	lda df_rnd+1
ed97 : 4a               [ 2] 	lsr a
ed98 : 26d9             [ 5] 	rol df_rnd
ed9a : 9002             [ 3] 	bcc df_rt_rnd_noeor
ed9c : 49b4             [ 2] 	eor #0xb4
ed9e :                       df_rt_rnd_noeor
ed9e : 85da             [ 3] 	sta df_rnd+1
eda0 : 45d9             [ 3] 	eor df_rnd
eda2 : aa               [ 2] 	tax
eda3 : a900             [ 2] 	lda #0
eda5 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             	; else set the seed to that number and done
eda8 :                       df_rt_rnd_set
eda8 : 86d9             [ 3] 	stx df_rnd
edaa : 85da             [ 3] 	sta df_rnd+1
edac : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; Get joystick status	
edaf :                       df_rt_stick
                             ;	inc df_exeoff
edaf : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
edb2 : 86e3             [ 3] 	stx df_tmpptra
edb4 : 20d6c3           [ 6] 	jsr _snd_get_joy0
edb7 : 98               [ 2] 	tya
                             	; invert the bits so that 1=switch on
edb8 : 49ff             [ 2] 	eor #0xff
edba : 25e3             [ 3] 	and df_tmpptra
edbc : aa               [ 2] 	tax
edbd : a900             [ 2] 	lda #0
edbf : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; l = msbyte(x)
AS65 Assembler for R6502 [1.42].                                     Page  177
---------------------------------- bank1.s -----------------------------------

edc2 :                       df_rt_msbyte
                             ;	inc df_exeoff
edc2 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; only high byte is used
edc5 : aa               [ 2] 	tax
edc6 : a900             [ 2] 	lda #0
edc8 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             	
                             ; l = lsbyte(x)
edcb :                       df_rt_lsbyte
                             ;	inc df_exeoff
edcb : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
edce : a900             [ 2] 	lda #0
edd0 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
edd3 :                       df_rt_mem
                             ;	inc df_exeoff
edd3 : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
edd6 : e001             [ 2] 	cpx #1
edd8 : f016             [ 3] 	beq df_rt_mem_prg
edda : e002             [ 2] 	cpx #2
eddc : f024             [ 4] 	beq df_rt_mem_var
                             	; default is free memory
edde :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
edee : 8022             [ 4] 	bra df_rt_mem_calc
edf0 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
ee00 : 8010             [ 3] 	bra df_rt_mem_calc
ee02 :                       df_rt_mem_var
                             	_cpyZPWord df_vntend,df_tmpptra
                             
                             	_cpyZPWord df_vvtstrt,df_tmpptrb
                             
ee12 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
ee12 : 38               [ 2] 	sec
ee13 : a5e3             [ 3] 	lda df_tmpptra
ee15 : e5e5             [ 3] 	sbc df_tmpptrb
ee17 : aa               [ 2] 	tax
ee18 : a5e4             [ 3] 	lda df_tmpptra+1
ee1a : e5e6             [ 3] 	sbc df_tmpptrb+1
ee1c : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; %k=key(%sync) %sync>=1 means sync
ee1f :                       df_rt_get					; get is alias for key
ee1f :                       df_rt_key
                             ;	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  178
---------------------------------- bank1.s -----------------------------------

ee1f : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=1 if x==0 else x>0 makes c=0
ee22 : e001             [ 2] 	cpx #1
ee24 : 205dc5           [ 6] 	jsr io_get_ch
ee27 : 9003             [ 3] 	bcc df_rt_key_valid
                             	; zero out A
ee29 : a900             [ 2] 	lda #0
ee2b : 18               [ 2] 	clc
ee2c :                       df_rt_key_valid
ee2c : aa               [ 2] 	tax
ee2d : a900             [ 2] 	lda #0
ee2f : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             	
                             ; s = scrn(x,y)
ee32 :                       df_rt_scrn
                             ;	inc df_exeoff
ee32 : 2063db           [ 6] 	jsr df_rt_parm_2ints
ee35 : a6e3             [ 3] 	ldx df_tmpptra
ee37 : a4e5             [ 3] 	ldy df_tmpptrb
ee39 : 208ec3           [ 6] 	jsr _gr_get
ee3c : aa               [ 2] 	tax
ee3d : a900             [ 2] 	lda #0
ee3f : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             ; p = pixel(x,y)
ee42 :                       df_rt_pixel
                             ;	inc df_exeoff
ee42 : 2063db           [ 6] 	jsr df_rt_parm_2ints
ee45 : a6e3             [ 3] 	ldx df_tmpptra
ee47 : a4e5             [ 3] 	ldy df_tmpptrb
ee49 : a900             [ 2] 	lda #0
ee4b : 4c89f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %e=elapsed(%var)
ee4e :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
ee4e : 20f1dc           [ 6] 	jsr df_rt_getlvar
ee51 : e6ca             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
ee53 : 86e5             [ 3] 	stx df_tmpptrb
ee55 : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
ee57 : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of vdp counter without disabling int
ee59 :                       df_rt_elapsed_rd
ee59 : a510             [ 3] 	lda vdp_int_cnt
ee5b : a611             [ 3] 	ldx vdp_int_cnt+1
ee5d : c510             [ 3] 	cmp vdp_int_cnt			; If low counter changed due t
ee5f : d0f8             [ 3] 	bne df_rt_elapsed_rd
ee61 : 38               [ 2] 	sec
ee62 : f2e5             [ 5] 	sbc (df_tmpptrb)
ee64 : aa               [ 2] 	tax
ee65 : a511             [ 3] 	lda vdp_int_cnt+1
ee67 : f1e5             [ 5] 	sbc (df_tmpptrb),y
ee69 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
ee6c :                       df_rt_call
                             ;	inc df_exeoff
ee6c : 2085db           [ 6] 	jsr df_rt_parm_4ints
ee6f : a5e5             [ 3] 	lda df_tmpptrb				; load A
AS65 Assembler for R6502 [1.42].                                     Page  179
---------------------------------- bank1.s -----------------------------------

ee71 : a6e7             [ 3] 	ldx	df_tmpptrc				; load X
ee73 : a4e9             [ 3] 	ldy df_tmpptrd				; load Y
ee75 : 207bee           [ 6] 	jsr df_rt_calljsr
ee78 :                       df_rt_push_int1
ee78 : 4c8cf1           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value	
ee7b :                       df_rt_calljsr
ee7b : 6ce300           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
                             
ee7e :                       df_rt_sgn
                             ;	inc df_exeoff
ee7e : 20a2d8           [ 6] 	jsr df_rt_getnval
ee81 : 86e3             [ 3] 	stx df_tmpptra
ee83 : 05e3             [ 3] 	ora df_tmpptra
ee85 : f00f             [ 3] 	beq df_rt_sgn_z
ee87 : 2980             [ 2] 	and #0x80
ee89 : d006             [ 3] 	bne df_rt_sgn_n
ee8b : a201             [ 2] 	ldx #1
ee8d : a900             [ 2] 	lda #0
ee8f : f0e7             [ 3] 	beq df_rt_push_int1			; Always
ee91 :                       df_rt_sgn_n
ee91 : a2ff             [ 2] 	ldx #0xff
ee93 : 8a               [ 2] 	txa
ee94 : d0e2             [ 3] 	bne df_rt_push_int1			; Always
ee96 :                       df_rt_sgn_z
ee96 : a200             [ 2] 	ldx #0
ee98 : 8a               [ 2] 	txa
ee99 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
ee9b :                       df_rt_addr
                             	; get lvar X,A from current statement
ee9b : 20f1dc           [ 6] 	jsr df_rt_getlvar
ee9e : e6ca             [ 5] 	inc df_exeoff
eea0 : 4c8cf1           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
eea3 :                       df_rt_strlen_common
eea3 : 86e3             [ 3] 	stx df_tmpptra
eea5 : 85e4             [ 3] 	sta df_tmpptra+1
eea7 : a0ff             [ 2] 	ldy #0xff
eea9 :                       df_rt_strlen_count
eea9 : c8               [ 2] 	iny
eeaa : b1e3             [ 5] 	lda (df_tmpptra),y
eeac : d0fb             [ 3] 	bne df_rt_strlen_count
eeae : 98               [ 2] 	tya
eeaf : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
eeb0 :                       df_rt_str_extract
                             	; source string
eeb0 : 20a4f1           [ 6] 	jsr df_ost_popStr
eeb3 : 86e3             [ 3] 	stx df_tmpptra
eeb5 : 85e4             [ 3] 	sta df_tmpptra+1
AS65 Assembler for R6502 [1.42].                                     Page  180
---------------------------------- bank1.s -----------------------------------

                             	; destination is string accumulator
eeb7 : a5bc             [ 3] 	lda df_sevalptr
eeb9 : 85e5             [ 3] 	sta df_tmpptrb
eebb : a5bd             [ 3] 	lda df_sevalptr+1
eebd : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; start pos
eebf : a4e7             [ 3] 	ldy df_tmpptrc
eec1 : a200             [ 2] 	ldx #0
eec3 :                       df_rt_str_cpy_ch
eec3 : c4e9             [ 3] 	cpy df_tmpptrd
eec5 : f011             [ 3] 	beq df_str_src_end
eec7 : b1e3             [ 5] 	lda (df_tmpptra),y
eec9 : f00d             [ 3] 	beq df_str_src_end
eecb : 81e5             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
eed3 : c8               [ 2] 	iny
eed4 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
eed8 :                       df_str_src_end
eed8 : a900             [ 2] 	lda #0
eeda : 81e5             [ 6] 	sta (df_tmpptrb,x)
eedc : a6bc             [ 3] 	ldx df_sevalptr
eede : a5bd             [ 3] 	lda df_sevalptr+1
eee0 : 4c81f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
eee3 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
eee3 : 20a2d8           [ 6] 	jsr df_rt_getnval
eee6 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
eee8 : 8a               [ 2] 	txa
eee9 : 91bc             [ 5] 	sta (df_sevalptr),y
eeeb : c8               [ 2] 	iny
                             	; zero terminator
eeec : a900             [ 2] 	lda #0
eeee : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
eef0 : a6bc             [ 3] 	ldx df_sevalptr
eef2 : a5bd             [ 3] 	lda df_sevalptr+1
eef4 : 4c81f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
eef7 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
eef7 : 20a2d8           [ 6] 	jsr df_rt_getnval
eefa : 85e3             [ 3] 	sta df_tmpptra	; Save the high byte
eefc : 8a               [ 2] 	txa				; Convert low byte first
eefd : 204dc8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
ef00 : 85e5             [ 3] 	sta df_tmpptrb
ef02 : 8a               [ 2] 	txa				; Push low digit of low byte from X
ef03 : 48               [ 3] 	pha
ef04 : a5e5             [ 3] 	lda df_tmpptrb	; Get A back from temp
ef06 : 48               [ 3] 	pha				; Push high digit of low byte
ef07 : a5e3             [ 3] 	lda df_tmpptra	; Get the high byte
ef09 : 204dc8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
ef0c : a000             [ 2] 	ldy #0			; Index in to string temp area
AS65 Assembler for R6502 [1.42].                                     Page  181
---------------------------------- bank1.s -----------------------------------

                             	; hi/hi
ef0e : 91bc             [ 5] 	sta (df_sevalptr),y
ef10 : c8               [ 2] 	iny
                             	; hi/lo
ef11 : 8a               [ 2] 	txa
ef12 : 91bc             [ 5] 	sta (df_sevalptr),y
ef14 : c8               [ 2] 	iny
                             	; lo/hi
ef15 : 68               [ 4] 	pla
ef16 : 91bc             [ 5] 	sta (df_sevalptr),y
ef18 : c8               [ 2] 	iny
                             	; lo/lo
ef19 : 68               [ 4] 	pla
ef1a : 91bc             [ 5] 	sta (df_sevalptr),y
ef1c : c8               [ 2] 	iny
                             	; zero terminator
ef1d : a900             [ 2] 	lda #0
ef1f : 91bc             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
ef21 : a6bc             [ 3] 	ldx df_sevalptr
ef23 : a5bd             [ 3] 	lda df_sevalptr+1
ef25 : 4c81f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
ef28 :                       df_rt_dec
ef28 : 20a2d8           [ 6] 	jsr df_rt_getnval
ef2b : 18               [ 2] 	clc						; No leading zeros
ef2c : 2094ca           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
ef2f : a295             [ 2] 	ldx #lo(num_buf)
ef31 : a900             [ 2] 	lda #hi(num_buf)
ef33 : 4c81f1           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
ef36 :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
ef36 : 2058d9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
ef39 : e6ca             [ 5] 	inc df_exeoff
ef3b : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
ef3e : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
ef40 : a000             [ 2] 	ldy #0
ef42 : 84e7             [ 3] 	sty df_tmpptrc
ef44 : 4cb0ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
ef47 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
ef47 : 2058d9           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
ef4a : e6ca             [ 5] 	inc df_exeoff
ef4c : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
ef4f : 86e7             [ 3] 	stx df_tmpptrc
                             	; end pos = len
AS65 Assembler for R6502 [1.42].                                     Page  182
---------------------------------- bank1.s -----------------------------------

ef51 : a6bc             [ 3] 	ldx df_sevalptr
ef53 : a5bd             [ 3] 	lda df_sevalptr+1
ef55 : 20a3ee           [ 6] 	jsr df_rt_strlen_common
ef58 : 85e9             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
ef5a : 38               [ 2] 	sec
ef5b : e5e7             [ 3] 	sbc df_tmpptrc
ef5d : 85e7             [ 3] 	sta df_tmpptrc
ef5f : 4cb0ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
ef62 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
ef62 : 2058d9           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
ef65 : e6ca             [ 5] 	inc df_exeoff
ef67 : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
ef6a : e6ca             [ 5] 	inc df_exeoff
ef6c : 20a2d8           [ 6] 	jsr df_rt_getnval
ef6f : 86e9             [ 3] 	stx df_tmpptrd
                             	; start position
ef71 : 20acf1           [ 6] 	jsr df_ost_popInt
ef74 : ca               [ 2] 	dex					; zero offset rather than 1
ef75 : 86e7             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
ef77 : 8a               [ 2] 	txa
ef78 : 18               [ 2] 	clc
ef79 : 65e9             [ 3] 	adc df_tmpptrd
ef7b : 85e9             [ 3] 	sta df_tmpptrd
ef7d : 4cb0ee           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
ef80 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
ef80 : 2058d9           [ 6] 	jsr df_rt_seval
ef83 : 20a4f1           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
ef86 : 20a3ee           [ 6] 	jsr df_rt_strlen_common
ef89 : 4c89f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
ef8c :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
ef8c : 2058d9           [ 6] 	jsr df_rt_seval
ef8f : 20a4f1           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
ef92 : 86e3             [ 3] 	stx df_tmpptra
ef94 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
ef96 : a200             [ 2] 	ldx #0
ef98 : a1e3             [ 6] 	lda (df_tmpptra,x)
ef9a : 4c89f1           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
ef9d :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
AS65 Assembler for R6502 [1.42].                                     Page  183
---------------------------------- bank1.s -----------------------------------

ef9d : 2058d9           [ 6] 	jsr df_rt_seval
efa0 : 20a4f1           [ 6] 	jsr df_ost_popStr
efa3 : a000             [ 2] 	ldy #0				; any numeric format
efa5 : 2098c8           [ 6] 	jsr con_n_to_a		; result in num_a
efa8 : b007             [ 3] 	bcs df_rt_val_err
efaa : a685             [ 3] 	ldx num_a
efac : a586             [ 3] 	lda num_a+1
                             	; Save as an int
efae : 4c8cf1           [ 3] 	jmp df_ost_pushInt
efb1 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
efb3 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
                             ;* ok=fcreate(filename)
efb5 :                       df_rt_fcreate
efb5 : 2001eb           [ 6] 	jsr df_rt_parse_file
efb8 : 2066c5           [ 6] 	jsr io_open_write
efbb :                       df_rt_fcreate_check
                             	; Assume -1 which is OK
efbb : a2ff             [ 2] 	ldx #-1
efbd : 9002             [ 3] 	bcc df_rt_fcreate_ok
                             	; Else 0 which is error
efbf : a200             [ 2] 	ldx #0
efc1 :                       df_rt_fcreate_ok
efc1 : 8a               [ 2] 	txa				; make A=X
                             	; Save as an int
efc2 : 208cf1           [ 6] 	jsr df_ost_pushInt
                             	; Ensure we're back to the normal IO device
efc5 : 4c42c5           [ 3] 	jmp io_set_default
                             	
                             ;* ok=fopen(filename)
efc8 :                       df_rt_fopen
efc8 : 2001eb           [ 6] 	jsr df_rt_parse_file
efcb : 2063c5           [ 6] 	jsr io_open_read
efce : 80eb             [ 3] 	bra df_rt_fcreate_check
                             
                             ;* ok=fclose()
efd0 :                       df_rt_fclose
efd0 : a902             [ 2] 	lda #2					; Only works for SD card now
efd2 : 2045c5           [ 6] 	jsr io_active_device
efd5 : 2069c5           [ 6] 	jsr io_close
                             	; Ensure we're back to the normal IO device
efd8 : 4c42c5           [ 3] 	jmp io_set_default
                             
                             ;* device <num>
efdb :                       df_rt_device
efdb : 20a2d8           [ 6] 	jsr df_rt_getnval
                             	; Force update of status register
efde : 8a               [ 2] 	txa
efdf : 300a             [ 3] 	bmi df_rt_device_default
                             	; Stop dflat from trying to read inputs for Ctrl
efe1 : a59e             [ 3] 	lda df_checkmsk
efe3 : 0980             [ 2] 	ora #0x80
efe5 : 859e             [ 3] 	sta df_checkmsk
efe7 : 8a               [ 2] 	txa
                             	; A contains the device to activate
efe8 : 4c45c5           [ 3] 	jmp io_active_device
AS65 Assembler for R6502 [1.42].                                     Page  184
---------------------------------- bank1.s -----------------------------------

efeb :                       df_rt_device_default
                             	; Allow dflat to read inputs for Ctrl-C
efeb : a59e             [ 3] 	lda df_checkmsk
efed : 297f             [ 2] 	and #0x7f
efef : 859e             [ 3] 	sta df_checkmsk
eff1 : 4c42c5           [ 3] 	jmp io_set_default
                             
eff4 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
eff4 :                       mod_sz_proc_s
                             
eff4 :                       df_rt_proc_parmerr
eff4 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
eff6 :                       df_rt_proc
                             	; move past escape token
eff6 : a4ca             [ 3] 	ldy df_exeoff
eff8 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
eff9 : b1c8             [ 5] 	lda (df_currlin),y
effb : aa               [ 2] 	tax
effc : c8               [ 2] 	iny
effd : b1c8             [ 5] 	lda (df_currlin),y
efff : c8               [ 2] 	iny
f000 : 84ca             [ 3] 	sty df_exeoff
f002 : 86d0             [ 3] 	stx df_procptr
f004 : 85d1             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f006 : a003             [ 2] 	ldy #DFVVT_DIM1
f008 : b1d0             [ 5] 	lda (df_procptr),y
f00a : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f00c : 2091dc           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
AS65 Assembler for R6502 [1.42].                                     Page  185
---------------------------------- bank1.s -----------------------------------

f00f : 8445             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f011 : a002             [ 2] 	ldy #DFVVT_HI
f013 : 91d0             [ 5] 	sta (df_procptr),y
f015 : a001             [ 2] 	ldy #DFVVT_LO
f017 : 8a               [ 2] 	txa
f018 : 91d0             [ 5] 	sta (df_procptr),y
f01a : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f01c : a545             [ 3] 	lda tmp_d
f01e : 91d0             [ 5] 	sta (df_procptr),y
f020 :                       df_rt_proc_addr
                             	; move past first open bracket
f020 : e6ca             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f022 : a004             [ 2] 	ldy #DFVVT_DIM2
f024 : b1d0             [ 5] 	lda (df_procptr),y	
f026 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f028 : 48               [ 3] 	pha
                             
f029 : c6ca             [ 5] 	dec df_exeoff		; Pre-adjust
f02b :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f02b : e6ca             [ 5] 	inc df_exeoff
                             	; if at end then error!
f02d : a4ca             [ 3] 	ldy df_exeoff
f02f : b1c8             [ 5] 	lda (df_currlin),y
f031 : c929             [ 2] 	cmp #')'
f033 : f0bf             [ 4] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f035 : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f038 : 68               [ 4] 	pla
                             	; decrement
f039 : 38               [ 2] 	sec
f03a : e901             [ 2] 	sbc #1
                             	; and put back on stack
f03c : 48               [ 3] 	pha
                             	; go back and do all required parms
f03d : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f03f :                       df_rt_proc_parm_done
f03f : 68               [ 4] 	pla
f040 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f040 : a4ca             [ 3] 	ldy df_exeoff
f042 : b1c8             [ 5] 	lda (df_currlin),y
f044 : c929             [ 2] 	cmp #')'
f046 : d0ac             [ 4] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f048 : a6d0             [ 3] 	ldx df_procptr
f04a : a5d1             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f04c :                       df_rt_exec_proc
                             	; save slot address
AS65 Assembler for R6502 [1.42].                                     Page  186
---------------------------------- bank1.s -----------------------------------

f04c : 86e3             [ 3] 	stx df_tmpptra
f04e : 85e4             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f050 : a5c8             [ 3] 	lda df_currlin
f052 : 48               [ 3] 	pha
f053 : a5c9             [ 3] 	lda df_currlin+1
f055 : 48               [ 3] 	pha
f056 : a5ca             [ 3] 	lda df_exeoff
f058 : 48               [ 3] 	pha
f059 : a5c1             [ 3] 	lda df_nxtstidx
f05b : 48               [ 3] 	pha
f05c : a5c2             [ 3] 	lda df_curstidx
f05e : 48               [ 3] 	pha
f05f : a5c0             [ 3] 	lda df_eolidx
f061 : 48               [ 3] 	pha
f062 : a5d5             [ 3] 	lda df_ifnest
f064 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f065 : a001             [ 2] 	ldy #DFVVT_LO
f067 : b1e3             [ 5] 	lda (df_tmpptra),y
f069 : 85c8             [ 3] 	sta df_currlin
f06b : c8               [ 2] 	iny
f06c : b1e3             [ 5] 	lda (df_tmpptra),y
f06e : 85c9             [ 3] 	sta df_currlin+1
f070 : c8               [ 2] 	iny
f071 : b1e3             [ 5] 	lda (df_tmpptra),y
f073 : 85ca             [ 3] 	sta df_exeoff
f075 : 85c2             [ 3] 	sta df_curstidx
f077 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f079 : b1c8             [ 5] 	lda (df_currlin),y
f07b : 85c1             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f07d : 20d3db           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f080 : 68               [ 4] 	pla
f081 : 85d5             [ 3] 	sta df_ifnest
f083 : 68               [ 4] 	pla
f084 : 85c0             [ 3] 	sta df_eolidx
f086 : 68               [ 4] 	pla
f087 : 85c2             [ 3] 	sta df_curstidx
f089 : 68               [ 4] 	pla
f08a : 85c1             [ 3] 	sta df_nxtstidx
f08c : 68               [ 4] 	pla
f08d : 85ca             [ 3] 	sta df_exeoff
f08f : 68               [ 4] 	pla
f090 : 85c9             [ 3] 	sta df_currlin+1
f092 : 68               [ 4] 	pla
f093 : 85c8             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f095 : 60               [ 6] 	rts
                             
                             
f096 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f096 : a6ca             [ 3] 	ldx df_exeoff
f098 : e8               [ 2] 	inx
f099 : e8               [ 2] 	inx
f09a : e8               [ 2] 	inx
AS65 Assembler for R6502 [1.42].                                     Page  187
---------------------------------- bank1.s -----------------------------------

f09b : 86ca             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f09d : a201             [ 2] 	ldx #1									; index in to scratch
f09f : 86ce             [ 3] 	stx df_procargs							; Proc args is the #args-1
f0a1 : a4ca             [ 3] 	ldy df_exeoff
f0a3 :                       df_rt_def_find_var
f0a3 : c8               [ 2] 	iny
f0a4 : b1c8             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f0a6 : c929             [ 2] 	cmp #')'
f0a8 : f021             [ 3] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f0aa : c911             [ 2] 	cmp #DFTK_VAR
f0ac : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f0ae : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f0b0 : d0f1             [ 3] 	bne df_rt_def_find_var
f0b2 :                       df_rt_def_got_varparm
                             	; set high bit
f0b2 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f0b4 : c8               [ 2] 	iny
f0b5 :                       df_rt_def_got_var
f0b5 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f0b7 : 9d0009           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f0ba : c8               [ 2] 	iny
f0bb : b1c8             [ 5] 	lda (df_currlin),y
f0bd : 9d2009           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f0c0 : c8               [ 2] 	iny
f0c1 : b1c8             [ 5] 	lda (df_currlin),y
f0c3 : 9d4009           [ 5] 	sta scratch+64,x
f0c6 : e8               [ 2] 	inx
f0c7 : e6ce             [ 5] 	inc df_procargs
f0c9 : d0d8             [ 3] 	bne df_rt_def_find_var  ; always - relies not ze
f0cb :                       df_rt_def_parm_done
                             	; save index that we got to
f0cb : 84ca             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f0cd : 86cd             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f0cf : a900             [ 2] 	lda #0
f0d1 : 85cf             [ 3] 	sta df_procloc
f0d3 :                       df_rt_def_load_var
f0d3 : c6ce             [ 5] 	dec df_procargs
f0d5 : f02f             [ 4] 	beq df_rt_def_load_var_done
                             	; get var address
f0d7 : c6cd             [ 5] 	dec df_procmode
f0d9 : a6cd             [ 3] 	ldx df_procmode
f0db : bd2009           [ 4] 	lda scratch+32,x
f0de : 85e3             [ 3] 	sta df_tmpptra
f0e0 : bd4009           [ 4] 	lda scratch+64,x
f0e3 : 85e4             [ 3] 	sta df_tmpptra+1
                             	
f0e5 : bd0009           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f0e8 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
AS65 Assembler for R6502 [1.42].                                     Page  188
---------------------------------- bank1.s -----------------------------------

                             	; push the var address on to the runtime stack
f0ea : a6e3             [ 3] 	ldx df_tmpptra
f0ec : a5e4             [ 3] 	lda df_tmpptra+1
f0ee : 203af1           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f0f1 : e6cf             [ 5] 	inc df_procloc
f0f3 :                       df_rt_def_initialise_parm
                             	; load type
f0f3 : a000             [ 2] 	ldy #DFVVT_TYPE
f0f5 : b1e3             [ 5] 	lda (df_tmpptra),y
f0f7 : a8               [ 2] 	tay					; Put the type into Y
f0f8 : 20aef1           [ 6] 	jsr df_ost_popParmX	; Try to get this off the st
                             	; update the variable
f0fb : a002             [ 2] 	ldy #DFVVT_HI
f0fd : 91e3             [ 5] 	sta (df_tmpptra),y
f0ff : 88               [ 2] 	dey
f100 : 8a               [ 2] 	txa
f101 : 91e3             [ 5] 	sta (df_tmpptra),y
                             
f103 : 4cd3f0           [ 3] 	jmp df_rt_def_load_var
f106 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f106 : a5cf             [ 3] 	lda df_procloc
f108 : 204ef1           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f10b : 18               [ 2] 	clc
f10c : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f10d :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f10d : 20a8d8           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f110 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f110 : 2057f1           [ 6] 	jsr df_rst_popByte
f113 : aa               [ 2] 	tax
f114 : f020             [ 3] 	beq df_rt_proc_unload_done
f116 :                       df_rt_proc_unloadvar
f116 : 8a               [ 2] 	txa
f117 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f118 : 2074f1           [ 6] 	jsr df_rst_popWord
f11b : 86e5             [ 3] 	stx df_tmpptrb
f11d : 85e6             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f11f : 2074f1           [ 6] 	jsr df_rst_popWord
f122 : 86e3             [ 3] 	stx df_tmpptra
f124 : 85e4             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
AS65 Assembler for R6502 [1.42].                                     Page  189
---------------------------------- bank1.s -----------------------------------

f126 : a001             [ 2] 	ldy #DFVVT_LO
f128 : a5e5             [ 3] 	lda df_tmpptrb
f12a : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f12c : c8               [ 2] 	iny
f12d : a5e6             [ 3] 	lda df_tmpptrb+1
f12f : 91e3             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f131 : 68               [ 4] 	pla
f132 : aa               [ 2] 	tax
f133 : ca               [ 2] 	dex
f134 : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f136 :                       df_rt_proc_unload_done
f136 : 68               [ 4] 	pla					; Pull the return address off stack
f137 : 68               [ 4] 	pla					; to get to the previous level
f138 : 18               [ 2] 	clc
f139 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f13a :                       df_rt_proc_local
                             	; save address
f13a : 86e3             [ 3] 	stx df_tmpptra
f13c : 85e4             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f13e : 2066f1           [ 6] 	jsr df_rst_pushWord
f141 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f141 : a001             [ 2] 	ldy #DFVVT_LO
f143 : b1e3             [ 5] 	lda (df_tmpptra),y
f145 : aa               [ 2] 	tax
f146 : c8               [ 2] 	iny
f147 : b1e3             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f149 : 2066f1           [ 6] 	jsr df_rst_pushWord
f14c : 18               [ 2] 	clc
f14d : 60               [ 6] 	rts
                             		
f14e :                       mod_sz_proc_e
                             
                             
f14e :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
AS65 Assembler for R6502 [1.42].                                     Page  190
---------------------------------- bank1.s -----------------------------------

                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f14e :                       df_rst_pushByte
f14e : a4b8             [ 3] 	ldy df_rtstop
f150 : 99000b           [ 5] 	sta df_rtstck,y
f153 : 88               [ 2] 	dey
f154 : 84b8             [ 3] 	sty df_rtstop
f156 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f157 :                       df_rst_popByte
f157 : a4b8             [ 3] 	ldy df_rtstop
f159 : c8               [ 2] 	iny
f15a : b9000b           [ 4] 	lda df_rtstck,y
f15d : 84b8             [ 3] 	sty df_rtstop
f15f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f160 :                       df_rst_peekByte
f160 : a4b8             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f162 : b9010b           [ 4] 	lda df_rtstck+1,y
f165 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f166 :                       df_rst_pushWord
f166 : a4b8             [ 3] 	ldy df_rtstop
f168 : 99000b           [ 5] 	sta df_rtstck,y
f16b : 88               [ 2] 	dey
f16c : 8a               [ 2] 	txa
f16d : 99000b           [ 5] 	sta df_rtstck,y
AS65 Assembler for R6502 [1.42].                                     Page  191
---------------------------------- bank1.s -----------------------------------

f170 : 88               [ 2] 	dey
f171 : 84b8             [ 3] 	sty df_rtstop
f173 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f174 :                       df_rst_popWord
f174 : a4b8             [ 3] 	ldy df_rtstop
f176 : c8               [ 2] 	iny
f177 : be000b           [ 4] 	ldx df_rtstck,y
f17a : c8               [ 2] 	iny
f17b : b9000b           [ 4] 	lda df_rtstck,y
f17e : 84b8             [ 3] 	sty df_rtstop
f180 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f181 :                       df_ost_pushStr
f181 : a004             [ 2] 	ldy #DFST_STR
f183 : d009             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f185 :                       df_ost_pushPtr
f185 : a0ff             [ 2] 	ldy #DFST_PTR
f187 : d005             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f189 :                       df_ost_pushIntA
f189 : aa               [ 2] 	tax
f18a : a900             [ 2] 	lda #0
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f18c :                       df_ost_pushInt
f18c : a003             [ 2] 	ldy #DFST_INT
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f18e :                       df_ost_pushParmX
f18e : 8445             [ 3] 	sty tmp_d		; Save Type
f190 : a4b9             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f192 : 99000b           [ 5] 	sta df_rtstck,y
f195 : c8               [ 2] 	iny
                             	; push low byte next (X)
AS65 Assembler for R6502 [1.42].                                     Page  192
---------------------------------- bank1.s -----------------------------------

f196 : 8a               [ 2] 	txa
f197 : 99000b           [ 5] 	sta df_rtstck,y
f19a : c8               [ 2] 	iny
f19b : a545             [ 3] 	lda tmp_d		; get Type
f19d : 99000b           [ 5] 	sta df_rtstck,y
f1a0 : c8               [ 2] 	iny
                             	; save new top of stack
f1a1 : 84b9             [ 3] 	sty df_parmtop
f1a3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f1a4 :                       df_ost_popStr
f1a4 : a904             [ 2] 	lda #DFST_STR
f1a6 : d006             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f1a8 :                       df_ost_popPtr
f1a8 : a9ff             [ 2] 	lda #0xff
f1aa : d002             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             		
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f1ac :                       df_ost_popInt
f1ac : a903             [ 2] 	lda #DFST_INT
                             	; ***FALL THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* A - type expected
                             ;****************************************
f1ae :                       df_ost_popParmX
f1ae : a4b9             [ 3] 	ldy df_parmtop
                             	; pull type first
f1b0 : 88               [ 2] 	dey
f1b1 : 39000b           [ 4] 	and df_rtstck,y
f1b4 : f00b             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f1b6 : 88               [ 2] 	dey
f1b7 : be000b           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f1ba : 88               [ 2] 	dey
f1bb : b9000b           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f1be : 84b9             [ 3] 	sty df_parmtop
f1c0 : 60               [ 6] 	rts
f1c1 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  193
---------------------------------- bank1.s -----------------------------------

f1c3 :                       df_ost_peekType
f1c3 : a4b9             [ 3] 	ldy df_parmtop
f1c5 : b9ff0a           [ 4] 	lda df_rtstck-1,y
f1c8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f1c9 :                       df_st_malloc
                             	; save A in Y
f1c9 : a8               [ 2] 	tay
                             	; save old starend
f1ca : a5b7             [ 3] 	lda df_starend+1
f1cc : 48               [ 3] 	pha
f1cd : a5b6             [ 3] 	lda df_starend
f1cf : 48               [ 3] 	pha
                             	; restore A from Y
f1d0 : 98               [ 2] 	tya
                             	; add X,A to starend
f1d1 : 48               [ 3] 	pha
f1d2 : 8a               [ 2] 	txa
f1d3 : 18               [ 2] 	clc
f1d4 : 65b6             [ 3] 	adc df_starend
f1d6 : 85b6             [ 3] 	sta df_starend
f1d8 : 68               [ 4] 	pla
f1d9 : 65b7             [ 3] 	adc df_starend+1
f1db : 85b7             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f1dd : 68               [ 4] 	pla
f1de : aa               [ 2] 	tax
f1df : 68               [ 4] 	pla
f1e0 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f1e1 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f1e1 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f1e3 : 8d670c           [ 4] 	sta df_memtop
f1e6 : a9c0             [ 2] 	lda #hi(DF_MEMTOP)
f1e8 : 8d680c           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f1eb : 20eef1           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f1ee :                       df_clear
AS65 Assembler for R6502 [1.42].                                     Page  194
---------------------------------- bank1.s -----------------------------------

                             	; Start of program space
f1ee : a969             [ 2] 	lda #lo(DF_PROGSTART)
f1f0 : 85a7             [ 3] 	sta df_prgstrt
f1f2 : 85a9             [ 3] 	sta df_prgend
f1f4 : a90c             [ 2] 	lda #hi(DF_PROGSTART)
f1f6 : 85a8             [ 3] 	sta df_prgstrt+1
f1f8 : 85aa             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f1fa : a900             [ 2] 	lda #0
f1fc : a8               [ 2] 	tay
f1fd : 91a7             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f1ff : 85b3             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f201 : ad670c           [ 4] 	lda df_memtop
f204 : 85af             [ 3] 	sta df_vvtstrt
f206 : 85b1             [ 3] 	sta df_vvtend
f208 : ad680c           [ 4] 	lda df_memtop+1
f20b : 85b0             [ 3] 	sta df_vvtstrt+1
f20d : 85b2             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f20f : a5af             [ 3] 	lda df_vvtstrt
f211 : 85ab             [ 3] 	sta df_vntstrt
f213 : 85ad             [ 3] 	sta df_vntend
f215 : a5b0             [ 3] 	lda df_vvtstrt+1
f217 : 85ac             [ 3] 	sta df_vntstrt+1
f219 : 85ae             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f21b : a900             [ 2] 	lda #lo(scratch)
f21d : 85bc             [ 3] 	sta df_sevalptr
f21f : a909             [ 2] 	lda #hi(scratch)
f221 : 85bd             [ 3] 	sta df_sevalptr+1
                             
f223 : 60               [ 6] 	rts
                             
f224 :                       mod_sz_dflat_e
                             
                             	include "dflat\error.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page  195
---------------------------------- bank1.s -----------------------------------

                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f224 :                       df_tk_errortab
f224 : 4f6b00                	db	"Ok", 0
f227 : 53796e74617800        	db	"Syntax", 0
f22e : 5479706500            	db	"Type", 0
f233 : 52652d64696d00        	db	"Re-dim", 0
f23a : 4e6f2072657065..      	db	"No repeat", 0
f244 : 4e6f206465666e00      	db	"No defn", 0
f24c : 5061726d00            	db	"Parm", 0
f251 : 456e64656400          	db	"Ended", 0
AS65 Assembler for R6502 [1.42].                                     Page  196
---------------------------------- bank1.s -----------------------------------

f257 : 4e6f20656e6469..      	db	"No endif", 0
f260 : 4e6f20696600          	db	"No if", 0
f266 : 4e6f20666f7200        	db	"No for", 0
f26d : 4e6f7420666f75..      	db	"Not found", 0
f277 : 546f6f206c6f6e..      	db	"Too long", 0
f280 : 427265616b00          	db	"Break", 0
f286 : 4e6f206461746100      	db	"No data", 0
f28e : 4e6f207768696c..      	db	"No while", 0
f297 : 4e6f206c696e6500      	db	"No line", 0
f29f : 4e6f2072657475..      	db	"No return ", 0
f2aa : 41626f7274656400      	db	"Aborted", 0
f2b2 : 426f756e647300        	db	"Bounds", 0
f2b9 : 4e6f206f726700        	db	"No org", 0
f2c0 : 00                    	db	0
                             
f2c1 :                       df_tk_error_inline
f2c1 : 20696e206c696e..      	db	" in line ", 0
f2cb :                       df_tk_error_atpos
f2cb : 20706f732000          	db	" pos ", 0
f2d1 :                       df_tk_error_error
f2d1 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f2d8 :                       df_trap_error
                             	; set IO back to normal
f2d8 : 2042c5           [ 6] 	jsr io_set_default
f2db : 58               [ 2] 	cli
                             
f2dc : a924             [ 2] 	lda #lo(df_tk_errortab)
f2de : 85e3             [ 3] 	sta df_tmpptra
f2e0 : a9f2             [ 2] 	lda #hi(df_tk_errortab)
f2e2 : 85e4             [ 3] 	sta df_tmpptra+1
f2e4 : a69f             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f2e6 : f002             [ 3] 	beq df_trap_go_monitor
f2e8 : 1003             [ 3] 	bpl df_trap_normal
f2ea :                       df_trap_go_monitor
f2ea : 4c69f3           [ 3] 	jmp df_trap_monitor
f2ed :                       df_trap_normal
f2ed : a000             [ 2] 	ldy #0
f2ef :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f2ef : b1e3             [ 5] 	lda (df_tmpptra),y
f2f1 : f076             [ 4] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f2f3 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f2f9 : b1e3             [ 5] 	lda (df_tmpptra),y
f2fb : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f303 : ca               [ 2] 	dex
f304 : d0e9             [ 4] 	bne df_show_err_find
                             	; Error message found
AS65 Assembler for R6502 [1.42].                                     Page  197
---------------------------------- bank1.s -----------------------------------

f306 : a6e3             [ 3] 	ldx df_tmpptra
f308 : a5e4             [ 3] 	lda df_tmpptra+1
f30a : 20abc5           [ 6] 	jsr io_print_line
f30d : a2d1             [ 2] 	ldx #lo(df_tk_error_error)
f30f : a9f2             [ 2] 	lda #hi(df_tk_error_error)
f311 : 20abc5           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f314 : a001             [ 2] 	ldy #DFTK_LINNUM
f316 : b1c8             [ 5] 	lda (df_currlin),y
f318 : aa               [ 2] 	tax
f319 : c8               [ 2] 	iny
f31a : b1c8             [ 5] 	lda (df_currlin),y
f31c : d004             [ 3] 	bne df_show_err_linnum
f31e : e000             [ 2] 	cpx #0x00
f320 : f011             [ 3] 	beq df_show_err_fin
f322 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f32f : 18               [ 2] 	clc
f330 : 20d7ca           [ 6] 	jsr print_a_to_d
f333 :                       df_show_err_fin
f333 : a4be             [ 3] 	ldy df_linoff
f335 : f02b             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f344 : 98               [ 2] 	tya
f345 : aa               [ 2] 	tax
f346 : a900             [ 2] 	lda #0
f348 : 18               [ 2] 	clc
f349 : 20d7ca           [ 6] 	jsr print_a_to_d
f34c : 2020c8           [ 6] 	jsr utilPrintCRLF
f34f : a000             [ 2] 	ldy #0
                             	; Show the error line with error pos inverse
f351 :                       def_show_err_line
f351 : b9000a           [ 4] 	lda df_linbuff,y
f354 : f00c             [ 3] 	beq df_show_err_done
f356 : c4be             [ 3] 	cpy df_linoff
f358 : d002             [ 3] 	bne def_show_err_line_skip
f35a : 0980             [ 2] 	ora #0x80
f35c :                       def_show_err_line_skip
f35c : 2060c5           [ 6] 	jsr io_put_ch
f35f : c8               [ 2] 	iny
f360 : d0ef             [ 3] 	bne def_show_err_line	; Always
f362 :                       df_show_err_done
f362 : 2020c8           [ 6] 	jsr utilPrintCRLF
f365 : 18               [ 2] 	clc
                             	; back to editor
f366 : 4c85d7           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f369 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f370 : a5a5             [ 3] 	lda df_brkpc+1
f372 : 2028c8           [ 6] 	jsr utilPrintA
f375 : a5a4             [ 3] 	lda df_brkpc
f377 : 2028c8           [ 6] 	jsr utilPrintA
f37a : 2018c8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
AS65 Assembler for R6502 [1.42].                                     Page  198
---------------------------------- bank1.s -----------------------------------

                             	_println_low df_msg_acc
                             
f384 : a585             [ 3] 	lda num_a
f386 : 2028c8           [ 6] 	jsr utilPrintA
f389 : 2018c8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f393 : a586             [ 3] 	lda num_a+1
f395 : 2028c8           [ 6] 	jsr utilPrintA
f398 : 2018c8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f3a2 : a587             [ 3] 	lda num_a+2
f3a4 : 2028c8           [ 6] 	jsr utilPrintA
f3a7 : 2020c8           [ 6] 	jsr utilPrintCRLF
                             
f3aa : 2005e0           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f3ad : 4c85d7           [ 3] 	jmp df_pg_dflat
                             
f3b0 :                       df_msg_pc
f3b0 : 50433a00              	db "PC:\x0"
f3b4 :                       df_msg_acc
f3b4 : 413a00                	db "A:\x0"
f3b7 :                       df_msg_xreg
f3b7 : 583a00                	db "X:\x0"
f3ba :                       df_msg_yreg
f3ba : 593a00                	db "Y:\x0"
                             
                             	include	"dflat\asm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f3bd :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat\asm.i"
                             ;*	BBC-128 BREADBOARD COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             
AS65 Assembler for R6502 [1.42].                                     Page  199
---------------------------------- bank1.s -----------------------------------

                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat\tkasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page  200
---------------------------------- bank1.s -----------------------------------

                             	code  
                             
f3bd :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f3bd :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f3bd : 20f2f3           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f3c0 : b01d             [ 3] 	bcs df_tk_asm_label
f3c2 :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f3c2 : a997             [ 2] 	lda #DFRT_ASM
f3c4 : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f3c7 : a5c5             [ 3] 	lda df_symoff
f3c9 : 0980             [ 2] 	ora #0x80
f3cb : 20d7cd           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f3ce : a001             [ 2] 	ldy #1
f3d0 : b1c3             [ 5] 	lda (df_symtab),y
                             	; Directive?
f3d2 : c910             [ 2] 	cmp #AM_DIR
f3d4 : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f3d6 : a5c5             [ 3] 	lda df_symoff
f3d8 : 4c49f4           [ 3] 	jmp df_tk_asm_exec_parser
f3db :                       df_tk_asm_parse_command_err
f3db : 60               [ 6] 	rts
f3dc :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f3dc : 4c4ef4           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f3df :                       df_tk_asm_label
                             	; labels must start with '.'
f3df : a92e             [ 2] 	lda #'.'
f3e1 : 204ace           [ 6] 	jsr df_tk_expect
f3e4 : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f3e6 : a997             [ 2] 	lda #DFRT_ASM
f3e8 : 20d7cd           [ 6] 	jsr df_tk_put_tok
f3eb : e6be             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f3ed : a900             [ 2] 	lda #0
f3ef : 4c0ecf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f3f2 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f3f2 : a9dc             [ 2] 	lda #lo(df_asm_tokensyms)
AS65 Assembler for R6502 [1.42].                                     Page  201
---------------------------------- bank1.s -----------------------------------

f3f4 : 85c3             [ 3] 	sta df_symtab
f3f6 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f3f8 : 85c4             [ 3] 	sta df_symtab+1
f3fa : a900             [ 2] 	lda #0
f3fc : 85c5             [ 3] 	sta df_symoff
f3fe : a200             [ 2] 	ldx #0
f400 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f400 : a4be             [ 3] 	ldy df_linoff
f402 :                       df_tk_asm_checktokch
                             	; Get symtable char
f402 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f404 : c920             [ 2] 	cmp #' '
f406 : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f408 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f40b : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f413 : c8               [ 2] 	iny
f414 : 4c02f4           [ 3] 	jmp df_tk_asm_checktokch
f417 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f417 : e6c5             [ 5] 	inc df_symoff
f419 :                       df_tk_asm_symnextentry
f419 : a1c3             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f41b : c920             [ 2] 	cmp #' '
f41d : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f425 : 4c19f4           [ 3] 	jmp df_tk_asm_symnextentry
f428 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f428 : 38               [ 2] 	sec
f429 : 65c3             [ 3] 	adc df_symtab
f42b : 85c3             [ 3] 	sta df_symtab
f42d : a5c4             [ 3] 	lda df_symtab+1
f42f : 6900             [ 2] 	adc #0
f431 : 85c4             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f433 : a1c3             [ 6] 	lda (df_symtab,x)
f435 : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f437 : 85c5             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f439 : 38               [ 2] 	sec
f43a : 60               [ 6] 	rts
f43b :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
AS65 Assembler for R6502 [1.42].                                     Page  202
---------------------------------- bank1.s -----------------------------------

                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f43b : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f43e : 201cce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f441 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f443 : 84be             [ 3] 	sty df_linoff
f445 : a5c5             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f447 :                       df_tk_asm_addr_mode_ok
f447 : 18               [ 2] 	clc
f448 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f449 :                       df_tk_asm_exec_parser
f449 : 0a               [ 2] 	asl a
f44a : aa               [ 2] 	tax
f44b : 7c4dfb           [ 6] 	jmp (df_tk_asm_tokenjmp,x)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f44e :                       df_tk_asm_addr_mode
f44e : 2028ce           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f451 : c900             [ 2] 	cmp #0					;End of line?
f453 : f0f2             [ 3] 	beq df_tk_asm_addr_mode_ok
f455 : c93a             [ 2] 	cmp #':'				;End of statement?
f457 : f0ee             [ 3] 	beq df_tk_asm_addr_mode_ok
f459 : a923             [ 2] 	lda #'#'				; Check for immediate
f45b : 2058ce           [ 6] 	jsr df_tk_expect_tok
f45e : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f460 : 4c85f4           [ 3] 	jmp df_tk_imm		; Process immediate
f463 :                       df_tk_asm_addr_mode_1
f463 : a928             [ 2] 	lda #'('				; One of indirect modes?
f465 : 2058ce           [ 6] 	jsr df_tk_expect_tok
f468 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f46a : 4c8af4           [ 3] 	jmp df_tk_indirect
f46d :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f46d : 2055d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f470 : a92c             [ 2] 	lda #','
f472 : 2058ce           [ 6] 	jsr df_tk_expect_tok
f475 : b0d0             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f477 : a978             [ 2] 	lda #'x'
f479 : 2058ce           [ 6] 	jsr df_tk_expect_tok
AS65 Assembler for R6502 [1.42].                                     Page  203
---------------------------------- bank1.s -----------------------------------

f47c : 90c9             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f47e : a979             [ 2] 	lda #'y'
f480 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
f483 : 18               [ 2] 	clc
f484 : 60               [ 6] 	rts
                             	
                             	
                             ;* Toeknise immediate addressing mode	
f485 :                       df_tk_imm
                             	; Just one expression expected
f485 : 2055d0           [ 6] 	jsr df_tk_expression
f488 : 18               [ 2] 	clc
f489 : 60               [ 6] 	rts
                             	
                             ;* Tokenise indirect
f48a :                       df_tk_indirect
                             	; Just one expression expected
f48a : 2055d0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f48d : a92c             [ 2] 	lda #','
f48f : 2058ce           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f492 : b00c             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f494 : a978             [ 2] 	lda #'x'
f496 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
f499 : a929             [ 2] 	lda #')'
f49b : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
f49e : 18               [ 2] 	clc
f49f : 60               [ 6] 	rts
                             	
f4a0 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f4a0 : a929             [ 2] 	lda #')'
f4a2 : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f4a5 : a92c             [ 2] 	lda #','
f4a7 : 2058ce           [ 6] 	jsr df_tk_expect_tok
f4aa : b007             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f4ac : a979             [ 2] 	lda #'y'
f4ae : 2063ce           [ 6] 	jsr df_tk_expect_tok_err
f4b1 : 18               [ 2] 	clc
f4b2 : 60               [ 6] 	rts
                             
f4b3 :                       df_tk_indirect_done
f4b3 : 18               [ 2] 	clc
f4b4 : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
AS65 Assembler for R6502 [1.42].                                     Page  204
---------------------------------- bank1.s -----------------------------------

                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f4b5 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat\rtasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f4b5 :                       mod_sz_rtasm_s
                             
f4b5 :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f4b5 : a4ca             [ 3] 	ldy df_exeoff
f4b7 : b1c8             [ 5] 	lda (df_currlin),y
f4b9 : 1009             [ 3] 	bpl df_rt_asm_do_label
f4bb : 20c8f4           [ 6] 	jsr df_rt_asm_command
f4be : 20c0f6           [ 6] 	jsr df_rt_asm_printCR
f4c1 : 4cc7f4           [ 3] 	jmp df_rt_asm_assemble_done
f4c4 :                       df_rt_asm_do_label
f4c4 : 20ecf4           [ 6] 	jsr df_rt_asm_label
f4c7 :                       df_rt_asm_assemble_done
AS65 Assembler for R6502 [1.42].                                     Page  205
---------------------------------- bank1.s -----------------------------------

                             	; any clean up here
f4c7 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f4c8 :                       df_rt_asm_command
f4c8 : 297f             [ 2] 	and #0x7f
f4ca : 48               [ 3] 	pha
f4cb : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f4cc : 208ef7           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f4cf : a001             [ 2] 	ldy #1
f4d1 : b1c3             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f4d3 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f4d5 : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f4d7 : 4cb4f5           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f4da :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f4da : 68               [ 4] 	pla
f4db : 0a               [ 2] 	asl a
f4dc : aa               [ 2] 	tax
                             	; jump over directive code
f4dd : e6ca             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f4df : bd57fb           [ 4] 	lda df_rt_asm_tokenjmp,x
f4e2 : 85e3             [ 3] 	sta df_tmpptra
f4e4 : bd58fb           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f4e7 : 85e4             [ 3] 	sta df_tmpptra+1
f4e9 : 6ce300           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f4ec :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f4ec : 2066e5           [ 6] 	jsr df_rt_generate_lvar
f4ef : 86e0             [ 3] 	stx df_asmoprnd
f4f1 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f4f3 : a000             [ 2] 	ldy #0
f4f5 : a5db             [ 3] 	lda df_asmpc
f4f7 : 91e0             [ 5] 	sta (df_asmoprnd),y
f4f9 : a5dc             [ 3] 	lda df_asmpc+1
f4fb : c8               [ 2] 	iny
f4fc : 91e0             [ 5] 	sta (df_asmoprnd),y
f4fe : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f4ff :                       df_rt_asm_org
                             	; Get the address from expression
f4ff : 206bf7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f502 : a5e0             [ 3] 	lda df_asmoprnd
f504 : 85db             [ 3] 	sta df_asmpc
f506 : a5e1             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  206
---------------------------------- bank1.s -----------------------------------

f508 : 85dc             [ 3] 	sta df_asmpc+1
f50a : a903             [ 2] 	lda #3
f50c : 85e2             [ 3] 	sta df_asmlen
f50e : 4c82f6           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f511 :                       df_rt_asm_opt
                             	; Get the value from expression
f511 : 206bf7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f514 : a5e0             [ 3] 	lda df_asmoprnd
f516 : 85dd             [ 3] 	sta df_asmopt
f518 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
f519 :                       df_rt_asm_db
f519 : a902             [ 2] 	lda #2
f51b : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f51c :                       df_rt_asm_dw
f51c : a903             [ 2] 	lda #3
f51e :                       df_rt_asm_db_start
f51e : 85e2             [ 3] 	sta df_asmlen
f520 : 2082f6           [ 6] 	jsr df_rt_asm_printPC
f523 : 209df6           [ 6] 	jsr df_rt_asm_printSPC
f526 :                       df_rt_asm_data
f526 : 20a8d8           [ 6] 	jsr df_rt_neval		; Evaluate expression
                             	_df_ost_peekType	; What is the type
                             
f52e : 2904             [ 2] 	and #DFST_STR
f530 : d00d             [ 3] 	bne df_rt_asm_string; If string
f532 : 20acf1           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f535 : 86e0             [ 3] 	stx df_asmoprnd		; store low value
f537 : 85e1             [ 3] 	sta df_asmoprnd+1	; store high value
f539 : 2067f5           [ 6] 	jsr df_rt_asm_data_write
f53c : 4c5cf5           [ 3] 	jmp df_rt_asm_data_next
f53f :                       df_rt_asm_string
f53f : 20a8f1           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f542 : 86e3             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f544 : 85e4             [ 3] 	sta df_tmpptra+1
f546 :                       df_rt_asm_string_ch
f546 : a000             [ 2] 	ldy #0
f548 : b1e3             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f54a : f010             [ 3] 	beq df_rt_asm_data_next
f54c : 85e0             [ 3] 	sta df_asmoprnd		; Save as operand
f54e : 84e1             [ 3] 	sty df_asmoprnd+1	; High is always zero
f550 : 2067f5           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
f559 : 4c46f5           [ 3] 	jmp df_rt_asm_string_ch
f55c :                       df_rt_asm_data_next
f55c : 2098e5           [ 6] 	jsr df_rt_eos		; End?
f55f : b005             [ 3] 	bcs df_rt_asm_data_done
AS65 Assembler for R6502 [1.42].                                     Page  207
---------------------------------- bank1.s -----------------------------------

f561 : e6ca             [ 5] 	inc df_exeoff		; Jump over ','
f563 : 4c26f5           [ 3] 	jmp df_rt_asm_data
f566 :                       df_rt_asm_data_done
f566 : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
f567 :                       df_rt_asm_data_write
f567 : 20a6f6           [ 6] 	jsr df_rt_asm_printOPR
f56a :                       df_rt_asm_data_write_skip1
f56a : a902             [ 2] 	lda #2
f56c : 25dd             [ 3] 	and df_asmopt
f56e : f017             [ 3] 	beq df_rt_asm_data_write_skip2
f570 : a5e0             [ 3] 	lda df_asmoprnd
f572 : a000             [ 2] 	ldy #0
f574 : 91db             [ 5] 	sta (df_asmpc),y
f576 : c8               [ 2] 	iny
f577 : a902             [ 2] 	lda #2
f579 : c5e2             [ 3] 	cmp df_asmlen
f57b : d006             [ 3] 	bne df_rt_asm_data_write_hi
f57d : a5e1             [ 3] 	lda df_asmoprnd+1
f57f : d014             [ 3] 	bne df_rt_asm_data_write_err
f581 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
f583 :                       df_rt_asm_data_write_hi
f583 : a5e1             [ 3] 	lda df_asmoprnd+1
f585 : 91db             [ 5] 	sta (df_asmpc),y
f587 :                       df_rt_asm_data_write_skip2
f587 : a4e2             [ 3] 	ldy df_asmlen
f589 : 88               [ 2] 	dey					; Add 1 less!
f58a : 98               [ 2] 	tya
f58b : 18               [ 2] 	clc
f58c : 65db             [ 3] 	adc df_asmpc
f58e : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f592 : e6dc             [ 5] 	inc df_asmpc+1
f594 : 60               [ 6] 	rts
f595 :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
f597 :                       df_rt_asm_ds
f597 : 2082f6           [ 6] 	jsr df_rt_asm_printPC
f59a : 209df6           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
f59d : 206bf7           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
f5a0 : 18               [ 2] 	clc
f5a1 : a5e0             [ 3] 	lda df_asmoprnd
f5a3 : 65db             [ 3] 	adc df_asmpc
f5a5 : 85db             [ 3] 	sta df_asmpc
f5a7 : a5e1             [ 3] 	lda df_asmoprnd+1
f5a9 : 65dc             [ 3] 	adc df_asmpc+1
f5ab : 85dc             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
f5ad : a903             [ 2] 	lda #3
f5af : 85e2             [ 3] 	sta df_asmlen
f5b1 : 4ca6f6           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  208
---------------------------------- bank1.s -----------------------------------

                             ; Process a normal assembler mnemonic
f5b4 :                       df_rt_asm_mnem
f5b4 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
f5b5 : e6ca             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
f5b7 : 20eef6           [ 6] 	jsr df_rt_asm_addrmode
                             
f5ba :                       df_rt_asm_mnem_try
f5ba : a5de             [ 3] 	lda df_asmadmd					; With the addressing mode
f5bc : 2076f7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
f5bf : c900             [ 2] 	cmp #AM_NONE					; Exists?
f5c1 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
f5c3 :                       df_rt_asm_check_alt
f5c3 : a6de             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
f5c5 : bdcbf7           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
f5c8 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
f5ca : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
f5cc : 2076f7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
f5cf : c900             [ 2] 	cmp #AM_NONE					; this instruction
f5d1 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
f5d3 : c5de             [ 3] 	cmp df_asmadmd					; Same as the original?
f5d5 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
f5d7 :                       df_rt_asm_mnem_chk
f5d7 : 85de             [ 3] 	sta df_asmadmd					; This is the final mode
f5d9 : aa               [ 2] 	tax								; Get the length
f5da : bdbaf7           [ 4] 	lda df_asm_length,x
f5dd : a6e1             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
f5df : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
f5e1 : c903             [ 2] 	cmp #3							; Else must be len 3?
f5e3 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
f5e5 :                       df_rt_asm_mnem_done
f5e5 : a6de             [ 3] 	ldx df_asmadmd					; Get the final mode index
f5e7 : bdbaf7           [ 4] 	lda df_asm_length,x				; Get the length
f5ea : 85e2             [ 3] 	sta df_asmlen
f5ec : a5de             [ 3] 	lda df_asmadmd					; Get the final mode
f5ee : 2076f7           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
f5f1 : c8               [ 2] 	iny
f5f2 : b1c3             [ 5] 	lda (df_symtab),y
f5f4 : 85df             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
f5f6 : 4cfbf5           [ 3] 	jmp df_rt_asm_encode
                             	
f5f9 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
f5fb :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
f5fb : a5de             [ 3] 	lda df_asmadmd
f5fd : c90f             [ 2] 	cmp #AM_REL
f5ff : d033             [ 4] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
f601 : a5e1             [ 3] 	lda df_asmoprnd+1
f603 : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
AS65 Assembler for R6502 [1.42].                                     Page  209
---------------------------------- bank1.s -----------------------------------

                             	; else calculate distance from PC
                             	; first take 2 off operand
f605 : 38               [ 2] 	sec
f606 : a5e0             [ 3] 	lda df_asmoprnd
f608 : e902             [ 2] 	sbc #2
f60a : 85e0             [ 3] 	sta df_asmoprnd
f60c : a5e1             [ 3] 	lda df_asmoprnd+1
f60e : e900             [ 2] 	sbc #0
f610 : 85e1             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
f612 : 38               [ 2] 	sec
f613 : a5e0             [ 3] 	lda df_asmoprnd
f615 : e5db             [ 3] 	sbc df_asmpc
f617 : 85e0             [ 3] 	sta df_asmoprnd
f619 : a5e1             [ 3] 	lda df_asmoprnd+1
f61b : e5dc             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
f61d : a000             [ 2] 	ldy #0
f61f : 84e1             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
f621 : a8               [ 2] 	tay
f622 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
f624 : c9ff             [ 2] 	cmp #0xff
f626 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
f628 : a5e0             [ 3] 	lda df_asmoprnd
f62a : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
f62c : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
f62e :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
f62e : a5e0             [ 3] 	lda df_asmoprnd
f630 : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
f632 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
f632 : c6e1             [ 5] 	dec df_asmoprnd+1
f634 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
f634 : a902             [ 2] 	lda #0x02
f636 : 25dd             [ 3] 	and df_asmopt
f638 : f028             [ 3] 	beq df_rt_asm_encode_print
f63a : a000             [ 2] 	ldy #0
f63c : a5df             [ 3] 	lda df_asmopcde
f63e : 91db             [ 5] 	sta (df_asmpc),y
f640 : a5e2             [ 3] 	lda df_asmlen
f642 : c901             [ 2] 	cmp #1						; No operand
f644 : f01c             [ 3] 	beq df_rt_asm_encode_print
f646 : c903             [ 2] 	cmp #3						; Word operand
f648 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
f64a : a5e1             [ 3] 	lda df_asmoprnd+1
f64c : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
f650 :                       df_rt_asm_encode_writebyte
f650 : c8               [ 2] 	iny 
f651 : a5e0             [ 3] 	lda df_asmoprnd
f653 : 91db             [ 5] 	sta (df_asmpc),y
AS65 Assembler for R6502 [1.42].                                     Page  210
---------------------------------- bank1.s -----------------------------------

f655 : 4c62f6           [ 3] 	jmp df_rt_asm_encode_print
f658 :                       df_rt_asm_encode_writeword
f658 : c8               [ 2] 	iny 
f659 : a5e0             [ 3] 	lda df_asmoprnd
f65b : 91db             [ 5] 	sta (df_asmpc),y
f65d : c8               [ 2] 	iny 
f65e : a5e1             [ 3] 	lda df_asmoprnd+1
f660 : 91db             [ 5] 	sta (df_asmpc),y	
f662 :                       df_rt_asm_encode_print
f662 : 2072f6           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
f665 : 18               [ 2] 	clc
f666 : a5db             [ 3] 	lda df_asmpc
f668 : 65e2             [ 3] 	adc df_asmlen
f66a : 85db             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f66e : e6dc             [ 5] 	inc df_asmpc+1
f670 : 18               [ 2] 	clc
f671 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
f672 :                       df_rt_asm_print_mmen
f672 : 2082f6           [ 6] 	jsr df_rt_asm_printPC
f675 : 209df6           [ 6] 	jsr df_rt_asm_printSPC
f678 : 2092f6           [ 6] 	jsr df_rt_asm_printOPC
f67b : 209df6           [ 6] 	jsr df_rt_asm_printSPC
f67e : 20a6f6           [ 6] 	jsr df_rt_asm_printOPR
f681 :                       df_rt_asm_print_rts			; Hopefully subs can get he
f681 : 60               [ 6] 	rts
                             
f682 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
f682 : a901             [ 2] 	lda #0x01
f684 : 25dd             [ 3] 	and df_asmopt
f686 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
f688 : a5dc             [ 3] 	lda df_asmpc+1
f68a : 2028c8           [ 6] 	jsr utilPrintA
f68d : a5db             [ 3] 	lda df_asmpc
f68f : 4c28c8           [ 3] 	jmp utilPrintA
                             
f692 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
f692 : a901             [ 2] 	lda #0x01
f694 : 25dd             [ 3] 	and df_asmopt
f696 : f0e9             [ 3] 	beq df_rt_asm_print_rts
f698 : a5df             [ 3] 	lda df_asmopcde
f69a : 4c28c8           [ 3] 	jmp utilPrintA
                             
f69d :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
f69d : a901             [ 2] 	lda #0x01
f69f : 25dd             [ 3] 	and df_asmopt
f6a1 : f0de             [ 3] 	beq df_rt_asm_print_rts
f6a3 : 4c18c8           [ 3] 	jmp utilPrintSPC
                             	
f6a6 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
f6a6 : a901             [ 2] 	lda #0x01
AS65 Assembler for R6502 [1.42].                                     Page  211
---------------------------------- bank1.s -----------------------------------

f6a8 : 25dd             [ 3] 	and df_asmopt
f6aa : f0d5             [ 3] 	beq df_rt_asm_print_rts	
f6ac : a5e2             [ 3] 	lda df_asmlen				; check how may operand bytes
f6ae : c901             [ 2] 	cmp #1						; if only opcode, done
f6b0 : f0cf             [ 3] 	beq df_rt_asm_print_rts	
f6b2 : c902             [ 2] 	cmp #2
f6b4 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
f6b6 : a5e1             [ 3] 	lda df_asmoprnd+1
f6b8 : 2028c8           [ 6] 	jsr utilPrintA
f6bb :                       df_rt_asm_printOPR_1
f6bb : a5e0             [ 3] 	lda df_asmoprnd
f6bd : 4c28c8           [ 3] 	jmp utilPrintA
                             
f6c0 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
f6c0 : a901             [ 2] 	lda #0x01
f6c2 : 25dd             [ 3] 	and df_asmopt
f6c4 : f0bb             [ 3] 	beq df_rt_asm_print_rts
f6c6 : 4c20c8           [ 3] 	jmp utilPrintCRLF
                             
f6c9 :                       df_rt_asm_printCH
f6c9 : 8545             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
f6cb : a901             [ 2] 	lda #0x01
f6cd : 25dd             [ 3] 	and df_asmopt
f6cf : f0b0             [ 3] 	beq df_rt_asm_print_rts
f6d1 : a545             [ 3] 	lda tmp_d
f6d3 : 4c60c5           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
f6d6 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
f6d6 : a901             [ 2] 	lda #0x01
f6d8 : 25dd             [ 3] 	and df_asmopt
f6da : f0a5             [ 3] 	beq df_rt_asm_print_rts
f6dc : a5ca             [ 3] 	lda df_exeoff
f6de : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
f6e7 : 2006e7           [ 6] 	jsr df_rt_list_line_only
f6ea : 68               [ 4] 	pla
f6eb : 85ca             [ 3] 	sta df_exeoff
f6ed : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
f6ee :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
f6ee : a900             [ 2] 	lda #AM_NONE
f6f0 : 85de             [ 3] 	sta df_asmadmd
                             	; zero out the operand
f6f2 : a900             [ 2] 	lda #0
f6f4 : 85e0             [ 3] 	sta df_asmoprnd
f6f6 : 85e1             [ 3] 	sta df_asmoprnd+1
f6f8 : 2098e5           [ 6] 	jsr df_rt_eos			; End of statement?
f6fb : b00d             [ 4] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
f6fd : 20e4dc           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
AS65 Assembler for R6502 [1.42].                                     Page  212
---------------------------------- bank1.s -----------------------------------

f700 : c923             [ 2] 	cmp #'#'				; Immediate?
f702 : f034             [ 3] 	beq df_rt_asm_AM_IMM
f704 : c928             [ 2] 	cmp #'('				; Indirect something?
f706 : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
f708 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
f70a :                       df_rt_asm_AM_IMP
f70a : a90d             [ 2] 	lda #AM_IMP
f70c : 85de             [ 3] 	sta df_asmadmd
f70e : 60               [ 6] 	rts
                             ; Process ABS or REL
f70f :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
f70f : 206bf7           [ 6] 	jsr df_rt_asm_get_operand
                             
f712 : 2098e5           [ 6] 	jsr df_rt_eos			; End of statement?
f715 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
f717 : c8               [ 2] 	iny						; Jump over ","
f718 : b1c8             [ 5] 	lda (df_currlin),y		; Load X or Y
f71a : c8               [ 2] 	iny						; Jump over index reg
f71b : 85ca             [ 3] 	sta df_exeoff			; Save exe offset
f71d : c978             [ 2] 	cmp #'x'				; Indirect X?
f71f : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
f721 :                       df_rt_asm_AM_ABSY
f721 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
f723 : 85de             [ 3] 	sta df_asmadmd
f725 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
f726 :                       df_rt_asm_AM_ABS
f726 : a001             [ 2] 	ldy #1					; Check first addressing mode
f728 : b1c3             [ 5] 	lda (df_symtab),y
f72a : c90f             [ 2] 	cmp #AM_REL
f72c : f002             [ 3] 	beq df_rt_asm_AM_REL
f72e : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
f730 :                       df_rt_asm_AM_REL
f730 : 85de             [ 3] 	sta df_asmadmd
f732 : 60               [ 6] 	rts
                             ; Process ABSX
f733 :                       df_rt_asm_AM_ABSX
f733 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
f735 : 85de             [ 3] 	sta df_asmadmd
f737 : 60               [ 6] 	rts
                             ; Process Immediate
f738 :                       df_rt_asm_AM_IMM
                             	; skip over #
f738 : e6ca             [ 5] 	inc df_exeoff
                             	; Get operand
f73a : 206bf7           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
f73d : a90c             [ 2] 	lda #AM_IMM
f73f : 85de             [ 3] 	sta df_asmadmd
f741 : 60               [ 6] 	rts
                             ; Process indirect
f742 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
f742 : e6ca             [ 5] 	inc df_exeoff
                             	; Calculate the operand
f744 : 206bf7           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
f747 : a4ca             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  213
---------------------------------- bank1.s -----------------------------------

f749 : b1c8             [ 5] 	lda (df_currlin),y
f74b : c929             [ 2] 	cmp #')'			; Could be IND or INDY
f74d : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
f74f : c8               [ 2] 	iny
f750 : c8               [ 2] 	iny
f751 : 84ca             [ 3] 	sty df_exeoff
f753 : a908             [ 2] 	lda #AM_ZPINDX
f755 : 85de             [ 3] 	sta df_asmadmd
f757 : 60               [ 6] 	rts
                             ; Pure indirect mode found
f758 :                       df_rt_asm_AM_ZPINDORY
f758 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
f75a : c8               [ 2] 	iny
f75b : 84ca             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
f75d : 2098e5           [ 6] 	jsr df_rt_eos			; End of statement?
f760 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
f762 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
f764 : c8               [ 2] 	iny
f765 : c8               [ 2] 	iny
f766 : 84ca             [ 3] 	sty df_exeoff
f768 :                       df_rt_asm_AM_ZPIND
f768 : 85de             [ 3] 	sta df_asmadmd
f76a : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
f76b :                       df_rt_asm_get_operand
                             	; evaluate
f76b : 20a8d8           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
f76e : 20acf1           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
f771 : 86e0             [ 3] 	stx df_asmoprnd
f773 : 85e1             [ 3] 	sta df_asmoprnd+1
f775 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
f776 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
f776 : 8545             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
f778 : a0ff             [ 2] 	ldy #0xff
f77a : a200             [ 2] 	ldx #0
f77c :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
f77c : c8               [ 2] 	iny
f77d : c8               [ 2] 	iny
                             	; if current index > num entries then error
f77e : 98               [ 2] 	tya
f77f : 38               [ 2] 	sec
f780 : e1c3             [ 6] 	sbc (df_symtab,x)
f782 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
f784 : b1c3             [ 5] 	lda (df_symtab),y
f786 : c545             [ 3] 	cmp tmp_d
f788 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
AS65 Assembler for R6502 [1.42].                                     Page  214
---------------------------------- bank1.s -----------------------------------

                             	; done A=mode, y=index in to df_symtab
f78a : 60               [ 6] 	rts
f78b :                       df_rt_asm_find_addr_mode_err
f78b : a900             [ 2] 	lda #AM_NONE
f78d :                       df_rt_asm_skip_to_sym_done; Used by function belo
f78d : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
f78e :                       df_rt_asm_skip_to_sym
f78e : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
f78f : a9dc             [ 2] 	lda #lo(df_asm_tokensyms)
f791 : 85c3             [ 3] 	sta df_symtab
f793 : a9f7             [ 2] 	lda #hi(df_asm_tokensyms)
f795 : 85c4             [ 3] 	sta df_symtab+1
f797 : a900             [ 2] 	lda #0
f799 : 85c5             [ 3] 	sta df_symoff
f79b : a8               [ 2] 	tay
f79c :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
f79c : b1c3             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
f79e : c920             [ 2] 	cmp #' '
f7a0 : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
f7a8 : 4c9cf7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
f7ab :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
f7ab : ca               [ 2] 	dex
f7ac : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
f7ae : 38               [ 2] 	sec
f7af : 65c3             [ 3] 	adc df_symtab
f7b1 : 85c3             [ 3] 	sta df_symtab
                             	_bcc 2
                             
f7b5 : e6c4             [ 5] 	inc df_symtab+1
f7b7 : 4c9cf7           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
f7ba :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat\asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*
                             ;************************************************
                             
                             	; ROM code
AS65 Assembler for R6502 [1.42].                                     Page  215
---------------------------------- bank1.s -----------------------------------

                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
f7ba :                       df_asm_length
f7ba : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
f7cb :                       df_asm_altaddrmode
f7cb : 00                    	db AM_NONE		;AM_NONE	= 0
f7cc : 00                    	db AM_NONE		;AM_ABS	 	= 1
f7cd : 00                    	db AM_NONE		;AM_ABSX	= 2
f7ce : 00                    	db AM_NONE		;AM_ABSY	= 3
f7cf : 01                    	db AM_ABS		;AM_ZP		= 4
f7d0 : 02                    	db AM_ABSX		;AM_ZPX		= 5
f7d1 : 03                    	db AM_ABSY		;AM_ZPY		= 6
f7d2 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
f7d3 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
f7d4 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
f7d5 : 00                    	db AM_NONE		;AM_ABSIND	= 10
f7d6 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
f7d7 : 00                    	db AM_NONE		;AM_IMM		= 12
f7d8 : 00                    	db AM_NONE		;AM_ACC		= 13
f7d9 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
f7da : 0f                    	db AM_REL		;AM_REL		= 15
f7db : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
f7dc :                       df_asm_tokensyms
                             	;* Start with directives
f7dc : 2e6f726702            	db	".org",		1*2
f7e1 : 1000                  	db	AM_DIR,		0x00
f7e3 : 2e6f707402            	db	".opt",		1*2
f7e8 : 1000                  	db	AM_DIR,		0x00
f7ea : 2e646202              	db	".db",		1*2
f7ee : 1000                  	db	AM_DIR,		0x00
f7f0 : 2e647702              	db	".dw",		1*2
f7f4 : 1000                  	db	AM_DIR,		0x00
f7f6 : 2e647302              	db	".ds",		1*2
f7fa : 1000                  	db	AM_DIR,		0x00	
                             
f7fc : 61646312              	db	"adc",		9*2
f800 : 0c69                  	db	AM_IMM,		0x69
f802 : 0465                  	db	AM_ZP,		0x65
f804 : 0575                  	db	AM_ZPX,		0x75
f806 : 016d                  	db	AM_ABS,		0x6d
f808 : 027d                  	db	AM_ABSX,	0x7d
f80a : 0379                  	db	AM_ABSY,	0x79
f80c : 0861                  	db	AM_ZPINDX,	0x61
f80e : 0971                  	db	AM_ZPINDY,	0x71
f810 : 0772                  	db	AM_ZPIND,	0x72
                             	
f812 : 616e6412              	db	"and",		9*2
f816 : 0c29                  	db	AM_IMM,		0x29
f818 : 0425                  	db	AM_ZP,		0x25
f81a : 0535                  	db	AM_ZPX,		0x35
f81c : 012d                  	db	AM_ABS,		0x2d
f81e : 023d                  	db	AM_ABSX,	0x3d
f820 : 0339                  	db	AM_ABSY,	0x39
AS65 Assembler for R6502 [1.42].                                     Page  216
---------------------------------- bank1.s -----------------------------------

f822 : 0821                  	db	AM_ZPINDX,	0x21
f824 : 0931                  	db	AM_ZPINDY,	0x31
f826 : 0732                  	db	AM_ZPIND,	0x32
                             
f828 : 636d7012              	db	"cmp",		9*2
f82c : 0cc9                  	db	AM_IMM,		0xc9
f82e : 04c5                  	db	AM_ZP,		0xc5
f830 : 05d5                  	db	AM_ZPX,		0xd5
f832 : 01cd                  	db	AM_ABS,		0xcd
f834 : 02dd                  	db	AM_ABSX,	0xdd
f836 : 03d9                  	db	AM_ABSY,	0xd9
f838 : 08c1                  	db	AM_ZPINDX,	0xc1
f83a : 09d1                  	db	AM_ZPINDY,	0xd1
f83c : 07d2                  	db	AM_ZPIND,	0xd2
                             
f83e : 656f7212              	db	"eor",		9*2
f842 : 0c49                  	db	AM_IMM,		0x49
f844 : 0445                  	db	AM_ZP,		0x45
f846 : 0555                  	db	AM_ZPX,		0x55
f848 : 014d                  	db	AM_ABS,		0x4d
f84a : 025d                  	db	AM_ABSX,	0x5d
f84c : 0359                  	db	AM_ABSY,	0x59
f84e : 0841                  	db	AM_ZPINDX,	0x41
f850 : 0951                  	db	AM_ZPINDY,	0x51
f852 : 0752                  	db	AM_ZPIND,	0x52
                             
f854 : 6c646112              	db	"lda",		9*2
f858 : 0ca9                  	db	AM_IMM,		0xa9
f85a : 04a5                  	db	AM_ZP,		0xa5
f85c : 05b5                  	db	AM_ZPX,		0xb5
f85e : 01ad                  	db	AM_ABS,		0xad
f860 : 02bd                  	db	AM_ABSX,	0xbd
f862 : 03b9                  	db	AM_ABSY,	0xb9
f864 : 08a1                  	db	AM_ZPINDX,	0xa1
f866 : 09b1                  	db	AM_ZPINDY,	0xb1
f868 : 07b2                  	db	AM_ZPIND,	0xb2
                             
f86a : 6f726112              	db	"ora",		9*2
f86e : 0c09                  	db	AM_IMM,		0x09
f870 : 0405                  	db	AM_ZP,		0x05
f872 : 0515                  	db	AM_ZPX,		0x15
f874 : 010d                  	db	AM_ABS,		0x0d
f876 : 021d                  	db	AM_ABSX,	0x1d
f878 : 0319                  	db	AM_ABSY,	0x19
f87a : 0801                  	db	AM_ZPINDX,	0x01
f87c : 0911                  	db	AM_ZPINDY,	0x11
f87e : 0712                  	db	AM_ZPIND,	0x12
                             
f880 : 73626312              	db	"sbc",		9*2
f884 : 0ce9                  	db	AM_IMM,		0xe9
f886 : 04e5                  	db	AM_ZP,		0xe5
f888 : 05f5                  	db	AM_ZPX,		0xf5
f88a : 01ed                  	db	AM_ABS,		0xed
f88c : 02fd                  	db	AM_ABSX,	0xfd
f88e : 03f9                  	db	AM_ABSY,	0xf9
f890 : 08e1                  	db	AM_ZPINDX,	0xe1
f892 : 09f1                  	db	AM_ZPINDY,	0xf1
f894 : 07f2                  	db	AM_ZPIND,	0xf2
                             
f896 : 73746110              	db	"sta",		8*2
f89a : 0485                  	db	AM_ZP,		0x85
f89c : 0595                  	db	AM_ZPX,		0x95
AS65 Assembler for R6502 [1.42].                                     Page  217
---------------------------------- bank1.s -----------------------------------

f89e : 018d                  	db	AM_ABS,		0x8d
f8a0 : 029d                  	db	AM_ABSX,	0x9d
f8a2 : 0399                  	db	AM_ABSY,	0x99
f8a4 : 0881                  	db	AM_ZPINDX,	0x81
f8a6 : 0991                  	db	AM_ZPINDY,	0x91
f8a8 : 0792                  	db	AM_ZPIND,	0x92
                             
f8aa : 61736c0a              	db	"asl",		5*2
f8ae : 0d0a                  	db	AM_IMP,		0x0a
f8b0 : 0406                  	db	AM_ZP,		0x06
f8b2 : 0516                  	db	AM_ZPX,		0x16
f8b4 : 010e                  	db	AM_ABS,		0x0e
f8b6 : 021e                  	db	AM_ABSX,	0x1e
f8b8 : 6465630a              	db	"dec",		5*2
f8bc : 0d3a                  	db	AM_IMP,		0x3a
f8be : 04c6                  	db	AM_ZP,		0xc6
f8c0 : 05d6                  	db	AM_ZPX,		0xd6
f8c2 : 01ce                  	db	AM_ABS,		0xce
f8c4 : 02de                  	db	AM_ABSX,	0xde
f8c6 : 696e630a              	db	"inc",		5*2
f8ca : 0d1a                  	db	AM_IMP,		0x1a
f8cc : 04e6                  	db	AM_ZP,		0xe6
f8ce : 05f6                  	db	AM_ZPX,		0xf6
f8d0 : 01ee                  	db	AM_ABS,		0xee
f8d2 : 02fe                  	db	AM_ABSX,	0xfe
f8d4 : 6c73720a              	db	"lsr",		5*2
f8d8 : 0d4a                  	db	AM_IMP,		0x4a
f8da : 0446                  	db	AM_ZP,		0x46
f8dc : 0556                  	db	AM_ZPX,		0x56
f8de : 014e                  	db	AM_ABS,		0x4e
f8e0 : 025e                  	db	AM_ABSX,	0x5e
f8e2 : 726f6c0a              	db	"rol",		5*2
f8e6 : 0d2a                  	db	AM_IMP,		0x2a
f8e8 : 0426                  	db	AM_ZP,		0x26
f8ea : 0536                  	db	AM_ZPX,		0x36
f8ec : 012e                  	db	AM_ABS,		0x2e
f8ee : 023e                  	db	AM_ABSX,	0x3e
f8f0 : 726f720a              	db	"ror",		5*2
f8f4 : 0d6a                  	db	AM_IMP,		0x6a
f8f6 : 0466                  	db	AM_ZP,		0x66
f8f8 : 0576                  	db	AM_ZPX,		0x76
f8fa : 016e                  	db	AM_ABS,		0x6e
f8fc : 027e                  	db	AM_ABSX,	0x7e
                             
f8fe : 6269740a              	db	"bit",		5*2
f902 : 0c89                  	db	AM_IMM,		0x89
f904 : 0424                  	db	AM_ZP,		0x24
f906 : 0534                  	db	AM_ZPX,		0x34
f908 : 012c                  	db	AM_ABS,		0x2c
f90a : 023c                  	db	AM_ABSX,	0x3c
                             	
f90c : 62726b02              	db	"brk",		1*2
f910 : 0d00                  	db	AM_IMP,		0x00
f912 : 73747002              	db	"stp",		1*2
f916 : 0ddb                  	db	AM_IMP,		0xdb
f918 : 77616902              	db	"wai",		1*2
f91c : 0dcb                  	db	AM_IMP,		0xcb
                             	
f91e : 636c6302              	db	"clc",		1*2
f922 : 0d18                  	db	AM_IMP,		0x18
f924 : 636c6402              	db	"cld",		1*2
f928 : 0dd8                  	db	AM_IMP,		0xd8
AS65 Assembler for R6502 [1.42].                                     Page  218
---------------------------------- bank1.s -----------------------------------

f92a : 636c6902              	db	"cli",		1*2
f92e : 0d58                  	db	AM_IMP,		0x58
f930 : 636c7602              	db	"clv",		1*2
f934 : 0db8                  	db	AM_IMP,		0xb8
f936 : 73656302              	db	"sec",		1*2
f93a : 0d38                  	db	AM_IMP,		0x38
f93c : 73656402              	db	"sed",		1*2
f940 : 0df8                  	db	AM_IMP,		0xf8
f942 : 73656902              	db	"sei",		1*2
f946 : 0d78                  	db	AM_IMP,		0x78
                             	
f948 : 63707806              	db	"cpx",		3*2
f94c : 0ce0                  	db	AM_IMM,		0xe0
f94e : 04e4                  	db	AM_ZP,		0xe4
f950 : 01ec                  	db	AM_ABS,		0xec
f952 : 63707906              	db	"cpy",		3*2
f956 : 0cc0                  	db	AM_IMM,		0xc0
f958 : 04c4                  	db	AM_ZP,		0xc4
f95a : 01cc                  	db	AM_ABS,		0xcc
f95c : 64657802              	db	"dex",		1*2
f960 : 0dca                  	db	AM_IMP,		0xca
f962 : 64657902              	db	"dey",		1*2
f966 : 0d88                  	db	AM_IMP,		0x88
f968 : 696e7802              	db	"inx",		1*2
f96c : 0de8                  	db	AM_IMP,		0xe8
f96e : 696e7902              	db	"iny",		1*2
f972 : 0dc8                  	db	AM_IMP,		0xc8
f974 : 6c64780a              	db	"ldx",		5*2
f978 : 0ca2                  	db	AM_IMM,		0xa2
f97a : 04a6                  	db	AM_ZP,		0xa6
f97c : 06b6                  	db	AM_ZPY,		0xb6
f97e : 01ae                  	db	AM_ABS,		0xae
f980 : 03be                  	db	AM_ABSY,	0xbe
f982 : 6c64790a              	db	"ldy",		5*2
f986 : 0ca0                  	db	AM_IMM,		0xa0
f988 : 04a4                  	db	AM_ZP,		0xa4
f98a : 05b4                  	db	AM_ZPX,		0xb4
f98c : 01ac                  	db	AM_ABS,		0xac
f98e : 02bc                  	db	AM_ABSX,	0xbc
f990 : 73747806              	db	"stx",		3*2
f994 : 0486                  	db	AM_ZP,		0x86
f996 : 0696                  	db	AM_ZPY,		0x96
f998 : 018e                  	db	AM_ABS,		0x8e
f99a : 73747906              	db	"sty",		3*2
f99e : 0484                  	db	AM_ZP,		0x84
f9a0 : 0594                  	db	AM_ZPX,		0x94
f9a2 : 018c                  	db	AM_ABS,		0x8c
f9a4 : 73747a08              	db	"stz",		4*2
f9a8 : 0464                  	db	AM_ZP,		0x64
f9aa : 0574                  	db	AM_ZPX,		0x74
f9ac : 019c                  	db	AM_ABS,		0x9c
f9ae : 029e                  	db	AM_ABSX,	0x9e
                             	
                             
f9b0 : 62636302              	db	"bcc",		1*2
f9b4 : 0f90                  	db	AM_REL,		0x90
f9b6 : 62637302              	db	"bcs",		1*2
f9ba : 0fb0                  	db	AM_REL,		0xb0
f9bc : 62657102              	db	"beq",		1*2
f9c0 : 0ff0                  	db	AM_REL,		0xf0
f9c2 : 626d6902              	db	"bmi",		1*2
f9c6 : 0f30                  	db	AM_REL,		0x30
AS65 Assembler for R6502 [1.42].                                     Page  219
---------------------------------- bank1.s -----------------------------------

f9c8 : 626e6502              	db	"bne",		1*2
f9cc : 0fd0                  	db	AM_REL,		0xd0
f9ce : 62706c02              	db	"bpl",		1*2
f9d2 : 0f10                  	db	AM_REL,		0x10
f9d4 : 62726102              	db	"bra",		1*2
f9d8 : 0f80                  	db	AM_REL,		0x80
f9da : 62766302              	db	"bvc",		1*2
f9de : 0f50                  	db	AM_REL,		0x50
f9e0 : 62767302              	db	"bvs",		1*2
f9e4 : 0f70                  	db	AM_REL,		0x70
f9e6 : 6a6d7006              	db	"jmp",		3*2
f9ea : 014c                  	db	AM_ABS,		0x4c
f9ec : 0a6c                  	db	AM_ABSIND,	0x6c
f9ee : 0b7c                  	db	AM_ABSINDX,	0x7c
f9f0 : 6a737202              	db	"jsr",		1*2
f9f4 : 0120                  	db	AM_ABS,		0x20
                             	
f9f6 : 6e6f7002              	db	"nop",		1*2
f9fa : 0dea                  	db	AM_IMP,		0xea
f9fc : 70686102              	db	"pha",		1*2
fa00 : 0d48                  	db	AM_IMP,		0x48
fa02 : 70687002              	db	"php",		1*2
fa06 : 0d08                  	db	AM_IMP,		0x08
fa08 : 70687802              	db	"phx",		1*2
fa0c : 0dda                  	db	AM_IMP,		0xda
fa0e : 70687902              	db	"phy",		1*2
fa12 : 0d5a                  	db	AM_IMP,		0x5a
fa14 : 706c6102              	db	"pla",		1*2
fa18 : 0d68                  	db	AM_IMP,		0x68
fa1a : 706c7002              	db	"plp",		1*2
fa1e : 0d28                  	db	AM_IMP,		0x28
fa20 : 706c7802              	db	"plx",		1*2
fa24 : 0dfa                  	db	AM_IMP,		0xfa
fa26 : 706c7902              	db	"ply",		1*2
fa2a : 0d7a                  	db	AM_IMP,		0x7a
fa2c : 72746902              	db	"rti",		1*2
fa30 : 0d40                  	db	AM_IMP,		0x40
fa32 : 72747302              	db	"rts",		1*2
fa36 : 0d60                  	db	AM_IMP,		0x60
fa38 : 74617802              	db	"tax",		1*2
fa3c : 0daa                  	db	AM_IMP,		0xaa
fa3e : 74617902              	db	"tay",		1*2
fa42 : 0da8                  	db	AM_IMP,		0xa8
fa44 : 74737802              	db	"tsx",		1*2
fa48 : 0dba                  	db	AM_IMP,		0xba
fa4a : 74786102              	db	"txa",		1*2
fa4e : 0d8a                  	db	AM_IMP,		0x8a
fa50 : 74787302              	db	"txs",		1*2
fa54 : 0d9a                  	db	AM_IMP,		0x9a
fa56 : 74796102              	db	"tya",		1*2
fa5a : 0d98                  	db	AM_IMP,		0x98
                             	
fa5c : 74726204              	db	"trb",		2*2
fa60 : 0414                  	db	AM_ZP,		0x14
fa62 : 011c                  	db	AM_ABS,		0x1c
fa64 : 74736204              	db	"tsb",		2*2
fa68 : 0404                  	db	AM_ZP,		0x04
fa6a : 010c                  	db	AM_ABS,		0x0c
                             	
fa6c : 6262723002            	db	"bbr0",		1*2
fa71 : 0f0f                  	db	AM_REL,		0x0f
fa73 : 6262723102            	db	"bbr1",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  220
---------------------------------- bank1.s -----------------------------------

fa78 : 0f1f                  	db	AM_REL,		0x1f
fa7a : 6262723202            	db	"bbr2",		1*2
fa7f : 0f2f                  	db	AM_REL,		0x2f
fa81 : 6262723302            	db	"bbr3",		1*2
fa86 : 0f3f                  	db	AM_REL,		0x3f
fa88 : 6262723402            	db	"bbr4",		1*2
fa8d : 0f4f                  	db	AM_REL,		0x4f
fa8f : 6262723502            	db	"bbr5",		1*2
fa94 : 0f5f                  	db	AM_REL,		0x5f
fa96 : 6262723602            	db	"bbr6",		1*2
fa9b : 0f6f                  	db	AM_REL,		0x6f
fa9d : 6262723702            	db	"bbr7",		1*2
faa2 : 0f7f                  	db	AM_REL,		0x7f
faa4 : 6262733002            	db	"bbs0",		1*2
faa9 : 0f8f                  	db	AM_REL,		0x8f
faab : 6262733102            	db	"bbs1",		1*2
fab0 : 0f9f                  	db	AM_REL,		0x9f
fab2 : 6262733202            	db	"bbs2",		1*2
fab7 : 0faf                  	db	AM_REL,		0xaf
fab9 : 6262733302            	db	"bbs3",		1*2
fabe : 0fbf                  	db	AM_REL,		0xbf
fac0 : 6262733402            	db	"bbs4",		1*2
fac5 : 0fcf                  	db	AM_REL,		0xcf
fac7 : 6262733502            	db	"bbs5",		1*2
facc : 0fdf                  	db	AM_REL,		0xdf
face : 6262733602            	db	"bbs6",		1*2
fad3 : 0fef                  	db	AM_REL,		0xef
fad5 : 6262733702            	db	"bbs7",		1*2
fada : 0fff                  	db	AM_REL,		0xff
fadc : 726d623002            	db	"rmb0",		1*2
fae1 : 0f07                  	db	AM_REL,		0x07
fae3 : 726d623102            	db	"rmb1",		1*2
fae8 : 0f17                  	db	AM_REL,		0x17
faea : 726d623202            	db	"rmb2",		1*2
faef : 0f27                  	db	AM_REL,		0x27
faf1 : 726d623302            	db	"rmb3",		1*2
faf6 : 0f37                  	db	AM_REL,		0x37
faf8 : 726d623402            	db	"rmb4",		1*2
fafd : 0f47                  	db	AM_REL,		0x47
faff : 726d623502            	db	"rmb5",		1*2
fb04 : 0f57                  	db	AM_REL,		0x57
fb06 : 726d623602            	db	"rmb6",		1*2
fb0b : 0f67                  	db	AM_REL,		0x67
fb0d : 726d623702            	db	"rmb7",		1*2
fb12 : 0f77                  	db	AM_REL,		0x77
fb14 : 736d623002            	db	"smb0",		1*2
fb19 : 0f87                  	db	AM_REL,		0x87
fb1b : 736d623102            	db	"smb1",		1*2
fb20 : 0f97                  	db	AM_REL,		0x97
fb22 : 736d623202            	db	"smb2",		1*2
fb27 : 0fa7                  	db	AM_REL,		0xa7
fb29 : 736d623302            	db	"smb3",		1*2
fb2e : 0fb7                  	db	AM_REL,		0xb7
fb30 : 736d623402            	db	"smb4",		1*2
fb35 : 0fc7                  	db	AM_REL,		0xc7
fb37 : 736d623502            	db	"smb5",		1*2
fb3c : 0fd7                  	db	AM_REL,		0xd7
fb3e : 736d623602            	db	"smb6",		1*2
fb43 : 0fe7                  	db	AM_REL,		0xe7
fb45 : 736d623702            	db	"smb7",		1*2
fb4a : 0ff7                  	db	AM_REL,		0xf7
                             	
AS65 Assembler for R6502 [1.42].                                     Page  221
---------------------------------- bank1.s -----------------------------------

                             	;* Terminates with a zero
fb4c : 00                    	db	0
                             
                             	include	"dflat\asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
fb4d :                       df_tk_asm_tokenjmp
fb4d : 86d6                  	dw	df_tk_asm_org
fb4f : 86d6                  	dw	df_tk_asm_opt
fb51 : d1d5                  	dw	df_tk_asm_db
fb53 : d1d5                  	dw	df_tk_asm_dw
fb55 : 86d6                  	dw	df_tk_asm_ds
                             
fb57 :                       df_rt_asm_tokenjmp
fb57 : fff4                  	dw	df_rt_asm_org
fb59 : 11f5                  	dw	df_rt_asm_opt
fb5b : 19f5                  	dw	df_rt_asm_db
fb5d : 1cf5                  	dw	df_rt_asm_dw
fb5f : 97f5                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fb61 :                       asm_init
                             	; Zero the PC
fb61 : 64db             [ 3] 	stz df_asmpc
fb63 : 64dc             [ 3] 	stz df_asmpc+1
                             	; Zero the option
fb65 : 64dd             [ 3] 	stz df_asmopt
fb67 : 60               [ 6] 	rts
                             	
fb68 :                       mod_sz_asm_e
                             
AS65 Assembler for R6502 [1.42].                                     Page  222
---------------------------------- bank1.s -----------------------------------

                             
                             	; End of Code
fb68 :                       _code_end
fb68 :                       _bank1_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
