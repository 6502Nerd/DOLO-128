AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank1.s -----------------------------------

13587 lines read, no errors in pass 1.
c000 =                       _bank1_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank1.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank1.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank1.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank1.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank1.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank1.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank1.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank1.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank1.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank1.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank1.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank1.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank1.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank1.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank1.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank1.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank1.s -----------------------------------

                             ; Serial FIFO buffer pointers
0002 =                       ser_first	ds	1		; Pointer to first byte in buffer
0003 =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0004 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0006 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0007 =                       vdp_curstat	ds	1		; Cursor status
0008 =                       vdp_curval	ds	1		; Cursor value on screen
0009 =                       vdp_blank	ds	1		; Screen blank value normally 32
000a =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
000b =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0017 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0027 =                       kb_raw  	ds	1		; Raw keyboard code
0028 =                       kb_last		ds	1		; Raw code of last key
0029 =                       kb_code 	ds	1		; Converted keyboard code
002a =                       kb_stat		ds	1		; Keyboard status for caps and shi
002b =                       kb_deb		ds	1		; VB periods since last KB spike
002c =                       kb_rep		ds	1		; Keyboard repeat timer
002d =                       kb_rep_tim 	ds	1		; Default repeat speed
002e =                       kb_rep_del 	ds	1		; Default repeat delay timing
002f =                       kb_debounce ds	1		; Default repeat debounce
0030 =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
0031 =                       tmp_c		ds	2		; Temp address c
0033 =                       tmp_v1		ds	2		; VDP temp addresses
0035 =                       tmp_a		ds	2		; Temp storage a
0037 =                       tmp_b 		ds	2		; Temp address b
0039 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
003b =                       buf_adr		ds	2		; Line buffer address
003d =                       buf_sz		ds	1		; Buffer size
003e =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
003f =                       sd_status	ds	1		; SD card status
0040 =                       sd_slo		ds	1		; Sector pointer low
0041 =                       sd_shi		ds	1		; Sector pointer high
0042 =                       sd_sect		ds	4		; SD Card sector address
0046 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
004a =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0079 =                       ztmp_16					; Start of 16 byte scratch area (all 
0079 =                       num_a		ds	4		; 4 byte primary accumulator
007d =                       num_b		ds	4		; 4 byte secondary accumulator
0081 =                       num_x		ds	4		; 4 byte x register
0085 =                       num_tmp		ds	4		; 4 byte temp space
0089 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
0091 =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank1.s -----------------------------------

0091 =                       dflat_zp_save_s			; ZP save dflat from here
0091 =                       df_checkkey	ds	1		; Key check interval counter
0092 =                       df_checkmsk	ds	1		; Mask for check key
0093 =                       errno		ds	1		; General error condition status
0094 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
0095 =                       df_sp		ds	1		; Stack pointer after error to resto
0096 =                       df_pc		ds	2		; PC after error to return to
0098 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
009a =                       df_brkval	ds	1		; Byte after BRK instruction
009b =                       df_prgstrt	ds	2		; Start of program code
009d =                       df_prgend	ds	2		; End of program code
009f =                       df_vntstrt	ds	2		; Variable name table start
00a1 =                       df_vntend	ds	2		; Variable name table end
00a3 =                       df_vvtstrt	ds	2		; Variable value table start
00a5 =                       df_vvtend	ds	2		; Variable value table end
00a7 =                       df_varcnt	ds	1		; Variable counter
00a8 =                       df_starstrt	ds	2		; String and array table start
00aa =                       df_starend	ds	2		; String and array table end
00ac =                       df_rtstop	ds	1		; Runtime stack pointer
00ad =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ae =                       df_strbuff	ds	1		; String expression buffer
00af =                       df_stridx	ds	1		; Top of string buffer (grows dow
00b0 =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00b2 =                       df_linoff	ds	1		; Offset in to line buffer
00b3 =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00b4 =                       df_eolidx	ds	1		; End of line index (i.e length)
00b5 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00b6 =                       df_curstidx	ds	1		; Offset to the start of curren
00b7 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00b9 =                       df_symoff	ds	1		; Offset in to token table
00ba =                       df_symini	ds	2		; Start of symtab
00bc =                       df_currlin	ds	2		; Execution current line pointer
00be =                       df_exeoff	ds	1		; Execution line buffer offset
00bf =                       df_nextlin	ds	2		; Next line to execute
00c1 =                       df_procmode	ds	1		; Only used during tokenisation
00c2 =                       df_procargs	ds	1		; Only used during tokenisation
00c3 =                       df_procloc	ds	1		; Counts the number of local par
00c4 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00c6 =                       df_lineptr	ds	2		; Pointer to line during searche
00c8 =                       df_lineidx	ds	1		; Pointer to line index during s
00c9 =                       df_ifnest	ds	1		; Global nested if counter
00ca =                       df_currdat	ds	2		; Data current line pointer
00cc =                       df_datoff	ds	1		; Data line buffer offset
00cd =                       df_rnd		ds	2		; Random number seed
                             
00cf =                       df_asmpc	ds	2		; Assembler program counter
00d1 =                       df_asmopt	ds	1		; Assembler current option
00d2 =                       df_asmadmd	ds	1		; Addressing mode
00d3 =                       df_asmopcde	ds	1		; Current opcode
00d4 =                       df_asmoprnd	ds	2		; Current operand
00d6 =                       df_asmlen	ds	1		; Instruction length
                             
00d7 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00d7 =                       df_tmpptra	ds	2		; Temp pointer a
00d9 =                       df_tmpptrb	ds	2		; Temp pointer b
00db =                       df_tmpptrc	ds	2		; Temp pointer c
00dd =                       df_tmpptrd	ds	2		; Temp pointer d
00df =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank1.s -----------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00e1 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
0c00 =                       	org 0x0c00			; Page 11 = non-zero page variables
                             ; Interrupt routine addresses
0c00 =                       int_nmi		 ds 2		; Master NMI handler
0c02 =                       int_irq		 ds	2		; Master IRQ handler
0c04 =                       int_brk		 ds	2		; Master BRK handler
0c06 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
0c08 =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
0c0a =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Self-modifying code or code that needs to run w
0c0c =                       ram_code	ds  64		; 64 bytes of RAM code space
0c4c =                       pt3_int		ds	1		; =1 when PT3 interrupt routine is
                             
                             
                             ; Active IO device settings
0c4d =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c4e =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c5e =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank1.s -----------------------------------

                             ; Filesystem parameters
0c7e =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c82 =                       fs_fatsect	ds	4		; Start of FAT tables
0c86 =                       fs_rootsect	ds	4		; Start of Root Directory
0c8a =                       fs_datasect	ds	4		; Start of Data Area
0c8e =                       fs_dirsect	ds	4		; Current directory sector numbe
0c92 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c94 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0cb4 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0cb6 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : 77c7                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : 8acb                  	fcw init			; 0xfffc : Reset Vector
fffe : b4c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
c000 : 80                    	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank1.s -----------------------------------

                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4cc0c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4cbdc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4c50c6           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c8ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c97c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4cf9c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4ca1c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4c5dc6           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c75c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f337, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d877, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d5ed, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d680, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d589, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d548, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d265, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank1.s -----------------------------------

c0d6 :                       _fs_open_read_w
                              _bankjsr $d434, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d4f8, 2
                             
c106 :                       _fs_put_byte_w
                              _bankjsr $d3c1, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $d0a8, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d0de, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $d063, 2
                             
c166 :                       _get_byte
                              _bankjsr $d2ad, 0
                             
c17e :                       _put_byte
                              _bankjsr $d2c2, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e390, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e39d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $de59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d2cf, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d25a, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d28b, 0
                             
c226 :                       _init_fs
                              _bankjsr $cf40, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cc3a, 2
                             
c256 :                       _init_snd
                              _bankjsr $d698, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d2e1, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d2f0, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d35b, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cc43, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank1.s -----------------------------------

                             
c2ce :                       _gr_cls
                              _bankjsr $de6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $de16, 0
                             
c2fe :                       _gr_line
                              _bankjsr $e1ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $e00a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e115, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ded7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $df15, 0
                             
c376 :                       _gr_point
                              _bankjsr $dfbb, 0
                             
c38e :                       _gr_get
                              _bankjsr $def2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $defa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d691, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c6f9, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c6a1, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c697, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c68a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $dc00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d4b7, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d61d, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d56e, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d688, 0
                             
c4ae :                       _rtc_nvwrite
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank1.s -----------------------------------

                              _bankjsr $d670, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d694, 2
                             
c4de :                       _sd_sendcmd17
                              _bankjsr $ce12, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $ce8b, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cc3a, 0
                             
c526 :                       _PT3INIT
                              _bankjsr $cc43, 3
                             
c53e :                       _PT3START
                              _bankjsr $cc3a, 3
                             
c556 :                       _PT3PAUSE
                              _bankjsr $cc3d, 3
                             
c56e :                       _PT3RESUME
                              _bankjsr $cc40, 3
                             
c586 :                       mod_sz_autogen_e
                             
                             	
c586 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c586 :                       mod_sz_io_s
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank1.s -----------------------------------

                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c586 :                       io_init
c586 : a900             [ 2] 	lda #0				; Assume it's serial
c588 : 48               [ 3] 	pha
c589 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c58c : 2910             [ 2] 	and #0x10
c58e : d00b             [ 3] 	bne io_init_set_default
c590 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c593 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c595 : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c597 : 68               [ 4] 	pla
c598 : a901             [ 2] 	lda #1
c59a : 48               [ 3] 	pha
c59b :                       io_init_set_default
c59b : 68               [ 4] 	pla
c59c : 8d4d0c           [ 4] 	sta io_default
c59f : 4ca2c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c5a2 :                       io_set_default			; Entry point for default
c5a2 : ad4d0c           [ 4] 	lda io_default
c5a5 :                       io_active_device		; Entry point for A set
c5a5 : 0a               [ 2] 	asl	a				; x16 the Block number
c5a6 : 0a               [ 2] 	asl a
c5a7 : 0a               [ 2] 	asl a
c5a8 : 0a               [ 2] 	asl a
c5a9 : a8               [ 2] 	tay
c5aa : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c5ac :                       io_copy_data
c5ac : b920c6           [ 4] 	lda io_devices,y
c5af : 9d4e0c           [ 5] 	sta io_block,x
c5b2 : c8               [ 2] 	iny
c5b3 : e8               [ 2] 	inx
c5b4 : e010             [ 2] 	cpx #io_struct
c5b6 : d0f4             [ 3] 	bne io_copy_data
                             	
c5b8 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c5ba : 853e             [ 3] 	sta buf_ef
c5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
c5bd :                       io_get_ch
c5bd : 6c4e0c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c5c0 :                       io_put_ch
c5c0 : 6c500c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c3 :                       io_open_read
c5c3 : 6c520c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c6 :                       io_open_write
c5c6 : 6c540c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c9 :                       io_close
c5c9 : 6c560c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5cc :                       io_delete
c5cc : 6c580c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
c5cf :                       io_read_line
c5cf : 863b             [ 3] 	stx buf_adr			; Save pointer to storage
c5d1 : 853c             [ 3] 	sta buf_adr+1
c5d3 : 843d             [ 3] 	sty buf_sz			; Max length
c5d5 : 08               [ 3] 	php					; Save echo state
c5d6 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c5d8 :                       io_get_line_byte
c5d8 : 38               [ 2] 	sec					; Getting bytes synchronously
c5d9 : 20bdc5           [ 6] 	jsr io_get_ch		; Get a byte
c5dc : b026             [ 4] 	bcs io_get_line_done; Got nothing then finish
c5de : 28               [ 4] 	plp					; Get echo state
c5df : 08               [ 3] 	php					; Instantly save it back
c5e0 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c5e2 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c5e4 : d005             [ 3] 	bne io_do_echo
c5e6 : c000             [ 2] 	cpy #0				; Already at beginning?
c5e8 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c5ea : 88               [ 2] 	dey					; Else decrement length
c5eb :                       io_do_echo
c5eb : 20c0c5           [ 6] 	jsr io_put_ch		; Echo it
c5ee :                       io_skip_echo
c5ee : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c5f0 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c5f2 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c5f4 : f003             [ 3] 	beq io_skip_special
c5f6 : 913b             [ 5] 	sta (buf_adr),y		; Save it
c5f8 : c8               [ 2] 	iny					; Increase length
c5f9 :                       io_skip_special
c5f9 : c53e             [ 3] 	cmp buf_ef			; Is it the terminating char?
c5fb : f007             [ 4] 	beq io_get_line_done	; If yes then done
c5fd : c43d             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c5ff : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c601 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c602 : 38               [ 2] 	sec					; Yes, set carry flag
c603 : 60               [ 6] 	rts					; And done
c604 :                       io_get_line_done
c604 : a900             [ 2] 	lda #0
c606 : 913b             [ 5] 	sta (buf_adr),y		; Terminate with 0
c608 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c609 : 18               [ 2] 	clc					; Clear carry flag
c60a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c60b :                       io_print_line
c60b : 48               [ 3] 	pha
                             
c60c : 8631             [ 3] 	stx tmp_c					; Store the string pointer
c60e : 8532             [ 3] 	sta tmp_c+1					; lo and hi
c610 : a000             [ 2] 	ldy #0						; Start at the beginning!
c612 :                       io_print_line_byte
c612 : b131             [ 5] 	lda (tmp_c),y				; Copy byte to
c614 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c616 : 20c0c5           [ 6] 	jsr io_put_ch				; Transmit
c619 : c8               [ 2] 	iny
c61a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank1.s -----------------------------------

c61c :                       io_print_done
c61c : 68               [ 4] 	pla
c61d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c61e :                       io_null_op
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c620 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c620 :                       io_device0					; Serial device, input = Ser, outp
c620 : 66c1                  	dw	_get_byte			; io_get_ch
c622 : 7ec1                  	dw	_put_byte			; io_put_ch
c624 : 1ec6                  	dw	io_null_op			; io_open_r
c626 : 1ec6                  	dw	io_null_op			; io_open_w
c628 : 1ec6                  	dw	io_null_op			; io_close_f
c62a : 1ec6                  	dw	io_null_op			; io_del_f
c62c : 1ec6                  	dw	io_null_op			; io_ext1
c62e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c630 :                       io_device1					; Default device, input = screen e
c630 : 96c1                  	dw	_gr_get_key			; io_get_ch
c632 : aec1                  	dw	_gr_put_byte		; io_put_ch
c634 : 1ec6                  	dw	io_null_op			; io_open_r
c636 : 1ec6                  	dw	io_null_op			; io_open_w
c638 : 1ec6                  	dw	io_null_op			; io_close_f
c63a : 1ec6                  	dw	io_null_op			; io_del_f
c63c : 1ec6                  	dw	io_null_op			; io_ext1
c63e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c640 :                       io_device2					; SD device, input = SD, output = 
c640 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c642 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c644 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c646 : eec0                  	dw	_fs_open_write_w	; io_open_w
c648 : a6c0                  	dw	_fs_close_w			; io_close_f
c64a : 8ec0                  	dw	_fs_delete_w		; io_del_f
c64c : 1ec6                  	dw	io_null_op			; io_ext1
c64e : 1ec6                  	dw	io_null_op			; io_ext2
                             
c650 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank1.s -----------------------------------

                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c650 :                       vdp_wr_reg
c650 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c653 : ea               [ 2] 	nop
c654 : ea               [ 2] 	nop
c655 : 0980             [ 2] 	ora #0x80
c657 : 8d0105           [ 4] 	sta VDP_MODE1
c65a : 4980             [ 2] 	eor #0x80
c65c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c65d :                       vdp_wr_addr
c65d : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c660 : ea               [ 2] 	nop
c661 : ea               [ 2] 	nop
c662 : ea               [ 2] 	nop
c663 : 0940             [ 2] 	ora #0x40		; Required by VDP
c665 : 8d0105           [ 4] 	sta VDP_MODE1
c668 : 4940             [ 2] 	eor #0x40		; Undo that bit
c66a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c66b :                       vdp_mem_wait
c66b : da               [ 3] 	phx								; 3
c66c : a60a             [ 3] 	ldx vdp_delay					; 3
c66e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c670 :                       vdp_mem_wait_loop
c670 : ca               [ 2] 	dex								; 2
c671 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c673 :                       vdp_mem_wait_end
c673 : fa               [ 4] 	plx								; 3
c674 : 60               [ 6] 	rts								; 6
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank1.s -----------------------------------

                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c675 :                       vdp_rd_addr
c675 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c678 : ea               [ 2] 	nop
c679 : ea               [ 2] 	nop
c67a : ea               [ 2] 	nop
c67b : 8d0105           [ 4] 	sta VDP_MODE1
c67e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c680 :                       vdp_rd_vram
c680 : ad0005           [ 4] 	lda VDP_VRAM
c683 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c685 :                       vdp_wr_vram
c685 : 8d0005           [ 4] 	sta VDP_VRAM
c688 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c68a :                       vdp_poke
c68a : 08               [ 3] 	php
c68b : 48               [ 3] 	pha
c68c : 98               [ 2] 	tya
c68d : 78               [ 2] 	sei
c68e : 205dc6           [ 6] 	jsr vdp_wr_addr
c691 : 68               [ 4] 	pla
c692 : 2085c6           [ 6] 	jsr vdp_wr_vram
c695 : 28               [ 4] 	plp
c696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank1.s -----------------------------------

                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c697 :                       vdp_peek
c697 : 08               [ 3] 	php
c698 : 78               [ 2] 	sei
c699 : 2075c6           [ 6] 	jsr vdp_rd_addr
c69c : 2080c6           [ 6] 	jsr vdp_rd_vram
c69f : 28               [ 4] 	plp
c6a0 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6a1 :                       snd_set
c6a1 : 48               [ 3] 	pha
                             
c6a2 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6a4 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6a7 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6aa : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6ad : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6af : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6b1 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6b4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6b6 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c6b9 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c6bc : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c6be : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c6c1 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6c3 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6c6 : 68               [ 4] 	pla
                             	
c6c7 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c6c8 :                       snd_get
c6c8 : 48               [ 3] 	pha
                             
c6c9 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6cb : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6ce : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6d1 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6d4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6d6 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6d8 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6db : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6dd : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6e0 : a900             [ 2] 	lda #0x00				; Set Port A to input
c6e2 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6e5 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6e8 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6ea : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c6ec : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6ef : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c6f2 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6f4 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6f7 : 68               [ 4] 	pla
                             	
c6f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c6f9 :                       snd_get_joy0
c6f9 : 48               [ 3] 	pha
c6fa : 48               [ 3] 	pha
c6fb :                       snd_get_joy0_retry
c6fb : 7a               [ 4] 	ply
c6fc : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c6fe : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c701 : 5a               [ 3] 	phy						; Put on stack
c702 : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c705 : 98               [ 2] 	tya
c706 : ba               [ 2] 	tsx						; Get stack pointer
c707 : dd0101           [ 4] 	cmp 0x101,x				; Compare with stack value
c70a : d0ef             [ 4] 	bne snd_get_joy0_retry	; If not equal, try again
c70c : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank1.s -----------------------------------

c70d : 68               [ 4] 	pla
c70e : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c70f :                       main
                             
c70f :                       infinity
c70f : 2046c0           [ 6] 	jsr _df_pg_dflat
c712 : 4c0fc7           [ 3] 	jmp infinity
                             
c715 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c715 : 4275696c64203a..       db "Build : 09-06-2025\r"
c728 : 3132384b204272..       db "128K Breadboard Computer\r"
c741 : 42792040363530..       db "By @6502Nerd\r"
c74e : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c762 :                       init_nmi
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank1.s -----------------------------------

                             	; Core IRQ handler
c762 : a977             [ 2] 	lda #lo(nmi)
c764 : 8d000c           [ 4] 	sta int_nmi
c767 : a9c7             [ 2] 	lda #hi(nmi)
c769 : 8d010c           [ 4] 	sta int_nmi+1
                             
c76c : a9c4             [ 2] 	lda #lo(null_handler)
c76e : 8d0a0c           [ 4] 	sta int_usercia1
c771 : a9c7             [ 2] 	lda #hi(null_handler)
c773 : 8d0b0c           [ 4] 	sta int_usercia1+1
                             
c776 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c777 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* 6551 uses this - fills the receive buffer
                             ;* VIA 2 uses this- user interrupt
c777 :                       nmi
c777 : 48               [ 3] 	pha
                             
c778 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c77b : 100c             [ 3] 	bpl	nmi_skip_acia			; If no interrupt don't do a
                             
c77d : 5a               [ 3] 	phy
c77e : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c781 : a403             [ 3] 	ldy ser_last				; Put byte in last position of F
c783 : 990008           [ 5] 	sta ser_buf,y
c786 : e603             [ 5] 	inc ser_last				; Advance position of last
                             
c788 : 7a               [ 4] 	ply
c789 :                       nmi_skip_acia
c789 :                       nmi_fin
c789 : 68               [ 4] 	pla
c78a : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c78b :                       init_irq
                             	; Core IRQ handler
c78b : a9c5             [ 2] 	lda #lo(irq)
c78d : 8d020c           [ 4] 	sta int_irq
c790 : a9c7             [ 2] 	lda #hi(irq)
c792 : 8d030c           [ 4] 	sta int_irq+1
                             	
                             	; Core BRK handler
c795 : a919             [ 2] 	lda #lo(irq_brk)
c797 : 8d040c           [ 4] 	sta int_brk
c79a : a9c8             [ 2] 	lda #hi(irq_brk)
c79c : 8d050c           [ 4] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0 interrupts
c79f : a9c4             [ 2] 	lda #lo(null_handler)
c7a1 : 8d060c           [ 4] 	sta int_uservdp
c7a4 : a9c7             [ 2] 	lda #hi(null_handler)
c7a6 : 8d070c           [ 4] 	sta int_uservdp+1
                             
c7a9 : a9c4             [ 2] 	lda #lo(null_handler)
c7ab : 8d080c           [ 4] 	sta int_usercia0
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank1.s -----------------------------------

c7ae : a9c7             [ 2] 	lda #hi(null_handler)
c7b0 : 8d090c           [ 4] 	sta int_usercia0+1
                             
c7b3 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c7b4 :                       call_irq_master
c7b4 : 6c020c           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c7b7 :                       call_irq_brk
c7b7 : 6c040c           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c7ba :                       call_irq_uservdp
c7ba : 6c060c           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c7bd :                       call_irq_usercia0
c7bd : 6c080c           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c7c0 :                       call_irq_usercia1
c7c0 : 6c0a0c           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c7c3 :                       null_irq
c7c3 : 40               [ 6] 	rti
                             
                             ;* null handler
c7c4 :                       null_handler
c7c4 : 60               [ 6] 	rts
                             	
                             
                             ;* Master IRQ handler
c7c5 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c7c8 : ba               [ 2] 	tsx
c7c9 : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c7cc : 2910             [ 2] 	and #0x10
c7ce : d0e7             [ 3] 	bne call_irq_brk
                             	
c7d0 : 18               [ 2] 	clc						; Standard behaviour
                             
                             	;* Try PIA1 first for rapid Timer handling
c7d1 : ad8d04           [ 4] 	lda IO_1 + IFR
c7d4 : 1029             [ 3] 	bpl irq_check_vdp		; Skip if no interrupt
                             	; Reset interrupt by reading T1C-L
c7d6 : ad8404           [ 4] 	lda IO_1+T1CL
c7d9 : 5a               [ 3] 	phy
c7da : da               [ 3] 	phx
                             	; Swtich to RAM bank 2 don't touch anything else
c7db : ad0004           [ 4] 	lda IO_0+PRB
c7de : 48               [ 3] 	pha                     ; Remember the bank #
c7df : 29cf             [ 2] 	and #0b11001111
c7e1 : 0920             [ 2] 	ora #0b00100000
c7e3 : 8d0004           [ 4] 	sta IO_0+PRB
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank1.s -----------------------------------

                             	; Switch out ROM for RAM
c7e6 : ad8004           [ 4] 	lda IO_1+PRB                    ; Get current RO
c7e9 : 48               [ 3] 	pha
c7ea : 29df             [ 2] 	and #(0xff ^ MM_DIS)            ; Switch off ROM
c7ec : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
c7ef : ee4c0c           [ 6] 	inc pt3_int 				  	; Set PT3 interrupt flag
c7f2 : 20c0c7           [ 6] 	jsr call_irq_usercia1			; Call user cia1 handler
                             	; Restore ROM
c7f5 : 68               [ 4] 	pla                             ; Get original p
c7f6 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
                             	; Restore RAM bank
c7f9 : 68               [ 4] 	pla                             ; Get original p
c7fa : 8d0004           [ 4] 	sta IO_0+PRB                    ; Update port to
c7fd : fa               [ 4] 	plx
c7fe : 7a               [ 4] 	ply
                             
                             	;* Try VDP next
c7ff :                       irq_check_vdp	
c7ff : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c802 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c804 : 20bac7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c807 : 2066c8           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c80a : 2044c8           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c80d :                       irq_check_cia0
c80d : ad0d04           [ 4] 	lda IO_0 + IFR
c810 : 1003             [ 3] 	bpl irq_fin
c812 : 20bdc7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c815 :                       irq_fin
                             	_pullAXY
                             
c818 : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c819 :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c819 : 38               [ 2] 	sec
c81a : bd0501           [ 4] 	lda 0x0105,x
c81d : e902             [ 2] 	sbc #2
c81f : 8598             [ 3] 	sta df_brkpc
c821 : bd0601           [ 4] 	lda 0x0106,x
c824 : e900             [ 2] 	sbc #0
c826 : 8599             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c828 : a001             [ 2] 	ldy #1
c82a : b198             [ 5] 	lda (df_brkpc),y
c82c : 859a             [ 3] 	sta df_brkval
c82e : 8593             [ 3] 	sta errno
                             	; now update the return address
c830 : a596             [ 3] 	lda df_pc
c832 : 9d0501           [ 5] 	sta 0x105,x
c835 : a597             [ 3] 	lda df_pc+1
c837 : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c83d : 8579             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank1.s -----------------------------------

c83f : 867a             [ 3] 	stx num_a+1
c841 : 847b             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c843 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c844 :                       int_kb_handler	
c844 : a52b             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c846 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c848 : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c84b : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c84d : f00c             [ 3] 	beq int_keys_up
c84f :                       int_do_read
c84f : 8530             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c851 : a52f             [ 3] 	lda kb_debounce			; Set debounce
c853 : 852b             [ 3] 	sta kb_deb
c855 :                       int_skip_scan
c855 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c857 : 8d0d04           [ 4] 	sta IO_0 + IFR
c85a : 60               [ 6] 	rts
c85b :                       int_keys_up					; No key pressed
c85b : 6427             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c85d : 6428             [ 3] 	stz kb_last
c85f : 6429             [ 3] 	stz kb_code
c861 : 642b             [ 3] 	stz kb_deb
c863 : 642c             [ 3] 	stz kb_rep
c865 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c866 :                       int_vdp_handler
c866 : 2092c8           [ 6] 	jsr update_timers	; If it is then update system 
                             
c869 : a506             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c86b : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c86d : c607             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c86f : a507             [ 3] 	lda vdp_curstat		; Check it
c871 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c873 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c875 : a507             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c877 : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c879 : 8507             [ 3] 	sta vdp_curstat		
                             
c87b : 18               [ 2] 	clc					; Add offset for cursor address in vram
c87c : a520             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c87e : 651d             [ 3] 	adc gr_scrngeom+gr_cur_off
c880 : aa               [ 2] 	tax
c881 : a521             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c883 : 6900             [ 2] 	adc #0
                             
c885 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
c888 : a507             [ 3] 	lda vdp_curstat
c88a : 2980             [ 2] 	and #0x80
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank1.s -----------------------------------

c88c : 4508             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c88e : 2085c6           [ 6] 	jsr vdp_wr_vram
c891 :                       int_vdp_fin	
c891 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c892 :                       update_timers
c892 : e604             [ 5] 	inc vdp_int_cnt
c894 : d002             [ 3] 	bne inc_kb_timers
c896 : e605             [ 5] 	inc vdp_int_cnt+1
c898 :                       inc_kb_timers
c898 : a62b             [ 3] 	ldx kb_deb			; Is debounce 0?
c89a : f002             [ 3] 	beq skip_kb_deb
c89c : c62b             [ 5] 	dec kb_deb
c89e :                       skip_kb_deb
c89e : a62c             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c8a0 : f002             [ 3] 	beq skip_kb_rep
c8a2 : c62c             [ 5] 	dec kb_rep
c8a4 :                       skip_kb_rep
c8a4 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c8a5 :                       long_delay
c8a5 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c8a9 : a000             [ 2] 	ldy #0x00
c8ab :                       long_delay_1
c8ab : ea               [ 2] 	nop
c8ac : ea               [ 2] 	nop
c8ad : ea               [ 2] 	nop
c8ae : ea               [ 2] 	nop
c8af : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank1.s -----------------------------------

c8b0 : d0f9             [ 3] 	bne long_delay_1
c8b2 : ca               [ 2] 	dex
c8b3 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c8b8 : 28               [ 4] 	plp
                             	
c8b9 : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c8ba :                       utilPrintSPC
c8ba : 48               [ 3] 	pha
c8bb : a920             [ 2] 	lda #' '
c8bd : 20c0c5           [ 6] 	jsr io_put_ch
c8c0 : 68               [ 4] 	pla
c8c1 : 60               [ 6] 	rts
                             
c8c2 :                       utilPrintCRLF
c8c2 : 48               [ 3] 	pha
c8c3 : a90d             [ 2] 	lda #UTF_CR
c8c5 : 20c0c5           [ 6] 	jsr io_put_ch
c8c8 : 68               [ 4] 	pla
c8c9 : 60               [ 6] 	rts
                             
c8ca :                       utilPrintA
c8ca : 8539             [ 3] 	sta tmp_d
c8cc : 48               [ 3] 	pha
c8cd : 8a               [ 2] 	txa
c8ce : 48               [ 3] 	pha
c8cf : a539             [ 3] 	lda tmp_d
c8d1 : 20efc8           [ 6] 	jsr str_a_to_x
c8d4 : 20c0c5           [ 6] 	jsr io_put_ch
c8d7 : 8a               [ 2] 	txa
c8d8 : 20c0c5           [ 6] 	jsr io_put_ch
c8db : 68               [ 4] 	pla
c8dc : aa               [ 2] 	tax
c8dd : 68               [ 4] 	pla
c8de : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank1.s -----------------------------------

                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c8df :                       util_clr_mem
c8df : 48               [ 3] 	pha
c8e0 : 5a               [ 3] 	phy
c8e1 : 8633             [ 3] 	stx tmp_v1
c8e3 : 8534             [ 3] 	sta tmp_v1+1
c8e5 : a900             [ 2] 	lda #0
c8e7 :                       mem_clr_byte
c8e7 : 88               [ 2] 	dey
c8e8 : 9133             [ 5] 	sta (tmp_v1),y
c8ea : d0fb             [ 3] 	bne mem_clr_byte
c8ec : 7a               [ 4] 	ply
c8ed : 68               [ 4] 	pla
c8ee : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c8ef :                       str_a_to_x
c8ef : 48               [ 3] 	pha					; Save the byte using later on
c8f0 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c8f2 : 18               [ 2] 	clc
c8f3 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8f5 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8f7 : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c8f9 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8fb :                       skip_a_f_1
c8fb : aa               [ 2] 	tax					; Low char is in X
c8fc : 68               [ 4] 	pla					; Get byte back
c8fd : 4a               [ 2] 	lsr a				; Make high nibble low
c8fe : 4a               [ 2] 	lsr a
c8ff : 4a               [ 2] 	lsr a
c900 : 4a               [ 2] 	lsr a
c901 : 18               [ 2] 	clc
c902 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c904 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c906 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c908 : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c90a :                       skip_a_f_2
                             
c90a : 18               [ 2] 	clc					; No error
c90b : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c90c :                       str_x_to_a
c90c : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c90e : 38               [ 2] 	sec					; Process high char in A
c90f : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c911 : c90a             [ 2] 	cmp #10				; If A < 10 then
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank1.s -----------------------------------

c913 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c915 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c917 :                       skip_x_f_1
c917 : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c919 : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c91b : 0a               [ 2] 	asl a				; This is the high nibble
c91c : 0a               [ 2] 	asl a
c91d : 0a               [ 2] 	asl a
c91e : 0a               [ 2] 	asl a
c91f : 48               [ 3] 	pha					; Save the high nibble
c920 : 8a               [ 2] 	txa					; Now process the low char in X
c921 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c923 : 38               [ 2] 	sec
c924 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c926 : c90a             [ 2] 	cmp #10				; If A < 10 then
c928 : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c92a : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c92c :                       skip_x_f_2
c92c : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c92e : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c930 : 8579             [ 3] 	sta num_a			; Store low nibble in temp
c932 : 68               [ 4] 	pla					; Get high nibble
c933 : 0579             [ 3] 	ora num_a			; OR with low nibble
                             
c935 : 18               [ 2] 	clc					; No error
c936 : 60               [ 6] 	rts					; A contains value
                             
c937 :                       str_x_to_a_errl
c937 : 68               [ 4] 	pla
c938 :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c93a :                       con_n_to_a
c93a : 8685             [ 3] 	stx num_tmp
c93c : 8586             [ 3] 	sta num_tmp+1
c93e : 6479             [ 3] 	stz num_a
c940 : 647a             [ 3] 	stz num_a+1
c942 : c000             [ 2] 	cpy #NUM_ANY
c944 : f014             [ 3] 	beq con_n_to_a_detect
c946 : 88               [ 2] 	dey
c947 : d003             [ 3] 	bne con_n_not_dec
c949 :                       con_dec_jmp
c949 : 4cddc9           [ 3] 	jmp con_dec_to_a_int
c94c :                       con_n_not_dec
c94c : 88               [ 2] 	dey
c94d : d003             [ 3] 	bne con_n_not_hex
c94f :                       con_hex_jmp
c94f : 4c74c9           [ 3] 	jmp con_hex_to_a_int
c952 :                       con_n_not_hex
c952 : 88               [ 2] 	dey
c953 : d003             [ 3] 	bne con_n_err
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank1.s -----------------------------------

c955 :                       con_bin_jmp
c955 : 4cb3c9           [ 3] 	jmp con_bin_to_a_int
c958 :                       con_n_err
c958 : 38               [ 2] 	sec
c959 : 60               [ 6] 	rts
c95a :                       con_n_to_a_detect
c95a : b285             [ 5] 	lda (num_tmp)
c95c : c930             [ 2] 	cmp #'0'
c95e : d0e9             [ 3] 	bne con_dec_jmp
c960 : a001             [ 2] 	ldy #1
c962 : b185             [ 5] 	lda (num_tmp),y
c964 : 0920             [ 2] 	ora #0x20
c966 : c978             [ 2] 	cmp #'x'
c968 : f0e5             [ 3] 	beq con_hex_jmp
c96a : c962             [ 2] 	cmp #'b'
c96c : f0e7             [ 3] 	beq con_bin_jmp
c96e : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c970 :                       con_hex_to_a
c970 : 8685             [ 3] 	stx num_tmp
c972 : 8586             [ 3] 	sta num_tmp+1
c974 :                       con_hex_to_a_int
c974 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c976 : a002             [ 2] 	ldy #2			; start at first digit
c978 :                       con_hex_digit
c978 : b185             [ 5] 	lda (num_tmp),y
c97a : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c97c : 38               [ 2] 	sec							; Process high char in A
c97d : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c97f : c90a             [ 2] 	cmp #10						; If A < 10 then
c981 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c983 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c985 :                       con_hex_skip_x_f_1
c985 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c987 : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c989 : 48               [ 3] 	pha
                             	; make room for lo nibble
c98a : 0679             [ 5] 	asl num_a
c98c : 267a             [ 5] 	rol num_a+1
c98e : 0679             [ 5] 	asl num_a
c990 : 267a             [ 5] 	rol num_a+1
c992 : 0679             [ 5] 	asl num_a
c994 : 267a             [ 5] 	rol num_a+1
c996 : 0679             [ 5] 	asl num_a
c998 : 267a             [ 5] 	rol num_a+1
                             	; save in low nibble
c99a : 68               [ 4] 	pla
c99b : 0579             [ 3] 	ora num_a
c99d : 8579             [ 3] 	sta num_a
c99f : c8               [ 2] 	iny
c9a0 : ca               [ 2] 	dex
c9a1 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c9a3 :                       con_hex_err
c9a3 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank1.s -----------------------------------

c9a4 : 60               [ 6] 	rts
                             	; found a non-hex digit
c9a5 :                       con_hex_done
                             	; if no digits processed then error
c9a5 : c002             [ 2] 	cpy #2
c9a7 : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c9a9 : 98               [ 2] 	tya
c9aa : aa               [ 2] 	tax
c9ab : a902             [ 2] 	lda #NUM_HEX
c9ad : 18               [ 2] 	clc
c9ae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c9af :                       con_bin_to_a
c9af : 8685             [ 3] 	stx num_tmp
c9b1 : 8586             [ 3] 	sta num_tmp+1
c9b3 :                       con_bin_to_a_int
c9b3 : a002             [ 2] 	ldy #2
c9b5 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c9b7 :                       con_bin_digit
c9b7 : b185             [ 5] 	lda (num_tmp),y
c9b9 : c930             [ 2] 	cmp #'0'
c9bb : 9010             [ 3] 	bcc con_bin_done
c9bd : c932             [ 2] 	cmp #'1'+1
c9bf : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c9c1 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c9c3 : 2679             [ 5] 	rol num_a
c9c5 : 267a             [ 5] 	rol num_a+1
c9c7 : c8               [ 2] 	iny
c9c8 : ca               [ 2] 	dex
c9c9 : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c9cb : 800a             [ 3] 	bra con_bin_err
c9cd :                       con_bin_done
                             	; didn't process any digit = error
c9cd : c002             [ 2] 	cpy #2
c9cf : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c9d1 : 98               [ 2] 	tya
c9d2 : aa               [ 2] 	tax
c9d3 : a903             [ 2] 	lda #NUM_BIN
c9d5 : 18               [ 2] 	clc
c9d6 : 60               [ 6] 	rts
c9d7 :                       con_bin_err
c9d7 : 38               [ 2] 	sec
c9d8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
c9d9 :                       con_dec_to_a
c9d9 : 8685             [ 3] 	stx num_tmp
c9db : 8586             [ 3] 	sta num_tmp+1
c9dd :                       con_dec_to_a_int
c9dd : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c9df : b285             [ 5] 	lda (num_tmp)
c9e1 : c92d             [ 2] 	cmp #'-'
c9e3 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c9e5 : c8               [ 2] 	iny
c9e6 :                       str_d_find_end
c9e6 : b185             [ 5] 	lda (num_tmp),y
c9e8 : c930             [ 2] 	cmp #'0'
c9ea : 9007             [ 3] 	bcc str_d_found_end
c9ec : c93a             [ 2] 	cmp #'9'+1
c9ee : b003             [ 3] 	bcs str_d_found_end
c9f0 : c8               [ 2] 	iny
c9f1 : 80f3             [ 3] 	bra str_d_find_end
c9f3 :                       str_d_found_end
c9f3 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c9f5 : b052             [ 4] 	bcs str_d_error		; e.g. -32767 including minus
c9f7 : 8488             [ 3] 	sty num_tmp+3
c9f9 : 6487             [ 3] 	stz num_tmp+2
c9fb : 6479             [ 3] 	stz num_a
c9fd : 647a             [ 3] 	stz num_a+1
c9ff :                       str_d_process_digit
c9ff : 88               [ 2] 	dey
ca00 : 3026             [ 3] 	bmi str_d_digits_done
                             
ca02 : b185             [ 5] 	lda (num_tmp),y
                             
ca04 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
ca06 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
ca08 : 38               [ 2] 	sec
ca09 : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
ca0b : 18               [ 2] 	clc
ca0c : 0a               [ 2] 	asl a
ca0d : 6587             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
ca0f : aa               [ 2] 	tax
ca10 : a579             [ 3] 	lda num_a
ca12 : 7d4bca           [ 4] 	adc str_d_powers,x
ca15 : 8579             [ 3] 	sta num_a
ca17 : a57a             [ 3] 	lda num_a+1
ca19 : 7d4cca           [ 4] 	adc str_d_powers+1,x
ca1c : 857a             [ 3] 	sta num_a+1
ca1e : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
ca20 : a587             [ 3] 	lda num_tmp+2
ca22 : 6914             [ 2] 	adc #20
ca24 : 8587             [ 3] 	sta num_tmp+2
ca26 : 80d7             [ 4] 	bra str_d_process_digit
ca28 :                       str_d_digits_done
                             	; check if minus
ca28 : b285             [ 5] 	lda (num_tmp)
ca2a : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank1.s -----------------------------------

ca2c : d011             [ 3] 	bne str_d_skip_neg
ca2e : a688             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
ca30 : e002             [ 2] 	cpx #2				; else it's an error
ca32 : 9015             [ 3] 	bcc str_d_error
ca34 : a679             [ 3] 	ldx num_a
ca36 : a57a             [ 3] 	lda num_a+1
ca38 : 20afca           [ 6] 	jsr twos_complement
ca3b : 8679             [ 3] 	stx num_a
ca3d : 857a             [ 3] 	sta num_a+1
ca3f :                       str_d_skip_neg
ca3f : a688             [ 3] 	ldx num_tmp+3
ca41 : e001             [ 2] 	cpx #1				; must be at least 1 char
ca43 : 9004             [ 3] 	bcc str_d_error
ca45 : a901             [ 2] 	lda #NUM_DEC
ca47 : 18               [ 2] 	clc
ca48 : 60               [ 6] 	rts
ca49 :                       str_d_error
ca49 : 38               [ 2] 	sec
ca4a : 60               [ 6] 	rts
                             
ca4b :                       str_d_powers
ca4b : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
ca5f : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
ca73 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
ca87 : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
ca9b : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
caaf :                       twos_complement
caaf : 49ff             [ 2] 	eor #0xff
cab1 : 48               [ 3] 	pha
cab2 : 8a               [ 2] 	txa
cab3 : 49ff             [ 2] 	eor #0xff
cab5 : aa               [ 2] 	tax
cab6 : 68               [ 4] 	pla
cab7 : e8               [ 2] 	inx
cab8 : d001             [ 3] 	bne twos_complement_skip_X
caba : 1a               [ 2] 	inc a
cabb :                       twos_complement_skip_X
cabb : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
cabc :                       int_to_bcd
cabc : 08               [ 3] 	php
cabd : 48               [ 3] 	pha
cabe : da               [ 3] 	phx
                             
cabf : 8685             [ 3] 	stx num_tmp
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank1.s -----------------------------------

cac1 : 8586             [ 3] 	sta num_tmp+1
cac3 : c980             [ 2] 	cmp #0x80			; Negative?
cac5 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
cac7 : 20afca           [ 6] 	jsr twos_complement
caca :                       int_to_bcd_skip_neg
caca : 6479             [ 3] 	stz num_a
cacc : 647a             [ 3] 	stz num_a+1
cace : 647b             [ 3] 	stz num_a+2
cad0 : 647c             [ 3] 	stz num_a+3
cad2 : a210             [ 2] 	ldx #16
cad4 : f8               [ 2] 	sed
cad5 :                       int_to_bcd_bit
cad5 : 0685             [ 5] 	asl num_tmp
cad7 : 2686             [ 5] 	rol num_tmp+1
cad9 : a579             [ 3] 	lda num_a
cadb : 6579             [ 3] 	adc num_a
cadd : 8579             [ 3] 	sta num_a
cadf : a57a             [ 3] 	lda num_a+1
cae1 : 657a             [ 3] 	adc num_a+1
cae3 : 857a             [ 3] 	sta num_a+1
cae5 : a57b             [ 3] 	lda num_a+2
cae7 : 657b             [ 3] 	adc num_a+2
cae9 : 857b             [ 3] 	sta num_a+2
caeb : ca               [ 2] 	dex
caec : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
caee : fa               [ 4] 	plx
caef : 68               [ 4] 	pla
caf0 : 28               [ 4] 	plp
caf1 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
caf2 :                       word_to_bcd
caf2 : 08               [ 3] 	php
caf3 : 48               [ 3] 	pha
caf4 : da               [ 3] 	phx
                             
caf5 : 8685             [ 3] 	stx num_tmp
caf7 : 8586             [ 3] 	sta num_tmp+1
caf9 : 6479             [ 3] 	stz num_a
cafb : 647a             [ 3] 	stz num_a+1
cafd : 647b             [ 3] 	stz num_a+2
caff : 647c             [ 3] 	stz num_a+3
cb01 : a210             [ 2] 	ldx #16			; 16 binary bits
cb03 : f8               [ 2] 	sed
cb04 :                       word_to_bcd_bit
cb04 : 0685             [ 5] 	asl num_tmp
cb06 : 2686             [ 5] 	rol num_tmp+1
cb08 : a579             [ 3] 	lda num_a
cb0a : 6579             [ 3] 	adc num_a
cb0c : 8579             [ 3] 	sta num_a
cb0e : a57a             [ 3] 	lda num_a+1
cb10 : 657a             [ 3] 	adc num_a+1
cb12 : 857a             [ 3] 	sta num_a+1
cb14 : a57b             [ 3] 	lda num_a+2
cb16 : 657b             [ 3] 	adc num_a+2
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank1.s -----------------------------------

cb18 : 857b             [ 3] 	sta num_a+2
cb1a : ca               [ 2] 	dex
cb1b : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
cb1d : fa               [ 4] 	plx
cb1e : 68               [ 4] 	pla
cb1f : 28               [ 4] 	plp
cb20 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
cb21 :                       int_to_str_ch
cb21 : 290f             [ 2] 	and #0xf
cb23 : 0930             [ 2] 	ora #0x30					; Convert to ascii
cb25 : 4930             [ 2] 	eor #0x30					; Check if zero digit
cb27 : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
cb29 : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
cb2b : 4930             [ 2] 	eor #0x30					; Restore A
cb2d : 60               [ 6] 	rts							; Return without storing anything
cb2e :                       int_to_str_nz
cb2e : 4930             [ 2] 	eor #0x30					; Restore A
cb30 : 998900           [ 5] 	sta num_buf,y
cb33 : c8               [ 2] 	iny
cb34 : 38               [ 2] 	sec							; Set C as a non-zero encountered
cb35 :                       int_to_str_ch_fin
cb35 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
cb36 :                       int_to_str
                             	_pushAXY
                             
cb39 : a000             [ 2] 	ldy #0						; first pos of num_buf
cb3b : 0900             [ 2] 	ora #0						; Test A for sign bit
cb3d : 08               [ 3] 	php							; Remember C bit of P
cb3e : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
cb40 : 20afca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
cb43 : 48               [ 3] 	pha							; Remember A
cb44 : a92d             [ 2] 	lda #'-'					; Put in negative sign
cb46 : 8589             [ 3] 	sta num_buf
cb48 : c8               [ 2] 	iny							; Start at second buffer pos
cb49 : 68               [ 4] 	pla							; Restore A
cb4a :                       int_to_str_skip_neg
cb4a : 20f2ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
cb4d : a202             [ 2] 	ldx #2						; Start at BCD high byte
cb4f :                       int_str
cb4f : 28               [ 4] 	plp							; Get C but immediately
cb50 : 08               [ 3] 	php							; Save C (due to loop check later)
cb51 : b579             [ 4] 	lda num_a,x					; Get BCD digit
cb53 : 8590             [ 3] 	sta num_buf+7				; Save A it for the units later
cb55 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cb56 : 4a               [ 2] 	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank1.s -----------------------------------

cb57 : 4a               [ 2] 	lsr a
cb58 : 4a               [ 2] 	lsr a
cb59 : 28               [ 4] 	plp							; Get C
cb5a : 2021cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb5d : a590             [ 3] 	lda num_buf+7				; Get A for the units
cb5f : 2021cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb62 : 08               [ 3] 	php							; Save C
cb63 : ca               [ 2] 	dex
cb64 : 10e9             [ 3] 	bpl int_str
cb66 : 28               [ 4] 	plp							; Check C
cb67 : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cb69 : a930             [ 2] 	lda #'0'					; Stuff a zero
cb6b : 8589             [ 3] 	sta num_buf					; Must be in first position..
cb6d : c8               [ 2] 	iny
cb6e :                       int_to_str_fin
cb6e : a900             [ 2] 	lda #0						; Terminator
cb70 : 998900           [ 5] 	sta num_buf,y
cb73 : c8               [ 2] 	iny
                             	_pullAXY
                             
cb77 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank1.s -----------------------------------

                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb78 :                       str_a_to_d
cb78 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb79 :                       print_a_to_d
cb79 : 2036cb           [ 6] 	jsr int_to_str
cb7c : a000             [ 2] 	ldy #0
cb7e :                       print_a_to_d_ch
cb7e : b98900           [ 4] 	lda num_buf,y
cb81 : f006             [ 3] 	beq print_a_to_d_fin
cb83 : 20c0c5           [ 6] 	jsr io_put_ch
cb86 : c8               [ 2] 	iny
cb87 : d0f5             [ 3] 	bne print_a_to_d_ch
cb89 :                       print_a_to_d_fin
cb89 : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cb8a :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cb8a : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cb8c : 9a               [ 2] 	txs
cb8d : 4ce8cb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cb90 :                       init_2					; init_ram will jump back to here
                             	
cb90 : 2096cb           [ 6] 	jsr kernel_init
                             
cb93 : 4c0fc7           [ 3] 	jmp main
                             
cb96 :                       kernel_init
cb96 : 2062c7           [ 6] 	jsr init_nmi		; Initialise NMI handling
cb99 : 208bc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cb9c : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cb9f : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cba2 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
cba5 : 2026c5           [ 6] 	jsr _PT3INIT		; Load PT3 player code into shadow
cba8 :                       kernel_test
cba8 : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cbab : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cbae : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cbb1 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cbb3 : 48               [ 3] 	pha
cbb4 : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cbb6 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cbb9 : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cbbb : aa               [ 2] 	tax					; Save the mode temporarily
cbbc : 68               [ 4] 	pla					; Get the default mode from stack
cbbd : 8a               [ 2] 	txa					; And push the NV mode that was read
cbbe : 48               [ 3] 	pha
cbbf : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cbc1 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cbc4 : 8515             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank1.s -----------------------------------

cbc6 :                       kernel_skip_nv	
cbc6 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cbc7 : 20c6c1           [ 6] 	jsr _gr_init_screen
cbca : 2086c5           [ 6] 	jsr io_init			; Set default input/output device
cbcd : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cbdb : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cbde : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cbe1 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cbe4 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cbe7 : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cbe8 :                       init_ram
cbe8 : 6400             [ 3] 	stz 0x00			; Start at page 0
cbea : 6401             [ 3] 	stz 0x01
cbec : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cbee : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cbf0 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cbf2 :                       init_ram_1
cbf2 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cbf4 : 9004             [ 3] 	bcc init_ram_fill
cbf6 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cbf8 : 9005             [ 3] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cbfa :                       init_ram_fill
cbfa : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cbfc : c8               [ 2] 	iny
cbfd : d0fb             [ 3] 	bne init_ram_fill	; Do a whole page
cbff :                       init_ram_skip
cbff : e8               [ 2] 	inx					; Increment page counter
cc00 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cc02 : d0ee             [ 4] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cc04 : 4c90cb           [ 3] 	jmp init_2			; Carry on initialisation
                             
                             ;* Copy code to ram_code that enables copying of 
cc07 :                       init_ram_code
cc07 : a000             [ 2] 	ldy #0
cc09 :                       ram_code_copycode
cc09 : b915cc           [ 4] 	lda ram_code_s,y
cc0c : 990c0c           [ 5] 	sta ram_code,y
cc0f : c8               [ 2] 	iny
cc10 : c025             [ 2] 	cpy #(ram_code_e-ram_code_s)
cc12 : d0f5             [ 3] 	bne ram_code_copycode
cc14 : 60               [ 6] 	rts
                             
                             ; This code gets copied to RAM to do the actual p
                             ; Stack must contain:
                             ;	101,x = disable ROM value
                             ;	102,x = original ROM value
                             ;	103,x = new RAM bank select value
                             ;	104,x = original RAM bank select value
                             ; tmp_a = address to poke to
cc15 :                       ram_code_s
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank1.s -----------------------------------

cc15 : 08               [ 3] 	php							; Save processor status
cc16 : 78               [ 2] 	sei							; Disable VDP interrupts
cc17 : 48               [ 3] 	pha
cc18 : ba               [ 2] 	tsx
cc19 : e8               [ 2] 	inx
cc1a : e8               [ 2] 	inx
cc1b : e8               [ 2] 	inx
cc1c : e8               [ 2] 	inx
cc1d : bd0101           [ 4] 	lda 0x101,x					; Get disable ROM value
cc20 : 8d8004           [ 4] 	sta IO_1+PRB				; Disable ROM
cc23 : bd0301           [ 4] 	lda 0x103,x					; Get new RAM bank select value
cc26 : 8d0004           [ 4] 	sta IO_0+PRB				; Select bank 2
cc29 : 68               [ 4] 	pla
cc2a : 9135             [ 5] 	sta (tmp_a),y				; Actually poke the byte to mem
cc2c : bd0201           [ 4] 	lda 0x102,x					; Get original ROM value
cc2f : 8d8004           [ 4] 	sta IO_1+PRB				; Enable ROM
cc32 : bd0401           [ 4] 	lda 0x104,x					; Get original RAM bank select v
cc35 : 8d0004           [ 4] 	sta IO_0+PRB				; Restore RAM bank select	
cc38 : 28               [ 4] 	plp							; Restore processor status
cc39 : 60               [ 6] 	rts
cc3a :                       ram_code_e
                             
                             
cc3a :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "utils\intmath.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
cc3a :                       int_add
cc3a : 18               [ 2] 	clc
cc3b : a579             [ 3] 	lda num_a
cc3d : 657d             [ 3] 	adc num_b
cc3f : 8579             [ 3] 	sta num_a
cc41 : a57a             [ 3] 	lda num_a+1
cc43 : 657e             [ 3] 	adc num_b+1
cc45 : 857a             [ 3] 	sta num_a+1
cc47 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank1.s -----------------------------------

                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
cc48 :                       int_sub
cc48 : 38               [ 2] 	sec
cc49 : a579             [ 3] 	lda num_a
cc4b : e57d             [ 3] 	sbc num_b
cc4d : 8579             [ 3] 	sta num_a
cc4f : a57a             [ 3] 	lda num_a+1
cc51 : 657e             [ 3] 	adc num_b+1
cc53 : 857a             [ 3] 	sta num_a+1
cc55 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
cc56 :                       int_swp
cc56 : a579             [ 3] 	lda num_a
cc58 : a67d             [ 3] 	ldx num_b
cc5a : 857d             [ 3] 	sta num_b
cc5c : 8679             [ 3] 	stx num_a
cc5e : a57a             [ 3] 	lda num_a+1
cc60 : a67e             [ 3] 	ldx num_b+1
cc62 : 857e             [ 3] 	sta num_b+1
cc64 : 867a             [ 3] 	stx num_a+1
cc66 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
cc67 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
cc6f : 6479             [ 3] 	stz num_a
cc71 : 647a             [ 3] 	stz num_a+1
cc73 : a008             [ 2] 	ldy #8
cc75 :                       int_fast_mult_cycle
cc75 : 467d             [ 5] 	lsr num_b
cc77 : 900d             [ 3] 	bcc int_fast_mult_next
cc79 : 18               [ 2] 	clc
cc7a : a579             [ 3] 	lda num_a
cc7c : 6585             [ 3] 	adc num_tmp
cc7e : 8579             [ 3] 	sta num_a
cc80 : a57a             [ 3] 	lda num_a+1
cc82 : 6586             [ 3] 	adc num_tmp+1
cc84 : 857a             [ 3] 	sta num_a+1
cc86 :                       int_fast_mult_next
cc86 : 0685             [ 5] 	asl num_tmp
cc88 : 2686             [ 5] 	rol num_tmp+1
cc8a : 88               [ 2] 	dey
cc8b : d0e8             [ 3] 	bne int_fast_mult_cycle
cc8d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
cc8e :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
cc96 : 6479             [ 3] 	stz num_a
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank1.s -----------------------------------

cc98 : 647a             [ 3] 	stz num_a+1
cc9a : a010             [ 2] 	ldy #16
cc9c :                       int_mult_cycle
cc9c : 467e             [ 5] 	lsr num_b+1
cc9e : 667d             [ 5] 	ror num_b
cca0 : 900d             [ 3] 	bcc int_mult_next
cca2 : 18               [ 2] 	clc
cca3 : a579             [ 3] 	lda num_a
cca5 : 6585             [ 3] 	adc num_tmp
cca7 : 8579             [ 3] 	sta num_a
cca9 : a57a             [ 3] 	lda num_a+1
ccab : 6586             [ 3] 	adc num_tmp+1
ccad : 857a             [ 3] 	sta num_a+1
ccaf :                       int_mult_next
ccaf : 0685             [ 5] 	asl num_tmp
ccb1 : 2686             [ 5] 	rol num_tmp+1
ccb3 : 88               [ 2] 	dey
ccb4 : d0e6             [ 3] 	bne int_mult_cycle
ccb6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
ccb7 :                       int_div
                             	; adjust signs
ccb7 : 6485             [ 3] 	stz num_tmp				; Assume all +ve
ccb9 : a57a             [ 3] 	lda num_a+1				; Check A hi
ccbb : 100f             [ 3] 	bpl int_div_skip_negA
ccbd : e685             [ 5] 	inc num_tmp				; Record sign flip
ccbf : 38               [ 2] 	sec						; 2's complement A
ccc0 : a900             [ 2] 	lda #0					; by 0-A
ccc2 : e579             [ 3] 	sbc num_a				; A is now +ve
ccc4 : 8579             [ 3] 	sta num_a
ccc6 : a900             [ 2] 	lda #0
ccc8 : e57a             [ 3] 	sbc num_a+1
ccca : 857a             [ 3] 	sta num_a+1	
cccc :                       int_div_skip_negA
cccc : a57e             [ 3] 	lda num_b+1				; Check B hi
ccce : 100f             [ 3] 	bpl int_div_skip_negB
ccd0 : e685             [ 5] 	inc num_tmp				; Record sign flip
ccd2 : 38               [ 2] 	sec						; 2's complement B
ccd3 : a900             [ 2] 	lda #0					; by 0-B
ccd5 : e57d             [ 3] 	sbc num_b				; B is now +ve
ccd7 : 857d             [ 3] 	sta num_b
ccd9 : a900             [ 2] 	lda #0
ccdb : e57e             [ 3] 	sbc num_b+1
ccdd : 857e             [ 3] 	sta num_b+1
ccdf :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
ccdf : 6481             [ 3] 	stz num_x
cce1 : 6482             [ 3] 	stz num_x+1
                             	; 16 bit division
cce3 : a010             [ 2] 	ldy #16
cce5 :                       int_div_cycle
                             	; shift a left 1 bit
cce5 : 0679             [ 5] 	asl num_a
cce7 : 267a             [ 5] 	rol num_a+1
                             	; shift in to remainder
cce9 : 2681             [ 5] 	rol num_x
cceb : 2682             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
cced : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank1.s -----------------------------------

ccee : a581             [ 3] 	lda num_x
ccf0 : e57d             [ 3] 	sbc num_b
ccf2 : aa               [ 2] 	tax
ccf3 : a582             [ 3] 	lda num_x+1
ccf5 : e57e             [ 3] 	sbc num_b+1
ccf7 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
ccf9 : 8681             [ 3] 	stx num_x
ccfb : 8582             [ 3] 	sta num_x+1
ccfd : e679             [ 5] 	inc num_a
ccff :                       int_div_skip
                             	; carry on for 16 bits
ccff : 88               [ 2] 	dey
cd00 : d0e3             [ 4] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
cd02 : a585             [ 3] 	lda num_tmp
cd04 : 2901             [ 2] 	and #1
cd06 : f00d             [ 3] 	beq int_div_noflip
cd08 : 38               [ 2] 	sec						; 2's complement A
cd09 : a900             [ 2] 	lda #0					; by 0-A
cd0b : e579             [ 3] 	sbc num_a				; A is now +ve
cd0d : 8579             [ 3] 	sta num_a
cd0f : a900             [ 2] 	lda #0
cd11 : e57a             [ 3] 	sbc num_a+1
cd13 : 857a             [ 3] 	sta num_a+1	
cd15 :                       int_div_noflip
cd15 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat\dflat.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cd16 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank1.s -----------------------------------

                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
cd16 :                       mod_sz_var_s
                             
                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
cd16 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
cd26 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
cd26 : a5d7             [ 3] 	lda df_tmpptra
cd28 : c5a3             [ 3] 	cmp df_vvtstrt
cd2a : d006             [ 3] 	bne df_var_match_vnt_do
cd2c : a5d8             [ 3] 	lda df_tmpptra+1
cd2e : c5a4             [ 3] 	cmp df_vvtstrt+1
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank1.s -----------------------------------

cd30 : f042             [ 3] 	beq df_var_find_no_vnt
cd32 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
cd32 : a4b2             [ 3] 	ldy df_linoff
cd34 : a200             [ 2] 	ldx #0
cd36 :                       df_var_match_vnt_sym
cd36 : b9000a           [ 4] 	lda df_linbuff,y
cd39 : c1d9             [ 6] 	cmp (df_tmpptrb,x)
cd3b : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
cd3d : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
cd44 : a1d9             [ 6] 	lda (df_tmpptrb,x)
cd46 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
cd48 : b9000a           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
cd4b : 20f4ce           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
cd4e : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
cd50 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
cd50 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
cd52 : d025             [ 3] 	bne df_var_find_true
cd54 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
cd54 : a1d9             [ 6] 	lda (df_tmpptrb,x)
cd56 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
cd5e : 4c54cd           [ 3] 	jmp df_var_vnt_sym_nomatch
cd61 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
cd67 : 18               [ 2] 	clc
cd68 : a5d7             [ 3] 	lda df_tmpptra
cd6a : 6908             [ 2] 	adc #8
cd6c : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
cd70 : e6d8             [ 5] 	inc df_tmpptra+1
cd72 : d0b2             [ 3] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
cd74 :                       df_var_find_no_vnt
cd74 : a900             [ 2] 	lda #0
cd76 : aa               [ 2] 	tax
cd77 : 38               [ 2] 	sec
cd78 : 60               [ 6] 	rts
                             
cd79 :                       df_var_find_true
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank1.s -----------------------------------

                             	; Get slot address into x,a
cd79 : a6d7             [ 3] 	ldx df_tmpptra
cd7b : a5d8             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
cd7d : 84b2             [ 3] 	sty df_linoff
cd7f : 18               [ 2] 	clc
cd80 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
cd81 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
cd81 : 38               [ 2] 	sec
cd82 : a59f             [ 3] 	lda df_vntstrt
cd84 : e908             [ 2] 	sbc #DFVVT_SZ
cd86 : 859f             [ 3] 	sta df_vntstrt
cd88 : a5a0             [ 3] 	lda df_vntstrt+1
cd8a : e900             [ 2] 	sbc #0
cd8c : 85a0             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
cd8e : 38               [ 2] 	sec
cd8f : a5a1             [ 3] 	lda df_vntend
cd91 : e908             [ 2] 	sbc #DFVVT_SZ
cd93 : 85a1             [ 3] 	sta df_vntend
cd95 : a5a2             [ 3] 	lda df_vntend+1
cd97 : e900             [ 2] 	sbc #0
cd99 : 85a2             [ 3] 	sta df_vntend+1
                             
                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
cda3 :                       df_var_move_byte
                             	; When pointer = vntend then done
cda3 : a5d7             [ 3] 	lda df_tmpptra
cda5 : c5a1             [ 3] 	cmp df_vntend
cda7 : d006             [ 3] 	bne df_var_move_byte_do
cda9 : a5d8             [ 3] 	lda df_tmpptra+1
cdab : c5a2             [ 3] 	cmp df_vntend+1
cdad : f011             [ 3] 	beq df_var_move_byte_fin
cdaf :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
cdaf : a008             [ 2] 	ldy #DFVVT_SZ
cdb1 : b1d7             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
cdb3 : a000             [ 2] 	ldy #0
cdb5 : 91d7             [ 5] 	sta (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank1.s -----------------------------------

                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
cdbd : 4ca3cd           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
cdc0 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
cdc0 : 8639             [ 3] 	stx tmp_d
cdc2 : 38               [ 2] 	sec
cdc3 : a59f             [ 3] 	lda df_vntstrt
cdc5 : e539             [ 3] 	sbc tmp_d
cdc7 : 859f             [ 3] 	sta df_vntstrt
cdc9 : a5a0             [ 3] 	lda df_vntstrt+1
cdcb : e900             [ 2] 	sbc #0
cdcd : 85a0             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
cdd7 : e6a7             [ 5] 	inc df_varcnt
cdd9 : 18               [ 2] 	clc
cdda : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Iterate through a valid variable name
                             ;* starts with alpha, then any number of
                             ;* alphanums.
                             ;****************************************
cddb :                       df_var_countlen
                             	; count alpha nums
cddb : c8               [ 2] 	iny
cddc : e8               [ 2] 	inx
cddd : b9000a           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
cde0 : e000             [ 2] 	cpx #0
cde2 : d006             [ 3] 	bne df_var_countlen_alphanum
cde4 : 20e7ce           [ 6] 	jsr df_tk_isalpha
cde7 : 4cedcd           [ 3] 	jmp df_var_countlen_loop
cdea :                       df_var_countlen_alphanum
cdea : 20f4ce           [ 6] 	jsr df_tk_isalphanum
cded :                       df_var_countlen_loop
cded : b0ec             [ 3] 	bcs df_var_countlen
cdef : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
cdf0 :                       df_var_analyse
                             	; start at the current buffer position
cdf0 : a4b2             [ 3] 	ldy df_linoff
                             	
                             	; actual number of alpha nums = -1 to start
cdf2 : a2ff             [ 2] 	ldx #-1
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank1.s -----------------------------------

                             
                             	; Default type is INT
cdf4 : a901             [ 2] 	lda #DFVVT_INT
cdf6 : 85d7             [ 3] 	sta df_tmpptra
                             	
                             	; check for PROC prefix
cdf8 : b9000a           [ 4] 	lda df_linbuff,y
cdfb : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
cdfd : d011             [ 4] 	bne df_var_not_proc
                             	; analyse for proc variable names
                             	; else set type to PROC
cdff : a940             [ 2] 	lda #DFVVT_PROC
ce01 : 85d7             [ 3] 	sta df_tmpptra
ce03 : 20dbcd           [ 6] 	jsr df_var_countlen
                             	; Length must be >=1
ce06 : e001             [ 2] 	cpx #1
ce08 : 9004             [ 3] 	bcc df_var_analyse_fatal_err
                             	; Next char has to be '('
ce0a : c928             [ 2] 	cmp #'('
ce0c : f022             [ 3] 	beq df_var_finalise_len
ce0e :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
                             	; Analyse for non-proc variable names
ce10 :                       df_var_not_proc
                             	; go back on pos on index as loop always does in
ce10 : 88               [ 2] 	dey
ce11 : 20dbcd           [ 6] 	jsr df_var_countlen
ce14 : e000             [ 2] 	cpx #0
ce16 : d002             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
ce18 : 38               [ 2] 	sec
ce19 : 60               [ 6] 	rts
                             	; check for post qualifiers e.g. $
ce1a :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ; Set to INT type although it is the default alre
                             ;	lda #DFVVT_INT
                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
ce1a :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
ce1a : c924             [ 2] 	cmp #'$'
ce1c : d005             [ 3] 	bne df_var_analyse_chk_arry
                             	; Set to STRING type
ce1e : a904             [ 2] 	lda #DFVVT_STR
ce20 : 85d7             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
ce22 : c8               [ 2] 	iny
ce23 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
ce23 : b9000a           [ 4] 	lda df_linbuff,y
ce26 : c95b             [ 2] 	cmp #'['
ce28 : d006             [ 3] 	bne df_var_finalise_len
ce2a : a5d7             [ 3] 	lda df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank1.s -----------------------------------

ce2c : 0980             [ 2] 	ora #DFVVT_PTR
ce2e : 85d7             [ 3] 	sta df_tmpptra
ce30 :                       df_var_finalise_len
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
ce30 : 98               [ 2] 	tya
ce31 : 38               [ 2] 	sec
ce32 : e5b2             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
ce34 : aa               [ 2] 	tax
                             	; put type in A
ce35 : a5d7             [ 3] 	lda df_tmpptra
ce37 : 18               [ 2] 	clc
ce38 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
ce39 :                       df_var_findcreate
                             	; save mask
ce39 : 48               [ 3] 	pha
ce3a : 2016cd           [ 6] 	jsr df_var_find
ce3d : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
ce3f : 68               [ 4] 	pla
ce40 : 48               [ 3] 	pha
                             	; don't check mask if zero
ce41 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
ce43 : 68               [ 4] 	pla
ce44 : a000             [ 2] 	ldy #DFVVT_TYPE
ce46 : 31d7             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
ce48 : f019             [ 3] 	beq df_var_findcreate_err
ce4a : 48               [ 3] 	pha		; Dummy push to match the pla
ce4b :                       df_var_findcreate_found
                             	; discard mask
ce4b : 68               [ 4] 	pla	
                             	; put slot address in x,a
ce4c : a6d7             [ 3] 	ldx df_tmpptra
ce4e : a5d8             [ 3] 	lda df_tmpptra+1
ce50 : 18               [ 2] 	clc
ce51 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
ce52 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
ce52 : 20f0cd           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
ce55 : 85d7             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
ce57 : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
ce59 : 68               [ 4] 	pla
ce5a : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
ce5c : 25d7             [ 3] 	and df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank1.s -----------------------------------

                             	; mask match is ok
ce5e : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
ce60 : f001             [ 3] 	beq df_var_findcreate_err
ce62 :                       df_var_findcreate_errp
ce62 : 68               [ 4] 	pla
ce63 :                       df_var_findcreate_err
ce63 : 38               [ 2] 	sec
ce64 : 60               [ 6] 	rts
                             
ce65 :                       df_var_analyse_ok
                             	; extra space for zero terminator
ce65 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
ce66 : a5d7             [ 3] 	lda df_tmpptra
ce68 : 48               [ 3] 	pha
ce69 : 8a               [ 2] 	txa
ce6a : 48               [ 3] 	pha
                             	
ce6b : 2081cd           [ 6] 	jsr df_var_insert_space
ce6e : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
ce72 :                       df_var_initialise_var
ce72 : 68               [ 4] 	pla
ce73 : 85db             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
ce75 : 68               [ 4] 	pla							; type
ce76 : a000             [ 2] 	ldy #DFVVT_TYPE
ce78 : 91a5             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
ce7a : a900             [ 2] 	lda #0						; zero the rest
ce7c : a007             [ 2] 	ldy #7
ce7e :                       df_var_zero_vnt
ce7e : 91a5             [ 5] 	sta (df_vvtend),y
ce80 : 88               [ 2] 	dey
ce81 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
ce83 : c6db             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
                             
ce85 : a6b2             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
ce87 :                       df_var_findcreate_copy
ce87 : bd000a           [ 4] 	lda df_linbuff,x
ce8a : 919f             [ 5] 	sta (df_vntstrt),y
ce8c : e8               [ 2] 	inx
ce8d : c8               [ 2] 	iny
ce8e : c6db             [ 5] 	dec df_tmpptrc
ce90 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
ce92 : a900             [ 2] 	lda #0
ce94 : 919f             [ 5] 	sta (df_vntstrt),y
                             
ce96 : 86b2             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
ce98 : a6a5             [ 3] 	ldx df_vvtend
ce9a : a5a6             [ 3] 	lda df_vvtend+1
                             	
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank1.s -----------------------------------

ce9c : 18               [ 2] 	clc
ce9d : 60               [ 6] 	rts
                             	
ce9e :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
ce9e :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
ce9e :                       df_tk_peek_buf
ce9e : a4b2             [ 3] 	ldy df_linoff
cea0 : b9000a           [ 4] 	lda df_linbuff,y
cea3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
cea4 :                       df_tk_get_buf
cea4 : a4b2             [ 3] 	ldy df_linoff
cea6 : b9000a           [ 4] 	lda df_linbuff,y
cea9 : f003             [ 3] 	beq df_tk_get_buf_null
ceab : c8               [ 2] 	iny
ceac : 84b2             [ 3] 	sty df_linoff
ceae :                       df_tk_get_buf_null
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank1.s -----------------------------------

ceae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
ceaf :                       df_tk_put_tok
ceaf : a4b3             [ 3] 	ldy df_tokoff
ceb1 : 99800a           [ 5] 	sta df_tokbuff,y
ceb4 : c8               [ 2] 	iny
ceb5 : 3004             [ 3] 	bmi df_tk_put_overflow
ceb7 : 84b3             [ 3] 	sty df_tokoff
ceb9 : 18               [ 2] 	clc
ceba : 60               [ 6] 	rts
cebb :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cebd :                       df_tk_isdigit
cebd : c93a             [ 2] 	cmp #'9'+1
cebf : b005             [ 3] 	bcs df_tk_isdigit_false
cec1 : c930             [ 2] 	cmp #'0'
cec3 : 9001             [ 3] 	bcc df_tk_isdigit_false
cec5 : 60               [ 6] 	rts						; C must be 1
cec6 :                       df_tk_isdigit_false
cec6 : 18               [ 2] 	clc
cec7 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
cec8 :                       df_tk_isbin
cec8 : c930             [ 2] 	cmp #'0'
ceca : f005             [ 3] 	beq df_tk_isbin_true	; C=1
cecc : c931             [ 2] 	cmp #'1'
cece : f001             [ 3] 	beq df_tk_isbin_true	; C=1
ced0 : 18               [ 2] 	clc
ced1 :                       df_tk_isbin_true
ced1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
ced2 :                       df_tk_ishex
ced2 : 48               [ 3] 	pha
ced3 : 20bdce           [ 6] 	jsr df_tk_isdigit
ced6 : b00a             [ 3] 	bcs df_tk_ishex_truep
ced8 : 0920             [ 2] 	ora #0x20
ceda : c967             [ 2] 	cmp #'f'+1
cedc : b006             [ 3] 	bcs df_tk_ishex_false
cede : c961             [ 2] 	cmp #'a'
cee0 : 9002             [ 3] 	bcc df_tk_ishex_false
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank1.s -----------------------------------

                             	; C must be 1 here
cee2 :                       df_tk_ishex_truep
cee2 : 68               [ 4] 	pla
cee3 : 60               [ 6] 	rts
cee4 :                       df_tk_ishex_false
cee4 :                       df_tk_isalpha_false
cee4 : 18               [ 2] 	clc
cee5 : 68               [ 4] 	pla
cee6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
cee7 :                       df_tk_isalpha
cee7 : 48               [ 3] 	pha
cee8 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
ceea : c97b             [ 2] 	cmp #'z'+1
ceec : b0f6             [ 3] 	bcs df_tk_isalpha_false
ceee : c961             [ 2] 	cmp #'a'
cef0 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
cef2 : 68               [ 4] 	pla
cef3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cef4 :                       df_tk_isalphanum
cef4 : 20e7ce           [ 6] 	jsr df_tk_isalpha
cef7 : 90c4             [ 3] 	bcc df_tk_isdigit
cef9 :                       df_tk_rts1				; branch to this RTS where possible
cef9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
cefa :                       df_tk_isproc
cefa : c95f             [ 2] 	cmp #'_'
cefc : f001             [ 3] 	beq df_tk_isproc_true	; C=1
cefe : 18               [ 2] 	clc
ceff :                       df_tk_isproc_true
ceff : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
cf00 :                       df_tk_skip_ws
cf00 :                       df_tk_ws_loop1
cf00 : 209ece           [ 6] 	jsr df_tk_peek_buf
cf03 : 201bcf           [ 6] 	jsr df_tk_isws
cf06 : 90f1             [ 4] 	bcc df_tk_rts1
cf08 : e6b2             [ 5] 	inc df_linoff
cf0a : 20afce           [ 6] 	jsr df_tk_put_tok
cf0d : 90f1             [ 3] 	bcc df_tk_skip_ws		; Always as put_tok clears C
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* df_tk_strip_ws
                             ;* Strip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
cf0f :                       df_tk_strip_ws
cf0f : 209ece           [ 6] 	jsr df_tk_peek_buf
cf12 : 201bcf           [ 6] 	jsr df_tk_isws
cf15 : 90e2             [ 4] 	bcc df_tk_rts1
cf17 : e6b2             [ 5] 	inc df_linoff
cf19 : d0f4             [ 3] 	bne df_tk_strip_ws		; Always as linoff is not ze
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
cf1b :                       df_tk_isws
cf1b : c920             [ 2] 	cmp #' '
cf1d : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
cf1f : 60               [ 6] 	rts
cf20 :                       df_tk_isws_false
cf20 :                       df_tk_expectok
cf20 : 18               [ 2] 	clc
cf21 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
cf22 :                       df_tk_expect
cf22 : 48               [ 3] 	pha
                             	; skip ws
cf23 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
cf26 : 68               [ 4] 	pla
cf27 : a4b2             [ 3] 	ldy df_linoff
cf29 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
cf2c : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
cf2e :                       df_tk_num_err
cf2e :                       df_tk_char_err
cf2e : 38               [ 2] 	sec
cf2f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
cf30 :                       df_tk_expect_tok
cf30 : 2022cf           [ 6] 	jsr df_tk_expect
cf33 : b0c4             [ 4] 	bcs df_tk_rts1
cf35 : 20a4ce           [ 6] 	jsr df_tk_get_buf
cf38 : 4cafce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank1.s -----------------------------------

                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
cf3b :                       df_tk_expect_tok_err
cf3b : 2030cf           [ 6] 	jsr df_tk_expect_tok
cf3e : 90b9             [ 4] 	bcc df_tk_rts1
cf40 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
cf42 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
cf42 : 18               [ 2] 	clc
cf43 : a900             [ 2] 	lda #lo(df_linbuff)
cf45 : 65b2             [ 3] 	adc df_linoff
cf47 : aa               [ 2] 	tax
cf48 : a90a             [ 2] 	lda #hi(df_linbuff)
cf4a : 6900             [ 2] 	adc #0
cf4c : a000             [ 2] 	ldy #0				; any numeric format
cf4e : 203ac9           [ 6] 	jsr con_n_to_a
cf51 : b0db             [ 3] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
cf53 : a8               [ 2] 	tay
cf54 : 18               [ 2] 	clc
cf55 : 8a               [ 2] 	txa
cf56 : 65b2             [ 3] 	adc df_linoff
cf58 : 85b2             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
cf5a : 98               [ 2] 	tya
cf5b : c901             [ 2] 	cmp #NUM_DEC
cf5d : d004             [ 3] 	bne df_tk_num_hexbin
cf5f : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
cf61 : d016             [ 3] 	bne df_tk_num_put
cf63 :                       df_tk_num_hexbin
cf63 : c902             [ 2] 	cmp #NUM_HEX
cf65 : d00a             [ 3] 	bne df_tk_num_bin
cf67 : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
cf69 : e005             [ 2] 	cpx #5				; If >4 chars then INT
cf6b : 900c             [ 3] 	bcc df_tk_num_put
cf6d : a90a             [ 2] 	lda #DFTK_INTHEX
cf6f : d008             [ 3] 	bne df_tk_num_put
cf71 :                       df_tk_num_bin
cf71 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
cf73 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
cf75 : 9002             [ 3] 	bcc df_tk_num_put
cf77 : a90b             [ 2] 	lda #DFTK_INTBIN
cf79 :                       df_tk_num_put
cf79 : 20afce           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
cf7c : a579             [ 3] 	lda num_a
cf7e : 20afce           [ 6] 	jsr df_tk_put_tok
cf81 : a57a             [ 3] 	lda num_a+1
cf83 : 4cafce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
cf86 :                       df_tk_char
                             	; skip the first quote
cf86 : 20a4ce           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cf89 : a900             [ 2] 	lda #DFTK_CHR
cf8b : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
cf8e : 20a4ce           [ 6] 	jsr df_tk_get_buf
cf91 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
cf94 : a900             [ 2] 	lda #0
cf96 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
cf99 : 20a4ce           [ 6] 	jsr df_tk_get_buf
cf9c : c927             [ 2] 	cmp #0x27
cf9e : d08e             [ 3] 	bne df_tk_char_err
cfa0 : 18               [ 2] 	clc
cfa1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
cfa2 :                       df_tk_str
                             	; skip the first quote
cfa2 : 20a4ce           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cfa5 : a910             [ 2] 	lda #DFTK_STRLIT
cfa7 : 20afce           [ 6] 	jsr df_tk_put_tok
cfaa :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
cfaa : 20a4ce           [ 6] 	jsr df_tk_get_buf
cfad : c900             [ 2] 	cmp #0
cfaf : f011             [ 3] 	beq df_tk_str_err
cfb1 : c922             [ 2] 	cmp #0x22
cfb3 : f006             [ 3] 	beq df_tk_str_don
cfb5 : 20afce           [ 6] 	jsr df_tk_put_tok
cfb8 : 4caacf           [ 3] 	jmp df_tk_str_ch
cfbb :                       df_tk_str_don
                             	; zero terminated strings
cfbb : a900             [ 2] 	lda #0
cfbd : 4cafce           [ 3] 	jmp df_tk_put_tok
cfc0 :                       df_tk_var_noarry
cfc0 : 18               [ 2] 	clc
cfc1 : 60               [ 6] 	rts
cfc2 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
cfc4 :                       df_tk_const
cfc4 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
cfc7 : 209ece           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
cfca : c92d             [ 2] 	cmp #'-'
cfcc : f005             [ 3] 	beq df_tk_const_try_num
cfce : 20bdce           [ 6] 	jsr df_tk_isdigit
cfd1 : 9003             [ 3] 	bcc df_tk_const_try_str
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank1.s -----------------------------------

cfd3 :                       df_tk_const_try_num
cfd3 : 4c42cf           [ 3] 	jmp df_tk_num
cfd6 :                       df_tk_const_try_str
                             	; check for double quote
cfd6 : c922             [ 2] 	cmp #0x22
cfd8 : d003             [ 3] 	bne df_tk_const_try_char
cfda : 4ca2cf           [ 3] 	jmp df_tk_str
cfdd :                       df_tk_const_try_char
                             	; check for single apostrophe
cfdd : c927             [ 2] 	cmp #0x27
cfdf : d003             [ 3] 	bne df_tk_const_err
cfe1 : 4c86cf           [ 3] 	jmp df_tk_char
cfe4 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
cfe6 :                       df_tk_var
                             	; Find or create variable, address in X,A
cfe6 : 2039ce           [ 6] 	jsr df_var_findcreate
cfe9 : 9001             [ 3] 	bcc df_tk_var_cont
cfeb : 60               [ 6] 	rts
cfec :                       df_tk_var_cont
                             	; Save X,A for later
cfec : 48               [ 3] 	pha
cfed : 8a               [ 2] 	txa
cfee : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cfef : a911             [ 2] 	lda #DFTK_VAR
cff1 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cff4 : 68               [ 4] 	pla
cff5 : 20afce           [ 6] 	jsr df_tk_put_tok
cff8 : 68               [ 4] 	pla
cff9 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
cffc :                       df_tk_var_ck
                             	; check if array procesing needed
cffc : a95b             [ 2] 	lda #'['
cffe : 2030cf           [ 6] 	jsr df_tk_expect_tok
d001 : b0bd             [ 4] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
d003 : 4cadd0           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
d006 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
d006 : 209ece           [ 6] 	jsr df_tk_peek_buf
d009 : c926             [ 2] 	cmp #DFTK_VARPARM
d00b : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
d00d : 20a4ce           [ 6] 	jsr df_tk_get_buf
d010 : 20afce           [ 6] 	jsr df_tk_put_tok
d013 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank1.s -----------------------------------

d013 : a900             [ 2] 	lda #0
d015 : 4ce6cf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
d018 :                       df_tk_localvar
                             	; Find or create variable, index in A
d018 : 2039ce           [ 6] 	jsr df_var_findcreate
d01b : 9001             [ 3] 	bcc df_tk_localvar_cont
d01d : 60               [ 6] 	rts
d01e :                       df_tk_localvar_cont
                             	; Save variable address for later
d01e : 48               [ 3] 	pha
d01f : 8a               [ 2] 	txa
d020 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
d021 : a911             [ 2] 	lda #DFTK_VAR
d023 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
d026 : 68               [ 4] 	pla
d027 : 20afce           [ 6] 	jsr df_tk_put_tok
d02a : 68               [ 4] 	pla
d02b : 4cafce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
d02e :                       df_tk_arrvar
                             	; Like a local var at first
d02e : 2018d0           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d031 : a95b             [ 2] 	lda #'['
d033 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d036 : 4cadd0           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d039 :                       df_tk_proc
d039 : 85c1             [ 3] 	sta df_procmode
d03b : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d03e : a940             [ 2] 	lda #DFVVT_PROC
d040 : 2039ce           [ 6] 	jsr df_var_findcreate
d043 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d045 : 86c4             [ 3] 	stx df_procptr
d047 : 85c5             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d049 : a912             [ 2] 	lda #DFTK_PROC
d04b : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d04e : a5c4             [ 3] 	lda df_procptr
d050 : 20afce           [ 6] 	jsr df_tk_put_tok
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank1.s -----------------------------------

d053 : a5c5             [ 3] 	lda df_procptr+1
d055 : 20afce           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d058 : a900             [ 2] 	lda #0
d05a : 85c2             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d05c : a928             [ 2] 	lda #'('
d05e : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d061 : 209ece           [ 6] 	jsr df_tk_peek_buf
d064 : c929             [ 2] 	cmp #')'
d066 : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d068 :                       df_tk_proc_parms
d068 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d06b : a5c1             [ 3] 	lda df_procmode
d06d : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d06f : 2006d0           [ 6] 	jsr df_tk_parm
d072 : 4c7ed0           [ 3] 	jmp df_tk_proc_skip_call
d075 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d075 : a5c2             [ 3] 	lda df_procargs	; procargs could be impacted ins
d077 : 48               [ 3] 	pha
d078 : 202dd1           [ 6] 	jsr df_tk_expression
d07b : 68               [ 4] 	pla
d07c : 85c2             [ 3] 	sta df_procargs
d07e :                       df_tk_proc_skip_call
d07e : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d080 : e6c2             [ 5] 	inc df_procargs
                             	; what is next non ws char
d082 : 2000cf           [ 6] 	jsr df_tk_skip_ws
d085 : c92c             [ 2] 	cmp #','
d087 : f006             [ 3] 	beq df_tk_proc_comma
d089 : c929             [ 2] 	cmp #')'
d08b : d01d             [ 3] 	bne df_tk_proc_errp
d08d : f009             [ 3] 	beq df_tk_proc_noparm
                             	; comma found, more parms to process
d08f :                       df_tk_proc_comma
d08f : 20a4ce           [ 6] 	jsr df_tk_get_buf
d092 : 20afce           [ 6] 	jsr df_tk_put_tok
d095 : 4c68d0           [ 3] 	jmp df_tk_proc_parms
d098 :                       df_tk_proc_noparm
                             	; consume the close bracket
d098 : 20a4ce           [ 6] 	jsr df_tk_get_buf
d09b : 20afce           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d09e : a6c1             [ 3] 	ldx df_procmode
d0a0 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d0a2 : a004             [ 2] 	ldy #DFVVT_DIM2
d0a4 : a5c2             [ 3] 	lda df_procargs
d0a6 : 91c4             [ 5] 	sta (df_procptr),y
d0a8 :                       df_tk_proc_skip_args
d0a8 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank1.s -----------------------------------

d0a9 : 60               [ 6] 	rts
d0aa :                       df_tk_proc_errp
d0aa : 68               [ 4] 	pla
d0ab :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d0ad :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d0ad : 202dd1           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d0b0 : a92c             [ 2] 	lda #','
d0b2 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d0b5 : b003             [ 3] 	bcs df_tk_narry_end
d0b7 : 202dd1           [ 6] 	jsr df_tk_expression
d0ba :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d0ba : a95d             [ 2] 	lda #']'
d0bc : 4c3bcf           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d0bf :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d0bf : 202dd1           [ 6] 	jsr df_tk_expression
d0c2 : a929             [ 2] 	lda #')'
d0c4 : 4c3bcf           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d0c7 :                       df_tk_nterm_proc
                             	; call mode
d0c7 : a901             [ 2] 	lda #1
d0c9 : 4c39d0           [ 3] 	jmp df_tk_proc
                             
                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d0cc :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d0cc : 2000cf           [ 6] 	jsr df_tk_skip_ws
d0cf : c900             [ 2] 	cmp #0
d0d1 : f004             [ 3] 	beq df_tk_nterm_done
d0d3 : c93a             [ 2] 	cmp #':'
d0d5 : d002             [ 3] 	bne df_tk_nterm_cont
d0d7 :                       df_tk_nterm_done
d0d7 :                       df_tk_nop_false
d0d7 : 38               [ 2] 	sec
d0d8 : 60               [ 6] 	rts
d0d9 :                       df_tk_nterm_cont
                             	; if open bracket then process it
d0d9 : c928             [ 2] 	cmp #'('
d0db : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank1.s -----------------------------------

d0dd : 20a4ce           [ 6] 	jsr df_tk_get_buf
d0e0 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d0e3 : 4cbfd0           [ 3] 	jmp df_tk_nbrkt
d0e6 :                       df_tk_nterm_tryfn
d0e6 : 48               [ 3] 	pha
                             	; try decoding a built-in function
d0e7 : a902             [ 2] 	lda #DFTK_FN
d0e9 : 2020d2           [ 6] 	jsr df_tk_matchtok
d0ec : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d0ee : 68               [ 4] 	pla
d0ef : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d0f0 : 8a               [ 2] 	txa
d0f1 : 0980             [ 2] 	ora #0x80
d0f3 : 20afce           [ 6] 	jsr df_tk_put_tok
d0f6 : 20f2d1           [ 6] 	jsr df_tk_exec_parser
d0f9 : b01b             [ 4] 	bcs df_tk_nterm_err
d0fb : 60               [ 6] 	rts
d0fc :                       df_tk_nterm_try_proc
d0fc : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d0fd : 20face           [ 6] 	jsr df_tk_isproc
d100 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d102 : 20c7d0           [ 6] 	jsr df_tk_nterm_proc
d105 : b00f             [ 3] 	bcs df_tk_nterm_err
d107 : 60               [ 6] 	rts
d108 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d108 : a900             [ 2] 	lda #0
d10a : 20e6cf           [ 6] 	jsr df_tk_var
d10d : b001             [ 3] 	bcs df_tk_nterm_try_const
d10f : 60               [ 6] 	rts
d110 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d110 : 20c4cf           [ 6] 	jsr df_tk_const
d113 : b001             [ 3] 	bcs df_tk_nterm_err
d115 : 60               [ 6] 	rts
d116 :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d118 :                       df_tk_nop
d118 : 2000cf           [ 6] 	jsr df_tk_skip_ws
d11b : c900             [ 2] 	cmp #0
d11d : f0b8             [ 4] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d11f : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d121 : 2020d2           [ 6] 	jsr df_tk_matchtok
d124 : b0b1             [ 4] 	bcs df_tk_nop_false
                             	; got a token
d126 : 0980             [ 2] 	ora #DFTK_TOKEN
d128 : 20afce           [ 6] 	jsr df_tk_put_tok
d12b : 18               [ 2] 	clc
d12c : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank1.s -----------------------------------

                             ;* Parse numeric expression
                             ;****************************************
d12d :                       df_tk_expression
                             	; Tokenise a numeric term
d12d : 20ccd0           [ 6] 	jsr df_tk_nterm
d130 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d132 : 2018d1           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d135 : 90f6             [ 3] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d137 :                       df_tk_not_eos
d137 : 18               [ 2] 	clc
d138 :                       df_tk_expre_err
d138 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d139 :                       df_tk_tok_expression
d139 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
d13c : 4c2dd1           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d13f :                       df_tk_isEOS
d13f : a93a             [ 2] 	lda #':'
d141 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d144 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d146 : a5b3             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d148 : a4b5             [ 3] 	ldy df_nxtstidx
d14a : 99800a           [ 5] 	sta df_tokbuff,y
d14d : 38               [ 2] 	sec
d14e : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d14f :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d14f : a981             [ 2] 	lda #0x81
d151 : 20afce           [ 6] 	jsr df_tk_put_tok
d154 : a901             [ 2] 	lda #1
d156 : 4c39d0           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d159 :                       df_tk_parse_command
                             	; only looking for keywords
d159 : a901             [ 2] 	lda #DFTK_KW
d15b : 2020d2           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank1.s -----------------------------------

d15e : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d160 : 0980             [ 2] 	ora #0x80
d162 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d165 : a5b9             [ 3] 	lda df_symoff
d167 : 20f2d1           [ 6] 	jsr df_tk_exec_parser
d16a : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d16c : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d16f :                       df_tk_parse_command_done
d16f : 18               [ 2] 	clc
d170 :                       df_tk_parse_command_err
d170 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d171 :                       df_lexer_line
d171 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d173 : 85b2             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d175 : 85b3             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d177 : a980             [ 2] 	lda #lo(df_tokbuff)
d179 : 85bc             [ 3] 	sta df_currlin
d17b : a90a             [ 2] 	lda #hi(df_tokbuff)
d17d : 85bd             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d17f : a900             [ 2] 	lda #0
d181 : 20afce           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d184 : 209ece           [ 6] 	jsr df_tk_peek_buf
d187 : 20bdce           [ 6] 	jsr df_tk_isdigit
d18a : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d18c : 2001d2           [ 6] 	jsr df_tk_linenum
d18f : 4c9ad1           [ 3] 	jmp df_tk_body
d192 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d192 : a900             [ 2] 	lda #0
d194 : 20afce           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d197 : 20afce           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d19a :                       df_tk_body
                             	; Offset for next statement
d19a : a5b3             [ 3] 	lda df_tokoff
d19c : 85b5             [ 3] 	sta df_nxtstidx
d19e : a900             [ 2] 	lda #0
d1a0 : 20afce           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d1a3 : 209ece           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d1a6 : 201bcf           [ 6] 	jsr df_tk_isws					; and first character
d1a9 : 9002             [ 3] 	bcc df_tk_skip_1_spc
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank1.s -----------------------------------

d1ab : e6b2             [ 5] 	inc df_linoff					; Don't tokenise this single s
d1ad :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d1ad : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d1b0 : c900             [ 2] 	cmp #0
d1b2 : f03a             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d1b4 : 20face           [ 6] 	jsr df_tk_isproc
d1b7 : 9006             [ 3] 	bcc df_tk_try_command
d1b9 : 204fd1           [ 6] 	jsr df_tk_parse_user_proc
d1bc : 4cd0d1           [ 3] 	jmp df_tk_done
d1bf :                       df_tk_try_command
                             	; try  a keyword
d1bf : 2059d1           [ 6] 	jsr df_tk_parse_command
d1c2 : b002             [ 3] 	bcs	df_tk_try_asm
d1c4 : 900a             [ 3] 	bcc df_tk_done
d1c6 :                       df_tk_try_asm
                             	; try an asm keyword
d1c6 : 2013f5           [ 6] 	jsr df_tk_asm_parse_command
d1c9 : 9005             [ 3] 	bcc df_tk_done
d1cb :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d1cb : 205ed6           [ 6] 	jsr df_tk_assign
d1ce : b020             [ 3] 	bcs	df_tk_parseerror
d1d0 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d1d0 : 203fd1           [ 6] 	jsr df_tk_isEOS
d1d3 : b0c5             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d1d5 : 209ece           [ 6] 	jsr df_tk_peek_buf
d1d8 : c900             [ 2] 	cmp #0
d1da : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
d1dc : a5b3             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d1de : a4b5             [ 3] 	ldy df_nxtstidx
d1e0 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; Get line length
d1e3 : a4b3             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d1e5 : a900             [ 2] 	lda #0
d1e7 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d1ea : 98               [ 2] 	tya
d1eb : 8d800a           [ 4] 	sta df_tokbuff
d1ee :                       df_tk_line_empty
d1ee : 18               [ 2] 	clc
d1ef : 60               [ 6] 	rts
d1f0 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank1.s -----------------------------------

                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d1f2 :                       df_tk_exec_parser
d1f2 : 0a               [ 2] 	asl a
d1f3 : aa               [ 2] 	tax
d1f4 : bdc3d4           [ 4] 	lda df_tk_tokenjmp,x
d1f7 : 85d7             [ 3] 	sta df_tmpptra
d1f9 : bdc4d4           [ 4] 	lda df_tk_tokenjmp+1,x
d1fc : 85d8             [ 3] 	sta df_tmpptra+1
d1fe : 6cd700           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d201 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d201 : 18               [ 2] 	clc
d202 : a900             [ 2] 	lda #lo(df_linbuff)
d204 : 65b2             [ 3] 	adc df_linoff
d206 : aa               [ 2] 	tax
d207 : a90a             [ 2] 	lda #hi(df_linbuff)
d209 : 6900             [ 2] 	adc #0
d20b : a001             [ 2] 	ldy #1			; Decimal format only
d20d : 203ac9           [ 6] 	jsr con_n_to_a
d210 : 18               [ 2] 	clc
d211 : 8a               [ 2] 	txa
d212 : 65b2             [ 3] 	adc df_linoff
d214 : 85b2             [ 3] 	sta df_linoff
                             	; Now save line number
d216 : a579             [ 3] 	lda num_a
d218 : 20afce           [ 6] 	jsr df_tk_put_tok
d21b : a57a             [ 3] 	lda num_a+1
d21d : 4cafce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d220 :                       df_tk_matchtok
                             	; save the mask to check types against
d220 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d221 : a9a2             [ 2] 	lda #lo(df_tokensyms)
d223 : 85b7             [ 3] 	sta df_symtab
d225 : a9d2             [ 2] 	lda #hi(df_tokensyms)
d227 : 85b8             [ 3] 	sta df_symtab+1
d229 : a900             [ 2] 	lda #0
d22b : 85b9             [ 3] 	sta df_symoff
d22d :                       df_tk_checknexttok
                             	; check this token type first
d22d : 68               [ 4] 	pla
d22e : 48               [ 3] 	pha
d22f : a6b9             [ 3] 	ldx df_symoff
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank1.s -----------------------------------

d231 : 3db9d5           [ 4] 	and df_tk_tokentype,x
d234 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
d236 : bdb9d5           [ 4] 	lda df_tk_tokentype,x
d239 : 2908             [ 2] 	and #DFTK_OP
d23b : f009             [ 3] 	beq df_tk_matchtok_skip_op
d23d : 68               [ 4] 	pla
d23e : 48               [ 3] 	pha
d23f : 2908             [ 2] 	and #DFTK_OP
d241 : 3db9d5           [ 4] 	and df_tk_tokentype,x
d244 : f022             [ 3] 	beq df_tk_symnomatch
d246 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
d246 : a4b2             [ 3] 	ldy df_linoff
d248 : a200             [ 2] 	ldx #0
d24a :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
d24a : a1b7             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
d24c : 48               [ 3] 	pha
d24d : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
d24f : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
d252 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
d254 : 68               [ 4] 	pla
d255 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
d25d : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
d25e : b9000a           [ 4] 	lda df_linbuff,y
d261 : c92e             [ 2] 	cmp #'.'
d263 : f025             [ 3] 	beq df_tk_symfound
d265 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
d267 :                       df_tk_symnomatchp
d267 : 68               [ 4] 	pla
d268 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
d268 : e6b9             [ 5] 	inc df_symoff
d26a :                       df_tk_symnextentry
d26a : a200             [ 2] 	ldx #0
d26c : a1b7             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
d26e : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
d276 : 4c6ad2           [ 3] 	jmp df_tk_symnextentry
d279 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank1.s -----------------------------------

                             
                             	; If next char is not zero then
                             	; try and match with line buffer
d27f : a1b7             [ 6] 	lda (df_symtab,x)
d281 : d0aa             [ 3] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
d283 : 68               [ 4] 	pla
                             	; Zero symbol counter
d284 : a900             [ 2] 	lda #0
d286 : 85b9             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
d288 : 38               [ 2] 	sec
d289 : 60               [ 6] 	rts
d28a :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
d28a : c8               [ 2] 	iny
                             	; First mask off MSB
d28b : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
d28d : 20e7ce           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
d290 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
d292 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
d295 : 20f4ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
d298 : b0ce             [ 3] 	bcs df_tk_symnomatch
d29a :                       df_tk_symfound_final
                             	; pop mask off stack
d29a : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
d29b : 84b2             [ 3] 	sty df_linoff
d29d : a5b9             [ 3] 	lda df_symoff
d29f : aa               [ 2] 	tax
d2a0 : 18               [ 2] 	clc
d2a1 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank1.s -----------------------------------

                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
d2a2 :                       df_tokensyms
d2a2 : 80                    	db	0x80						; Implicit numeric assign
d2a3 : 80                    	db	0x80						; Implicit call procedure
d2a4 : bb                    	db	";"+0x80					; Comment
d2a5 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
d2ac : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
d2b3 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
d2b8 : 6465e6                	db	"de",'f'+0x80				; def_subname
d2bb : 656e646465e6          	db	"endde",'f'+0x80			; enddef
d2c1 : 7265747572ee          	db	"retur",'n'+0x80			; return
d2c7 : 61626f72f4            	db	"abor",'t'+0x80				; abort
d2cc : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
d2d1 : 6469ed                	db	"di",'m'+0x80				; dim varlist
d2d4 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
d2da : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
d2df : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
d2e2 : 6e6578f4              	db	"nex",'t'+0x80				; next
d2e6 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
d2eb : 77656ee4              	db	"wen",'d'+0x80				; wend
d2ef : 69e6                  	db	"i",'f'+0x80				; if condition
d2f1 : 656c73e5              	db	"els",'e'+0x80				; else
d2f5 : 656e6469e6            	db	"endi",'f'+0x80				; endif
d2fa : 656c69e6              	db	"eli",'f'+0x80				; elif condition
d2fe : 646174e1              	db	"dat",'a'+0x80				; data
d302 : ff                    	db	0xff						; assembler command (non standard p
d303 : 7275ee                	db	"ru",'n'+0x80				; run
d306 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
d30a : 696e7075f4            	db	"inpu",'t'+0x80				; input var
d30f : 6d6f64e5              	db	"mod",'e'+0x80				; mode n
d313 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
d317 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
d31d : 636cf3                	db	"cl",'s'+0x80				; cls
d320 : 76706f6be5            	db	"vpok",'e'+0x80				; vpoke addr,val
d325 : 7365747664f0          	db	"setvd",'p'+0x80			; setvdp reg,val
d32b : 636f6c6f75f2          	db	"colou",'r'+0x80			; colour reg,val
d331 : 73707269746570..      	db	"spritepa",'t'+0x80			; spritepat patnum,arra
d33a : 73707269746570..      	db	"spritepo",'s'+0x80			; spritepos sprnum,x,y
d343 : 73707269746563..      	db	"spriteco",'l'+0x80			; spritecol sprnum,col
d34c : 7370726974656e..      	db	"spritenm",'e'+0x80			; spritenme sprnum,patn
d355 : 7370726974e5          	db	"sprit",'e'+0x80			; sprite n,x,y,p,c
d35b : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
d35f : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
d363 : 736f756ee4            	db	"soun",'d'+0x80				; sound
d368 : 6d757369e3            	db	"musi",'c'+0x80				; music
d36d : 706c61f9              	db	"pla",'y'+0x80				; play
d371 : 736176e5              	db	"sav",'e'+0x80				; save
d375 : 6c6f61e4              	db	"loa",'d'+0x80				; load
d379 : 6469f2                	db	"di",'r'+0x80				; dir (compact listing)
d37c : 646972ec              	db	"dir",'l'+0x80				; dirl (long listing)
d380 : 6465ec                	db 	"de",'l'+0x80				; del
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank1.s -----------------------------------

d383 : 726561e4              	db	"rea",'d'+0x80				; read
d387 : 6e65f7                	db	"ne",'w'+0x80				; new
d38a : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
d38f : 776169f4              	db	"wai",'t'+0x80				; wait delay
d393 : 72657365f4            	db	"rese",'t'+0x80				; reset var
d398 : 68697265f3            	db	"hire",'s'+0x80				; hires col
d39d : 706f696ef4            	db	"poin",'t'+0x80				; point x,y,mode
d3a2 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
d3a6 : 68706c6ff4            	db	"hplo",'t'+0x80				; hplot x,y,char|string
d3ab : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
d3b2 : 7069786d6173eb        	db	"pixmas",'k'+0x80			; pixmask n
d3b9 : 706978636fec          	db	"pixco",'l'+0x80			; pixcol n
d3bf : 626ff8                	db	"bo",'x'+0x80				; box x0,y0,x1,y1
d3c2 : 636972636ce5          	db	"circl",'e'+0x80			; circle x0,y0,r
d3c8 : 73686170e5            	db	"shap",'e'+0x80				; shape x,y,coords[]
d3cd : 766c6f61e4            	db	"vloa",'d'+0x80				; vload addr,filename
d3d2 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload mem,hdr,addr,filen
d3d7 : 62736176e5            	db	"bsav",'e'+0x80				; bsave mem,hdr,addr,len,f
d3dc : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
d3e1 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
d3e8 : 63686469f2            	db	"chdi",'r'+0x80				; chdir fname
d3ed : 6d6b6469f2            	db	"mkdi",'r'+0x80				; mkdir fname
d3f2 : 6461746574696de5      	db	"datetim",'e'+0x80			; datetime string output
d3fa : 6e76706f6be5          	db	"nvpok",'e'+0x80			; NV poke addr,val
d400 : 666f6ef4              	db	"fon",'t'+0x80				; font <font file>
d404 : 6465766963e5          	db	"devic",'e'+0x80			; device <devnum>
d40a : 66636c6f73e5          	db	"fclos",'e'+0x80			; fclose
d410 : 72656469ed            	db	"redi",'m'+0x80				; redim varlist
d415 : 7075f4                	db  "pu",'t'+0x80				; put byte 
d418 : 70746c6f61e4          	db	"ptloa",'d'+0x80			; ptload addr,filename
d41e : 7074696e69f4          	db	"ptini",'t'+0x80			; ptinit addr 
d424 : 70747275ee            	db	"ptru",'n'+0x80				; ptrun flag 
                             ; Functions
d429 : 767065656ba8          	db	"vpeek",'('+0x80			; vpeek(x)
d42f : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
d434 : 6465656ba8            	db	"deek",'('+0x80				; deek(x)
d439 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
d43f : 6b6579a8              	db	"key",'('+0x80				; key(x)
d443 : 636872a8              	db	"chr",'('+0x80				; chr(x)
d447 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
d44c : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
d452 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
d456 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
d45a : 6d656da8              	db	"mem",'('+0x80				; mem(x)
d45e : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
d463 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
d467 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
d46f : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
d474 : 686578a8              	db	"hex",'('+0x80				; hex(x)
d478 : 646563a8              	db	"dec","("+0x80				; dec(x)
d47c : 617363a8              	db	"asc",'('+0x80				; asc(x$)
d480 : 76616ca8              	db	"val",'('+0x80				; val(x$)
d484 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
d48a : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
d48e : 61646472a8            	db	"addr",'('+0x80				; addr(var)
d493 : 6e767065656ba8        	db  "nvpeek",'('+0x80			; nvpeek(addr)
d49a : 66637265617465a8      	db	"fcreate",'('+0x80			; success=fcreate(filena
d4a2 : 666f70656ea8          	db	"fopen",'('+0x80			; success=fopen(filename)
d4a8 : 676574a8              	db	"get",'('+0x80				; alias for key()
                             ; Numeric operators, in priority
d4ac : aa                    	db	'*'+0x80					; Multiply
d4ad : af                    	db 	'/'+0x80					; Divide
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank1.s -----------------------------------

d4ae : dc                    	db 	'\\'+0x80					; Modulus
d4af : 3cbc                  	db	'<','<'+0x80				; Shift left
d4b1 : 3ebe                  	db	'>','>'+0x80				; Shift right
d4b3 : ab                    	db 	'+'+0x80					; Add
d4b4 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
d4b5 : a6                    	db '&'+0x80						; AND
d4b6 : fc                    	db '|'+0x80						; OR
d4b7 : de                    	db '^'+0x80						; EOR
d4b8 : 3cbd                  	db "<",'='+0x80					; Less than or equal
d4ba : 3ebd                  	db ">",'='+0x80					; Greater than or equal
d4bc : 3cbe                  	db "<",'>'+0x80					; Not equal
d4be : bc                    	db '<'+0x80						; Less than
d4bf : be                    	db '>'+0x80						; Greater than
d4c0 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
d4c2 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
d4c3 :                       df_tk_tokenjmp
d4c3 : 5ed6                  	dw	df_tk_assign
d4c5 : 33d7                  	dw	df_tk_callproc
d4c7 : 66d6                  	dw	df_tk_comment
d4c9 : c3d6                  	dw	df_tk_println
d4cb : b7d6                  	dw	df_tk_printat
d4cd : c3d6                  	dw	df_tk_print
d4cf : 0bd7                  	dw	df_tk_def
d4d1 : 73d7                  	dw	df_tk_enddef
d4d3 : 75d7                  	dw	df_tk_return
d4d5 : 73d7                  	dw	df_tk_abort
d4d7 : f9d6                  	dw	df_tk_local
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank1.s -----------------------------------

d4d9 : ead6                  	dw	df_tk_dim
d4db : 73d7                  	dw	df_tk_repeat
d4dd : 78d7                  	dw	df_tk_until
d4df : 11d7                  	dw	df_tk_for
d4e1 : 73d7                  	dw	df_tk_next
d4e3 : 78d7                  	dw	df_tk_while
d4e5 : 73d7                  	dw	df_tk_wend
d4e7 : 78d7                  	dw	df_tk_if
d4e9 : 73d7                  	dw	df_tk_else
d4eb : 73d7                  	dw	df_tk_endif
d4ed : 78d7                  	dw	df_tk_elseif
d4ef : c3d6                  	dw	df_tk_data
d4f1 : bff4                  	dw	df_trap_monitor
d4f3 : 73d7                  	dw	df_tk_run
d4f5 : 95d6                  	dw	df_tk_list
d4f7 : d1d6                  	dw	df_tk_input
d4f9 : 78d7                  	dw	df_tk_mode
d4fb : 88d7                  	dw	df_tk_plot
d4fd : 78d7                  	dw	df_tk_cursor
d4ff : 73d7                  	dw	df_tk_cls
d501 : 7cd7                  	dw	df_tk_vpoke
d503 : 7cd7                  	dw	df_tk_setvdp
d505 : 88d7                  	dw	df_tk_colour
d507 : 7cd7                  	dw	df_tk_spritepat
d509 : 88d7                  	dw	df_tk_spritepos
d50b : 7cd7                  	dw	df_tk_spritecol
d50d : 7cd7                  	dw	df_tk_spritenme
d50f : a0d7                  	dw	df_tk_sprite
d511 : 7cd7                  	dw	df_tk_poke
d513 : 7cd7                  	dw	df_tk_doke
d515 : 88d7                  	dw	df_tk_sound
d517 : 94d7                  	dw	df_tk_music
d519 : 94d7                  	dw	df_tk_play
d51b : 78d7                  	dw	df_tk_save
d51d : 78d7                  	dw	df_tk_load
d51f : 73d7                  	dw	df_tk_dir
d521 : 73d7                  	dw	df_tk_dirl
d523 : 78d7                  	dw	df_tk_del
d525 : dbd6                  	dw	df_tk_read
d527 : 73d7                  	dw	df_tk_new
d529 : 88d7                  	dw	df_tk_renum
d52b : 78d7                  	dw	df_tk_wait
d52d : 35d7                  	dw	df_tk_reset
d52f : 78d7                  	dw	df_tk_hires
d531 : 7cd7                  	dw	df_tk_point
d533 : 94d7                  	dw	df_tk_line
d535 : 88d7                  	dw	df_tk_hplot
d537 : 78d7                  	dw	df_tk_pixmode
d539 : 78d7                  	dw	df_tk_pixmask
d53b : 78d7                  	dw	df_tk_pixcol
d53d : 94d7                  	dw	df_tk_box
d53f : 88d7                  	dw	df_tk_circle
d541 : 88d7                  	dw	df_tk_shape
d543 : 7cd7                  	dw	df_tk_vload
d545 : 94d7                  	dw	df_tk_bload
d547 : a0d7                  	dw	df_tk_bsave
d549 : 78d7                  	dw	df_tk_himem
d54b : 73d7                  	dw	df_tk_monitor
d54d : 78d7                  	dw	df_tk_chdir
d54f : 78d7                  	dw	df_tk_mkdir
d551 : 3ed7                  	dw	df_tk_datetime
d553 : 7cd7                  	dw	df_tk_nvpoke
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank1.s -----------------------------------

d555 : 78d7                  	dw	df_tk_font
d557 : 78d7                  	dw	df_tk_device
d559 : 73d7                  	dw	df_tk_fclose
d55b : ead6                  	dw	df_tk_redim
d55d : 78d7                  	dw  df_tk_put
d55f : 7cd7                  	dw	df_tk_ptload
d561 : 7cd7                  	dw	df_tk_ptinit
d563 : 78d7                  	dw	df_tk_ptrun
                             
d565 : 47d7                  	dw	df_tk_vpeek
d567 : 47d7                  	dw	df_tk_peek
d569 : 47d7                  	dw	df_tk_deek
d56b : 47d7                  	dw	df_tk_stick
d56d : 47d7                  	dw	df_tk_key
d56f : 47d7                  	dw	df_tk_chr
d571 : 59d7                  	dw	df_tk_left
d573 : 59d7                  	dw	df_tk_right
d575 : 5fd7                  	dw	df_tk_mid
d577 : 47d7                  	dw	df_tk_len
d579 : 47d7                  	dw	df_tk_mem
d57b : 59d7                  	dw	df_tk_scrn
d57d : 47d7                  	dw	df_tk_rnd
d57f : 50d7                  	dw	df_tk_elapsed
d581 : 65d7                  	dw	df_tk_call
d583 : 47d7                  	dw	df_tk_hex
d585 : 47d7                  	dw	df_tk_dec
d587 : 47d7                  	dw	df_tk_asc
d589 : 47d7                  	dw	df_tk_val
d58b : 59d7                  	dw	df_tk_pixel
d58d : 47d7                  	dw	df_tk_sgn
d58f : 50d7                  	dw	df_tk_addr
d591 : 47d7                  	dw	df_tk_nvpeek
d593 : 47d7                  	dw	df_tk_fcreate
d595 : 47d7                  	dw	df_tk_fopen
d597 : 47d7                  	dw  df_tk_get
                             	
d599 : 73d7                  	dw	df_tk_mult
d59b : 73d7                  	dw	df_tk_div
d59d : 73d7                  	dw	df_tk_mod
d59f : 73d7                  	dw	df_tk_asl
d5a1 : 73d7                  	dw	df_tk_lsr
d5a3 : 73d7                  	dw	df_tk_add
d5a5 : 73d7                  	dw	df_tk_sub
                             	
d5a7 : 73d7                  	dw	df_tk_and
d5a9 : 73d7                  	dw	df_tk_or
d5ab : 73d7                  	dw	df_tk_eor
d5ad : 73d7                  	dw	df_tk_lte
d5af : 73d7                  	dw	df_tk_gte
d5b1 : 73d7                  	dw	df_tk_ne
d5b3 : 73d7                  	dw	df_tk_lt
d5b5 : 73d7                  	dw	df_tk_gt
d5b7 : 73d7                  	dw	df_tk_eq
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank1.s -----------------------------------

                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
d5b9 :                       df_tk_tokentype
d5b9 : 01                    	db	DFTK_KW
d5ba : 01                    	db	DFTK_KW
d5bb : 01                    	db	DFTK_KW
d5bc : 01                    	db	DFTK_KW
d5bd : 01                    	db	DFTK_KW
d5be : 01                    	db	DFTK_KW
d5bf : 01                    	db	DFTK_KW
d5c0 : 01                    	db	DFTK_KW
d5c1 : 01                    	db	DFTK_KW
d5c2 : 01                    	db	DFTK_KW
d5c3 : 01                    	db	DFTK_KW
d5c4 : 01                    	db	DFTK_KW
d5c5 : 01                    	db	DFTK_KW
d5c6 : 01                    	db	DFTK_KW
d5c7 : 01                    	db	DFTK_KW
d5c8 : 01                    	db	DFTK_KW
d5c9 : 01                    	db	DFTK_KW
d5ca : 01                    	db	DFTK_KW
d5cb : 01                    	db	DFTK_KW
d5cc : 01                    	db	DFTK_KW
d5cd : 01                    	db	DFTK_KW
d5ce : 01                    	db	DFTK_KW
d5cf : 01                    	db	DFTK_KW
d5d0 : 01                    	db	DFTK_KW
d5d1 : 01                    	db	DFTK_KW
d5d2 : 01                    	db	DFTK_KW
d5d3 : 01                    	db	DFTK_KW
d5d4 : 01                    	db	DFTK_KW
d5d5 : 01                    	db	DFTK_KW
d5d6 : 01                    	db	DFTK_KW
d5d7 : 01                    	db	DFTK_KW
d5d8 : 01                    	db	DFTK_KW
d5d9 : 01                    	db	DFTK_KW
d5da : 01                    	db	DFTK_KW
d5db : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank1.s -----------------------------------

d5dc : 01                    	db	DFTK_KW
d5dd : 01                    	db	DFTK_KW
d5de : 01                    	db	DFTK_KW
d5df : 01                    	db	DFTK_KW
d5e0 : 01                    	db	DFTK_KW
d5e1 : 01                    	db	DFTK_KW
d5e2 : 01                    	db	DFTK_KW
d5e3 : 01                    	db	DFTK_KW
d5e4 : 01                    	db	DFTK_KW
d5e5 : 01                    	db	DFTK_KW
d5e6 : 01                    	db	DFTK_KW
d5e7 : 01                    	db	DFTK_KW
d5e8 : 01                    	db	DFTK_KW
d5e9 : 01                    	db	DFTK_KW
d5ea : 01                    	db	DFTK_KW
d5eb : 01                    	db	DFTK_KW
d5ec : 01                    	db	DFTK_KW
d5ed : 01                    	db	DFTK_KW
d5ee : 01                    	db	DFTK_KW
d5ef : 01                    	db	DFTK_KW
d5f0 : 01                    	db	DFTK_KW
d5f1 : 01                    	db	DFTK_KW
d5f2 : 01                    	db	DFTK_KW
d5f3 : 01                    	db	DFTK_KW
d5f4 : 01                    	db	DFTK_KW
d5f5 : 01                    	db	DFTK_KW
d5f6 : 01                    	db	DFTK_KW
d5f7 : 01                    	db	DFTK_KW
d5f8 : 01                    	db	DFTK_KW
d5f9 : 01                    	db	DFTK_KW
d5fa : 01                    	db	DFTK_KW
d5fb : 01                    	db	DFTK_KW
d5fc : 01                    	db	DFTK_KW
d5fd : 01                    	db	DFTK_KW
d5fe : 01                    	db	DFTK_KW
d5ff : 01                    	db	DFTK_KW
d600 : 01                    	db	DFTK_KW
d601 : 01                    	db	DFTK_KW
d602 : 01                    	db	DFTK_KW
d603 : 01                    	db	DFTK_KW
d604 : 01                    	db	DFTK_KW
d605 : 01                    	db	DFTK_KW
d606 : 01                    	db	DFTK_KW
d607 : 01                    	db	DFTK_KW
d608 : 01                    	db	DFTK_KW
d609 : 01                    	db	DFTK_KW
                             
d60a : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d60b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d60c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d60d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d60e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d60f : 42                    	db 	DFTK_FN | DFTK_STR
d610 : 42                    	db 	DFTK_FN | DFTK_STR
d611 : 42                    	db 	DFTK_FN | DFTK_STR
d612 : 42                    	db 	DFTK_FN | DFTK_STR
d613 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d614 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d615 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d616 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d617 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d618 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank1.s -----------------------------------

d619 : 42                    	db 	DFTK_FN | DFTK_STR
d61a : 42                    	db 	DFTK_FN | DFTK_STR
d61b : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d61c : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d61d : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d61e : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d61f : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d620 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d621 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d622 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d623 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
d624 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d625 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d626 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d627 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d628 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d629 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
d62a : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
d62b : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d62c : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d62d : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d62e : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d62f : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d630 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d631 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d632 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d633 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-1 HOMEBREW COMPUTER
                             ;*	Hardware and software design by Dolo Miah
                             ;*	Copyright 2014-18
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank1.s -----------------------------------

                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;* General routine to tokenise a mandatory variab
d634 :                       df_tk_variable
d634 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d637 : 209ece           [ 6] 	jsr df_tk_peek_buf
d63a : 20e7ce           [ 6] 	jsr df_tk_isalpha
d63d : 901d             [ 3] 	bcc df_tk_error
d63f : a900             [ 2] 	lda #0
d641 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
d642 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
d642 : a980             [ 2] 	lda #0x80
d644 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
d647 : 2034d6           [ 6] 	jsr df_tk_variable
d64a : 20e6cf           [ 6] 	jsr df_tk_var
                             	; next char sound be =
d64d : a93d             [ 2] 	lda #'='
d64f : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; skip more ws
d652 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; should not be at end of line
d655 : 209ece           [ 6] 	jsr df_tk_peek_buf
d658 : f002             [ 3] 	beq df_tk_parse_ass_err
d65a : 18               [ 2] 	clc
d65b : 60               [ 6] 	rts
d65c :                       df_tk_parse_ass_err
d65c :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
d65e :                       df_tk_assign
d65e : 2042d6           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
d661 : 202dd1           [ 6] 	jsr df_tk_expression
d664 : 18               [ 2] 	clc
d665 : 60               [ 6] 	rts
                             
                             
d666 :                       df_tk_comment
                             	; copy all subsequent chars to token
d666 : 20a4ce           [ 6] 	jsr df_tk_get_buf
d669 : f005             [ 3] 	beq df_tk_comment_done
d66b : 20afce           [ 6] 	jsr df_tk_put_tok
d66e : 80f6             [ 3] 	bra df_tk_comment
d670 :                       df_tk_comment_done
d670 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank1.s -----------------------------------

d671 : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
d672 :                       df_tk_listp_procname
                             	; try and find the first proc
d672 : a95f             [ 2] 	lda #'_'
d674 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d677 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
d679 : 209ece           [ 6] 	jsr df_tk_peek_buf
d67c : 20e7ce           [ 6] 	jsr df_tk_isalpha
d67f : 9012             [ 3] 	bcc df_tk_listp_procname_err
d681 :                       df_tk_listp_procname_ch
d681 : 209ece           [ 6] 	jsr df_tk_peek_buf
d684 : 20f4ce           [ 6] 	jsr df_tk_isalphanum
d687 : 9008             [ 3] 	bcc df_tk_listp_procname_ok
d689 : 20a4ce           [ 6] 	jsr df_tk_get_buf
d68c : 20afce           [ 6] 	jsr df_tk_put_tok
d68f : 80f0             [ 3] 	bra df_tk_listp_procname_ch
d691 :                       df_tk_listp_procname_ok
d691 : 18               [ 2] 	clc
d692 : 60               [ 6] 	rts
d693 :                       df_tk_listp_procname_err
d693 : 38               [ 2] 	sec
d694 : 60               [ 6] 	rts
                             
d695 :                       df_tk_list
d695 : 2072d6           [ 6] 	jsr df_tk_listp_procname
                             	; if not found try '*' or normal list
d698 : b007             [ 3] 	bcs df_tk_list_procs
                             	; the '-' allows to list to end
d69a : a92d             [ 2] 	lda #'-'
                             	; find and add if it exists
d69c : 2030cf           [ 6] 	jsr df_tk_expect_tok
d69f : 8014             [ 3] 	bra df_tk_list_done
                             	; '*' means list procs
d6a1 :                       df_tk_list_procs
                             	; try and find the first proc
d6a1 : a92a             [ 2] 	lda #'*'
d6a3 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d6a6 : 900d             [ 3] 	bcc df_tk_list_done
                             	; else normal line number
d6a8 :                       df_tk_list_line
                             	; tokenise an expression
d6a8 : 202dd1           [ 6] 	jsr df_tk_expression
                             	; if not at the end then keep going
d6ab : a92c             [ 2] 	lda #','
d6ad : 2030cf           [ 6] 	jsr df_tk_expect_tok
d6b0 : b003             [ 3] 	bcs df_tk_list_done
                             	; else get the next expression
d6b2 : 202dd1           [ 6] 	jsr df_tk_expression	
d6b5 :                       df_tk_list_done
d6b5 : 18               [ 2] 	clc
d6b6 : 60               [ 6] 	rts
                             
d6b7 :                       df_tk_printat
                             	; Must get 2 parms for x,y
d6b7 : 207cd7           [ 6] 	jsr df_tk_2parms
                             	; if not at the end then keep going
d6ba : a92c             [ 2] 	lda #','
d6bc : 2030cf           [ 6] 	jsr df_tk_expect_tok
d6bf : 9002             [ 3] 	bcc df_tk_print
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank1.s -----------------------------------

                             	; else done
d6c1 : 18               [ 2] 	clc
d6c2 : 60               [ 6] 	rts
d6c3 :                       df_tk_data
d6c3 :                       df_tk_println
d6c3 :                       df_tk_print
d6c3 :                       df_tk_asm_db
d6c3 :                       df_tk_asm_dw
                             	; tokenise an expression
d6c3 : 202dd1           [ 6] 	jsr df_tk_expression
                             	; is there more to come?
d6c6 : a92c             [ 2] 	lda #','
d6c8 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d6cb : b002             [ 3] 	bcs df_tk_print_done
d6cd : 80f4             [ 3] 	bra df_tk_print
d6cf :                       df_tk_print_done
d6cf : 18               [ 2] 	clc
d6d0 : 60               [ 6] 	rts
                             
d6d1 :                       df_tk_input
d6d1 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d6d4 : 2034d6           [ 6] 	jsr df_tk_variable
d6d7 : 20e6cf           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
d6da : 60               [ 6] 	rts
                             	
d6db :                       df_tk_read
                             	; tokenise a variable
d6db : 2034d6           [ 6] 	jsr df_tk_variable
d6de : 20e6cf           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
d6e1 : a92c             [ 2] 	lda #','
d6e3 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d6e6 : 90f3             [ 3] 	bcc df_tk_read
d6e8 : 18               [ 2] 	clc
d6e9 : 60               [ 6] 	rts
                             
d6ea :                       df_tk_dim
d6ea :                       df_tk_redim
                             	; tokenise a variable
d6ea : 2034d6           [ 6] 	jsr df_tk_variable
d6ed : 202ed0           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
d6f0 : a92c             [ 2] 	lda #','
d6f2 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d6f5 : 90f3             [ 3] 	bcc df_tk_dim
d6f7 : 18               [ 2] 	clc
d6f8 : 60               [ 6] 	rts
                             
d6f9 :                       df_tk_local
d6f9 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d6fc : 2034d6           [ 6] 	jsr df_tk_variable
d6ff : 2018d0           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
d702 : a92c             [ 2] 	lda #','
d704 : 2030cf           [ 6] 	jsr df_tk_expect_tok
d707 : 90f0             [ 4] 	bcc df_tk_local
d709 : 18               [ 2] 	clc
d70a : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank1.s -----------------------------------

                             ; A = 0 : Def
                             ; A = 1 : Call
d70b :                       df_tk_def
d70b : a900             [ 2] 	lda #0
d70d : 2039d0           [ 6] 	jsr df_tk_proc
d710 : 60               [ 6] 	rts
                             
                             
                             ; syntax : for %a=1,10,1
d711 :                       df_tk_for
d711 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
d714 : a901             [ 2] 	lda #DFVVT_INT
d716 : 20e6cf           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
d719 : a93d             [ 2] 	lda #'='
d71b : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; starting value
d71e : 202dd1           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d721 : a92c             [ 2] 	lda #','
d723 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; ending value
d726 : 202dd1           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d729 : a92c             [ 2] 	lda #','
d72b : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	
                             	; step value
d72e : 202dd1           [ 6] 	jsr df_tk_expression
d731 :                       df_tk_for_done
d731 : 18               [ 2] 	clc
d732 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
d733 :                       df_tk_callproc
d733 : 38               [ 2] 	sec
d734 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
d735 :                       df_tk_reset
d735 : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d738 : a901             [ 2] 	lda #DFVVT_INT
d73a : 20e6cf           [ 6] 	jsr df_tk_var
d73d : 60               [ 6] 	rts
                             
                             ; date time expects a string variable only
d73e :                       df_tk_datetime
d73e : 2000cf           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d741 : a904             [ 2] 	lda #DFVVT_STR
d743 : 20e6cf           [ 6] 	jsr df_tk_var
d746 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank1.s -----------------------------------

                             
                             ; These functions expect 1 parmeter
d747 :                       df_tk_len
d747 :                       df_tk_chr
d747 :                       df_tk_key
d747 :                       df_tk_get
d747 :                       df_tk_stick
d747 :                       df_tk_deek
d747 :                       df_tk_vpeek
d747 :                       df_tk_peek
d747 :                       df_tk_nvpeek
d747 :                       df_tk_mem
d747 :                       df_tk_rnd
d747 :                       df_tk_hex
d747 :                       df_tk_dec
d747 :                       df_tk_asc
d747 :                       df_tk_val
d747 :                       df_tk_sgn
d747 :                       df_tk_fcreate
d747 :                       df_tk_fopen
d747 : 202dd1           [ 6] 	jsr df_tk_expression
d74a :                       df_tk_closebrkt
d74a : a929             [ 2] 	lda #')'
d74c : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
d74f : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
d750 :                       df_tk_addr
d750 :                       df_tk_elapsed
d750 : 2034d6           [ 6] 	jsr df_tk_variable
d753 : 20e6cf           [ 6] 	jsr df_tk_var
                             	; must have close braket
d756 : 4c4ad7           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
d759 :                       df_tk_left
d759 :                       df_tk_right
d759 :                       df_tk_scrn
d759 :                       df_tk_pixel
d759 : 207cd7           [ 6] 	jsr df_tk_2parms
d75c : 4c4ad7           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 3 parameters
d75f :                       df_tk_mid
d75f : 2088d7           [ 6] 	jsr df_tk_3parms
d762 : 4c4ad7           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
d765 :                       df_tk_call
d765 : 207cd7           [ 6] 	jsr df_tk_2parms
d768 : a92c             [ 2] 	lda #','
d76a : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
d76d : 207cd7           [ 6] 	jsr df_tk_2parms
d770 : 4c4ad7           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
d773 :                       df_tk_else
d773 :                       df_tk_endif
d773 :                       df_tk_enddef
d773 :                       df_tk_abort
d773 :                       df_tk_repeat
d773 :                       df_tk_next
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank1.s -----------------------------------

d773 :                       df_tk_wend
d773 :                       df_tk_run
d773 :                       df_tk_add
d773 :                       df_tk_sadd
d773 :                       df_tk_dir
d773 :                       df_tk_dirl
d773 :                       df_tk_cls
d773 :                       df_tk_new
d773 :                       df_tk_mult
d773 :                       df_tk_div
d773 :                       df_tk_mod
d773 :                       df_tk_asl
d773 :                       df_tk_lsr
d773 :                       df_tk_sub
d773 :                       df_tk_and
d773 :                       df_tk_or
d773 :                       df_tk_eor
d773 :                       df_tk_lte
d773 :                       df_tk_lt
d773 :                       df_tk_gte
d773 :                       df_tk_gt
d773 :                       df_tk_ne
d773 :                       df_tk_eq
d773 :                       df_tk_monitor
d773 :                       df_tk_fclose
                             ;df_tk_retsub
d773 : 18               [ 2] 	clc
d774 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
d775 :                       df_tk_return
d775 : 4c2dd1           [ 3] 	jmp df_tk_expression
                             
                             ; These commands expect 1 parameter	
d778 :                       df_tk_while
d778 :                       df_tk_until
d778 :                       df_tk_if
d778 :                       df_tk_elseif
d778 :                       df_tk_wait
d778 :                       df_tk_cursor
d778 :                       df_tk_mode
d778 :                       df_tk_del
d778 :                       df_tk_chdir
d778 :                       df_tk_mkdir
d778 :                       df_tk_hires
d778 :                       df_tk_load
d778 :                       df_tk_save
d778 :                       df_tk_pixmode
d778 :                       df_tk_pixmask
d778 :                       df_tk_pixcol
d778 :                       df_tk_put
d778 :                       df_tk_himem
d778 :                       df_tk_font
d778 :                       df_tk_device
d778 :                       df_tk_ptrun
                             ;df_tk_goto
                             ;df_tk_gosub
                             
d778 :                       df_tk_asm_org
d778 :                       df_tk_asm_opt
d778 :                       df_tk_asm_ds
                             
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank1.s -----------------------------------

                             	; first parm
d778 : 202dd1           [ 6] 	jsr df_tk_expression
d77b : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
d77c :                       df_tk_setvdp
d77c :                       df_tk_spritepat
d77c :                       df_tk_spritecol
d77c :                       df_tk_spritenme
d77c :                       df_tk_vpoke
d77c :                       df_tk_poke
d77c :                       df_tk_doke
d77c :                       df_tk_nvpoke
d77c :                       df_tk_point
d77c :                       df_tk_vload
d77c :                       df_tk_ptload
d77c :                       df_tk_ptinit
d77c :                       df_tk_2parms
                             	; first parm
d77c : 202dd1           [ 6] 	jsr df_tk_expression
d77f : a92c             [ 2] 	lda #','
d781 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise second parm
d784 : 202dd1           [ 6] 	jsr df_tk_expression
d787 : 60               [ 6] 	rts
                             
                             ; these commands expect 3 numeric parameters
d788 :                       df_tk_hplot
d788 :                       df_tk_plot
d788 :                       df_tk_circle
d788 :                       df_tk_sound
d788 :                       df_tk_colour
d788 :                       df_tk_spritepos
d788 :                       df_tk_shape
d788 :                       df_tk_renum
d788 :                       df_tk_3parms
d788 : 207cd7           [ 6] 	jsr df_tk_2parms
d78b : a92c             [ 2] 	lda #','
d78d : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise third parm
d790 : 202dd1           [ 6] 	jsr df_tk_expression
d793 : 60               [ 6] 	rts
                             
                             ; these commands expect 4 numeric parameters
d794 :                       df_tk_play
d794 :                       df_tk_music
d794 :                       df_tk_line
d794 :                       df_tk_box
d794 :                       df_tk_bload
d794 :                       df_tk_4parms
d794 : 207cd7           [ 6] 	jsr df_tk_2parms
d797 : a92c             [ 2] 	lda #','
d799 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
d79c : 207cd7           [ 6] 	jsr df_tk_2parms
d79f : 60               [ 6] 	rts
                             
                             ; these commands expect 5 numeric parameters
d7a0 :                       df_tk_sprite
d7a0 :                       df_tk_bsave
d7a0 :                       df_tk_5parms
d7a0 : 2094d7           [ 6] 	jsr df_tk_4parms
d7a3 : a92c             [ 2] 	lda #','
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank1.s -----------------------------------

d7a5 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
d7a8 : 202dd1           [ 6] 	jsr df_tk_expression
d7ab : 60               [ 6] 	rts
                             
                             
                             
d7ac :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
d7ac :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
d7ac :                       df_pg_find_line
d7ac : a49b             [ 3] 	ldy df_prgstrt		; num_tmp contains starting poin
d7ae : 8485             [ 3] 	sty num_tmp
d7b0 : a49c             [ 3] 	ldy df_prgstrt+1
d7b2 : 8486             [ 3] 	sty num_tmp+1
d7b4 : 8679             [ 3] 	stx num_a			; num_a contains the line number to 
d7b6 : 857a             [ 3] 	sta num_a+1
d7b8 :                       df_pg_check_next_line	; Also used during runtime 
d7b8 : a585             [ 3] 	lda num_tmp
d7ba : c59d             [ 3] 	cmp df_prgend
d7bc : d011             [ 3] 	bne df_pg_check_line
d7be : a586             [ 3] 	lda num_tmp+1
d7c0 : c59e             [ 3] 	cmp df_prgend+1
d7c2 : d00b             [ 3] 	bne df_pg_check_line
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------------------- bank1.s -----------------------------------

d7c4 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
d7c4 : a200             [ 2] 	ldx #0
d7c6 : a185             [ 6] 	lda (num_tmp,x)
d7c8 : a8               [ 2] 	tay
d7c9 : a685             [ 3] 	ldx num_tmp
d7cb : a586             [ 3] 	lda num_tmp+1
d7cd : 38               [ 2] 	sec
d7ce : 60               [ 6] 	rts
d7cf :                       df_pg_check_line
d7cf : 38               [ 2] 	sec					; Do a trial subtract of
d7d0 : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
d7d2 : a579             [ 3] 	lda num_a
d7d4 : f185             [ 5] 	sbc (num_tmp),y
d7d6 : 8587             [ 3] 	sta num_tmp+2		; Partial result of sbc
d7d8 : c8               [ 2] 	iny
d7d9 : a57a             [ 3] 	lda num_a+1
d7db : f185             [ 5] 	sbc (num_tmp),y
d7dd : 0587             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
d7df : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
d7e1 : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
d7e3 : a200             [ 2] 	ldx #0
d7e5 : 18               [ 2] 	clc
d7e6 : a585             [ 3] 	lda num_tmp
d7e8 : 6185             [ 6] 	adc (num_tmp,x)
d7ea : 8585             [ 3] 	sta num_tmp
d7ec : 90ca             [ 3] 	bcc df_pg_check_next_line
d7ee : e686             [ 5] 	inc num_tmp+1
d7f0 : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
d7f2 :                       df_pr_line_match
d7f2 : a200             [ 2] 	ldx #0
d7f4 : a185             [ 6] 	lda (num_tmp,x)
d7f6 : a8               [ 2] 	tay
d7f7 : a685             [ 3] 	ldx num_tmp
d7f9 : a586             [ 3] 	lda num_tmp+1
d7fb : 18               [ 2] 	clc
d7fc : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d7fd :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
d7fd : 8679             [ 3] 	stx num_a
d7ff : 857a             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
d801 : a59d             [ 3] 	lda df_prgend
d803 : 8581             [ 3] 	sta num_x
d805 : a59e             [ 3] 	lda df_prgend+1
d807 : 8582             [ 3] 	sta num_x+1	
d809 :                       df_pg_insert_byte
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------------------- bank1.s -----------------------------------

                             	; Move a byte from the current top
d809 : a200             [ 2] 	ldx #0
d80b : a181             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
d80d : 9181             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
d80f : a581             [ 3] 	lda num_x
d811 : c579             [ 3] 	cmp num_a
d813 : d012             [ 3] 	bne df_pg_insert_next_byte
d815 : a582             [ 3] 	lda num_x+1
d817 : c57a             [ 3] 	cmp num_a+1
d819 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
d81b : 18               [ 2] 	clc
d81c : 98               [ 2] 	tya
d81d : 659d             [ 3] 	adc df_prgend
d81f : 859d             [ 3] 	sta df_prgend
                             	_bcc 2
                             
d823 : e69e             [ 5] 	inc df_prgend+1
d825 : 18               [ 2] 	clc
d826 : 60               [ 6] 	rts	; C=0
d827 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
d834 : 4c09d8           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d837 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
d837 : 8679             [ 3] 	stx num_a
d839 : 857a             [ 3] 	sta num_a+1
d83b : a200             [ 2] 	ldx #0	; No indirect indexing
d83d :                       df_pg_delete_byte
                             	; Move a byte from current+Y
d83d : b179             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
d83f : 8179             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
d841 : a579             [ 3] 	lda num_a
d843 : c59d             [ 3] 	cmp df_prgend
d845 : d017             [ 3] 	bne df_pg_delete_next_byte
d847 : a57a             [ 3] 	lda num_a+1
d849 : c59e             [ 3] 	cmp df_prgend+1
d84b : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
d84d : 8479             [ 3] 	sty num_a
d84f : 38               [ 2] 	sec
d850 : a59d             [ 3] 	lda df_prgend
d852 : e579             [ 3] 	sbc num_a
d854 : 859d             [ 3] 	sta df_prgend
d856 : a59e             [ 3] 	lda df_prgend+1
d858 : e900             [ 2] 	sbc #0
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------------------- bank1.s -----------------------------------

d85a : 859e             [ 3] 	sta df_prgend+1
d85c : 18               [ 2] 	clc
d85d : 60               [ 6] 	rts
d85e :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
d864 : 4c3dd8           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
d867 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input into df_linbuff
d867 : a200             [ 2] 	ldx #lo(df_linbuff)
d869 : a90a             [ 2] 	lda #hi(df_linbuff)
d86b : a078             [ 2] 	ldy #120
d86d : 20cfc5           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
d870 : 98               [ 2] 	tya
d871 : d002             [ 3] 	bne df_pg_inputline_ok
d873 : 38               [ 2] 	sec
d874 : 60               [ 6] 	rts
d875 :                       df_pg_inputline_ok
d875 : 18               [ 2] 	clc
d876 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
d877 :                       df_pg_dflat
                             	; reset stack pointer
d877 : a2ff             [ 2] 	ldx #255
d879 : 9a               [ 2] 	txs
                             
                             	; error handler address
d87a : a92e             [ 2] 	lda #lo(df_trap_error)
d87c : 8596             [ 3] 	sta df_pc
d87e : a9f4             [ 2] 	lda #hi(df_trap_error)
d880 : 8597             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
d882 :                       df_pg_prompt
d882 : a220             [ 2] 	ldx #lo(df_pg_prompt_msg)
d884 : a9d9             [ 2] 	lda #hi(df_pg_prompt_msg)
d886 : 200bc6           [ 6] 	jsr io_print_line
d889 : a900             [ 2] 	lda #0
d88b : 8594             [ 3] 	sta df_immed
d88d :                       df_pg_getcommand
                             	; current line is the token buffer when editing
d88d : a980             [ 2] 	lda #lo(df_tokbuff)
d88f : 85bc             [ 3] 	sta df_currlin
d891 : a90a             [ 2] 	lda #hi(df_tokbuff)
d893 : 85bd             [ 3] 	sta df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------------------- bank1.s -----------------------------------

d895 : 38               [ 2] 	sec
d896 : 2067d8           [ 6] 	jsr df_pg_inputline
d899 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
d89b : ad000a           [ 4] 	lda df_linbuff		; Check if first char is ! to es
d89e : c921             [ 2] 	cmp #'!'
d8a0 : d005             [ 3] 	bne df_pg_skip_mon
d8a2 : 200ec5           [ 6] 	jsr _cmd_immediate	; If so call monitor immediat
d8a5 : 80db             [ 3] 	bra df_pg_prompt
d8a7 :                       df_pg_skip_mon
d8a7 : 20c0d8           [ 6] 	jsr df_pg_tokenise
d8aa : a594             [ 3] 	lda df_immed
d8ac : f0df             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
d8ae : 2027d9           [ 6] 	jsr df_initrun
                             	; run from tokbuff
d8b1 : a280             [ 2] 	ldx #lo(df_tokbuff)
d8b3 : a90a             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
d8b5 : a003             [ 2] 	ldy #3
                             ;	sty df_exeoff
                             	; init currlin
d8b7 : 20b4dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
d8ba : 20c5dc           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
d8bd : 4c82d8           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
d8c0 :                       df_pg_tokenise
d8c0 : a900             [ 2] 	lda #0
d8c2 : 8593             [ 3] 	sta errno
d8c4 : 2071d1           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
d8c7 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d8ca : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
d8cd : d00f             [ 3] 	bne df_pg_line_number
                             	; check if line empty
d8cf : ad800a           [ 4] 	lda df_tokbuff
d8d2 : f009             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
                             	; run the line in immediate mode
d8d4 : a901             [ 2] 	lda #1
d8d6 : 8594             [ 3] 	sta df_immed
                             	; Zero out text line buffer
d8d8 : a900             [ 2] 	lda #0
d8da : 8d000a           [ 4] 	sta df_linbuff
d8dd :                       df_pg_nothing
d8dd : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
d8de :                       df_pg_line_number
                             	; Check if this line exists
d8de : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d8e1 : aa               [ 2] 	tax
d8e2 : ad820a           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
d8e5 : 20acd7           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
d8e8 : 8539             [ 3] 	sta tmp_d
d8ea : 8a               [ 2] 	txa
d8eb : 48               [ 3] 	pha
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------------------- bank1.s -----------------------------------

d8ec : a539             [ 3] 	lda tmp_d
d8ee : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
d8ef : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
d8f1 : 2037d8           [ 6] 	jsr df_pg_delete_block
d8f4 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
d8f4 : ad800a           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
d8f7 : 48               [ 3] 	pha
d8f8 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
d8fa : 68               [ 4] 	pla
d8fb : 68               [ 4] 	pla
d8fc : 68               [ 4] 	pla
d8fd : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
d8fe :                       df_pg_insertline
                             	; Restore previously saved length
d8fe : 68               [ 4] 	pla
d8ff : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
d900 : 68               [ 4] 	pla
d901 : 8539             [ 3] 	sta tmp_d
d903 : 68               [ 4] 	pla
d904 : aa               [ 2] 	tax
d905 : a539             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
d90a : 20fdd7           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
d90d : 68               [ 4] 	pla
d90e : a8               [ 2] 	tay
d90f : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
d910 : 68               [ 4] 	pla
d911 : aa               [ 2] 	tax
d912 : 8679             [ 3] 	stx num_a
d914 : 68               [ 4] 	pla
d915 : 857a             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
d917 :                       df_pg_insertlinbyte
d917 : b9800a           [ 4] 	lda df_tokbuff,y
d91a : 9179             [ 5] 	sta (num_a),y
d91c : 88               [ 2] 	dey
d91d : 10f8             [ 3] 	bpl df_pg_insertlinbyte
d91f : 60               [ 6] 	rts
                             	
d920 :                       df_pg_prompt_msg
d920 : 52656164790d00        	db "Ready",UTF_CR,0
                             
d927 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------------------- bank1.s -----------------------------------

                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d927 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
d927 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
d927 : a910             [ 2] 	lda #0x10
d929 : 8592             [ 3] 	sta df_checkmsk
d92b : 8591             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
                             
d943 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
d945 : 86ac             [ 3] 	stx df_rtstop
                             	; make X=0
d947 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
d948 : 86ad             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
d94a : 86cb             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
d94c : 86c9             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
d94e : 2052d9           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
d951 : 60               [ 6] 	rts
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------------------- bank1.s -----------------------------------

                             ;* Initialise vvt
                             ;****************************************
d952 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d95a : a200             [ 2] 	ldx #0
d95c :                       df_rt_init_vvt_slot
d95c : a5d7             [ 3] 	lda df_tmpptra
d95e : c5a3             [ 3] 	cmp df_vvtstrt
d960 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
d962 : a5d8             [ 3] 	lda df_tmpptra+1
d964 : c5a4             [ 3] 	cmp df_vvtstrt+1
d966 : f02b             [ 3] 	beq df_rt_init_done
d968 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
d968 : a000             [ 2] 	ldy #0
d96a : b1d7             [ 5] 	lda (df_tmpptra),y
d96c : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_PTR
d96e : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
d970 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
d971 : a900             [ 2] 	lda #0
d973 : 91d7             [ 5] 	sta (df_tmpptra),y
d975 : c8               [ 2] 	iny
d976 : 91d7             [ 5] 	sta (df_tmpptra),y
d978 : c8               [ 2] 	iny
d979 : 91d7             [ 5] 	sta (df_tmpptra),y
d97b : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
                             ;	lda (df_tmpptra,x)
d97c : b2d7             [ 5] 	lda (df_tmpptra)
d97e : 2940             [ 2] 	and #DFVVT_PROC
d980 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
d982 : a900             [ 2] 	lda #0
d984 : 91d7             [ 5] 	sta (df_tmpptra),y
d986 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
                             	_adcZPByte df_tmpptra,#8
                             
                             ;	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
d991 : 80c9             [ 3] 	bra df_rt_init_vvt_slot 	; Don't rely on bcc
d993 :                       df_rt_init_done
d993 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
d994 :                       df_rt_getnval
                             	; evaluate the expression
d994 : 209ad9           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
d997 : 4c02f3           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------------------- bank1.s -----------------------------------

                             ;* Push result to operator stack
                             ;****************************************
d99a :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
d99a : a900             [ 2] 	lda #0
d99c : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
d99d :                       df_rt_neval_optk
d99d : a4be             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
d99f : c4b5             [ 3] 	cpy df_nxtstidx
d9a1 : f03a             [ 3] 	beq df_rt_neval_process
d9a3 : b1bc             [ 5] 	lda (df_currlin),y		; Get the byte which could b
d9a5 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
d9a7 : c920             [ 2] 	cmp #DFTK_ESCVAL		; >=32 means it's an normal ch
d9a9 : b007             [ 3] 	bcs df_rt_neval_chr
d9ab :                       df_rt_neval_esc
d9ab : 201fda           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
d9ae : e6be             [ 5] 	inc df_exeoff
d9b0 : d0eb             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
d9b2 :                       df_rt_neval_chr
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
d9b2 : c92c             [ 2] 	cmp #','
d9b4 : f027             [ 3] 	beq df_rt_neval_process
d9b6 : c95d             [ 2] 	cmp #']'
d9b8 : f023             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
d9ba : c929             [ 2] 	cmp #')'
d9bc : f01f             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
d9be : e6be             [ 5] 	inc df_exeoff				; Next byte 
                             	; if bracket then evaluate expression recursivel
d9c0 : c928             [ 2] 	cmp #'('
d9c2 : d0d9             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
d9c4 : 209ad9           [ 6] 	jsr df_rt_neval
                             	; move to next byte
d9c7 : e6be             [ 5] 	inc df_exeoff
d9c9 : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
d9cb :                       df_rt_neval_tk
d9cb : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
d9cd : aa               [ 2] 	tax
d9ce : bdb9d5           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
d9d1 : 48               [ 3] 	pha
d9d2 : 2908             [ 2] 	and #DFTK_OP
d9d4 : d01c             [ 3] 	bne df_rt_neval_tk_opp
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------------------- bank1.s -----------------------------------

                             	; check if fn
d9d6 : 68               [ 4] 	pla
d9d7 : 2902             [ 2] 	and #DFTK_FN
d9d9 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
d9dd :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
d9dd : 68               [ 4] 	pla
d9de : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
d9e0 : 202bdd           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
d9e3 : 4cddd9           [ 3] 	jmp df_rt_neval_process
d9e6 :                       df_rt_neval_done
d9e6 : 60               [ 6] 	rts
                             
d9e7 :                       df_rt_neval_tk_fn
d9e7 : 18               [ 2] 	clc
d9e8 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
d9e9 : e6be             [ 5] 	inc df_exeoff
d9eb : 202bdd           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
d9ee :                       df_rt_neval_nextbyte
d9ee : e6be             [ 5] 	inc df_exeoff
d9f0 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
d9f2 :                       df_rt_neval_tk_opp
d9f2 : 68               [ 4] 	pla				; Get A off stack which is the type
d9f3 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
                             	; save current operator index
d9f3 : 86d7             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
d9f5 : 2907             [ 2] 	and #DFTK_OPMSK
d9f7 : 85d9             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
d9f9 : 68               [ 4] 	pla
d9fa : 48               [ 3] 	pha
d9fb : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
d9fc : f01c             [ 4] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
d9fe : bdb9d5           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
da01 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
da03 : c5d9             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------------------- bank1.s -----------------------------------

                             	; if 1 then just pushOp
da05 : f002             [ 3] 	beq df_rt_neval_donow
da07 : b011             [ 3] 	bcs df_rt_neval_pushOp
da09 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
da09 : 68               [ 4] 	pla
da0a : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
da0b : a5d7             [ 3] 	lda df_tmpptra
da0d : 48               [ 3] 	pha
da0e : aa               [ 2] 	tax		; X = current op
da0f : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
da10 : 202bdd           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
da13 : 68               [ 4] 	pla
da14 : aa               [ 2] 	tax
                             	; get the token type in to A
da15 : bdb9d5           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
da18 : d0d9             [ 4] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
da1a :                       df_rt_neval_pushOp
                             	; push the operator
da1a : a5d7             [ 3] 	lda df_tmpptra
da1c : 48               [ 3] 	pha
                             	; move to next byte
da1d : d0cf             [ 4] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
da1f :                       df_rt_eval_esc
da1f : 0a               [ 2] 	asl a
da20 : aa               [ 2] 	tax
da21 : 7c24da           [ 6] 	jmp (df_rt_eval_esc_tab,x)
                             ;	lda df_rt_eval_esc_tab,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_eval_esc_tab+1,x
                             ;	sta df_tmpptra+1
                             ;	jmp (df_tmpptra)
                             
da24 :                       df_rt_eval_esc_tab
da24 : e1da                  	dw df_rt_eval_chr
da26 : edda                  	dw df_rt_eval_reserved
da28 : edda                  	dw df_rt_eval_reserved
da2a : edda                  	dw df_rt_eval_reserved
da2c : edda                  	dw df_rt_eval_reserved
da2e : edda                  	dw df_rt_eval_reserved	; no such thing as bytdec
da30 : e1da                  	dw df_rt_eval_bythex
da32 : e1da                  	dw df_rt_eval_bytbin
da34 : edda                  	dw df_rt_eval_reserved
da36 : e1da                  	dw df_rt_eval_intdec
da38 : e1da                  	dw df_rt_eval_inthex
da3a : e1da                  	dw df_rt_eval_intbin
da3c : edda                  	dw df_rt_eval_reserved
da3e : edda                  	dw df_rt_eval_reserved
da40 : edda                  	dw df_rt_eval_reserved
da42 : edda                  	dw df_rt_eval_reserved
da44 : efda                  	dw df_rt_eval_strlit
da46 : 34db                  	dw df_rt_eval_var
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------------------- bank1.s -----------------------------------

da48 : 28dc                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
da4a :                       df_rt_seval
da4a : a6b0             [ 3] 	ldx df_sevalptr
da4c : a5b1             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
da4e :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
da4e : 8539             [ 3] 	sta tmp_d
da50 : 48               [ 3] 	pha
da51 : 8a               [ 2] 	txa
da52 : 48               [ 3] 	pha
da53 : a539             [ 3] 	lda tmp_d
                             	; push original destination
da55 : 20d7f2           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_ost_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
da58 :                       df_rt_seval_optk
da58 : a4be             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
da5a : c4b5             [ 3] 	cpy df_nxtstidx
da5c : f069             [ 3] 	beq df_rt_seval_done
                             
da5e : b1bc             [ 5] 	lda (df_currlin),y
da60 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
da62 : c920             [ 2] 	cmp #DFTK_ESCVAL
da64 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
da66 : c92c             [ 2] 	cmp #','
da68 : f05d             [ 3] 	beq df_rt_seval_done
da6a : c929             [ 2] 	cmp #')'
da6c : f059             [ 3] 	beq df_rt_seval_done
da6e : d04a             [ 3] 	bne df_rt_seval_nextbyte
da70 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
da70 : c910             [ 2] 	cmp #DFTK_STRLIT
da72 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
da74 : c911             [ 2] 	cmp #DFTK_VAR
da76 : f028             [ 3] 	beq	df_rt_seval_esc_var
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------------------- bank1.s -----------------------------------

da78 : c912             [ 2] 	cmp #DFTK_PROC
da7a : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
da7e :                       df_rt_seval_tk
da7e : 84be             [ 3] 	sty df_exeoff
da80 : 297f             [ 2] 	and #0x7f
                             	; check if op
da82 : aa               [ 2] 	tax
da83 : bdb9d5           [ 4] 	lda df_tk_tokentype,x
da86 : 2904             [ 2] 	and #DFTK_STROP
da88 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
da8a : bdb9d5           [ 4] 	lda df_tk_tokentype,x
da8d : 2902             [ 2] 	and #DFTK_FN
da8f : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
da93 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
da93 : 8a               [ 2] 	txa
da94 : 4cbada           [ 3] 	jmp df_rt_seval_nextbyte
                             
da97 :                       df_rt_seval_tk_fn
da97 : 8a               [ 2] 	txa
da98 : e6be             [ 5] 	inc df_exeoff
da9a : 202bdd           [ 6] 	jsr df_rt_run_token
da9d : 4ca4da           [ 3] 	jmp df_rt_seval_copy
                             
daa0 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
daa0 : 18               [ 2] 	clc
daa1 : 2034db           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
daa4 :                       df_rt_seval_copy
                             	; pull destination pointer
daa4 : 68               [ 4] 	pla
daa5 : 85d7             [ 3] 	sta df_tmpptra
daa7 : 68               [ 4] 	pla
daa8 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
daaa : 20faf2           [ 6] 	jsr df_ost_popStr
daad : 86d9             [ 3] 	stx df_tmpptrb
daaf : 85da             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
dab1 : 20cbda           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
dab4 : a5d8             [ 3] 	lda df_tmpptra+1
dab6 : 48               [ 3] 	pha
dab7 : a5d7             [ 3] 	lda df_tmpptra
dab9 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
daba :                       df_rt_seval_nextbyte
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------------------- bank1.s -----------------------------------

daba : e6be             [ 5] 	inc df_exeoff
dabc : 4c58da           [ 3] 	jmp df_rt_seval_optk
                             
dabf :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
dabf : 20efda           [ 6] 	jsr df_rt_eval_strlit
dac2 : 4ca4da           [ 3] 	jmp df_rt_seval_copy
                             
dac5 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
dac7 :                       df_rt_seval_done
                             	;
dac7 : 68               [ 4] 	pla
dac8 : 68               [ 4] 	pla
                             
dac9 : 18               [ 2] 	clc
daca : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
dacb :                       df_rt_copyStr
dacb : a000             [ 2] 	ldy #0
dacd :                       df_rt_copyStr_ch
dacd : b1d9             [ 5] 	lda (df_tmpptrb),y
dacf : 91d7             [ 5] 	sta (df_tmpptra),y
dad1 : f003             [ 3] 	beq df_rt_copyStr_done
dad3 : c8               [ 2] 	iny
dad4 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
dad6 :                       df_rt_copyStr_done
dad6 : 98               [ 2] 	tya
dad7 : 18               [ 2] 	clc
dad8 : 65d7             [ 3] 	adc df_tmpptra
dada : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
dade : e6d8             [ 5] 	inc df_tmpptra+1
dae0 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
dae1 :                       df_rt_eval_intdec
dae1 :                       df_rt_eval_bytdec
dae1 :                       df_rt_eval_inthex
dae1 :                       df_rt_eval_bythex
dae1 :                       df_rt_eval_intbin
dae1 :                       df_rt_eval_bytbin
dae1 :                       df_rt_eval_chr
                             	; numeric constant
dae1 : c8               [ 2] 	iny
dae2 : b1bc             [ 5] 	lda (df_currlin),y
dae4 : aa               [ 2] 	tax
dae5 : c8               [ 2] 	iny
dae6 : b1bc             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
dae8 : 84be             [ 3] 	sty df_exeoff
                             	; push number on to stack
daea : 4ce2f2           [ 3] 	jmp df_ost_pushInt
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------------------- bank1.s -----------------------------------

                             
daed :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
daef :                       df_rt_eval_strlit
daef : 84be             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
daf1 : 98               [ 2] 	tya
                             	; set carry to add one extra
daf2 : 38               [ 2] 	sec
daf3 : 65bc             [ 3] 	adc df_currlin
daf5 : aa               [ 2] 	tax
daf6 : a5bd             [ 3] 	lda df_currlin+1
daf8 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
dafa : 20d7f2           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
dafd : a4be             [ 3] 	ldy df_exeoff
daff :                       df_rt_eval_strlit_ch
daff : b1bc             [ 5] 	lda (df_currlin),y
db01 : f003             [ 3] 	beq df_rt_eval_strlit_done
db03 : c8               [ 2] 	iny
db04 : d0f9             [ 4] 	bne df_rt_eval_strlit_ch
db06 :                       df_rt_eval_strlit_done	; Always relying on Y neve
db06 : 84be             [ 3] 	sty df_exeoff
db08 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
db09 :                       df_rt_arry_parm
                             	; move past open bracket or comma
db09 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
db0b : 2094d9           [ 6] 	jsr df_rt_getnval
db0e : 8a               [ 2] 	txa
                             ;	clc
db0f : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
db10 :                       df_rt_arry_parm2
                             	; go get array parm 1
db10 : 2009db           [ 6] 	jsr df_rt_arry_parm
db13 : 48               [ 3] 	pha
db14 : a200             [ 2] 	ldx #0
db16 : a4be             [ 3] 	ldy df_exeoff
db18 :                       df_rt_arry_parm2_term
db18 : b1bc             [ 5] 	lda (df_currlin),y
db1a : c95d             [ 2] 	cmp #']'
db1c : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
db1e : c92c             [ 2] 	cmp #','
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------------------- bank1.s -----------------------------------

db20 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
db22 : 84be             [ 3] 	sty df_exeoff
db24 : c8               [ 2] 	iny
db25 : 4c18db           [ 3] 	jmp df_rt_arry_parm2_term
db28 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
db28 : 2009db           [ 6] 	jsr df_rt_arry_parm
db2b : a8               [ 2] 	tay
db2c : 68               [ 4] 	pla
db2d : aa               [ 2] 	tax
                             ;	clc
db2e : 60               [ 6] 	rts
db2f :                       df_rt_arry_parm2_skiparry2
db2f : a000             [ 2] 	ldy #0
db31 : 68               [ 4] 	pla
db32 : aa               [ 2] 	tax
                             ;	clc
db33 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
db34 :                       df_rt_eval_var
                             	; save carry bit
db34 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
db35 : b00e             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
db37 : c8               [ 2] 	iny
                             	; get var vvt address
db38 : b1bc             [ 5] 	lda (df_currlin),y
db3a : 85d7             [ 3] 	sta df_tmpptra
db3c : c8               [ 2] 	iny
db3d : 84be             [ 3] 	sty df_exeoff
db3f : b1bc             [ 5] 	lda (df_currlin),y
db41 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
db43 : b2d7             [ 5] 	lda (df_tmpptra)
db45 :                       df_rt_eval_lvskip
db45 : 48               [ 3] 	pha
                             	; Test A for array or string
db46 : 2984             [ 2] 	and #DFVVT_PTR|DFVVT_STR
                             	; simple variable
db48 : f00e             [ 3] 	beq df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
db4a : c4b5             [ 3] 	cpy df_nxtstidx
db4c : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
db4e : c8               [ 2] 	iny
db4f : b1bc             [ 5] 	lda (df_currlin),y
db51 : 88               [ 2] 	dey
db52 : c95b             [ 2] 	cmp #'['
db54 : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
db56 : f02d             [ 3] 	beq df_rt_eval_var_do_arry
db58 :                       df_rt_eval_var_notarry
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------------------- bank1.s -----------------------------------

                             	; pull the type, not needed here
db58 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
db59 : 28               [ 4] 	plp
db5a : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
db5c : a001             [ 2] 	ldy #DFVVT_LO
db5e : b1d7             [ 5] 	lda (df_tmpptra),y
db60 : aa               [ 2] 	tax
db61 : a002             [ 2] 	ldy #DFVVT_HI
db63 : b1d7             [ 5] 	lda (df_tmpptra),y
                             
db65 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
db68 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
db68 : 18               [ 2] 	clc
db69 : a901             [ 2] 	lda #DFVVT_LO
db6b : 65d7             [ 3] 	adc df_tmpptra
db6d : aa               [ 2] 	tax
db6e : a5d8             [ 3] 	lda df_tmpptra+1
db70 : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
db72 : 4cdbf2           [ 3] 	jmp df_ost_pushPtr
                             
                             	; Simple push of pointer, needs to be valid
db75 :                       df_rt_eval_var_simple
                             	; clean up stack
db75 : 68               [ 4] 	pla
db76 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
db77 : a001             [ 2] 	ldy #DFVVT_LO
db79 : b1d7             [ 5] 	lda (df_tmpptra),y
db7b : aa               [ 2] 	tax
db7c : a002             [ 2] 	ldy #DFVVT_HI
db7e : b1d7             [ 5] 	lda (df_tmpptra),y
db80 : f078             [ 3] 	beq df_rt_not_dimed
db82 : 4cdbf2           [ 3] 	jmp df_ost_pushPtr
                             
db85 :                       df_rt_eval_var_do_arry
                             	; move past var index
db85 : e6be             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
db87 : a200             [ 2] 	ldx #0
db89 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
db8b : a5d8             [ 3] 	lda df_tmpptra+1
db8d : 48               [ 3] 	pha
db8e : a5d7             [ 3] 	lda df_tmpptra
db90 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
db91 : 2010db           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
db94 : 68               [ 4] 	pla
db95 : 85d7             [ 3] 	sta df_tmpptra
db97 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------------------- bank1.s -----------------------------------

db98 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
db9a : 86d9             [ 3] 	stx df_tmpptrb
db9c : 84da             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
db9e : c000             [ 2] 	cpy #0
dba0 : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
dba2 : a004             [ 2] 	ldy #DFVVT_DIM2
dba4 : b1d7             [ 5] 	lda (df_tmpptra),y
dba6 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
dba8 : a6d9             [ 3] 	ldx df_tmpptrb
dbaa : a4da             [ 3] 	ldy df_tmpptrb+1
dbac : 86da             [ 3] 	stx df_tmpptrb+1
dbae : 84d9             [ 3] 	sty df_tmpptrb
                             
dbb0 :                       df_rt_eval_var_dim2adj
dbb0 : a6d9             [ 3] 	ldx df_tmpptrb
dbb2 : a4da             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
dbb4 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
dbb6 : c8               [ 2] 	iny
dbb7 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
dbb7 : e000             [ 2] 	cpx #0
dbb9 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
dbbb : e8               [ 2] 	inx
dbbc :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
dbbc : ca               [ 2] 	dex
dbbd : a900             [ 2] 	lda #0
dbbf : 857a             [ 3] 	sta num_a+1
dbc1 : 88               [ 2] 	dey
                             	; (y-1)
dbc2 : 8479             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
dbc4 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
dbc6 : a003             [ 2] 	ldy #DFVVT_DIM1
dbc8 : a900             [ 2] 	lda #0
dbca : 857e             [ 3] 	sta num_b+1
dbcc : b1d7             [ 5] 	lda (df_tmpptra),y
dbce : 857d             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
dbd0 : 2067cc           [ 6] 	jsr int_fast_mult
dbd3 :                       df_rt_eval_var_nomult
                             	; move x to a
dbd3 : 8a               [ 2] 	txa
                             	; add x to num_a
dbd4 : 18               [ 2] 	clc
dbd5 : 6579             [ 3] 	adc num_a
dbd7 : 8579             [ 3] 	sta num_a
                             	_bcc 2
                             
dbdb : e67a             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
dbdd : a6d9             [ 3] 	ldx df_tmpptrb
dbdf : a4da             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------------------- bank1.s -----------------------------------

dbe1 : 68               [ 4] 	pla
dbe2 : 48               [ 3] 	pha
dbe3 : 2901             [ 2] 	and #DFVVT_INT
dbe5 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
dbe7 : 0679             [ 5] 	asl num_a
dbe9 : 267a             [ 5] 	rol num_a+1
dbeb :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
dbeb : 18               [ 2] 	clc
dbec : a001             [ 2] 	ldy #DFVVT_LO
dbee : b1d7             [ 5] 	lda (df_tmpptra),y
dbf0 : 6579             [ 3] 	adc num_a
dbf2 : 8579             [ 3] 	sta num_a
dbf4 : a002             [ 2] 	ldy #DFVVT_HI
dbf6 : b1d7             [ 5] 	lda (df_tmpptra),y
dbf8 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
dbfa :                       df_rt_not_dimed
                             	SWBRK DFERR_DIM
                             
dbfc :                       df_rt_array_exists
dbfc : 657a             [ 3] 	adc num_a+1
dbfe : 857a             [ 3] 	sta num_a+1
                             	; get the type
dc00 : 68               [ 4] 	pla
                             	; if not int or byte then push string
dc01 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
dc03 : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
dc05 : 28               [ 4] 	plp
dc06 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
dc08 : 2901             [ 2] 	and #DFVVT_INT
dc0a : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
dc0c : a000             [ 2] 	ldy #0
dc0e : b179             [ 5] 	lda (num_a),y
dc10 : aa               [ 2] 	tax
dc11 : c8               [ 2] 	iny
dc12 : b179             [ 5] 	lda (num_a),y
dc14 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
dc17 :                       df_rt_eval_byt
dc17 : a000             [ 2] 	ldy #0
dc19 : b179             [ 5] 	lda (num_a),y
dc1b : aa               [ 2] 	tax
dc1c : 98               [ 2] 	tya			; Make A=0
dc1d : 4ce2f2           [ 3] 	jmp df_ost_pushInt
dc20 :                       df_rt_eval_var_str
dc20 : 28               [ 4] 	plp
dc21 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
dc21 : a679             [ 3] 	ldx num_a
dc23 : a57a             [ 3] 	lda num_a+1
dc25 : 4cdbf2           [ 3] 	jmp df_ost_pushPtr
                             
dc28 :                       df_rt_eval_proc
dc28 : a5ad             [ 3] 	lda df_parmtop				; Save current position of par
dc2a : 48               [ 3] 	pha
dc2b : 204cf1           [ 6] 	jsr df_rt_proc				; Go and call the user functio
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------------------- bank1.s -----------------------------------

dc2e : 68               [ 4] 	pla							; Get back the original parameter stac
dc2f : c5ad             [ 3] 	cmp df_parmtop				; if it is the same, then no r
dc31 : f002             [ 3] 	beq df_rt_eval_proc_err
dc33 : 18               [ 2] 	clc
dc34 : 60               [ 6] 	rts
dc35 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
dc37 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
dc37 : 2002f3           [ 6] 	jsr df_ost_popInt
dc3a : 86d9             [ 3] 	stx df_tmpptrb
dc3c : 85da             [ 3] 	sta df_tmpptrb+1
                             
dc3e : 2002f3           [ 6] 	jsr df_ost_popInt
dc41 : 86d7             [ 3] 	stx df_tmpptra
dc43 : 85d8             [ 3] 	sta df_tmpptra+1
dc45 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
dc46 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
dc46 : 20faf2           [ 6] 	jsr df_ost_popStr
dc49 : 86d9             [ 3] 	stx df_tmpptrb
dc4b : 85da             [ 3] 	sta df_tmpptrb+1
                             
dc4d : 20faf2           [ 6] 	jsr df_ost_popStr
dc50 : 86d7             [ 3] 	stx df_tmpptra
dc52 : 85d8             [ 3] 	sta df_tmpptra+1
dc54 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
dc55 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
dc55 : 209ad9           [ 6] 	jsr df_rt_neval
                             	; jump over comma
dc58 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc5a : 209ad9           [ 6] 	jsr df_rt_neval
                             	
dc5d : 4c37dc           [ 3] 	jmp df_rt_get2Ints
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
dc60 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
dc60 : 209ad9           [ 6] 	jsr df_rt_neval
dc63 : e6be             [ 5] 	inc df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------------------- bank1.s -----------------------------------

                             	; evaluate the 2nd parm
dc65 : 209ad9           [ 6] 	jsr df_rt_neval
dc68 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc6a : 209ad9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
dc6d :                       df_rt_parm_pop3
dc6d : 2002f3           [ 6] 	jsr df_ost_popInt
dc70 : 86db             [ 3] 	stx df_tmpptrc
dc72 : 85dc             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
dc74 : 4c37dc           [ 3] 	jmp df_rt_get2Ints
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
dc77 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
dc77 : 209ad9           [ 6] 	jsr df_rt_neval
dc7a : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc7c : 209ad9           [ 6] 	jsr df_rt_neval
dc7f : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc81 : 209ad9           [ 6] 	jsr df_rt_neval
dc84 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dc86 : 209ad9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
dc89 :                       df_rt_parm_pop4
dc89 : 2002f3           [ 6] 	jsr df_ost_popInt
dc8c : 86dd             [ 3] 	stx df_tmpptrd
dc8e : 85de             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
dc90 : 4c6ddc           [ 3] 	jmp df_rt_parm_pop3
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
dc93 :                       df_rt_parm_5ints
                             	; evaluate 1st parm
dc93 : 209ad9           [ 6] 	jsr df_rt_neval
dc96 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc98 : 209ad9           [ 6] 	jsr df_rt_neval
dc9b : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc9d : 209ad9           [ 6] 	jsr df_rt_neval
dca0 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dca2 : 209ad9           [ 6] 	jsr df_rt_neval
dca5 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
dca7 : 209ad9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
dcaa : 2002f3           [ 6] 	jsr df_ost_popInt
dcad : 86df             [ 3] 	stx df_tmpptre
dcaf : 85e0             [ 3] 	sta df_tmpptre+1
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------------------- bank1.s -----------------------------------

                             
                             	; pop 4,3,2,1 parms
dcb1 : 4c89dc           [ 3] 	jmp df_rt_parm_pop4
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
dcb4 :                       df_rt_init_stat_ptr
                             	; save current line
dcb4 : 86bc             [ 3] 	stx df_currlin
dcb6 : 85bd             [ 3] 	sta df_currlin+1
dcb8 : 84be             [ 3] 	sty df_exeoff
dcba : 84b6             [ 3] 	sty df_curstidx
dcbc : b1bc             [ 5] 	lda (df_currlin),y
dcbe : 85b5             [ 3] 	sta df_nxtstidx
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dcc0 : b2bc             [ 5] 	lda (df_currlin)
dcc2 : 85b4             [ 3] 	sta df_eolidx
dcc4 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
dcc5 :                       df_rt_exec_stat
dcc5 : a6bc             [ 3] 	ldx df_currlin
dcc7 : a5bd             [ 3] 	lda df_currlin+1
dcc9 : a4be             [ 3] 	ldy df_exeoff
dccb :                       df_rt_exec_init_ptr
dccb : 20b4dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
                             ;	lda #0
                             ;	sta df_nextlin+1
dcce : 64c0             [ 3] 	stz df_nextlin+1
                             
                             	; find first token in statement
dcd0 :                       df_rt_exec_find_tok
dcd0 : c8               [ 2] 	iny
dcd1 : b1bc             [ 5] 	lda (df_currlin),y
dcd3 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
dcd5 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
dcd5 : c8               [ 2] 	iny
dcd6 : 84be             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
dcd8 : 202bdd           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
dcdb : a592             [ 3] 	lda df_checkmsk
dcdd : 300e             [ 3] 	bmi df_rt_exec_no_key
dcdf : c691             [ 5] 	dec df_checkkey
dce1 : d00a             [ 3] 	bne df_rt_exec_no_key
dce3 : a592             [ 3] 	lda df_checkmsk
dce5 : 8591             [ 3] 	sta df_checkkey
dce7 : 18               [ 2] 	clc
dce8 : 20bdc5           [ 6] 	jsr io_get_ch
dceb : 9027             [ 4] 	bcc df_rt_exec_check_key
dced :                       df_rt_exec_no_key
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------------------- bank1.s -----------------------------------

                             	; check if normal flow of control
dced : a5c0             [ 3] 	lda df_nextlin+1
dcef : d031             [ 4] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
dcf1 : a4b5             [ 3] 	ldy df_nxtstidx
dcf3 : c4b4             [ 3] 	cpy df_eolidx
dcf5 : 84be             [ 3] 	sty df_exeoff
dcf7 : d0cc             [ 3] 	bne df_rt_exec_stat
                             	
                             
                             	; reached end of line, move to next
dcf9 : 18               [ 2] 	clc
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dcfa : b2bc             [ 5] 	lda (df_currlin)
dcfc : 65bc             [ 3] 	adc df_currlin
dcfe : 85bc             [ 3] 	sta df_currlin
                             	_bcc 2
                             
dd02 : e6bd             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
dd04 : a003             [ 2] 	ldy #3
dd06 : 84be             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
                             ;	lda (df_currlin,x)
dd08 : b2bc             [ 5] 	lda (df_currlin)
dd0a : 85b4             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
dd0c : d0b7             [ 4] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
dd0e : a594             [ 3] 	lda df_immed
dd10 : f00e             [ 3] 	beq df_rt_unexpected_end
dd12 :                       df_rt_exec_end
dd12 : 18               [ 2] 	clc
dd13 : 60               [ 6] 	rts
dd14 :                       df_rt_exec_check_key
dd14 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
dd16 : f006             [ 3] 	beq df_rt_exec_ctrl_z
dd18 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
dd1a : d0d1             [ 4] 	bne df_rt_exec_no_key			; None relevant keys, go
dd1c :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
dd1e :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
dd20 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
dd22 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
dd22 : a6bf             [ 3] 	ldx df_nextlin
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------------------- bank1.s -----------------------------------

dd24 : a5c0             [ 3] 	lda df_nextlin+1
dd26 : a4b5             [ 3] 	ldy df_nxtstidx
dd28 : 4ccbdc           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
dd2b :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
dd2b : 0a               [ 2] 	asl a
dd2c : aa               [ 2] 	tax
dd2d : 7c08de           [ 6] 	jmp (df_rt_tokenjmp,x)
                             ;	lda df_rt_tokenjmp,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_tokenjmp+1,x
                             ;	sta df_tmpptra+1
                             ;	; execution code finishes with rts
                             ;	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
dd30 :                       df_rt_nextstat
                             	; save pointer
dd30 : 86c6             [ 3] 	stx df_lineptr
dd32 : 85c7             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dd34 : b2c6             [ 5] 	lda (df_lineptr)
dd36 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
dd38 : b1c6             [ 5] 	lda (df_lineptr),y
                             ;	cmp (df_lineptr,x)
dd3a : d2c6             [ 5] 	cmp (df_lineptr)
dd3c : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
dd3e : a8               [ 2] 	tay
                             	; X = line low
dd3f : a6c6             [ 3] 	ldx df_lineptr
                             	; A = line high
dd41 : a5c7             [ 3] 	lda df_lineptr+1
dd43 : 18               [ 2] 	clc
dd44 : 60               [ 6] 	rts
dd45 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
dd45 : 18               [ 2] 	clc
dd46 : 65c6             [ 3] 	adc df_lineptr
dd48 : 85c6             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
dd4c : e6c7             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------------------- bank1.s -----------------------------------

                             ;	lda (df_lineptr,x)
dd4e : b2c6             [ 5] 	lda (df_lineptr)
dd50 : f008             [ 3] 	beq df_rt_nextstat_err
dd52 : a6c6             [ 3] 	ldx df_lineptr
dd54 : a5c7             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
dd56 : a003             [ 2] 	ldy #3
dd58 : 18               [ 2] 	clc
dd59 : 60               [ 6] 	rts
dd5a :                       df_rt_nextstat_err
dd5a : a000             [ 2] 	ldy #0
dd5c : 38               [ 2] 	sec
dd5d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
dd5e :                       df_rt_push_stat
dd5e : a5b6             [ 3] 	lda df_curstidx
dd60 : 20a4f2           [ 6] 	jsr df_rst_pushByte
dd63 : a5bd             [ 3] 	lda df_currlin+1
dd65 : a6bc             [ 3] 	ldx df_currlin
dd67 : 4cbcf2           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
dd6a :                       df_rt_pop_stat
dd6a : 20caf2           [ 6] 	jsr df_rst_popWord
dd6d : 86bf             [ 3] 	stx	df_nextlin
dd6f : 85c0             [ 3] 	sta df_nextlin+1
dd71 : 20adf2           [ 6] 	jsr df_rst_popByte
dd74 : a8               [ 2] 	tay
dd75 : a6bf             [ 3] 	ldx df_nextlin
dd77 : a5c0             [ 3] 	lda df_nextlin+1
dd79 : 2030dd           [ 6] 	jsr df_rt_nextstat
dd7c : 86bf             [ 3] 	stx df_nextlin
dd7e : 85c0             [ 3] 	sta df_nextlin+1
dd80 : 84b5             [ 3] 	sty df_nxtstidx
                             ;	clc
dd82 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
dd83 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
dd8b : a003             [ 2] 	ldy #3
dd8d : 84c8             [ 3] 	sty df_lineidx
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dd8f : b2c6             [ 5] 	lda (df_lineptr)
dd91 : f034             [ 3] 	beq df_rt_findproc_err
dd93 :                       df_rt_findproc_cmd
dd93 : c8               [ 2] 	iny
dd94 : b1c6             [ 5] 	lda (df_lineptr),y
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------------------- bank1.s -----------------------------------

dd96 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
dd98 : c986             [ 2] 	cmp #DFRT_DEF
dd9a : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
dd9c : c8               [ 2] 	iny
                             	; skip proc escape token
dd9d : c8               [ 2] 	iny
                             	; now check the proc address against procptr
dd9e : b1c6             [ 5] 	lda (df_lineptr),y
dda0 : c5c4             [ 3] 	cmp df_procptr
dda2 : d00f             [ 3] 	bne df_rt_findproc_nextstat
dda4 : c8               [ 2] 	iny
dda5 : b1c6             [ 5] 	lda (df_lineptr),y
dda7 : c5c5             [ 3] 	cmp df_procptr+1
dda9 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
ddab : a6c6             [ 3] 	ldx df_lineptr
ddad : a5c7             [ 3] 	lda df_lineptr+1
ddaf : a4c8             [ 3] 	ldy df_lineidx
ddb1 : 18               [ 2] 	clc
ddb2 : 60               [ 6] 	rts
ddb3 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
ddb3 : a6c6             [ 3] 	ldx df_lineptr
ddb5 : a5c7             [ 3] 	lda df_lineptr+1
ddb7 : a4c8             [ 3] 	ldy df_lineidx
ddb9 : 2030dd           [ 6] 	jsr df_rt_nextstat
ddbc : b009             [ 3] 	bcs df_rt_findproc_err
ddbe : 86c6             [ 3] 	stx df_lineptr
ddc0 : 85c7             [ 3] 	sta df_lineptr+1
ddc2 : 84c8             [ 3] 	sty df_lineidx
ddc4 : 4c93dd           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
ddc7 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
ddc9 :                       df_rt_findescval
ddc9 : a4be             [ 3] 	ldy df_exeoff
ddcb : 88               [ 2] 	dey
ddcc :                       df_rt_findescval_loop
ddcc : c8               [ 2] 	iny
ddcd : b1bc             [ 5] 	lda (df_currlin),y
ddcf : c920             [ 2] 	cmp #DFTK_ESCVAL
ddd1 : b0f9             [ 3] 	bcs df_rt_findescval_loop
ddd3 : 84be             [ 3] 	sty df_exeoff
ddd5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
ddd6 :                       df_rt_skip_ws
ddd6 : a4be             [ 3] 	ldy df_exeoff
ddd8 : 88               [ 2] 	dey
ddd9 :                       df_rt_skip_ws_loop
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------------------- bank1.s -----------------------------------

ddd9 : c8               [ 2] 	iny
ddda : b1bc             [ 5] 	lda (df_currlin),y
dddc : c920             [ 2] 	cmp #' '
ddde : f0f9             [ 3] 	beq df_rt_skip_ws_loop
dde0 : 84be             [ 3] 	sty df_exeoff
dde2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
dde3 :                       df_rt_getlvar
dde3 : 20c9dd           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
dde6 : c8               [ 2] 	iny
                             
                             	; get variable address
dde7 : b1bc             [ 5] 	lda (df_currlin),y
dde9 : 85d7             [ 3] 	sta df_tmpptra
ddeb : c8               [ 2] 	iny
ddec : b1bc             [ 5] 	lda (df_currlin),y
ddee : 85d8             [ 3] 	sta df_tmpptra+1
                             
ddf0 : 84be             [ 3] 	sty df_exeoff
                             	; get the type
ddf2 : a000             [ 2] 	ldy #0
ddf4 : b1d7             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
ddf6 : 38               [ 2] 	sec
ddf7 : a4be             [ 3] 	ldy df_exeoff
ddf9 : 2034db           [ 6] 	jsr df_rt_eval_var
ddfc : 4cfef2           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
ddff :                       df_rt_pop_stat_go
ddff : 206add           [ 6] 	jsr df_rt_pop_stat
                             	; restore stack pointer so we don't lose this en
de02 : 68               [ 4] 	pla
de03 : a8               [ 2] 	tay
de04 : 84ac             [ 3] 	sty df_rtstop
de06 : 18               [ 2] 	clc
de07 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------------------- bank1.s -----------------------------------

                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
de08 :                       df_rt_tokenjmp
de08 : 88e6                  	dw	df_rt_assign
de0a : 4cf1                  	dw	df_rt_proc
de0c : 8ee6                  	dw	df_rt_comment
de0e : 3ce6                  	dw	df_rt_println
de10 : 01e6                  	dw	df_rt_printat
de12 : 0be6                  	dw	df_rt_print
de14 : ecf1                  	dw	df_rt_def			; 0x86
de16 : 66f2                  	dw	df_rt_enddef		; 0x87
de18 : 63f2                  	dw	df_rt_return		; 0x88
de1a : 09f1                  	dw	df_rt_abort			; 0x89
de1c : e2e3                  	dw	df_rt_local
de1e : 0ee4                  	dw	df_rt_dim
de20 : b7e2                  	dw	df_rt_repeat		; 0x8c
de22 : bfe2                  	dw	df_rt_until
de24 : 22e2                  	dw	df_rt_for			; 0x8e
de26 : 5ce2                  	dw	df_rt_next			; 0x8f
de28 : 04e1                  	dw	df_rt_while			; 0x90
de2a : 69e1                  	dw	df_rt_wend			; 0x81
de2c : e3e1                  	dw	df_rt_if			; 0x92
de2e : d1e1                  	dw	df_rt_else			; 0x93
de30 : cce1                  	dw	df_rt_endif			; 0x94
de32 : d1e1                  	dw	df_rt_elseif		; 0x95
de34 : 8ee6                  	dw	df_rt_data			; 0x96
de36 : 0bf6                  	dw	df_rt_asm_assemble	; 0x97
de38 : 8fe6                  	dw	df_rt_run
de3a : 84e7                  	dw	df_rt_list
de3c : ade3                  	dw	df_rt_input
de3e : 18e5                  	dw	df_rt_mode
de40 : 9ce4                  	dw	df_rt_plot
de42 : 05e5                  	dw	df_rt_cursor
de44 : 92e4                  	dw	df_rt_cls
de46 : e8e9                  	dw	df_rt_vpoke
de48 : ffe9                  	dw	df_rt_setvdp
de4a : 09ea                  	dw	df_rt_colour
de4c : 58ea                  	dw	df_rt_spritepat
de4e : 86ea                  	dw	df_rt_spritepos
de50 : c4ea                  	dw	df_rt_spritecol
de52 : c9ea                  	dw	df_rt_spritenme
de54 : 2fea                  	dw	df_rt_sprite
de56 : e0e9                  	dw	df_rt_poke
de58 : d2e9                  	dw	df_rt_doke
de5a : f7ea                  	dw	df_rt_sound
de5c : 0beb                  	dw	df_rt_music
de5e : 29eb                  	dw	df_rt_play
de60 : 02ec                  	dw	df_rt_save
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------------------- bank1.s -----------------------------------

de62 : 1dec                  	dw	df_rt_load
de64 : 82ed                  	dw	df_rt_dir
de66 : 02ee                  	dw	df_rt_dirl
de68 : 6fec                  	dw	df_rt_del
de6a : 95e3                  	dw	df_rt_read
de6c : 01e1                  	dw	df_rt_new
de6e : a0e6                  	dw	df_rt_renum
de70 : e8e5                  	dw	df_rt_wait
de72 : 38ee                  	dw	df_rt_reset
de74 : 18e5                  	dw	df_rt_hires
de76 : 39e5                  	dw	df_rt_point
de78 : 61e5                  	dw	df_rt_line
de7a : 43e5                  	dw	df_rt_hplot
de7c : 1fe5                  	dw	df_rt_pixmode
de7e : 25e5                  	dw	df_rt_pixmask
de80 : 2be5                  	dw	df_rt_pixcol
de82 : 77e5                  	dw	df_rt_box
de84 : 4fe5                  	dw	df_rt_circle
de86 : 8de5                  	dw	df_rt_shape
de88 : b7ec                  	dw	df_rt_vload
de8a : 88ec                  	dw	df_rt_bload
de8c : 5aeb                  	dw	df_rt_bsave
de8e : 0be5                  	dw	df_rt_himem
de90 : fde0                  	dw	df_rt_monitor
de92 : 76ec                  	dw	df_rt_chdir
de94 : 7fec                  	dw	df_rt_mkdir
de96 : 50ee                  	dw	df_rt_datetime
de98 : f4e9                  	dw	df_rt_nvpoke
de9a : aaec                  	dw	df_rt_font
de9c : 31f1                  	dw	df_rt_device
de9e : 26f1                  	dw	df_rt_fclose
dea0 : 0be4                  	dw	df_rt_redim
dea2 : 31e5                  	dw  df_rt_put
dea4 : 1eed                  	dw	df_rt_ptload
dea6 : 5eed                  	dw	df_rt_ptinit
dea8 : 6aed                  	dw	df_rt_ptrun
                             
deaa : c8ee                  	dw	df_rt_vpeek
deac : afee                  	dw	df_rt_peek
deae : acee                  	dw	df_rt_deek
deb0 : 05ef                  	dw	df_rt_stick
deb2 : 75ef                  	dw	df_rt_key
deb4 : 39f0                  	dw	df_rt_chr
deb6 : 8cf0                  	dw	df_rt_left
deb8 : 9df0                  	dw	df_rt_right
deba : b8f0                  	dw	df_rt_mid
debc : d6f0                  	dw	df_rt_len
debe : 29ef                  	dw	df_rt_mem
dec0 : 88ef                  	dw	df_rt_scrn
dec2 : e0ee                  	dw	df_rt_rnd
dec4 : a4ef                  	dw	df_rt_elapsed
dec6 : c2ef                  	dw	df_rt_call
dec8 : 4df0                  	dw	df_rt_hex
deca : 7ef0                  	dw	df_rt_dec
decc : e2f0                  	dw	df_rt_asc
dece : f3f0                  	dw	df_rt_val
ded0 : 98ef                  	dw	df_rt_pixel
ded2 : d4ef                  	dw	df_rt_sgn
ded4 : f1ef                  	dw	df_rt_addr
ded6 : d4ee                  	dw	df_rt_nvpeek
ded8 : 0bf1                  	dw	df_rt_fcreate
deda : 1ef1                  	dw	df_rt_fopen
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------------------- bank1.s -----------------------------------

dedc : 75ef                  	dw  df_rt_get
                             	
dede : 51df                  	dw	df_rt_mult
dee0 : 72df                  	dw	df_rt_div
dee2 : 93df                  	dw	df_rt_mod
dee4 : b4df                  	dw	df_rt_asl
dee6 : c7df                  	dw	df_rt_lsr
dee8 : 2bdf                  	dw	df_rt_add
deea : 3edf                  	dw	df_rt_sub
                             	
deec : dadf                  	dw	df_rt_and
deee : e9df                  	dw	df_rt_or
def0 : f8df                  	dw	df_rt_eor
def2 : 97e0                  	dw	df_rt_comlte
def4 : a2e0                  	dw	df_rt_comgte
def6 : ade0                  	dw	df_rt_comne
def8 : 76e0                  	dw	df_rt_comlt
defa : 81e0                  	dw	df_rt_comgt
defc : 8ce0                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
defe :                       df_rt_escjmp
defe : 58e8                  	dw df_rt_lst_chr
df00 : 57e8                  	dw df_rt_lst_reserved
df02 : 57e8                  	dw df_rt_lst_reserved
df04 : 57e8                  	dw df_rt_lst_reserved
df06 : 57e8                  	dw df_rt_lst_reserved	
df08 : 57e8                  	dw df_rt_lst_reserved	; no such thing as bytdec
df0a : 75e8                  	dw df_rt_lst_bythex
df0c : 9ae8                  	dw df_rt_lst_bytbin
df0e : 57e8                  	dw df_rt_lst_reserved	
df10 : bee8                  	dw df_rt_lst_intdec
df12 : 88e8                  	dw df_rt_lst_inthex
df14 : a2e8                  	dw df_rt_lst_intbin
df16 : 57e8                  	dw df_rt_lst_reserved
df18 : 57e8                  	dw df_rt_lst_reserved
df1a : 57e8                  	dw df_rt_lst_reserved
df1c : 57e8                  	dw df_rt_lst_reserved	
df1e : 1be9                  	dw df_rt_lst_strlit
df20 : c9e8                  	dw df_rt_lst_var
df22 : c9e8                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------------------- bank1.s -----------------------------------

                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
df24 :                       mod_sz_rtsubs_s
                             
                             	include "dflat\numop.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
df24 :                       df_rt_putintres
df24 : a6d7             [ 3] 	ldx df_tmpptra
df26 : a5d8             [ 3] 	lda df_tmpptra+1
df28 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
df2b :                       df_rt_add
df2b : 2037dc           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
df3b : 4c24df           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
df3e :                       df_rt_sub
df3e : 2037dc           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
df4e : 4c24df           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
df51 :                       df_rt_mult
df51 : 2037dc           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
df64 : 208ecc           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
df6f : 4c24df           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
df72 :                       df_rt_div
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------------------- bank1.s -----------------------------------

df72 : 2037dc           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
df85 : 20b7cc           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
df90 : 4c24df           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
df93 :                       df_rt_mod
df93 : 2037dc           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
dfa6 : 20b7cc           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
dfb1 : 4c24df           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
dfb4 :                       df_rt_asl
dfb4 : 2037dc           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
dfb7 : a6d9             [ 3] 	ldx df_tmpptrb
dfb9 : e8               [ 2] 	inx
dfba :                       df_rt_aslbit
dfba : ca               [ 2] 	dex
dfbb : f007             [ 3] 	beq df_rt_asldone
dfbd : 06d7             [ 5] 	asl df_tmpptra
dfbf : 26d8             [ 5] 	rol df_tmpptra+1
dfc1 : 4cbadf           [ 3] 	jmp df_rt_aslbit
dfc4 :                       df_rt_asldone
dfc4 : 4c24df           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
dfc7 :                       df_rt_lsr
dfc7 : 2037dc           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
dfca : a6d9             [ 3] 	ldx df_tmpptrb
dfcc : e8               [ 2] 	inx
dfcd :                       df_rt_lsrbit
dfcd : ca               [ 2] 	dex
dfce : f007             [ 3] 	beq df_rt_lsrdone
dfd0 : 46d8             [ 5] 	lsr df_tmpptra+1
dfd2 : 66d7             [ 5] 	ror df_tmpptra
dfd4 : 4ccddf           [ 3] 	jmp df_rt_lsrbit
dfd7 :                       df_rt_lsrdone
dfd7 : 4c24df           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
dfda :                       df_rt_and
dfda : 2037dc           [ 6] 	jsr df_rt_get2Ints
dfdd : a5d7             [ 3] 	lda df_tmpptra
dfdf : 25d9             [ 3] 	and df_tmpptrb
dfe1 : aa               [ 2] 	tax
dfe2 : a5d8             [ 3] 	lda df_tmpptra+1
dfe4 : 25da             [ 3] 	and df_tmpptrb+1
dfe6 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             	
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------------------- bank1.s -----------------------------------

                             ; logical or
dfe9 :                       df_rt_or
dfe9 : 2037dc           [ 6] 	jsr df_rt_get2Ints
dfec : a5d7             [ 3] 	lda df_tmpptra
dfee : 05d9             [ 3] 	ora df_tmpptrb
dff0 : aa               [ 2] 	tax
dff1 : a5d8             [ 3] 	lda df_tmpptra+1
dff3 : 05da             [ 3] 	ora df_tmpptrb+1
dff5 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
dff8 :                       df_rt_eor
dff8 : 2037dc           [ 6] 	jsr df_rt_get2Ints
dffb : a5d7             [ 3] 	lda df_tmpptra
dffd : 45d9             [ 3] 	eor df_tmpptrb
dfff : aa               [ 2] 	tax
e000 : a5d8             [ 3] 	lda df_tmpptra+1
e002 : 45da             [ 3] 	eor df_tmpptrb+1
e004 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
e007 :                       df_rt_aequb
e007 : a5d7             [ 3] 	lda df_tmpptra
e009 : c5d9             [ 3] 	cmp df_tmpptrb
e00b : d004             [ 3] 	bne df_rt_aequbFin
e00d : a5d8             [ 3] 	lda df_tmpptra+1
e00f : c5da             [ 3] 	cmp df_tmpptrb+1
e011 :                       df_rt_aequbFin
e011 : 60               [ 6] 	rts
                             
                             ; a-b common function
e012 :                       df_rt_asubb
e012 : 38               [ 2] 	sec
e013 : a5d7             [ 3] 	lda df_tmpptra
e015 : e5d9             [ 3] 	sbc df_tmpptrb
e017 : a5d8             [ 3] 	lda df_tmpptra+1
e019 : e5da             [ 3] 	sbc df_tmpptrb+1
e01b : 5002             [ 3] 	bvc df_rt_asubbFin
e01d : 4980             [ 2] 	eor #0x80
e01f :                       df_rt_asubbFin
e01f : 60               [ 6] 	rts
                             
                             ; b-a common function
e020 :                       df_rt_bsuba
e020 : 38               [ 2] 	sec
e021 : a5d9             [ 3] 	lda df_tmpptrb
e023 : e5d7             [ 3] 	sbc df_tmpptra
e025 : a5da             [ 3] 	lda df_tmpptrb+1
e027 : e5d8             [ 3] 	sbc df_tmpptra+1
e029 : 5002             [ 3] 	bvc df_rt_bsubaFin
e02b : 4980             [ 2] 	eor #0x80
e02d :                       df_rt_bsubaFin
e02d : 60               [ 6] 	rts
                             
                             ; common routine push true
e02e :                       df_rt_true
e02e : a2ff             [ 2] 	ldx #0xff
e030 : 8a               [ 2] 	txa
e031 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e034 :                       df_rt_false
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------------------- bank1.s -----------------------------------

e034 : a200             [ 2] 	ldx #0x00
e036 : 8a               [ 2] 	txa
e037 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e03a :                       df_rt_lt
e03a : 2037dc           [ 6] 	jsr df_rt_get2Ints
e03d : 2012e0           [ 6] 	jsr df_rt_asubb
e040 : 30ec             [ 3] 	bmi df_rt_true
e042 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e044 :                       df_rt_lte
e044 : 2037dc           [ 6] 	jsr df_rt_get2Ints
e047 :                       df_rt_lte_calc
e047 : 2020e0           [ 6] 	jsr df_rt_bsuba
e04a : 30e8             [ 3] 	bmi df_rt_false
e04c : 10e0             [ 3] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e04e :                       df_rt_gt
e04e : 2037dc           [ 6] 	jsr df_rt_get2Ints
e051 : 2020e0           [ 6] 	jsr df_rt_bsuba
e054 : 30d8             [ 3] 	bmi df_rt_true
e056 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e058 :                       df_rt_gte
e058 : 2037dc           [ 6] 	jsr df_rt_get2Ints
e05b :                       df_rt_gte_calc
e05b : 2012e0           [ 6] 	jsr df_rt_asubb
e05e : 10ce             [ 3] 	bpl df_rt_true
e060 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e062 :                       df_rt_eq
e062 : 2037dc           [ 6] 	jsr df_rt_get2Ints
e065 : 2007e0           [ 6] 	jsr df_rt_aequb
e068 : d0ca             [ 3] 	bne df_rt_false
e06a : f0c2             [ 3] 	beq df_rt_true
                             
                             ; a <> b
e06c :                       df_rt_ne
e06c : 2037dc           [ 6] 	jsr df_rt_get2Ints
e06f : 2007e0           [ 6] 	jsr df_rt_aequb
e072 : f0c0             [ 3] 	beq df_rt_false
e074 : d0b8             [ 3] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e076 :                       df_rt_comlt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e07b : 2904             [ 2] 	and #DFST_STR
e07d : d054             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e07f : f0b9             [ 3] 	beq df_rt_lt
                             
e081 :                       df_rt_comgt
                             	; First find the data type on the stack
                             	_df_ost_peekType
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------------------- bank1.s -----------------------------------

                             
e086 : 2904             [ 2] 	and #DFST_STR
e088 : d050             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e08a : f0c2             [ 3] 	beq df_rt_gt
                             
e08c :                       df_rt_comeq
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e091 : 2904             [ 2] 	and #DFST_STR
e093 : d04e             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
e095 : f0cb             [ 3] 	beq df_rt_eq
                             
e097 :                       df_rt_comlte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e09c : 2904             [ 2] 	and #DFST_STR
e09e : d018             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e0a0 : f0a2             [ 3] 	beq df_rt_lte
                             	
e0a2 :                       df_rt_comgte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e0a7 : 2904             [ 2] 	and #DFST_STR
e0a9 : d01a             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e0ab : f0ab             [ 3] 	beq df_rt_gte
                             
e0ad :                       df_rt_comne
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e0b2 : 2904             [ 2] 	and #DFST_STR
e0b4 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e0b6 : f0b4             [ 3] 	beq df_rt_ne
                             
                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e0b8 :                       df_rt_slte
e0b8 : 20eae0           [ 6] 	jsr df_rt_str_comp
e0bb : 9005             [ 3] 	bcc df_rt_str_comp_true
e0bd : f003             [ 3] 	beq df_rt_str_comp_true
e0bf :                       df_rt_str_comp_false
e0bf : 4c34e0           [ 3] 	jmp df_rt_false
e0c2 :                       df_rt_str_comp_true
e0c2 : 4c2ee0           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e0c5 :                       df_rt_sgte
e0c5 : 20eae0           [ 6] 	jsr df_rt_str_comp
e0c8 : b0f8             [ 3] 	bcs df_rt_str_comp_true
e0ca : 90f3             [ 3] 	bcc df_rt_str_comp_false
                             
                             ; string not equal
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------------------- bank1.s -----------------------------------

e0cc :                       df_rt_sne
e0cc : 20eae0           [ 6] 	jsr df_rt_str_comp
e0cf : d0f1             [ 3] 	bne df_rt_str_comp_true
e0d1 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e0d3 :                       df_rt_slt
e0d3 : 20eae0           [ 6] 	jsr df_rt_str_comp
e0d6 : 90ea             [ 3] 	bcc df_rt_str_comp_true
e0d8 : b0e5             [ 3] 	bcs df_rt_str_comp_false
                             
                             ; string greater than
e0da :                       df_rt_sgt
e0da : 20eae0           [ 6] 	jsr df_rt_str_comp
e0dd : f0e0             [ 3] 	beq df_rt_str_comp_false
e0df : 90de             [ 3] 	bcc df_rt_str_comp_false
e0e1 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e0e3 :                       df_rt_seq
e0e3 : 20eae0           [ 6] 	jsr df_rt_str_comp
e0e6 : f0da             [ 3] 	beq df_rt_str_comp_true
e0e8 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; C=0 means <
                             ; C=1,Z=0 means >
                             ; C=1,Z=1 means ==
e0ea :                       df_rt_str_comp
e0ea : 2046dc           [ 6] 	jsr df_rt_get2Strs
e0ed : a000             [ 2] 	ldy #0
e0ef :                       df_rt_str_comp_byte
e0ef : b1d7             [ 5] 	lda (df_tmpptra),y
e0f1 : d1d9             [ 5] 	cmp (df_tmpptrb),y
e0f3 : d007             [ 3] 	bne df_rt_str_comp_done
                             	; if here then both strings still the same
e0f5 : c900             [ 2] 	cmp #0				; What was op1 char
                             	; if char is zero then end
e0f7 : f003             [ 3] 	beq df_rt_str_comp_done
                             	; else do next char
e0f9 : c8               [ 2] 	iny
e0fa : d0f3             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
e0fc :                       df_rt_str_comp_done
e0fc : 60               [ 6] 	rts
                             
                             
                             
                             
e0fd :                       df_rt_monitor
e0fd : 20b6c2           [ 6] 	jsr _command_line
e100 : 60               [ 6] 	rts
                             	
e101 :                       df_rt_new
e101 : 4c44f3           [ 3] 	jmp df_clear
                             
                             ; df_rt_gotosub_common
                             ; 	; get line number in A,X and put in num_a
                             ; 	jsr df_rt_getnval
                             ; 	stx num_a
                             ; 	sta num_a+1
                             ; 	; For the moment start from the beginning
                             ; 	ldy df_prgstrt		; num_tmp contains starting po
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------------------- bank1.s -----------------------------------

                             ; 	sty num_tmp
                             ; 	ldy df_prgstrt+1
                             ; 	sty num_tmp+1
                             ; 	; if current line number > target then start f
                             ; 	; else start from this line number
                             ; 	; do a trial substract of current - target
                             ; 	sec
                             ; 	ldy #DFTK_LINNUM
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a
                             ; 	iny
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a+1
                             ; 	; if C=1 then current >= target so start from 
                             ; 	bcs df_rt_goto_find_line
                             ; 	; else use current line address
                             ; 	lda df_currlin
                             ; 	sta num_tmp
                             ; 	lda df_currlin+1
                             ; 	sta num_tmp+1
                             ; df_rt_goto_find_line
                             ; 	jsr df_pg_check_next_line	; Reuses the line fi
                             ; 	bcs df_rt_goto_not_found	; If no exact match t
                             ; 	rts							; X,A contains address of target lin
                             ; df_rt_goto_not_found
                             ; 	SWBRK DFERR_NOLINE
                             
                             ; df_rt_gosub
                             ; 	; push statement address for return
                             ; 	jsr df_rt_push_stat
                             ; 	; DFRT_WHILE token
                             ; 	lda #DFRT_GOSUB
                             ; 	jsr df_rst_pushByte
                             ; 	; *IMPORTANT* : falls through to the goto code
                             ; df_rt_goto
                             ; 	; Find the line number to goto
                             ; 	jsr df_rt_gotosub_common
                             ; 	; Save it in the next line property
                             ; 	stx df_nextlin
                             ; 	sta df_nextlin+1
                             ; 	; GOTO is from the beginning of a line only
                             ; 	ldy #3
                             ; 	sty df_nxtstidx
                             ; 	; Runtime will change flow to use next line pr
                             ; 	rts
                             
                             ; df_rt_retsub
                             ; 	; The top of stack needs to be a gosub return 
                             ; 	jsr df_rst_popByte
                             ; 	cmp #DFRT_GOSUB
                             ; 	bne df_rt_retsub_err
                             ; 	; pop the stat and continue
                             ; 	jmp df_rt_pop_stat
                             ; df_rt_retsub_err
                             ; 	SWBRK DFERR_RETURN
                             
                             
e104 :                       df_rt_while
                             	; push statement address
e104 : 205edd           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e107 : a990             [ 2] 	lda #DFRT_WHILE
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------------------- bank1.s -----------------------------------

e109 : 20a4f2           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e10c : 2094d9           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e10f : e000             [ 2] 	cpx #0
e111 : f001             [ 3] 	beq df_rt_while_done
e113 : 60               [ 6] 	rts
e114 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e114 : 20adf2           [ 6] 	jsr df_rst_popByte
e117 : 20adf2           [ 6] 	jsr df_rst_popByte
e11a : 20caf2           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e11d : a5c9             [ 3] 	lda df_ifnest
e11f : 48               [ 3] 	pha
e120 : a901             [ 2] 	lda #1
e122 : 85c9             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e12c :                       df_rt_findwend
e12c : a6bf             [ 3] 	ldx df_nextlin
e12e : a5c0             [ 3] 	lda df_nextlin+1
e130 : a4b6             [ 3] 	ldy df_curstidx
e132 : 2030dd           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e135 : b030             [ 3] 	bcs df_rt_wend_end
e137 : 86bf             [ 3] 	stx df_nextlin
e139 : 85c0             [ 3] 	sta df_nextlin+1
e13b : 84b6             [ 3] 	sty df_curstidx
                             	; find the command token
e13d :                       df_rt_while_cmd
e13d : c8               [ 2] 	iny
e13e : b1bf             [ 5] 	lda (df_nextlin),y
e140 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e142 : c991             [ 2] 	cmp #DFRT_WEND
e144 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e146 : c6c9             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e148 : d0e2             [ 3] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e14a : 68               [ 4] 	pla
e14b : 85c9             [ 3] 	sta df_ifnest
e14d : a6bf             [ 3] 	ldx df_nextlin
e14f : a5c0             [ 3] 	lda df_nextlin+1
e151 : a4b6             [ 3] 	ldy df_curstidx
e153 : 2030dd           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e156 : b00f             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e158 : 86bf             [ 3] 	stx df_nextlin
e15a : 85c0             [ 3] 	sta df_nextlin+1
e15c : 84b5             [ 3] 	sty df_nxtstidx	
e15e : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------------------- bank1.s -----------------------------------

e15f :                       df_rt_check_while
                             	; check for while
e15f : c990             [ 2] 	cmp #DFRT_WHILE
e161 : d0c9             [ 3] 	bne df_rt_findwend
                             	; if while found then increment nest
e163 : e6c9             [ 5] 	inc df_ifnest
e165 : 80c5             [ 3] 	bra df_rt_findwend
e167 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e169 :                       df_rt_wend
e169 : 20adf2           [ 6] 	jsr df_rst_popByte
e16c : c990             [ 2] 	cmp #DFRT_WHILE
e16e : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e170 : 20caf2           [ 6] 	jsr df_rst_popWord
e173 : 86bf             [ 3] 	stx	df_nextlin
e175 : 85c0             [ 3] 	sta df_nextlin+1
e177 : 20adf2           [ 6] 	jsr df_rst_popByte
e17a : 85b5             [ 3] 	sta df_nxtstidx
e17c : 60               [ 6] 	rts
e17d :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e17f :                       df_rt_if_stat
e17f : a6bf             [ 3] 	ldx df_nextlin
e181 : a5c0             [ 3] 	lda df_nextlin+1
e183 : a4b6             [ 3] 	ldy df_curstidx
e185 : 2030dd           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e188 : b009             [ 3] 	bcs df_rt_if_stat_err
e18a : 86bf             [ 3] 	stx df_nextlin
e18c : 85c0             [ 3] 	sta df_nextlin+1
e18e : 84b6             [ 3] 	sty df_curstidx
e190 : 84b5             [ 3] 	sty df_nxtstidx
e192 : 60               [ 6] 	rts
                             ; program ended with no match
e193 :                       df_rt_if_stat_err
                             	SWBRK DFERR_UNCLOSEDIF
                             
                             	
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e195 :                       df_rt_if_match
                             	; save the current if nest level
e195 : a5c9             [ 3] 	lda df_ifnest
e197 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e198 : 64c9             [ 3] 	stz df_ifnest	
                             	; save match pref
e19a : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e19b :                       df_rt_findelseendif
e19b : 207fe1           [ 6] 	jsr df_rt_if_stat
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------------------- bank1.s -----------------------------------

                             	; find command
e19e :                       df_rt_ifcmd
e19e : c8               [ 2] 	iny
e19f : b1bf             [ 5] 	lda (df_nextlin),y
e1a1 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e1a3 : c994             [ 2] 	cmp #DFRT_ENDIF
e1a5 : f014             [ 3] 	beq df_rt_ifelse
                             
e1a7 : 28               [ 4] 	plp
e1a8 : 08               [ 3] 	php
                             	
e1a9 : b008             [ 3] 	bcs df_rt_ifskipelseif
e1ab : c993             [ 2] 	cmp #DFRT_ELSE
e1ad : f00c             [ 3] 	beq df_rt_ifelse
e1af : c995             [ 2] 	cmp #DFRT_ELSEIF
e1b1 : f008             [ 3] 	beq df_rt_ifelse
e1b3 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e1b3 : c992             [ 2] 	cmp #DFRT_IF
e1b5 : d002             [ 3] 	bne df_rt_skipnestif
e1b7 : e6c9             [ 5] 	inc df_ifnest
e1b9 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e1b9 : 80e0             [ 3] 	bra df_rt_findelseendif
                             	
                             	; found else/elseif/endif
                             	; but check if this is nested
e1bb :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e1bb : a6c9             [ 3] 	ldx df_ifnest
e1bd : f008             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e1bf : c994             [ 2] 	cmp #DFRT_ENDIF
e1c1 : d002             [ 3] 	bne df_rt_skipnestendif
e1c3 : c6c9             [ 5] 	dec df_ifnest
e1c5 :                       df_rt_skipnestendif	
                             	; continue to search for else/endif
e1c5 : 80d4             [ 3] 	bra df_rt_findelseendif
                             	; ok got a match
e1c7 :                       df_rt_if_found
                             	; remove pref
e1c7 : 28               [ 4] 	plp
                             	; restore global if nest
e1c8 : fa               [ 4] 	plx
e1c9 : 86c9             [ 3] 	stx df_ifnest
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e1cb : 60               [ 6] 	rts
                             
e1cc :                       df_rt_endif
                             	; decrement if next level
e1cc : c6c9             [ 5] 	dec df_ifnest
e1ce : 3011             [ 3] 	bmi df_rt_noif_err
                             ;	clc
e1d0 : 60               [ 6] 	rts
                             	
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e1d1 :                       df_rt_elseif
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------------------- bank1.s -----------------------------------

e1d1 :                       df_rt_else
                             	; not in if mode then error
e1d1 : a5c9             [ 3] 	lda df_ifnest
e1d3 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e1dd : 38               [ 2] 	sec
e1de : 4c95e1           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if	
e1e1 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             	
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e1e3 :                       df_rt_if
                             	; increment global if nest counter
e1e3 : e6c9             [ 5] 	inc df_ifnest
e1e5 :                       df_rt_ifeval
                             	; get value
e1e5 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e1e8 : c900             [ 2] 	cmp #0
e1ea : d035             [ 4] 	bne df_rt_if_done
e1ec : e000             [ 2] 	cpx #0
e1ee : d031             [ 4] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e1f8 : 18               [ 2] 	clc						
e1f9 : 2095e1           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e1fc : c993             [ 2] 	cmp #DFRT_ELSE
                             	; else: df_nextlin and df_nxtstidx points to the
e1fe : f01e             [ 4] 	beq df_rt_do_else
                             
e200 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e202 : f01d             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e20c : c8               [ 2] 	iny
e20d : 5a               [ 3] 	phy
                             	; initialise statement pointer
e20e : a4b6             [ 3] 	ldy df_curstidx
e210 : a6bc             [ 3] 	ldx df_currlin
e212 : a5bd             [ 3] 	lda df_currlin+1
e214 : 20b4dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------------------- bank1.s -----------------------------------

e217 : 7a               [ 4] 	ply
e218 : 84be             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e21a : 64c0             [ 3] 	stz df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e21c : 80c7             [ 4] 	bra df_rt_ifeval
                             	
e21e :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e21e : 207fe1           [ 6] 	jsr df_rt_if_stat
e221 :                       df_rt_if_done
                             ;	clc
e221 : 60               [ 6] 	rts
                             	
e222 :                       df_rt_for
                             	; push statement address to rt stack
e222 : 205edd           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e225 : 20e3dd           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e228 : 48               [ 3] 	pha
e229 : da               [ 3] 	phx
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e22a : e6be             [ 5] 	inc df_exeoff
e22c : 209ad9           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter
e22f : fa               [ 4] 	plx
e230 : 86d7             [ 3] 	stx df_tmpptra
e232 : 68               [ 4] 	pla
e233 : 85d8             [ 3] 	sta df_tmpptra+1
e235 : 48               [ 3] 	pha
e236 : da               [ 3] 	phx
                             	; get the starting value from op stack
e237 : 2002f3           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e23a : a001             [ 2] 	ldy #1
e23c : 91d7             [ 5] 	sta (df_tmpptra),y
e23e : 8a               [ 2] 	txa
e23f : 88               [ 2] 	dey
e240 : 92d7             [ 5] 	sta (df_tmpptra)
                             
                             	; find end value
                             	; evaluate the end value
e242 : e6be             [ 5] 	inc df_exeoff
e244 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e247 : 20bcf2           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e24a : e6be             [ 5] 	inc df_exeoff
e24c : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e24f : 20bcf2           [ 6] 	jsr df_rst_pushWord
                             	; save the counter slot address
e252 : fa               [ 4] 	plx
e253 : 68               [ 4] 	pla
e254 : 20bcf2           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
AS65 Assembler for R6502 [1.42].                                     Page  138
---------------------------------- bank1.s -----------------------------------

                             	; stack contains counter slot, step val, end val
                             	; now push for token
e257 : a98e             [ 2] 	lda #DFRT_FOR
e259 : 4ca4f2           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             
e25c :                       df_rt_next
                             	; remember stack position
e25c : a4ac             [ 3] 	ldy df_rtstop
e25e : 5a               [ 3] 	phy
e25f : 20adf2           [ 6] 	jsr df_rst_popByte
e262 : c98e             [ 2] 	cmp #DFRT_FOR
e264 : d04f             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e266 : 20caf2           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e269 : 86dd             [ 3] 	stx df_tmpptrd
e26b : 85de             [ 3] 	sta df_tmpptrd+1
e26d : b2dd             [ 5] 	lda (df_tmpptrd)
e26f : 85d7             [ 3] 	sta df_tmpptra
e271 : a001             [ 2] 	ldy #1
e273 : b1dd             [ 5] 	lda (df_tmpptrd),y
e275 : 85d8             [ 3] 	sta df_tmpptra+1
                             	
                             	; get step value, save in ptrb
e277 : 20caf2           [ 6] 	jsr df_rst_popWord
e27a : 86d9             [ 3] 	stx df_tmpptrb
e27c : 85da             [ 3] 	sta df_tmpptrb+1
e27e : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e28c : a5d7             [ 3] 	lda df_tmpptra
e28e : 92dd             [ 5] 	sta (df_tmpptrd)
e290 : a001             [ 2] 	ldy #1
e292 : a5d8             [ 3] 	lda df_tmpptra+1
e294 : 91dd             [ 5] 	sta (df_tmpptrd),y
                             	
                             	; get end value, save in ptrb
e296 : 20caf2           [ 6] 	jsr df_rst_popWord
e299 : 86d9             [ 3] 	stx df_tmpptrb
e29b : 85da             [ 3] 	sta df_tmpptrb+1
e29d : 68               [ 4] 	pla					; check if if +ve or -ve step
e29e : 1005             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e2a0 : 205be0           [ 6] 	jsr df_rt_gte_calc
e2a3 : 8003             [ 3] 	bra df_rt_next_check
e2a5 :                       df_rt_check_pos	
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e2a5 : 2047e0           [ 6] 	jsr df_rt_lte_calc
e2a8 :                       df_rt_next_check
                             	; check if true or false
e2a8 : 2002f3           [ 6] 	jsr df_ost_popInt
e2ab : e000             [ 2] 	cpx #0
                             	; if false then next is done
e2ad : f003             [ 3] 	beq df_next_done
                             	; else we continue
e2af : 4cffdd           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
AS65 Assembler for R6502 [1.42].                                     Page  139
---------------------------------- bank1.s -----------------------------------

e2b2 :                       df_next_done
e2b2 : 4cd3e2           [ 3] 	jmp df_rt_untilnext_done
                             	
e2b5 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             	
e2b7 :                       df_rt_repeat
                             	; push statement address
e2b7 : 205edd           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e2ba : a98c             [ 2] 	lda #DFRT_REPEAT
e2bc : 4ca4f2           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             	
e2bf :                       df_rt_until
                             	; remember stack position
e2bf : a4ac             [ 3] 	ldy df_rtstop
e2c1 : 5a               [ 3] 	phy
e2c2 : 20adf2           [ 6] 	jsr df_rst_popByte
e2c5 : c98c             [ 2] 	cmp #DFRT_REPEAT
e2c7 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e2c9 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e2cc : e000             [ 2] 	cpx #0
e2ce : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e2d0 : 4cffdd           [ 3] 	jmp df_rt_pop_stat_go
                             
e2d3 :                       df_rt_untilnext_done
e2d3 : 7a               [ 4] 	ply
                             	; pop 2 items off stack (line address, index)
e2d4 : 20caf2           [ 6] 	jsr df_rst_popWord
e2d7 : 4cadf2           [ 3] 	jmp df_rst_popByte
                             	; and continue
                             ;	clc
                             ;	rts
                             
e2da :                       df_rt_until_err
                             	SWBRK DFERR_UNTIL
                             
                             	
e2dc :                       df_rt_sadd
                             ;	clc
e2dc : 60               [ 6] 	rts
                             	
e2dd :                       df_rt_print_num
e2dd : 2002f3           [ 6] 	jsr df_ost_popInt
e2e0 : 18               [ 2] 	clc
e2e1 : 4c79cb           [ 3] 	jmp print_a_to_d
                             ;	rts
                             	
e2e4 :                       df_rt_print_str
e2e4 : 20faf2           [ 6] 	jsr df_ost_popStr
e2e7 : 86d7             [ 3] 	stx df_tmpptra
e2e9 : 85d8             [ 3] 	sta df_tmpptra+1
e2eb : a000             [ 2] 	ldy #0
e2ed :                       df_rt_print_str_ch
e2ed : b1d7             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  140
---------------------------------- bank1.s -----------------------------------

e2ef : f006             [ 3] 	beq df_rt_print_str_done
e2f1 : 20c0c5           [ 6] 	jsr io_put_ch
e2f4 : c8               [ 2] 	iny
e2f5 : 80f6             [ 3] 	bra df_rt_print_str_ch
e2f7 :                       df_rt_print_str_done
                             ;	clc
e2f7 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e2f8 :                       df_rt_nextdatum
e2f8 : a200             [ 2] 	ldx #0
                             	; load data line offset
e2fa : a4cc             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e2fc : a5cb             [ 3] 	lda df_currdat+1
e2fe : d02e             [ 4] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e308 :                       df_rt_datlinstart
                             	; if end of program then error
e308 : a1ca             [ 6] 	lda (df_currdat,x)
e30a : f032             [ 3] 	beq df_rt_datumerr
                             	; index in to first line byte
e30c : a003             [ 2] 	ldy #3
e30e : 84cc             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e310 :                       df_rt_datastatement
e310 : c8               [ 2] 	iny
e311 : 98               [ 2] 	tya
                             	; end of line reached?
e312 : c1ca             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e314 : d00e             [ 3] 	bne df_rt_getdatatk
e316 :                       df_rt_datnextlin
                             	; if so then go to next line
e316 : 18               [ 2] 	clc
e317 : a5ca             [ 3] 	lda df_currdat
e319 : 61ca             [ 6] 	adc (df_currdat,x)
e31b : 85ca             [ 3] 	sta df_currdat
                             	_bcc 2
                             
e31f : e6cb             [ 5] 	inc df_currdat+1
e321 : 4c08e3           [ 3] 	jmp df_rt_datlinstart
e324 :                       df_rt_getdatatk
e324 : b1ca             [ 5] 	lda (df_currdat),y
e326 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e328 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e32a : d0ea             [ 3] 	bne df_rt_datnextlin
e32c : 84cc             [ 3] 	sty df_datoff
e32e :                       df_rt_skipinitdataptr
e32e : 98               [ 2] 	tya
                             	; end of line reached?
e32f : c1ca             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e331 : f0e3             [ 3] 	beq df_rt_datnextlin
                             	; else see if escape value
e333 : b1ca             [ 5] 	lda (df_currdat),y
e335 : c920             [ 2] 	cmp #DFTK_ESCVAL
e337 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  141
---------------------------------- bank1.s -----------------------------------

e338 : b0f4             [ 3] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e33a : 88               [ 2] 	dey
e33b : 84cc             [ 3] 	sty df_datoff
e33d : 60               [ 6] 	rts
e33e :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e340 :                       df_rt_readdatum
                             	; update data pointer to next data item
e340 : 20f8e2           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e343 : 20e3dd           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e346 : 86d9             [ 3] 	stx df_tmpptrb
e348 : 85da             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e34a : a5bc             [ 3] 	lda df_currlin
e34c : 48               [ 3] 	pha
e34d : a5bd             [ 3] 	lda df_currlin+1
e34f : 48               [ 3] 	pha
e350 : a5be             [ 3] 	lda df_exeoff
e352 : 48               [ 3] 	pha
e353 : a5b4             [ 3] 	lda df_eolidx
e355 : 48               [ 3] 	pha
e356 : a5b5             [ 3] 	lda df_nxtstidx
e358 : 48               [ 3] 	pha
e359 : a5b6             [ 3] 	lda df_curstidx
e35b : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
e364 : a5cc             [ 3] 	lda df_datoff
e366 : 85be             [ 3] 	sta df_exeoff
e368 : a200             [ 2] 	ldx #0
e36a : a1ca             [ 6] 	lda (df_currdat,x)
e36c : 85b4             [ 3] 	sta df_eolidx
e36e : 85b5             [ 3] 	sta df_nxtstidx
e370 : a903             [ 2] 	lda #3
e372 : 85b6             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
e374 : a1d7             [ 6] 	lda (df_tmpptra,x)
e376 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
e377 : a6d9             [ 3] 	ldx df_tmpptrb
e379 : a5da             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
e37b : 207ae6           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
e37e : a5be             [ 3] 	lda df_exeoff
e380 : 85cc             [ 3] 	sta df_datoff
                             	; restore line settings
e382 : 68               [ 4] 	pla
e383 : 85b6             [ 3] 	sta df_curstidx
AS65 Assembler for R6502 [1.42].                                     Page  142
---------------------------------- bank1.s -----------------------------------

e385 : 68               [ 4] 	pla
e386 : 85b5             [ 3] 	sta df_nxtstidx
e388 : 68               [ 4] 	pla
e389 : 85b4             [ 3] 	sta df_eolidx
e38b : 68               [ 4] 	pla
e38c : 85be             [ 3] 	sta df_exeoff
e38e : 68               [ 4] 	pla
e38f : 85bd             [ 3] 	sta df_currlin+1
e391 : 68               [ 4] 	pla
e392 : 85bc             [ 3] 	sta df_currlin
e394 : 60               [ 6] 	rts
                             
                             
e395 :                       df_rt_read
                             	; find variable to read in to from current posit
e395 : a4be             [ 3] 	ldy df_exeoff
e397 :                       df_rt_read_find_var
e397 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
e398 : c4b5             [ 3] 	cpy df_nxtstidx
e39a : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
e39c : b1bc             [ 5] 	lda (df_currlin),y
e39e : c920             [ 2] 	cmp #DFTK_ESCVAL
e3a0 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
e3a2 : 84be             [ 3] 	sty df_exeoff
                             	; go and read in the value
e3a4 : 2040e3           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
e3a7 : 4c95e3           [ 3] 	jmp df_rt_read
                             
e3aa :                       df_rt_read_done
                             	; save position
e3aa : 84be             [ 3] 	sty df_exeoff
e3ac : 60               [ 6] 	rts
                             
                             
e3ad :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
e3ad : 20e3dd           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e3b0 : 86d9             [ 3] 	stx df_tmpptrb
e3b2 : 85da             [ 3] 	sta df_tmpptrb+1
e3b4 : a078             [ 2] 	ldy #120
                             	; go read a line of input
                             	; X,A is ptr has the input, Y is size
e3b6 : 38               [ 2] 	sec
e3b7 : 20cfc5           [ 6] 	jsr io_read_line
                             	; check the type
e3ba : b2d7             [ 5] 	lda (df_tmpptra)
e3bc : 2904             [ 2] 	and #DFVVT_STR
e3be : d008             [ 3] 	bne df_rt_input_str
e3c0 : b2d7             [ 5] 	lda (df_tmpptra)
e3c2 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e3c4 : d003             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
e3c6 : 8018             [ 3] 	bra df_rt_input_err
e3c8 :                       df_rt_input_str
                             	; If string then done!
AS65 Assembler for R6502 [1.42].                                     Page  143
---------------------------------- bank1.s -----------------------------------

                             ;	clc
e3c8 : 60               [ 6] 	rts
                             
e3c9 :                       df_rt_input_num
                             	; X,A = address from tmpb, linbuff must be on pa
e3c9 : a6d9             [ 3] 	ldx df_tmpptrb
e3cb : a5da             [ 3] 	lda df_tmpptrb+1
e3cd : a000             [ 2] 	ldy #0				; any numeric format
e3cf : 203ac9           [ 6] 	jsr con_n_to_a
e3d2 : b00c             [ 3] 	bcs df_rt_input_err
e3d4 : a000             [ 2] 	ldy #0
e3d6 : a579             [ 3] 	lda num_a
e3d8 : 91d9             [ 5] 	sta (df_tmpptrb),y
e3da : c8               [ 2] 	iny
e3db : a57a             [ 3] 	lda num_a+1
e3dd : 91d9             [ 5] 	sta (df_tmpptrb),y
                             ;	clc
e3df : 60               [ 6] 	rts
e3e0 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             	
e3e2 :                       df_rt_local
                             	; get current local count off rt stack
e3e2 : 20adf2           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
e3e5 : 48               [ 3] 	pha
e3e6 : a4be             [ 3] 	ldy df_exeoff
e3e8 : 88               [ 2] 	dey
e3e9 :                       df_rt_local_findesc
e3e9 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
e3ea : c4b5             [ 3] 	cpy df_nxtstidx
e3ec : f019             [ 4] 	beq df_rt_local_done
                             	; find a var
e3ee : b1bc             [ 5] 	lda (df_currlin),y
e3f0 : c911             [ 2] 	cmp #DFTK_VAR
e3f2 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
e3f4 : c8               [ 2] 	iny
                             	; get var slot in A,X
e3f5 : b1bc             [ 5] 	lda (df_currlin),y
e3f7 : aa               [ 2] 	tax
e3f8 : c8               [ 2] 	iny
e3f9 : b1bc             [ 5] 	lda (df_currlin),y
e3fb : 84be             [ 3] 	sty df_exeoff
                             	; localise this variable
e3fd : 2090f2           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
e400 : 68               [ 4] 	pla
e401 : 1a               [ 2] 	inc a
e402 : 48               [ 3] 	pha
e403 : a4be             [ 3] 	ldy df_exeoff
e405 : 80e2             [ 4] 	bra df_rt_local_findesc
e407 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
e407 : 68               [ 4] 	pla
e408 : 4ca4f2           [ 3] 	jmp df_rst_pushByte
                             ;	clc
AS65 Assembler for R6502 [1.42].                                     Page  144
---------------------------------- bank1.s -----------------------------------

                             ;	rts
                             	
e40b :                       df_rt_redim
e40b : 38               [ 2] 	sec
e40c : b001             [ 3] 	bcs df_rt_dim_main
e40e :                       df_rt_dim
e40e : 18               [ 2] 	clc
e40f :                       df_rt_dim_main
e40f : 08               [ 3] 	php
e410 :                       df_rt_dim_loop
e410 : a4be             [ 3] 	ldy df_exeoff
e412 : 88               [ 2] 	dey
e413 :                       df_rt_dim_findesc
                             	; check end of line
e413 : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
e414 : c4b5             [ 3] 	cpy df_nxtstidx
e416 : f076             [ 3] 	beq df_rt_dim_done
                             	; find a var
e418 : b1bc             [ 5] 	lda (df_currlin),y
e41a : c911             [ 2] 	cmp #DFTK_VAR
e41c : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
e41e : c8               [ 2] 	iny
                             	; get var address
e41f : b1bc             [ 5] 	lda (df_currlin),y
e421 : 85d7             [ 3] 	sta df_tmpptra
e423 : c8               [ 2] 	iny
e424 : b1bc             [ 5] 	lda (df_currlin),y
e426 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
e428 : c8               [ 2] 	iny
e429 : 84be             [ 3] 	sty df_exeoff
                             	; If re-dim, don't check for existing dimensions
e42b : 28               [ 4] 	plp
e42c : 08               [ 3] 	php
e42d : b006             [ 3] 	bcs df_rt_skip_dim_chk
                             	; check if already dim'd
e42f : a003             [ 2] 	ldy #DFVVT_DIM1
e431 : b1d7             [ 5] 	lda (df_tmpptra),y
e433 : d05b             [ 3] 	bne df_rt_dim_err
e435 :                       df_rt_skip_dim_chk
                             	; Save slot address found earlier
e435 : a5d7             [ 3] 	lda df_tmpptra
e437 : 48               [ 3] 	pha
e438 : a5d8             [ 3] 	lda df_tmpptra+1
e43a : 48               [ 3] 	pha
e43b : 2010db           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
e43e : 68               [ 4] 	pla
e43f : 85d8             [ 3] 	sta df_tmpptra+1
e441 : 68               [ 4] 	pla
e442 : 85d7             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
e444 : 5a               [ 3] 	phy
e445 : da               [ 3] 	phx
e446 : a003             [ 2] 	ldy #DFVVT_DIM1
e448 : 68               [ 4] 	pla
e449 : 91d7             [ 5] 	sta (df_tmpptra),y
e44b : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  145
---------------------------------- bank1.s -----------------------------------

e44c : 68               [ 4] 	pla
e44d : 91d7             [ 5] 	sta (df_tmpptra),y	
e44f : 28               [ 4] 	plp
e450 : 08               [ 3] 	php
e451 : b02f             [ 3] 	bcs df_rt_dim_set_type
e453 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
e453 : a003             [ 2] 	ldy #DFVVT_DIM1
e455 : b1d7             [ 5] 	lda (df_tmpptra),y
e457 : 8579             [ 3] 	sta num_a
e459 : 647a             [ 3] 	stz num_a+1
e45b : c8               [ 2] 	iny
e45c : b1d7             [ 5] 	lda (df_tmpptra),y
e45e : d002             [ 3] 	bne df_rt_dim2_nz
e460 : a901             [ 2] 	lda #1
e462 :                       df_rt_dim2_nz
e462 : 857d             [ 3] 	sta num_b
e464 : 647e             [ 3] 	stz num_b+1
e466 : 2067cc           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
e469 : b2d7             [ 5] 	lda (df_tmpptra)
e46b : 2901             [ 2] 	and #DFVVT_INT
e46d : f004             [ 3] 	beq df_rt_dim2_mul2
e46f : 0679             [ 5] 	asl num_a
e471 : 267a             [ 5] 	rol num_a+1
e473 :                       df_rt_dim2_mul2	
                             	; finally, we have a size of array
e473 : a679             [ 3] 	ldx num_a
e475 : a57a             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
e477 : 201ff3           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
e47a : a002             [ 2] 	ldy #DFVVT_HI
e47c : 91d7             [ 5] 	sta (df_tmpptra),y
e47e : 8a               [ 2] 	txa
e47f : 88               [ 2] 	dey
e480 : 91d7             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
e482 :                       df_rt_dim_set_type
e482 : b2d7             [ 5] 	lda (df_tmpptra)
e484 : 0980             [ 2] 	ora #DFVVT_PTR
e486 : 92d7             [ 5] 	sta (df_tmpptra)
                             	; don't increment byte again - go check for more
e488 : 8086             [ 3] 	bra df_rt_dim_loop	
e48a :                       df_rt_dim_next_byte
e48a : e6be             [ 5] 	inc df_exeoff
e48c : 8080             [ 3] 	bra df_rt_dim
e48e :                       df_rt_dim_done
                             ;	clc
e48e : 28               [ 4] 	plp
e48f : 60               [ 6] 	rts
e490 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
e492 :                       df_rt_cls
                             	; set cursror position to top left first
e492 : a200             [ 2] 	ldx #0
e494 : a000             [ 2] 	ldy #0
e496 : 20a6c3           [ 6] 	jsr _gr_set_cur
AS65 Assembler for R6502 [1.42].                                     Page  146
---------------------------------- bank1.s -----------------------------------

e499 : 4ccec2           [ 3] 	jmp _gr_cls
                             ;	clc
                             ;	rts
                             	
e49c :                       df_rt_plot
                             	; evaluate the expression
e49c : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e49f : da               [ 3] 	phx
                             	; jump over comma
e4a0 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e4a2 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e4a5 : da               [ 3] 	phx
                             	; jump over comma
e4a6 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e4a8 : 209ad9           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
                             	_df_ost_peekType
                             
                             	; if >=0x80 then a pointer / string
e4b0 : 2904             [ 2] 	and #DFST_STR
e4b2 : d014             [ 3] 	bne df_rt_plotstr
                             	; else it is int
e4b4 : 2002f3           [ 6] 	jsr df_ost_popInt
                             	; put low byte of pop result in a
e4b7 : 8a               [ 2] 	txa
e4b8 : a616             [ 3] 	ldx vdp_base+vdp_gmode	; Check if in hires mode
e4ba : e010             [ 2] 	cpx #0x10
e4bc : b005             [ 3] 	bcs df_rt_hchar
                             	; get y and x in that order
e4be : 7a               [ 4] 	ply
e4bf : fa               [ 4] 	plx
e4c0 : 4c46c3           [ 3] 	jmp _gr_plot
e4c3 :                       df_rt_hchar
                             	; get y and x in that order
e4c3 : 7a               [ 4] 	ply
e4c4 : fa               [ 4] 	plx
e4c5 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e4c8 :                       df_rt_plotstr
                             	; pop string pointer
e4c8 : 20fef2           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
e4cb : 86d7             [ 3] 	stx df_tmpptra
e4cd : 85d8             [ 3] 	sta df_tmpptra+1
e4cf : a416             [ 3] 	ldy vdp_base+vdp_gmode	; Check if in hires mode
e4d1 : c010             [ 2] 	cpy #0x10
e4d3 : b017             [ 3] 	bcs df_rt_hplotstr
                             	; get y and x in that order
e4d5 : 7a               [ 4] 	ply
e4d6 : fa               [ 4] 	plx
                             	; set cursror position
e4d7 :                       df_rt_plotstrch
e4d7 : b2d7             [ 5] 	lda (df_tmpptra)
e4d9 : f010             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e4e1 : da               [ 3] 	phx
e4e2 : 5a               [ 3] 	phy
AS65 Assembler for R6502 [1.42].                                     Page  147
---------------------------------- bank1.s -----------------------------------

e4e3 : 2046c3           [ 6] 	jsr _gr_plot
e4e6 : 7a               [ 4] 	ply
e4e7 : fa               [ 4] 	plx
e4e8 : e8               [ 2] 	inx
e4e9 : 80ec             [ 3] 	bra df_rt_plotstrch
e4eb :                       df_rt_plotstrdone
e4eb : 60               [ 6] 	rts
e4ec :                       df_rt_hplotstr
                             	; get y and x in that order
e4ec : 7a               [ 4] 	ply
e4ed : fa               [ 4] 	plx
                             	; set cursror position
e4ee :                       df_rt_hplotstrch
e4ee : b2d7             [ 5] 	lda (df_tmpptra)
e4f0 : f0f9             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e4f8 : da               [ 3] 	phx
e4f9 : 5a               [ 3] 	phy
e4fa : 205ec3           [ 6] 	jsr _gr_hchar
e4fd : 7a               [ 4] 	ply
e4fe : 68               [ 4] 	pla
e4ff : 18               [ 2] 	clc			; Assume pitch 8 for now
e500 : 6908             [ 2] 	adc #8
e502 : aa               [ 2] 	tax
e503 : 80e9             [ 4] 	bra df_rt_hplotstrch
                             
e505 :                       df_rt_cursor
                             	; evaluate the expression
e505 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
e508 : 8606             [ 3] 	stx vdp_curoff
                             ;	clc
e50a : 60               [ 6] 	rts
                             		
e50b :                       df_rt_himem
                             	; evaluate the expression
e50b : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
e50e : 8eb40c           [ 4] 	stx df_memtop
e511 : 8db50c           [ 4] 	sta df_memtop+1
                             	; now clear everything down
e514 : 4c44f3           [ 3] 	jmp df_clear
e517 : 60               [ 6] 	rts
                             
e518 :                       df_rt_mode
e518 :                       df_rt_hires
                             	; evaluate the expression
e518 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; only interested in low byte
e51b : 8a               [ 2] 	txa
e51c : 4cc6c1           [ 3] 	jmp _gr_init_screen
                             	
e51f :                       df_rt_pixmode
                             	; evaluate the expression X = mode
e51f : 2094d9           [ 6] 	jsr df_rt_getnval
e522 : 8622             [ 3] 	stx gr_scrngeom+gr_pixmode
                             ;	clc
e524 : 60               [ 6] 	rts
                             
e525 :                       df_rt_pixmask
AS65 Assembler for R6502 [1.42].                                     Page  148
---------------------------------- bank1.s -----------------------------------

                             	; evaluate the expression X = mask
e525 : 2094d9           [ 6] 	jsr df_rt_getnval
e528 : 8623             [ 3] 	stx gr_scrngeom+gr_pixmask
                             ;	clc
e52a : 60               [ 6] 	rts
                             
e52b :                       df_rt_pixcol
                             	; evaluate the expression X = col
e52b : 2094d9           [ 6] 	jsr df_rt_getnval
e52e : 8624             [ 3] 	stx gr_scrngeom+gr_pixcol
                             ;	clc
e530 : 60               [ 6] 	rts
                             
e531 :                       df_rt_put
                             	; evaluate the byte to put
e531 : 2094d9           [ 6] 	jsr df_rt_getnval
e534 : 8a               [ 2] 	txa
e535 : 20c0c5           [ 6] 	jsr io_put_ch
e538 : 60               [ 6] 	rts
                             
e539 :                       df_rt_point
e539 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
e53c : a6d7             [ 3] 	ldx df_tmpptra
e53e : a4d9             [ 3] 	ldy df_tmpptrb
e540 : 4c76c3           [ 3] 	jmp _gr_point
                             ;	clc
                             ;	rts
                             
e543 :                       df_rt_hplot
e543 : 2060dc           [ 6] 	jsr df_rt_parm_3ints
e546 : a6d7             [ 3] 	ldx df_tmpptra				; load x
e548 : a4d9             [ 3] 	ldy	df_tmpptrb				; load y
e54a : a5db             [ 3] 	lda df_tmpptrc				; load char
e54c : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e54f :                       df_rt_circle
e54f : 2060dc           [ 6] 	jsr df_rt_parm_3ints
e552 : a5d7             [ 3] 	lda df_tmpptra				; load x0
e554 : 8579             [ 3] 	sta num_a
e556 : a5d9             [ 3] 	lda	df_tmpptrb				; load y0
e558 : 857a             [ 3] 	sta num_a+1
e55a : a5db             [ 3] 	lda df_tmpptrc				; load r
e55c : 857b             [ 3] 	sta num_a+2
e55e : 4c2ec3           [ 3] 	jmp _gr_circle
                             
e561 :                       df_rt_line
e561 : 2077dc           [ 6] 	jsr df_rt_parm_4ints
e564 : a5d7             [ 3] 	lda df_tmpptra				; load x0
e566 : 8579             [ 3] 	sta num_a
e568 : a5d9             [ 3] 	lda	df_tmpptrb				; load y0
e56a : 857a             [ 3] 	sta num_a+1
e56c : a5db             [ 3] 	lda df_tmpptrc				; load x1
e56e : 857b             [ 3] 	sta num_a+2
e570 : a5dd             [ 3] 	lda df_tmpptrd				; load y1
e572 : 857c             [ 3] 	sta num_a+3
e574 : 4cfec2           [ 3] 	jmp _gr_line
                             
e577 :                       df_rt_box
e577 : 2077dc           [ 6] 	jsr df_rt_parm_4ints
e57a : a5d7             [ 3] 	lda df_tmpptra				; load x0
e57c : 8579             [ 3] 	sta num_a
e57e : a5d9             [ 3] 	lda	df_tmpptrb				; load y0
AS65 Assembler for R6502 [1.42].                                     Page  149
---------------------------------- bank1.s -----------------------------------

e580 : 857a             [ 3] 	sta num_a+1
e582 : a5db             [ 3] 	lda df_tmpptrc				; load x1
e584 : 857b             [ 3] 	sta num_a+2
e586 : a5dd             [ 3] 	lda df_tmpptrd				; load y1
e588 : 857c             [ 3] 	sta num_a+3
e58a : 4c16c3           [ 3] 	jmp _gr_box
                             
e58d :                       df_rt_shape
e58d : 2060dc           [ 6] 	jsr df_rt_parm_3ints
e590 : a6d7             [ 3] 	ldx df_tmpptra				; load x
e592 : da               [ 3] 	phx
e593 : a4d9             [ 3] 	ldy	df_tmpptrb				; load y
e595 : 5a               [ 3] 	phy
e596 : a6db             [ 3] 	ldx df_tmpptrc				; load coords[]
e598 : a5dc             [ 3] 	lda df_tmpptrc+1			; load coords[]
e59a : 20bcf2           [ 6] 	jsr df_rst_pushWord
e59d :                       df_rt_shapeLoop
e59d : 20caf2           [ 6] 	jsr df_rst_popWord			; Get pointer
e5a0 : 86d7             [ 3] 	stx df_tmpptra
e5a2 : 85d8             [ 3] 	sta df_tmpptra+1
e5a4 : b2d7             [ 5] 	lda (df_tmpptra)			; Get X coord as int
e5a6 : 8533             [ 3] 	sta tmp_v1
e5a8 : a001             [ 2] 	ldy #1
e5aa : b1d7             [ 5] 	lda (df_tmpptra),y			; Get X hi byte
e5ac : 8534             [ 3] 	sta tmp_v1+1
e5ae : c8               [ 2] 	iny
e5af : b1d7             [ 5] 	lda (df_tmpptra),y			; Get Y coord as int
e5b1 : 8537             [ 3] 	sta tmp_b
e5b3 : c8               [ 2] 	iny
e5b4 : b1d7             [ 5] 	lda (df_tmpptra),y			; Get Y hi byte
e5b6 : 8538             [ 3] 	sta tmp_b+1
e5b8 : a533             [ 3] 	lda tmp_v1					; If X and Y low are zero then en
e5ba : d007             [ 3] 	bne df_rt_shapeCalc
e5bc : a537             [ 3] 	lda tmp_b
e5be : d003             [ 3] 	bne df_rt_shapeCalc
                             	; Got here then must be finished
e5c0 : 68               [ 4] 	pla							; Pop bytes off 6502 stack
e5c1 : 68               [ 4] 	pla
e5c2 : 60               [ 6] 	rts
e5c3 :                       df_rt_shapeCalc
e5c3 : 18               [ 2] 	clc
e5c4 : a5d7             [ 3] 	lda df_tmpptra				; Increment coord pointer 
e5c6 : 6904             [ 2] 	adc #4						; 2 ints is 4 bytes per coord
e5c8 : aa               [ 2] 	tax
e5c9 : a5d8             [ 3] 	lda df_tmpptra+1
e5cb : 6900             [ 2] 	adc #0
e5cd : 20bcf2           [ 6] 	jsr df_rst_pushWord			; Put pointer on runtime s
                             	; previous cursor is starting position
                             	; plus delta is new position
e5d0 : 68               [ 4] 	pla							; get y0 off stack
e5d1 : 18               [ 2] 	clc
e5d2 : 857a             [ 3] 	sta num_a+1
e5d4 : 6537             [ 3] 	adc tmp_b
e5d6 : 857c             [ 3] 	sta num_a+3					; y1 = y0+dy
e5d8 : aa               [ 2] 	tax							; save y1 in X reg
e5d9 : 68               [ 4] 	pla							; get x0 off stack
e5da : 18               [ 2] 	clc
e5db : 8579             [ 3] 	sta num_a					; x0
e5dd : 6533             [ 3] 	adc tmp_v1
e5df : 857b             [ 3] 	sta num_a+2					; x1
e5e1 : 48               [ 3] 	pha							; save x1
e5e2 : da               [ 3] 	phx							; save y1
AS65 Assembler for R6502 [1.42].                                     Page  150
---------------------------------- bank1.s -----------------------------------

e5e3 : 20fec2           [ 6] 	jsr _gr_line				; line x0,y0,x1,y1
e5e6 : 80b5             [ 3] 	bra df_rt_shapeLoop			; go back to next coord
                             	
e5e8 :                       df_rt_wait
                             	; evaluate the expression
e5e8 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
e5eb : a8               [ 2] 	tay
e5ec :                       df_rt_wait_loop
                             	; check X,Y==0
e5ec : 8a               [ 2] 	txa
e5ed : d004             [ 3] 	bne df_rt_wait_countdown
e5ef : 98               [ 2] 	tya
e5f0 : d001             [ 3] 	bne df_rt_wait_countdown
                             	; Done (wait 0 returns immediately)
e5f2 : 60               [ 6] 	rts
e5f3 :                       df_rt_wait_countdown
                             	; get vdp low byte timer val in A for tick wait
e5f3 : a504             [ 3] 	lda vdp_int_cnt
e5f5 : ca               [ 2] 	dex
e5f6 : e0ff             [ 2] 	cpx #0xff
e5f8 : d001             [ 3] 	bne df_rt_wait_tick
e5fa : 88               [ 2] 	dey
e5fb :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
e5fb : c504             [ 3] 	cmp vdp_int_cnt
e5fd : f0fc             [ 3] 	beq df_rt_wait_tick
e5ff : d0eb             [ 3] 	bne df_rt_wait_loop		; Always
                             	
e601 :                       df_rt_printat
                             	; Get x,y
e601 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
e604 : a6d7             [ 3] 	ldx df_tmpptra
e606 : a4d9             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
e608 : 20a6c3           [ 6] 	jsr _gr_set_cur
                             	; and continue to normal print command
e60b :                       df_rt_print
e60b : a4be             [ 3] 	ldy df_exeoff
e60d : 88               [ 2] 	dey
e60e :                       df_rt_print_ws
e60e : c8               [ 2] 	iny
                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
e60f : c4b5             [ 3] 	cpy df_nxtstidx
e611 : f026             [ 3] 	beq df_rt_print_done
e613 : b1bc             [ 5] 	lda (df_currlin),y
e615 : c93a             [ 2] 	cmp #':'
e617 : f020             [ 3] 	beq df_rt_print_done
e619 : c920             [ 2] 	cmp #' '
e61b : f0f1             [ 3] 	beq df_rt_print_ws
e61d : c92c             [ 2] 	cmp #','
e61f : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
e621 : 84be             [ 3] 	sty df_exeoff
                             	
                             	; if starts with string literal then process sev
                             ;	cmp #DFTK_STRLIT
                             ;	beq df_rt_print_string
                             	; else evaluate a numeric
e623 : 209ad9           [ 6] 	jsr df_rt_neval
AS65 Assembler for R6502 [1.42].                                     Page  151
---------------------------------- bank1.s -----------------------------------

                             	; check what is on the argument stack
                             	_df_ost_peekType
                             
e62b : 2904             [ 2] 	and #DFST_STR
e62d : d005             [ 3] 	bne df_rt_print_gotstr
e62f : 20dde2           [ 6] 	jsr df_rt_print_num
e632 : 80d7             [ 3] 	bra df_rt_print
e634 :                       df_rt_print_gotstr
e634 : 20e4e2           [ 6] 	jsr df_rt_print_str
e637 : 80d2             [ 3] 	bra df_rt_print
                             ;df_rt_print_string
                             ;	; point to string accumulator
                             ;	ldx df_sevalptr
                             ;	lda df_sevalptr+1
                             ;	jsr df_rt_seval
                             ;	bra df_rt_print_gotstr
e639 :                       df_rt_print_done
e639 : 84be             [ 3] 	sty df_exeoff
e63b : 60               [ 6] 	rts
                             	
e63c :                       df_rt_println
e63c : 200be6           [ 6] 	jsr df_rt_print
e63f : a90d             [ 2] 	lda #UTF_CR
e641 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
e644 :                       df_rt_nassign
e644 : 48               [ 3] 	pha
e645 : da               [ 3] 	phx
                             	; now go evaluate expression in to A,X
e646 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to
e649 : 7a               [ 4] 	ply
e64a : 84d7             [ 3] 	sty df_tmpptra
e64c : 7a               [ 4] 	ply
e64d : 84d8             [ 3] 	sty df_tmpptra+1
                             	; save X,A int in contents section
e64f : a001             [ 2] 	ldy #1
e651 : 91d7             [ 5] 	sta (df_tmpptra),y
e653 : 8a               [ 2] 	txa
e654 : 88               [ 2] 	dey
e655 : 91d7             [ 5] 	sta (df_tmpptra),y
                             
e657 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
e658 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being X,A
e658 : 204eda           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
e65b : 4cfaf2           [ 3] 	jmp df_ost_popStr
                             	
                             ;	clc
                             ;	rts
                             
                             ; generate lvar from a var token ready for assign
e65e :                       df_rt_generate_lvar
AS65 Assembler for R6502 [1.42].                                     Page  152
---------------------------------- bank1.s -----------------------------------

                             	; move past escape val
e65e : a4be             [ 3] 	ldy df_exeoff
e660 : c8               [ 2] 	iny
                             	; pointing to variable index
e661 : b1bc             [ 5] 	lda (df_currlin),y
e663 : 85d7             [ 3] 	sta df_tmpptra
e665 : c8               [ 2] 	iny
e666 : b1bc             [ 5] 	lda (df_currlin),y
e668 : 84be             [ 3] 	sty df_exeoff
e66a : 85d8             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
e66c : b2d7             [ 5] 	lda (df_tmpptra)
e66e : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
e66f : 38               [ 2] 	sec
e670 : 2034db           [ 6] 	jsr df_rt_eval_var
e673 : 20fef2           [ 6] 	jsr df_ost_popPtr
                             	; pull the type previously saved into Y
e676 : 7a               [ 4] 	ply
                             	; move past the lvar variable index
e677 : e6be             [ 5] 	inc df_exeoff
                             ;	clc
e679 : 60               [ 6] 	rts
                             
                             ; assign
                             ; X,A,Y contain lvar pointer and type
e67a :                       df_rt_doassign
                             	; save A and put type Y in to A
e67a : 48               [ 3] 	pha
e67b : 98               [ 2] 	tya
e67c : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
e67e : f004             [ 3] 	beq df_rt_assign_num
                             	; remember to restore A
                             	; jump to string expression evaluator
e680 : 68               [ 4] 	pla
e681 : 4c58e6           [ 3] 	jmp df_rt_sassign
e684 :                       df_rt_assign_num
                             	; else jump to numeric expression evaluator
                             	; remember to restore A
e684 : 68               [ 4] 	pla
e685 : 4c44e6           [ 3] 	jmp df_rt_nassign
                             
                             ; general assignment execution
e688 :                       df_rt_assign
e688 : 205ee6           [ 6] 	jsr df_rt_generate_lvar
                             	; go and do the assignment
e68b : 4c7ae6           [ 3] 	jmp df_rt_doassign
                             	
                             ; comment or data token is ignored by runtime
e68e :                       df_rt_comment
e68e :                       df_rt_data
                             ;	clc
e68e : 60               [ 6] 	rts
                             
                             	
                             ; run token	
e68f :                       df_rt_run
                             ;	sec
e68f : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  153
---------------------------------- bank1.s -----------------------------------

                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
e690 :                       df_rt_eos
e690 : a4be             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
e692 : c4b5             [ 3] 	cpy df_nxtstidx
e694 : f008             [ 3] 	beq df_rt_eos_true
e696 : b1bc             [ 5] 	lda (df_currlin),y
e698 : c93a             [ 2] 	cmp #':'
e69a : f002             [ 3] 	beq df_rt_eos_true
e69c : 18               [ 2] 	clc
e69d : 60               [ 6] 	rts
e69e :                       df_rt_eos_true
e69e : 38               [ 2] 	sec
e69f : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
e6a0 :                       df_rt_renum
e6a0 : e6be             [ 5] 	inc df_exeoff
e6a2 : 2060dc           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
e6a5 : a6d7             [ 3] 	ldx df_tmpptra
e6a7 : a5d8             [ 3] 	lda df_tmpptra+1
e6a9 : 20acd7           [ 6] 	jsr df_pg_find_line
e6ac : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
e6b0 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
e6b0 : 86dd             [ 3] 	stx df_tmpptrd
e6b2 : 85de             [ 3] 	sta df_tmpptrd+1
e6b4 :                       df_rt_renum_do
                             	; if not end of program
e6b4 : a000             [ 2] 	ldy #0
e6b6 : b1dd             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
e6b8 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
e6ba : 60               [ 6] 	rts
e6bb :                       df_rt_renum_update
                             	; so set this line number to new line number
e6bb : a001             [ 2] 	ldy #DFTK_LINNUM
e6bd : a5d9             [ 3] 	lda df_tmpptrb
e6bf : 91dd             [ 5] 	sta (df_tmpptrd),y
e6c1 : c8               [ 2] 	iny
e6c2 : a5da             [ 3] 	lda df_tmpptrb+1
e6c4 : 91dd             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
e6d3 :                       df_rt_renum_next
                             	; point ptrd to the next line
e6d3 : 18               [ 2] 	clc
e6d4 : a5dd             [ 3] 	lda df_tmpptrd
e6d6 : a200             [ 2] 	ldx #0
e6d8 : 61dd             [ 6] 	adc (df_tmpptrd,x)
e6da : 85dd             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
AS65 Assembler for R6502 [1.42].                                     Page  154
---------------------------------- bank1.s -----------------------------------

e6de : e6de             [ 5] 	inc df_tmpptrd+1
e6e0 : 4cb4e6           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
e6e3 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
e6eb : a5a7             [ 3] 	lda df_varcnt
e6ed : 85d9             [ 3] 	sta df_tmpptrb
e6ef :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
e6ef : a5d9             [ 3] 	lda df_tmpptrb
e6f1 : f03a             [ 4] 	beq df_rt_listpn_done
e6f3 : a000             [ 2] 	ldy #0
e6f5 : b1d7             [ 5] 	lda (df_tmpptra),y
e6f7 : c95f             [ 2] 	cmp #'_'
e6f9 : d01b             [ 4] 	bne df_rt_listnextvnt
e6fb :                       df_rt_listprocch
e6fb : b1d7             [ 5] 	lda (df_tmpptra),y
e6fd : 20c0c5           [ 6] 	jsr io_put_ch
e700 : aa               [ 2] 	tax
e701 : f003             [ 3] 	beq df_rt_listproccr
e703 : c8               [ 2] 	iny
e704 : d0f5             [ 4] 	bne df_rt_listprocch		; Always
e706 :                       df_rt_listproccr
e706 : a90d             [ 2] 	lda #UTF_CR
e708 : 20c0c5           [ 6] 	jsr io_put_ch
e70b : 18               [ 2] 	clc
e70c :                       df_rt_listprocpause
e70c : 20bdc5           [ 6] 	jsr io_get_ch
e70f : c920             [ 2] 	cmp #' '
e711 : d003             [ 3] 	bne df_rt_listnextvnt
e713 :                       df_rt_listwait
e713 : 38               [ 2] 	sec
e714 : b0f6             [ 3] 	bcs df_rt_listprocpause
e716 :                       df_rt_listnextvnt
e716 : b1d7             [ 5] 	lda (df_tmpptra),y
e718 : f003             [ 3] 	beq df_rt_listgotnext
e71a : c8               [ 2] 	iny
e71b : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
e71d :                       df_rt_listgotnext
                             	; dec vnt #
e71d : c6d9             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
e71f : c8               [ 2] 	iny
                             	; add this to vnt pointer
e720 : 18               [ 2] 	clc
e721 : 98               [ 2] 	tya
e722 : 65d7             [ 3] 	adc df_tmpptra
e724 : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e728 : e6d8             [ 5] 	inc df_tmpptra+1
e72a : 4cefe6           [ 3] 	jmp df_rt_listcheckvnt
e72d :                       df_rt_listpn_done
e72d : 60               [ 6] 	rts
                             
e72e :                       df_rt_listproc
                             	; A already contains '_'
AS65 Assembler for R6502 [1.42].                                     Page  155
---------------------------------- bank1.s -----------------------------------

e72e : 8d000a           [ 4] 	sta df_linbuff
e731 : a200             [ 2] 	ldx #0
e733 : a4be             [ 3] 	ldy df_exeoff
e735 :                       df_rt_listp_copy
e735 : c8               [ 2] 	iny
e736 : e8               [ 2] 	inx
e737 : b1bc             [ 5] 	lda (df_currlin),y
e739 : 9d000a           [ 5] 	sta df_linbuff,x
e73c : 20f4ce           [ 6] 	jsr df_tk_isalphanum
e73f : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
e741 : a200             [ 2] 	ldx #0
e743 : 86b2             [ 3] 	stx df_linoff
                             	; save runtime pos
e745 : 84be             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
e747 : 2016cd           [ 6] 	jsr df_var_find
e74a : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
e74c : 86c4             [ 3] 	stx df_procptr
e74e : 85c5             [ 3] 	sta df_procptr+1
e750 : 2083dd           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
e753 : 86d7             [ 3] 	stx df_tmpptra
e755 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
e757 :                       df_rt_listp_findend
                             	; Go to next stat
e757 : 2030dd           [ 6] 	jsr df_rt_nextstat
e75a : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
e75c : 98               [ 2] 	tya
e75d : 48               [ 3] 	pha
                             	; find the command
e75e :                       df_rt_listp_findcmd
e75e : c8               [ 2] 	iny
e75f : b1c6             [ 5] 	lda (df_lineptr),y
e761 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
e763 : 8539             [ 3] 	sta tmp_d
e765 : 68               [ 4] 	pla
e766 : a8               [ 2] 	tay
e767 : a539             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
e769 : c987             [ 2] 	cmp #DFRT_ENDDEF
e76b : f00b             [ 3] 	beq df_rt_listp_done
e76d : c986             [ 2] 	cmp #DFRT_DEF
e76f : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
AS65 Assembler for R6502 [1.42].                                     Page  156
---------------------------------- bank1.s -----------------------------------

e771 : a6c6             [ 3] 	ldx df_lineptr
e773 : a5c7             [ 3] 	lda df_lineptr+1
e775 : 4c57e7           [ 3] 	jmp df_rt_listp_findend
e778 :                       df_rt_listp_done
                             	; Push end line on to stack
e778 : a5c7             [ 3] 	lda df_lineptr+1
e77a : 48               [ 3] 	pha
e77b : 8a               [ 2] 	txa
e77c : 48               [ 3] 	pha
e77d : a5c7             [ 3] 	lda df_lineptr+1
e77f : 4cb9e7           [ 3] 	jmp df_rt_list_line
e782 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
e784 :                       df_rt_list
e784 : a900             [ 2] 	lda #0
e786 : 85df             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
e788 : 20d6dd           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
e78b : 2090e6           [ 6] 	jsr df_rt_eos
                             	; so list whole program
e78e : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
e790 : c95f             [ 2] 	cmp #'_'
e792 : d003             [ 3] 	bne df_rt_list_all
e794 : 4c2ee7           [ 3] 	jmp df_rt_listproc
e797 :                       df_rt_list_all
                             	;if '*' then display all procnames
e797 : c92a             [ 2] 	cmp #'*'
e799 : d003             [ 3] 	bne df_rt_list_linno
e79b : 4ce3e6           [ 3] 	jmp df_rt_listprocnames
e79e :                       df_rt_list_linno
                             	; else get 1st parameter
e79e : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
e7a1 : 20acd7           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
e7a4 : 86d7             [ 3] 	stx df_tmpptra
e7a6 : 85d8             [ 3] 	sta df_tmpptra+1
e7a8 : 4cb3e7           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
e7ab :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
e7b3 :                       df_rt_listprgend
e7b3 : a59e             [ 3] 	lda df_prgend+1
e7b5 : 48               [ 3] 	pha						; df_prgend hi at 102,x
e7b6 : a59d             [ 3] 	lda df_prgend
e7b8 : 48               [ 3] 	pha						; df_prgend lo at 101,x
e7b9 :                       df_rt_list_line
                             	; if line length = 0 then end of program
e7b9 : a000             [ 2] 	ldy #0
AS65 Assembler for R6502 [1.42].                                     Page  157
---------------------------------- bank1.s -----------------------------------

e7bb : b1d7             [ 5] 	lda (df_tmpptra),y
e7bd : f039             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
e7bf : a5df             [ 3] 	lda df_tmpptre
e7c1 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
e7c3 : 18               [ 2] 	clc
e7c4 :                       df_rt_list_synckey
e7c4 : a5df             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
e7c6 : d00b             [ 3] 	bne df_rt_list_line_cont
e7c8 :                       df_rt_list_pause
e7c8 : 20bdc5           [ 6] 	jsr io_get_ch
e7cb : c920             [ 2] 	cmp #' '						; Space = PAUSE
e7cd : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
e7cf : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e7d1 : f025             [ 3] 	beq df_rt_list_line_fin
e7d3 :                       df_rt_list_line_cont
e7d3 : a000             [ 2] 	ldy #0
e7d5 : 84b2             [ 3] 	sty df_linoff
e7d7 : 20fbe7           [ 6] 	jsr df_rt_list_all_line
e7da :                       df_rt_list_next_line
                             	; new line
e7da : 20c2c8           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
e7dd : 18               [ 2] 	clc
e7de : a5d7             [ 3] 	lda df_tmpptra
e7e0 : a000             [ 2] 	ldy #0
e7e2 : 71d7             [ 5] 	adc (df_tmpptra),y
e7e4 : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e7e8 : e6d8             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
e7ea : ba               [ 2] 	tsx
e7eb : 38               [ 2] 	sec
e7ec : bd0101           [ 4] 	lda 0x101,x						; get prend lo from stack frame
e7ef : e5d7             [ 3] 	sbc df_tmpptra
e7f1 : bd0201           [ 4] 	lda 0x102,x						; get prend hi from stack frame
e7f4 : e5d8             [ 3] 	sbc df_tmpptra+1
e7f6 : b0c1             [ 3] 	bcs df_rt_list_line
e7f8 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
e7f8 : 68               [ 4] 	pla
e7f9 : 68               [ 4] 	pla
e7fa :                       df_rt_list_line_only_fin
e7fa : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
e7fb :                       df_rt_list_all_line				; Start here to include nu
e7fb : 2035e9           [ 6] 	jsr df_rt_list_linnum
e7fe :                       df_rt_list_line_only			; Start here for just the 
e7fe : a003             [ 2] 	ldy #3
e800 : b1d7             [ 5] 	lda (df_tmpptra),y
e802 : 85c8             [ 3] 	sta df_lineidx
e804 : c8               [ 2] 	iny
e805 : 84b2             [ 3] 	sty df_linoff
e807 :                       df_rt_list_decode
e807 : a4b2             [ 3] 	ldy df_linoff
e809 : b1d7             [ 5] 	lda (df_tmpptra),y
e80b : 3010             [ 3] 	bmi df_rt_list_token
e80d : c920             [ 2] 	cmp #DFTK_ESCVAL
AS65 Assembler for R6502 [1.42].                                     Page  158
---------------------------------- bank1.s -----------------------------------

e80f : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
e811 : 20c0c5           [ 6] 	jsr io_put_ch
e814 : 4c20e8           [ 3] 	jmp df_rt_list_nexttok
e817 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
e817 : 2039e8           [ 6] 	jsr df_rt_list_decode_esc
e81a : 4c20e8           [ 3] 	jmp df_rt_list_nexttok
e81d :                       df_rt_list_token
e81d : 2046e9           [ 6] 	jsr df_rt_list_decode_token
e820 :                       df_rt_list_nexttok
                             	; advance the line offset
e820 : e6b2             [ 5] 	inc df_linoff
e822 : a5b2             [ 3] 	lda df_linoff
                             	; check if at end of line
e824 : a200             [ 2] 	ldx #0
e826 : c1d7             [ 6] 	cmp (df_tmpptra,x)
e828 : f0d0             [ 4] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
e82a : c5c8             [ 3] 	cmp df_lineidx
e82c : d0d9             [ 3] 	bne df_rt_list_decode
e82e : a8               [ 2] 	tay
                             	; save the next statement offset
e82f : b1d7             [ 5] 	lda (df_tmpptra),y
e831 : 85c8             [ 3] 	sta df_lineidx
e833 : c8               [ 2] 	iny
e834 : 84b2             [ 3] 	sty df_linoff
e836 : 4c07e8           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
e839 :                       df_rt_list_decode_esc
                             	; jump over esc byte
e839 : c8               [ 2] 	iny
e83a : 84b2             [ 3] 	sty df_linoff
e83c : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
e83d : b1d7             [ 5] 	lda (df_tmpptra),y
e83f : 85d9             [ 3] 	sta df_tmpptrb
e841 : c8               [ 2] 	iny
e842 : b1d7             [ 5] 	lda (df_tmpptra),y
e844 : 85da             [ 3] 	sta df_tmpptrb+1
e846 : 88               [ 2] 	dey				; Y is on byte after esc byte
e847 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
e848 : 0a               [ 2] 	asl a
e849 : aa               [ 2] 	tax
e84a : bdfede           [ 4] 	lda df_rt_escjmp,x
e84d : 85db             [ 3] 	sta df_tmpptrc
e84f : bdffde           [ 4] 	lda df_rt_escjmp+1,x
e852 : 85dc             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
e854 : 6cdb00           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
e857 :                       df_rt_lst_reserved
e857 : 60               [ 6] 	rts
                             
                             ; decode a byte char
e858 :                       df_rt_lst_chr
e858 : a927             [ 2] 	lda #0x27			; Single quote
AS65 Assembler for R6502 [1.42].                                     Page  159
---------------------------------- bank1.s -----------------------------------

e85a : 20c0c5           [ 6] 	jsr io_put_ch
e85d : a5d9             [ 3] 	lda df_tmpptrb
e85f : 20c0c5           [ 6] 	jsr io_put_ch
e862 : a927             [ 2] 	lda #0x27			; Single quote
e864 : 20c0c5           [ 6] 	jsr io_put_ch
e867 : c8               [ 2] 	iny
e868 : 84b2             [ 3] 	sty df_linoff
e86a : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
e86b :                       df_rt_lst_hex_pre
e86b : a930             [ 2] 	lda #'0'
e86d : 20c0c5           [ 6] 	jsr io_put_ch
e870 : a978             [ 2] 	lda #'x'
e872 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
e875 :                       df_rt_lst_bythex
e875 : 206be8           [ 6] 	jsr df_rt_lst_hex_pre
e878 :                       df_rt_lst_lo_hex
e878 : a5d9             [ 3] 	lda df_tmpptrb
e87a : 20efc8           [ 6] 	jsr str_a_to_x
e87d : 20c0c5           [ 6] 	jsr io_put_ch
e880 : 8a               [ 2] 	txa
e881 : 20c0c5           [ 6] 	jsr io_put_ch
e884 :                       df_rt_lst_const_done
e884 : c8               [ 2] 	iny
e885 : 84b2             [ 3] 	sty df_linoff
e887 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
e888 :                       df_rt_lst_inthex
e888 : 206be8           [ 6] 	jsr df_rt_lst_hex_pre
e88b : a5da             [ 3] 	lda df_tmpptrb+1
e88d : 20efc8           [ 6] 	jsr str_a_to_x
e890 : 20c0c5           [ 6] 	jsr io_put_ch
e893 : 8a               [ 2] 	txa
e894 : 20c0c5           [ 6] 	jsr io_put_ch
e897 : 4c78e8           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
e89a :                       df_rt_lst_bytbin
e89a : a5d9             [ 3] 	lda df_tmpptrb
e89c : 85da             [ 3] 	sta df_tmpptrb+1
e89e : a208             [ 2] 	ldx #8
e8a0 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
e8a2 :                       df_rt_lst_intbin
e8a2 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
e8a4 :                       df_rt_lst_bin
e8a4 : a930             [ 2] 	lda #'0'
e8a6 : 20c0c5           [ 6] 	jsr io_put_ch
e8a9 : a962             [ 2] 	lda #'b'
e8ab : 20c0c5           [ 6] 	jsr io_put_ch
e8ae :                       df_rt_lst_bit
e8ae : a930             [ 2] 	lda #'0'
e8b0 : 06d9             [ 5] 	asl df_tmpptrb
e8b2 : 26da             [ 5] 	rol df_tmpptrb+1
AS65 Assembler for R6502 [1.42].                                     Page  160
---------------------------------- bank1.s -----------------------------------

e8b4 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
e8b6 :                       df_rt_lst_bit_skip0
e8b6 : 20c0c5           [ 6] 	jsr io_put_ch
e8b9 : ca               [ 2] 	dex
e8ba : d0f2             [ 3] 	bne df_rt_lst_bit
e8bc : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
e8be :                       df_rt_lst_intdec
e8be : a6d9             [ 3] 	ldx df_tmpptrb
e8c0 : a5da             [ 3] 	lda df_tmpptrb+1
e8c2 : c8               [ 2] 	iny
e8c3 : 84b2             [ 3] 	sty df_linoff
e8c5 : 18               [ 2] 	clc
e8c6 : 4c79cb           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
e8c9 :                       df_rt_lst_var
e8c9 :                       df_rt_lst_proc
                             	; jump over the address bytes
e8c9 : c8               [ 2] 	iny
e8ca : 84b2             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
e8dc : a000             [ 2] 	ldy #0
e8de :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
e8de : a5dd             [ 3] 	lda df_tmpptrd
e8e0 : c5d9             [ 3] 	cmp df_tmpptrb
e8e2 : d006             [ 3] 	bne df_rt_list_vvtend
e8e4 : a5de             [ 3] 	lda df_tmpptrd+1
e8e6 : c5da             [ 3] 	cmp df_tmpptrb+1
e8e8 : f021             [ 4] 	beq df_rt_list_gotvvt
e8ea :                       df_rt_list_vvtend
e8ea : b1db             [ 5] 	lda (df_tmpptrc),y
e8ec : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
e8f4 : 4ceae8           [ 3] 	jmp df_rt_list_vvtend
e8f7 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
e8fd : 18               [ 2] 	clc
e8fe : a5dd             [ 3] 	lda df_tmpptrd
e900 : 6908             [ 2] 	adc #DFVVT_SZ
e902 : 85dd             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e906 : e6de             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
e908 : 4cdee8           [ 3] 	jmp df_rt_list_findvvt
e90b :                       df_rt_list_gotvvt
e90b : b1db             [ 5] 	lda (df_tmpptrc),y
AS65 Assembler for R6502 [1.42].                                     Page  161
---------------------------------- bank1.s -----------------------------------

e90d : f025             [ 3] 	beq df_rt_list_donvvt
e90f : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
e918 : 4c0be9           [ 3] 	jmp df_rt_list_gotvvt
                             
e91b :                       df_rt_lst_strlit
e91b : a922             [ 2] 	lda #0x22
e91d : 20c0c5           [ 6] 	jsr io_put_ch
e920 : a4b2             [ 3] 	ldy df_linoff
e922 :                       df_rt_lst_strlitch
e922 : b1d7             [ 5] 	lda (df_tmpptra),y
e924 : f007             [ 3] 	beq df_rt_lst_strlitdon
e926 : 20c0c5           [ 6] 	jsr io_put_ch
e929 : c8               [ 2] 	iny
e92a : 4c22e9           [ 3] 	jmp df_rt_lst_strlitch
e92d :                       df_rt_lst_strlitdon
e92d : a922             [ 2] 	lda #0x22
e92f : 20c0c5           [ 6] 	jsr io_put_ch
e932 : 84b2             [ 3] 	sty df_linoff
e934 :                       df_rt_list_donvvt
e934 : 60               [ 6] 	rts
                             
e935 :                       df_rt_list_linnum
e935 : a001             [ 2] 	ldy #1
e937 : b1d7             [ 5] 	lda (df_tmpptra),y
e939 : aa               [ 2] 	tax
e93a : c8               [ 2] 	iny
e93b : b1d7             [ 5] 	lda (df_tmpptra),y
e93d : 18               [ 2] 	clc
e93e : 2079cb           [ 6] 	jsr print_a_to_d
e941 : a920             [ 2] 	lda #0x20			; Always add a space after line num
e943 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
e946 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
e946 : c997             [ 2] 	cmp #DFRT_ASM
e948 : d003             [ 3] 	bne df_rt_list_decode_token_normal
e94a : 4c84e9           [ 3] 	jmp df_rt_asm_decode_token
e94d :                       df_rt_list_decode_token_normal
e94d : 297f             [ 2] 	and #0x7f
                             	; token 0 and 1 don't get decoded they are impli
e94f : c902             [ 2] 	cmp #2
e951 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
e953 : 60               [ 6] 	rts
e954 :                       df_rt_list_do_decode_tkn
e954 : aa               [ 2] 	tax
e955 : a9a2             [ 2] 	lda #lo(df_tokensyms)
e957 : 85d9             [ 3] 	sta df_tmpptrb
e959 : a9d2             [ 2] 	lda #hi(df_tokensyms)
e95b : 85da             [ 3] 	sta df_tmpptrb+1
e95d :                       df_rt_list_find_sym
e95d : 8a               [ 2] 	txa
e95e : f012             [ 3] 	beq df_rt_list_got_sym
e960 : a000             [ 2] 	ldy #0
e962 :                       df_rt_list_next_ch
e962 : b1d9             [ 5] 	lda (df_tmpptrb),y
e964 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
e96b : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  162
---------------------------------- bank1.s -----------------------------------

e96c : 10f4             [ 3] 	bpl df_rt_list_next_ch
e96e :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
e96e : ca               [ 2] 	dex
e96f : 4c5de9           [ 3] 	jmp df_rt_list_find_sym
e972 :                       df_rt_list_got_sym
e972 : a1d9             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
e974 : 08               [ 3] 	php
e975 : 297f             [ 2] 	and #0x7f
e977 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e980 : 28               [ 4] 	plp
e981 : 10ef             [ 3] 	bpl df_rt_list_got_sym
e983 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
e984 :                       df_rt_asm_decode_token
e984 : e6b2             [ 5] 	inc df_linoff		; Point to token after asm token
e986 : a4b2             [ 3] 	ldy df_linoff
e988 : b1d7             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
e98a : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
e98c : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
e98e : 20c0c5           [ 6] 	jsr io_put_ch
e991 : b1d7             [ 5] 	lda (df_tmpptra),y	;Get asm token back
e993 : 4c39e8           [ 3] 	jmp df_rt_list_decode_esc
e996 :                       df_rt_asm_decode_token_keyword
e996 : 297f             [ 2] 	and #0x7f			; Mask off MSB
e998 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
e999 : a932             [ 2] 	lda #lo(df_asm_tokensyms)
e99b : 85d9             [ 3] 	sta df_tmpptrb
e99d : a9f9             [ 2] 	lda #hi(df_asm_tokensyms)
e99f : 85da             [ 3] 	sta df_tmpptrb+1
e9a1 :                       df_rt_list_find_asm_sym
e9a1 : 8a               [ 2] 	txa
e9a2 : f01b             [ 3] 	beq df_rt_list_got_asm_sym
e9a4 : a000             [ 2] 	ldy #0
e9a6 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
e9ac : b1d9             [ 5] 	lda (df_tmpptrb),y
e9ae : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
e9b0 : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
e9b2 : 38               [ 2] 	sec					; Skip offset and mode bytes
e9b3 : 65d9             [ 3] 	adc df_tmpptrb
e9b5 : 85d9             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
e9b9 : e6da             [ 5] 	inc df_tmpptrb+1
e9bb : ca               [ 2] 	dex					; One less symbol to skip over
e9bc : 4ca1e9           [ 3] 	jmp df_rt_list_find_asm_sym
e9bf :                       df_rt_list_got_asm_sym
e9bf : a1d9             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
e9c1 : c920             [ 2] 	cmp #' '
e9c3 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
e9c5 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e9ce : 4cbfe9           [ 3] 	jmp df_rt_list_got_asm_sym
e9d1 :                       df_rt_asm_decode_token_done
AS65 Assembler for R6502 [1.42].                                     Page  163
---------------------------------- bank1.s -----------------------------------

e9d1 : 60               [ 6] 	rts
                             
                             
e9d2 :                       df_rt_doke
e9d2 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
e9d5 : a5d9             [ 3] 	lda df_tmpptrb
e9d7 : 92d7             [ 5] 	sta (df_tmpptra)
                             	; get high byte to doke
e9d9 : a5da             [ 3] 	lda df_tmpptrb+1
e9db : a001             [ 2] 	ldy #1
                             	; poke hi byte
e9dd : 91d7             [ 5] 	sta (df_tmpptra),y
e9df : 60               [ 6] 	rts
                             	
e9e0 :                       df_rt_poke
e9e0 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
e9e3 : a5d9             [ 3] 	lda df_tmpptrb
e9e5 : 92d7             [ 5] 	sta (df_tmpptra)
                             ;	clc
e9e7 : 60               [ 6] 	rts
                             
e9e8 :                       df_rt_vpoke
e9e8 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
e9eb : a6d7             [ 3] 	ldx df_tmpptra
e9ed : a4d8             [ 3] 	ldy df_tmpptra+1
e9ef : a5d9             [ 3] 	lda df_tmpptrb
e9f1 : 4c1ec4           [ 3] 	jmp _vdp_poke
                             ;	clc
                             ;	rts
                             
e9f4 :                       df_rt_nvpoke
e9f4 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
e9f7 : a6d7             [ 3] 	ldx df_tmpptra
e9f9 : a5d9             [ 3] 	lda df_tmpptrb
e9fb : 4caec4           [ 3] 	jmp _rtc_nvwrite
                             ;	clc
e9fe : 60               [ 6] 	rts
                             
e9ff :                       df_rt_setvdp
e9ff : 2055dc           [ 6] 	jsr df_rt_parm_2ints
ea02 : a5d7             [ 3] 	lda df_tmpptra
ea04 : a6d9             [ 3] 	ldx df_tmpptrb
ea06 : 4c50c6           [ 3] 	jmp vdp_wr_reg
                             ;	clc
                             ;	rts
                             
ea09 :                       df_rt_colour
ea09 : 2060dc           [ 6] 	jsr df_rt_parm_3ints
                             	; colour is a combination of b and c parms
ea0c : a5d9             [ 3] 	lda df_tmpptrb
ea0e : 0a               [ 2] 	asl a
ea0f : 0a               [ 2] 	asl a
ea10 : 0a               [ 2] 	asl a
ea11 : 0a               [ 2] 	asl a
ea12 : 05db             [ 3] 	ora df_tmpptrc
ea14 : 48               [ 3] 	pha
ea15 : a5d7             [ 3] 	lda df_tmpptra
ea17 : c920             [ 2] 	cmp #32					; 32 = border colour
ea19 : f00e             [ 3] 	beq df_rt_colour_border
                             	; else write to the colour table
                             	; first calculate the colour table address
ea1b : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page  164
---------------------------------- bank1.s -----------------------------------

ea1c : 650d             [ 3] 	adc vdp_base+vdp_addr_col
ea1e : aa               [ 2] 	tax
ea1f : a50e             [ 3] 	lda vdp_base+vdp_addr_col+1
ea21 : 6900             [ 2] 	adc #0
ea23 : a8               [ 2] 	tay
ea24 : 68               [ 4] 	pla
                             	; A = colour, YX = address
ea25 : 208ac6           [ 6] 	jsr vdp_poke
ea28 : 60               [ 6] 	rts
ea29 :                       df_rt_colour_border
ea29 : a907             [ 2] 	lda #7
ea2b : fa               [ 4] 	plx
ea2c : 4c50c6           [ 3] 	jmp vdp_wr_reg
                             
ea2f :                       df_rt_sprite
ea2f : 2093dc           [ 6] 	jsr df_rt_parm_5ints
                             	; calculate the sprite number in vram
ea32 : a5d7             [ 3] 	lda df_tmpptra
ea34 : 0a               [ 2] 	asl a
ea35 : 0a               [ 2] 	asl a
ea36 : 18               [ 2] 	clc
ea37 : 6511             [ 3] 	adc vdp_base+vdp_addr_spa
ea39 : aa               [ 2] 	tax
ea3a : a512             [ 3] 	lda vdp_base+vdp_addr_spa+1
ea3c : 6900             [ 2] 	adc #0
ea3e : 78               [ 2] 	sei				; Disable interrupts
ea3f : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
ea42 : a5db             [ 3] 	lda df_tmpptrc
ea44 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
ea47 : a5d9             [ 3] 	lda df_tmpptrb
ea49 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the pattern name (tmpd)
ea4c : a5dd             [ 3] 	lda df_tmpptrd
ea4e : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the colour / ec byte (tmpe)
ea51 : a5df             [ 3] 	lda df_tmpptre
ea53 : 2085c6           [ 6] 	jsr vdp_wr_vram
ea56 : 58               [ 2] 	cli				; Enable interrupts
ea57 : 60               [ 6] 	rts
                             
                             
                             ; copy pattern array to sprite pattern vram
                             ; pattern array is a mim 4 element int
ea58 :                       df_rt_spritepat
ea58 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
                             	; save sprite number
ea5b : 86d7             [ 3] 	stx df_tmpptra
ea5d : 64d8             [ 3] 	stz df_tmpptra+1
                             	; multiply by 8 to get pattern offset
ea5f : 06d7             [ 5] 	asl df_tmpptra
ea61 : 26d8             [ 5] 	rol df_tmpptra+1
ea63 : 06d7             [ 5] 	asl df_tmpptra
ea65 : 26d8             [ 5] 	rol df_tmpptra+1
ea67 : 06d7             [ 5] 	asl df_tmpptra
ea69 : 26d8             [ 5] 	rol df_tmpptra+1
                             	; add offset to sprite pattern base
                             	; and put in X,A
ea6b : a5d7             [ 3] 	lda df_tmpptra
ea6d : 6513             [ 3] 	adc vdp_base+vdp_addr_spp
ea6f : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  165
---------------------------------- bank1.s -----------------------------------

ea70 : a5d8             [ 3] 	lda df_tmpptra+1
ea72 : 6514             [ 3] 	adc vdp_base+vdp_addr_spp+1
ea74 : 78               [ 2] 	sei			; Disable interrupts
                             	; set vdp address
ea75 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; start from beginning of array
ea78 : a000             [ 2] 	ldy #0
ea7a :                       df_rt_spritepat_line
                             	; get the sprite patten from array
ea7a : b1d9             [ 5] 	lda (df_tmpptrb),y
                             	; and write to vdp
ea7c : 2085c6           [ 6] 	jsr vdp_wr_vram
ea7f : c8               [ 2] 	iny
                             	; do this for 8 bytes (4 elements)
ea80 : c008             [ 2] 	cpy #8
ea82 : d0f6             [ 3] 	bne df_rt_spritepat_line
ea84 : 58               [ 2] 	cli			; Enable interrupts
ea85 : 60               [ 6] 	rts
                             
ea86 :                       df_rt_spritepos
ea86 : 2060dc           [ 6] 	jsr df_rt_parm_3ints
                             	; calculate the sprite number in vram
ea89 : a5d7             [ 3] 	lda df_tmpptra
ea8b : 0a               [ 2] 	asl a
ea8c : 0a               [ 2] 	asl a
ea8d : 6511             [ 3] 	adc vdp_base+vdp_addr_spa
ea8f : aa               [ 2] 	tax
ea90 : a512             [ 3] 	lda vdp_base+vdp_addr_spa+1
ea92 : 6900             [ 2] 	adc #0
ea94 : 78               [ 2] 	sei
ea95 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
ea98 : a5db             [ 3] 	lda df_tmpptrc
ea9a : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
ea9d : a5d9             [ 3] 	lda df_tmpptrb
ea9f : 2085c6           [ 6] 	jsr vdp_wr_vram
eaa2 : 58               [ 2] 	cli
eaa3 : 60               [ 6] 	rts
                             
                             ; common routine for col and nme variations
                             ; A contains offset in to sprite table to update
eaa4 :                       df_rt_spriteattr
                             	; save A which contains the offset
eaa4 : 48               [ 3] 	pha
eaa5 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
                             	; calculate the sprite number in vram
eaa8 : a5d7             [ 3] 	lda df_tmpptra
eaaa : 0a               [ 2] 	asl a
eaab : 0a               [ 2] 	asl a
eaac : 6511             [ 3] 	adc vdp_base+vdp_addr_spa
eaae : 85d7             [ 3] 	sta df_tmpptra
eab0 : a512             [ 3] 	lda vdp_base+vdp_addr_spa+1
eab2 : 6900             [ 2] 	adc #0
eab4 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; add offset and put in X,A to set VRAM address
eab6 : 68               [ 4] 	pla							; get offset from stack
eab7 : 65d7             [ 3] 	adc df_tmpptra
eab9 : aa               [ 2] 	tax
eaba : a5d8             [ 3] 	lda df_tmpptra+1
eabc : 6900             [ 2] 	adc #0
eabe : a8               [ 2] 	tay
AS65 Assembler for R6502 [1.42].                                     Page  166
---------------------------------- bank1.s -----------------------------------

eabf : a5d9             [ 3] 	lda df_tmpptrb
eac1 : 4c8ac6           [ 3] 	jmp vdp_poke
                             
eac4 :                       df_rt_spritecol
                             	; offset is 3 for colour byte
eac4 : a903             [ 2] 	lda #3
eac6 : 4ca4ea           [ 3] 	jmp df_rt_spriteattr
                             
eac9 :                       df_rt_spritenme
                             	; offset is 2 for name byte
eac9 : a902             [ 2] 	lda #2
eacb : 4ca4ea           [ 3] 	jmp df_rt_spriteattr
                             
eace :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
eace : a5d7             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
ead0 : 3a               [ 2] 	dec a
ead1 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
ead3 : 0a               [ 2] 	asl a
ead4 : aa               [ 2] 	tax
                             	; get low byte of period
ead5 : a4d9             [ 3] 	ldy df_tmpptrb
ead7 : 20eec3           [ 6] 	jsr _snd_set
                             	; increment reg number to high byte
eada : e8               [ 2] 	inx
                             	; get high byte of period
eadb : a5da             [ 3] 	lda df_tmpptrb+1
eadd : 290f             [ 2] 	and #0x0f
eadf : a8               [ 2] 	tay
                             	; set period
eae0 : 20eec3           [ 6] 	jsr _snd_set
                             	; get volume register index (8 = channel 1)
eae3 : 18               [ 2] 	clc
eae4 : a5d7             [ 3] 	lda df_tmpptra
eae6 : 2903             [ 2] 	and #3
eae8 : 6907             [ 2] 	adc #7
eaea : aa               [ 2] 	tax
                             	; get volume
eaeb : a5db             [ 3] 	lda df_tmpptrc
eaed : 290f             [ 2] 	and #0x0f
eaef : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
eaf1 : 0910             [ 2] 	ora #0x10
eaf3 :                       df_rt_sound_env_skip
eaf3 : a8               [ 2] 	tay
eaf4 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	rts
                             
                             ; sound chan,period,volume	
eaf7 :                       df_rt_sound
eaf7 : 2060dc           [ 6] 	jsr df_rt_parm_3ints
eafa :                       df_rt_dosound
                             	; check which channel (0 = noise)
eafa : a5d7             [ 3] 	lda df_tmpptra
eafc : f003             [ 4] 	beq df_rt_sound_noise
eafe : 4cceea           [ 3] 	jmp df_rt_snd_common
eb01 :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
eb01 : a206             [ 2] 	ldx #6
AS65 Assembler for R6502 [1.42].                                     Page  167
---------------------------------- bank1.s -----------------------------------

eb03 : a5d9             [ 3] 	lda df_tmpptrb
eb05 : 291f             [ 2] 	and #0x1f
eb07 : a8               [ 2] 	tay
eb08 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             ; music chan,octave,note,volume
eb0b :                       df_rt_music
eb0b : 2077dc           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
eb0e : 18               [ 2] 	clc
eb0f : a5d9             [ 3] 	lda df_tmpptrb
eb11 : 65d9             [ 3] 	adc df_tmpptrb
eb13 : 65d9             [ 3] 	adc df_tmpptrb
eb15 : 0a               [ 2] 	asl a
eb16 : 0a               [ 2] 	asl a
                             	; we have x12, now add note to get index
eb17 : 65db             [ 3] 	adc df_tmpptrc
eb19 : 0a               [ 2] 	asl a
eb1a : a8               [ 2] 	tay
                             	; get period A,X (hi/lo)
eb1b : 20bec3           [ 6] 	jsr _snd_get_note
eb1e : 86d9             [ 3] 	stx df_tmpptrb
eb20 : 85da             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
eb22 : a5dd             [ 3] 	lda df_tmpptrd
eb24 : 85db             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
eb26 : 4cfaea           [ 3] 	jmp df_rt_dosound
                             	
                             	
                             ; play tonemask,noisemask,envelope,period
eb29 :                       df_rt_play
eb29 : 2077dc           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
eb2c : a5d7             [ 3] 	lda df_tmpptra
eb2e : 2907             [ 2] 	and #7
eb30 : 85d7             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
eb32 : a5d9             [ 3] 	lda df_tmpptrb
eb34 : 2907             [ 2] 	and #7
eb36 : 0a               [ 2] 	asl a
eb37 : 0a               [ 2] 	asl a
eb38 : 0a               [ 2] 	asl a
eb39 : 05d7             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; keep top 2 bits 0 as these are port a and b in
eb3b : 493f             [ 2] 	eor #0x3f
eb3d : a8               [ 2] 	tay
                             	; reg 7 is control register
eb3e : a207             [ 2] 	ldx #7
eb40 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 3 = envelope mode
eb43 : a5db             [ 3] 	lda df_tmpptrc
eb45 : 290f             [ 2] 	and #0xf
eb47 : a8               [ 2] 	tay
                             	; 13 is envelope shape register
eb48 : a20d             [ 2] 	ldx #13
eb4a : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 4 = envelope period
AS65 Assembler for R6502 [1.42].                                     Page  168
---------------------------------- bank1.s -----------------------------------

                             	; 11 is envelope period register
eb4d : a20b             [ 2] 	ldx #11
                             	; get low
eb4f : a4dd             [ 3] 	ldy df_tmpptrd
eb51 : 20eec3           [ 6] 	jsr _snd_set
                             	; get high
eb54 : e8               [ 2] 	inx
eb55 : a4de             [ 3] 	ldy df_tmpptrd+1
eb57 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             
                             ;* Binary save mem,hdr,addr,len,filename
eb5a :                       df_rt_bsave
                             	; Get mem type, 0=RAM, else VRAM
eb5a : 209ad9           [ 6] 	jsr df_rt_neval				; Get mem type
eb5d : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
eb60 : e076             [ 2] 	cpx #'v'
eb62 : d003             [ 3] 	bne df_rt_bsave_tryr
eb64 : 18               [ 2] 	clc							; Clear C for vram
eb65 : 8007             [ 3] 	bra df_rt_bsave_savep
eb67 :                       df_rt_bsave_tryr
eb67 : e072             [ 2] 	cpx #'r'
eb69 : f002             [ 3] 	beq	 df_rt_bsave_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
eb6d :                       df_rt_bsave_setR
eb6d : 38               [ 2] 	sec							; Set C for ram
eb6e :                       df_rt_bsave_savep
                             	; save C, clear=VRAM, set=RAM
eb6e : 08               [ 3] 	php
                             
                             	; jump over comma
eb6f : e6be             [ 5] 	inc df_exeoff
                             	; Get header length
eb71 : 209ad9           [ 6] 	jsr df_rt_neval				; Get header length
eb74 : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
eb77 : da               [ 3] 	phx
                             
                             	; jump over comma
eb78 : e6be             [ 5] 	inc df_exeoff
eb7a : 209ad9           [ 6] 	jsr df_rt_neval				; Get address
eb7d : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = Address
eb80 : 48               [ 3] 	pha
eb81 : da               [ 3] 	phx
                             
                             	; jump over comma
eb82 : e6be             [ 5] 	inc df_exeoff
eb84 : 209ad9           [ 6] 	jsr df_rt_neval				; Get length
eb87 : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = Length
eb8a : 48               [ 3] 	pha
eb8b : da               [ 3] 	phx
                             
                             	; jump over comma
eb8c : e6be             [ 5] 	inc df_exeoff
                             	; Process filename
eb8e : 20f9eb           [ 6] 	jsr df_rt_parse_file
eb91 : 20c6c5           [ 6] 	jsr io_open_write
eb94 : b05a             [ 3] 	bcs df_rt_file_errc3		; Error condition resets t
AS65 Assembler for R6502 [1.42].                                     Page  169
---------------------------------- bank1.s -----------------------------------

                             
                             	; On the stack, we have lenlo,lenhi,adlo,adhi,he
eb96 : ba               [ 2] 	tsx
eb97 : bc0501           [ 4] 	ldy 0x105,x					; Get header len
eb9a : f008             [ 3] 	beq df_rt_bsave_byte
eb9c : a900             [ 2] 	lda #0						; Zero filler
eb9e :                       df_rt_bsave_header
eb9e : 20c0c5           [ 6] 	jsr io_put_ch				; Write a byte to disk
eba1 : 88               [ 2] 	dey
eba2 : d0fa             [ 3] 	bne df_rt_bsave_header
eba4 :                       df_rt_bsave_byte
eba4 : ba               [ 2] 	tsx							; Restore SP to X
eba5 : bd0101           [ 4] 	lda 0x101,x					; low<>0 carry on
eba8 : d005             [ 3] 	bne df_rt_bsave_byte_do
ebaa : bd0201           [ 4] 	lda 0x102,x					; hi<>0 carry on
ebad : f038             [ 3] 	beq df_rt_bsave_done		; else done
ebaf :                       df_rt_bsave_byte_do
ebaf : bd0601           [ 4] 	lda 0x106,x					; Get the C status
ebb2 : 48               [ 3] 	pha
ebb3 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
ebb4 : bd0301           [ 4] 	lda 0x103,x					; Get low address
ebb7 : bc0401           [ 4] 	ldy 0x104,x					; Get high address
ebba : aa               [ 2] 	tax							; X,Y contain address
                             
ebbb : b006             [ 3] 	bcs df_rt_bsave_ram			; RAM or VRAM?
                             	; Read from VRAM
ebbd : 98               [ 2] 	tya							; A needs to contain high byte
ebbe : 2006c4           [ 6] 	jsr _vdp_peek				; Peek VRAM
ebc1 : 8006             [ 3] 	bra df_rt_bsave_write
ebc3 :                       df_rt_bsave_ram
                             	; Read from RAM
ebc3 : 86d7             [ 3] 	stx df_tmpptra				; Save address
ebc5 : 84d8             [ 3] 	sty df_tmpptra+1
ebc7 : b2d7             [ 5] 	lda (df_tmpptra)			; Peek RAM
ebc9 :                       df_rt_bsave_write
ebc9 : 20c0c5           [ 6] 	jsr io_put_ch				; Write to disk
ebcc : ba               [ 2] 	tsx							; Get SP to X
ebcd : fe0301           [ 6] 	inc 0x103,x					; Increment low address
ebd0 : d003             [ 3] 	bne df_rt_bsave_skiph
ebd2 : fe0401           [ 6] 	inc 0x104,x					; Increment high address
ebd5 :                       df_rt_bsave_skiph
ebd5 : bc0101           [ 4] 	ldy 0x101,x					; Get low len byte
ebd8 : f005             [ 3] 	beq df_rt_bsave_dech
ebda : de0101           [ 6] 	dec 0x101,x					; A simple decrement
ebdd : 80c5             [ 3] 	bra df_rt_bsave_byte		; Process next byte
ebdf :                       df_rt_bsave_dech
ebdf : de0101           [ 6] 	dec 0x101,x					; Decrement low in readiness
ebe2 : de0201           [ 6] 	dec 0x102,x					; Decrement high
ebe5 : 80bd             [ 3] 	bra df_rt_bsave_byte		; Process next byte
ebe7 :                       df_rt_bsave_done
                             	; Tidy the stack
ebe7 : 68               [ 4] 	pla
ebe8 : 68               [ 4] 	pla
ebe9 : 68               [ 4] 	pla
ebea : 68               [ 4] 	pla
ebeb : 68               [ 4] 	pla
ebec : 68               [ 4] 	pla
ebed : 4c16ec           [ 3] 	jmp df_rt_file_cleanup		; Clean up FS
                             
ebf0 :                       df_rt_file_errc3				; Stepping stone!!!
ebf0 : b0fe             [ 3] 	bcs df_rt_file_errc3
AS65 Assembler for R6502 [1.42].                                     Page  170
---------------------------------- bank1.s -----------------------------------

                             
                             ;* common filename procesing routine
                             ;* 
ebf2 :                       df_rt_init_filename
                             	; evaluate string X,A has the string pointer
ebf2 : 209ad9           [ 6] 	jsr df_rt_neval
ebf5 : 20faf2           [ 6] 	jsr df_ost_popStr
                             
ebf8 : 60               [ 6] 	rts
                             	
                             ;* common file parsing routine
ebf9 :                       df_rt_parse_file
ebf9 : a902             [ 2] 	lda #2					; Only works for SD card now
ebfb : 20a5c5           [ 6] 	jsr io_active_device
                             
                             	; now process filename, XA has pointer
ebfe : 20f2eb           [ 6] 	jsr df_rt_init_filename
ec01 : 60               [ 6] 	rts
                             ; save "file"
ec02 :                       df_rt_save
ec02 : 20f9eb           [ 6] 	jsr df_rt_parse_file
ec05 : 20c6c5           [ 6] 	jsr io_open_write
ec08 : b063             [ 3] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
ec0a : a901             [ 2] 	lda #1
ec0c : 85df             [ 3] 	sta df_tmpptre
ec0e : 20abe7           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
ec11 : a90d             [ 2] 	lda #UTF_CR
ec13 : 20c0c5           [ 6] 	jsr io_put_ch
ec16 :                       df_rt_file_cleanup
                             	; close the file
ec16 : 20c9c5           [ 6] 	jsr io_close
ec19 : 18               [ 2] 	clc
                             	; restore to default device io
ec1a : 4ca2c5           [ 3] 	jmp io_set_default
                             ;	clc
                             ;	rts
                             
                             ; load 'x',"file" where 0=serial, 1=SDCard
ec1d :                       df_rt_load
ec1d : 20f9eb           [ 6] 	jsr df_rt_parse_file
ec20 : 20c3c5           [ 6] 	jsr io_open_read
ec23 : b048             [ 3] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
                             
                             	; Initialise to line 10 in scratch, scratch+1
ec25 : a90a             [ 2] 	lda #10
ec27 : 8d0009           [ 4] 	sta scratch
ec2a : 9c0109           [ 4] 	stz scratch+1
ec2d :                       df_rt_loadline
ec2d : 18               [ 2] 	clc
ec2e : 2067d8           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
ec31 : 9013             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
ec33 : 9c800a           [ 4] 	stz df_tokbuff			; Offset to next line
AS65 Assembler for R6502 [1.42].                                     Page  171
---------------------------------- bank1.s -----------------------------------

ec36 : 9c810a           [ 4] 	stz df_tokbuff+1		; Clear line low
ec39 : 9c820a           [ 4] 	stz df_tokbuff+2		; Clear line high
ec3c : 64b5             [ 3] 	stz df_nxtstidx			; Clear next statement
ec3e : 64b4             [ 3] 	stz df_eolidx			; Clear end of line too
ec40 : a901             [ 2] 	lda #1					; Set immediate mode to get a 'Ready'
ec42 : 8594             [ 3] 	sta df_immed			; But nothing to run
ec44 : 80d0             [ 3] 	bra df_rt_file_cleanup	; Ok now can close and do
ec46 :                       df_rt_ldtokenise
ec46 : 2071d1           [ 6] 	jsr df_lexer_line		; Tokenise loaded string - ju
                             	; check if line number == 0
ec49 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
ec4c : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
ec4f : d017             [ 3] 	bne df_rt_storeline		; No, then store the line
                             	; Else insert current line number to buffer posi
                             	; also add 10 to the current line number
ec51 : 18               [ 2] 	clc
ec52 : ad0009           [ 4] 	lda scratch				; Get line number lo
ec55 : 8d810a           [ 4] 	sta df_tokbuff+1		; Use current line number
ec58 : 690a             [ 2] 	adc #10					; But increment for next by 10
ec5a : 8d0009           [ 4] 	sta scratch
ec5d : ad0109           [ 4] 	lda scratch+1			; Get line number hi
ec60 : 8d820a           [ 4] 	sta df_tokbuff+2
ec63 : 6900             [ 2] 	adc #0
ec65 : 8d0109           [ 4] 	sta scratch+1
ec68 :                       df_rt_storeline
ec68 : 20ded8           [ 6] 	jsr df_pg_line_number	; Save the line in the rig
ec6b : 80c0             [ 3] 	bra df_rt_loadline		; Continue with next until b
                             
                             ; Somwehere to go to raise a file error!
ec6d :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
ec6f :                       df_rt_del
ec6f : 20f2eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec72 : 208ec0           [ 6] 	jsr _fs_delete_w			; Delete file
ec75 : 60               [ 6] 	rts
                             
ec76 :                       df_rt_chdir
ec76 : 20f2eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec79 : 205ec0           [ 6] 	jsr _fs_chdir_w				; Try and change directory
ec7c : b0ef             [ 3] 	bcs df_rt_file_errc
ec7e : 60               [ 6] 	rts
                             
ec7f :                       df_rt_mkdir
ec7f : 20f2eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec82 : 2076c0           [ 6] 	jsr _fs_mkdir_w				; Try and make directory
ec85 : b0e6             [ 3] 	bcs df_rt_file_errc
ec87 : 60               [ 6] 	rts
                             
                             ; bload MEM,HEAD,ADDR,FNAME
ec88 :                       df_rt_bload
                             	; Get mem type, 0=RAM, else VRAM
ec88 : 209ad9           [ 6] 	jsr df_rt_neval				; Get mem type
ec8b : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
ec8e : e076             [ 2] 	cpx #'v'
ec90 : d003             [ 3] 	bne df_rt_bload_tryr
ec92 : 18               [ 2] 	clc							; Clear C for vram
ec93 : 8007             [ 3] 	bra df_rt_bload_savep
ec95 :                       df_rt_bload_tryr
ec95 : e072             [ 2] 	cpx #'r'
AS65 Assembler for R6502 [1.42].                                     Page  172
---------------------------------- bank1.s -----------------------------------

ec97 : f002             [ 3] 	beq	 df_rt_bload_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
ec9b :                       df_rt_bload_setR
ec9b : 38               [ 2] 	sec							; Set C for ram
ec9c :                       df_rt_bload_savep
                             	; save C, clear=VRAM, set=RAM
ec9c : 08               [ 3] 	php
                             	; jump over comma
ec9d : e6be             [ 5] 	inc df_exeoff
                             	; Get header length
ec9f : 209ad9           [ 6] 	jsr df_rt_neval				; Get header length
eca2 : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
eca5 : da               [ 3] 	phx
                             	; jump over comma
eca6 : e6be             [ 5] 	inc df_exeoff
eca8 : 8012             [ 3] 	bra df_rt_bvload
ecaa :                       df_rt_font
ecaa : 18               [ 2] 	clc							; Set to video
ecab : 08               [ 3] 	php
ecac : a900             [ 2] 	lda #0						; No header
ecae : 48               [ 3] 	pha
ecaf : a901             [ 2] 	lda #1						; 0x100 address - hi
ecb1 : 48               [ 3] 	pha
ecb2 : a900             [ 2] 	lda #0						; 0x100 address - lo
ecb4 : 48               [ 3] 	pha
ecb5 : 800d             [ 3] 	bra df_rt_bload_file
ecb7 :                       df_rt_vload
ecb7 : 18               [ 2] 	clc							; Hardcode for VRAM
ecb8 : 08               [ 3] 	php
ecb9 : a207             [ 2] 	ldx #7						; Hardcode header length
ecbb : da               [ 3] 	phx
ecbc :                       df_rt_bvload
ecbc : 209ad9           [ 6] 	jsr df_rt_neval				; Get address
ecbf : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = Address
ecc2 : 48               [ 3] 	pha
ecc3 : da               [ 3] 	phx
ecc4 :                       df_rt_bload_file
                             	; jump over comma
ecc4 : e6be             [ 5] 	inc df_exeoff
ecc6 : 20f9eb           [ 6] 	jsr df_rt_parse_file
ecc9 : 20c3c5           [ 6] 	jsr io_open_read
eccc : b09f             [ 3] 	bcs df_rt_file_errc		; Error condition resets th
                             	; On the stack:
                             	; 101+x = adlo
                             	; 102+x = adhi
                             	; 103+x = header length
                             	; 104+x = mem type (c=0 means video)
ecce : ba               [ 2] 	tsx
eccf : bc0301           [ 4] 	ldy 0x103,x					; Get header
ecd2 : f008             [ 3] 	beq df_rt_vload_byte
ecd4 :                       df_rt_vload_header
ecd4 : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ecd7 : b03c             [ 4] 	bcs df_rt_vload_done		; If EOF then done
ecd9 : 88               [ 2] 	dey
ecda : d0f8             [ 3] 	bne df_rt_vload_header
ecdc :                       df_rt_vload_byte
ecdc : ba               [ 2] 	tsx							; Restore SP to X
ecdd : bd0401           [ 4] 	lda 0x104,x					; Get the C status
ece0 : 48               [ 3] 	pha
ece1 : 28               [ 4] 	plp							; C unaffected by next ops
AS65 Assembler for R6502 [1.42].                                     Page  173
---------------------------------- bank1.s -----------------------------------

                             	
ece2 : bd0101           [ 4] 	lda 0x101,x					; Get low address
ece5 : bc0201           [ 4] 	ldy 0x102,x					; Get high address
ece8 : aa               [ 2] 	tax							; X,Y contain address
                             
ece9 : b014             [ 3] 	bcs df_rt_vload_ram			; RAM or VRAM?
                             	; Poke to VRAM but skip 0x1800-0x1fff
eceb : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ecee : b025             [ 4] 	bcs df_rt_vload_done		; If EOF then done
ecf0 : c018             [ 2] 	cpy #0x18					; If page # <= 0x17
ecf2 : 9006             [ 3] 	bcc df_rt_vload_do_vpoke	; then vpoke
ecf4 : c020             [ 2] 	cpy #0x20					; Or page >= 0x20
ecf6 : b002             [ 3] 	bcs df_rt_vload_do_vpoke	; then vpoke
ecf8 : 8010             [ 4] 	bra df_rt_vload_next
ecfa :                       df_rt_vload_do_vpoke
ecfa : 201ec4           [ 6] 	jsr _vdp_poke				; Write to VRAM
ecfd : 800b             [ 4] 	bra df_rt_vload_next
ecff :                       df_rt_vload_ram
                             	; Poke to RAM
ecff : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ed02 : b011             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ed04 : 86d7             [ 3] 	stx df_tmpptra				; Save address
ed06 : 84d8             [ 3] 	sty df_tmpptra+1
ed08 : 92d7             [ 5] 	sta (df_tmpptra)			; Poke byte to RAM
ed0a :                       df_rt_vload_next
ed0a : ba               [ 2] 	tsx							; Get SP to X
ed0b : fe0101           [ 6] 	inc 0x101,x					; Increment low address
ed0e : d003             [ 3] 	bne df_rt_vload_byte_skip
ed10 : fe0201           [ 6] 	inc 0x102,x					; Increment high address
ed13 :                       df_rt_vload_byte_skip
ed13 : 80c7             [ 4] 	bra df_rt_vload_byte		; Back for next video byte
ed15 :                       df_rt_vload_done
ed15 :                       df_rt_ptload_done
                             	; Tidy the stack
ed15 : 68               [ 4] 	pla
ed16 : 68               [ 4] 	pla
ed17 : 68               [ 4] 	pla
ed18 : 68               [ 4] 	pla
ed19 : 4c16ec           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Loads a song into any part of RAM including sha
                             ; Always assumes the top half of memory is in ban
                             	SWBRK DFERR_FNAME
                             
ed1e :                       df_rt_ptload
ed1e : 209ad9           [ 6] 	jsr df_rt_neval				; Get address
ed21 : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = Address
ed24 : 48               [ 3] 	pha
ed25 : da               [ 3] 	phx
                             	; jump over comma
ed26 : e6be             [ 5] 	inc df_exeoff
ed28 : 20f9eb           [ 6] 	jsr df_rt_parse_file
ed2b : 20c3c5           [ 6] 	jsr io_open_read
ed2e : b0ec             [ 3] 	bcs (df_rt_ptload-2)		; Error condition resets t
                             
                             	; Copy code from ROM that does write to RAM
ed30 : 2007cc           [ 6] 	jsr init_ram_code		; Initialise RAM code
                             
ed33 : 7a               [ 4] 	ply							; Pull the index of address as Y
ed34 : 68               [ 4] 	pla							; Pull the high address
ed35 : 85d8             [ 3] 	sta df_tmpptra+1			; Just the page address, so l
ed37 : 64d7             [ 3] 	stz df_tmpptra				; Low address is 0
AS65 Assembler for R6502 [1.42].                                     Page  174
---------------------------------- bank1.s -----------------------------------

                             
                             	; Save current port B status of both VIAs
ed39 : ad0004           [ 4] 	lda IO_0+PRB				; VIA0 port B is the ROM and RAM
ed3c : 48               [ 3] 	pha
ed3d : 29cf             [ 2] 	and #0b11001111				; Mask off RAM bank bits
ed3f : 0920             [ 2] 	ora #0b00100000				; Select bank 2
ed41 : 48               [ 3] 	pha							; Save new bank select
ed42 : ad8004           [ 4] 	lda IO_1+PRB				; VIA1 port B controls ROM enabl
ed45 : 48               [ 3] 	pha
ed46 : 29df             [ 2] 	and #0b11011111				; Disable ROM bit
ed48 : 48               [ 3] 	pha							; Save ROM disable state
                             	; Stack contains:
                             	;	101,x = disable ROM value
                             	;	102,x = original ROM value
                             	;	103,x = new RAM bank select value
                             	;	104,x = original RAM bank select value
ed49 :                       df_rt_ptload_byte
ed49 : 20bdc5           [ 6] 	jsr io_get_ch				; Get a byte
ed4c : b0c7             [ 3] 	bcs df_rt_ptload_done		; If EOF then done
ed4e : a6d8             [ 3] 	ldx df_tmpptra+1			; Get page index from high ad
ed50 : 8636             [ 3] 	stx tmp_a+1					; Save high address in tmp_a
ed52 : 6435             [ 3] 	stz tmp_a					; Clear low address
ed54 : 200c0c           [ 6] 	jsr ram_code				; Poke byte to RAM bank 2 and ma
ed57 : c8               [ 2] 	iny							; Update page index
ed58 : d0ef             [ 3] 	bne df_rt_ptload_byte		; Back for next byte
ed5a : e6d8             [ 5] 	inc df_tmpptra+1			; Increment high address
ed5c : 80eb             [ 3] 	bra df_rt_ptload_byte		; Back for next byte
                             
ed5e :                       df_rt_ptinit
                             	; Get x,y
ed5e : 2055dc           [ 6] 	jsr df_rt_parm_2ints		; Put address in A,X and l
ed61 : a5d7             [ 3] 	lda df_tmpptra
ed63 : a6d8             [ 3] 	ldx df_tmpptra+1
ed65 : a4d9             [ 3] 	ldy df_tmpptrb
ed67 : 4c3ec5           [ 3] 	jmp _PT3START				; Off to the PT3 player module
                             
ed6a :                       df_rt_ptrun
ed6a : 209ad9           [ 6] 	jsr df_rt_neval				; Get run status in X
ed6d : 2002f3           [ 6] 	jsr df_ost_popInt			; X,A = Address
ed70 : e000             [ 2] 	cpx #0						; If 0 then stop
ed72 : f003             [ 3] 	beq df_rt_ptrun_stop
                             	; else start
ed74 : 4c6ec5           [ 3] 	jmp _PT3RESUME
ed77 :                       df_rt_ptrun_stop
ed77 : 4c56c5           [ 3] 	jmp _PT3PAUSE
                             
ed7a :                       df_rt_dir_string				; Name of a directory
ed7a : 3c4449523e202000      	db "<DIR>  ",0				; 7 chars + terminator
ed82 :                       df_rt_dir
ed82 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ed85 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ed87 : da               [ 3] 	phx
ed88 :                       df_rt_dir_show_entry
ed88 : 18               [ 2] 	clc							; Only looking for valid files
ed89 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ed8c : b052             [ 3] 	bcs df_rt_dir_done			; If C then no more entries
ed8e : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ed90 : a909             [ 2] 	lda #hi(scratch)
ed92 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ed95 : a20c             [ 2] 	ldx #12						; Put a zero terminator after filen
ed97 : 9e0009           [ 5] 	stz scratch,x
ed9a : a200             [ 2] 	ldx #lo(scratch)			; Print filename
AS65 Assembler for R6502 [1.42].                                     Page  175
---------------------------------- bank1.s -----------------------------------

ed9c : a909             [ 2] 	lda #hi(scratch)
ed9e : 200bc6           [ 6] 	jsr io_print_line			; Print name
eda1 : 20bac8           [ 6] 	jsr utilPrintSPC			; Gap
eda4 : a557             [ 3] 	lda fh_handle+FH_Attr		; Is it a directory?
eda6 : c910             [ 2] 	cmp #0x10
eda8 : d009             [ 3] 	bne df_rt_dir_size
edaa : a27a             [ 2] 	ldx #lo(df_rt_dir_string)	; Set up pointer to na
edac : a9ed             [ 2] 	lda #hi(df_rt_dir_string)
edae : 200bc6           [ 6] 	jsr io_print_line			; Print directory indicator
edb1 : 800d             [ 3] 	bra df_rt_dir_line
edb3 :                       df_rt_dir_size
edb3 : a223             [ 2] 	ldx #lo(scratch+35)			; Print size (already term
edb5 : a909             [ 2] 	lda #hi(scratch+35)
edb7 : 200bc6           [ 6] 	jsr io_print_line			; Print size - 5 chars left 
edba : 20bac8           [ 6] 	jsr utilPrintSPC			; Gap
edbd : 20bac8           [ 6] 	jsr utilPrintSPC			; Gap
                             	; Printed exactly 20 chars per size
edc0 :                       df_rt_dir_line
edc0 : a51b             [ 3] 	lda gr_scrngeom+gr_screen_w	; If 32 col screen t
edc2 : c920             [ 2] 	cmp #32
edc4 : d003             [ 3] 	bne df_rt_dir_skip_crlf
edc6 : 20c2c8           [ 6] 	jsr utilPrintCRLF
edc9 :                       df_rt_dir_skip_crlf
edc9 : fa               [ 4] 	plx							; Decrement file line counter
edca : ca               [ 2] 	dex
edcb : d00d             [ 3] 	bne df_rt_dir_skip_pause
edcd : a2e7             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
edcf : a9ed             [ 2] 	lda #hi(df_rt_pausemsg)
edd1 : 200bc6           [ 6] 	jsr io_print_line
edd4 : 38               [ 2] 	sec
edd5 : 20bdc5           [ 6] 	jsr io_get_ch				; Wait for any key
edd8 : a214             [ 2] 	ldx #20						; Reset line counter
edda :                       df_rt_dir_skip_pause	
edda : da               [ 3] 	phx							; Save line counter
eddb : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
edde : 80a8             [ 3] 	bra df_rt_dir_show_entry	; Find another entry
ede0 :                       df_rt_dir_done
ede0 : fa               [ 4] 	plx							; Pop line counter
ede1 : a90d             [ 2] 	lda #UTF_CR					; Final CR
ede3 : 20c0c5           [ 6] 	jsr io_put_ch
ede6 : 60               [ 6] 	rts
ede7 :                       df_rt_pausemsg
ede7 : 0d507265737320..      	db UTF_CR,"Press any key for more..",UTF_CR,0
                             
ee02 :                       df_rt_dirl						; Long listing format
ee02 : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ee05 : a214             [ 2] 	ldx #20						; Count of how many files before pa
ee07 : da               [ 3] 	phx
ee08 :                       df_rt_dirl_show_entry
ee08 : 18               [ 2] 	clc							; Only looking for valid files
ee09 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ee0c : b025             [ 3] 	bcs df_rt_dirl_done			; If C then no more entrie
ee0e : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ee10 : a909             [ 2] 	lda #hi(scratch)
ee12 : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ee15 : a200             [ 2] 	ldx #lo(scratch)			; Print the whole entry
ee17 : a909             [ 2] 	lda #hi(scratch)
ee19 : 200bc6           [ 6] 	jsr io_print_line
ee1c :                       df_rt_dirl_line
ee1c : fa               [ 4] 	plx							; Decrement file line counter
ee1d : ca               [ 2] 	dex
ee1e : d00d             [ 3] 	bne df_rt_dirl_skip_pause
AS65 Assembler for R6502 [1.42].                                     Page  176
---------------------------------- bank1.s -----------------------------------

ee20 : a2e7             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ee22 : a9ed             [ 2] 	lda #hi(df_rt_pausemsg)
ee24 : 200bc6           [ 6] 	jsr io_print_line
ee27 : 38               [ 2] 	sec
ee28 : 20bdc5           [ 6] 	jsr io_get_ch				; Wait for any key
ee2b : a214             [ 2] 	ldx #20						; Reset line counter
ee2d :                       df_rt_dirl_skip_pause	
ee2d : da               [ 3] 	phx							; Save line counter
ee2e : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ee31 : 80d5             [ 3] 	bra df_rt_dirl_show_entry	; Find another entry
ee33 :                       df_rt_dirl_done
ee33 : fa               [ 4] 	plx							; Pop line counter
ee34 : 20c2c8           [ 6] 	jsr utilPrintCRLF			; Final CR
ee37 : 60               [ 6] 	rts
                             	
                             ; reset %var
ee38 :                       df_rt_reset
                             	; now get lvar X,A from current statement
ee38 : 20e3dd           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ee3b : 86d9             [ 3] 	stx df_tmpptrb
ee3d : 85da             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
ee3f : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of counter (2 bytes only) without di
ee41 : a504             [ 3] 	lda vdp_int_cnt
ee43 :                       df_rt_safe_read
ee43 : 92d9             [ 5] 	sta (df_tmpptrb)
ee45 : a505             [ 3] 	lda vdp_int_cnt+1
ee47 : 91d9             [ 5] 	sta (df_tmpptrb),y
                             	; If first byte has changed since reading it
                             	; then re-read (might happen due to VBI)
ee49 : a504             [ 3] 	lda vdp_int_cnt
ee4b : d2d9             [ 5] 	cmp (df_tmpptrb)
ee4d : d0f4             [ 3] 	bne df_rt_safe_read
ee4f : 60               [ 6] 	rts
                             
                             ; timedate var$
                             ; output to string as dd/mm/yy hh:mm:ss
ee50 :                       df_rt_datetime
                             	; now get lvar X,A from current statement
ee50 : 20e3dd           [ 6] 	jsr df_rt_getlvar
                             	; and save it
ee53 : da               [ 3] 	phx
ee54 : 48               [ 3] 	pha
                             	; Point to 6 bytes of scratch
ee55 : a200             [ 2] 	ldx #lo(scratch)
ee57 : a909             [ 2] 	lda #hi(scratch)
                             	; Populate timedate as hmsdmy
ee59 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Get destination pointer back
ee5c : 68               [ 4] 	pla
ee5d : 85d8             [ 3] 	sta df_tmpptra+1
ee5f : 68               [ 4] 	pla
ee60 : 85d7             [ 3] 	sta df_tmpptra
                             	; Start at first char of destination
ee62 : a000             [ 2] 	ldy #0
                             	; Get days binary and convert to BCD
ee64 : ae0309           [ 4] 	ldx scratch+3
                             	; Separator character
ee67 : a92f             [ 2] 	lda #'/'
AS65 Assembler for R6502 [1.42].                                     Page  177
---------------------------------- bank1.s -----------------------------------

ee69 : 2095ee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get months binary and convert to BCD
ee6c : ae0409           [ 4] 	ldx scratch+4
                             	; Separator character
ee6f : a92f             [ 2] 	lda #'/'
ee71 : 2095ee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get years binary and convert to BCD
ee74 : ae0509           [ 4] 	ldx scratch+5
                             	; Separator character is space between date and 
ee77 : a920             [ 2] 	lda #' '
ee79 : 2095ee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get hours binary and convert to BCD
ee7c : ae0009           [ 4] 	ldx scratch+0
                             	; Separator character
ee7f : a93a             [ 2] 	lda #':'
ee81 : 2095ee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get minutes binary and convert to BCD
ee84 : ae0109           [ 4] 	ldx scratch+1
                             	; Separator character
ee87 : a93a             [ 2] 	lda #':'
ee89 : 2095ee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get seconds binary and convert to BCD
ee8c : ae0209           [ 4] 	ldx scratch+2
                             	; Separator character is null to terminate strin
ee8f : a900             [ 2] 	lda #0
ee91 : 2095ee           [ 6] 	jsr df_rt_datetime_conv
ee94 : 60               [ 6] 	rts
ee95 :                       df_rt_datetime_conv
ee95 : 48               [ 3] 	pha
ee96 : a900             [ 2] 	lda #0
ee98 : 20f2ca           [ 6] 	jsr word_to_bcd
                             	; We only need least 2 BCD digits
ee9b : a579             [ 3] 	lda num_a+0
                             	; put nibbles in A,X
ee9d : 20efc8           [ 6] 	jsr str_a_to_x
                             	; And save to destination
eea0 : 91d7             [ 5] 	sta (df_tmpptra),y
eea2 : c8               [ 2] 	iny
eea3 : 8a               [ 2] 	txa
eea4 : 91d7             [ 5] 	sta (df_tmpptra),y
eea6 : c8               [ 2] 	iny
eea7 : 68               [ 4] 	pla
eea8 : 91d7             [ 5] 	sta (df_tmpptra),y
eeaa : c8               [ 2] 	iny
eeab : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
eeac :                       df_rt_deek
eeac : 38               [ 2] 	sec
eead : 8001             [ 3] 	bra df_rt_readbyte
eeaf :                       df_rt_peek
eeaf : 18               [ 2] 	clc
eeb0 :                       df_rt_readbyte
eeb0 : 08               [ 3] 	php
                             ;	inc df_exeoff
eeb1 : 2094d9           [ 6] 	jsr df_rt_getnval
eeb4 : 86d7             [ 3] 	stx df_tmpptra
eeb6 : 85d8             [ 3] 	sta df_tmpptra+1
eeb8 : b2d7             [ 5] 	lda (df_tmpptra)
eeba : aa               [ 2] 	tax
eebb : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  178
---------------------------------- bank1.s -----------------------------------

eebd : 28               [ 4] 	plp
eebe : 9005             [ 3] 	bcc df_rt_readbyte_skip
eec0 : 18               [ 2] 	clc
eec1 : a001             [ 2] 	ldy #1
eec3 : b1d7             [ 5] 	lda (df_tmpptra),y
eec5 :                       df_rt_readbyte_skip
eec5 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
eec8 :                       df_rt_vpeek
                             ;	inc df_exeoff
eec8 : 2094d9           [ 6] 	jsr df_rt_getnval
eecb : 2006c4           [ 6] 	jsr _vdp_peek
eece : aa               [ 2] 	tax
eecf : a900             [ 2] 	lda #0
eed1 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
eed4 :                       df_rt_nvpeek
                             ;	inc df_exeoff
eed4 : 2094d9           [ 6] 	jsr df_rt_getnval
eed7 : 2096c4           [ 6] 	jsr _rtc_nvread
eeda : aa               [ 2] 	tax
eedb : a900             [ 2] 	lda #0
eedd : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
eee0 :                       df_rt_rnd
                             ;	inc df_exeoff
eee0 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
eee3 : e000             [ 2] 	cpx #0
eee5 : d017             [ 3] 	bne df_rt_rnd_set
eee7 : c900             [ 2] 	cmp #0
eee9 : d013             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
eeeb : a5ce             [ 3] 	lda df_rnd+1
eeed : 4a               [ 2] 	lsr a
eeee : 26cd             [ 5] 	rol df_rnd
eef0 : 9002             [ 3] 	bcc df_rt_rnd_noeor
eef2 : 49b4             [ 2] 	eor #0xb4
eef4 :                       df_rt_rnd_noeor
eef4 : 85ce             [ 3] 	sta df_rnd+1
eef6 : 45cd             [ 3] 	eor df_rnd
eef8 : aa               [ 2] 	tax
eef9 : a900             [ 2] 	lda #0
eefb : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             	; else set the seed to that number and done
eefe :                       df_rt_rnd_set
eefe : 86cd             [ 3] 	stx df_rnd
ef00 : 85ce             [ 3] 	sta df_rnd+1
ef02 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; Get joystick status	
ef05 :                       df_rt_stick
                             ;	inc df_exeoff
ef05 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ef08 : 86d7             [ 3] 	stx df_tmpptra
ef0a : 20d6c3           [ 6] 	jsr _snd_get_joy0
ef0d : 98               [ 2] 	tya
AS65 Assembler for R6502 [1.42].                                     Page  179
---------------------------------- bank1.s -----------------------------------

                             	; invert the bits so that 1=switch on
ef0e : 49ff             [ 2] 	eor #0xff
ef10 : 25d7             [ 3] 	and df_tmpptra
ef12 : aa               [ 2] 	tax
ef13 : a900             [ 2] 	lda #0
ef15 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; l = msbyte(x)
ef18 :                       df_rt_msbyte
                             ;	inc df_exeoff
ef18 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; only high byte is used
ef1b : aa               [ 2] 	tax
ef1c : a900             [ 2] 	lda #0
ef1e : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             	
                             ; l = lsbyte(x)
ef21 :                       df_rt_lsbyte
                             ;	inc df_exeoff
ef21 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ef24 : a900             [ 2] 	lda #0
ef26 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
ef29 :                       df_rt_mem
                             ;	inc df_exeoff
ef29 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ef2c : e001             [ 2] 	cpx #1
ef2e : f016             [ 3] 	beq df_rt_mem_prg
ef30 : e002             [ 2] 	cpx #2
ef32 : f024             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
ef34 :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
ef44 : 8022             [ 3] 	bra df_rt_mem_calc
ef46 :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
ef56 : 8010             [ 3] 	bra df_rt_mem_calc
ef58 :                       df_rt_mem_var
                             	_cpyZPWord df_vntend,df_tmpptra
                             
                             	_cpyZPWord df_vvtstrt,df_tmpptrb
                             
ef68 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
ef68 : 38               [ 2] 	sec
ef69 : a5d7             [ 3] 	lda df_tmpptra
ef6b : e5d9             [ 3] 	sbc df_tmpptrb
ef6d : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  180
---------------------------------- bank1.s -----------------------------------

ef6e : a5d8             [ 3] 	lda df_tmpptra+1
ef70 : e5da             [ 3] 	sbc df_tmpptrb+1
ef72 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; %k=key(%sync) %sync>=1 means sync
ef75 :                       df_rt_get					; get is alias for key
ef75 :                       df_rt_key
                             ;	inc df_exeoff
ef75 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=1 if x==0 else x>0 makes c=0
ef78 : e001             [ 2] 	cpx #1
ef7a : 20bdc5           [ 6] 	jsr io_get_ch
ef7d : 9003             [ 3] 	bcc df_rt_key_valid
                             	; zero out A
ef7f : a900             [ 2] 	lda #0
ef81 : 18               [ 2] 	clc
ef82 :                       df_rt_key_valid
ef82 : aa               [ 2] 	tax
ef83 : a900             [ 2] 	lda #0
ef85 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             	
                             ; s = scrn(x,y)
ef88 :                       df_rt_scrn
                             ;	inc df_exeoff
ef88 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
ef8b : a6d7             [ 3] 	ldx df_tmpptra
ef8d : a4d9             [ 3] 	ldy df_tmpptrb
ef8f : 208ec3           [ 6] 	jsr _gr_get
ef92 : aa               [ 2] 	tax
ef93 : a900             [ 2] 	lda #0
ef95 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             ; p = pixel(x,y)
ef98 :                       df_rt_pixel
                             ;	inc df_exeoff
ef98 : 2055dc           [ 6] 	jsr df_rt_parm_2ints
ef9b : a6d7             [ 3] 	ldx df_tmpptra
ef9d : a4d9             [ 3] 	ldy df_tmpptrb
ef9f : a900             [ 2] 	lda #0
efa1 : 4cdff2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %e=elapsed(%var)
efa4 :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
efa4 : 20e3dd           [ 6] 	jsr df_rt_getlvar
efa7 : e6be             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
efa9 : 86d9             [ 3] 	stx df_tmpptrb
efab : 85da             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
efad : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of vdp counter without disabling int
efaf :                       df_rt_elapsed_rd
efaf : a504             [ 3] 	lda vdp_int_cnt
efb1 : a605             [ 3] 	ldx vdp_int_cnt+1
efb3 : c504             [ 3] 	cmp vdp_int_cnt			; If low counter changed due t
efb5 : d0f8             [ 3] 	bne df_rt_elapsed_rd
efb7 : 38               [ 2] 	sec
efb8 : f2d9             [ 5] 	sbc (df_tmpptrb)
efba : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page  181
---------------------------------- bank1.s -----------------------------------

efbb : a505             [ 3] 	lda vdp_int_cnt+1
efbd : f1d9             [ 5] 	sbc (df_tmpptrb),y
efbf : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
efc2 :                       df_rt_call
                             ;	inc df_exeoff
efc2 : 2077dc           [ 6] 	jsr df_rt_parm_4ints
efc5 : a5d9             [ 3] 	lda df_tmpptrb				; load A
efc7 : a6db             [ 3] 	ldx	df_tmpptrc				; load X
efc9 : a4dd             [ 3] 	ldy df_tmpptrd				; load Y
efcb : 20d1ef           [ 6] 	jsr df_rt_calljsr
efce :                       df_rt_push_int1
efce : 4ce2f2           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value	
efd1 :                       df_rt_calljsr
efd1 : 6cd700           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
                             
                             
efd4 :                       df_rt_sgn
                             ;	inc df_exeoff
efd4 : 2094d9           [ 6] 	jsr df_rt_getnval
efd7 : 86d7             [ 3] 	stx df_tmpptra
efd9 : 05d7             [ 3] 	ora df_tmpptra
efdb : f00f             [ 3] 	beq df_rt_sgn_z
efdd : 2980             [ 2] 	and #0x80
efdf : d006             [ 3] 	bne df_rt_sgn_n
efe1 : a201             [ 2] 	ldx #1
efe3 : a900             [ 2] 	lda #0
efe5 : f0e7             [ 3] 	beq df_rt_push_int1			; Always
efe7 :                       df_rt_sgn_n
efe7 : a2ff             [ 2] 	ldx #0xff
efe9 : 8a               [ 2] 	txa
efea : d0e2             [ 3] 	bne df_rt_push_int1			; Always
efec :                       df_rt_sgn_z
efec : a200             [ 2] 	ldx #0
efee : 8a               [ 2] 	txa
efef : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
eff1 :                       df_rt_addr
                             	; get lvar X,A from current statement
eff1 : 20e3dd           [ 6] 	jsr df_rt_getlvar
eff4 : e6be             [ 5] 	inc df_exeoff
eff6 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
eff9 :                       df_rt_strlen_common
eff9 : 86d7             [ 3] 	stx df_tmpptra
effb : 85d8             [ 3] 	sta df_tmpptra+1
effd : a0ff             [ 2] 	ldy #0xff
efff :                       df_rt_strlen_count
efff : c8               [ 2] 	iny
f000 : b1d7             [ 5] 	lda (df_tmpptra),y
f002 : d0fb             [ 4] 	bne df_rt_strlen_count
f004 : 98               [ 2] 	tya
f005 : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
AS65 Assembler for R6502 [1.42].                                     Page  182
---------------------------------- bank1.s -----------------------------------

                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
f006 :                       df_rt_str_extract
                             	; source string
f006 : 20faf2           [ 6] 	jsr df_ost_popStr
f009 : 86d7             [ 3] 	stx df_tmpptra
f00b : 85d8             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f00d : a5b0             [ 3] 	lda df_sevalptr
f00f : 85d9             [ 3] 	sta df_tmpptrb
f011 : a5b1             [ 3] 	lda df_sevalptr+1
f013 : 85da             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f015 : a4db             [ 3] 	ldy df_tmpptrc
f017 : a200             [ 2] 	ldx #0
f019 :                       df_rt_str_cpy_ch
f019 : c4dd             [ 3] 	cpy df_tmpptrd
f01b : f011             [ 3] 	beq df_str_src_end
f01d : b1d7             [ 5] 	lda (df_tmpptra),y
f01f : f00d             [ 3] 	beq df_str_src_end
f021 : 81d9             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f029 : c8               [ 2] 	iny
f02a : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f02e :                       df_str_src_end
f02e : a900             [ 2] 	lda #0
f030 : 81d9             [ 6] 	sta (df_tmpptrb,x)
f032 : a6b0             [ 3] 	ldx df_sevalptr
f034 : a5b1             [ 3] 	lda df_sevalptr+1
f036 : 4cd7f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f039 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f039 : 2094d9           [ 6] 	jsr df_rt_getnval
f03c : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f03e : 8a               [ 2] 	txa
f03f : 91b0             [ 5] 	sta (df_sevalptr),y
f041 : c8               [ 2] 	iny
                             	; zero terminator
f042 : a900             [ 2] 	lda #0
f044 : 91b0             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f046 : a6b0             [ 3] 	ldx df_sevalptr
f048 : a5b1             [ 3] 	lda df_sevalptr+1
f04a : 4cd7f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f04d :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f04d : 2094d9           [ 6] 	jsr df_rt_getnval
f050 : 85d7             [ 3] 	sta df_tmpptra	; Save the high byte
f052 : 8a               [ 2] 	txa				; Convert low byte first
f053 : 20efc8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f056 : 85d9             [ 3] 	sta df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  183
---------------------------------- bank1.s -----------------------------------

f058 : 8a               [ 2] 	txa				; Push low digit of low byte from X
f059 : 48               [ 3] 	pha
f05a : a5d9             [ 3] 	lda df_tmpptrb	; Get A back from temp
f05c : 48               [ 3] 	pha				; Push high digit of low byte
f05d : a5d7             [ 3] 	lda df_tmpptra	; Get the high byte
f05f : 20efc8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f062 : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f064 : 91b0             [ 5] 	sta (df_sevalptr),y
f066 : c8               [ 2] 	iny
                             	; hi/lo
f067 : 8a               [ 2] 	txa
f068 : 91b0             [ 5] 	sta (df_sevalptr),y
f06a : c8               [ 2] 	iny
                             	; lo/hi
f06b : 68               [ 4] 	pla
f06c : 91b0             [ 5] 	sta (df_sevalptr),y
f06e : c8               [ 2] 	iny
                             	; lo/lo
f06f : 68               [ 4] 	pla
f070 : 91b0             [ 5] 	sta (df_sevalptr),y
f072 : c8               [ 2] 	iny
                             	; zero terminator
f073 : a900             [ 2] 	lda #0
f075 : 91b0             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f077 : a6b0             [ 3] 	ldx df_sevalptr
f079 : a5b1             [ 3] 	lda df_sevalptr+1
f07b : 4cd7f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
f07e :                       df_rt_dec
f07e : 2094d9           [ 6] 	jsr df_rt_getnval
f081 : 18               [ 2] 	clc						; No leading zeros
f082 : 2036cb           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
f085 : a289             [ 2] 	ldx #lo(num_buf)
f087 : a900             [ 2] 	lda #hi(num_buf)
f089 : 4cd7f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
f08c :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f08c : 204ada           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f08f : e6be             [ 5] 	inc df_exeoff
f091 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f094 : 86dd             [ 3] 	stx df_tmpptrd
                             	; start position
f096 : a000             [ 2] 	ldy #0
f098 : 84db             [ 3] 	sty df_tmpptrc
f09a : 4c06f0           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f09d :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
AS65 Assembler for R6502 [1.42].                                     Page  184
---------------------------------- bank1.s -----------------------------------

                             	; point to string accumulator
f09d : 204ada           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f0a0 : e6be             [ 5] 	inc df_exeoff
f0a2 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f0a5 : 86db             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f0a7 : a6b0             [ 3] 	ldx df_sevalptr
f0a9 : a5b1             [ 3] 	lda df_sevalptr+1
f0ab : 20f9ef           [ 6] 	jsr df_rt_strlen_common
f0ae : 85dd             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f0b0 : 38               [ 2] 	sec
f0b1 : e5db             [ 3] 	sbc df_tmpptrc
f0b3 : 85db             [ 3] 	sta df_tmpptrc
f0b5 : 4c06f0           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f0b8 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f0b8 : 204ada           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f0bb : e6be             [ 5] 	inc df_exeoff
f0bd : 209ad9           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f0c0 : e6be             [ 5] 	inc df_exeoff
f0c2 : 2094d9           [ 6] 	jsr df_rt_getnval
f0c5 : 86dd             [ 3] 	stx df_tmpptrd
                             	; start position
f0c7 : 2002f3           [ 6] 	jsr df_ost_popInt
f0ca : ca               [ 2] 	dex					; zero offset rather than 1
f0cb : 86db             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f0cd : 8a               [ 2] 	txa
f0ce : 18               [ 2] 	clc
f0cf : 65dd             [ 3] 	adc df_tmpptrd
f0d1 : 85dd             [ 3] 	sta df_tmpptrd
f0d3 : 4c06f0           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f0d6 :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f0d6 : 204ada           [ 6] 	jsr df_rt_seval
f0d9 : 20faf2           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f0dc : 20f9ef           [ 6] 	jsr df_rt_strlen_common
f0df : 4cdff2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f0e2 :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f0e2 : 204ada           [ 6] 	jsr df_rt_seval
f0e5 : 20faf2           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f0e8 : 86d7             [ 3] 	stx df_tmpptra
f0ea : 85d8             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
AS65 Assembler for R6502 [1.42].                                     Page  185
---------------------------------- bank1.s -----------------------------------

f0ec : a200             [ 2] 	ldx #0
f0ee : a1d7             [ 6] 	lda (df_tmpptra,x)
f0f0 : 4cdff2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f0f3 :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f0f3 : 204ada           [ 6] 	jsr df_rt_seval
f0f6 : 20faf2           [ 6] 	jsr df_ost_popStr
f0f9 : a000             [ 2] 	ldy #0				; any numeric format
f0fb : 203ac9           [ 6] 	jsr con_n_to_a		; result in num_a
f0fe : b007             [ 4] 	bcs df_rt_val_err
f100 : a679             [ 3] 	ldx num_a
f102 : a57a             [ 3] 	lda num_a+1
                             	; Save as an int
f104 : 4ce2f2           [ 3] 	jmp df_ost_pushInt
f107 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f109 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
                             ;* ok=fcreate(filename)
f10b :                       df_rt_fcreate
f10b : 20f9eb           [ 6] 	jsr df_rt_parse_file
f10e : 20c6c5           [ 6] 	jsr io_open_write
f111 :                       df_rt_fcreate_check
                             	; Assume -1 which is OK
f111 : a2ff             [ 2] 	ldx #-1
f113 : 9002             [ 3] 	bcc df_rt_fcreate_ok
                             	; Else 0 which is error
f115 : a200             [ 2] 	ldx #0
f117 :                       df_rt_fcreate_ok
f117 : 8a               [ 2] 	txa				; make A=X
                             	; Save as an int
f118 : 20e2f2           [ 6] 	jsr df_ost_pushInt
                             	; Ensure we're back to the normal IO device
f11b : 4ca2c5           [ 3] 	jmp io_set_default
                             	
                             ;* ok=fopen(filename)
f11e :                       df_rt_fopen
f11e : 20f9eb           [ 6] 	jsr df_rt_parse_file
f121 : 20c3c5           [ 6] 	jsr io_open_read
f124 : 80eb             [ 3] 	bra df_rt_fcreate_check
                             
                             ;* ok=fclose()
f126 :                       df_rt_fclose
f126 : a902             [ 2] 	lda #2					; Only works for SD card now
f128 : 20a5c5           [ 6] 	jsr io_active_device
f12b : 20c9c5           [ 6] 	jsr io_close
                             	; Ensure we're back to the normal IO device
f12e : 4ca2c5           [ 3] 	jmp io_set_default
                             
                             ;* device <num>
f131 :                       df_rt_device
f131 : 2094d9           [ 6] 	jsr df_rt_getnval
                             	; Force update of status register
f134 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  186
---------------------------------- bank1.s -----------------------------------

f135 : 300a             [ 3] 	bmi df_rt_device_default
                             	; Stop dflat from trying to read inputs for Ctrl
f137 : a592             [ 3] 	lda df_checkmsk
f139 : 0980             [ 2] 	ora #0x80
f13b : 8592             [ 3] 	sta df_checkmsk
f13d : 8a               [ 2] 	txa
                             	; A contains the device to activate
f13e : 4ca5c5           [ 3] 	jmp io_active_device
f141 :                       df_rt_device_default
                             	; Allow dflat to read inputs for Ctrl-C
f141 : a592             [ 3] 	lda df_checkmsk
f143 : 297f             [ 2] 	and #0x7f
f145 : 8592             [ 3] 	sta df_checkmsk
f147 : 4ca2c5           [ 3] 	jmp io_set_default
                             
f14a :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f14a :                       mod_sz_proc_s
                             
f14a :                       df_rt_proc_parmerr
f14a :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f14c :                       df_rt_proc
                             	; move past escape token
f14c : a4be             [ 3] 	ldy df_exeoff
f14e : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f14f : b1bc             [ 5] 	lda (df_currlin),y
f151 : aa               [ 2] 	tax
f152 : c8               [ 2] 	iny
f153 : b1bc             [ 5] 	lda (df_currlin),y
f155 : c8               [ 2] 	iny
f156 : 84be             [ 3] 	sty df_exeoff
f158 : 86c4             [ 3] 	stx df_procptr
f15a : 85c5             [ 3] 	sta df_procptr+1
                             	
AS65 Assembler for R6502 [1.42].                                     Page  187
---------------------------------- bank1.s -----------------------------------

                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f15c : a003             [ 2] 	ldy #DFVVT_DIM1
f15e : b1c4             [ 5] 	lda (df_procptr),y
f160 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f162 : 2083dd           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f165 : 8439             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f167 : a002             [ 2] 	ldy #DFVVT_HI
f169 : 91c4             [ 5] 	sta (df_procptr),y
f16b : a001             [ 2] 	ldy #DFVVT_LO
f16d : 8a               [ 2] 	txa
f16e : 91c4             [ 5] 	sta (df_procptr),y
f170 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f172 : a539             [ 3] 	lda tmp_d
f174 : 91c4             [ 5] 	sta (df_procptr),y
f176 :                       df_rt_proc_addr
                             	; move past first open bracket
f176 : e6be             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f178 : a004             [ 2] 	ldy #DFVVT_DIM2
f17a : b1c4             [ 5] 	lda (df_procptr),y	
f17c : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f17e : 48               [ 3] 	pha
                             
f17f : c6be             [ 5] 	dec df_exeoff		; Pre-adjust
f181 :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f181 : e6be             [ 5] 	inc df_exeoff
                             	; if at end then error!
f183 : a4be             [ 3] 	ldy df_exeoff
f185 : b1bc             [ 5] 	lda (df_currlin),y
f187 : c929             [ 2] 	cmp #')'
f189 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f18b : 209ad9           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f18e : 68               [ 4] 	pla
                             	; decrement
f18f : 38               [ 2] 	sec
f190 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f192 : 48               [ 3] 	pha
                             	; go back and do all required parms
f193 : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f195 :                       df_rt_proc_parm_done
f195 : 68               [ 4] 	pla
f196 :                       df_rt_proc_parm_none
                             	; should be at close bracket
f196 : a4be             [ 3] 	ldy df_exeoff
f198 : b1bc             [ 5] 	lda (df_currlin),y
f19a : c929             [ 2] 	cmp #')'
f19c : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
AS65 Assembler for R6502 [1.42].                                     Page  188
---------------------------------- bank1.s -----------------------------------

                             	; get back the proc address
f19e : a6c4             [ 3] 	ldx df_procptr
f1a0 : a5c5             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f1a2 :                       df_rt_exec_proc
                             	; save slot address
f1a2 : 86d7             [ 3] 	stx df_tmpptra
f1a4 : 85d8             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f1a6 : a5bc             [ 3] 	lda df_currlin
f1a8 : 48               [ 3] 	pha
f1a9 : a5bd             [ 3] 	lda df_currlin+1
f1ab : 48               [ 3] 	pha
f1ac : a5be             [ 3] 	lda df_exeoff
f1ae : 48               [ 3] 	pha
f1af : a5b5             [ 3] 	lda df_nxtstidx
f1b1 : 48               [ 3] 	pha
f1b2 : a5b6             [ 3] 	lda df_curstidx
f1b4 : 48               [ 3] 	pha
f1b5 : a5b4             [ 3] 	lda df_eolidx
f1b7 : 48               [ 3] 	pha
f1b8 : a5c9             [ 3] 	lda df_ifnest
f1ba : 48               [ 3] 	pha
                             
                             	; now initialise the data
f1bb : a001             [ 2] 	ldy #DFVVT_LO
f1bd : b1d7             [ 5] 	lda (df_tmpptra),y
f1bf : 85bc             [ 3] 	sta df_currlin
f1c1 : c8               [ 2] 	iny
f1c2 : b1d7             [ 5] 	lda (df_tmpptra),y
f1c4 : 85bd             [ 3] 	sta df_currlin+1
f1c6 : c8               [ 2] 	iny
f1c7 : b1d7             [ 5] 	lda (df_tmpptra),y
f1c9 : 85be             [ 3] 	sta df_exeoff
f1cb : 85b6             [ 3] 	sta df_curstidx
f1cd : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f1cf : b1bc             [ 5] 	lda (df_currlin),y
f1d1 : 85b5             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f1d3 : 20c5dc           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f1d6 : 68               [ 4] 	pla
f1d7 : 85c9             [ 3] 	sta df_ifnest
f1d9 : 68               [ 4] 	pla
f1da : 85b4             [ 3] 	sta df_eolidx
f1dc : 68               [ 4] 	pla
f1dd : 85b6             [ 3] 	sta df_curstidx
f1df : 68               [ 4] 	pla
f1e0 : 85b5             [ 3] 	sta df_nxtstidx
f1e2 : 68               [ 4] 	pla
f1e3 : 85be             [ 3] 	sta df_exeoff
f1e5 : 68               [ 4] 	pla
f1e6 : 85bd             [ 3] 	sta df_currlin+1
f1e8 : 68               [ 4] 	pla
f1e9 : 85bc             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f1eb : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  189
---------------------------------- bank1.s -----------------------------------

                             
f1ec :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f1ec : a6be             [ 3] 	ldx df_exeoff
f1ee : e8               [ 2] 	inx
f1ef : e8               [ 2] 	inx
f1f0 : e8               [ 2] 	inx
f1f1 : 86be             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f1f3 : a201             [ 2] 	ldx #1									; index in to scratch
f1f5 : 86c2             [ 3] 	stx df_procargs							; Proc args is the #args-1
f1f7 : a4be             [ 3] 	ldy df_exeoff
f1f9 :                       df_rt_def_find_var
f1f9 : c8               [ 2] 	iny
f1fa : b1bc             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f1fc : c929             [ 2] 	cmp #')'
f1fe : f021             [ 4] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f200 : c911             [ 2] 	cmp #DFTK_VAR
f202 : f007             [ 3] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f204 : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f206 : d0f1             [ 4] 	bne df_rt_def_find_var
f208 :                       df_rt_def_got_varparm
                             	; set high bit
f208 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f20a : c8               [ 2] 	iny
f20b :                       df_rt_def_got_var
f20b : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f20d : 9d0009           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f210 : c8               [ 2] 	iny
f211 : b1bc             [ 5] 	lda (df_currlin),y
f213 : 9d2009           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f216 : c8               [ 2] 	iny
f217 : b1bc             [ 5] 	lda (df_currlin),y
f219 : 9d4009           [ 5] 	sta scratch+64,x
f21c : e8               [ 2] 	inx
f21d : e6c2             [ 5] 	inc df_procargs
f21f : d0d8             [ 4] 	bne df_rt_def_find_var  ; always - relies not ze
f221 :                       df_rt_def_parm_done
                             	; save index that we got to
f221 : 84be             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f223 : 86c1             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f225 : a900             [ 2] 	lda #0
f227 : 85c3             [ 3] 	sta df_procloc
f229 :                       df_rt_def_load_var
f229 : c6c2             [ 5] 	dec df_procargs
f22b : f02f             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f22d : c6c1             [ 5] 	dec df_procmode
f22f : a6c1             [ 3] 	ldx df_procmode
f231 : bd2009           [ 4] 	lda scratch+32,x
f234 : 85d7             [ 3] 	sta df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  190
---------------------------------- bank1.s -----------------------------------

f236 : bd4009           [ 4] 	lda scratch+64,x
f239 : 85d8             [ 3] 	sta df_tmpptra+1
                             	
f23b : bd0009           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f23e : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f240 : a6d7             [ 3] 	ldx df_tmpptra
f242 : a5d8             [ 3] 	lda df_tmpptra+1
f244 : 2090f2           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f247 : e6c3             [ 5] 	inc df_procloc
f249 :                       df_rt_def_initialise_parm
                             	; load type
f249 : a000             [ 2] 	ldy #DFVVT_TYPE
f24b : b1d7             [ 5] 	lda (df_tmpptra),y
f24d : a8               [ 2] 	tay					; Put the type into Y
f24e : 2004f3           [ 6] 	jsr df_ost_popParmX	; Try to get this off the st
                             	; update the variable
f251 : a002             [ 2] 	ldy #DFVVT_HI
f253 : 91d7             [ 5] 	sta (df_tmpptra),y
f255 : 88               [ 2] 	dey
f256 : 8a               [ 2] 	txa
f257 : 91d7             [ 5] 	sta (df_tmpptra),y
                             
f259 : 4c29f2           [ 3] 	jmp df_rt_def_load_var
f25c :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f25c : a5c3             [ 3] 	lda df_procloc
f25e : 20a4f2           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f261 : 18               [ 2] 	clc
f262 : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f263 :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f263 : 209ad9           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f266 :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f266 : 20adf2           [ 6] 	jsr df_rst_popByte
f269 : aa               [ 2] 	tax
f26a : f020             [ 3] 	beq df_rt_proc_unload_done
f26c :                       df_rt_proc_unloadvar
f26c : 8a               [ 2] 	txa
f26d : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
AS65 Assembler for R6502 [1.42].                                     Page  191
---------------------------------- bank1.s -----------------------------------

f26e : 20caf2           [ 6] 	jsr df_rst_popWord
f271 : 86d9             [ 3] 	stx df_tmpptrb
f273 : 85da             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f275 : 20caf2           [ 6] 	jsr df_rst_popWord
f278 : 86d7             [ 3] 	stx df_tmpptra
f27a : 85d8             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f27c : a001             [ 2] 	ldy #DFVVT_LO
f27e : a5d9             [ 3] 	lda df_tmpptrb
f280 : 91d7             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f282 : c8               [ 2] 	iny
f283 : a5da             [ 3] 	lda df_tmpptrb+1
f285 : 91d7             [ 5] 	sta (df_tmpptra),y
                             	; restore counter
f287 : 68               [ 4] 	pla
f288 : aa               [ 2] 	tax
f289 : ca               [ 2] 	dex
f28a : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f28c :                       df_rt_proc_unload_done
f28c : 68               [ 4] 	pla					; Pull the return address off stack
f28d : 68               [ 4] 	pla					; to get to the previous level
f28e : 18               [ 2] 	clc
f28f : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f290 :                       df_rt_proc_local
                             	; save address
f290 : 86d7             [ 3] 	stx df_tmpptra
f292 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f294 : 20bcf2           [ 6] 	jsr df_rst_pushWord
f297 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f297 : a001             [ 2] 	ldy #DFVVT_LO
f299 : b1d7             [ 5] 	lda (df_tmpptra),y
f29b : aa               [ 2] 	tax
f29c : c8               [ 2] 	iny
f29d : b1d7             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f29f : 20bcf2           [ 6] 	jsr df_rst_pushWord
f2a2 : 18               [ 2] 	clc
f2a3 : 60               [ 6] 	rts
                             		
f2a4 :                       mod_sz_proc_e
                             
                             
f2a4 :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
AS65 Assembler for R6502 [1.42].                                     Page  192
---------------------------------- bank1.s -----------------------------------

                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f2a4 :                       df_rst_pushByte
f2a4 : a4ac             [ 3] 	ldy df_rtstop
f2a6 : 99000b           [ 5] 	sta df_rtstck,y
f2a9 : 88               [ 2] 	dey
f2aa : 84ac             [ 3] 	sty df_rtstop
f2ac : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f2ad :                       df_rst_popByte
f2ad : a4ac             [ 3] 	ldy df_rtstop
f2af : c8               [ 2] 	iny
f2b0 : b9000b           [ 4] 	lda df_rtstck,y
f2b3 : 84ac             [ 3] 	sty df_rtstop
f2b5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f2b6 :                       df_rst_peekByte
f2b6 : a4ac             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f2b8 : b9010b           [ 4] 	lda df_rtstck+1,y
f2bb : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
AS65 Assembler for R6502 [1.42].                                     Page  193
---------------------------------- bank1.s -----------------------------------

                             ;* X,A = word lo,hi
                             ;****************************************
f2bc :                       df_rst_pushWord
f2bc : a4ac             [ 3] 	ldy df_rtstop
f2be : 99000b           [ 5] 	sta df_rtstck,y
f2c1 : 88               [ 2] 	dey
f2c2 : 8a               [ 2] 	txa
f2c3 : 99000b           [ 5] 	sta df_rtstck,y
f2c6 : 88               [ 2] 	dey
f2c7 : 84ac             [ 3] 	sty df_rtstop
f2c9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f2ca :                       df_rst_popWord
f2ca : a4ac             [ 3] 	ldy df_rtstop
f2cc : c8               [ 2] 	iny
f2cd : be000b           [ 4] 	ldx df_rtstck,y
f2d0 : c8               [ 2] 	iny
f2d1 : b9000b           [ 4] 	lda df_rtstck,y
f2d4 : 84ac             [ 3] 	sty df_rtstop
f2d6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f2d7 :                       df_ost_pushStr
f2d7 : a004             [ 2] 	ldy #DFST_STR
f2d9 : d009             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f2db :                       df_ost_pushPtr
f2db : a0ff             [ 2] 	ldy #DFST_PTR
f2dd : d005             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f2df :                       df_ost_pushIntA
f2df : aa               [ 2] 	tax
f2e0 : a900             [ 2] 	lda #0
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f2e2 :                       df_ost_pushInt
f2e2 : a003             [ 2] 	ldy #DFST_INT
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
AS65 Assembler for R6502 [1.42].                                     Page  194
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
f2e4 :                       df_ost_pushParmX
f2e4 : 8439             [ 3] 	sty tmp_d		; Save Type
f2e6 : a4ad             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f2e8 : 99000b           [ 5] 	sta df_rtstck,y
f2eb : c8               [ 2] 	iny
                             	; push low byte next (X)
f2ec : 8a               [ 2] 	txa
f2ed : 99000b           [ 5] 	sta df_rtstck,y
f2f0 : c8               [ 2] 	iny
f2f1 : a539             [ 3] 	lda tmp_d		; get Type
f2f3 : 99000b           [ 5] 	sta df_rtstck,y
f2f6 : c8               [ 2] 	iny
                             	; save new top of stack
f2f7 : 84ad             [ 3] 	sty df_parmtop
f2f9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f2fa :                       df_ost_popStr
f2fa : a904             [ 2] 	lda #DFST_STR
f2fc : d006             [ 4] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f2fe :                       df_ost_popPtr
f2fe : a9ff             [ 2] 	lda #0xff
f300 : d002             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             		
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f302 :                       df_ost_popInt
f302 : a903             [ 2] 	lda #DFST_INT
                             	; ***FALL THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* A - type expected
                             ;****************************************
f304 :                       df_ost_popParmX
f304 : a4ad             [ 3] 	ldy df_parmtop
                             	; pull type first
f306 : 88               [ 2] 	dey
f307 : 39000b           [ 4] 	and df_rtstck,y
f30a : f00b             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f30c : 88               [ 2] 	dey
f30d : be000b           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f310 : 88               [ 2] 	dey
f311 : b9000b           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f314 : 84ad             [ 3] 	sty df_parmtop
f316 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  195
---------------------------------- bank1.s -----------------------------------

f317 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f319 :                       df_ost_peekType
f319 : a4ad             [ 3] 	ldy df_parmtop
f31b : b9ff0a           [ 4] 	lda df_rtstck-1,y
f31e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Allocate space on the heap
                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f31f :                       df_st_malloc
                             	; save A in Y
f31f : a8               [ 2] 	tay
                             	; save old starend
f320 : a5ab             [ 3] 	lda df_starend+1
f322 : 48               [ 3] 	pha
f323 : a5aa             [ 3] 	lda df_starend
f325 : 48               [ 3] 	pha
                             	; restore A from Y
f326 : 98               [ 2] 	tya
                             	; add X,A to starend
f327 : 48               [ 3] 	pha
f328 : 8a               [ 2] 	txa
f329 : 18               [ 2] 	clc
f32a : 65aa             [ 3] 	adc df_starend
f32c : 85aa             [ 3] 	sta df_starend
f32e : 68               [ 4] 	pla
f32f : 65ab             [ 3] 	adc df_starend+1
f331 : 85ab             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f333 : 68               [ 4] 	pla
f334 : aa               [ 2] 	tax
f335 : 68               [ 4] 	pla
f336 : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f337 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f337 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f339 : 8db40c           [ 4] 	sta df_memtop
f33c : a9c0             [ 2] 	lda #hi(DF_MEMTOP)
f33e : 8db50c           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f341 : 2044f3           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
AS65 Assembler for R6502 [1.42].                                     Page  196
---------------------------------- bank1.s -----------------------------------

                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f344 :                       df_clear
                             	; Start of program space
f344 : a9b6             [ 2] 	lda #lo(DF_PROGSTART)
f346 : 859b             [ 3] 	sta df_prgstrt
f348 : 859d             [ 3] 	sta df_prgend
f34a : a90c             [ 2] 	lda #hi(DF_PROGSTART)
f34c : 859c             [ 3] 	sta df_prgstrt+1
f34e : 859e             [ 3] 	sta df_prgend+1
                             	; Terminal value in prog space
f350 : a900             [ 2] 	lda #0
f352 : a8               [ 2] 	tay
f353 : 919b             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f355 : 85a7             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f357 : adb40c           [ 4] 	lda df_memtop
f35a : 85a3             [ 3] 	sta df_vvtstrt
f35c : 85a5             [ 3] 	sta df_vvtend
f35e : adb50c           [ 4] 	lda df_memtop+1
f361 : 85a4             [ 3] 	sta df_vvtstrt+1
f363 : 85a6             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f365 : a5a3             [ 3] 	lda df_vvtstrt
f367 : 859f             [ 3] 	sta df_vntstrt
f369 : 85a1             [ 3] 	sta df_vntend
f36b : a5a4             [ 3] 	lda df_vvtstrt+1
f36d : 85a0             [ 3] 	sta df_vntstrt+1
f36f : 85a2             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f371 : a900             [ 2] 	lda #lo(scratch)
f373 : 85b0             [ 3] 	sta df_sevalptr
f375 : a909             [ 2] 	lda #hi(scratch)
f377 : 85b1             [ 3] 	sta df_sevalptr+1
                             
f379 : 60               [ 6] 	rts
                             
f37a :                       mod_sz_dflat_e
                             
                             	include "dflat\error.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
AS65 Assembler for R6502 [1.42].                                     Page  197
---------------------------------- bank1.s -----------------------------------

                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f37a :                       df_tk_errortab
AS65 Assembler for R6502 [1.42].                                     Page  198
---------------------------------- bank1.s -----------------------------------

f37a : 4f6b00                	db	"Ok", 0
f37d : 53796e74617800        	db	"Syntax", 0
f384 : 5479706500            	db	"Type", 0
f389 : 52652d64696d00        	db	"Re-dim", 0
f390 : 4e6f2072657065..      	db	"No repeat", 0
f39a : 4e6f206465666e00      	db	"No defn", 0
f3a2 : 5061726d00            	db	"Parm", 0
f3a7 : 456e64656400          	db	"Ended", 0
f3ad : 4e6f20656e6469..      	db	"No endif", 0
f3b6 : 4e6f20696600          	db	"No if", 0
f3bc : 4e6f20666f7200        	db	"No for", 0
f3c3 : 4e6f7420666f75..      	db	"Not found", 0
f3cd : 546f6f206c6f6e..      	db	"Too long", 0
f3d6 : 427265616b00          	db	"Break", 0
f3dc : 4e6f206461746100      	db	"No data", 0
f3e4 : 4e6f207768696c..      	db	"No while", 0
f3ed : 4e6f206c696e6500      	db	"No line", 0
f3f5 : 4e6f2072657475..      	db	"No return ", 0
f400 : 41626f7274656400      	db	"Aborted", 0
f408 : 426f756e647300        	db	"Bounds", 0
f40f : 4e6f206f726700        	db	"No org", 0
f416 : 00                    	db	0
                             
f417 :                       df_tk_error_inline
f417 : 20696e206c696e..      	db	" in line ", 0
f421 :                       df_tk_error_atpos
f421 : 20706f732000          	db	" pos ", 0
f427 :                       df_tk_error_error
f427 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f42e :                       df_trap_error
                             	; set IO back to normal
f42e : 20a2c5           [ 6] 	jsr io_set_default
f431 : 58               [ 2] 	cli
                             
f432 : a97a             [ 2] 	lda #lo(df_tk_errortab)
f434 : 85d7             [ 3] 	sta df_tmpptra
f436 : a9f3             [ 2] 	lda #hi(df_tk_errortab)
f438 : 85d8             [ 3] 	sta df_tmpptra+1
f43a : a693             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f43c : f002             [ 3] 	beq df_trap_go_monitor
f43e : 1003             [ 3] 	bpl df_trap_normal
f440 :                       df_trap_go_monitor
f440 : 4cbff4           [ 3] 	jmp df_trap_monitor
f443 :                       df_trap_normal
f443 : a000             [ 2] 	ldy #0
f445 :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f445 : b1d7             [ 5] 	lda (df_tmpptra),y
f447 : f076             [ 3] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f449 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
AS65 Assembler for R6502 [1.42].                                     Page  199
---------------------------------- bank1.s -----------------------------------

                             
f44f : b1d7             [ 5] 	lda (df_tmpptra),y
f451 : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f459 : ca               [ 2] 	dex
f45a : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f45c : a6d7             [ 3] 	ldx df_tmpptra
f45e : a5d8             [ 3] 	lda df_tmpptra+1
f460 : 200bc6           [ 6] 	jsr io_print_line
f463 : a227             [ 2] 	ldx #lo(df_tk_error_error)
f465 : a9f4             [ 2] 	lda #hi(df_tk_error_error)
f467 : 200bc6           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
f46a : a001             [ 2] 	ldy #DFTK_LINNUM
f46c : b1bc             [ 5] 	lda (df_currlin),y
f46e : aa               [ 2] 	tax
f46f : c8               [ 2] 	iny
f470 : b1bc             [ 5] 	lda (df_currlin),y
f472 : d004             [ 3] 	bne df_show_err_linnum
f474 : e000             [ 2] 	cpx #0x00
f476 : f011             [ 3] 	beq df_show_err_fin
f478 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f485 : 18               [ 2] 	clc
f486 : 2079cb           [ 6] 	jsr print_a_to_d
f489 :                       df_show_err_fin
f489 : a4b2             [ 3] 	ldy df_linoff
f48b : f02b             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f49a : 98               [ 2] 	tya
f49b : aa               [ 2] 	tax
f49c : a900             [ 2] 	lda #0
f49e : 18               [ 2] 	clc
f49f : 2079cb           [ 6] 	jsr print_a_to_d
f4a2 : 20c2c8           [ 6] 	jsr utilPrintCRLF
f4a5 : a000             [ 2] 	ldy #0
                             	; Show the error line with error pos inverse
f4a7 :                       def_show_err_line
f4a7 : b9000a           [ 4] 	lda df_linbuff,y
f4aa : f00c             [ 3] 	beq df_show_err_done
f4ac : c4b2             [ 3] 	cpy df_linoff
f4ae : d002             [ 3] 	bne def_show_err_line_skip
f4b0 : 0980             [ 2] 	ora #0x80
f4b2 :                       def_show_err_line_skip
f4b2 : 20c0c5           [ 6] 	jsr io_put_ch
f4b5 : c8               [ 2] 	iny
f4b6 : d0ef             [ 3] 	bne def_show_err_line	; Always
f4b8 :                       df_show_err_done
f4b8 : 20c2c8           [ 6] 	jsr utilPrintCRLF
f4bb : 18               [ 2] 	clc
                             	; back to editor
f4bc : 4c77d8           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f4bf :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
AS65 Assembler for R6502 [1.42].                                     Page  200
---------------------------------- bank1.s -----------------------------------

                             
f4c6 : a599             [ 3] 	lda df_brkpc+1
f4c8 : 20cac8           [ 6] 	jsr utilPrintA
f4cb : a598             [ 3] 	lda df_brkpc
f4cd : 20cac8           [ 6] 	jsr utilPrintA
f4d0 : 20bac8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f4da : a579             [ 3] 	lda num_a
f4dc : 20cac8           [ 6] 	jsr utilPrintA
f4df : 20bac8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
                             	_println_low df_msg_xreg
                             
f4e9 : a57a             [ 3] 	lda num_a+1
f4eb : 20cac8           [ 6] 	jsr utilPrintA
f4ee : 20bac8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f4f8 : a57b             [ 3] 	lda num_a+2
f4fa : 20cac8           [ 6] 	jsr utilPrintA
f4fd : 20c2c8           [ 6] 	jsr utilPrintCRLF
                             
f500 : 20fde0           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f503 : 4c77d8           [ 3] 	jmp df_pg_dflat
                             
f506 :                       df_msg_pc
f506 : 50433a00              	db "PC:\x0"
f50a :                       df_msg_acc
f50a : 413a00                	db "A:\x0"
f50d :                       df_msg_xreg
f50d : 583a00                	db "X:\x0"
f510 :                       df_msg_yreg
f510 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat\asm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f513 :                       mod_sz_asm_s
                             
AS65 Assembler for R6502 [1.42].                                     Page  201
---------------------------------- bank1.s -----------------------------------

                             	;	dflat.s is already included, so just the addit
                             	include "dflat\asm.i"
                             ;*	BBC-128 BREADBOARD COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat\tkasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
AS65 Assembler for R6502 [1.42].                                     Page  202
---------------------------------- bank1.s -----------------------------------

                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f513 :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f513 :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f513 : 2048f5           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f516 : b01d             [ 3] 	bcs df_tk_asm_label
f518 :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f518 : a997             [ 2] 	lda #DFRT_ASM
f51a : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f51d : a5b9             [ 3] 	lda df_symoff
f51f : 0980             [ 2] 	ora #0x80
f521 : 20afce           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f524 : a001             [ 2] 	ldy #1
f526 : b1b7             [ 5] 	lda (df_symtab),y
                             	; Directive?
f528 : c910             [ 2] 	cmp #AM_DIR
f52a : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f52c : a5b9             [ 3] 	lda df_symoff
f52e : 4c9ff5           [ 3] 	jmp df_tk_asm_exec_parser
f531 :                       df_tk_asm_parse_command_err
f531 : 60               [ 6] 	rts
f532 :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f532 : 4ca4f5           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f535 :                       df_tk_asm_label
                             	; labels must start with '.'
f535 : a92e             [ 2] 	lda #'.'
f537 : 2022cf           [ 6] 	jsr df_tk_expect
f53a : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f53c : a997             [ 2] 	lda #DFRT_ASM
f53e : 20afce           [ 6] 	jsr df_tk_put_tok
f541 : e6b2             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f543 : a900             [ 2] 	lda #0
f545 : 4ce6cf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
AS65 Assembler for R6502 [1.42].                                     Page  203
---------------------------------- bank1.s -----------------------------------

                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f548 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f548 : a932             [ 2] 	lda #lo(df_asm_tokensyms)
f54a : 85b7             [ 3] 	sta df_symtab
f54c : a9f9             [ 2] 	lda #hi(df_asm_tokensyms)
f54e : 85b8             [ 3] 	sta df_symtab+1
f550 : a900             [ 2] 	lda #0
f552 : 85b9             [ 3] 	sta df_symoff
f554 : a200             [ 2] 	ldx #0
f556 :                       df_tk_asm_checknexttok
                             	; From the line buffer current pointer
                             	; Check for a token match
f556 : a4b2             [ 3] 	ldy df_linoff
f558 :                       df_tk_asm_checktokch
                             	; Get symtable char
f558 : a1b7             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f55a : c920             [ 2] 	cmp #' '
f55c : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f55e : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f561 : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f569 : c8               [ 2] 	iny
f56a : 4c58f5           [ 3] 	jmp df_tk_asm_checktokch
f56d :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f56d : e6b9             [ 5] 	inc df_symoff
f56f :                       df_tk_asm_symnextentry
f56f : a1b7             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f571 : c920             [ 2] 	cmp #' '
f573 : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f57b : 4c6ff5           [ 3] 	jmp df_tk_asm_symnextentry
f57e :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f57e : 38               [ 2] 	sec
f57f : 65b7             [ 3] 	adc df_symtab
f581 : 85b7             [ 3] 	sta df_symtab
f583 : a5b8             [ 3] 	lda df_symtab+1
f585 : 6900             [ 2] 	adc #0
f587 : 85b8             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f589 : a1b7             [ 6] 	lda (df_symtab,x)
f58b : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
AS65 Assembler for R6502 [1.42].                                     Page  204
---------------------------------- bank1.s -----------------------------------

                             	; so no match found
                             	; Zero symbol counter
f58d : 85b9             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f58f : 38               [ 2] 	sec
f590 : 60               [ 6] 	rts
f591 :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f591 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f594 : 20f4ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
f597 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f599 : 84b2             [ 3] 	sty df_linoff
f59b : a5b9             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f59d :                       df_tk_asm_addr_mode_ok
f59d : 18               [ 2] 	clc
f59e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f59f :                       df_tk_asm_exec_parser
f59f : 0a               [ 2] 	asl a
f5a0 : aa               [ 2] 	tax
f5a1 : 7ca3fc           [ 6] 	jmp (df_tk_asm_tokenjmp,x)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f5a4 :                       df_tk_asm_addr_mode
f5a4 : 2000cf           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f5a7 : c900             [ 2] 	cmp #0					;End of line?
f5a9 : f0f2             [ 3] 	beq df_tk_asm_addr_mode_ok
f5ab : c93a             [ 2] 	cmp #':'				;End of statement?
f5ad : f0ee             [ 3] 	beq df_tk_asm_addr_mode_ok
f5af : a923             [ 2] 	lda #'#'				; Check for immediate
f5b1 : 2030cf           [ 6] 	jsr df_tk_expect_tok
f5b4 : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f5b6 : 4cdbf5           [ 3] 	jmp df_tk_imm		; Process immediate
f5b9 :                       df_tk_asm_addr_mode_1
f5b9 : a928             [ 2] 	lda #'('				; One of indirect modes?
f5bb : 2030cf           [ 6] 	jsr df_tk_expect_tok
f5be : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f5c0 : 4ce0f5           [ 3] 	jmp df_tk_indirect
f5c3 :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
AS65 Assembler for R6502 [1.42].                                     Page  205
---------------------------------- bank1.s -----------------------------------

f5c3 : 202dd1           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f5c6 : a92c             [ 2] 	lda #','
f5c8 : 2030cf           [ 6] 	jsr df_tk_expect_tok
f5cb : b0d0             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f5cd : a978             [ 2] 	lda #'x'
f5cf : 2030cf           [ 6] 	jsr df_tk_expect_tok
f5d2 : 90c9             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f5d4 : a979             [ 2] 	lda #'y'
f5d6 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
f5d9 : 18               [ 2] 	clc
f5da : 60               [ 6] 	rts
                             	
                             	
                             ;* Toeknise immediate addressing mode	
f5db :                       df_tk_imm
                             	; Just one expression expected
f5db : 202dd1           [ 6] 	jsr df_tk_expression
f5de : 18               [ 2] 	clc
f5df : 60               [ 6] 	rts
                             	
                             ;* Tokenise indirect
f5e0 :                       df_tk_indirect
                             	; Just one expression expected
f5e0 : 202dd1           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f5e3 : a92c             [ 2] 	lda #','
f5e5 : 2030cf           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f5e8 : b00c             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f5ea : a978             [ 2] 	lda #'x'
f5ec : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
f5ef : a929             [ 2] 	lda #')'
f5f1 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
f5f4 : 18               [ 2] 	clc
f5f5 : 60               [ 6] 	rts
                             	
f5f6 :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f5f6 : a929             [ 2] 	lda #')'
f5f8 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f5fb : a92c             [ 2] 	lda #','
f5fd : 2030cf           [ 6] 	jsr df_tk_expect_tok
f600 : b007             [ 3] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f602 : a979             [ 2] 	lda #'y'
f604 : 203bcf           [ 6] 	jsr df_tk_expect_tok_err
f607 : 18               [ 2] 	clc
f608 : 60               [ 6] 	rts
                             
f609 :                       df_tk_indirect_done
f609 : 18               [ 2] 	clc
f60a : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  206
---------------------------------- bank1.s -----------------------------------

                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f60b :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat\rtasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f60b :                       mod_sz_rtasm_s
                             
f60b :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f60b : a4be             [ 3] 	ldy df_exeoff
AS65 Assembler for R6502 [1.42].                                     Page  207
---------------------------------- bank1.s -----------------------------------

f60d : b1bc             [ 5] 	lda (df_currlin),y
f60f : 1009             [ 3] 	bpl df_rt_asm_do_label
f611 : 201ef6           [ 6] 	jsr df_rt_asm_command
f614 : 2016f8           [ 6] 	jsr df_rt_asm_printCR
f617 : 4c1df6           [ 3] 	jmp df_rt_asm_assemble_done
f61a :                       df_rt_asm_do_label
f61a : 2042f6           [ 6] 	jsr df_rt_asm_label
f61d :                       df_rt_asm_assemble_done
                             	; any clean up here
f61d : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f61e :                       df_rt_asm_command
f61e : 297f             [ 2] 	and #0x7f
f620 : 48               [ 3] 	pha
f621 : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f622 : 20e4f8           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f625 : a001             [ 2] 	ldy #1
f627 : b1b7             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f629 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f62b : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f62d : 4c0af7           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f630 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f630 : 68               [ 4] 	pla
f631 : 0a               [ 2] 	asl a
f632 : aa               [ 2] 	tax
                             	; jump over directive code
f633 : e6be             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f635 : bdadfc           [ 4] 	lda df_rt_asm_tokenjmp,x
f638 : 85d7             [ 3] 	sta df_tmpptra
f63a : bdaefc           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f63d : 85d8             [ 3] 	sta df_tmpptra+1
f63f : 6cd700           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f642 :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f642 : 205ee6           [ 6] 	jsr df_rt_generate_lvar
f645 : 86d4             [ 3] 	stx df_asmoprnd
f647 : 85d5             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f649 : a000             [ 2] 	ldy #0
f64b : a5cf             [ 3] 	lda df_asmpc
f64d : 91d4             [ 5] 	sta (df_asmoprnd),y
f64f : a5d0             [ 3] 	lda df_asmpc+1
f651 : c8               [ 2] 	iny
f652 : 91d4             [ 5] 	sta (df_asmoprnd),y
f654 : 60               [ 6] 	rts	
                             
AS65 Assembler for R6502 [1.42].                                     Page  208
---------------------------------- bank1.s -----------------------------------

                             ;* Set the code origin
f655 :                       df_rt_asm_org
                             	; Get the address from expression
f655 : 20c1f8           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f658 : a5d4             [ 3] 	lda df_asmoprnd
f65a : 85cf             [ 3] 	sta df_asmpc
f65c : a5d5             [ 3] 	lda df_asmoprnd+1
f65e : 85d0             [ 3] 	sta df_asmpc+1
f660 : a903             [ 2] 	lda #3
f662 : 85d6             [ 3] 	sta df_asmlen
f664 : 4cd8f7           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f667 :                       df_rt_asm_opt
                             	; Get the value from expression
f667 : 20c1f8           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f66a : a5d4             [ 3] 	lda df_asmoprnd
f66c : 85d1             [ 3] 	sta df_asmopt
f66e : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
f66f :                       df_rt_asm_db
f66f : a902             [ 2] 	lda #2
f671 : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f672 :                       df_rt_asm_dw
f672 : a903             [ 2] 	lda #3
f674 :                       df_rt_asm_db_start
f674 : 85d6             [ 3] 	sta df_asmlen
f676 : 20d8f7           [ 6] 	jsr df_rt_asm_printPC
f679 : 20f3f7           [ 6] 	jsr df_rt_asm_printSPC
f67c :                       df_rt_asm_data
f67c : 209ad9           [ 6] 	jsr df_rt_neval		; Evaluate expression
                             	_df_ost_peekType	; What is the type
                             
f684 : 2904             [ 2] 	and #DFST_STR
f686 : d00d             [ 3] 	bne df_rt_asm_string; If string
f688 : 2002f3           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f68b : 86d4             [ 3] 	stx df_asmoprnd		; store low value
f68d : 85d5             [ 3] 	sta df_asmoprnd+1	; store high value
f68f : 20bdf6           [ 6] 	jsr df_rt_asm_data_write
f692 : 4cb2f6           [ 3] 	jmp df_rt_asm_data_next
f695 :                       df_rt_asm_string
f695 : 20fef2           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f698 : 86d7             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f69a : 85d8             [ 3] 	sta df_tmpptra+1
f69c :                       df_rt_asm_string_ch
f69c : a000             [ 2] 	ldy #0
f69e : b1d7             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f6a0 : f010             [ 3] 	beq df_rt_asm_data_next
f6a2 : 85d4             [ 3] 	sta df_asmoprnd		; Save as operand
AS65 Assembler for R6502 [1.42].                                     Page  209
---------------------------------- bank1.s -----------------------------------

f6a4 : 84d5             [ 3] 	sty df_asmoprnd+1	; High is always zero
f6a6 : 20bdf6           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
f6af : 4c9cf6           [ 3] 	jmp df_rt_asm_string_ch
f6b2 :                       df_rt_asm_data_next
f6b2 : 2090e6           [ 6] 	jsr df_rt_eos		; End?
f6b5 : b005             [ 3] 	bcs df_rt_asm_data_done
f6b7 : e6be             [ 5] 	inc df_exeoff		; Jump over ','
f6b9 : 4c7cf6           [ 3] 	jmp df_rt_asm_data
f6bc :                       df_rt_asm_data_done
f6bc : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
                             ; Advance PC by df_asmlen
f6bd :                       df_rt_asm_data_write
f6bd : 20fcf7           [ 6] 	jsr df_rt_asm_printOPR
f6c0 :                       df_rt_asm_data_write_skip1
f6c0 : a902             [ 2] 	lda #2
f6c2 : 25d1             [ 3] 	and df_asmopt
f6c4 : f017             [ 3] 	beq df_rt_asm_data_write_skip2
f6c6 : a5d4             [ 3] 	lda df_asmoprnd
f6c8 : a000             [ 2] 	ldy #0
f6ca : 91cf             [ 5] 	sta (df_asmpc),y
f6cc : c8               [ 2] 	iny
f6cd : a902             [ 2] 	lda #2
f6cf : c5d6             [ 3] 	cmp df_asmlen
f6d1 : d006             [ 3] 	bne df_rt_asm_data_write_hi
f6d3 : a5d5             [ 3] 	lda df_asmoprnd+1
f6d5 : d014             [ 3] 	bne df_rt_asm_data_write_err
f6d7 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
f6d9 :                       df_rt_asm_data_write_hi
f6d9 : a5d5             [ 3] 	lda df_asmoprnd+1
f6db : 91cf             [ 5] 	sta (df_asmpc),y
f6dd :                       df_rt_asm_data_write_skip2
f6dd : a4d6             [ 3] 	ldy df_asmlen
f6df : 88               [ 2] 	dey					; Add 1 less!
f6e0 : 98               [ 2] 	tya
f6e1 : 18               [ 2] 	clc
f6e2 : 65cf             [ 3] 	adc df_asmpc
f6e4 : 85cf             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f6e8 : e6d0             [ 5] 	inc df_asmpc+1
f6ea : 60               [ 6] 	rts
f6eb :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
f6ed :                       df_rt_asm_ds
f6ed : 20d8f7           [ 6] 	jsr df_rt_asm_printPC
f6f0 : 20f3f7           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
f6f3 : 20c1f8           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
f6f6 : 18               [ 2] 	clc
f6f7 : a5d4             [ 3] 	lda df_asmoprnd
f6f9 : 65cf             [ 3] 	adc df_asmpc
f6fb : 85cf             [ 3] 	sta df_asmpc
f6fd : a5d5             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  210
---------------------------------- bank1.s -----------------------------------

f6ff : 65d0             [ 3] 	adc df_asmpc+1
f701 : 85d0             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
f703 : a903             [ 2] 	lda #3
f705 : 85d6             [ 3] 	sta df_asmlen
f707 : 4cfcf7           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
f70a :                       df_rt_asm_mnem
f70a : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
f70b : e6be             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
f70d : 2044f8           [ 6] 	jsr df_rt_asm_addrmode
                             
f710 :                       df_rt_asm_mnem_try
f710 : a5d2             [ 3] 	lda df_asmadmd					; With the addressing mode
f712 : 20ccf8           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
f715 : c900             [ 2] 	cmp #AM_NONE					; Exists?
f717 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
f719 :                       df_rt_asm_check_alt
f719 : a6d2             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
f71b : bd21f9           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
f71e : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
f720 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
f722 : 20ccf8           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
f725 : c900             [ 2] 	cmp #AM_NONE					; this instruction
f727 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
f729 : c5d2             [ 3] 	cmp df_asmadmd					; Same as the original?
f72b : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
f72d :                       df_rt_asm_mnem_chk
f72d : 85d2             [ 3] 	sta df_asmadmd					; This is the final mode
f72f : aa               [ 2] 	tax								; Get the length
f730 : bd10f9           [ 4] 	lda df_asm_length,x
f733 : a6d5             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
f735 : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
f737 : c903             [ 2] 	cmp #3							; Else must be len 3?
f739 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
f73b :                       df_rt_asm_mnem_done
f73b : a6d2             [ 3] 	ldx df_asmadmd					; Get the final mode index
f73d : bd10f9           [ 4] 	lda df_asm_length,x				; Get the length
f740 : 85d6             [ 3] 	sta df_asmlen
f742 : a5d2             [ 3] 	lda df_asmadmd					; Get the final mode
f744 : 20ccf8           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
f747 : c8               [ 2] 	iny
f748 : b1b7             [ 5] 	lda (df_symtab),y
f74a : 85d3             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
f74c : 4c51f7           [ 3] 	jmp df_rt_asm_encode
                             	
f74f :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
AS65 Assembler for R6502 [1.42].                                     Page  211
---------------------------------- bank1.s -----------------------------------

f751 :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
f751 : a5d2             [ 3] 	lda df_asmadmd
f753 : c90f             [ 2] 	cmp #AM_REL
f755 : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
f757 : a5d5             [ 3] 	lda df_asmoprnd+1
f759 : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
f75b : 38               [ 2] 	sec
f75c : a5d4             [ 3] 	lda df_asmoprnd
f75e : e902             [ 2] 	sbc #2
f760 : 85d4             [ 3] 	sta df_asmoprnd
f762 : a5d5             [ 3] 	lda df_asmoprnd+1
f764 : e900             [ 2] 	sbc #0
f766 : 85d5             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
f768 : 38               [ 2] 	sec
f769 : a5d4             [ 3] 	lda df_asmoprnd
f76b : e5cf             [ 3] 	sbc df_asmpc
f76d : 85d4             [ 3] 	sta df_asmoprnd
f76f : a5d5             [ 3] 	lda df_asmoprnd+1
f771 : e5d0             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
f773 : a000             [ 2] 	ldy #0
f775 : 84d5             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
f777 : a8               [ 2] 	tay
f778 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
f77a : c9ff             [ 2] 	cmp #0xff
f77c : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
f77e : a5d4             [ 3] 	lda df_asmoprnd
f780 : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
f782 : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
f784 :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
f784 : a5d4             [ 3] 	lda df_asmoprnd
f786 : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
f788 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
f788 : c6d5             [ 5] 	dec df_asmoprnd+1
f78a :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
f78a : a902             [ 2] 	lda #0x02
f78c : 25d1             [ 3] 	and df_asmopt
f78e : f028             [ 3] 	beq df_rt_asm_encode_print
f790 : a000             [ 2] 	ldy #0
f792 : a5d3             [ 3] 	lda df_asmopcde
f794 : 91cf             [ 5] 	sta (df_asmpc),y
f796 : a5d6             [ 3] 	lda df_asmlen
f798 : c901             [ 2] 	cmp #1						; No operand
f79a : f01c             [ 3] 	beq df_rt_asm_encode_print
f79c : c903             [ 2] 	cmp #3						; Word operand
f79e : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
AS65 Assembler for R6502 [1.42].                                     Page  212
---------------------------------- bank1.s -----------------------------------

f7a0 : a5d5             [ 3] 	lda df_asmoprnd+1
f7a2 : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
f7a6 :                       df_rt_asm_encode_writebyte
f7a6 : c8               [ 2] 	iny 
f7a7 : a5d4             [ 3] 	lda df_asmoprnd
f7a9 : 91cf             [ 5] 	sta (df_asmpc),y
f7ab : 4cb8f7           [ 3] 	jmp df_rt_asm_encode_print
f7ae :                       df_rt_asm_encode_writeword
f7ae : c8               [ 2] 	iny 
f7af : a5d4             [ 3] 	lda df_asmoprnd
f7b1 : 91cf             [ 5] 	sta (df_asmpc),y
f7b3 : c8               [ 2] 	iny 
f7b4 : a5d5             [ 3] 	lda df_asmoprnd+1
f7b6 : 91cf             [ 5] 	sta (df_asmpc),y	
f7b8 :                       df_rt_asm_encode_print
f7b8 : 20c8f7           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
f7bb : 18               [ 2] 	clc
f7bc : a5cf             [ 3] 	lda df_asmpc
f7be : 65d6             [ 3] 	adc df_asmlen
f7c0 : 85cf             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f7c4 : e6d0             [ 5] 	inc df_asmpc+1
f7c6 : 18               [ 2] 	clc
f7c7 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
f7c8 :                       df_rt_asm_print_mmen
f7c8 : 20d8f7           [ 6] 	jsr df_rt_asm_printPC
f7cb : 20f3f7           [ 6] 	jsr df_rt_asm_printSPC
f7ce : 20e8f7           [ 6] 	jsr df_rt_asm_printOPC
f7d1 : 20f3f7           [ 6] 	jsr df_rt_asm_printSPC
f7d4 : 20fcf7           [ 6] 	jsr df_rt_asm_printOPR
f7d7 :                       df_rt_asm_print_rts			; Hopefully subs can get he
f7d7 : 60               [ 6] 	rts
                             
f7d8 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
f7d8 : a901             [ 2] 	lda #0x01
f7da : 25d1             [ 3] 	and df_asmopt
f7dc : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
f7de : a5d0             [ 3] 	lda df_asmpc+1
f7e0 : 20cac8           [ 6] 	jsr utilPrintA
f7e3 : a5cf             [ 3] 	lda df_asmpc
f7e5 : 4ccac8           [ 3] 	jmp utilPrintA
                             
f7e8 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
f7e8 : a901             [ 2] 	lda #0x01
f7ea : 25d1             [ 3] 	and df_asmopt
f7ec : f0e9             [ 3] 	beq df_rt_asm_print_rts
f7ee : a5d3             [ 3] 	lda df_asmopcde
f7f0 : 4ccac8           [ 3] 	jmp utilPrintA
                             
f7f3 :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
AS65 Assembler for R6502 [1.42].                                     Page  213
---------------------------------- bank1.s -----------------------------------

f7f3 : a901             [ 2] 	lda #0x01
f7f5 : 25d1             [ 3] 	and df_asmopt
f7f7 : f0de             [ 3] 	beq df_rt_asm_print_rts
f7f9 : 4cbac8           [ 3] 	jmp utilPrintSPC
                             	
f7fc :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
f7fc : a901             [ 2] 	lda #0x01
f7fe : 25d1             [ 3] 	and df_asmopt
f800 : f0d5             [ 4] 	beq df_rt_asm_print_rts	
f802 : a5d6             [ 3] 	lda df_asmlen				; check how may operand bytes
f804 : c901             [ 2] 	cmp #1						; if only opcode, done
f806 : f0cf             [ 4] 	beq df_rt_asm_print_rts	
f808 : c902             [ 2] 	cmp #2
f80a : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
f80c : a5d5             [ 3] 	lda df_asmoprnd+1
f80e : 20cac8           [ 6] 	jsr utilPrintA
f811 :                       df_rt_asm_printOPR_1
f811 : a5d4             [ 3] 	lda df_asmoprnd
f813 : 4ccac8           [ 3] 	jmp utilPrintA
                             
f816 :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
f816 : a901             [ 2] 	lda #0x01
f818 : 25d1             [ 3] 	and df_asmopt
f81a : f0bb             [ 4] 	beq df_rt_asm_print_rts
f81c : 4cc2c8           [ 3] 	jmp utilPrintCRLF
                             
f81f :                       df_rt_asm_printCH
f81f : 8539             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
f821 : a901             [ 2] 	lda #0x01
f823 : 25d1             [ 3] 	and df_asmopt
f825 : f0b0             [ 4] 	beq df_rt_asm_print_rts
f827 : a539             [ 3] 	lda tmp_d
f829 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
f82c :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
f82c : a901             [ 2] 	lda #0x01
f82e : 25d1             [ 3] 	and df_asmopt
f830 : f0a5             [ 4] 	beq df_rt_asm_print_rts
f832 : a5be             [ 3] 	lda df_exeoff
f834 : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
f83d : 20fee7           [ 6] 	jsr df_rt_list_line_only
f840 : 68               [ 4] 	pla
f841 : 85be             [ 3] 	sta df_exeoff
f843 : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
f844 :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
f844 : a900             [ 2] 	lda #AM_NONE
f846 : 85d2             [ 3] 	sta df_asmadmd
                             	; zero out the operand
AS65 Assembler for R6502 [1.42].                                     Page  214
---------------------------------- bank1.s -----------------------------------

f848 : a900             [ 2] 	lda #0
f84a : 85d4             [ 3] 	sta df_asmoprnd
f84c : 85d5             [ 3] 	sta df_asmoprnd+1
f84e : 2090e6           [ 6] 	jsr df_rt_eos			; End of statement?
f851 : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
f853 : 20d6dd           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
f856 : c923             [ 2] 	cmp #'#'				; Immediate?
f858 : f034             [ 3] 	beq df_rt_asm_AM_IMM
f85a : c928             [ 2] 	cmp #'('				; Indirect something?
f85c : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
f85e : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
f860 :                       df_rt_asm_AM_IMP
f860 : a90d             [ 2] 	lda #AM_IMP
f862 : 85d2             [ 3] 	sta df_asmadmd
f864 : 60               [ 6] 	rts
                             ; Process ABS or REL
f865 :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
f865 : 20c1f8           [ 6] 	jsr df_rt_asm_get_operand
                             
f868 : 2090e6           [ 6] 	jsr df_rt_eos			; End of statement?
f86b : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
f86d : c8               [ 2] 	iny						; Jump over ","
f86e : b1bc             [ 5] 	lda (df_currlin),y		; Load X or Y
f870 : c8               [ 2] 	iny						; Jump over index reg
f871 : 85be             [ 3] 	sta df_exeoff			; Save exe offset
f873 : c978             [ 2] 	cmp #'x'				; Indirect X?
f875 : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
f877 :                       df_rt_asm_AM_ABSY
f877 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
f879 : 85d2             [ 3] 	sta df_asmadmd
f87b : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
f87c :                       df_rt_asm_AM_ABS
f87c : a001             [ 2] 	ldy #1					; Check first addressing mode
f87e : b1b7             [ 5] 	lda (df_symtab),y
f880 : c90f             [ 2] 	cmp #AM_REL
f882 : f002             [ 3] 	beq df_rt_asm_AM_REL
f884 : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
f886 :                       df_rt_asm_AM_REL
f886 : 85d2             [ 3] 	sta df_asmadmd
f888 : 60               [ 6] 	rts
                             ; Process ABSX
f889 :                       df_rt_asm_AM_ABSX
f889 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
f88b : 85d2             [ 3] 	sta df_asmadmd
f88d : 60               [ 6] 	rts
                             ; Process Immediate
f88e :                       df_rt_asm_AM_IMM
                             	; skip over #
f88e : e6be             [ 5] 	inc df_exeoff
                             	; Get operand
f890 : 20c1f8           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
f893 : a90c             [ 2] 	lda #AM_IMM
f895 : 85d2             [ 3] 	sta df_asmadmd
f897 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  215
---------------------------------- bank1.s -----------------------------------

                             ; Process indirect
f898 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
f898 : e6be             [ 5] 	inc df_exeoff
                             	; Calculate the operand
f89a : 20c1f8           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
f89d : a4be             [ 3] 	ldy df_exeoff
f89f : b1bc             [ 5] 	lda (df_currlin),y
f8a1 : c929             [ 2] 	cmp #')'			; Could be IND or INDY
f8a3 : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
f8a5 : c8               [ 2] 	iny
f8a6 : c8               [ 2] 	iny
f8a7 : 84be             [ 3] 	sty df_exeoff
f8a9 : a908             [ 2] 	lda #AM_ZPINDX
f8ab : 85d2             [ 3] 	sta df_asmadmd
f8ad : 60               [ 6] 	rts
                             ; Pure indirect mode found
f8ae :                       df_rt_asm_AM_ZPINDORY
f8ae : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
f8b0 : c8               [ 2] 	iny
f8b1 : 84be             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
f8b3 : 2090e6           [ 6] 	jsr df_rt_eos			; End of statement?
f8b6 : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
f8b8 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
f8ba : c8               [ 2] 	iny
f8bb : c8               [ 2] 	iny
f8bc : 84be             [ 3] 	sty df_exeoff
f8be :                       df_rt_asm_AM_ZPIND
f8be : 85d2             [ 3] 	sta df_asmadmd
f8c0 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
f8c1 :                       df_rt_asm_get_operand
                             	; evaluate
f8c1 : 209ad9           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
f8c4 : 2002f3           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
f8c7 : 86d4             [ 3] 	stx df_asmoprnd
f8c9 : 85d5             [ 3] 	sta df_asmoprnd+1
f8cb : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
f8cc :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
f8cc : 8539             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
f8ce : a0ff             [ 2] 	ldy #0xff
f8d0 : a200             [ 2] 	ldx #0
f8d2 :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
f8d2 : c8               [ 2] 	iny
f8d3 : c8               [ 2] 	iny
                             	; if current index > num entries then error
AS65 Assembler for R6502 [1.42].                                     Page  216
---------------------------------- bank1.s -----------------------------------

f8d4 : 98               [ 2] 	tya
f8d5 : 38               [ 2] 	sec
f8d6 : e1b7             [ 6] 	sbc (df_symtab,x)
f8d8 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
f8da : b1b7             [ 5] 	lda (df_symtab),y
f8dc : c539             [ 3] 	cmp tmp_d
f8de : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
f8e0 : 60               [ 6] 	rts
f8e1 :                       df_rt_asm_find_addr_mode_err
f8e1 : a900             [ 2] 	lda #AM_NONE
f8e3 :                       df_rt_asm_skip_to_sym_done; Used by function belo
f8e3 : 60               [ 6] 	rts
                             
                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
f8e4 :                       df_rt_asm_skip_to_sym
f8e4 : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
f8e5 : a932             [ 2] 	lda #lo(df_asm_tokensyms)
f8e7 : 85b7             [ 3] 	sta df_symtab
f8e9 : a9f9             [ 2] 	lda #hi(df_asm_tokensyms)
f8eb : 85b8             [ 3] 	sta df_symtab+1
f8ed : a900             [ 2] 	lda #0
f8ef : 85b9             [ 3] 	sta df_symoff
f8f1 : a8               [ 2] 	tay
f8f2 :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
f8f2 : b1b7             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
f8f4 : c920             [ 2] 	cmp #' '
f8f6 : 9009             [ 4] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
f8fe : 4cf2f8           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
f901 :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
f901 : ca               [ 2] 	dex
f902 : f0df             [ 4] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
f904 : 38               [ 2] 	sec
f905 : 65b7             [ 3] 	adc df_symtab
f907 : 85b7             [ 3] 	sta df_symtab
                             	_bcc 2
                             
f90b : e6b8             [ 5] 	inc df_symtab+1
f90d : 4cf2f8           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
f910 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat\asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
AS65 Assembler for R6502 [1.42].                                     Page  217
---------------------------------- bank1.s -----------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
f910 :                       df_asm_length
f910 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
f921 :                       df_asm_altaddrmode
f921 : 00                    	db AM_NONE		;AM_NONE	= 0
f922 : 00                    	db AM_NONE		;AM_ABS	 	= 1
f923 : 00                    	db AM_NONE		;AM_ABSX	= 2
f924 : 00                    	db AM_NONE		;AM_ABSY	= 3
f925 : 01                    	db AM_ABS		;AM_ZP		= 4
f926 : 02                    	db AM_ABSX		;AM_ZPX		= 5
f927 : 03                    	db AM_ABSY		;AM_ZPY		= 6
f928 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
f929 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
f92a : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
f92b : 00                    	db AM_NONE		;AM_ABSIND	= 10
f92c : 00                    	db AM_NONE		;AM_ABSINDX	= 11
f92d : 00                    	db AM_NONE		;AM_IMM		= 12
f92e : 00                    	db AM_NONE		;AM_ACC		= 13
f92f : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
f930 : 0f                    	db AM_REL		;AM_REL		= 15
f931 : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
f932 :                       df_asm_tokensyms
                             	;* Start with directives
f932 : 2e6f726702            	db	".org",		1*2
f937 : 1000                  	db	AM_DIR,		0x00
f939 : 2e6f707402            	db	".opt",		1*2
f93e : 1000                  	db	AM_DIR,		0x00
f940 : 2e646202              	db	".db",		1*2
f944 : 1000                  	db	AM_DIR,		0x00
f946 : 2e647702              	db	".dw",		1*2
f94a : 1000                  	db	AM_DIR,		0x00
f94c : 2e647302              	db	".ds",		1*2
f950 : 1000                  	db	AM_DIR,		0x00	
                             
f952 : 61646312              	db	"adc",		9*2
f956 : 0c69                  	db	AM_IMM,		0x69
f958 : 0465                  	db	AM_ZP,		0x65
f95a : 0575                  	db	AM_ZPX,		0x75
f95c : 016d                  	db	AM_ABS,		0x6d
f95e : 027d                  	db	AM_ABSX,	0x7d
f960 : 0379                  	db	AM_ABSY,	0x79
f962 : 0861                  	db	AM_ZPINDX,	0x61
f964 : 0971                  	db	AM_ZPINDY,	0x71
f966 : 0772                  	db	AM_ZPIND,	0x72
AS65 Assembler for R6502 [1.42].                                     Page  218
---------------------------------- bank1.s -----------------------------------

                             	
f968 : 616e6412              	db	"and",		9*2
f96c : 0c29                  	db	AM_IMM,		0x29
f96e : 0425                  	db	AM_ZP,		0x25
f970 : 0535                  	db	AM_ZPX,		0x35
f972 : 012d                  	db	AM_ABS,		0x2d
f974 : 023d                  	db	AM_ABSX,	0x3d
f976 : 0339                  	db	AM_ABSY,	0x39
f978 : 0821                  	db	AM_ZPINDX,	0x21
f97a : 0931                  	db	AM_ZPINDY,	0x31
f97c : 0732                  	db	AM_ZPIND,	0x32
                             
f97e : 636d7012              	db	"cmp",		9*2
f982 : 0cc9                  	db	AM_IMM,		0xc9
f984 : 04c5                  	db	AM_ZP,		0xc5
f986 : 05d5                  	db	AM_ZPX,		0xd5
f988 : 01cd                  	db	AM_ABS,		0xcd
f98a : 02dd                  	db	AM_ABSX,	0xdd
f98c : 03d9                  	db	AM_ABSY,	0xd9
f98e : 08c1                  	db	AM_ZPINDX,	0xc1
f990 : 09d1                  	db	AM_ZPINDY,	0xd1
f992 : 07d2                  	db	AM_ZPIND,	0xd2
                             
f994 : 656f7212              	db	"eor",		9*2
f998 : 0c49                  	db	AM_IMM,		0x49
f99a : 0445                  	db	AM_ZP,		0x45
f99c : 0555                  	db	AM_ZPX,		0x55
f99e : 014d                  	db	AM_ABS,		0x4d
f9a0 : 025d                  	db	AM_ABSX,	0x5d
f9a2 : 0359                  	db	AM_ABSY,	0x59
f9a4 : 0841                  	db	AM_ZPINDX,	0x41
f9a6 : 0951                  	db	AM_ZPINDY,	0x51
f9a8 : 0752                  	db	AM_ZPIND,	0x52
                             
f9aa : 6c646112              	db	"lda",		9*2
f9ae : 0ca9                  	db	AM_IMM,		0xa9
f9b0 : 04a5                  	db	AM_ZP,		0xa5
f9b2 : 05b5                  	db	AM_ZPX,		0xb5
f9b4 : 01ad                  	db	AM_ABS,		0xad
f9b6 : 02bd                  	db	AM_ABSX,	0xbd
f9b8 : 03b9                  	db	AM_ABSY,	0xb9
f9ba : 08a1                  	db	AM_ZPINDX,	0xa1
f9bc : 09b1                  	db	AM_ZPINDY,	0xb1
f9be : 07b2                  	db	AM_ZPIND,	0xb2
                             
f9c0 : 6f726112              	db	"ora",		9*2
f9c4 : 0c09                  	db	AM_IMM,		0x09
f9c6 : 0405                  	db	AM_ZP,		0x05
f9c8 : 0515                  	db	AM_ZPX,		0x15
f9ca : 010d                  	db	AM_ABS,		0x0d
f9cc : 021d                  	db	AM_ABSX,	0x1d
f9ce : 0319                  	db	AM_ABSY,	0x19
f9d0 : 0801                  	db	AM_ZPINDX,	0x01
f9d2 : 0911                  	db	AM_ZPINDY,	0x11
f9d4 : 0712                  	db	AM_ZPIND,	0x12
                             
f9d6 : 73626312              	db	"sbc",		9*2
f9da : 0ce9                  	db	AM_IMM,		0xe9
f9dc : 04e5                  	db	AM_ZP,		0xe5
f9de : 05f5                  	db	AM_ZPX,		0xf5
f9e0 : 01ed                  	db	AM_ABS,		0xed
f9e2 : 02fd                  	db	AM_ABSX,	0xfd
AS65 Assembler for R6502 [1.42].                                     Page  219
---------------------------------- bank1.s -----------------------------------

f9e4 : 03f9                  	db	AM_ABSY,	0xf9
f9e6 : 08e1                  	db	AM_ZPINDX,	0xe1
f9e8 : 09f1                  	db	AM_ZPINDY,	0xf1
f9ea : 07f2                  	db	AM_ZPIND,	0xf2
                             
f9ec : 73746110              	db	"sta",		8*2
f9f0 : 0485                  	db	AM_ZP,		0x85
f9f2 : 0595                  	db	AM_ZPX,		0x95
f9f4 : 018d                  	db	AM_ABS,		0x8d
f9f6 : 029d                  	db	AM_ABSX,	0x9d
f9f8 : 0399                  	db	AM_ABSY,	0x99
f9fa : 0881                  	db	AM_ZPINDX,	0x81
f9fc : 0991                  	db	AM_ZPINDY,	0x91
f9fe : 0792                  	db	AM_ZPIND,	0x92
                             
fa00 : 61736c0a              	db	"asl",		5*2
fa04 : 0d0a                  	db	AM_IMP,		0x0a
fa06 : 0406                  	db	AM_ZP,		0x06
fa08 : 0516                  	db	AM_ZPX,		0x16
fa0a : 010e                  	db	AM_ABS,		0x0e
fa0c : 021e                  	db	AM_ABSX,	0x1e
fa0e : 6465630a              	db	"dec",		5*2
fa12 : 0d3a                  	db	AM_IMP,		0x3a
fa14 : 04c6                  	db	AM_ZP,		0xc6
fa16 : 05d6                  	db	AM_ZPX,		0xd6
fa18 : 01ce                  	db	AM_ABS,		0xce
fa1a : 02de                  	db	AM_ABSX,	0xde
fa1c : 696e630a              	db	"inc",		5*2
fa20 : 0d1a                  	db	AM_IMP,		0x1a
fa22 : 04e6                  	db	AM_ZP,		0xe6
fa24 : 05f6                  	db	AM_ZPX,		0xf6
fa26 : 01ee                  	db	AM_ABS,		0xee
fa28 : 02fe                  	db	AM_ABSX,	0xfe
fa2a : 6c73720a              	db	"lsr",		5*2
fa2e : 0d4a                  	db	AM_IMP,		0x4a
fa30 : 0446                  	db	AM_ZP,		0x46
fa32 : 0556                  	db	AM_ZPX,		0x56
fa34 : 014e                  	db	AM_ABS,		0x4e
fa36 : 025e                  	db	AM_ABSX,	0x5e
fa38 : 726f6c0a              	db	"rol",		5*2
fa3c : 0d2a                  	db	AM_IMP,		0x2a
fa3e : 0426                  	db	AM_ZP,		0x26
fa40 : 0536                  	db	AM_ZPX,		0x36
fa42 : 012e                  	db	AM_ABS,		0x2e
fa44 : 023e                  	db	AM_ABSX,	0x3e
fa46 : 726f720a              	db	"ror",		5*2
fa4a : 0d6a                  	db	AM_IMP,		0x6a
fa4c : 0466                  	db	AM_ZP,		0x66
fa4e : 0576                  	db	AM_ZPX,		0x76
fa50 : 016e                  	db	AM_ABS,		0x6e
fa52 : 027e                  	db	AM_ABSX,	0x7e
                             
fa54 : 6269740a              	db	"bit",		5*2
fa58 : 0c89                  	db	AM_IMM,		0x89
fa5a : 0424                  	db	AM_ZP,		0x24
fa5c : 0534                  	db	AM_ZPX,		0x34
fa5e : 012c                  	db	AM_ABS,		0x2c
fa60 : 023c                  	db	AM_ABSX,	0x3c
                             	
fa62 : 62726b02              	db	"brk",		1*2
fa66 : 0d00                  	db	AM_IMP,		0x00
fa68 : 73747002              	db	"stp",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  220
---------------------------------- bank1.s -----------------------------------

fa6c : 0ddb                  	db	AM_IMP,		0xdb
fa6e : 77616902              	db	"wai",		1*2
fa72 : 0dcb                  	db	AM_IMP,		0xcb
                             	
fa74 : 636c6302              	db	"clc",		1*2
fa78 : 0d18                  	db	AM_IMP,		0x18
fa7a : 636c6402              	db	"cld",		1*2
fa7e : 0dd8                  	db	AM_IMP,		0xd8
fa80 : 636c6902              	db	"cli",		1*2
fa84 : 0d58                  	db	AM_IMP,		0x58
fa86 : 636c7602              	db	"clv",		1*2
fa8a : 0db8                  	db	AM_IMP,		0xb8
fa8c : 73656302              	db	"sec",		1*2
fa90 : 0d38                  	db	AM_IMP,		0x38
fa92 : 73656402              	db	"sed",		1*2
fa96 : 0df8                  	db	AM_IMP,		0xf8
fa98 : 73656902              	db	"sei",		1*2
fa9c : 0d78                  	db	AM_IMP,		0x78
                             	
fa9e : 63707806              	db	"cpx",		3*2
faa2 : 0ce0                  	db	AM_IMM,		0xe0
faa4 : 04e4                  	db	AM_ZP,		0xe4
faa6 : 01ec                  	db	AM_ABS,		0xec
faa8 : 63707906              	db	"cpy",		3*2
faac : 0cc0                  	db	AM_IMM,		0xc0
faae : 04c4                  	db	AM_ZP,		0xc4
fab0 : 01cc                  	db	AM_ABS,		0xcc
fab2 : 64657802              	db	"dex",		1*2
fab6 : 0dca                  	db	AM_IMP,		0xca
fab8 : 64657902              	db	"dey",		1*2
fabc : 0d88                  	db	AM_IMP,		0x88
fabe : 696e7802              	db	"inx",		1*2
fac2 : 0de8                  	db	AM_IMP,		0xe8
fac4 : 696e7902              	db	"iny",		1*2
fac8 : 0dc8                  	db	AM_IMP,		0xc8
faca : 6c64780a              	db	"ldx",		5*2
face : 0ca2                  	db	AM_IMM,		0xa2
fad0 : 04a6                  	db	AM_ZP,		0xa6
fad2 : 06b6                  	db	AM_ZPY,		0xb6
fad4 : 01ae                  	db	AM_ABS,		0xae
fad6 : 03be                  	db	AM_ABSY,	0xbe
fad8 : 6c64790a              	db	"ldy",		5*2
fadc : 0ca0                  	db	AM_IMM,		0xa0
fade : 04a4                  	db	AM_ZP,		0xa4
fae0 : 05b4                  	db	AM_ZPX,		0xb4
fae2 : 01ac                  	db	AM_ABS,		0xac
fae4 : 02bc                  	db	AM_ABSX,	0xbc
fae6 : 73747806              	db	"stx",		3*2
faea : 0486                  	db	AM_ZP,		0x86
faec : 0696                  	db	AM_ZPY,		0x96
faee : 018e                  	db	AM_ABS,		0x8e
faf0 : 73747906              	db	"sty",		3*2
faf4 : 0484                  	db	AM_ZP,		0x84
faf6 : 0594                  	db	AM_ZPX,		0x94
faf8 : 018c                  	db	AM_ABS,		0x8c
fafa : 73747a08              	db	"stz",		4*2
fafe : 0464                  	db	AM_ZP,		0x64
fb00 : 0574                  	db	AM_ZPX,		0x74
fb02 : 019c                  	db	AM_ABS,		0x9c
fb04 : 029e                  	db	AM_ABSX,	0x9e
                             	
                             
AS65 Assembler for R6502 [1.42].                                     Page  221
---------------------------------- bank1.s -----------------------------------

fb06 : 62636302              	db	"bcc",		1*2
fb0a : 0f90                  	db	AM_REL,		0x90
fb0c : 62637302              	db	"bcs",		1*2
fb10 : 0fb0                  	db	AM_REL,		0xb0
fb12 : 62657102              	db	"beq",		1*2
fb16 : 0ff0                  	db	AM_REL,		0xf0
fb18 : 626d6902              	db	"bmi",		1*2
fb1c : 0f30                  	db	AM_REL,		0x30
fb1e : 626e6502              	db	"bne",		1*2
fb22 : 0fd0                  	db	AM_REL,		0xd0
fb24 : 62706c02              	db	"bpl",		1*2
fb28 : 0f10                  	db	AM_REL,		0x10
fb2a : 62726102              	db	"bra",		1*2
fb2e : 0f80                  	db	AM_REL,		0x80
fb30 : 62766302              	db	"bvc",		1*2
fb34 : 0f50                  	db	AM_REL,		0x50
fb36 : 62767302              	db	"bvs",		1*2
fb3a : 0f70                  	db	AM_REL,		0x70
fb3c : 6a6d7006              	db	"jmp",		3*2
fb40 : 014c                  	db	AM_ABS,		0x4c
fb42 : 0a6c                  	db	AM_ABSIND,	0x6c
fb44 : 0b7c                  	db	AM_ABSINDX,	0x7c
fb46 : 6a737202              	db	"jsr",		1*2
fb4a : 0120                  	db	AM_ABS,		0x20
                             	
fb4c : 6e6f7002              	db	"nop",		1*2
fb50 : 0dea                  	db	AM_IMP,		0xea
fb52 : 70686102              	db	"pha",		1*2
fb56 : 0d48                  	db	AM_IMP,		0x48
fb58 : 70687002              	db	"php",		1*2
fb5c : 0d08                  	db	AM_IMP,		0x08
fb5e : 70687802              	db	"phx",		1*2
fb62 : 0dda                  	db	AM_IMP,		0xda
fb64 : 70687902              	db	"phy",		1*2
fb68 : 0d5a                  	db	AM_IMP,		0x5a
fb6a : 706c6102              	db	"pla",		1*2
fb6e : 0d68                  	db	AM_IMP,		0x68
fb70 : 706c7002              	db	"plp",		1*2
fb74 : 0d28                  	db	AM_IMP,		0x28
fb76 : 706c7802              	db	"plx",		1*2
fb7a : 0dfa                  	db	AM_IMP,		0xfa
fb7c : 706c7902              	db	"ply",		1*2
fb80 : 0d7a                  	db	AM_IMP,		0x7a
fb82 : 72746902              	db	"rti",		1*2
fb86 : 0d40                  	db	AM_IMP,		0x40
fb88 : 72747302              	db	"rts",		1*2
fb8c : 0d60                  	db	AM_IMP,		0x60
fb8e : 74617802              	db	"tax",		1*2
fb92 : 0daa                  	db	AM_IMP,		0xaa
fb94 : 74617902              	db	"tay",		1*2
fb98 : 0da8                  	db	AM_IMP,		0xa8
fb9a : 74737802              	db	"tsx",		1*2
fb9e : 0dba                  	db	AM_IMP,		0xba
fba0 : 74786102              	db	"txa",		1*2
fba4 : 0d8a                  	db	AM_IMP,		0x8a
fba6 : 74787302              	db	"txs",		1*2
fbaa : 0d9a                  	db	AM_IMP,		0x9a
fbac : 74796102              	db	"tya",		1*2
fbb0 : 0d98                  	db	AM_IMP,		0x98
                             	
fbb2 : 74726204              	db	"trb",		2*2
fbb6 : 0414                  	db	AM_ZP,		0x14
AS65 Assembler for R6502 [1.42].                                     Page  222
---------------------------------- bank1.s -----------------------------------

fbb8 : 011c                  	db	AM_ABS,		0x1c
fbba : 74736204              	db	"tsb",		2*2
fbbe : 0404                  	db	AM_ZP,		0x04
fbc0 : 010c                  	db	AM_ABS,		0x0c
                             	
fbc2 : 6262723002            	db	"bbr0",		1*2
fbc7 : 0f0f                  	db	AM_REL,		0x0f
fbc9 : 6262723102            	db	"bbr1",		1*2
fbce : 0f1f                  	db	AM_REL,		0x1f
fbd0 : 6262723202            	db	"bbr2",		1*2
fbd5 : 0f2f                  	db	AM_REL,		0x2f
fbd7 : 6262723302            	db	"bbr3",		1*2
fbdc : 0f3f                  	db	AM_REL,		0x3f
fbde : 6262723402            	db	"bbr4",		1*2
fbe3 : 0f4f                  	db	AM_REL,		0x4f
fbe5 : 6262723502            	db	"bbr5",		1*2
fbea : 0f5f                  	db	AM_REL,		0x5f
fbec : 6262723602            	db	"bbr6",		1*2
fbf1 : 0f6f                  	db	AM_REL,		0x6f
fbf3 : 6262723702            	db	"bbr7",		1*2
fbf8 : 0f7f                  	db	AM_REL,		0x7f
fbfa : 6262733002            	db	"bbs0",		1*2
fbff : 0f8f                  	db	AM_REL,		0x8f
fc01 : 6262733102            	db	"bbs1",		1*2
fc06 : 0f9f                  	db	AM_REL,		0x9f
fc08 : 6262733202            	db	"bbs2",		1*2
fc0d : 0faf                  	db	AM_REL,		0xaf
fc0f : 6262733302            	db	"bbs3",		1*2
fc14 : 0fbf                  	db	AM_REL,		0xbf
fc16 : 6262733402            	db	"bbs4",		1*2
fc1b : 0fcf                  	db	AM_REL,		0xcf
fc1d : 6262733502            	db	"bbs5",		1*2
fc22 : 0fdf                  	db	AM_REL,		0xdf
fc24 : 6262733602            	db	"bbs6",		1*2
fc29 : 0fef                  	db	AM_REL,		0xef
fc2b : 6262733702            	db	"bbs7",		1*2
fc30 : 0fff                  	db	AM_REL,		0xff
fc32 : 726d623002            	db	"rmb0",		1*2
fc37 : 0f07                  	db	AM_REL,		0x07
fc39 : 726d623102            	db	"rmb1",		1*2
fc3e : 0f17                  	db	AM_REL,		0x17
fc40 : 726d623202            	db	"rmb2",		1*2
fc45 : 0f27                  	db	AM_REL,		0x27
fc47 : 726d623302            	db	"rmb3",		1*2
fc4c : 0f37                  	db	AM_REL,		0x37
fc4e : 726d623402            	db	"rmb4",		1*2
fc53 : 0f47                  	db	AM_REL,		0x47
fc55 : 726d623502            	db	"rmb5",		1*2
fc5a : 0f57                  	db	AM_REL,		0x57
fc5c : 726d623602            	db	"rmb6",		1*2
fc61 : 0f67                  	db	AM_REL,		0x67
fc63 : 726d623702            	db	"rmb7",		1*2
fc68 : 0f77                  	db	AM_REL,		0x77
fc6a : 736d623002            	db	"smb0",		1*2
fc6f : 0f87                  	db	AM_REL,		0x87
fc71 : 736d623102            	db	"smb1",		1*2
fc76 : 0f97                  	db	AM_REL,		0x97
fc78 : 736d623202            	db	"smb2",		1*2
fc7d : 0fa7                  	db	AM_REL,		0xa7
fc7f : 736d623302            	db	"smb3",		1*2
fc84 : 0fb7                  	db	AM_REL,		0xb7
fc86 : 736d623402            	db	"smb4",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  223
---------------------------------- bank1.s -----------------------------------

fc8b : 0fc7                  	db	AM_REL,		0xc7
fc8d : 736d623502            	db	"smb5",		1*2
fc92 : 0fd7                  	db	AM_REL,		0xd7
fc94 : 736d623602            	db	"smb6",		1*2
fc99 : 0fe7                  	db	AM_REL,		0xe7
fc9b : 736d623702            	db	"smb7",		1*2
fca0 : 0ff7                  	db	AM_REL,		0xf7
                             	
                             	;* Terminates with a zero
fca2 : 00                    	db	0
                             
                             	include	"dflat\asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
fca3 :                       df_tk_asm_tokenjmp
fca3 : 78d7                  	dw	df_tk_asm_org
fca5 : 78d7                  	dw	df_tk_asm_opt
fca7 : c3d6                  	dw	df_tk_asm_db
fca9 : c3d6                  	dw	df_tk_asm_dw
fcab : 78d7                  	dw	df_tk_asm_ds
                             
fcad :                       df_rt_asm_tokenjmp
fcad : 55f6                  	dw	df_rt_asm_org
fcaf : 67f6                  	dw	df_rt_asm_opt
fcb1 : 6ff6                  	dw	df_rt_asm_db
fcb3 : 72f6                  	dw	df_rt_asm_dw
fcb5 : edf6                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fcb7 :                       asm_init
                             	; Zero the PC
AS65 Assembler for R6502 [1.42].                                     Page  224
---------------------------------- bank1.s -----------------------------------

fcb7 : 64cf             [ 3] 	stz df_asmpc
fcb9 : 64d0             [ 3] 	stz df_asmpc+1
                             	; Zero the option
fcbb : 64d1             [ 3] 	stz df_asmopt
fcbd : 60               [ 6] 	rts
                             	
fcbe :                       mod_sz_asm_e
                             
                             
                             	; End of Code
fcbe :                       _code_end
fcbe :                       _bank1_end
                             	
                             
No errors in pass 2.
Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
