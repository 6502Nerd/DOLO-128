AS65 Assembler for R6502 [1.42].                                     Page    1
---------------------------------- bank1.s -----------------------------------

13572 lines read, no errors in pass 1.
c000 =                       _bank1_start=0xc000
                             	include "kernel\kernel.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  KERNEL.S
                             ;*	The 'kernel' routine includes code and data wh
                             ;* 	be in every ROM bank.  In the auto-generated 
                             ;*  files, the kernel is added before the bank sp
                             ;*	code.  See bank0.s as an example.
                             ;*
                             ;************************************************
                             
                             ;* Include all definition and code files in the r
                             	include "inc\includes.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INCLUDES.S
                             ;*  Main include file for key definitions and mac
                             ;*  Many of the settings here are exremely machin
                             ;*  Defines : IO block addresses, VIA port usage,
                             ;*  settings, useful macros, sound chip registers
                             ;*  VDP registers, ACIA registers.
                             ;*
                             ;************************************************
                             
                             ;* The IO block is at 0x04000 and decodes up to
                             ;* eight IO addresses, at 0x0080 intervals
                             ;* All eight are not used at the present time:
                             ;* - 0 : VIA 1 (Keyboard)
                             ;* - 1 : VIA 2 (Sound and SD card interface)
                             ;* - 2 : VDP (Video)
                             ;* - 3 : ACIA (Serial)
                             ;* - 4 : RTC (DS12887 real time clock + RAM)
0400 =                       IO_0		= 0x0400
0480 =                       IO_1		= 0x0480
0500 =                       IO_2		= 0x0500
0580 =                       IO_3		= 0x0580
0600 =                       IO_4		= 0x0600
0680 =                       IO_5		= 0x0680
0700 =                       IO_6		= 0x0700
0780 =                       IO_7		= 0x0780
                             
                             ;* VDP is accessed through IO_2
0500 =                       VDP_MODE0		= IO_2
0501 =                       VDP_MODE1		= IO_2+1
0501 =                       VDP_STATUS		= IO_2+1
0501 =                       VDP_ADDR		= IO_2+1
0500 =                       VDP_VRAM		= IO_2
0001 =                       VDP_SHORTDELAY	= 1
AS65 Assembler for R6502 [1.42].                                     Page    2
---------------------------------- bank1.s -----------------------------------

0003 =                       VDP_LONGDELAY 	= 3
0010 =                       VDP_FLASH		= 0x10				;* Must be a power of 2 *
                             
                             ;* This structure defines the key information
                             ;* kept about the VDP current mode
0000 =                       	struct vdp_addr_struct
0000 =                       	dw vdp_addr_nme				;* Address of name table
0002 =                       	dw vdp_addr_col				;* Address of colour table
0004 =                       	dw vdp_addr_pat				;* Address of pattern table
0006 =                       	dw vdp_addr_spa				;* Address of sprite pattern 
0008 =                       	dw vdp_addr_spp				;* Address of sprite position
000a =                       	db vdp_bord_col				;* Value of border colour
000b =                       	db vdp_gmode				;* Graphics mode 0,1,2 or 0x80 (
                             	end struct
                             
                             ;* Standard definitions of 6522 registers
                             ;* As found in the datasheets
0000 =                       PRB			= 0x00
0001 =                       PRA			= 0x01
0002 =                       DDRB		= 0x02
0003 =                       DDRA		= 0x03
0004 =                       T1CL		= 0x04
0005 =                       T1CH		= 0x05
0006 =                       T1LL		= 0x06
0007 =                       T1LH		= 0x07
0008 =                       T2CL		= 0x08
0009 =                       T2CH		= 0x09
000a =                       SR			= 0x0a
000b =                       ACR			= 0x0b
000c =                       PCR			= 0x0c
000d =                       IFR			= 0x0d
000e =                       IER			= 0x0e
000f =                       PRAH		= 0x0f
                             
0001 =                       IFR_CA2		= 0x01
0002 =                       IFR_CA1		= 0x02
                             
                             ;* AY-3-8910 definitions
                             ;* The sound chip is accessed through VIA 2
0481 =                       SND_ADBUS	= IO_1+PRA
0480 =                       SND_MODE	= IO_1+PRB
                             
0040 =                       SND_SELREAD			= 0x40
0002 =                       SND_SELWRITE		= 0x02
0042 =                       SND_SELSETADDR		= (SND_SELREAD|SND_SELWRITE)
00bd =                       SND_DESELECT_MASK	= (0xff-SND_SELREAD-SND_SELWRIT
                             
0000 =                       SND_REG_CHAPL	= 0x00
0001 =                       SND_REG_CHAPH	= 0x01
0002 =                       SND_REG_CHBPL	= 0x02
0003 =                       SND_REG_CHBPH	= 0x03
0004 =                       SND_REG_CHCPL	= 0x04
0005 =                       SND_REG_CHCPH	= 0x05
0006 =                       SND_REG_CHNP	= 0x06
0007 =                       SND_REG_CTL		= 0x07
0008 =                       SND_REG_CHAVOL	= 0x08
0009 =                       SND_REG_CHBVOL	= 0x09
000a =                       SND_REG_CHBVOL	= 0x0a
000b =                       SND_REG_ENVPL	= 0x0b
000c =                       SND_REG_ENVPH	= 0x0c
000d =                       SND_REG_ENVCYC	= 0x0d
                             
AS65 Assembler for R6502 [1.42].                                     Page    3
---------------------------------- bank1.s -----------------------------------

000e =                       SND_REG_IOA	= 0x0e
000f =                       SND_REG_IOB	= 0x0f
                             
                             ;* 6551 ACIA definitions
                             ;* As found in the datasheets
0580 =                       SER_DATA	= (IO_3+0)
0581 =                       SER_STATUS	= (IO_3+1)
0581 =                       SER_RESET	= (IO_3+1)
0582 =                       SER_CMD		= (IO_3+2)
0583 =                       SER_CTL		= (IO_3+3)
                             
0080 =                       SER_IRQ		= 0x80
0040 =                       SER_DSRB	= 0x40
0020 =                       SER_DCDB	= 0x20
0010 =                       SER_TDRE	= 0x10
0008 =                       SER_RDRF	= 0x08
0004 =                       SER_OVRN	= 0x04
0002 =                       SER_FE		= 0x02
0001 =                       SER_PE		= 0x01
0080 =                       SER_SBN		= 0x80
0040 =                       SER_WL1		= 0x40
0020 =                       SER_WL0		= 0x20
0060 =                       SER_WL		= (SER_WL1|SER_WL0)
0010 =                       SER_RCS		= 0x10
0008 =                       SER_SBR3	= 0x08
0004 =                       SER_SBR2	= 0x04
0002 =                       SER_SBR1	= 0x02
0001 =                       SER_SBR0	= 0x01
000f =                       SER_SBR		= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0)
000f =                       SER_19200B	= (SER_SBR3|SER_SBR2|SER_SBR1|SER_SBR0
000e =                       SER_9600B	= (SER_SBR3|SER_SBR2|SER_SBR1)
0080 =                       SER_PMC1	= 0x80
0040 =                       SER_PMC0	= 0x40
00c0 =                       SER_PMC		= (SER_PMC1|SER_PMC0)
0020 =                       SER_PME		= 0x20
0010 =                       SER_REM		= 0x10
0008 =                       SER_TIC1	= 0x08
0004 =                       SER_TIC0	= 0x04
000c =                       SER_TIC		= (SER_TIC1|SER_TIC0)
0002 =                       SER_IRD		= 0x02
0001 =                       SER_DTR		= 0x01
                             
                             ;* BBC keyboard definitions
                             ;* The keyboard is accessed through VIA 1
                             ;* Port A - all output
0001 =                       KB_ROWA		= 0x01
0002 =                       KB_ROWB		= 0x02
0004 =                       KB_ROWC		= 0x04
0008 =                       KB_COLA		= 0x08
0010 =                       KB_COLB		= 0x10
0020 =                       KB_COLC		= 0x20
0040 =                       KB_COLD		= 0x40
0080 =                       KB_EN		= 0x80
                             ;* Port B
0001 =                       KB_W		= 0x01			; Input - BBC keyboard hardware se
0002 =                       KB_LED0		= 0x02			; Output - led 0
0004 =                       KB_LED1		= 0x04			; Output - led 1
0008 =                       KB_LED2		= 0x08			; Output - led 2
0001 =                       KB_CAPSLK	= 0x01			; Id of Caps Lock - maps to Le
0002 =                       KB_SHIFTLK	= 0x02			; Id of Shift lock - maps to 
                             
0003 =                       KB_REP_TIM	= 3				; Number of VB periods for the 
AS65 Assembler for R6502 [1.42].                                     Page    4
---------------------------------- bank1.s -----------------------------------

0014 =                       KB_REP_DEL	= 20			; Number of VB periods before r
0002 =                       KB_DEBOUNCE	= 2				; Number of VB periods before 
                             
0001 =                       UTF_SOH		= 0x01
0003 =                       UTF_ETX		= 0x03			; Break character
0007 =                       UTF_BEL		= 0x07
0008 =                       CRSR_LEFT	= 0x08
0009 =                       CRSR_RIGHT	= 0x09
000a =                       CRSR_DOWN	= 0x0a
000b =                       CRSR_UP		= 0x0b
0006 =                       UTF_ACK		= 0x06			; Used for the copy key in this
000c =                       UTF_FF		= 0x0c
000d =                       UTF_CR		= 0x0d
0015 =                       UTF_NACK	= 0x15
0017 =                       UTF_ETB		= 0x17
001a =                       UTF_BRK		= 0x1a			; Debug - drop in to monitor
007f =                       UTF_DEL		= 0x7f
0020 =                       UTF_SPECIAL = 0x20
                             
                             ;* SD Card interface definitions
                             ;* The card is accessed through port B of VIA 2
0001 =                       SD_CLK		= 0x01			; Clock output to SD card
0004 =                       SD_CD		= 0x04			; Card detect input
0008 =                       SD_CS		= 0x08			; Card select output
0010 =                       SD_DI		= 0x10			; Data output from VIA to SD Card
0080 =                       SD_DO		= 0x80			; Data input to VIA from SD card
                             
0010 =                       SD_MOSI		= SD_DI
0080 =                       SD_MISO		= SD_DO
0480 =                       SD_REG		= IO_1+PRB
                             
0000 =                       CMD_ERR_NOERROR			= 0x00
0001 =                       CMD_ERR_NOTFOUND		= 0x01
0002 =                       CMD_ERR_PARM			= 0x02
0003 =                       CMD_ERR_VAL				= 0x03
                             
                             ;* Memory management definitions
                             ;* Y1,Y0 = ROM bank selection CIA1 PORTB
0080 =                       MM_Y1					= 0x80
0040 =                       MM_Y0					= 0x40
                             ;* X1,X0 = RAM bank selection CIA1 PORTB
0020 =                       MM_X1					= 0x20
0010 =                       MM_X0					= 0x10
                             ;* DIS = ROM disable *CIA2* PORTB
0020 =                       MM_DIS					= 0x20
                             
                             ;* Number formats for conversion routines
0000 =                       NUM_ANY		= 0x00
0001 =                       NUM_DEC		= 0x01
0002 =                       NUM_HEX		= 0x02
0003 =                       NUM_BIN		= 0x03
                             
                             	
                             ;* SD Card Master Boot Record (MBR) definitions
                             ;* The MBR contains the essential information
                             ;* needed to access the data on the card
                             ;* MBR is usually sector 0, but not always
                             ;* however the card I am using does work ok.
0000 =                       MBR_Code				=	0x0000
0003 =                       MBR_OEMName				=	0x0003
000b =                       MBR_BytesPerSect		=	0x000b
000d =                       MBR_SectPerClust		=	0x000d
AS65 Assembler for R6502 [1.42].                                     Page    5
---------------------------------- bank1.s -----------------------------------

000e =                       MBR_ResvSect			=	0x000e
0010 =                       MBR_FATCopies			=	0x0010
0011 =                       MBR_RootEntries			=	0x0011
0013 =                       MBR_SmlSect				=	0x0013
0015 =                       MBR_MediaDesc			=	0x0015
0016 =                       MBR_SectPerFAT			=	0x0016
0018 =                       MBR_SectPerTrk			=	0x0018
001a =                       MBR_NumHeads			=	0x001a
001c =                       MBR_NumHidSect			=	0x001c
0020 =                       MBR_NumSect				=	0x0020
0024 =                       MBR_DrvNum				=	0x0024
0026 =                       MBR_ExtSig				=	0x0026
0027 =                       MBR_SerNo				=	0x0027
002b =                       MBR_VolName				=	0x002b
0036 =                       MBR_FATName				=	0x0036
003e =                       MBR_ExeCode				=	0x003e
01c6 =                       MBR_BootPart1			=	(0x01be+0x08)
01fe =                       MBR_ExeMark				=	0x01fe
                             
                             ;* FAT16 definitions - these are offsets
                             ;* in to a FAT table entry which is
                             ;* 32 bytes in length.
0000 =                       	struct FATFileDesc
0000 =                       	ds FAT_Name,8
0008 =                       	ds FAT_Ext,3
000b =                       	ds FAT_Attr,1
000c =                       	ds FAT_Resv,1
000d =                       	ds FAT_Createms,1
000e =                       	ds FAT_CreateTime,2
0010 =                       	ds FAT_CreateDate,2
0012 =                       	ds FAT_AccessDate,2
0014 =                       	ds FAT_EAIndex,2
0016 =                       	ds FAT_ModTime,2
0018 =                       	ds FAT_ModDate,2
001a =                       	ds FAT_FirstClust,2
001c =                       	ds FAT_FileSize,4
                             	end struct
                             
                             ;* Flag to mark file as a directory
0010 =                       FAT_Attr_Dir			=	0x10
                             
                             ;* The FileHandle stucture is key to
                             ;* accessing the file system
0000 =                       	struct FileHandle
0000 =                       	ds FH_Name, 13				; 8 name, 3 extension, 1 separ
000d =                       	ds FH_Attr, 1				; What kind of file ** keep str
000e =                       	ds FH_Size, 4				; File size
0012 =                       	ds FH_CurrClust, 2			; Current cluster
0014 =                       	ds FH_SectCounter, 1		; Sector counter to know w
0015 =                       	ds FH_CurrSec, 4			; Current sector
0019 =                        	ds FH_Pointer, 4			; Pointer in to file for nex
001d =                       	ds FH_DirSect, 4			; Parent directory sector
0021 =                       	ds FH_DirOffset, 2			; Offset of this entry in t
0023 =                       	ds FH_FirstClust, 2			; First cluster of file da
0025 =                       	ds FH_LastClust, 2			; Last cluster accessed
0027 =                       	ds FH_TimeDate, 5			; Time-Date created (ms, tim
002c =                       	ds FH_FileMode, 1			; File mode (0=read, else wr
002d =                       	ds FH_FSpecPtr, 2			; Pointer to file spec being
                             	end struct
                             
0001 =                       FS_BLK_FLG_LOAD		 	= 	0x01		; On next byte, load 
0002 =                       FS_BLK_FLG_FLUSH		=	0x02		; Block has changed, ne
AS65 Assembler for R6502 [1.42].                                     Page    6
---------------------------------- bank1.s -----------------------------------

                             	
0001 =                       FS_ERR_EOF				=	0x01
                             
                             
                             ;* USEFUL MACROS HERE
                             
                             ;* Software break to throw errors
                             ;* use like this : SWBRK XX
                             ;* Where XX is the error code
                             SWBRK macro sig
                             	brk
                             	db sig
                             	endm
                             
                             _pushAXY macro
                             	pha
                             	phx
                             	phy
                             	endm
                             
                             _pullAXY macro
                             	ply
                             	plx
                             	pla
                             	endm
                             
                             _println macro msg
                             	_pushAXY
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	_pullAXY
                             	endm
                             
                             _println_low macro msg
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	endm
                             
                             _printmsgA macro msg
                             	phx
                             	phy
                             	pha
                             	ldx #lo(msg)
                             	lda #hi(msg)
                             	jsr io_print_line
                             	pla
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printA macro
                             	phx
AS65 Assembler for R6502 [1.42].                                     Page    7
---------------------------------- bank1.s -----------------------------------

                             	phy
                             	pha
                             	jsr str_a_to_x
                             	jsr _put_byte
                             	txa
                             	jsr _put_byte
                             	pla
                             	ply
                             	plx
                             	endm
                             
                             _printCRLF macro
                             	pha
                             	lda #UTF_CR
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printC macro ch
                             	pha
                             	lda #ch
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _printCA macro
                             	pha
                             	jsr _put_byte
                             	pla
                             	endm
                             
                             _sendcmd macro cmd
                             	_pushAXY
                             	ldx #lo(cmd)
                             	lda #hi(cmd)
                             	jsr sd_sendcmd
                             	_pullAXY
                             	endm
                             
                             _incZPWord macro wordp
                             	inc wordp
                             	db	0xd0, 0x02
                             	inc wordp+1
                             	endm
                             
                             _decZPWord macro wordp
                             	pha
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	pla
                             	endm
                             
                             _decZPWordA macro wordp
                             	sec
                             	lda wordp
                             	sbc #1
                             	sta wordp
AS65 Assembler for R6502 [1.42].                                     Page    8
---------------------------------- bank1.s -----------------------------------

                             	lda wordp+1
                             	sbc #0
                             	sta wordp+1
                             	endm
                             
                             _cpyZPWord macro worda,wordb
                             	lda worda
                             	sta wordb
                             	lda worda+1
                             	sta wordb+1
                             	endm
                             	
                             _addZPWord macro worda, wordb
                             	clc
                             	lda worda
                             	adc wordb
                             	sta worda
                             	lda worda+1
                             	adc wordb+1
                             	sta worda+1
                             	endm
                             
                             _subZPWord macro worda, wordb
                             	sec
                             	lda worda
                             	sbc wordb
                             	sta worda
                             	lda worda+1
                             	sbc wordb+1
                             	sta worda+1
                             	endm
                             	
                             _adcZPWord macro worda,const
                             	clc
                             	lda worda
                             	adc #const
                             	sta worda
                             	lda worda+1
                             	adc #0
                             	sta worda+1
                             	endm
                             
                             _adcZPByte macro worda, byte
                             	clc
                             	lda worda
                             	adc byte
                             	sta worda
                             	db 0x90, 0x02		; bcc 2
                             	inc worda+1
                             	endm
                             
                             _sbcZPByte macro worda, byte
                             	sec
                             	lda worda
                             	sbc byte
                             	sta worda
                             	db 0xb0, 0x02		; bcs 2
                             	inc worda+1
                             	endm
                             
                             _bcc macro skip
                             	db 0x90, skip
AS65 Assembler for R6502 [1.42].                                     Page    9
---------------------------------- bank1.s -----------------------------------

                             	endm
                             
                             _bcs macro skip
                             	db 0xb0, skip
                             	endm
                             
                             _df_ost_peekType macro
                             	ldy df_parmtop
                             	lda df_rtstck-1,y
                             	endm
                             
                             	include "inc\graph.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  GRAPH.I
                             ;*  This is the definition file for graphics, spe
                             ;*  The graphics screen handling module.  It is j
                             ;*  structure definition - but this structure is 
                             ;*  record the important attributes of a text scr
                             ;*  Needed because there is both a 40 and 32 colu
                             ;*  supported by the VDP, and the screens are not
                             ;*  same location.
                             ;*
                             ;************************************************
                             
0000 =                       	struct gr_screen
0000 =                       	dw gr_screen_start			; Start of screen memory in
0002 =                       	dw gr_screen_size			; Number of bytes screen occ
0004 =                       	db gr_screen_w				; Number of columns
0005 =                       	db gr_screen_h				; Number of rows
0006 =                       	db gr_cur_off				; Y offset of cursor image from
0007 =                       	db gr_cur_x					; Current X position of cursor
0008 =                       	db gr_cur_y					; Current Y position of cursor
0009 =                       	dw gr_cur_ptr				; VDP address of cursor
000b =                       	db gr_pixmode				; Pixel plot mode (0=Erase, 1=P
000c =                       	db gr_pixmask				; Pixel plot mask
000d =                       	db gr_pixcol				; Pixel colour
000e =                       	dw gr_geom_tmp				; One word of temp storage for
                             	end struct
                             	include "io\io.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.I
                             ;*  Definitions file for the IO module.  The key 
                             ;*  used by the IO system is defined here.
                             ;*
                             ;************************************************
                             
                             ;* General IO structure allows the system to swap
                             ;* different IO devices by using indirect calls t
AS65 Assembler for R6502 [1.42].                                     Page   10
---------------------------------- bank1.s -----------------------------------

                             ;* the appropriate routines.
0000 =                       	struct io_struct
0000 =                       	ds	io_get_byte,	2			;* Address of get byte
0002 =                       	ds	io_put_byte,	2			;* Address of put byte
0004 =                       	ds	io_open_r,		2			;* Address of open file for r
0006 =                       	ds	io_open_w,		2			;* Address of open file for w
0008 =                       	ds	io_close_f,		2			;* Address of close file
000a =                       	ds	io_del_f,		2			;* Address of delete file
000c =                       	ds	io_ext1,		2			;* Address of extended function
000e =                       	ds	io_ext2,		2			;* Address of extended function
                             	end struct
                             	include "rtc\rtc.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTC.I
                             ;*  Definitions file for the RTC module.  The key
                             ;*  used by the real time clock is defined here.
                             ;*  It is a DS1288
                             ;*
                             ;************************************************
                             
0000 =                       RTC_SEC		= 0x00
0001 =                       RTC_SECA	= 0x01
0002 =                       RTC_MIN		= 0x02
0003 =                       RTC_MINA	= 0x03
0004 =                       RTC_HR		= 0x04
0005 =                       RTC_HRA		= 0x05
0006 =                       RTC_DOW		= 0x06
0007 =                       RTC_DAY		= 0x07
0008 =                       RTC_MTH		= 0x08
0009 =                       RTC_YR		= 0x09
000a =                       RTC_REGA	= 0x0a
000b =                       RTC_REGB	= 0x0b
000c =                       RTC_REGC	= 0x0c
000d =                       RTC_REGD	= 0x0d
                             
0080 =                       RTC_UIP		= 0x80
0040 =                       RTC_DV2		= 0x40
0020 =                       RTC_DV1		= 0x20
0010 =                       RTC_DV0		= 0x10
0080 =                       RTC_RS3		= 0x80
0040 =                       RTC_RS2		= 0x40
0020 =                       RTC_RS1		= 0x20
0010 =                       RTC_RS0		= 0x10
                             
0080 =                       RTC_SET		= 0x80
0040 =                       RTC_PIE		= 0x40
0020 =                       RTC_AIE		= 0x20
0010 =                       RTC_UIE		= 0x10
0080 =                       RTC_SQWE	= 0x80
0004 =                       RTC_DM		= 0x04
0002 =                       RTC_2412	= 0x02
0001 =                       RTC_DSE		= 0x01
                             
0080 =                       RTC_IRQF	= 0x80
0040 =                       RTC_PF		= 0x40
AS65 Assembler for R6502 [1.42].                                     Page   11
---------------------------------- bank1.s -----------------------------------

0020 =                       RTC_AF		= 0x20
0010 =                       RTC_UF		= 0x10
                             
0080 =                       RTC_VRT		= 0x80
                             
0600 =                       RTC_ADDR	= 0x600
0601 =                       RTC_DATA	= 0x601
                             
000e =                       NV_MODE     = 0x0e          ; Default boot up scr
000f =                       NV_COLOUR   = 0x0f          ; Default boot up col
                             
003f =                       NV_RAMSZ    = 63            ; Checksum byte in NV
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
AS65 Assembler for R6502 [1.42].                                     Page   12
---------------------------------- bank1.s -----------------------------------

000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
AS65 Assembler for R6502 [1.42].                                     Page   13
---------------------------------- bank1.s -----------------------------------

                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\dflat.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  DFLAT.I
                             ;*  This is the main definitions file for dflat. 
                             ;*  definitions are in here to access the data st
                             ;*  used by dflat.
                             ;*
                             ;************************************************
                             
                             ;* Start dflat program memory
0cb6 =                       DF_PROGSTART=	mem_start
                             ;* This is the top of usable dflat memory plus 1
c000 =                       DF_MEMTOP	=	0xc000
                             
                             ;* Offset in to tokenised line of length and line
0000 =                       DFTK_LINLEN	=	0x00
0001 =                       DFTK_LINNUM	=	0x01
                             
                             ;* Flags for token, escape value for data types a
0080 =                       DFTK_TOKEN	=	0x80
0020 =                       DFTK_ESCVAL	=	0x20
0000 =                       DFTK_EOL	=	0x00
                             
AS65 Assembler for R6502 [1.42].                                     Page   14
---------------------------------- bank1.s -----------------------------------

                             ;* Numeric constants are encoded based on size an
                             ;* user representation.
                             ;* For example the decimal value 16 will be encod
                             ;* DFTK_INTDEC followed by the bytes 0 and 16 to 
                             ;* The same value in binary will be encoded as DF
                             ;* followed by the same 0 and 16 bytes.  This is 
                             ;* tokenised value to be displayed in original re
                             ;* So in the two examples, they will be shown as 
                             ;* '0x0010' respectively.
0000 =                       DFTK_CHR	=	0x00
0001 =                       DFTK_RESV1	=	0x01
0002 =                       DFTK_RESV2	=	0x02
0003 =                       DFTK_RESV3	=	0x03
0004 =                       DFTK_RESV4	=	0x04
0005 =                       DFTK_BYTDEC	=	0x05
0006 =                       DFTK_BYTHEX = 	0x06
0007 =                       DFTK_BYTBIN =	0x07
0008 =                       DFTK_RESV8	=	0x08
0009 =                       DFTK_INTDEC	=	0x09
000a =                       DFTK_INTHEX =	0x0a
000b =                       DFTK_INTBIN	=	0x0b
000c =                       DFTK_RESVC	=	0x0c
000d =                       DFTK_RESVD	=	0x0d
000e =                       DFTK_RESVE	=	0x0e
000f =                       DFTK_RESVF	=	0x0f
                             
                             ;* String constant, variable and procedure tokens
0010 =                       DFTK_STRLIT	=	0x10
0011 =                       DFTK_VAR	=	0x11
0012 =                       DFTK_PROC	=	0x12
001f =                       DFTK_STEND	=	0x1f
                             
                             ;* Qualifier for non-local parameters passed to a
0026 =                       DFTK_VARPARM=	'&'
                             
                             ;* Variable Value Table (VVT) definitions
                             ;* The VVT records the values of variables define
                             ;* the Variable Name Table (VNT).  When a variabl
                             ;* used, it is added to the VNT, and the position
                             ;* VNT is used as an index in to the VVT.
                             ;* Every VVT entry is 8 bytes - so the VNT index 
                             ;* shifted left 3 bits to get the VVT offset.
                             ;* The VNT grows from top of memory down, the VVT
                             ;* grows from start of VNT down.
                             
                             ;* Index in to each entry of the VVT
0000 =                       DFVVT_TYPE	=	0x00
0001 =                       DFVVT_LO	=	0x01
0002 =                       DFVVT_HI	=	0x02
0003 =                       DFVVT_DIM1	=	0x03
0004 =                       DFVVT_DIM2	=	0x04
0008 =                       DFVVT_SZ	=	0x08	;VVT is aligned to 8 byte blocks
                             
                             ;* The meaning of the DFVVT_TYPE entry
0001 =                       DFVVT_INT	=	0x01
0002 =                       DFVVT_BYT	=	0x02
0004 =                       DFVVT_STR	=	0x04
0008 =                       DFVVT_FLT	=	0x08
0040 =                       DFVVT_PROC	=	0x40
0080 =                       DFVVT_PTR	=	0x80
                             
                             ;* Flags indicating the meaning of a token
AS65 Assembler for R6502 [1.42].                                     Page   15
---------------------------------- bank1.s -----------------------------------

                             ;* A token has the top bit set (0x80), then the
                             ;* remaining bits indicate what it represents.
0001 =                       DFTK_KW		=	0x01
0002 =                       DFTK_FN		=	0x02
0004 =                       DFTK_STROP	=	0x04
0008 =                       DFTK_OP		=	0x08
0010 =                       DFTK_INT	=	0x10
0020 =                       DFTK_BYT	=	0x20
0040 =                       DFTK_STR	=	0x40
0080 =                       DFTK_FLT	=	0x80
0007 =                       DFTK_OPMSK	=	0x07
00f8 =                       DFTK_RTMSK	= 	0xf8
                             
                             ;* Defines what type of value is on the parameter
                             ;* All numerics are stored as INT, all STR
                             ;* are pointers to the actual string, thus
                             ;* all entries in the parmeter stack are 3 bytes
0003 =                       DFST_INT	=	DFVVT_INT|DFVVT_BYT
0004 =                       DFST_STR	=	DFVVT_STR
00ff =                       DFST_PTR	=	0xff
                             
                             ;* Token values of specific commands, used during
                             ;* command processing.
                             ;* ANY CHANGE TO THE ORDER OF KEYWORDS NEEDS TO R
0086 =                       DFRT_DEF	=	0x86
0087 =                       DFRT_ENDDEF	=	0x87
0088 =                       DFRT_RETURN	=	0x88
0089 =                       DFRT_ABORT	=	0x89
008c =                       DFRT_REPEAT	=	0x8c
008e =                       DFRT_FOR	=	0x8e
008f =                       DFRT_NEXT	=	0x8f
0090 =                       DFRT_WHILE	=	0x90
0091 =                       DFRT_WEND	=	0x91
0092 =                       DFRT_IF		=	0x92
0093 =                       DFRT_ELSE	=	0x93
0094 =                       DFRT_ENDIF	=	0x94
0095 =                       DFRT_ELSEIF	=	0x95
0096 =                       DFRT_DATA	=	0x96
0097 =                       DFRT_ASM	=	0x97
                             
                             _PushTrueJmp macro
                             	ldx #0xff
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             _PushFalseJmp macro
                             	ldx #0x00
                             	txa
                             	jmp df_ost_pushInt
                             	endm
                             
                             	include "dflat\error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
AS65 Assembler for R6502 [1.42].                                     Page   16
---------------------------------- bank1.s -----------------------------------

                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             	include "bank\bank.i"
c000 =                       bankjsr_nul_addr	=	0xc000
0000 =                       bankjsr_nul_bank	=	0x00
003f =                       ROM_ZMASK			=	0x3f
00cf =                       RAM_ZMASK			=	0xcf
                             
                             _bankjsr	macro	addr,bank
                             	; Save A
                             	sta tmp_bank1
                             	
                             	; Save current bank
                             	lda bank_num
                             	pha
                             	
                             	; Switch to new bank
                             	lda IO_0+PRB
                             	and #ROM_ZMASK
                             	ora #(bank^3) << 6			; Shift left 6 bits
                             	sta IO_0+PRB
                             
                             	; Restore A
                             	lda tmp_bank1
                             	; JSR to the routine
                             	jsr addr
                             	
AS65 Assembler for R6502 [1.42].                                     Page   17
---------------------------------- bank1.s -----------------------------------

                             	jmp _restore_bank
                             	; 62 clock cycles inc restore vs 6 for a near js
                             
                             	endm
                             	
                             _bankram macro bank
                             	pha
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	pla
                             	endm
                             	
                             _bankram_fast macro bank
                             	lda IO_0+PRB
                             	and #RAM_ZMASK
                             	ora #bank << 4
                             	sta IO_0+PRB
                             	endm
                             	
                             
                             	include "kernel\zeropage.i"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ZEROPAGE.I
                             ;*  This module name is misleading it is not only
                             ;*  allocations, but also page 2, 3, 4, 5, 6, 7 a
                             ;*  Basically, this module defines:
                             ;*  - All zero page variables for system and dfla
                             ;*  - Page 1 is stack so no need to worry about t
                             ;*  - Page 2 is the serial IO buffer for the 6551
                             ;*  - Page 3 and 4 is a 512 buffer for SD card se
                             ;*  - Page 5 onwards is mainly for dflat working 
                             ;*    but also non-zero page storage for general 
                             ;*    system and scratch usage.
                             ;*  memstart is a handy label that indicates the 
                             ;*  location that we can store dflat programs fro
                             ;*  Zero page is a valuable asset as the 6502 can
                             ;*  this page one cycle quicker than the rest of 
                             ;*  and infact some addressing modes can only use
                             ;*  Due to the value of zero page, a lot of syste
                             ;*  dflat variables are put here.  But we don't h
                             ;*  luxury for single use variables - so you will
                             ;*  see a lot of temporary sounding names which a
                             ;*  have multiple used across the code base.
                             ;*
                             ;************************************************
                             
                             	; Zero page declarations
                             	bss
0000 =                       	org 0x0000
                             
0000 =                       tmp_bank1	ds	1		; Temp storage ONLY FOR USE BY BA
0001 =                       tmp_bank2	ds	1		; Temp storage ONLY FOR USE BY BA
                             
AS65 Assembler for R6502 [1.42].                                     Page   18
---------------------------------- bank1.s -----------------------------------

                             ; Serial FIFO buffer pointers
0002 =                       ser_first	ds	1		; Pointer to first byte in buffer
0003 =                       ser_last	ds	1		; Pointer to last byte in buffer
                             ; VDP parameters
0004 =                       vdp_int_cnt	ds  2		; VDP interrupt counter
0006 =                       vdp_curoff	ds	1		; Cursor off (0 = On)
0007 =                       vdp_curstat	ds	1		; Cursor status
0008 =                       vdp_curval	ds	1		; Cursor value on screen
0009 =                       vdp_blank	ds	1		; Screen blank value normally 32
000a =                       vdp_delay	ds	1		; Delay counter for VRAM access
                             
                             ; vdp settings
000b =                       vdp_base	ds	vdp_addr_struct
                             
                             ; Screen geometry
0017 =                       gr_scrngeom	ds	gr_screen
                             
                             ;Keyboard parameters
0027 =                       kb_raw  	ds	1		; Raw keyboard code
0028 =                       kb_last		ds	1		; Raw code of last key
0029 =                       kb_code 	ds	1		; Converted keyboard code
002a =                       kb_stat		ds	1		; Keyboard status for caps and shi
002b =                       kb_deb		ds	1		; VB periods since last KB spike
002c =                       kb_rep		ds	1		; Keyboard repeat timer
002d =                       kb_rep_tim 	ds	1		; Default repeat speed
002e =                       kb_rep_del 	ds	1		; Default repeat delay timing
002f =                       kb_debounce ds	1		; Default repeat debounce
0030 =                       kb_pressed	ds	1		; Set by the interrupt handler i
                             
0031 =                       tmp_c		ds	2		; Temp address c
0033 =                       tmp_v1		ds	2		; VDP temp addresses
0035 =                       tmp_a		ds	2		; Temp storage a
0037 =                       tmp_b 		ds	2		; Temp address b
0039 =                       tmp_d		ds	2		; Temp storage d
                             
                             ; Raw input/output parameters
003b =                       buf_adr		ds	2		; Line buffer address
003d =                       buf_sz		ds	1		; Buffer size
003e =                       buf_ef		ds	1		; End file / line marker
                             
                             ; SD card driver parameters
003f =                       sd_status	ds	1		; SD card status
0040 =                       sd_slo		ds	1		; Sector pointer low
0041 =                       sd_shi		ds	1		; Sector pointer high
0042 =                       sd_sect		ds	4		; SD Card sector address
0046 =                       sd_addr		ds	4		; SD Card byte address
                             
                             ; File system zp parameters
004a =                       fh_handle	ds	FileHandle ; File handle parameters
                             
                             ; ** Integer function storage **
0079 =                       ztmp_16					; Start of 16 byte scratch area (all 
0079 =                       num_a		ds	4		; 4 byte primary accumulator
007d =                       num_b		ds	4		; 4 byte secondary accumulator
0081 =                       num_x		ds	4		; 4 byte x register
0085 =                       num_tmp		ds	4		; 4 byte temp space
0089 =                       num_buf		ds	8		; 8 byte string buffer
                             
                             ;
                             ; **** INTERPRETER ZERO PAGE ****
                             ;
0091 =                       dflat_zp_s
AS65 Assembler for R6502 [1.42].                                     Page   19
---------------------------------- bank1.s -----------------------------------

0091 =                       dflat_zp_save_s			; ZP save dflat from here
0091 =                       df_checkkey	ds	1		; Key check interval counter
0092 =                       df_checkmsk	ds	1		; Mask for check key
0093 =                       errno		ds	1		; General error condition status
0094 =                       df_immed	ds	1		; Immediate mode (0 = not immediat
0095 =                       df_sp		ds	1		; Stack pointer after error to resto
0096 =                       df_pc		ds	2		; PC after error to return to
0098 =                       df_brkpc	ds	2		; PC pushed on the stack for BRK
009a =                       df_brkval	ds	1		; Byte after BRK instruction
009b =                       df_prgstrt	ds	2		; Start of program code
009d =                       df_prgend	ds	2		; End of program code
009f =                       df_vntstrt	ds	2		; Variable name table start
00a1 =                       df_vntend	ds	2		; Variable name table end
00a3 =                       df_vvtstrt	ds	2		; Variable value table start
00a5 =                       df_vvtend	ds	2		; Variable value table end
00a7 =                       df_varcnt	ds	1		; Variable counter
00a8 =                       df_starstrt	ds	2		; String and array table start
00aa =                       df_starend	ds	2		; String and array table end
00ac =                       df_rtstop	ds	1		; Runtime stack pointer
00ad =                       df_parmtop	ds	1		; Top of parameter stack (grows 
00ae =                       df_strbuff	ds	1		; String expression buffer
00af =                       df_stridx	ds	1		; Top of string buffer (grows dow
00b0 =                       df_sevalptr	ds	2		; Pointer to next free char in 
                             
00b2 =                       df_linoff	ds	1		; Offset in to line buffer
00b3 =                       df_tokoff	ds	1		; Offset in to tokenised buffer
00b4 =                       df_eolidx	ds	1		; End of line index (i.e length)
00b5 =                       df_nxtstidx	ds	1		; Offset to the next statement 
00b6 =                       df_curstidx	ds	1		; Offset to the start of curren
00b7 =                       df_symtab	ds	2		; Pointer to next free symtab ent
00b9 =                       df_symoff	ds	1		; Offset in to token table
00ba =                       df_symini	ds	2		; Start of symtab
00bc =                       df_currlin	ds	2		; Execution current line pointer
00be =                       df_exeoff	ds	1		; Execution line buffer offset
00bf =                       df_nextlin	ds	2		; Next line to execute
00c1 =                       df_procmode	ds	1		; Only used during tokenisation
00c2 =                       df_procargs	ds	1		; Only used during tokenisation
00c3 =                       df_procloc	ds	1		; Counts the number of local par
00c4 =                       df_procptr	ds	2		; Pointer to proc vvt slot
00c6 =                       df_lineptr	ds	2		; Pointer to line during searche
00c8 =                       df_lineidx	ds	1		; Pointer to line index during s
00c9 =                       df_ifnest	ds	1		; Global nested if counter
00ca =                       df_currdat	ds	2		; Data current line pointer
00cc =                       df_datoff	ds	1		; Data line buffer offset
00cd =                       df_rnd		ds	2		; Random number seed
                             
00cf =                       df_asmpc	ds	2		; Assembler program counter
00d1 =                       df_asmopt	ds	1		; Assembler current option
00d2 =                       df_asmadmd	ds	1		; Addressing mode
00d3 =                       df_asmopcde	ds	1		; Current opcode
00d4 =                       df_asmoprnd	ds	2		; Current operand
00d6 =                       df_asmlen	ds	1		; Instruction length
                             
00d7 =                       dflat_zp_save_e			; Save up to this place
                             
                             ; Temp space for dflat
00d7 =                       df_tmpptra	ds	2		; Temp pointer a
00d9 =                       df_tmpptrb	ds	2		; Temp pointer b
00db =                       df_tmpptrc	ds	2		; Temp pointer c
00dd =                       df_tmpptrd	ds	2		; Temp pointer d
00df =                       df_tmpptre	ds	2		; Temp pointer e
                             
AS65 Assembler for R6502 [1.42].                                     Page   20
---------------------------------- bank1.s -----------------------------------

                             
                             ;***** END OF ZERO PAGE *****
00e1 =                       _end_zero_page
                             
                             ;***** Page 1 is CPU stack ****
0100 =                       	org 0x0100
0100 =                       _cpu_stack
0100 =                       			ds	256		; All of page 1
                             
                             ;***** Page 2 and 3 is SD card buffer
0200 =                       	org 0x0200			; SD Card data buffer 512 bytes
0200 =                       sd_buf		ds	512
                             
                             ;***** Page 4,5,6,7 is IO space
0400 =                       	org 0x0400
0400 =                       			ds	1024	; 1 k area divided in to 8x128 byte de
                             
                             
                             ;***** Page 8 is serial buffer *****
0800 =                       	org 0x0800
0800 =                       ser_buf		ds	256		; Serial input / output line buf
                             
                             ;***** Scratch area, used by many things - do not
                             ; string and numeric expression evaluation, scree
0900 =                       	org 0x0900
0900 =                       scratch		ds	256
                             
                             ;***** Dflat space *****
0a00 =                       	org 0x0a00			; Page 9 = dflat space
0a00 =                       df_linbuff
0a00 =                       df_raw		ds	128		; untokenised input line
0a80 =                       df_tokbuff
0a80 =                       df_tok		ds 	128		; tokenised output line
                             
0b00 =                       	org 0x0b00			; Page 10 = fixed space for runtime
0b00 =                       df_rtstck				; operator stack grows up, runtime g
0b00 =                       df_rtspace	ds	256
                             
                             ;***** NON-ZERO PAGE VARIABLES *****
                             
0c00 =                       	org 0x0c00			; Page 11 = non-zero page variables
                             ; Interrupt routine addresses
0c00 =                       int_nmi		 ds 2		; Master NMI handler
0c02 =                       int_irq		 ds	2		; Master IRQ handler
0c04 =                       int_brk		 ds	2		; Master BRK handler
0c06 =                       int_uservdp	 ds	2		; Where to jump for VDP interr
0c08 =                       int_usercia0 ds	2		; Where to jump for CIA0 inter
0c0a =                       int_usercia1 ds	2		; Where to jump for CIA1 inter
                             
                             ; Self-modifying code or code that needs to run w
0c0c =                       ram_code	ds  64		; 64 bytes of RAM code space
0c4c =                       pt3_int		ds	1		; =1 when PT3 interrupt routine is
                             
                             
                             ; Active IO device settings
0c4d =                       io_default	ds	1		; The default device number - es
                             ; Copy of jump tables to active device io routine
0c4e =                       io_block	ds	io_struct
                             
                             ; Copy of FAT16 directory
0c5e =                       fs_direntry	ds	FATFileDesc ; copy of dir entry - 
                             
AS65 Assembler for R6502 [1.42].                                     Page   21
---------------------------------- bank1.s -----------------------------------

                             ; Filesystem parameters
0c7e =                       fs_bootsect	ds	4		; Start of partition (usually 0
0c82 =                       fs_fatsect	ds	4		; Start of FAT tables
0c86 =                       fs_rootsect	ds	4		; Start of Root Directory
0c8a =                       fs_datasect	ds	4		; Start of Data Area
0c8e =                       fs_dirsect	ds	4		; Current directory sector numbe
0c92 =                       fs_dirclust	ds	2		; Current directory cluster num
                             
                             ; Working and scratch for filesystem - some data 
0c94 =                       fs_scratch	ds	32		; 32 bytes should be more than 
                             
                             ; Dflat top of memory+1 - normally initialised to
0cb4 =                       df_memtop	ds	2
                             
                             ;***** THIS IS THE START OF FREE SPACE for DFLAT 
0cb6 =                       mem_start
                             
                             
                             
                             
                             ;****************************************
                             ;*	Set 6502 default vectors	*
                             ;****************************************
                             	data				; Set vectors
fffa =                       	org 0xfffa			; Vectors lie at addresses
fffa : 77c7                  	fcw call_nmi_master	; 0xfffa : NMI Vector
fffc : 8dcb                  	fcw init			; 0xfffc : Reset Vector
fffe : e5c7                  	fcw call_irq_master	; 0xfffe : IRQ Vector
                             	
                             	; ROM code
                             	code				;  
c000 =                       	org 0xc000			; Start of ROM
                             
                             	; The bank number is hardwired and aligned to PB
c000 :                       bank_num
                             	if BANK0
                             	  db 192
                             	endif
                             	if BANK1
c000 : 80                    	  db 128
                             	endif
                             	if BANK2
                             	  db 64
                             	endif
                             	if BANK3
                             	  db 0
                             	endif
                             
c001 :                       _code_start
                             	; Restore current bank always at address c001
c001 :                       _OSVectors
                             	include "kernel\osvec.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  OSVEC.S
                             ;*  Simply this is a bunch of JMP XXXX the order 
AS65 Assembler for R6502 [1.42].                                     Page   22
---------------------------------- bank1.s -----------------------------------

                             ;*  will always be maintained.  This is to allow 
                             ;*  code programs to be able to rely on fixed loc
                             ;*  some key low-level functions.
                             ;*  Only low level functions are needed, the idea
                             ;*  as the assembler is part of the BASIC, one ca
                             ;*  level slow stuff using BASIC then switch to M
                             ;*  speed up.
                             ;*  This code goes straight after the bank number
                             ;*  Each JMP is at 0xc001+3*(vector #)
                             ;*
                             ;************************************************
                             
c001 : 4cc0c5           [ 3] 	jmp	io_put_ch			; Vec 0
c004 : 4cbdc5           [ 3] 	jmp io_get_ch			; Vec 1
c007 : 4c50c6           [ 3] 	jmp vdp_wr_reg			; Vec 2
c00a : 4c8ac6           [ 3] 	jmp vdp_poke			; Vec 3
c00d : 4c97c6           [ 3] 	jmp vdp_peek			; Vec 4
c010 : 4cf9c6           [ 3] 	jmp snd_get_joy0		; Vec 5
c013 : 4ca1c6           [ 3] 	jmp snd_set				; Vec 6
c016 : 4c5dc6           [ 3] 	jmp vdp_wr_addr			; Vec 7
c019 : 4c75c6           [ 3] 	jmp	vdp_rd_addr			; Vec 8
c01c :                       _restore_bank
                             	; Save A
c01c : 8500             [ 3] 	sta tmp_bank1
                             	; Get old bank from stack
c01e : 68               [ 4] 	pla
c01f : 8501             [ 3] 	sta tmp_bank2
c021 : ad0004           [ 4] 	lda IO_0+PRB
c024 : 293f             [ 2] 	and #ROM_ZMASK
c026 : 0501             [ 3] 	ora tmp_bank2
c028 : 8d0004           [ 4] 	sta IO_0+PRB
                             	
                             	; Restore A
c02b : a500             [ 3] 	lda tmp_bank1
                             
c02d : 60               [ 6] 	rts
                             
                             	; include cross-bank functions (see extern.mak)
                             	include "bank\autogen.s"	
                             ;
c02e :                       mod_sz_autogen_s
c02e :                       _df_init
                              _bankjsr $f330, 1
                             
c046 :                       _df_pg_dflat
                              _bankjsr $d847, 1
                             
c05e :                       _fs_chdir_w
                              _bankjsr $d5bd, 2
                             
c076 :                       _fs_mkdir_w
                              _bankjsr $d650, 2
                             
c08e :                       _fs_delete_w
                              _bankjsr $d559, 2
                             
c0a6 :                       _fs_close_w
                              _bankjsr $d518, 2
                             
c0be :                       _fs_get_byte_w
                              _bankjsr $d235, 2
                             
AS65 Assembler for R6502 [1.42].                                     Page   23
---------------------------------- bank1.s -----------------------------------

c0d6 :                       _fs_open_read_w
                              _bankjsr $d404, 2
                             
c0ee :                       _fs_open_write_w
                              _bankjsr $d4c8, 2
                             
c106 :                       _fs_put_byte_w
                              _bankjsr $d391, 2
                             
c11e :                       _fs_dir_find_entry_w
                              _bankjsr $d078, 2
                             
c136 :                       _fs_dir_entry_next_w
                              _bankjsr $d0ae, 2
                             
c14e :                       _fs_dir_root_start_w
                              _bankjsr $d033, 2
                             
c166 :                       _get_byte
                              _bankjsr $d27d, 0
                             
c17e :                       _put_byte
                              _bankjsr $d292, 0
                             
c196 :                       _gr_get_key
                              _bankjsr $e390, 0
                             
c1ae :                       _gr_put_byte
                              _bankjsr $e39d, 0
                             
c1c6 :                       _gr_init_screen
                              _bankjsr $de59, 0
                             
c1de :                       _init_acia
                              _bankjsr $d29f, 0
                             
c1f6 :                       _init_cia0
                              _bankjsr $d22a, 0
                             
c20e :                       _init_cia1
                              _bankjsr $d25b, 0
                             
c226 :                       _init_fs
                              _bankjsr $cf10, 2
                             
c23e :                       _init_sdcard
                              _bankjsr $cc0a, 2
                             
c256 :                       _init_snd
                              _bankjsr $d668, 0
                             
c26e :                       _init_keyboard
                              _bankjsr $d2b1, 0
                             
c286 :                       _kb_read_raw
                              _bankjsr $d2c0, 0
                             
c29e :                       _kb_read_dip
                              _bankjsr $d32b, 0
                             
c2b6 :                       _command_line
                              _bankjsr $cc13, 0
AS65 Assembler for R6502 [1.42].                                     Page   24
---------------------------------- bank1.s -----------------------------------

                             
c2ce :                       _gr_cls
                              _bankjsr $de6c, 0
                             
c2e6 :                       _gr_init_hires
                              _bankjsr $de16, 0
                             
c2fe :                       _gr_line
                              _bankjsr $e1ca, 0
                             
c316 :                       _gr_box
                              _bankjsr $e00a, 0
                             
c32e :                       _gr_circle
                              _bankjsr $e115, 0
                             
c346 :                       _gr_plot
                              _bankjsr $ded7, 0
                             
c35e :                       _gr_hchar
                              _bankjsr $df15, 0
                             
c376 :                       _gr_point
                              _bankjsr $dfbb, 0
                             
c38e :                       _gr_get
                              _bankjsr $def2, 0
                             
c3a6 :                       _gr_set_cur
                              _bankjsr $defa, 0
                             
c3be :                       _snd_get_note
                              _bankjsr $d661, 0
                             
c3d6 :                       _snd_get_joy0
                              _bankjsr $c6f9, 0
                             
c3ee :                       _snd_set
                              _bankjsr $c6a1, 0
                             
c406 :                       _vdp_peek
                              _bankjsr $c697, 0
                             
c41e :                       _vdp_poke
                              _bankjsr $c68a, 0
                             
c436 :                       _vdp_init
                              _bankjsr $dc00, 0
                             
c44e :                       _rtc_init
                              _bankjsr $d487, 0
                             
c466 :                       _rtc_gettimedate
                              _bankjsr $d5ed, 0
                             
c47e :                       _rtc_setdatetime
                              _bankjsr $d53e, 0
                             
c496 :                       _rtc_nvread
                              _bankjsr $d658, 0
                             
c4ae :                       _rtc_nvwrite
AS65 Assembler for R6502 [1.42].                                     Page   25
---------------------------------- bank1.s -----------------------------------

                              _bankjsr $d640, 0
                             
c4c6 :                       _fs_dir_fhandle_str
                              _bankjsr $d664, 2
                             
c4de :                       _sd_sendcmd17
                              _bankjsr $cde2, 2
                             
c4f6 :                       _sd_sendcmd24
                              _bankjsr $ce5b, 2
                             
c50e :                       _cmd_immediate
                              _bankjsr $cc0a, 0
                             
c526 :                       _PT3INIT
                              _bankjsr $cc13, 3
                             
c53e :                       _PT3START
                              _bankjsr $cc0a, 3
                             
c556 :                       _PT3PAUSE
                              _bankjsr $cc0d, 3
                             
c56e :                       _PT3RESUME
                              _bankjsr $cc10, 3
                             
c586 :                       mod_sz_autogen_e
                             
                             	
c586 :                       mod_sz_kernel_s
                             
                             ;* Include all common code in the right order
                             	include "io\io.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IO.S
                             ;*  General IO module.  Allows different IO devic
                             ;*  utilised transparently by the rest of the cod
                             ;*  Other code should use "io_" commands so that 
                             ;*  do not need to know what specific device is p
                             ;*  input and output capabilities.  On startup, t
                             ;*  examines the BBC DIP switch to decide whether
                             ;*  initialise the IO to serial through the ACIA 
                             ;*  the BBC keyboard for input with the VDP for o
                             ;*  Loading and saving files from the SD card is 
                             ;*  achieved by pointing to SD card get and put b
                             ;*  routines.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c586 :                       mod_sz_io_s
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   26
---------------------------------- bank1.s -----------------------------------

                             ;* io_init
                             ;* Initialise the default device and make active
                             ;* No keys pressed = serial (default)
                             ;* F0 pressed = KB/VDP
                             ;* F1 pressed = Serial
                             ;* Keyboard and screen or serial port
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c586 :                       io_init
c586 : a900             [ 2] 	lda #0				; Assume it's serial
c588 : 48               [ 3] 	pha
c589 : 209ec2           [ 6] 	jsr _kb_read_dip	; Check DIPs if 0xff then assum
c58c : 2910             [ 2] 	and #0x10
c58e : d00b             [ 3] 	bne io_init_set_default
c590 : 2086c2           [ 6] 	jsr _kb_read_raw	; Check pressed key
c593 : e081             [ 2] 	cpx #0x81			; f1 key pressed (i.e. boot up in se
c595 : f004             [ 3] 	beq io_init_set_default
                             	; Else set to KB/screen for IO
c597 : 68               [ 4] 	pla
c598 : a901             [ 2] 	lda #1
c59a : 48               [ 3] 	pha
c59b :                       io_init_set_default
c59b : 68               [ 4] 	pla
c59c : 8d4d0c           [ 4] 	sta io_default
c59f : 4ca2c5           [ 3] 	jmp io_set_default	; Activate the default device
                             
                             ;****************************************
                             ;* io_set_default, io_active_device
                             ;* Activate device based on default or A
                             ;* Input : A = Device number
                             ;* Output : None
                             ;* Regs affected : P, A
                             ;****************************************
c5a2 :                       io_set_default			; Entry point for default
c5a2 : ad4d0c           [ 4] 	lda io_default
c5a5 :                       io_active_device		; Entry point for A set
c5a5 : 0a               [ 2] 	asl	a				; x16 the Block number
c5a6 : 0a               [ 2] 	asl a
c5a7 : 0a               [ 2] 	asl a
c5a8 : 0a               [ 2] 	asl a
c5a9 : a8               [ 2] 	tay
c5aa : a200             [ 2] 	ldx #0
                             	; Copy device settings to io block
c5ac :                       io_copy_data
c5ac : b920c6           [ 4] 	lda io_devices,y
c5af : 9d4e0c           [ 5] 	sta io_block,x
c5b2 : c8               [ 2] 	iny
c5b3 : e8               [ 2] 	inx
c5b4 : e010             [ 2] 	cpx #io_struct
c5b6 : d0f4             [ 3] 	bne io_copy_data
                             	
c5b8 : a90d             [ 2] 	lda #UTF_CR		; Line terminator is CR
c5ba : 853e             [ 3] 	sta buf_ef
c5bc : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* io_get_ch
                             ;* Get a char (wait forever or just check)
                             ;* Input : C = 1 for synchronous, 0 for async
                             ;* Output : A = Byte code, C = 0 means A is inval
                             ;* Regs affected : P, A
AS65 Assembler for R6502 [1.42].                                     Page   27
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
c5bd :                       io_get_ch
c5bd : 6c4e0c           [ 6] 	jmp (io_block+io_get_byte)
                             	
                             
                             ;****************************************
                             ;* io_put_ch
                             ;* Put a char
                             ;* Input : A = char
                             ;* Regs affected : P, A
                             ;****************************************
c5c0 :                       io_put_ch
c5c0 : 6c500c           [ 6] 	jmp (io_block+io_put_byte)
                             	
                             ;****************************************
                             ;* io_open_read
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c3 :                       io_open_read
c5c3 : 6c520c           [ 6] 	jmp (io_block+io_open_r)
                             	
                             ;****************************************
                             ;* io_open_write
                             ;* Open for reading
                             ;* Input : X,A = pointer to filename (zero termin
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c6 :                       io_open_write
c5c6 : 6c540c           [ 6] 	jmp (io_block+io_open_w)
                             
                             ;****************************************
                             ;* io_close
                             ;* Close a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5c9 :                       io_close
c5c9 : 6c560c           [ 6] 	jmp (io_block+io_close_f)
                             	
                             ;****************************************
                             ;* io_delete
                             ;* Delete a file
                             ;* Input : 
                             ;* Output : C=0 success
                             ;* Regs affected : All
                             ;****************************************
c5cc :                       io_delete
c5cc : 6c580c           [ 6] 	jmp (io_block+io_del_f)
                             	
                             ;****************************************
                             ;* io_read_line
                             ;* Read a line, terminated by terminating char or
                             ;* Input : buf_(sz/ef) : Address, Max size, end m
                             ;*		    X,A = destination (uses buf_adr)
                             ;*		    Y=max line length
                             ;* Output : Y = Line length C = Buffer limit reac
                             ;* Regs affected : None
AS65 Assembler for R6502 [1.42].                                     Page   28
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
c5cf :                       io_read_line
c5cf : 863b             [ 3] 	stx buf_adr			; Save pointer to storage
c5d1 : 853c             [ 3] 	sta buf_adr+1
c5d3 : 843d             [ 3] 	sty buf_sz			; Max length
c5d5 : 08               [ 3] 	php					; Save echo state
c5d6 : a000             [ 2] 	ldy #0x00			; Starting at first byte
c5d8 :                       io_get_line_byte
c5d8 : 38               [ 2] 	sec					; Getting bytes synchronously
c5d9 : 20bdc5           [ 6] 	jsr io_get_ch		; Get a byte
c5dc : b026             [ 4] 	bcs io_get_line_done; Got nothing then finish
c5de : 28               [ 4] 	plp					; Get echo state
c5df : 08               [ 3] 	php					; Instantly save it back
c5e0 : 900c             [ 3] 	bcc io_skip_echo	; Carry not set = don't echo
c5e2 : c97f             [ 2] 	cmp #UTF_DEL		; Delete?
c5e4 : d005             [ 3] 	bne io_do_echo
c5e6 : c000             [ 2] 	cpy #0				; Already at beginning?
c5e8 : f004             [ 3] 	beq io_skip_echo	; Don't echo delete
c5ea : 88               [ 2] 	dey					; Else decrement length
c5eb :                       io_do_echo
c5eb : 20c0c5           [ 6] 	jsr io_put_ch		; Echo it
c5ee :                       io_skip_echo
c5ee : c920             [ 2] 	cmp #UTF_SPECIAL	; Special character?
c5f0 : 9007             [ 3] 	bcc io_skip_special	; Skip if so (don't add to b
c5f2 : c97f             [ 2] 	cmp #UTF_DEL		; Don't proces DEL either
c5f4 : f003             [ 3] 	beq io_skip_special
c5f6 : 913b             [ 5] 	sta (buf_adr),y		; Save it
c5f8 : c8               [ 2] 	iny					; Increase length
c5f9 :                       io_skip_special
c5f9 : c53e             [ 3] 	cmp buf_ef			; Is it the terminating char?
c5fb : f007             [ 4] 	beq io_get_line_done	; If yes then done
c5fd : c43d             [ 3] 	cpy buf_sz			; Reached the buffer max size?
c5ff : d0d7             [ 3] 	bne io_get_line_byte	; No, get another byte
c601 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c602 : 38               [ 2] 	sec					; Yes, set carry flag
c603 : 60               [ 6] 	rts					; And done
c604 :                       io_get_line_done
c604 : a900             [ 2] 	lda #0
c606 : 913b             [ 5] 	sta (buf_adr),y		; Terminate with 0
c608 : 28               [ 4] 	plp					; Remember to pull echo state off stack
c609 : 18               [ 2] 	clc					; Clear carry flag
c60a : 60               [ 6] 	rts					; Fin
                             
                             ;****************************************
                             ;* io_print_line
                             ;* Print a line (when data is not already in seri
                             ;* Input : X = Address Lo, A = Address Hi
                             ;* Output : Y=number chars output
                             ;* Regs affected : All
                             ;****************************************
c60b :                       io_print_line
c60b : 48               [ 3] 	pha
                             
c60c : 8631             [ 3] 	stx tmp_c					; Store the string pointer
c60e : 8532             [ 3] 	sta tmp_c+1					; lo and hi
c610 : a000             [ 2] 	ldy #0						; Start at the beginning!
c612 :                       io_print_line_byte
c612 : b131             [ 5] 	lda (tmp_c),y				; Copy byte to
c614 : f006             [ 3] 	beq io_print_done			; If zero then done - print
c616 : 20c0c5           [ 6] 	jsr io_put_ch				; Transmit
c619 : c8               [ 2] 	iny
c61a : d0f6             [ 3] 	bne io_print_line_byte		; Carry on until zero fo
AS65 Assembler for R6502 [1.42].                                     Page   29
---------------------------------- bank1.s -----------------------------------

c61c :                       io_print_done
c61c : 68               [ 4] 	pla
c61d : 60               [ 6] 	rts
                             
                             
                             ;*** Null operation just clc and return ***
c61e :                       io_null_op
c61e : 18               [ 2] 	clc
c61f : 60               [ 6] 	rts
                             	
                             ;* IO devices defined here
c620 :                       io_devices
                             ;* Device zero is the serial port
                             ;* only offers get and put
c620 :                       io_device0					; Serial device, input = Ser, outp
c620 : 66c1                  	dw	_get_byte			; io_get_ch
c622 : 7ec1                  	dw	_put_byte			; io_put_ch
c624 : 1ec6                  	dw	io_null_op			; io_open_r
c626 : 1ec6                  	dw	io_null_op			; io_open_w
c628 : 1ec6                  	dw	io_null_op			; io_close_f
c62a : 1ec6                  	dw	io_null_op			; io_del_f
c62c : 1ec6                  	dw	io_null_op			; io_ext1
c62e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device one is keyboard / screen
                             ;* only offers get and put
c630 :                       io_device1					; Default device, input = screen e
c630 : 96c1                  	dw	_gr_get_key			; io_get_ch
c632 : aec1                  	dw	_gr_put_byte		; io_put_ch
c634 : 1ec6                  	dw	io_null_op			; io_open_r
c636 : 1ec6                  	dw	io_null_op			; io_open_w
c638 : 1ec6                  	dw	io_null_op			; io_close_f
c63a : 1ec6                  	dw	io_null_op			; io_del_f
c63c : 1ec6                  	dw	io_null_op			; io_ext1
c63e : 1ec6                  	dw	io_null_op			; io_ext2
                             ;* Device two is the file system on SD card
                             ;* Offers all IO functions
c640 :                       io_device2					; SD device, input = SD, output = 
c640 : bec0                  	dw	_fs_get_byte_w		; io_get_ch
c642 : 06c1                  	dw	_fs_put_byte_w		; io_put_ch
c644 : d6c0                  	dw	_fs_open_read_w		; io_open_r
c646 : eec0                  	dw	_fs_open_write_w	; io_open_w
c648 : a6c0                  	dw	_fs_close_w			; io_close_f
c64a : 8ec0                  	dw	_fs_delete_w		; io_del_f
c64c : 1ec6                  	dw	io_null_op			; io_ext1
c64e : 1ec6                  	dw	io_null_op			; io_ext2
                             
c650 :                       mod_sz_io_e
                             
                             
                             	include "kernel\vdp-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  VDP-LOW.S
                             ;*  Low level VDP routines which will always be p
                             ;*  every ROM bank.  This is to ensure if IRQ nee
                             ;*  no slow bank switching is needed, but also to
AS65 Assembler for R6502 [1.42].                                     Page   30
---------------------------------- bank1.s -----------------------------------

                             ;*	OS vectored access to VDP routines for M/C fro
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* vdp_wr_reg
                             ;* Write to Register A the value X
                             ;* Input : A - Register Number, X - Data
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c650 :                       vdp_wr_reg
c650 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c653 : ea               [ 2] 	nop
c654 : ea               [ 2] 	nop
c655 : 0980             [ 2] 	ora #0x80
c657 : 8d0105           [ 4] 	sta VDP_MODE1
c65a : 4980             [ 2] 	eor #0x80
c65c : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* vdp_wr_addr
                             ;* Write to address in X (low) and A (high) - for
                             ;* Input : A - Address high byte, X - Address low
                             ;* Output : None
                             ;* Regs affected : P
                             ;****************************************
c65d :                       vdp_wr_addr
c65d : 8e0105           [ 4] 	stx VDP_MODE1
                             ; Extra nop for fast CPU
c660 : ea               [ 2] 	nop
c661 : ea               [ 2] 	nop
c662 : ea               [ 2] 	nop
c663 : 0940             [ 2] 	ora #0x40		; Required by VDP
c665 : 8d0105           [ 4] 	sta VDP_MODE1
c668 : 4940             [ 2] 	eor #0x40		; Undo that bit
c66a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* vdp_mem_wait
                             ;* Delay some time before a memory access,
                             ;* taking in to account mode 9918 needs up
                             ;* to 3.1uS for text mode, 8uS for graphics
                             ;* I and II
                             ;* @ 5.35Mhz	= 16 cycles for 3.1uS
                             ;*				= 43 cycles for 8uS
                             ;* Input : None
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c66b :                       vdp_mem_wait
c66b : da               [ 3] 	phx								; 3
c66c : a60a             [ 3] 	ldx vdp_delay					; 3
c66e : f003             [ 3] 	beq vdp_mem_wait_end			; 3
c670 :                       vdp_mem_wait_loop
c670 : ca               [ 2] 	dex								; 2
c671 : d0fd             [ 3] 	bne	vdp_mem_wait_loop			; 3
c673 :                       vdp_mem_wait_end
c673 : fa               [ 4] 	plx								; 3
c674 : 60               [ 6] 	rts								; 6
AS65 Assembler for R6502 [1.42].                                     Page   31
---------------------------------- bank1.s -----------------------------------

                             	
                             ;****************************************
                             ;* vdp_rd_addr
                             ;* Set read address 
                             ;* Input : A - high, X - low 
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c675 :                       vdp_rd_addr
c675 : 8e0105           [ 4] 	stx VDP_MODE1
                             ; These nops are needed for fast CPU
c678 : ea               [ 2] 	nop
c679 : ea               [ 2] 	nop
c67a : ea               [ 2] 	nop
c67b : 8d0105           [ 4] 	sta VDP_MODE1
c67e : 80eb             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_rd_vram
                             ;* Read VRAM byte, result in A
                             ;* Input : None
                             ;* Output : A - Byte from VRAM
                             ;* Regs affected : P
                             ;****************************************
c680 :                       vdp_rd_vram
c680 : ad0005           [ 4] 	lda VDP_VRAM
c683 : 80e6             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_wr_vram
                             ;* Write VRAM byte in A
                             ;* Input : A - Byte to write
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c685 :                       vdp_wr_vram
c685 : 8d0005           [ 4] 	sta VDP_VRAM
c688 : 80e1             [ 3] 	bra vdp_mem_wait
                             	
                             ;****************************************
                             ;* vdp_poke
                             ;* Write VRAM byte in A, (YX)
                             ;* Input : A - Byte to write
                             ;*		   X = Low Address
                             ;*		   Y = High Address
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c68a :                       vdp_poke
c68a : 08               [ 3] 	php
c68b : 48               [ 3] 	pha
c68c : 98               [ 2] 	tya
c68d : 78               [ 2] 	sei
c68e : 205dc6           [ 6] 	jsr vdp_wr_addr
c691 : 68               [ 4] 	pla
c692 : 2085c6           [ 6] 	jsr vdp_wr_vram
c695 : 28               [ 4] 	plp
c696 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* vdp_peek
                             ;* Get VRAM byte in (AX)
AS65 Assembler for R6502 [1.42].                                     Page   32
---------------------------------- bank1.s -----------------------------------

                             ;*		   X = Low Address
                             ;*		   A = High Address
                             ;* Output : A = byte read
                             ;* Regs affected : None
                             ;****************************************
c697 :                       vdp_peek
c697 : 08               [ 3] 	php
c698 : 78               [ 2] 	sei
c699 : 2075c6           [ 6] 	jsr vdp_rd_addr
c69c : 2080c6           [ 6] 	jsr vdp_rd_vram
c69f : 28               [ 4] 	plp
c6a0 : 60               [ 6] 	rts
                             
                             	include "kernel\snd-low.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  SND-LOW.S
                             ;*  Low level sound routines which will always be
                             ;*  in every ROM bank.  Mainly to provide fast OS
                             ;*	access to VDP routines for M/C from BASIC
                             ;*
                             ;************************************************
                             
                             ;****************************************
                             ;* snd_set
                             ;* Set AY register X to value Y
                             ;* Input : X = Reg no, Y = Value
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c6a1 :                       snd_set
c6a1 : 48               [ 3] 	pha
                             
c6a2 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6a4 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6a7 : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6aa : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6ad : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6af : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6b1 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6b4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6b6 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             	
c6b9 : 8c8104           [ 4] 	sty SND_ADBUS			; Put Y on the sound bus (Y = va
c6bc : 0902             [ 2] 	ora #SND_SELWRITE		; Select mode for writing dat
c6be : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             	
c6c1 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6c3 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6c6 : 68               [ 4] 	pla
                             	
c6c7 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   33
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* snd_get
                             ;* Get AY register X to Y
                             ;* Input : X = Reg no
                             ;* Output : Y = Value
                             ;* Regs affected : None
                             ;****************************************
c6c8 :                       snd_get
c6c8 : 48               [ 3] 	pha
                             
c6c9 : a9ff             [ 2] 	lda #0xff				; Set Port A to output
c6cb : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6ce : 8e8104           [ 4] 	stx SND_ADBUS			; Put X on the sound bus (X = re
                             
c6d1 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6d4 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6d6 : 0942             [ 2] 	ora #SND_SELSETADDR		; Select AY mode to latch a
c6d8 : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6db : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6dd : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6e0 : a900             [ 2] 	lda #0x00				; Set Port A to input
c6e2 : 8d8304           [ 4] 	sta IO_1 + DDRA
                             
c6e5 : ad8004           [ 4] 	lda SND_MODE			; Need to preserve contents of ot
c6e8 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6ea : 0940             [ 2] 	ora #SND_SELREAD		; Select mode for reading data
c6ec : 8d8004           [ 4] 	sta SND_MODE			; This write will process the dat
                             
c6ef : ac8104           [ 4] 	ldy SND_ADBUS			; Get value in to Y
                             	
c6f2 : 29bd             [ 2] 	and #SND_DESELECT_MASK	; Mask off mode bits
c6f4 : 8d8004           [ 4] 	sta SND_MODE			; This write will deselect the AY
                             
c6f7 : 68               [ 4] 	pla
                             	
c6f8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* snd_get_joy0
                             ;* Return value of joystick 0
                             ;* Input : None
                             ;* Output : Y = Value
                             ;* Regs affected : X
                             ;****************************************
c6f9 :                       snd_get_joy0
c6f9 : 48               [ 3] 	pha
c6fa : 48               [ 3] 	pha
c6fb :                       snd_get_joy0_retry
c6fb : 7a               [ 4] 	ply
c6fc : a20f             [ 2] 	ldx #SND_REG_IOB		; Joystick is plugged in to IO
c6fe : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c701 : 5a               [ 3] 	phy						; Put on stack
c702 : 20c8c6           [ 6] 	jsr snd_get				; Get IOB, result in Y
c705 : 98               [ 2] 	tya
c706 : ba               [ 2] 	tsx						; Get stack pointer
c707 : dd0101           [ 4] 	cmp 0x101,x				; Compare with stack value
c70a : d0ef             [ 4] 	bne snd_get_joy0_retry	; If not equal, try again
c70c : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page   34
---------------------------------- bank1.s -----------------------------------

c70d : 68               [ 4] 	pla
c70e : 60               [ 6] 	rts
                             
                             	include "kernel\main.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MAIN.S
                             ;*  This is where the main user program is execut
                             ;*  the 'kernel' once the system is initialised a
                             ;*  Today, main does very little - first shows th
                             ;*  boot up message, and then passes control to d
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
c70f :                       main
                             
c70f :                       infinity
c70f : 2046c0           [ 6] 	jsr _df_pg_dflat
c712 : 4c0fc7           [ 3] 	jmp infinity
                             
c715 :                       msg_hello_world
                             	;* build.s is generated by the assemble.bat file
                             	;* all it does is echo an assembler line to
                             	;* including the build date in the message.
                             	include "kernel\build.s"
c715 : 4275696c64203a..       db "Build : 28-01-2025\r"
c728 : 3132384b204272..       db "128K Breadboard Computer\r"
c741 : 42792040363530..       db "By @6502Nerd\r"
c74e : 436f7079726967..       db "Copyright (c) 2025\r",0
                             
                             
                             	include "kernel\irq.s"
                             	
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  IRQ.S
                             ;*	This is the IRQ handler - handles both the ver
                             ;*  blank interrupt from the VDP as well as softw
                             ;*  
                             ;*  As the handler has to be in every bank and it
                             ;*  accesses the VDP, then low level VDP routines
                             ;*  bundled in this file to ensure they are alway
                             ;*  without a bank switch being needed (which is 
                             ;************************************************
                             
                             ;* NMI handler installs to handle serial receive 
c762 :                       init_nmi
AS65 Assembler for R6502 [1.42].                                     Page   35
---------------------------------- bank1.s -----------------------------------

                             	; Core IRQ handler
c762 : a977             [ 2] 	lda #lo(nmi)
c764 : 8d000c           [ 4] 	sta int_nmi
c767 : a9c7             [ 2] 	lda #hi(nmi)
c769 : 8d010c           [ 4] 	sta int_nmi+1
                             
c76c : a9f5             [ 2] 	lda #lo(null_handler)
c76e : 8d0a0c           [ 4] 	sta int_usercia1
c771 : a9c7             [ 2] 	lda #hi(null_handler)
c773 : 8d0b0c           [ 4] 	sta int_usercia1+1
                             
c776 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c777 :                       call_nmi_master
                             ;	jmp (int_nmi)
                             
                             ;* Master NMI handler
                             ;* 6551 uses this - fills the receive buffer
                             ;* VIA 2 uses this- user interrupt
c777 :                       nmi
c777 : 48               [ 3] 	pha
                             
c778 : ad8105           [ 4] 	lda SER_STATUS				; Read status register (clears
c77b : 100c             [ 3] 	bpl	nmi_skip_acia			; If no interrupt don't do a
                             
c77d : 5a               [ 3] 	phy
c77e : ad8005           [ 4] 	lda SER_DATA				; Read the data register of 6551
c781 : a403             [ 3] 	ldy ser_last				; Put byte in last position of F
c783 : 990008           [ 5] 	sta ser_buf,y
c786 : e603             [ 5] 	inc ser_last				; Advance position of last
                             
c788 : 7a               [ 4] 	ply
c789 :                       nmi_skip_acia
                             	;* Try PIA1 first for rapid Timer handling
c789 : ad8d04           [ 4] 	lda IO_1 + IFR
c78c : 102c             [ 3] 	bpl nmi_fin
c78e : 5a               [ 3] 	phy
c78f : da               [ 3] 	phx
                             	; Reset interrupt by reading T1C-L
c790 : ad8404           [ 4] 	lda IO_1+T1CL
                             	; Swtich to RAM bank 2 don't touch anything else
c793 : ad0004           [ 4] 	lda IO_0+PRB
c796 : 48               [ 3] 	pha                     ; Remember the bank #
c797 : 29cf             [ 2] 	and #0b11001111
c799 : 0920             [ 2] 	ora #0b00100000
c79b : 8d0004           [ 4] 	sta IO_0+PRB
                             	; Switch out ROM for RAM
c79e : ad8004           [ 4] 	lda IO_1+PRB                    ; Get current RO
c7a1 : 48               [ 3] 	pha
c7a2 : 29df             [ 2] 	and #(0xff ^ MM_DIS)            ; Switch off ROM
c7a4 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
c7a7 : ee4c0c           [ 6] 	inc pt3_int 				  	; Set PT3 interrupt flag
c7aa : 20f1c7           [ 6] 	jsr call_irq_usercia1			; Call user cia1 handler
c7ad : 9c4c0c           [ 4] 	stz pt3_int 				  	; Clear PT3 interrupt flag
                             	; Restore ROM
c7b0 : 68               [ 4] 	pla                             ; Get original p
c7b1 : 8d8004           [ 4] 	sta IO_1+PRB                    ; Update port to
                             	; Restore RAM bank
c7b4 : 68               [ 4] 	pla                             ; Get original p
c7b5 : 8d0004           [ 4] 	sta IO_0+PRB                    ; Update port to
c7b8 : fa               [ 4] 	plx
AS65 Assembler for R6502 [1.42].                                     Page   36
---------------------------------- bank1.s -----------------------------------

c7b9 : 7a               [ 4] 	ply
c7ba :                       nmi_fin
c7ba : 68               [ 4] 	pla
c7bb : 40               [ 6] 	rti
                             
                             
                             ;* Obviously this can only be done with
                             ;* interrupts disabled!
c7bc :                       init_irq
                             	; Core IRQ handler
c7bc : a9f6             [ 2] 	lda #lo(irq)
c7be : 8d020c           [ 4] 	sta int_irq
c7c1 : a9c7             [ 2] 	lda #hi(irq)
c7c3 : 8d030c           [ 4] 	sta int_irq+1
                             	
                             	; Core BRK handler
c7c6 : a91c             [ 2] 	lda #lo(irq_brk)
c7c8 : 8d040c           [ 4] 	sta int_brk
c7cb : a9c8             [ 2] 	lda #hi(irq_brk)
c7cd : 8d050c           [ 4] 	sta int_brk+1
                             
                             	; User handlers for VDP, PIA0 interrupts
c7d0 : a9f5             [ 2] 	lda #lo(null_handler)
c7d2 : 8d060c           [ 4] 	sta int_uservdp
c7d5 : a9c7             [ 2] 	lda #hi(null_handler)
c7d7 : 8d070c           [ 4] 	sta int_uservdp+1
                             
c7da : a9f5             [ 2] 	lda #lo(null_handler)
c7dc : 8d080c           [ 4] 	sta int_usercia0
c7df : a9c7             [ 2] 	lda #hi(null_handler)
c7e1 : 8d090c           [ 4] 	sta int_usercia0+1
                             
c7e4 : 60               [ 6] 	rts
                             
                             ;* Calls the master IRQ handler
c7e5 :                       call_irq_master
c7e5 : 6c020c           [ 6] 	jmp (int_irq)
                             	
                             ;* Calls the BRK handler
c7e8 :                       call_irq_brk
c7e8 : 6c040c           [ 6] 	jmp (int_brk)
                             
                             ;* Call the userVDP handler
c7eb :                       call_irq_uservdp
c7eb : 6c060c           [ 6] 	jmp (int_uservdp)
                             	
                             ;* Call the user CIA0 handler
c7ee :                       call_irq_usercia0
c7ee : 6c080c           [ 6] 	jmp (int_usercia0)
                             
                             ;* Call the user CIA1 handler
c7f1 :                       call_irq_usercia1
c7f1 : 6c0a0c           [ 6] 	jmp (int_usercia1)
                             	
                             ;* null interrupt
c7f4 :                       null_irq
c7f4 : 40               [ 6] 	rti
                             
                             ;* null handler
c7f5 :                       null_handler
c7f5 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   37
---------------------------------- bank1.s -----------------------------------

                             
                             ;* Master IRQ handler
c7f6 :                       irq
                             	_pushAXY
                             
                             
                             	; Check if IRQ or BRK
                             	; load P from stack in to A
c7f9 : ba               [ 2] 	tsx
c7fa : bd0401           [ 4] 	lda 0x104,x
                             	; BRK bit set?
c7fd : 2910             [ 2] 	and #0x10
c7ff : d0e7             [ 3] 	bne call_irq_brk
                             	
c801 : 18               [ 2] 	clc						; Standard behaviour
                             	
                             	;* Try VDP next
c802 :                       irq_check_vdp	
c802 : ad0105           [ 4] 	lda VDP_STATUS			; Read status register
c805 : 1009             [ 3] 	bpl	irq_check_cia0		; Skip if not VBLANK
c807 : 20ebc7           [ 6] 	jsr call_irq_uservdp	; Call use VDP handler
c80a : 2069c8           [ 6] 	jsr int_vdp_handler		; Call  OS VDP handler
c80d : 2047c8           [ 6] 	jsr int_kb_handler		; Call OS cia0 handler (keyb
                             
                             	;* Try VIA0 last as it's keyboard (low speed)
c810 :                       irq_check_cia0
c810 : ad0d04           [ 4] 	lda IO_0 + IFR
c813 : 1003             [ 3] 	bpl irq_fin
c815 : 20eec7           [ 6] 	jsr call_irq_usercia0	; Call user cia0 handler
                             
c818 :                       irq_fin
                             	_pullAXY
                             
c81b : 40               [ 6] 	rti
                             	
                             ;* Handle BRK
c81c :                       irq_brk
                             	; Handle BRK
                             	; Get PCL,H minus 2 gives the BRK instruction ad
c81c : 38               [ 2] 	sec
c81d : bd0501           [ 4] 	lda 0x0105,x
c820 : e902             [ 2] 	sbc #2
c822 : 8598             [ 3] 	sta df_brkpc
c824 : bd0601           [ 4] 	lda 0x0106,x
c827 : e900             [ 2] 	sbc #0
c829 : 8599             [ 3] 	sta df_brkpc+1
                             	; Get the byte pointed to by old PC
                             	; which is 1 on from the BRK
c82b : a001             [ 2] 	ldy #1
c82d : b198             [ 5] 	lda (df_brkpc),y
c82f : 859a             [ 3] 	sta df_brkval
c831 : 8593             [ 3] 	sta errno
                             	; now update the return address
c833 : a596             [ 3] 	lda df_pc
c835 : 9d0501           [ 5] 	sta 0x105,x
c838 : a597             [ 3] 	lda df_pc+1
c83a : 9d0601           [ 5] 	sta 0x106,x
                             	
                             	_pullAXY
                             
                             	; Save the registers in temp area
c840 : 8579             [ 3] 	sta num_a
AS65 Assembler for R6502 [1.42].                                     Page   38
---------------------------------- bank1.s -----------------------------------

c842 : 867a             [ 3] 	stx num_a+1
c844 : 847b             [ 3] 	sty num_a+2
                             	; when RTI occurs:
                             	;  will return to error handler
                             	;  df_brkval will contain signature
c846 : 40               [ 6] 	rti
                             	
                             ;****************************************
                             ;* int_kb_handler
                             ;* Keyboard interrupt handler
                             ;****************************************
c847 :                       int_kb_handler	
c847 : a52b             [ 3] 	lda kb_deb				; If keyboard pressed is debounce 
c849 : d00d             [ 3] 	bne int_skip_scan		; If not zero, then don't che
c84b : ad0d04           [ 4] 	lda IO_0 + IFR			; Check status register CIA0
c84e : 2901             [ 2] 	and #IFR_CA2			; Keyboard pressed?
c850 : f00c             [ 3] 	beq int_keys_up
c852 :                       int_do_read
c852 : 8530             [ 3] 	sta kb_pressed			; Put non-zero in to this flag
c854 : a52f             [ 3] 	lda kb_debounce			; Set debounce
c856 : 852b             [ 3] 	sta kb_deb
c858 :                       int_skip_scan
c858 : a901             [ 2] 	lda #IFR_CA2			; Clear CA2
c85a : 8d0d04           [ 4] 	sta IO_0 + IFR
c85d : 60               [ 6] 	rts
c85e :                       int_keys_up					; No key pressed
c85e : 6427             [ 3] 	stz kb_raw				; Using 65c02 stz opcode
c860 : 6428             [ 3] 	stz kb_last
c862 : 6429             [ 3] 	stz kb_code
c864 : 642b             [ 3] 	stz kb_deb
c866 : 642c             [ 3] 	stz kb_rep
c868 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* int_vdp_handler
                             ;* VDP interrupt handler
                             ;****************************************
c869 :                       int_vdp_handler
c869 : 2095c8           [ 6] 	jsr update_timers	; If it is then update system 
                             
c86c : a506             [ 3] 	lda vdp_curoff		; Is cursor enabled?
c86e : d024             [ 3] 	bne int_vdp_fin		; Skip if not
                             
c870 : c607             [ 5] 	dec vdp_curstat		; Decrement VDP counter
c872 : a507             [ 3] 	lda vdp_curstat		; Check it
c874 : 297f             [ 2] 	and #0x7f			; If bottom 7 bits !=0
c876 : d01c             [ 3] 	bne int_vdp_fin		; No flashing to be done
c878 : a507             [ 3] 	lda vdp_curstat		; Invert top bit (bottoms bits=
c87a : 4990             [ 2] 	eor #0x80+VDP_FLASH	; Start counter again
c87c : 8507             [ 3] 	sta vdp_curstat		
                             
c87e : 18               [ 2] 	clc					; Add offset for cursor address in vram
c87f : a520             [ 3] 	lda gr_scrngeom+gr_cur_ptr
c881 : 651d             [ 3] 	adc gr_scrngeom+gr_cur_off
c883 : aa               [ 2] 	tax
c884 : a521             [ 3] 	lda gr_scrngeom+gr_cur_ptr+1
c886 : 6900             [ 2] 	adc #0
                             
c888 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	
c88b : a507             [ 3] 	lda vdp_curstat
c88d : 2980             [ 2] 	and #0x80
AS65 Assembler for R6502 [1.42].                                     Page   39
---------------------------------- bank1.s -----------------------------------

c88f : 4508             [ 3] 	eor vdp_curval		; EOR top bit with what is under
c891 : 2085c6           [ 6] 	jsr vdp_wr_vram
c894 :                       int_vdp_fin	
c894 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* update_timers
                             ;* Update 24 bit timer and debounce counters
                             ;****************************************
c895 :                       update_timers
c895 : e604             [ 5] 	inc vdp_int_cnt
c897 : d002             [ 3] 	bne inc_kb_timers
c899 : e605             [ 5] 	inc vdp_int_cnt+1
c89b :                       inc_kb_timers
c89b : a62b             [ 3] 	ldx kb_deb			; Is debounce 0?
c89d : f002             [ 3] 	beq skip_kb_deb
c89f : c62b             [ 5] 	dec kb_deb
c8a1 :                       skip_kb_deb
c8a1 : a62c             [ 3] 	ldx kb_rep			; Is repeat timer 0?
c8a3 : f002             [ 3] 	beq skip_kb_rep
c8a5 : c62c             [ 5] 	dec kb_rep
c8a7 :                       skip_kb_rep
c8a7 : 60               [ 6] 	rts
                             	
                             
                             	include "utils\misc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  MISC.S
                             ;*  Miscellaneous module for commmon utility func
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* long_delay
                             ;* Long delay (X decremented every 0.125ms)
                             ;* Input : X = number of 0.125ms ticks to wait (m
                             ;* Output : None
                             ;* Regs affected : None
                             ;****************************************
c8a8 :                       long_delay
c8a8 : 08               [ 3] 	php
                             	_pushAXY
                             
                             	
c8ac : a000             [ 2] 	ldy #0x00
c8ae :                       long_delay_1
c8ae : ea               [ 2] 	nop
c8af : ea               [ 2] 	nop
c8b0 : ea               [ 2] 	nop
c8b1 : ea               [ 2] 	nop
c8b2 : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page   40
---------------------------------- bank1.s -----------------------------------

c8b3 : d0f9             [ 3] 	bne long_delay_1
c8b5 : ca               [ 2] 	dex
c8b6 : d0f6             [ 3] 	bne long_delay_1
                             
                             	_pullAXY
                             
c8bb : 28               [ 4] 	plp
                             	
c8bc : 60               [ 6] 	rts
                             
                             
                             	include "utils\utils.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  UTILS.S
                             ;*  This module implements various utility functi
                             ;*  converting from ASCII to binary form for numb
                             ;*  vice-versa to allow humans to actually be abl
                             ;*  and read numbers in their prefered form!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
c8bd :                       utilPrintSPC
c8bd : 48               [ 3] 	pha
c8be : a920             [ 2] 	lda #' '
c8c0 : 20c0c5           [ 6] 	jsr io_put_ch
c8c3 : 68               [ 4] 	pla
c8c4 : 60               [ 6] 	rts
                             
c8c5 :                       utilPrintCRLF
c8c5 : 48               [ 3] 	pha
c8c6 : a90d             [ 2] 	lda #UTF_CR
c8c8 : 20c0c5           [ 6] 	jsr io_put_ch
c8cb : 68               [ 4] 	pla
c8cc : 60               [ 6] 	rts
                             
c8cd :                       utilPrintA
c8cd : 8539             [ 3] 	sta tmp_d
c8cf : 48               [ 3] 	pha
c8d0 : 8a               [ 2] 	txa
c8d1 : 48               [ 3] 	pha
c8d2 : a539             [ 3] 	lda tmp_d
c8d4 : 20f2c8           [ 6] 	jsr str_a_to_x
c8d7 : 20c0c5           [ 6] 	jsr io_put_ch
c8da : 8a               [ 2] 	txa
c8db : 20c0c5           [ 6] 	jsr io_put_ch
c8de : 68               [ 4] 	pla
c8df : aa               [ 2] 	tax
c8e0 : 68               [ 4] 	pla
c8e1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* util_clr_mem
AS65 Assembler for R6502 [1.42].                                     Page   41
---------------------------------- bank1.s -----------------------------------

                             ;* Clear a block of main ram
                             ;* Input : X, A = Block start, Y = Block size
                             ;* Regs affected : P
                             ;****************************************
c8e2 :                       util_clr_mem
c8e2 : 48               [ 3] 	pha
c8e3 : 5a               [ 3] 	phy
c8e4 : 8633             [ 3] 	stx tmp_v1
c8e6 : 8534             [ 3] 	sta tmp_v1+1
c8e8 : a900             [ 2] 	lda #0
c8ea :                       mem_clr_byte
c8ea : 88               [ 2] 	dey
c8eb : 9133             [ 5] 	sta (tmp_v1),y
c8ed : d0fb             [ 3] 	bne mem_clr_byte
c8ef : 7a               [ 4] 	ply
c8f0 : 68               [ 4] 	pla
c8f1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* str_a_to_x
                             ;* Convert accumulator to hex string
                             ;* Input : A = Byte to convert
                             ;* Output : A = High Char, X = Low Char
                             ;* Regs affected : P
                             ;****************************************
c8f2 :                       str_a_to_x
c8f2 : 48               [ 3] 	pha					; Save the byte using later on
c8f3 : 290f             [ 2] 	and #0x0f			; Mask low nibble
c8f5 : 18               [ 2] 	clc
c8f6 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c8f8 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c8fa : 9002             [ 3] 	bcc skip_a_f_1		; skip a-f adjustment
c8fc : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c8fe :                       skip_a_f_1
c8fe : aa               [ 2] 	tax					; Low char is in X
c8ff : 68               [ 4] 	pla					; Get byte back
c900 : 4a               [ 2] 	lsr a				; Make high nibble low
c901 : 4a               [ 2] 	lsr a
c902 : 4a               [ 2] 	lsr a
c903 : 4a               [ 2] 	lsr a
c904 : 18               [ 2] 	clc
c905 : 6930             [ 2] 	adc #'0'			; Convert to UTF
c907 : c93a             [ 2] 	cmp #('9'+1)		; If A greater than '9' then
c909 : 9002             [ 3] 	bcc skip_a_f_2		; skip a-f adjustment
c90b : 6926             [ 2] 	adc #0x26			; Add 27 (6+C) to get in to A-F rang
c90d :                       skip_a_f_2
                             
c90d : 18               [ 2] 	clc					; No error
c90e : 60               [ 6] 	rts					; A high nibble
                             
                             ;****************************************
                             ;* str_x_to_a
                             ;* Convert hex string to accumulator
                             ;* Input : A = High Char, X = Low Char
                             ;* Output : A = Value
                             ;* Regs affected : P
                             ;****************************************
c90f :                       str_x_to_a
c90f : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c911 : 38               [ 2] 	sec					; Process high char in A
c912 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c914 : c90a             [ 2] 	cmp #10				; If A < 10 then
AS65 Assembler for R6502 [1.42].                                     Page   42
---------------------------------- bank1.s -----------------------------------

c916 : 9002             [ 3] 	bcc skip_x_f_1		; skip a-f adjustment
c918 : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c91a :                       skip_x_f_1
c91a : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c91c : b01d             [ 3] 	bcs	str_x_to_a_err	; Error if not
                             
c91e : 0a               [ 2] 	asl a				; This is the high nibble
c91f : 0a               [ 2] 	asl a
c920 : 0a               [ 2] 	asl a
c921 : 0a               [ 2] 	asl a
c922 : 48               [ 3] 	pha					; Save the high nibble
c923 : 8a               [ 2] 	txa					; Now process the low char in X
c924 : 0920             [ 2] 	ora #0x20			; Make alpha in to lower case
c926 : 38               [ 2] 	sec
c927 : e930             [ 2] 	sbc #'0'			; Convert to hex nibble
c929 : c90a             [ 2] 	cmp #10				; If A < 10 then
c92b : 9002             [ 3] 	bcc skip_x_f_2		; skip a-f adjustment
c92d : e927             [ 2] 	sbc #0x27			; Sub 7 to get in to A-F range
c92f :                       skip_x_f_2
c92f : c910             [ 2] 	cmp #0x10			; Nibble should be <= 0x0f
c931 : b007             [ 3] 	bcs	str_x_to_a_errl	; Error if not
                             
c933 : 8579             [ 3] 	sta num_a			; Store low nibble in temp
c935 : 68               [ 4] 	pla					; Get high nibble
c936 : 0579             [ 3] 	ora num_a			; OR with low nibble
                             
c938 : 18               [ 2] 	clc					; No error
c939 : 60               [ 6] 	rts					; A contains value
                             
c93a :                       str_x_to_a_errl
c93a : 68               [ 4] 	pla
c93b :                       str_x_to_a_err
                             	SWBRK CMD_ERR_VAL
                             
                             
                             ;****************************************
                             ;* con_n_to_a
                             ;* Convert numeric string to accumulator (unsigne
                             ;* Input : Pointer to string (X=L, A=H), Y = Sour
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* A = Source type detected
                             ;* Regs affected : CS = Error
                             ;****************************************
c93d :                       con_n_to_a
c93d : 8685             [ 3] 	stx num_tmp
c93f : 8586             [ 3] 	sta num_tmp+1
c941 : 6479             [ 3] 	stz num_a
c943 : 647a             [ 3] 	stz num_a+1
c945 : c000             [ 2] 	cpy #NUM_ANY
c947 : f014             [ 3] 	beq con_n_to_a_detect
c949 : 88               [ 2] 	dey
c94a : d003             [ 3] 	bne con_n_not_dec
c94c :                       con_dec_jmp
c94c : 4ce0c9           [ 3] 	jmp con_dec_to_a_int
c94f :                       con_n_not_dec
c94f : 88               [ 2] 	dey
c950 : d003             [ 3] 	bne con_n_not_hex
c952 :                       con_hex_jmp
c952 : 4c77c9           [ 3] 	jmp con_hex_to_a_int
c955 :                       con_n_not_hex
c955 : 88               [ 2] 	dey
c956 : d003             [ 3] 	bne con_n_err
AS65 Assembler for R6502 [1.42].                                     Page   43
---------------------------------- bank1.s -----------------------------------

c958 :                       con_bin_jmp
c958 : 4cb6c9           [ 3] 	jmp con_bin_to_a_int
c95b :                       con_n_err
c95b : 38               [ 2] 	sec
c95c : 60               [ 6] 	rts
c95d :                       con_n_to_a_detect
c95d : b285             [ 5] 	lda (num_tmp)
c95f : c930             [ 2] 	cmp #'0'
c961 : d0e9             [ 3] 	bne con_dec_jmp
c963 : a001             [ 2] 	ldy #1
c965 : b185             [ 5] 	lda (num_tmp),y
c967 : 0920             [ 2] 	ora #0x20
c969 : c978             [ 2] 	cmp #'x'
c96b : f0e5             [ 3] 	beq con_hex_jmp
c96d : c962             [ 2] 	cmp #'b'
c96f : f0e7             [ 3] 	beq con_bin_jmp
c971 : 80d9             [ 3] 	bra con_dec_jmp
                             
                             ;****************************************
                             ;* con_hex_to_a
                             ;* Convert hex string to accumulator (unsigned)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c973 :                       con_hex_to_a
c973 : 8685             [ 3] 	stx num_tmp
c975 : 8586             [ 3] 	sta num_tmp+1
c977 :                       con_hex_to_a_int
c977 : a205             [ 2] 	ldx #5			; > 4 digits will cause error
c979 : a002             [ 2] 	ldy #2			; start at first digit
c97b :                       con_hex_digit
c97b : b185             [ 5] 	lda (num_tmp),y
c97d : 0920             [ 2] 	ora #0x20					; Make alpha in to lower case
c97f : 38               [ 2] 	sec							; Process high char in A
c980 : e930             [ 2] 	sbc #'0'					; Convert to hex nibble
c982 : c90a             [ 2] 	cmp #10						; If A < 10 then
c984 : 9002             [ 3] 	bcc con_hex_skip_x_f_1		; skip a-f adjustment
c986 : e927             [ 2] 	sbc #0x27					; Sub 7 to get in to A-F range
c988 :                       con_hex_skip_x_f_1
c988 : c910             [ 2] 	cmp #0x10					; Nibble should be <= 0x0f
c98a : b01c             [ 3] 	bcs	con_hex_done			; Potentially done if not
c98c : 48               [ 3] 	pha
                             	; make room for lo nibble
c98d : 0679             [ 5] 	asl num_a
c98f : 267a             [ 5] 	rol num_a+1
c991 : 0679             [ 5] 	asl num_a
c993 : 267a             [ 5] 	rol num_a+1
c995 : 0679             [ 5] 	asl num_a
c997 : 267a             [ 5] 	rol num_a+1
c999 : 0679             [ 5] 	asl num_a
c99b : 267a             [ 5] 	rol num_a+1
                             	; save in low nibble
c99d : 68               [ 4] 	pla
c99e : 0579             [ 3] 	ora num_a
c9a0 : 8579             [ 3] 	sta num_a
c9a2 : c8               [ 2] 	iny
c9a3 : ca               [ 2] 	dex
c9a4 : d0d5             [ 3] 	bne con_hex_digit
                             	; if got to a 5th digit then error
c9a6 :                       con_hex_err
c9a6 : 38               [ 2] 	sec
AS65 Assembler for R6502 [1.42].                                     Page   44
---------------------------------- bank1.s -----------------------------------

c9a7 : 60               [ 6] 	rts
                             	; found a non-hex digit
c9a8 :                       con_hex_done
                             	; if no digits processed then error
c9a8 : c002             [ 2] 	cpy #2
c9aa : f0fa             [ 3] 	beq con_hex_err
                             	; move y to x for digits processed
c9ac : 98               [ 2] 	tya
c9ad : aa               [ 2] 	tax
c9ae : a902             [ 2] 	lda #NUM_HEX
c9b0 : 18               [ 2] 	clc
c9b1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_bin_to_a
                             ;* Convert binary string to accumulator (unsigned
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
                             ;****************************************
c9b2 :                       con_bin_to_a
c9b2 : 8685             [ 3] 	stx num_tmp
c9b4 : 8586             [ 3] 	sta num_tmp+1
c9b6 :                       con_bin_to_a_int
c9b6 : a002             [ 2] 	ldy #2
c9b8 : a211             [ 2] 	ldx #17						; Max 16 binary digits allowed
c9ba :                       con_bin_digit
c9ba : b185             [ 5] 	lda (num_tmp),y
c9bc : c930             [ 2] 	cmp #'0'
c9be : 9010             [ 3] 	bcc con_bin_done
c9c0 : c932             [ 2] 	cmp #'1'+1
c9c2 : b00c             [ 3] 	bcs con_bin_done
                             	; sets C if '1' else resets C
c9c4 : 69cf             [ 2] 	adc #0xff-'0'
                             	; shift in digit
c9c6 : 2679             [ 5] 	rol num_a
c9c8 : 267a             [ 5] 	rol num_a+1
c9ca : c8               [ 2] 	iny
c9cb : ca               [ 2] 	dex
c9cc : d0ec             [ 3] 	bne con_bin_digit
                             	; on the 17th digit is too much, error
c9ce : 800a             [ 3] 	bra con_bin_err
c9d0 :                       con_bin_done
                             	; didn't process any digit = error
c9d0 : c002             [ 2] 	cpy #2
c9d2 : f006             [ 3] 	beq con_bin_err
                             	; put digits processed in to X
c9d4 : 98               [ 2] 	tya
c9d5 : aa               [ 2] 	tax
c9d6 : a903             [ 2] 	lda #NUM_BIN
c9d8 : 18               [ 2] 	clc
c9d9 : 60               [ 6] 	rts
c9da :                       con_bin_err
c9da : 38               [ 2] 	sec
c9db : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* con_d_to_a
                             ;* Convert decimal string to accumulator (SIGNED)
                             ;* Input : Pointer to string (X=L, A=H)
                             ;* Output : num_a, num_a+1 contains word, X=numbe
                             ;* Regs affected : CS = Error
AS65 Assembler for R6502 [1.42].                                     Page   45
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
c9dc :                       con_dec_to_a
c9dc : 8685             [ 3] 	stx num_tmp
c9de : 8586             [ 3] 	sta num_tmp+1
c9e0 :                       con_dec_to_a_int
c9e0 : a000             [ 2] 	ldy #0
                             	; Detect if leading minus sign
c9e2 : b285             [ 5] 	lda (num_tmp)
c9e4 : c92d             [ 2] 	cmp #'-'
c9e6 : d001             [ 3] 	bne str_d_find_end
                             	; skip over minus if found
c9e8 : c8               [ 2] 	iny
c9e9 :                       str_d_find_end
c9e9 : b185             [ 5] 	lda (num_tmp),y
c9eb : c930             [ 2] 	cmp #'0'
c9ed : 9007             [ 3] 	bcc str_d_found_end
c9ef : c93a             [ 2] 	cmp #'9'+1
c9f1 : b003             [ 3] 	bcs str_d_found_end
c9f3 : c8               [ 2] 	iny
c9f4 : 80f3             [ 3] 	bra str_d_find_end
c9f6 :                       str_d_found_end
c9f6 : c007             [ 2] 	cpy #6+1			; Biggest int is 6 chars
c9f8 : b052             [ 4] 	bcs str_d_error		; e.g. -32767 including minus
c9fa : 8488             [ 3] 	sty num_tmp+3
c9fc : 6487             [ 3] 	stz num_tmp+2
c9fe : 6479             [ 3] 	stz num_a
ca00 : 647a             [ 3] 	stz num_a+1
ca02 :                       str_d_process_digit
ca02 : 88               [ 2] 	dey
ca03 : 3026             [ 3] 	bmi str_d_digits_done
                             
ca05 : b185             [ 5] 	lda (num_tmp),y
                             
ca07 : c92d             [ 2] 	cmp #'-'			; Got to minus sign?
ca09 : f020             [ 3] 	beq str_d_digits_done ; also done
                             
ca0b : 38               [ 2] 	sec
ca0c : e930             [ 2] 	sbc #'0'
                             	; Convert digit to number
                             	; and then offset in to
                             	; look up table of powers
ca0e : 18               [ 2] 	clc
ca0f : 0a               [ 2] 	asl a
ca10 : 6587             [ 3] 	adc num_tmp+2
                             	; X contains index to powers
ca12 : aa               [ 2] 	tax
ca13 : a579             [ 3] 	lda num_a
ca15 : 7d4eca           [ 4] 	adc str_d_powers,x
ca18 : 8579             [ 3] 	sta num_a
ca1a : a57a             [ 3] 	lda num_a+1
ca1c : 7d4fca           [ 4] 	adc str_d_powers+1,x
ca1f : 857a             [ 3] 	sta num_a+1
ca21 : b029             [ 3] 	bcs str_d_error
                             	; Move to next power of 10 index
ca23 : a587             [ 3] 	lda num_tmp+2
ca25 : 6914             [ 2] 	adc #20
ca27 : 8587             [ 3] 	sta num_tmp+2
ca29 : 80d7             [ 3] 	bra str_d_process_digit
ca2b :                       str_d_digits_done
                             	; check if minus
ca2b : b285             [ 5] 	lda (num_tmp)
ca2d : c92d             [ 2] 	cmp #'-'
AS65 Assembler for R6502 [1.42].                                     Page   46
---------------------------------- bank1.s -----------------------------------

ca2f : d011             [ 3] 	bne str_d_skip_neg
ca31 : a688             [ 3] 	ldx num_tmp+3		; Must have >= 2 chars
ca33 : e002             [ 2] 	cpx #2				; else it's an error
ca35 : 9015             [ 3] 	bcc str_d_error
ca37 : a679             [ 3] 	ldx num_a
ca39 : a57a             [ 3] 	lda num_a+1
ca3b : 20b2ca           [ 6] 	jsr twos_complement
ca3e : 8679             [ 3] 	stx num_a
ca40 : 857a             [ 3] 	sta num_a+1
ca42 :                       str_d_skip_neg
ca42 : a688             [ 3] 	ldx num_tmp+3
ca44 : e001             [ 2] 	cpx #1				; must be at least 1 char
ca46 : 9004             [ 3] 	bcc str_d_error
ca48 : a901             [ 2] 	lda #NUM_DEC
ca4a : 18               [ 2] 	clc
ca4b : 60               [ 6] 	rts
ca4c :                       str_d_error
ca4c : 38               [ 2] 	sec
ca4d : 60               [ 6] 	rts
                             
ca4e :                       str_d_powers
ca4e : 00000100020003..      	dw	0, 1, 2, 3, 4, 5, 6, 7, 8, 9
ca62 : 00000a0014001e..      	dw	0, 10, 20, 30, 40, 50, 60, 70, 80, 90
ca76 : 00006400c8002c..      	dw	0, 100, 200, 300, 400, 500, 600, 700, 800, 90
ca8a : 0000e803d007b8..      	dw	0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 
ca9e : 00001027204e30..      	dw	0, 10000, 20000, 30000, 40000, 50000, 60000, 
                             	
                             
                             ;****************************************
                             ;* twos_complement
                             ;* Twos complement of X,A (X=low)
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : X,A in 2's complement
                             ;* Regs affected : P
                             ;****************************************
cab2 :                       twos_complement
cab2 : 49ff             [ 2] 	eor #0xff
cab4 : 48               [ 3] 	pha
cab5 : 8a               [ 2] 	txa
cab6 : 49ff             [ 2] 	eor #0xff
cab8 : aa               [ 2] 	tax
cab9 : 68               [ 4] 	pla
caba : e8               [ 2] 	inx
cabb : d001             [ 3] 	bne twos_complement_skip_X
cabd : 1a               [ 2] 	inc a
cabe :                       twos_complement_skip_X
cabe : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* int_to_bcd
                             ;* Convert A,X (signed int) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated
                             ;* Regs affected : None
                             ;****************************************
cabf :                       int_to_bcd
cabf : 08               [ 3] 	php
cac0 : 48               [ 3] 	pha
cac1 : da               [ 3] 	phx
                             
cac2 : 8685             [ 3] 	stx num_tmp
AS65 Assembler for R6502 [1.42].                                     Page   47
---------------------------------- bank1.s -----------------------------------

cac4 : 8586             [ 3] 	sta num_tmp+1
cac6 : c980             [ 2] 	cmp #0x80			; Negative?
cac8 : 9003             [ 3] 	bcc int_to_bcd_skip_neg
caca : 20b2ca           [ 6] 	jsr twos_complement
cacd :                       int_to_bcd_skip_neg
cacd : 6479             [ 3] 	stz num_a
cacf : 647a             [ 3] 	stz num_a+1
cad1 : 647b             [ 3] 	stz num_a+2
cad3 : 647c             [ 3] 	stz num_a+3
cad5 : a210             [ 2] 	ldx #16
cad7 : f8               [ 2] 	sed
cad8 :                       int_to_bcd_bit
cad8 : 0685             [ 5] 	asl num_tmp
cada : 2686             [ 5] 	rol num_tmp+1
cadc : a579             [ 3] 	lda num_a
cade : 6579             [ 3] 	adc num_a
cae0 : 8579             [ 3] 	sta num_a
cae2 : a57a             [ 3] 	lda num_a+1
cae4 : 657a             [ 3] 	adc num_a+1
cae6 : 857a             [ 3] 	sta num_a+1
cae8 : a57b             [ 3] 	lda num_a+2
caea : 657b             [ 3] 	adc num_a+2
caec : 857b             [ 3] 	sta num_a+2
caee : ca               [ 2] 	dex
caef : d0e7             [ 3] 	bne int_to_bcd_bit
                             	
caf1 : fa               [ 4] 	plx
caf2 : 68               [ 4] 	pla
caf3 : 28               [ 4] 	plp
caf4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* word_to_bcd
                             ;* Convert A,X (unsighed word) to BCD
                             ;* Input : X = Low byte, A = High Byte to convert
                             ;* Output : 3 bytes of num_a is updated as BCD
                             ;* Regs affected : None
                             ;****************************************
caf5 :                       word_to_bcd
caf5 : 08               [ 3] 	php
caf6 : 48               [ 3] 	pha
caf7 : da               [ 3] 	phx
                             
caf8 : 8685             [ 3] 	stx num_tmp
cafa : 8586             [ 3] 	sta num_tmp+1
cafc : 6479             [ 3] 	stz num_a
cafe : 647a             [ 3] 	stz num_a+1
cb00 : 647b             [ 3] 	stz num_a+2
cb02 : 647c             [ 3] 	stz num_a+3
cb04 : a210             [ 2] 	ldx #16			; 16 binary bits
cb06 : f8               [ 2] 	sed
cb07 :                       word_to_bcd_bit
cb07 : 0685             [ 5] 	asl num_tmp
cb09 : 2686             [ 5] 	rol num_tmp+1
cb0b : a579             [ 3] 	lda num_a
cb0d : 6579             [ 3] 	adc num_a
cb0f : 8579             [ 3] 	sta num_a
cb11 : a57a             [ 3] 	lda num_a+1
cb13 : 657a             [ 3] 	adc num_a+1
cb15 : 857a             [ 3] 	sta num_a+1
cb17 : a57b             [ 3] 	lda num_a+2
cb19 : 657b             [ 3] 	adc num_a+2
AS65 Assembler for R6502 [1.42].                                     Page   48
---------------------------------- bank1.s -----------------------------------

cb1b : 857b             [ 3] 	sta num_a+2
cb1d : ca               [ 2] 	dex
cb1e : d0e7             [ 3] 	bne word_to_bcd_bit
                             	
cb20 : fa               [ 4] 	plx
cb21 : 68               [ 4] 	pla
cb22 : 28               [ 4] 	plp
cb23 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str_ch
                             ;* Helper routine to stuff decimal char in to num
                             ;* Input : A=BCD digit, Y=num_buf index, C=insert
                             ;* Output : num_buf in ASCII, A=ASCII digit
                             ;* Regs affected : C cleared if non-zero
                             ;****************************************
cb24 :                       int_to_str_ch
cb24 : 290f             [ 2] 	and #0xf
cb26 : 0930             [ 2] 	ora #0x30					; Convert to ascii
cb28 : 4930             [ 2] 	eor #0x30					; Check if zero digit
cb2a : d005             [ 3] 	bne int_to_str_nz			; If not zero definitely sto
cb2c : b003             [ 3] 	bcs int_to_str_nz			; Also if C=1
cb2e : 4930             [ 2] 	eor #0x30					; Restore A
cb30 : 60               [ 6] 	rts							; Return without storing anything
cb31 :                       int_to_str_nz
cb31 : 4930             [ 2] 	eor #0x30					; Restore A
cb33 : 998900           [ 5] 	sta num_buf,y
cb36 : c8               [ 2] 	iny
cb37 : 38               [ 2] 	sec							; Set C as a non-zero encountered
cb38 :                       int_to_str_ch_fin
cb38 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* int_to_str
                             ;* Convert int to string
                             ;* Input : in X,A (low,high), C=leading zeros wan
                             ;* Output : num_buf in ASCII 6 digits + zero term
                             ;* Regs affected : P
                             ;****************************************
cb39 :                       int_to_str
                             	_pushAXY
                             
cb3c : a000             [ 2] 	ldy #0						; first pos of num_buf
cb3e : 0900             [ 2] 	ora #0						; Test A for sign bit
cb40 : 08               [ 3] 	php							; Remember C bit of P
cb41 : 100a             [ 3] 	bpl int_to_str_skip_neg		; Skip if not (postive 
cb43 : 20b2ca           [ 6] 	jsr twos_complement			; Flip X,A from 2s complem
cb46 : 48               [ 3] 	pha							; Remember A
cb47 : a92d             [ 2] 	lda #'-'					; Put in negative sign
cb49 : 8589             [ 3] 	sta num_buf
cb4b : c8               [ 2] 	iny							; Start at second buffer pos
cb4c : 68               [ 4] 	pla							; Restore A
cb4d :                       int_to_str_skip_neg
cb4d : 20f5ca           [ 6]  	jsr word_to_bcd				; Convert X,A to BCD
cb50 : a202             [ 2] 	ldx #2						; Start at BCD high byte
cb52 :                       int_str
cb52 : 28               [ 4] 	plp							; Get C but immediately
cb53 : 08               [ 3] 	php							; Save C (due to loop check later)
cb54 : b579             [ 4] 	lda num_a,x					; Get BCD digit
cb56 : 8590             [ 3] 	sta num_buf+7				; Save A it for the units later
cb58 : 4a               [ 2] 	lsr a						; Tens - shift to lower nibble
cb59 : 4a               [ 2] 	lsr a
AS65 Assembler for R6502 [1.42].                                     Page   49
---------------------------------- bank1.s -----------------------------------

cb5a : 4a               [ 2] 	lsr a
cb5b : 4a               [ 2] 	lsr a
cb5c : 28               [ 4] 	plp							; Get C
cb5d : 2024cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb60 : a590             [ 3] 	lda num_buf+7				; Get A for the units
cb62 : 2024cb           [ 6] 	jsr int_to_str_ch			; Put ASCII code in num_buf
cb65 : 08               [ 3] 	php							; Save C
cb66 : ca               [ 2] 	dex
cb67 : 10e9             [ 3] 	bpl int_str
cb69 : 28               [ 4] 	plp							; Check C
cb6a : b005             [ 3] 	bcs	int_to_str_fin			; If set then something pri
cb6c : a930             [ 2] 	lda #'0'					; Stuff a zero
cb6e : 8589             [ 3] 	sta num_buf					; Must be in first position..
cb70 : c8               [ 2] 	iny
cb71 :                       int_to_str_fin
cb71 : a900             [ 2] 	lda #0						; Terminator
cb73 : 998900           [ 5] 	sta num_buf,y
cb76 : c8               [ 2] 	iny
                             	_pullAXY
                             
cb7a : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* bcd_to_str
                             ;* Convert num_buf to chars
                             ;* Input : num_a in BCD format
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
                             ;bcd_to_str
                             ;	pha
                             ;	phx
                             ;	phy
                             ;
                             ;	ldx #5						; Index in to string
                             ;	ldy #0						; Current BCD digit
                             ;bcd_str
                             ;	lda num_a,y
                             ;	; Convert 1s digit of byte
                             ;	pha
                             ;	and #0xf
                             ;	clc
                             ;	adc #0x30
                             ;	sta num_buf,x
                             ;	; Convert 10s digit of byte
                             ;	pla
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	lsr a
                             ;	clc
                             ;	adc #0x30					; Convert to ASCII
                             ;	sta num_buf-1,x
                             ;	dex
                             ;	dex
                             ;	iny
                             ;	cpy #3						; 3 BCD digits max
                             ;	bne bcd_str
                             ;
                             ;	ply
AS65 Assembler for R6502 [1.42].                                     Page   50
---------------------------------- bank1.s -----------------------------------

                             ;	plx
                             ;	pla
                             ;	rts
                             	
                             ;****************************************
                             ;* out_bcd
                             ;* Output a bcd string in num_buf
                             ;* Input : num_buf has the ASCII
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII 6 digits
                             ;* Output is big endian, input is not, Y=digits p
                             ;* Regs affected : P
                             ;****************************************
                             ;out_bcd
                             ;	pha
                             ;	phx
                             ;	php
                             ;	ldy #0						; How many digits printed
                             ;	ldx #0						; Index in to string
                             ;out_bcd_digit
                             ;	lda num_buf,x
                             ;	cpy #0						; If not in leading zero mode
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	cmp #'0'					; else check if zero
                             ;	bne out_bcd_print			; No then go print
                             ;
                             ;	plp
                             ;	php
                             ;	bcc out_bcd_next			; If C=0 go to next digit, e
                             ;out_bcd_print
                             ;	iny
                             ;	jsr io_put_ch
                             ;out_bcd_next
                             ;	inx
                             ;	cpx #6
                             ;	bne out_bcd_digit
                             ;	cpy #0						; If nothing printed
                             ;	bne out_bcd_fin
                             ;	lda #'0'					; Need to put out 1 zero
                             ;	jsr io_put_ch
                             ;	iny
                             ;out_bcd_fin
                             ;	plp
                             ;	plx
                             ;	pla
                             ;	clc
                             ;	rts
                             	
                             ;****************************************
                             ;* str_a_to_d
                             ;* Convert X,A to decimal string in sevalptr
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 keep leading zeros else not
                             ;* Output : sevalptr in ASCII max 6 digits
                             ;*          Y=length including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb7b :                       str_a_to_d
cb7b : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page   51
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
                             ;* print_a_to_d
                             ;* Convert X,A to decimal string
                             ;* Input : X,A = number Low,High
                             ;* Input : C=1 print leading zeros else not
                             ;* Output : num_buf in ASCII max 6 digits
                             ;*          Y=digits printed including sign
                             ;* Output is big endian, input is not
                             ;* Regs affected : P
                             ;****************************************
cb7c :                       print_a_to_d
cb7c : 2039cb           [ 6] 	jsr int_to_str
cb7f : a000             [ 2] 	ldy #0
cb81 :                       print_a_to_d_ch
cb81 : b98900           [ 4] 	lda num_buf,y
cb84 : f006             [ 3] 	beq print_a_to_d_fin
cb86 : 20c0c5           [ 6] 	jsr io_put_ch
cb89 : c8               [ 2] 	iny
cb8a : d0f5             [ 3] 	bne print_a_to_d_ch
cb8c :                       print_a_to_d_fin
cb8c : 60               [ 6] 	rts
                             	
                             
                             ;* Reset vector points here - 6502 starts here
cb8d :                       init
                             ;	jmp init_test
                             	; First clear ram
                             ;	sei					; No need as disabled on startup
                             ;	cld					; No need as disabled on startup
cb8d : a2ff             [ 2] 	ldx #0xff			; Initialise stack pointer
cb8f : 9a               [ 2] 	txs
cb90 : 4cebcb           [ 3] 	jmp init_ram		; jmp not jsr to ram initialiser
cb93 :                       init_2					; init_ram will jump back to here
                             	
cb93 : 2099cb           [ 6] 	jsr kernel_init
                             
cb96 : 4c0fc7           [ 3] 	jmp main
                             
cb99 :                       kernel_init
cb99 : 2062c7           [ 6] 	jsr init_nmi		; Initialise NMI handling
cb9c : 20bcc7           [ 6] 	jsr init_irq		; Initialise IRQ handling
cb9f : 20dec1           [ 6] 	jsr _init_acia		; initialise the serial chip
                             	
cba2 : 20f6c1           [ 6] 	jsr _init_cia0		; initialise cia 0
cba5 : 200ec2           [ 6] 	jsr _init_cia1		; initialise cia 1
cba8 : 2026c5           [ 6] 	jsr _PT3INIT		; Load PT3 player code into shadow
cbab :                       kernel_test
cbab : 2056c2           [ 6] 	jsr _init_snd		; initialise the sound chip
cbae : 206ec2           [ 6] 	jsr _init_keyboard	; initialise keyboard timer s
cbb1 : 2036c4           [ 6] 	jsr _vdp_init		; initialise vdp
cbb4 : a900             [ 2] 	lda #0				; Default = 40 column mode - put on st
cbb6 : 48               [ 3] 	pha
cbb7 : a20e             [ 2] 	ldx #NV_MODE		; NV location for default text mod
cbb9 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location
cbbc : b00b             [ 3] 	bcs kernel_skip_nv	; If bad NV ram then skip try
cbbe : aa               [ 2] 	tax					; Save the mode temporarily
cbbf : 68               [ 4] 	pla					; Get the default mode from stack
cbc0 : 8a               [ 2] 	txa					; And push the NV mode that was read
cbc1 : 48               [ 3] 	pha
cbc2 : a20f             [ 2] 	ldx #NV_COLOUR		; NV location for the default co
cbc4 : 2096c4           [ 6] 	jsr _rtc_nvread		; Try to read location (assumed
cbc7 : 8515             [ 3] 	sta vdp_base+vdp_bord_col	; Save it to the borde
AS65 Assembler for R6502 [1.42].                                     Page   52
---------------------------------- bank1.s -----------------------------------

cbc9 :                       kernel_skip_nv	
cbc9 : 68               [ 4] 	pla					; Get the mode (either default or the NV
cbca : 20c6c1           [ 6] 	jsr _gr_init_screen
cbcd : 2086c5           [ 6] 	jsr io_init			; Set default input/output device
cbd0 : 58               [ 2] 	cli					; irq interrupts enable
                             
                             	; Print the boot up message - requires IO and IR
                             	_println msg_hello_world
                             
                             
                             
cbde : 204ec4           [ 6] 	jsr _rtc_init		; Initialise RTC - * AFTER INTERR
cbe1 : 203ec2           [ 6] 	jsr _init_sdcard	; initialise the sd card interf
cbe4 : 2026c2           [ 6] 	jsr _init_fs		; initialise the filesystem
cbe7 : 202ec0           [ 6] 	jsr _df_init		; Initialise interpreter
                             
cbea : 60               [ 6] 	rts
                             
                             	
                             ;* Initialises RAM, skipping pages 4-8 which are 
                             ;* Zeroes all addressable RAM in the default bank
cbeb :                       init_ram
cbeb : 6400             [ 3] 	stz 0x00			; Start at page 0
cbed : 6401             [ 3] 	stz 0x01
cbef : a002             [ 2] 	ldy #0x02			; But Y initially at 2 to not overwr
cbf1 : a200             [ 2] 	ldx #0x00			; Page counter starts at zero
cbf3 : a900             [ 2] 	lda #0				; Normal RAM filled with zero
cbf5 :                       init_ram_1
cbf5 : e005             [ 2] 	cpx	#5				; Page <5 is ok (zeroes out VIA0 and 1
cbf7 : 9004             [ 3] 	bcc init_ram_fill
cbf9 : e008             [ 2] 	cpx #8				; Page >=8 is ok
cbfb : 9005             [ 4] 	bcc init_ram_skip	; But >=5 and <8 do not initia
cbfd :                       init_ram_fill
cbfd : 9100             [ 5] 	sta (0x00),y		; Write initialisation value to RA
cbff : c8               [ 2] 	iny
cc00 : d0fb             [ 4] 	bne init_ram_fill	; Do a whole page
cc02 :                       init_ram_skip
cc02 : e8               [ 2] 	inx					; Increment page counter
cc03 : 8601             [ 3] 	stx 0x01			; Save to address pointer
cc05 : d0ee             [ 4] 	bne init_ram_1		; Do all pages until page 0xff d
                             	
cc07 : 4c93cb           [ 3] 	jmp init_2			; Carry on initialisation
                             
cc0a :                       mod_sz_kernel_e
                             
                             
                             	
                             ; Bank specific code goes here
                             	include "utils\intmath.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  INTMATH.S
                             ;*  Core module for integer maths supported by df
                             ;*  Now supports signed integers in 2s complement
                             ;*  Uses the intmath registers: num_a, num_b, num
                             ;*  Most inputs are through num_a and num_b, with
AS65 Assembler for R6502 [1.42].                                     Page   53
---------------------------------- bank1.s -----------------------------------

                             ;*  num_a
                             ;*  Operations: add, sub, swap, 8 bit mult, mult,
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
                             ;****************************************
                             ;* Add : A + B result in A
                             ;****************************************
cc0a :                       int_add
cc0a : 18               [ 2] 	clc
cc0b : a579             [ 3] 	lda num_a
cc0d : 657d             [ 3] 	adc num_b
cc0f : 8579             [ 3] 	sta num_a
cc11 : a57a             [ 3] 	lda num_a+1
cc13 : 657e             [ 3] 	adc num_b+1
cc15 : 857a             [ 3] 	sta num_a+1
cc17 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Sub : A - B result in A
                             ;****************************************
cc18 :                       int_sub
cc18 : 38               [ 2] 	sec
cc19 : a579             [ 3] 	lda num_a
cc1b : e57d             [ 3] 	sbc num_b
cc1d : 8579             [ 3] 	sta num_a
cc1f : a57a             [ 3] 	lda num_a+1
cc21 : 657e             [ 3] 	adc num_b+1
cc23 : 857a             [ 3] 	sta num_a+1
cc25 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Swp : A <-> B 
                             ;****************************************
cc26 :                       int_swp
cc26 : a579             [ 3] 	lda num_a
cc28 : a67d             [ 3] 	ldx num_b
cc2a : 857d             [ 3] 	sta num_b
cc2c : 8679             [ 3] 	stx num_a
cc2e : a57a             [ 3] 	lda num_a+1
cc30 : a67e             [ 3] 	ldx num_b+1
cc32 : 857e             [ 3] 	sta num_b+1
cc34 : 867a             [ 3] 	stx num_a+1
cc36 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;* B assumed to be an 8 bit quantity 
                             ;****************************************
cc37 :                       int_fast_mult
                             	_cpyZPWord num_a,num_tmp
                             
cc3f : 6479             [ 3] 	stz num_a
cc41 : 647a             [ 3] 	stz num_a+1
cc43 : a008             [ 2] 	ldy #8
cc45 :                       int_fast_mult_cycle
cc45 : 467d             [ 5] 	lsr num_b
cc47 : 900d             [ 3] 	bcc int_fast_mult_next
cc49 : 18               [ 2] 	clc
AS65 Assembler for R6502 [1.42].                                     Page   54
---------------------------------- bank1.s -----------------------------------

cc4a : a579             [ 3] 	lda num_a
cc4c : 6585             [ 3] 	adc num_tmp
cc4e : 8579             [ 3] 	sta num_a
cc50 : a57a             [ 3] 	lda num_a+1
cc52 : 6586             [ 3] 	adc num_tmp+1
cc54 : 857a             [ 3] 	sta num_a+1
cc56 :                       int_fast_mult_next
cc56 : 0685             [ 5] 	asl num_tmp
cc58 : 2686             [ 5] 	rol num_tmp+1
cc5a : 88               [ 2] 	dey
cc5b : d0e8             [ 3] 	bne int_fast_mult_cycle
cc5d : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Mult : A * B result in A
                             ;****************************************
cc5e :                       int_mult
                             	_cpyZPWord num_a,num_tmp
                             
cc66 : 6479             [ 3] 	stz num_a
cc68 : 647a             [ 3] 	stz num_a+1
cc6a : a010             [ 2] 	ldy #16
cc6c :                       int_mult_cycle
cc6c : 467e             [ 5] 	lsr num_b+1
cc6e : 667d             [ 5] 	ror num_b
cc70 : 900d             [ 3] 	bcc int_mult_next
cc72 : 18               [ 2] 	clc
cc73 : a579             [ 3] 	lda num_a
cc75 : 6585             [ 3] 	adc num_tmp
cc77 : 8579             [ 3] 	sta num_a
cc79 : a57a             [ 3] 	lda num_a+1
cc7b : 6586             [ 3] 	adc num_tmp+1
cc7d : 857a             [ 3] 	sta num_a+1
cc7f :                       int_mult_next
cc7f : 0685             [ 5] 	asl num_tmp
cc81 : 2686             [ 5] 	rol num_tmp+1
cc83 : 88               [ 2] 	dey
cc84 : d0e6             [ 3] 	bne int_mult_cycle
cc86 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Div : A / B result in A, remainder X
                             ;****************************************
cc87 :                       int_div
                             	; adjust signs
cc87 : 6485             [ 3] 	stz num_tmp				; Assume all +ve
cc89 : a57a             [ 3] 	lda num_a+1				; Check A hi
cc8b : 100f             [ 3] 	bpl int_div_skip_negA
cc8d : e685             [ 5] 	inc num_tmp				; Record sign flip
cc8f : 38               [ 2] 	sec						; 2's complement A
cc90 : a900             [ 2] 	lda #0					; by 0-A
cc92 : e579             [ 3] 	sbc num_a				; A is now +ve
cc94 : 8579             [ 3] 	sta num_a
cc96 : a900             [ 2] 	lda #0
cc98 : e57a             [ 3] 	sbc num_a+1
cc9a : 857a             [ 3] 	sta num_a+1	
cc9c :                       int_div_skip_negA
cc9c : a57e             [ 3] 	lda num_b+1				; Check B hi
cc9e : 100f             [ 3] 	bpl int_div_skip_negB
cca0 : e685             [ 5] 	inc num_tmp				; Record sign flip
cca2 : 38               [ 2] 	sec						; 2's complement B
cca3 : a900             [ 2] 	lda #0					; by 0-B
AS65 Assembler for R6502 [1.42].                                     Page   55
---------------------------------- bank1.s -----------------------------------

cca5 : e57d             [ 3] 	sbc num_b				; B is now +ve
cca7 : 857d             [ 3] 	sta num_b
cca9 : a900             [ 2] 	lda #0
ccab : e57e             [ 3] 	sbc num_b+1
ccad : 857e             [ 3] 	sta num_b+1
ccaf :                       int_div_skip_negB			; num_tmp bit 0=1 for result 
                             	; x is the remainder
ccaf : 6481             [ 3] 	stz num_x
ccb1 : 6482             [ 3] 	stz num_x+1
                             	; 16 bit division
ccb3 : a010             [ 2] 	ldy #16
ccb5 :                       int_div_cycle
                             	; shift a left 1 bit
ccb5 : 0679             [ 5] 	asl num_a
ccb7 : 267a             [ 5] 	rol num_a+1
                             	; shift in to remainder
ccb9 : 2681             [ 5] 	rol num_x
ccbb : 2682             [ 5] 	rol num_x+1
                             	; try and subtract b from remainder
ccbd : 38               [ 2] 	sec
ccbe : a581             [ 3] 	lda num_x
ccc0 : e57d             [ 3] 	sbc num_b
ccc2 : aa               [ 2] 	tax
ccc3 : a582             [ 3] 	lda num_x+1
ccc5 : e57e             [ 3] 	sbc num_b+1
ccc7 : 9006             [ 3] 	bcc int_div_skip
                             	; so b did fit in to remainder, save it
ccc9 : 8681             [ 3] 	stx num_x
cccb : 8582             [ 3] 	sta num_x+1
cccd : e679             [ 5] 	inc num_a
cccf :                       int_div_skip
                             	; carry on for 16 bits
cccf : 88               [ 2] 	dey
ccd0 : d0e3             [ 3] 	bne int_div_cycle
                             	; result in a, remainder in x
                             	; check num_tmp bit 0
ccd2 : a585             [ 3] 	lda num_tmp
ccd4 : 2901             [ 2] 	and #1
ccd6 : f00d             [ 3] 	beq int_div_noflip
ccd8 : 38               [ 2] 	sec						; 2's complement A
ccd9 : a900             [ 2] 	lda #0					; by 0-A
ccdb : e579             [ 3] 	sbc num_a				; A is now +ve
ccdd : 8579             [ 3] 	sta num_a
ccdf : a900             [ 2] 	lda #0
cce1 : e57a             [ 3] 	sbc num_a+1
cce3 : 857a             [ 3] 	sta num_a+1	
cce5 :                       int_div_noflip
cce5 : 60               [ 6] 	rts
                             	
                             
                             	include "dflat\dflat.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  DFLAT.S
                             ;*  This is the main controller code file for dfl
                             ;*  This file includes all the required dflat sou
AS65 Assembler for R6502 [1.42].                                     Page   56
---------------------------------- bank1.s -----------------------------------

                             ;*  needed:
                             ;*  - error.s is the error handling module
                             ;*  - var.s is the variable handling module
                             ;*  - tokenise.s is the tokenisation module
                             ;*  - progedit.s is the program editing module
                             ;*  - runtime.s is the runtime module
                             ;*  - stack.s is the stack handling module
                             ;*  The above modules include further source file
                             ;*  needed.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
cce6 :                       mod_sz_dflat_s
                             
                             ;	include "dflat/error.s"  ** included in the mai
                             	include "dflat/var.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  VAR.S
                             ;*  This module handles all the variable manageme
                             ;*  When a new variable is detected during tokeni
                             ;*  is added to the variable tables.  Any subsequ
                             ;*  that variable is tokenised as an index in to 
                             ;*  table.  There are two variable tables:
                             ;*  Variable name table (VNT) keeps track of vari
                             ;*  Variable value table (VVT) maintains variable
                             ;*  including type, dimension (if array) and of c
                             ;*  actual values.  For an array, the value is a 
                             ;*  memory grabbed using the 'malloc' function (s
                             ;*  This approach to variable managemet is direct
                             ;*  Atari 8 bit.  The disadvantage is that during
                             ;*  session you may end up having a much larger v
                             ;*  table than you need.  Why?  Well because say 
                             ;*  a as a new variable, but then later change it
                             ;*  In this case a remains in the variable tables
                             ;*  only ever adds to the table!  However it is e
                             ;*  solved - when you save and then reload from n
                             ;*  program, the variable table is built up as th
                             ;*  is loaded.
                             ;*  The VNT grows DOWN from the top of free memor
                             ;*  the VVT growing UP from just below the VNT.
                             ;*	This means that the VVT for a variable will al
                             ;*	found in a fixed place in the VVT table and me
                             ;*	For the VNT (names) it grows from vvstart at l
                             ;*
                             ;************************************************
                             
                             
                             	; ROM code
                             	code  
                             
cce6 :                       mod_sz_var_s
                             
AS65 Assembler for R6502 [1.42].                                     Page   57
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* Find a variable
                             ;* CC if found, A has index
                             ;****************************************
cce6 :                       df_var_find
                             	; start at the beginning of the vnt table
                             	; vars are stored in reverse order
                             	_cpyZPWord df_vntstrt,df_tmpptrb
                             
                             	; start at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
ccf6 :                       df_var_match_vnt
                             	; If reached top of VVT then not found
ccf6 : a5d7             [ 3] 	lda df_tmpptra
ccf8 : c5a3             [ 3] 	cmp df_vvtstrt
ccfa : d006             [ 4] 	bne df_var_match_vnt_do
ccfc : a5d8             [ 3] 	lda df_tmpptra+1
ccfe : c5a4             [ 3] 	cmp df_vvtstrt+1
cd00 : f042             [ 3] 	beq df_var_find_no_vnt
cd02 :                       df_var_match_vnt_do
                             	; match each char in buffer with vnt
cd02 : a4b2             [ 3] 	ldy df_linoff
cd04 : a200             [ 2] 	ldx #0
cd06 :                       df_var_match_vnt_sym
cd06 : b9000a           [ 4] 	lda df_linbuff,y
cd09 : c1d9             [ 6] 	cmp (df_tmpptrb,x)
cd0b : d017             [ 3] 	bne df_var_vnt_sym_nomatch
                             	; if single char match then increment
                             	; source and search
cd0d : c8               [ 2] 	iny
                             	_incZPWord df_tmpptrb
                             
                             	; if more chars in vnt entry then continue
cd14 : a1d9             [ 6] 	lda (df_tmpptrb,x)
cd16 : d0ee             [ 3] 	bne df_var_match_vnt_sym
                             	; if no more chars in vnt entry but
                             	; but chars in buffer then try next vnt
cd18 : b9000a           [ 4] 	lda df_linbuff,y
                             	; check for valid alpha-numeric
cd1b : 20c4ce           [ 6] 	jsr df_tk_isalphanum
                             	; if there is a valid alpha-num then no match
cd1e : b004             [ 3] 	bcs df_var_vnt_sym_nomatch
                             	; else check type
cd20 :                       df_var_check_type
                             	; if not alpha-num then check for type
                             	; string or int postfix didn't match with VNT
                             ;	cmp #'%'
                             ;	beq df_var_vnt_sym_nomatch
cd20 : c924             [ 2] 	cmp #'$'
                             	; ok, all good got a match
cd22 : d025             [ 3] 	bne df_var_find_true
cd24 :                       df_var_vnt_sym_nomatch
                             	; find the zero terminator
cd24 : a1d9             [ 6] 	lda (df_tmpptrb,x)
cd26 : f009             [ 3] 	beq	df_var_vnt_entry_end
                             	_incZPWord df_tmpptrb
                             
cd2e : 4c24cd           [ 3] 	jmp df_var_vnt_sym_nomatch
cd31 :                       df_var_vnt_entry_end
                             	; skip over zero terminator
AS65 Assembler for R6502 [1.42].                                     Page   58
---------------------------------- bank1.s -----------------------------------

                             	_incZPWord df_tmpptrb
                             
                             	; update vvt address pointer
cd37 : 18               [ 2] 	clc
cd38 : a5d7             [ 3] 	lda df_tmpptra
cd3a : 6908             [ 2] 	adc #8
cd3c : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
cd40 : e6d8             [ 5] 	inc df_tmpptra+1
cd42 : d0b2             [ 4] 	bne df_var_match_vnt		; Always - high byte is no
                             
                             	; if at end of vnt then no matches found
cd44 :                       df_var_find_no_vnt
cd44 : a900             [ 2] 	lda #0
cd46 : aa               [ 2] 	tax
cd47 : 38               [ 2] 	sec
cd48 : 60               [ 6] 	rts
                             
cd49 :                       df_var_find_true
                             	; Get slot address into x,a
cd49 : a6d7             [ 3] 	ldx df_tmpptra
cd4b : a5d8             [ 3] 	lda df_tmpptra+1
                             	
                             	; Consume characters found in source
cd4d : 84b2             [ 3] 	sty df_linoff
cd4f : 18               [ 2] 	clc
cd50 : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Insert a variable name in to vnt
                             ;* X = number of bytes to make room
                             ;* Space allocated is;
                             ;*	8 bytes for the new VVT entry
                             ;*  X bytes for the new VNT entry
                             ;* df_vntstrt is new var name entry
                             ;* df_vvtend is new vvt entry
                             ;****************************************
cd51 :                       df_var_insert_space
                             	; *** REMEMBER TO DO A SPACE CHECK EVENTUALLY! *
                             
                             	; adjust down the VNT start by VVT size (for ext
                             	; put it in tmpptrb
cd51 : 38               [ 2] 	sec
cd52 : a59f             [ 3] 	lda df_vntstrt
cd54 : e908             [ 2] 	sbc #DFVVT_SZ
cd56 : 859f             [ 3] 	sta df_vntstrt
cd58 : a5a0             [ 3] 	lda df_vntstrt+1
cd5a : e900             [ 2] 	sbc #0
cd5c : 85a0             [ 3] 	sta df_vntstrt+1
                             	
                             	; adjust VNT end by VVT size (for extra VVT entr
                             	; and put it in tmpptrc
cd5e : 38               [ 2] 	sec
cd5f : a5a1             [ 3] 	lda df_vntend
cd61 : e908             [ 2] 	sbc #DFVVT_SZ
cd63 : 85a1             [ 3] 	sta df_vntend
cd65 : a5a2             [ 3] 	lda df_vntend+1
cd67 : e900             [ 2] 	sbc #0
cd69 : 85a2             [ 3] 	sta df_vntend+1
                             
AS65 Assembler for R6502 [1.42].                                     Page   59
---------------------------------- bank1.s -----------------------------------

                             	; Set copy point to new start of VNT
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             
                             	; Now move all bytes from old VNT (higher up) to
cd73 :                       df_var_move_byte
                             	; When pointer = vntend then done
cd73 : a5d7             [ 3] 	lda df_tmpptra
cd75 : c5a1             [ 3] 	cmp df_vntend
cd77 : d006             [ 3] 	bne df_var_move_byte_do
cd79 : a5d8             [ 3] 	lda df_tmpptra+1
cd7b : c5a2             [ 3] 	cmp df_vntend+1
cd7d : f011             [ 3] 	beq df_var_move_byte_fin
cd7f :                       df_var_move_byte_do
                             	; First the source byte VVT size higher in memor
cd7f : a008             [ 2] 	ldy #DFVVT_SZ
cd81 : b1d7             [ 5] 	lda (df_tmpptra),y
                             	; And copy to new position lower in memory
cd83 : a000             [ 2] 	ldy #0
cd85 : 91d7             [ 5] 	sta (df_tmpptra),y
                             	; Increment memory pointer
                             	_incZPWord df_tmpptra
                             
cd8d : 4c73cd           [ 3] 	jmp df_var_move_byte		; Always as C is not touch
cd90 :                       df_var_move_byte_fin
                             	
                             	; Now subtract X bytes from VNT start to accommo
cd90 : 8639             [ 3] 	stx tmp_d
cd92 : 38               [ 2] 	sec
cd93 : a59f             [ 3] 	lda df_vntstrt
cd95 : e539             [ 3] 	sbc tmp_d
cd97 : 859f             [ 3] 	sta df_vntstrt
cd99 : a5a0             [ 3] 	lda df_vntstrt+1
cd9b : e900             [ 2] 	sbc #0
cd9d : 85a0             [ 3] 	sta df_vntstrt+1
                             
                             	; VVT end is the same as VNT end
                             	_cpyZPWord df_vntend,df_vvtend
                             
                             
                             	; Copy done increment variable count
cda7 : e6a7             [ 5] 	inc df_varcnt
cda9 : 18               [ 2] 	clc
cdaa : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Iterate through a valid variable name
                             ;* starts with alpha, then any number of
                             ;* alphanums.
                             ;****************************************
cdab :                       df_var_countlen
                             	; count alpha nums
cdab : c8               [ 2] 	iny
cdac : e8               [ 2] 	inx
cdad : b9000a           [ 4] 	lda df_linbuff,y
                             	; first char has to be alpha, rest can be alpha-
cdb0 : e000             [ 2] 	cpx #0
cdb2 : d006             [ 3] 	bne df_var_countlen_alphanum
cdb4 : 20b7ce           [ 6] 	jsr df_tk_isalpha
cdb7 : 4cbdcd           [ 3] 	jmp df_var_countlen_loop
cdba :                       df_var_countlen_alphanum
AS65 Assembler for R6502 [1.42].                                     Page   60
---------------------------------- bank1.s -----------------------------------

cdba : 20c4ce           [ 6] 	jsr df_tk_isalphanum
cdbd :                       df_var_countlen_loop
cdbd : b0ec             [ 3] 	bcs df_var_countlen
cdbf : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Analyse variable name
                             ;* Return type in A
                             ;* NOT C = It is a variable
                             ;* C = It is not a variable
                             ;* X = Length including pre-fixes
                             ;* Y = Offset to next char after var name
                             ;****************************************
cdc0 :                       df_var_analyse
                             	; start at the current buffer position
cdc0 : a4b2             [ 3] 	ldy df_linoff
                             	
                             	; actual number of alpha nums = -1 to start
cdc2 : a2ff             [ 2] 	ldx #-1
                             
                             	; Default type is INT
cdc4 : a901             [ 2] 	lda #DFVVT_INT
cdc6 : 85d7             [ 3] 	sta df_tmpptra
                             	
                             	; check for PROC prefix
cdc8 : b9000a           [ 4] 	lda df_linbuff,y
cdcb : c95f             [ 2] 	cmp #'_'
                             	; if it is not proc then get the name
cdcd : d011             [ 3] 	bne df_var_not_proc
                             	; analyse for proc variable names
                             	; else set type to PROC
cdcf : a940             [ 2] 	lda #DFVVT_PROC
cdd1 : 85d7             [ 3] 	sta df_tmpptra
cdd3 : 20abcd           [ 6] 	jsr df_var_countlen
                             	; Length must be >=1
cdd6 : e001             [ 2] 	cpx #1
cdd8 : 9004             [ 3] 	bcc df_var_analyse_fatal_err
                             	; Next char has to be '('
cdda : c928             [ 2] 	cmp #'('
cddc : f022             [ 4] 	beq df_var_finalise_len
cdde :                       df_var_analyse_fatal_err
                             	SWBRK DFERR_SYNTAX
                             
                             	; Analyse for non-proc variable names
cde0 :                       df_var_not_proc
                             	; go back on pos on index as loop always does in
cde0 : 88               [ 2] 	dey
cde1 : 20abcd           [ 6] 	jsr df_var_countlen
cde4 : e000             [ 2] 	cpx #0
cde6 : d002             [ 3] 	bne df_var_analyse_chk_post
                             	; if zero alphanums error but not fatal
cde8 : 38               [ 2] 	sec
cde9 : 60               [ 6] 	rts
                             	; check for post qualifiers e.g. $
cdea :                       df_var_analyse_chk_post
                             	; first see if the char is $
                             	; but cannot already have PROC prefix
                             ;	cmp #'%'
                             ;	bne df_var_analyse_chk_dollar
                             ; Set to INT type although it is the default alre
                             ;	lda #DFVVT_INT
AS65 Assembler for R6502 [1.42].                                     Page   61
---------------------------------- bank1.s -----------------------------------

                             ;	sta df_tmpptra
                             	; advance the buffer index
                             ;	iny
                             ;	bne df_var_analyse_chk_arry
cdea :                       df_var_analyse_chk_dollar
                             	; now see if the char is $
                             	; but cannot already have PROC prefix
cdea : c924             [ 2] 	cmp #'$'
cdec : d005             [ 3] 	bne df_var_analyse_chk_arry
                             	; Set to STRING type
cdee : a904             [ 2] 	lda #DFVVT_STR
cdf0 : 85d7             [ 3] 	sta df_tmpptra
                             	; advance the buffer index
cdf2 : c8               [ 2] 	iny
cdf3 :                       df_var_analyse_chk_arry
                             	; Check for array type vs PROC
cdf3 : b9000a           [ 4] 	lda df_linbuff,y
cdf6 : c95b             [ 2] 	cmp #'['
cdf8 : d006             [ 4] 	bne df_var_finalise_len
cdfa : a5d7             [ 3] 	lda df_tmpptra
cdfc : 0980             [ 2] 	ora #DFVVT_PTR
cdfe : 85d7             [ 3] 	sta df_tmpptra
ce00 :                       df_var_finalise_len
                             	; Ok got everything
                             	; calculate length from y
                             	; y is next char after var name
ce00 : 98               [ 2] 	tya
ce01 : 38               [ 2] 	sec
ce02 : e5b2             [ 3] 	sbc df_linoff			; where we started
                             	; put len in X
ce04 : aa               [ 2] 	tax
                             	; put type in A
ce05 : a5d7             [ 3] 	lda df_tmpptra
ce07 : 18               [ 2] 	clc
ce08 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Find or create a variable
                             ;* If found then type needs to match mask
                             ;* Not a fatal error because could be part
                             ;* of a trial of different parsing options
                             ;****************************************
ce09 :                       df_var_findcreate
                             	; save mask
ce09 : 48               [ 3] 	pha
ce0a : 20e6cc           [ 6] 	jsr df_var_find
ce0d : b013             [ 3] 	bcs df_var_findcreate_create
                             	; restore mask to check for 0 then push
ce0f : 68               [ 4] 	pla
ce10 : 48               [ 3] 	pha
                             	; don't check mask if zero
ce11 : f008             [ 3] 	beq df_var_findcreate_found
                             	; restore mask
ce13 : 68               [ 4] 	pla
ce14 : a000             [ 2] 	ldy #DFVVT_TYPE
ce16 : 31d7             [ 5] 	and (df_tmpptra),y
                             	; but if mask is non zero then this must be non 
ce18 : f019             [ 3] 	beq df_var_findcreate_err
ce1a : 48               [ 3] 	pha		; Dummy push to match the pla
ce1b :                       df_var_findcreate_found
                             	; discard mask
AS65 Assembler for R6502 [1.42].                                     Page   62
---------------------------------- bank1.s -----------------------------------

ce1b : 68               [ 4] 	pla	
                             	; put slot address in x,a
ce1c : a6d7             [ 3] 	ldx df_tmpptra
ce1e : a5d8             [ 3] 	lda df_tmpptra+1
ce20 : 18               [ 2] 	clc
ce21 : 60               [ 6] 	rts
                             	
                             	;* If no existing variable found, add one to VNT
ce22 :                       df_var_findcreate_create
                             	; find type (A) and length (X)
ce22 : 20c0cd           [ 6] 	jsr df_var_analyse
                             	; keep A temporarily
ce25 : 85d7             [ 3] 	sta df_tmpptra
                             	; if not a variable then return with C=1
ce27 : b009             [ 3] 	bcs df_var_findcreate_errp
                             	; check if mask needs to be applied
ce29 : 68               [ 4] 	pla
ce2a : f009             [ 3] 	beq df_var_analyse_ok
                             	; else mask and check
ce2c : 25d7             [ 3] 	and df_tmpptra
                             	; mask match is ok
ce2e : d005             [ 3] 	bne df_var_analyse_ok
                             	; else return not found
ce30 : f001             [ 3] 	beq df_var_findcreate_err
ce32 :                       df_var_findcreate_errp
ce32 : 68               [ 4] 	pla
ce33 :                       df_var_findcreate_err
ce33 : 38               [ 2] 	sec
ce34 : 60               [ 6] 	rts
                             
ce35 :                       df_var_analyse_ok
                             	; extra space for zero terminator
ce35 : e8               [ 2] 	inx
                             	; save data in reverse order to when needed
                             	; by the initialise section x,a (var name sz, ty
                             	; insert space of X bytes
ce36 : a5d7             [ 3] 	lda df_tmpptra
ce38 : 48               [ 3] 	pha
ce39 : 8a               [ 2] 	txa
ce3a : 48               [ 3] 	pha
                             	
ce3b : 2051cd           [ 6] 	jsr df_var_insert_space
ce3e : 9002             [ 3] 	bcc df_var_initialise_var
                             	; error inserting space
                             	SWBRK DFERR_OK
                             
                             	
ce42 :                       df_var_initialise_var
ce42 : 68               [ 4] 	pla
ce43 : 85db             [ 3] 	sta df_tmpptrc				; var name size + 1
                             
ce45 : 68               [ 4] 	pla							; type
ce46 : a000             [ 2] 	ldy #DFVVT_TYPE
ce48 : 91a5             [ 5] 	sta (df_vvtend),y			; put type in vvt slot
ce4a : a900             [ 2] 	lda #0						; zero the rest
ce4c : a007             [ 2] 	ldy #7
ce4e :                       df_var_zero_vnt
ce4e : 91a5             [ 5] 	sta (df_vvtend),y
ce50 : 88               [ 2] 	dey
ce51 : d0fb             [ 3] 	bne df_var_zero_vnt			; Don't zero out the type
                             
ce53 : c6db             [ 5] 	dec df_tmpptrc				; 1 less to copy variable name
AS65 Assembler for R6502 [1.42].                                     Page   63
---------------------------------- bank1.s -----------------------------------

                             
ce55 : a6b2             [ 3] 	ldx df_linoff				; Start at var name beginning, 
                             	; copy variable name to vnt slot
ce57 :                       df_var_findcreate_copy
ce57 : bd000a           [ 4] 	lda df_linbuff,x
ce5a : 919f             [ 5] 	sta (df_vntstrt),y
ce5c : e8               [ 2] 	inx
ce5d : c8               [ 2] 	iny
ce5e : c6db             [ 5] 	dec df_tmpptrc
ce60 : d0f5             [ 3] 	bne df_var_findcreate_copy
                             	; put in zero terminator
ce62 : a900             [ 2] 	lda #0
ce64 : 919f             [ 5] 	sta (df_vntstrt),y
                             
ce66 : 86b2             [ 3] 	stx df_linoff				; Update line pointer
                             
                             	; Return address of slot in X,A
ce68 : a6a5             [ 3] 	ldx df_vvtend
ce6a : a5a6             [ 3] 	lda df_vvtend+1
                             	
ce6c : 18               [ 2] 	clc
ce6d : 60               [ 6] 	rts
                             	
ce6e :                       mod_sz_var_e
                             
                             	include "dflat/tokenise.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  TOKENISE.S
                             ;*  Controlling module for tokenisation.  Basical
                             ;*  module is given a raw input buffer, which it 
                             ;*  attempt to tokenise fully.  Any syntax errors
                             ;*  thrown at the first point of detection.  If a
                             ;*  well, the parsed input will be in a tokenised
                             ;*  which can be executed in immediate mode or sa
                             ;*  line number order to memory.
                             ;*  dflat syntax is very simple - every statement
                             ;*  with a keyword.  The only exception is assign
                             ;*  procedure invocation - but even these scenari
                             ;*  tokenised so during runtime we just execute t
                             ;*  The raw buffer is consumed one byte at a time
                             ;*  tokenised buffer is written one byte at a tim
                             ;*  syntax means there is no need to undo reads o
                             ;*  or tokenised buffer.  The only refinement is 
                             ;*  allowed to peek a character in the raw buffer
                             ;*  consuming it.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
ce6e :                       mod_sz_tokenise_s
                             
                             
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   64
---------------------------------- bank1.s -----------------------------------

                             ;* df_tk_peek_buf
                             ;* Return next char in A but no change to pointer
                             ;****************************************
ce6e :                       df_tk_peek_buf
ce6e : a4b2             [ 3] 	ldy df_linoff
ce70 : b9000a           [ 4] 	lda df_linbuff,y
ce73 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_get_buf
                             ;* Return next char in A and inc pointer
                             ;* Don't advance if null char found and Z=1
                             ;****************************************
ce74 :                       df_tk_get_buf
ce74 : a4b2             [ 3] 	ldy df_linoff
ce76 : b9000a           [ 4] 	lda df_linbuff,y
ce79 : f003             [ 3] 	beq df_tk_get_buf_null
ce7b : c8               [ 2] 	iny
ce7c : 84b2             [ 3] 	sty df_linoff
ce7e :                       df_tk_get_buf_null
ce7e : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_put_tok
                             ;* Put A in token buffer and inc pointer
                             ;* C=Clear on exit
                             ;****************************************
ce7f :                       df_tk_put_tok
ce7f : a4b3             [ 3] 	ldy df_tokoff
ce81 : 99800a           [ 5] 	sta df_tokbuff,y
ce84 : c8               [ 2] 	iny
ce85 : 3004             [ 3] 	bmi df_tk_put_overflow
ce87 : 84b3             [ 3] 	sty df_tokoff
ce89 : 18               [ 2] 	clc
ce8a : 60               [ 6] 	rts
ce8b :                       df_tk_put_overflow
                             	SWBRK DFERR_STRLONG
                             
                             
                             ;****************************************
                             ;* df_tk_isdigit
                             ;* Check char in A for number 0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce8d :                       df_tk_isdigit
ce8d : c93a             [ 2] 	cmp #'9'+1
ce8f : b005             [ 3] 	bcs df_tk_isdigit_false
ce91 : c930             [ 2] 	cmp #'0'
ce93 : 9001             [ 3] 	bcc df_tk_isdigit_false
ce95 : 60               [ 6] 	rts						; C must be 1
ce96 :                       df_tk_isdigit_false
ce96 : 18               [ 2] 	clc
ce97 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isbin
                             ;* Check char in A for binary digit
                             ;* Return: CC = False, CS = True
                             ;****************************************
ce98 :                       df_tk_isbin
ce98 : c930             [ 2] 	cmp #'0'
ce9a : f005             [ 3] 	beq df_tk_isbin_true	; C=1
AS65 Assembler for R6502 [1.42].                                     Page   65
---------------------------------- bank1.s -----------------------------------

ce9c : c931             [ 2] 	cmp #'1'
ce9e : f001             [ 3] 	beq df_tk_isbin_true	; C=1
cea0 : 18               [ 2] 	clc
cea1 :                       df_tk_isbin_true
cea1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_ishex
                             ;* Check char in A for number 0-9, A-F, a-f
                             ;* Return: CC = False, CS = True
                             ;****************************************
cea2 :                       df_tk_ishex
cea2 : 48               [ 3] 	pha
cea3 : 208dce           [ 6] 	jsr df_tk_isdigit
cea6 : b00a             [ 3] 	bcs df_tk_ishex_truep
cea8 : 0920             [ 2] 	ora #0x20
ceaa : c967             [ 2] 	cmp #'f'+1
ceac : b006             [ 3] 	bcs df_tk_ishex_false
ceae : c961             [ 2] 	cmp #'a'
ceb0 : 9002             [ 3] 	bcc df_tk_ishex_false
                             	; C must be 1 here
ceb2 :                       df_tk_ishex_truep
ceb2 : 68               [ 4] 	pla
ceb3 : 60               [ 6] 	rts
ceb4 :                       df_tk_ishex_false
ceb4 :                       df_tk_isalpha_false
ceb4 : 18               [ 2] 	clc
ceb5 : 68               [ 4] 	pla
ceb6 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalpha
                             ;* Check next char in A alpha a-z, A-Z
                             ;* Return: CC = False, CS = True
                             ;****************************************
ceb7 :                       df_tk_isalpha
ceb7 : 48               [ 3] 	pha
ceb8 : 0920             [ 2] 	ora #0x20					; Convert to lower case for checki
ceba : c97b             [ 2] 	cmp #'z'+1
cebc : b0f6             [ 3] 	bcs df_tk_isalpha_false
cebe : c961             [ 2] 	cmp #'a'
cec0 : 90f2             [ 3] 	bcc df_tk_isalpha_false
                             	; C must be 1 here
cec2 : 68               [ 4] 	pla
cec3 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isalphanum
                             ;* Check next char A for a-z,A-Z,0-9
                             ;* Return: CC = False, CS = True
                             ;****************************************
cec4 :                       df_tk_isalphanum
cec4 : 20b7ce           [ 6] 	jsr df_tk_isalpha
cec7 : 90c4             [ 3] 	bcc df_tk_isdigit
cec9 :                       df_tk_rts1				; branch to this RTS where possible
cec9 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_isproc
                             ;* Check next char A for _
                             ;* Return: CC = False, CS = True
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page   66
---------------------------------- bank1.s -----------------------------------

ceca :                       df_tk_isproc
ceca : c95f             [ 2] 	cmp #'_'
cecc : f001             [ 3] 	beq df_tk_isproc_true	; C=1
cece : 18               [ 2] 	clc
cecf :                       df_tk_isproc_true
cecf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_skip_ws
                             ;* Skip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
ced0 :                       df_tk_skip_ws
ced0 :                       df_tk_ws_loop1
ced0 : 206ece           [ 6] 	jsr df_tk_peek_buf
ced3 : 20ebce           [ 6] 	jsr df_tk_isws
ced6 : 90f1             [ 3] 	bcc df_tk_rts1
ced8 : e6b2             [ 5] 	inc df_linoff
ceda : 207fce           [ 6] 	jsr df_tk_put_tok
cedd : 90f1             [ 3] 	bcc df_tk_skip_ws		; Always as put_tok clears C
                             
                             ;****************************************
                             ;* df_tk_strip_ws
                             ;* Strip ws in linbuff
                             ;* Return: linoff updated to next non-ws, A = cha
                             ;****************************************
cedf :                       df_tk_strip_ws
cedf : 206ece           [ 6] 	jsr df_tk_peek_buf
cee2 : 20ebce           [ 6] 	jsr df_tk_isws
cee5 : 90e2             [ 3] 	bcc df_tk_rts1
cee7 : e6b2             [ 5] 	inc df_linoff
cee9 : d0f4             [ 3] 	bne df_tk_strip_ws		; Always as linoff is not ze
                             
                             ;****************************************
                             ;* df_tk_isws
                             ;* Check char is ws (only space is counted)
                             ;* Return: CC = False, CS = True
                             ;****************************************
ceeb :                       df_tk_isws
ceeb : c920             [ 2] 	cmp #' '
ceed : d001             [ 3] 	bne df_tk_isws_false
                             	; C must be 1 here
ceef : 60               [ 6] 	rts
cef0 :                       df_tk_isws_false
cef0 :                       df_tk_expectok
cef0 : 18               [ 2] 	clc
cef1 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* CC = found, CS = Error
                             ;****************************************
cef2 :                       df_tk_expect
cef2 : 48               [ 3] 	pha
                             	; skip ws
cef3 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; peek the buffer
cef6 : 68               [ 4] 	pla
cef7 : a4b2             [ 3] 	ldy df_linoff
cef9 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; if expected char then ok
AS65 Assembler for R6502 [1.42].                                     Page   67
---------------------------------- bank1.s -----------------------------------

cefc : f0f2             [ 3] 	beq df_tk_expectok
                             	; else error
cefe :                       df_tk_num_err
cefe :                       df_tk_char_err
cefe : 38               [ 2] 	sec
ceff : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* CC = found, CS = Error
                             ;****************************************
cf00 :                       df_tk_expect_tok
cf00 : 20f2ce           [ 6] 	jsr df_tk_expect
cf03 : b0c4             [ 4] 	bcs df_tk_rts1
cf05 : 2074ce           [ 6] 	jsr df_tk_get_buf
cf08 : 4c7fce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Find a character expected ignoring ws
                             ;* Input A = expected char
                             ;* Tokenises the character as well
                             ;* FATAL IF NOT FOUND
                             ;****************************************
cf0b :                       df_tk_expect_tok_err
cf0b : 2000cf           [ 6] 	jsr df_tk_expect_tok
cf0e : 90b9             [ 4] 	bcc df_tk_rts1
cf10 :                       df_tk_expect_tok_fatal
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant number
                             ;****************************************
cf12 :                       df_tk_num
                             	; X,A = address, linbuff must be on page boundar
cf12 : 18               [ 2] 	clc
cf13 : a900             [ 2] 	lda #lo(df_linbuff)
cf15 : 65b2             [ 3] 	adc df_linoff
cf17 : aa               [ 2] 	tax
cf18 : a90a             [ 2] 	lda #hi(df_linbuff)
cf1a : 6900             [ 2] 	adc #0
cf1c : a000             [ 2] 	ldy #0				; any numeric format
cf1e : 203dc9           [ 6] 	jsr con_n_to_a
cf21 : b0db             [ 4] 	bcs df_tk_num_err
                             	; A = format
                             	; X = how many digits processed
                             	; Jump over that many chars
cf23 : a8               [ 2] 	tay
cf24 : 18               [ 2] 	clc
cf25 : 8a               [ 2] 	txa
cf26 : 65b2             [ 3] 	adc df_linoff
cf28 : 85b2             [ 3] 	sta df_linoff
                             	; Now tokenise an integer (always 2 bytes, but t
cf2a : 98               [ 2] 	tya
cf2b : c901             [ 2] 	cmp #NUM_DEC
cf2d : d004             [ 3] 	bne df_tk_num_hexbin
cf2f : a909             [ 2] 	lda #DFTK_INTDEC	; decimal always an int
cf31 : d016             [ 3] 	bne df_tk_num_put
cf33 :                       df_tk_num_hexbin
cf33 : c902             [ 2] 	cmp #NUM_HEX
AS65 Assembler for R6502 [1.42].                                     Page   68
---------------------------------- bank1.s -----------------------------------

cf35 : d00a             [ 3] 	bne df_tk_num_bin
cf37 : a906             [ 2] 	lda #DFTK_BYTHEX	; Assume BYT
cf39 : e005             [ 2] 	cpx #5				; If >4 chars then INT
cf3b : 900c             [ 3] 	bcc df_tk_num_put
cf3d : a90a             [ 2] 	lda #DFTK_INTHEX
cf3f : d008             [ 3] 	bne df_tk_num_put
cf41 :                       df_tk_num_bin
cf41 : a907             [ 2] 	lda #DFTK_BYTBIN	; Assume BYT
cf43 : e00b             [ 2] 	cpx #11				; If >10 chars then INT
cf45 : 9002             [ 3] 	bcc df_tk_num_put
cf47 : a90b             [ 2] 	lda #DFTK_INTBIN
cf49 :                       df_tk_num_put
cf49 : 207fce           [ 6] 	jsr df_tk_put_tok	; Save number type (DEC,HEX,BI
cf4c : a579             [ 3] 	lda num_a
cf4e : 207fce           [ 6] 	jsr df_tk_put_tok
cf51 : a57a             [ 3] 	lda num_a+1
cf53 : 4c7fce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise a constant char
                             ;****************************************
cf56 :                       df_tk_char
                             	; skip the first quote
cf56 : 2074ce           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cf59 : a900             [ 2] 	lda #DFTK_CHR
cf5b : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; get the char value and save
cf5e : 2074ce           [ 6] 	jsr df_tk_get_buf
cf61 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; always put two bytes in, even for a BYTE type
cf64 : a900             [ 2] 	lda #0
cf66 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; next byte must be single quote
cf69 : 2074ce           [ 6] 	jsr df_tk_get_buf
cf6c : c927             [ 2] 	cmp #0x27
cf6e : d08e             [ 4] 	bne df_tk_char_err
cf70 : 18               [ 2] 	clc
cf71 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Tokenise a constant string
                             ;****************************************
cf72 :                       df_tk_str
                             	; skip the first quote
cf72 : 2074ce           [ 6] 	jsr df_tk_get_buf
                             	; put in the token
cf75 : a910             [ 2] 	lda #DFTK_STRLIT
cf77 : 207fce           [ 6] 	jsr df_tk_put_tok
cf7a :                       df_tk_str_ch
                             	; copy string chars in to token buffer
                             	; until another quote or end of line
cf7a : 2074ce           [ 6] 	jsr df_tk_get_buf
cf7d : c900             [ 2] 	cmp #0
cf7f : f011             [ 3] 	beq df_tk_str_err
cf81 : c922             [ 2] 	cmp #0x22
cf83 : f006             [ 3] 	beq df_tk_str_don
cf85 : 207fce           [ 6] 	jsr df_tk_put_tok
cf88 : 4c7acf           [ 3] 	jmp df_tk_str_ch
cf8b :                       df_tk_str_don
                             	; zero terminated strings
cf8b : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page   69
---------------------------------- bank1.s -----------------------------------

cf8d : 4c7fce           [ 3] 	jmp df_tk_put_tok
cf90 :                       df_tk_var_noarry
cf90 : 18               [ 2] 	clc
cf91 : 60               [ 6] 	rts
cf92 :                       df_tk_str_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a constant (num, string, char)
                             ;****************************************
cf94 :                       df_tk_const
cf94 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; Check what constant it is
cf97 : 206ece           [ 6] 	jsr df_tk_peek_buf
                             	; Minus symbol could be start of a number
cf9a : c92d             [ 2] 	cmp #'-'
cf9c : f005             [ 3] 	beq df_tk_const_try_num
cf9e : 208dce           [ 6] 	jsr df_tk_isdigit
cfa1 : 9003             [ 3] 	bcc df_tk_const_try_str
cfa3 :                       df_tk_const_try_num
cfa3 : 4c12cf           [ 3] 	jmp df_tk_num
cfa6 :                       df_tk_const_try_str
                             	; check for double quote
cfa6 : c922             [ 2] 	cmp #0x22
cfa8 : d003             [ 3] 	bne df_tk_const_try_char
cfaa : 4c72cf           [ 3] 	jmp df_tk_str
cfad :                       df_tk_const_try_char
                             	; check for single apostrophe
cfad : c927             [ 2] 	cmp #0x27
cfaf : d003             [ 3] 	bne df_tk_const_err
cfb1 : 4c56cf           [ 3] 	jmp df_tk_char
cfb4 :                       df_tk_const_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Tokenise a variable - A = mask
                             ;* Return : A = variable index
                             ;****************************************
cfb6 :                       df_tk_var
                             	; Find or create variable, address in X,A
cfb6 : 2009ce           [ 6] 	jsr df_var_findcreate
cfb9 : 9001             [ 3] 	bcc df_tk_var_cont
cfbb : 60               [ 6] 	rts
cfbc :                       df_tk_var_cont
                             	; Save X,A for later
cfbc : 48               [ 3] 	pha
cfbd : 8a               [ 2] 	txa
cfbe : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cfbf : a911             [ 2] 	lda #DFTK_VAR
cfc1 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
cfc4 : 68               [ 4] 	pla
cfc5 : 207fce           [ 6] 	jsr df_tk_put_tok
cfc8 : 68               [ 4] 	pla
cfc9 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; count of any array indices
cfcc :                       df_tk_var_ck
                             	; check if array procesing needed
cfcc : a95b             [ 2] 	lda #'['
AS65 Assembler for R6502 [1.42].                                     Page   70
---------------------------------- bank1.s -----------------------------------

cfce : 2000cf           [ 6] 	jsr df_tk_expect_tok
cfd1 : b0bd             [ 3] 	bcs df_tk_var_noarry
                             	; process numeric expression in bracket
cfd3 : 4c7dd0           [ 3] 	jmp df_tk_narry
                             
                             
                             ;****************************************
                             ;* Tokenise a parameter in proc definition
                             ;* Return : A = variable index
                             ;****************************************
cfd6 :                       df_tk_parm
                             	; if preceeding with non-local qualifier DFTK_VA
cfd6 : 206ece           [ 6] 	jsr df_tk_peek_buf
cfd9 : c926             [ 2] 	cmp #DFTK_VARPARM
cfdb : d006             [ 3] 	bne df_tk_parm_skip_var
                             	; get the qualifier and put in token buffer
cfdd : 2074ce           [ 6] 	jsr df_tk_get_buf
cfe0 : 207fce           [ 6] 	jsr df_tk_put_tok
cfe3 :                       df_tk_parm_skip_var
                             	; don't have a certain type of var
cfe3 : a900             [ 2] 	lda #0
cfe5 : 4cb6cf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* Tokenise a variable to localise
                             ;* Return : A,X = variable index
                             ;****************************************
cfe8 :                       df_tk_localvar
                             	; Find or create variable, index in A
cfe8 : 2009ce           [ 6] 	jsr df_var_findcreate
cfeb : 9001             [ 3] 	bcc df_tk_localvar_cont
cfed : 60               [ 6] 	rts
cfee :                       df_tk_localvar_cont
                             	; Save variable address for later
cfee : 48               [ 3] 	pha
cfef : 8a               [ 2] 	txa
cff0 : 48               [ 3] 	pha
                             	; Put VAR escape in token buffer
cff1 : a911             [ 2] 	lda #DFTK_VAR
cff3 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable index and put in token buffer
cff6 : 68               [ 4] 	pla
cff7 : 207fce           [ 6] 	jsr df_tk_put_tok
cffa : 68               [ 4] 	pla
cffb : 4c7fce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* Tokenise array variable
                             ;* Return : A = variable index
                             ;****************************************
cffe :                       df_tk_arrvar
                             	; Like a local var at first
cffe : 20e8cf           [ 6] 	jsr df_tk_localvar
                             	; but must be array
d001 : a95b             [ 2] 	lda #'['
d003 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; process numeric expression in bracket
d006 : 4c7dd0           [ 3] 	jmp df_tk_narry
                             
                             ;****************************************
                             ;* Tokenise call or def of proc
AS65 Assembler for R6502 [1.42].                                     Page   71
---------------------------------- bank1.s -----------------------------------

                             ;* Mode : A = 0 means def, else call
                             ;****************************************
d009 :                       df_tk_proc
d009 : 85c1             [ 3] 	sta df_procmode
d00b : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; Find or create proc, index in A
d00e : a940             [ 2] 	lda #DFVVT_PROC
d010 : 2009ce           [ 6] 	jsr df_var_findcreate
d013 : b066             [ 3] 	bcs df_tk_proc_err
                             
                             	; Save variable address for later
d015 : 86c4             [ 3] 	stx df_procptr
d017 : 85c5             [ 3] 	sta df_procptr+1
                             
                             	; Put PROC escape in token buffer
d019 : a912             [ 2] 	lda #DFTK_PROC
d01b : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; Get variable address and put in token buffer
d01e : a5c4             [ 3] 	lda df_procptr
d020 : 207fce           [ 6] 	jsr df_tk_put_tok
d023 : a5c5             [ 3] 	lda df_procptr+1
d025 : 207fce           [ 6] 	jsr df_tk_put_tok
                             
                             	; initially assume no args
d028 : a900             [ 2] 	lda #0
d02a : 85c2             [ 3] 	sta df_procargs
                             
                             	; Must have an open bracket
d02c : a928             [ 2] 	lda #'('
d02e : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; if immediately followed by close bracket then 
d031 : 206ece           [ 6] 	jsr df_tk_peek_buf
d034 : c929             [ 2] 	cmp #')'
d036 : f030             [ 3] 	beq df_tk_proc_noparm
                             	; else tokenise parm variables
d038 :                       df_tk_proc_parms
d038 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; call appropriate routine for mode
d03b : a5c1             [ 3] 	lda df_procmode
d03d : d006             [ 3] 	bne df_tk_proc_call
                             	; tokenise parameter variable in def mode
d03f : 20d6cf           [ 6] 	jsr df_tk_parm
d042 : 4c4ed0           [ 3] 	jmp df_tk_proc_skip_call
d045 :                       df_tk_proc_call
                             	; tokenise expression in call mode
                             	;**CHECK**
d045 : a5c2             [ 3] 	lda df_procargs	; procargs could be impacted ins
d047 : 48               [ 3] 	pha
d048 : 20fdd0           [ 6] 	jsr df_tk_expression
d04b : 68               [ 4] 	pla
d04c : 85c2             [ 3] 	sta df_procargs
d04e :                       df_tk_proc_skip_call
d04e : b02a             [ 3] 	bcs df_tk_proc_errp
                             	; increment number of args
d050 : e6c2             [ 5] 	inc df_procargs
                             	; what is next non ws char
d052 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
d055 : c92c             [ 2] 	cmp #','
d057 : f006             [ 3] 	beq df_tk_proc_comma
d059 : c929             [ 2] 	cmp #')'
d05b : d01d             [ 3] 	bne df_tk_proc_errp
d05d : f009             [ 3] 	beq df_tk_proc_noparm
AS65 Assembler for R6502 [1.42].                                     Page   72
---------------------------------- bank1.s -----------------------------------

                             	; comma found, more parms to process
d05f :                       df_tk_proc_comma
d05f : 2074ce           [ 6] 	jsr df_tk_get_buf
d062 : 207fce           [ 6] 	jsr df_tk_put_tok
d065 : 4c38d0           [ 3] 	jmp df_tk_proc_parms
d068 :                       df_tk_proc_noparm
                             	; consume the close bracket
d068 : 2074ce           [ 6] 	jsr df_tk_get_buf
d06b : 207fce           [ 6] 	jsr df_tk_put_tok
                             
                             	; update arg count if def mode
d06e : a6c1             [ 3] 	ldx df_procmode
d070 : d006             [ 3] 	bne df_tk_proc_skip_args
                             	; use address of proc
                             	; put arg count in dim2
d072 : a004             [ 2] 	ldy #DFVVT_DIM2
d074 : a5c2             [ 3] 	lda df_procargs
d076 : 91c4             [ 5] 	sta (df_procptr),y
d078 :                       df_tk_proc_skip_args
d078 : 18               [ 2] 	clc
d079 : 60               [ 6] 	rts
d07a :                       df_tk_proc_errp
d07a : 68               [ 4] 	pla
d07b :                       df_tk_proc_err
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* Parse array index
                             ;****************************************
d07d :                       df_tk_narry
                             	; if array open bracket encountered
                             	; then tokenise a numeric expression
d07d : 20fdd0           [ 6] 	jsr df_tk_expression
                             	; If a comma is next, then another expression
d080 : a92c             [ 2] 	lda #','
d082 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d085 : b003             [ 3] 	bcs df_tk_narry_end
d087 : 20fdd0           [ 6] 	jsr df_tk_expression
d08a :                       df_tk_narry_end
                             	; after the second dimension, must be close sq b
d08a : a95d             [ 2] 	lda #']'
d08c : 4c0bcf           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse bracket
                             ;****************************************
d08f :                       df_tk_nbrkt
                             	; if  open bracket encountered
                             	; then tokenise a numeric expression
d08f : 20fdd0           [ 6] 	jsr df_tk_expression
d092 : a929             [ 2] 	lda #')'
d094 : 4c0bcf           [ 3] 	jmp df_tk_expect_tok_err
                             
                             ;****************************************
                             ;* Parse call to numeric proc
                             ;****************************************
d097 :                       df_tk_nterm_proc
                             	; call mode
d097 : a901             [ 2] 	lda #1
d099 : 4c09d0           [ 3] 	jmp df_tk_proc
                             
AS65 Assembler for R6502 [1.42].                                     Page   73
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
                             ;* Parse numeric term
                             ;****************************************
d09c :                       df_tk_nterm
                             	; skip any ws first, copying in to tokbuff
                             	; A containts the non-ws char
d09c : 20d0ce           [ 6] 	jsr df_tk_skip_ws
d09f : c900             [ 2] 	cmp #0
d0a1 : f004             [ 3] 	beq df_tk_nterm_done
d0a3 : c93a             [ 2] 	cmp #':'
d0a5 : d002             [ 3] 	bne df_tk_nterm_cont
d0a7 :                       df_tk_nterm_done
d0a7 :                       df_tk_nop_false
d0a7 : 38               [ 2] 	sec
d0a8 : 60               [ 6] 	rts
d0a9 :                       df_tk_nterm_cont
                             	; if open bracket then process it
d0a9 : c928             [ 2] 	cmp #'('
d0ab : d009             [ 3] 	bne df_tk_nterm_tryfn
                             	; get the bracket and put in token buffer
d0ad : 2074ce           [ 6] 	jsr df_tk_get_buf
d0b0 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; go process the open bracket
d0b3 : 4c8fd0           [ 3] 	jmp df_tk_nbrkt
d0b6 :                       df_tk_nterm_tryfn
d0b6 : 48               [ 3] 	pha
                             	; try decoding a built-in function
d0b7 : a902             [ 2] 	lda #DFTK_FN
d0b9 : 20f0d1           [ 6] 	jsr df_tk_matchtok
d0bc : b00e             [ 3] 	bcs df_tk_nterm_try_proc
                             	; pull old A in to Y but don't use
d0be : 68               [ 4] 	pla
d0bf : a8               [ 2] 	tay
                             	; restore A and put the token with MSB set
d0c0 : 8a               [ 2] 	txa
d0c1 : 0980             [ 2] 	ora #0x80
d0c3 : 207fce           [ 6] 	jsr df_tk_put_tok
d0c6 : 20c2d1           [ 6] 	jsr df_tk_exec_parser
d0c9 : b01b             [ 3] 	bcs df_tk_nterm_err
d0cb : 60               [ 6] 	rts
d0cc :                       df_tk_nterm_try_proc
d0cc : 68               [ 4] 	pla
                             	; if it's not a func then try proc
d0cd : 20cace           [ 6] 	jsr df_tk_isproc
d0d0 : 9006             [ 3] 	bcc df_tk_nterm_try_var
d0d2 : 2097d0           [ 6] 	jsr df_tk_nterm_proc
d0d5 : b00f             [ 3] 	bcs df_tk_nterm_err
d0d7 : 60               [ 6] 	rts
d0d8 :                       df_tk_nterm_try_var
                             	; Non-zero mask means var must be this type
d0d8 : a900             [ 2] 	lda #0
d0da : 20b6cf           [ 6] 	jsr df_tk_var
d0dd : b001             [ 3] 	bcs df_tk_nterm_try_const
d0df : 60               [ 6] 	rts
d0e0 :                       df_tk_nterm_try_const
                             	; Try decoding a constant
d0e0 : 2094cf           [ 6] 	jsr df_tk_const
d0e3 : b001             [ 3] 	bcs df_tk_nterm_err
d0e5 : 60               [ 6] 	rts
d0e6 :                       df_tk_nterm_err
                             	SWBRK DFERR_SYNTAX
                             
AS65 Assembler for R6502 [1.42].                                     Page   74
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* Parse numeric operator
                             ;****************************************
d0e8 :                       df_tk_nop
d0e8 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
d0eb : c900             [ 2] 	cmp #0
d0ed : f0b8             [ 3] 	beq df_tk_nop_false
                             	; must be an operator token for numeric
d0ef : a90c             [ 2] 	lda #DFTK_OP | DFTK_STROP
d0f1 : 20f0d1           [ 6] 	jsr df_tk_matchtok
d0f4 : b0b1             [ 3] 	bcs df_tk_nop_false
                             	; got a token
d0f6 : 0980             [ 2] 	ora #DFTK_TOKEN
d0f8 : 207fce           [ 6] 	jsr df_tk_put_tok
d0fb : 18               [ 2] 	clc
d0fc : 60               [ 6] 	rts
                             
                             	
                             ;****************************************
                             ;* Parse numeric expression
                             ;****************************************
d0fd :                       df_tk_expression
                             	; Tokenise a numeric term
d0fd : 209cd0           [ 6] 	jsr df_tk_nterm
d100 : b006             [ 3] 	bcs df_tk_expre_err
                             	; Try and tokenise a numeric operator
d102 : 20e8d0           [ 6] 	jsr df_tk_nop
                             	; If an operator was tokenised
                             	; then loop back for another term
d105 : 90f6             [ 4] 	bcc df_tk_expression
                             	; If no operator was found then
                             	; expression is done
d107 :                       df_tk_not_eos
d107 : 18               [ 2] 	clc
d108 :                       df_tk_expre_err
d108 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find expected token and parse expression
                             ;****************************************
d109 :                       df_tk_tok_expression
d109 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
d10c : 4cfdd0           [ 3] 	jmp df_tk_expression
                             
                             
                             ;****************************************
                             ;* Check end of statement
                             ;****************************************
d10f :                       df_tk_isEOS
d10f : a93a             [ 2] 	lda #':'
d111 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d114 : b0f1             [ 3] 	bcs df_tk_not_eos
                             	; this is the position of the next statement
d116 : a5b3             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d118 : a4b5             [ 3] 	ldy df_nxtstidx
d11a : 99800a           [ 5] 	sta df_tokbuff,y
d11d : 38               [ 2] 	sec
d11e : 60               [ 6] 	rts
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page   75
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
                             ;* Parse user defined proc
                             ;****************************************
d11f :                       df_tk_parse_user_proc
                             	; put proc token in as a call
d11f : a981             [ 2] 	lda #0x81
d121 : 207fce           [ 6] 	jsr df_tk_put_tok
d124 : a901             [ 2] 	lda #1
d126 : 4c09d0           [ 3] 	jmp df_tk_proc
                             
                             
                             ;****************************************
                             ;* Parse a command
                             ;* Do not fatal error if this fails
                             ;****************************************
d129 :                       df_tk_parse_command
                             	; only looking for keywords
d129 : a901             [ 2] 	lda #DFTK_KW
d12b : 20f0d1           [ 6] 	jsr df_tk_matchtok
                             	; if didn't find regular keywords then try non f
d12e : b010             [ 3] 	bcs df_tk_parse_command_err
                             	; if match then store token in the line buffer
                             	; Set MSB
d130 : 0980             [ 2] 	ora #0x80
d132 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; call the parser to do tokenise based on the st
d135 : a5b9             [ 3] 	lda df_symoff
d137 : 20c2d1           [ 6] 	jsr df_tk_exec_parser
d13a : b004             [ 3] 	bcs df_tk_parse_command_err
                             	; [1] ignore white space but keep it
d13c : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; No error in parsing this command
d13f :                       df_tk_parse_command_done
d13f : 18               [ 2] 	clc
d140 :                       df_tk_parse_command_err
d140 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* lexer
                             ;****************************************
d141 :                       df_lexer_line
d141 : a900             [ 2] 	lda #0
                             	; start at the beginning of the line buffer
d143 : 85b2             [ 3] 	sta df_linoff
                             	; start at the beginning of the tokenised buffer
d145 : 85b3             [ 3] 	sta df_tokoff
                             	; set current line to the token buffer
d147 : a980             [ 2] 	lda #lo(df_tokbuff)
d149 : 85bc             [ 3] 	sta df_currlin
d14b : a90a             [ 2] 	lda #hi(df_tokbuff)
d14d : 85bd             [ 3] 	sta df_currlin+1
                             	; Set the line length to 0
d14f : a900             [ 2] 	lda #0
d151 : 207fce           [ 6] 	jsr df_tk_put_tok
                             
                             	; any leading white space, ignore and discard
                             ;	jsr df_tk_strip_ws
                             
                             	; if peek next character is a number then assume
                             	; else assume a statement
d154 : 206ece           [ 6] 	jsr df_tk_peek_buf
AS65 Assembler for R6502 [1.42].                                     Page   76
---------------------------------- bank1.s -----------------------------------

d157 : 208dce           [ 6] 	jsr df_tk_isdigit
d15a : 9006             [ 3] 	bcc df_lexer_skip_lnum
                             	; if line number then capture the line number an
d15c : 20d1d1           [ 6] 	jsr df_tk_linenum
d15f : 4c6ad1           [ 3] 	jmp df_tk_body
d162 :                       df_lexer_skip_lnum
                             	; if no line number then zero out the line numbe
                             	; line zero will indicate an immediate mode comm
d162 : a900             [ 2] 	lda #0
d164 : 207fce           [ 6] 	jsr df_tk_put_tok				; Line num low byte
d167 : 207fce           [ 6] 	jsr df_tk_put_tok				; Line num high byte
d16a :                       df_tk_body
                             	; Offset for next statement
d16a : a5b3             [ 3] 	lda df_tokoff
d16c : 85b5             [ 3] 	sta df_nxtstidx
d16e : a900             [ 2] 	lda #0
d170 : 207fce           [ 6] 	jsr df_tk_put_tok				; Offset to next statement
d173 : 206ece           [ 6] 	jsr df_tk_peek_buf				; Check for a single space
d176 : 20ebce           [ 6] 	jsr df_tk_isws					; and first character
d179 : 9002             [ 3] 	bcc df_tk_skip_1_spc
d17b : e6b2             [ 5] 	inc df_linoff					; Don't tokenise this single s
d17d :                       df_tk_skip_1_spc
                             	; [1] capture white space from line buffer in to
d17d : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; If next non ws is zero then this is an empty l
                             	; so return with length zero but line number fil
                             	; token buffer
d180 : c900             [ 2] 	cmp #0
d182 : f03a             [ 3] 	beq df_tk_line_empty
                             	; if next char is _ then parse a user defined pr
d184 : 20cace           [ 6] 	jsr df_tk_isproc
d187 : 9006             [ 3] 	bcc df_tk_try_command
d189 : 201fd1           [ 6] 	jsr df_tk_parse_user_proc
d18c : 4ca0d1           [ 3] 	jmp df_tk_done
d18f :                       df_tk_try_command
                             	; try  a keyword
d18f : 2029d1           [ 6] 	jsr df_tk_parse_command
d192 : b002             [ 3] 	bcs	df_tk_try_asm
d194 : 900a             [ 3] 	bcc df_tk_done
d196 :                       df_tk_try_asm
                             	; try an asm keyword
d196 : 200cf5           [ 6] 	jsr df_tk_asm_parse_command
d199 : 9005             [ 3] 	bcc df_tk_done
d19b :                       df_tk_try_assign
                             	; nothing but to try an assignment operation
d19b : 202ed6           [ 6] 	jsr df_tk_assign
d19e : b020             [ 3] 	bcs	df_tk_parseerror
d1a0 :                       df_tk_done
                             	; put statement index stuff here in case of mult
                             	; check for : and if present tokenise plus updat
                             	; then go back to try and process another statem
d1a0 : 200fd1           [ 6] 	jsr df_tk_isEOS
d1a3 : b0c5             [ 3] 	bcs df_tk_body
                             	; if not at end of line, then must be error
d1a5 : 206ece           [ 6] 	jsr df_tk_peek_buf
d1a8 : c900             [ 2] 	cmp #0
d1aa : d014             [ 3] 	bne df_tk_parseerror
                             	; this is the position of the next line
d1ac : a5b3             [ 3] 	lda df_tokoff
                             	; put it in the last statement offset slot
d1ae : a4b5             [ 3] 	ldy df_nxtstidx
d1b0 : 99800a           [ 5] 	sta df_tokbuff,y
AS65 Assembler for R6502 [1.42].                                     Page   77
---------------------------------- bank1.s -----------------------------------

                             	; Get line length
d1b3 : a4b3             [ 3] 	ldy df_tokoff
                             	; ensure there is always a zero after the last t
                             	; A is already zero
d1b5 : a900             [ 2] 	lda #0
d1b7 : 99800a           [ 5] 	sta df_tokbuff,y
                             	; save the line length
d1ba : 98               [ 2] 	tya
d1bb : 8d800a           [ 4] 	sta df_tokbuff
d1be :                       df_tk_line_empty
d1be : 18               [ 2] 	clc
d1bf : 60               [ 6] 	rts
d1c0 :                       df_tk_parseerror
                             	SWBRK DFERR_SYNTAX
                             
                             
                             ;****************************************
                             ;* df_tk_parsestatement
                             ;* Execute parse routine for this statement
                             ;* Input: df_tokoff is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
d1c2 :                       df_tk_exec_parser
d1c2 : 0a               [ 2] 	asl a
d1c3 : aa               [ 2] 	tax
d1c4 : bd93d4           [ 4] 	lda df_tk_tokenjmp,x
d1c7 : 85d7             [ 3] 	sta df_tmpptra
d1c9 : bd94d4           [ 4] 	lda df_tk_tokenjmp+1,x
d1cc : 85d8             [ 3] 	sta df_tmpptra+1
d1ce : 6cd700           [ 6] 	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* df_tk_linenum
                             ;* Tokenise line number
                             ;****************************************
d1d1 :                       df_tk_linenum
                             	; Convert line number to 16 bit number
                             	; Save the line number
                             	; Increment the buffer pointer
d1d1 : 18               [ 2] 	clc
d1d2 : a900             [ 2] 	lda #lo(df_linbuff)
d1d4 : 65b2             [ 3] 	adc df_linoff
d1d6 : aa               [ 2] 	tax
d1d7 : a90a             [ 2] 	lda #hi(df_linbuff)
d1d9 : 6900             [ 2] 	adc #0
d1db : a001             [ 2] 	ldy #1			; Decimal format only
d1dd : 203dc9           [ 6] 	jsr con_n_to_a
d1e0 : 18               [ 2] 	clc
d1e1 : 8a               [ 2] 	txa
d1e2 : 65b2             [ 3] 	adc df_linoff
d1e4 : 85b2             [ 3] 	sta df_linoff
                             	; Now save line number
d1e6 : a579             [ 3] 	lda num_a
d1e8 : 207fce           [ 6] 	jsr df_tk_put_tok
d1eb : a57a             [ 3] 	lda num_a+1
d1ed : 4c7fce           [ 3] 	jmp df_tk_put_tok
                             
                             ;****************************************
                             ;* df_tk_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
AS65 Assembler for R6502 [1.42].                                     Page   78
---------------------------------- bank1.s -----------------------------------

                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;*			df_symoff is the symbol table index
                             ;****************************************
d1f0 :                       df_tk_matchtok
                             	; save the mask to check types against
d1f0 : 48               [ 3] 	pha
                             	; Start at token symbols beginning
d1f1 : a972             [ 2] 	lda #lo(df_tokensyms)
d1f3 : 85b7             [ 3] 	sta df_symtab
d1f5 : a9d2             [ 2] 	lda #hi(df_tokensyms)
d1f7 : 85b8             [ 3] 	sta df_symtab+1
d1f9 : a900             [ 2] 	lda #0
d1fb : 85b9             [ 3] 	sta df_symoff
d1fd :                       df_tk_checknexttok
                             	; check this token type first
d1fd : 68               [ 4] 	pla
d1fe : 48               [ 3] 	pha
d1ff : a6b9             [ 3] 	ldx df_symoff
d201 : 3d89d5           [ 4] 	and df_tk_tokentype,x
d204 : f032             [ 3] 	beq df_tk_symnomatch
                             	; Special check for operator token
                             	; because of order of precedence fudge
                             	; ******FIX THIS ONE DAY!!!!!!******
                             	; if parm and token type = DFTK_OP then ok
                             	; if parm and token type <> DFTK_OP then not ok
d206 : bd89d5           [ 4] 	lda df_tk_tokentype,x
d209 : 2908             [ 2] 	and #DFTK_OP
d20b : f009             [ 3] 	beq df_tk_matchtok_skip_op
d20d : 68               [ 4] 	pla
d20e : 48               [ 3] 	pha
d20f : 2908             [ 2] 	and #DFTK_OP
d211 : 3d89d5           [ 4] 	and df_tk_tokentype,x
d214 : f022             [ 3] 	beq df_tk_symnomatch
d216 :                       df_tk_matchtok_skip_op
                             	; From the line buffer current pointer
                             	; Check for a token match
d216 : a4b2             [ 3] 	ldy df_linoff
d218 : a200             [ 2] 	ldx #0
d21a :                       df_tk_checktokch
                             	; Get symtable char
                             	; and mask off MSB
d21a : a1b7             [ 6] 	lda (df_symtab,x)
                             	; Save the value and mask off MSB
d21c : 48               [ 3] 	pha
d21d : 297f             [ 2] 	and #0x7f
                             	; Compare with current line buffer char
d21f : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
d222 : d013             [ 3] 	bne df_tk_symnomatchp
                             	; If match and symbol has MSB then
                             	; all of the symbol matched
d224 : 68               [ 4] 	pla
d225 : 3033             [ 3] 	bmi df_tk_symfound
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
d22d : c8               [ 2] 	iny
                             	; If buffer is '.' then let this be a match
d22e : b9000a           [ 4] 	lda df_linbuff,y
AS65 Assembler for R6502 [1.42].                                     Page   79
---------------------------------- bank1.s -----------------------------------

d231 : c92e             [ 2] 	cmp #'.'
d233 : f025             [ 3] 	beq df_tk_symfound
d235 : d0e3             [ 3] 	bne df_tk_checktokch	; branch always
d237 :                       df_tk_symnomatchp
d237 : 68               [ 4] 	pla
d238 :                       df_tk_symnomatch
                             	; Increment symbol counter to next symbol
d238 : e6b9             [ 5] 	inc df_symoff
d23a :                       df_tk_symnextentry
d23a : a200             [ 2] 	ldx #0
d23c : a1b7             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is MSB
d23e : 3009             [ 3] 	bmi  df_tk_foundsymend
                             	_incZPWord df_symtab
                             
d246 : 4c3ad2           [ 3] 	jmp df_tk_symnextentry
d249 :                       df_tk_foundsymend
                             	; Increment char to point to new symbol
                             	; for matching with line buffer
                             	_incZPWord df_symtab
                             
                             	; If next char is not zero then
                             	; try and match with line buffer
d24f : a1b7             [ 6] 	lda (df_symtab,x)
d251 : d0aa             [ 4] 	bne df_tk_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; pop mask off stack
d253 : 68               [ 4] 	pla
                             	; Zero symbol counter
d254 : a900             [ 2] 	lda #0
d256 : 85b9             [ 3] 	sta df_symoff
                             	; Set C to indicate error (no match)
d258 : 38               [ 2] 	sec
d259 : 60               [ 6] 	rts
d25a :                       df_tk_symfound
                             	; Full match with keyword in symtable but
                             	; if matching with something that ended in alpha
                             	; then check the next buffer char is not alphanu
                             	; as this could be part of a variable name
                             	; Point to next buffer char in any case
d25a : c8               [ 2] 	iny
                             	; First mask off MSB
d25b : 297f             [ 2] 	and #0x7f
                             	; Then check if alpha
d25d : 20b7ce           [ 6] 	jsr df_tk_isalpha
                             	; if not alpha then we're definitely done
d260 : 9008             [ 3] 	bcc df_tk_symfound_final
                             	; else check buffer
d262 : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
d265 : 20c4ce           [ 6] 	jsr df_tk_isalphanum
                             	; do not count as a match
d268 : b0ce             [ 3] 	bcs df_tk_symnomatch
d26a :                       df_tk_symfound_final
                             	; pop mask off stack
d26a : 68               [ 4] 	pla
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
d26b : 84b2             [ 3] 	sty df_linoff
d26d : a5b9             [ 3] 	lda df_symoff
d26f : aa               [ 2] 	tax
AS65 Assembler for R6502 [1.42].                                     Page   80
---------------------------------- bank1.s -----------------------------------

d270 : 18               [ 2] 	clc
d271 : 60               [ 6] 	rts
                             
                             	include "dflat/tksymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  TKSYMTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Statement Token table
                             ; keywords
d272 :                       df_tokensyms
d272 : 80                    	db	0x80						; Implicit numeric assign
d273 : 80                    	db	0x80						; Implicit call procedure
d274 : bb                    	db	";"+0x80					; Comment
d275 : 7072696e746cee        	db	"printl",'n'+0x80			; println exprlist
d27c : 7072696e7461f4        	db	"printa",'t'+0x80			; printat x,y,exprlist
d283 : 7072696ef4            	db	"prin",'t'+0x80				; print exprlist
d288 : 6465e6                	db	"de",'f'+0x80				; def_subname
d28b : 656e646465e6          	db	"endde",'f'+0x80			; enddef
d291 : 7265747572ee          	db	"retur",'n'+0x80			; return
d297 : 61626f72f4            	db	"abor",'t'+0x80				; abort
d29c : 6c6f6361ec            	db	"loca",'l'+0x80				; local varlist
d2a1 : 6469ed                	db	"di",'m'+0x80				; dim varlist
d2a4 : 7265706561f4          	db	"repea",'t'+0x80			; repeat
d2aa : 756e7469ec            	db	"unti", 'l'+0x80			; until condition
d2af : 666ff2                	db	"fo",'r'+0x80				; for var=start,end,incremen
d2b2 : 6e6578f4              	db	"nex",'t'+0x80				; next
d2b6 : 7768696ce5            	db	"whil",'e'+0x80				; while condition
d2bb : 77656ee4              	db	"wen",'d'+0x80				; wend
d2bf : 69e6                  	db	"i",'f'+0x80				; if condition
d2c1 : 656c73e5              	db	"els",'e'+0x80				; else
d2c5 : 656e6469e6            	db	"endi",'f'+0x80				; endif
d2ca : 656c69e6              	db	"eli",'f'+0x80				; elif condition
d2ce : 646174e1              	db	"dat",'a'+0x80				; data
d2d2 : ff                    	db	0xff						; assembler command (non standard p
d2d3 : 7275ee                	db	"ru",'n'+0x80				; run
d2d6 : 6c6973f4              	db	"lis",'t'+0x80				; list _proc-|*|line,line
d2da : 696e7075f4            	db	"inpu",'t'+0x80				; input var
d2df : 6d6f64e5              	db	"mod",'e'+0x80				; mode n
d2e3 : 706c6ff4              	db	"plo",'t'+0x80				; plot x,y,char|string
AS65 Assembler for R6502 [1.42].                                     Page   81
---------------------------------- bank1.s -----------------------------------

d2e7 : 637572736ff2          	db	"curso",'r'+0x80			; cursor n
d2ed : 636cf3                	db	"cl",'s'+0x80				; cls
d2f0 : 76706f6be5            	db	"vpok",'e'+0x80				; vpoke addr,val
d2f5 : 7365747664f0          	db	"setvd",'p'+0x80			; setvdp reg,val
d2fb : 636f6c6f75f2          	db	"colou",'r'+0x80			; colour reg,val
d301 : 73707269746570..      	db	"spritepa",'t'+0x80			; spritepat patnum,arra
d30a : 73707269746570..      	db	"spritepo",'s'+0x80			; spritepos sprnum,x,y
d313 : 73707269746563..      	db	"spriteco",'l'+0x80			; spritecol sprnum,col
d31c : 7370726974656e..      	db	"spritenm",'e'+0x80			; spritenme sprnum,patn
d325 : 7370726974e5          	db	"sprit",'e'+0x80			; sprite n,x,y,p,c
d32b : 706f6be5              	db	"pok",'e'+0x80				; poke a,v
d32f : 646f6be5              	db	"dok",'e'+0x80				; doke a,v
d333 : 736f756ee4            	db	"soun",'d'+0x80				; sound
d338 : 6d757369e3            	db	"musi",'c'+0x80				; music
d33d : 706c61f9              	db	"pla",'y'+0x80				; play
d341 : 736176e5              	db	"sav",'e'+0x80				; save
d345 : 6c6f61e4              	db	"loa",'d'+0x80				; load
d349 : 6469f2                	db	"di",'r'+0x80				; dir (compact listing)
d34c : 646972ec              	db	"dir",'l'+0x80				; dirl (long listing)
d350 : 6465ec                	db 	"de",'l'+0x80				; del
d353 : 726561e4              	db	"rea",'d'+0x80				; read
d357 : 6e65f7                	db	"ne",'w'+0x80				; new
d35a : 72656e75ed            	db	"renu",'m'+0x80				; renum start,offset,incre
d35f : 776169f4              	db	"wai",'t'+0x80				; wait delay
d363 : 72657365f4            	db	"rese",'t'+0x80				; reset var
d368 : 68697265f3            	db	"hire",'s'+0x80				; hires col
d36d : 706f696ef4            	db	"poin",'t'+0x80				; point x,y,mode
d372 : 6c696ee5              	db	"lin",'e'+0x80				; line x0,y0,x1,y1
d376 : 68706c6ff4            	db	"hplo",'t'+0x80				; hplot x,y,char|string
d37b : 7069786d6f64e5        	db	"pixmod",'e'+0x80			; pixmode n
d382 : 7069786d6173eb        	db	"pixmas",'k'+0x80			; pixmask n
d389 : 706978636fec          	db	"pixco",'l'+0x80			; pixcol n
d38f : 626ff8                	db	"bo",'x'+0x80				; box x0,y0,x1,y1
d392 : 636972636ce5          	db	"circl",'e'+0x80			; circle x0,y0,r
d398 : 73686170e5            	db	"shap",'e'+0x80				; shape x,y,coords[]
d39d : 766c6f61e4            	db	"vloa",'d'+0x80				; vload addr,filename
d3a2 : 626c6f61e4            	db	"bloa",'d'+0x80				; bload mem,hdr,addr,filen
d3a7 : 62736176e5            	db	"bsav",'e'+0x80				; bsave mem,hdr,addr,len,f
d3ac : 68696d65ed            	db	"hime",'m'+0x80				; himem addr
d3b1 : 6d6f6e69746ff2        	db	"monito",'r'+0x80			; monitor
d3b8 : 63686469f2            	db	"chdi",'r'+0x80				; chdir fname
d3bd : 6d6b6469f2            	db	"mkdi",'r'+0x80				; mkdir fname
d3c2 : 6461746574696de5      	db	"datetim",'e'+0x80			; datetime string output
d3ca : 6e76706f6be5          	db	"nvpok",'e'+0x80			; NV poke addr,val
d3d0 : 666f6ef4              	db	"fon",'t'+0x80				; font <font file>
d3d4 : 6465766963e5          	db	"devic",'e'+0x80			; device <devnum>
d3da : 66636c6f73e5          	db	"fclos",'e'+0x80			; fclose
d3e0 : 72656469ed            	db	"redi",'m'+0x80				; redim varlist
d3e5 : 7075f4                	db  "pu",'t'+0x80				; put byte 
d3e8 : 70746c6f61e4          	db	"ptloa",'d'+0x80			; ptload addr,filename
d3ee : 7074696e69f4          	db	"ptini",'t'+0x80			; ptinit addr 
d3f4 : 70747275ee            	db	"ptru",'n'+0x80				; ptrun flag 
                             ; Functions
d3f9 : 767065656ba8          	db	"vpeek",'('+0x80			; vpeek(x)
d3ff : 7065656ba8            	db	"peek",'('+0x80				; peek(x)
d404 : 6465656ba8            	db	"deek",'('+0x80				; deek(x)
d409 : 737469636ba8          	db	"stick",'('+0x80			; stick(x)
d40f : 6b6579a8              	db	"key",'('+0x80				; key(x)
d413 : 636872a8              	db	"chr",'('+0x80				; chr(x)
d417 : 6c656674a8            	db	"left",'('+0x80				; left(x$,y)
d41c : 7269676874a8          	db	"right",'('+0x80			; right(x$,y)
d422 : 6d6964a8              	db	"mid",'('+0x80				; mid(x$,y)
AS65 Assembler for R6502 [1.42].                                     Page   82
---------------------------------- bank1.s -----------------------------------

d426 : 6c656ea8              	db	"len",'('+0x80				; len(x$)
d42a : 6d656da8              	db	"mem",'('+0x80				; mem(x)
d42e : 7363726ea8            	db	"scrn",'('+0x80				; scrn(x,y)
d433 : 726e64a8              	db	"rnd",'('+0x80				; rnd(x)
d437 : 656c6170736564a8      	db	"elapsed",'('+0x80			; elapsed(var)
d43f : 63616c6ca8            	db	"call",'('+0x80				; call(addr,A,X,Y)
d444 : 686578a8              	db	"hex",'('+0x80				; hex(x)
d448 : 646563a8              	db	"dec","("+0x80				; dec(x)
d44c : 617363a8              	db	"asc",'('+0x80				; asc(x$)
d450 : 76616ca8              	db	"val",'('+0x80				; val(x$)
d454 : 706978656ca8          	db	"pixel",'('+0x80			; pixel(x,y)
d45a : 73676ea8              	db	"sgn",'('+0x80				; sgn(x)
d45e : 61646472a8            	db	"addr",'('+0x80				; addr(var)
d463 : 6e767065656ba8        	db  "nvpeek",'('+0x80			; nvpeek(addr)
d46a : 66637265617465a8      	db	"fcreate",'('+0x80			; success=fcreate(filena
d472 : 666f70656ea8          	db	"fopen",'('+0x80			; success=fopen(filename)
d478 : 676574a8              	db	"get",'('+0x80				; alias for key()
                             ; Numeric operators, in priority
d47c : aa                    	db	'*'+0x80					; Multiply
d47d : af                    	db 	'/'+0x80					; Divide
d47e : dc                    	db 	'\\'+0x80					; Modulus
d47f : 3cbc                  	db	'<','<'+0x80				; Shift left
d481 : 3ebe                  	db	'>','>'+0x80				; Shift right
d483 : ab                    	db 	'+'+0x80					; Add
d484 : ad                    	db	'-'+0x80					; Subtract
                             ; Bool and conditional operators, in priority
d485 : a6                    	db '&'+0x80						; AND
d486 : fc                    	db '|'+0x80						; OR
d487 : de                    	db '^'+0x80						; EOR
d488 : 3cbd                  	db "<",'='+0x80					; Less than or equal
d48a : 3ebd                  	db ">",'='+0x80					; Greater than or equal
d48c : 3cbe                  	db "<",'>'+0x80					; Not equal
d48e : bc                    	db '<'+0x80						; Less than
d48f : be                    	db '>'+0x80						; Greater than
d490 : 3dbd                  	db "=",'='+0x80					; Equality (always last)
                             
d492 : 00                    	db  0
                             
                             
                             	
                             	
                             	include "dflat/tkjmptab.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of my authorship please!
                             ;*
                             ;*  TKJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
AS65 Assembler for R6502 [1.42].                                     Page   83
---------------------------------- bank1.s -----------------------------------

                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
d493 :                       df_tk_tokenjmp
d493 : 2ed6                  	dw	df_tk_assign
d495 : 03d7                  	dw	df_tk_callproc
d497 : 36d6                  	dw	df_tk_comment
d499 : 93d6                  	dw	df_tk_println
d49b : 87d6                  	dw	df_tk_printat
d49d : 93d6                  	dw	df_tk_print
d49f : dbd6                  	dw	df_tk_def
d4a1 : 43d7                  	dw	df_tk_enddef
d4a3 : 45d7                  	dw	df_tk_return
d4a5 : 43d7                  	dw	df_tk_abort
d4a7 : c9d6                  	dw	df_tk_local
d4a9 : bad6                  	dw	df_tk_dim
d4ab : 43d7                  	dw	df_tk_repeat
d4ad : 48d7                  	dw	df_tk_until
d4af : e1d6                  	dw	df_tk_for
d4b1 : 43d7                  	dw	df_tk_next
d4b3 : 48d7                  	dw	df_tk_while
d4b5 : 43d7                  	dw	df_tk_wend
d4b7 : 48d7                  	dw	df_tk_if
d4b9 : 43d7                  	dw	df_tk_else
d4bb : 43d7                  	dw	df_tk_endif
d4bd : 48d7                  	dw	df_tk_elseif
d4bf : 93d6                  	dw	df_tk_data
d4c1 : b8f4                  	dw	df_trap_monitor
d4c3 : 43d7                  	dw	df_tk_run
d4c5 : 65d6                  	dw	df_tk_list
d4c7 : a1d6                  	dw	df_tk_input
d4c9 : 48d7                  	dw	df_tk_mode
d4cb : 58d7                  	dw	df_tk_plot
d4cd : 48d7                  	dw	df_tk_cursor
d4cf : 43d7                  	dw	df_tk_cls
d4d1 : 4cd7                  	dw	df_tk_vpoke
d4d3 : 4cd7                  	dw	df_tk_setvdp
d4d5 : 58d7                  	dw	df_tk_colour
d4d7 : 4cd7                  	dw	df_tk_spritepat
d4d9 : 58d7                  	dw	df_tk_spritepos
d4db : 4cd7                  	dw	df_tk_spritecol
d4dd : 4cd7                  	dw	df_tk_spritenme
d4df : 70d7                  	dw	df_tk_sprite
d4e1 : 4cd7                  	dw	df_tk_poke
d4e3 : 4cd7                  	dw	df_tk_doke
d4e5 : 58d7                  	dw	df_tk_sound
d4e7 : 64d7                  	dw	df_tk_music
d4e9 : 64d7                  	dw	df_tk_play
d4eb : 48d7                  	dw	df_tk_save
d4ed : 48d7                  	dw	df_tk_load
d4ef : 43d7                  	dw	df_tk_dir
d4f1 : 43d7                  	dw	df_tk_dirl
d4f3 : 48d7                  	dw	df_tk_del
d4f5 : abd6                  	dw	df_tk_read
d4f7 : 43d7                  	dw	df_tk_new
d4f9 : 58d7                  	dw	df_tk_renum
d4fb : 48d7                  	dw	df_tk_wait
AS65 Assembler for R6502 [1.42].                                     Page   84
---------------------------------- bank1.s -----------------------------------

d4fd : 05d7                  	dw	df_tk_reset
d4ff : 48d7                  	dw	df_tk_hires
d501 : 4cd7                  	dw	df_tk_point
d503 : 64d7                  	dw	df_tk_line
d505 : 58d7                  	dw	df_tk_hplot
d507 : 48d7                  	dw	df_tk_pixmode
d509 : 48d7                  	dw	df_tk_pixmask
d50b : 48d7                  	dw	df_tk_pixcol
d50d : 64d7                  	dw	df_tk_box
d50f : 58d7                  	dw	df_tk_circle
d511 : 58d7                  	dw	df_tk_shape
d513 : 4cd7                  	dw	df_tk_vload
d515 : 64d7                  	dw	df_tk_bload
d517 : 70d7                  	dw	df_tk_bsave
d519 : 48d7                  	dw	df_tk_himem
d51b : 43d7                  	dw	df_tk_monitor
d51d : 48d7                  	dw	df_tk_chdir
d51f : 48d7                  	dw	df_tk_mkdir
d521 : 0ed7                  	dw	df_tk_datetime
d523 : 4cd7                  	dw	df_tk_nvpoke
d525 : 48d7                  	dw	df_tk_font
d527 : 48d7                  	dw	df_tk_device
d529 : 43d7                  	dw	df_tk_fclose
d52b : bad6                  	dw	df_tk_redim
d52d : 48d7                  	dw  df_tk_put
d52f : 4cd7                  	dw	df_tk_ptload
d531 : 4cd7                  	dw	df_tk_ptinit
d533 : 48d7                  	dw	df_tk_ptrun
                             
d535 : 17d7                  	dw	df_tk_vpeek
d537 : 17d7                  	dw	df_tk_peek
d539 : 17d7                  	dw	df_tk_deek
d53b : 17d7                  	dw	df_tk_stick
d53d : 17d7                  	dw	df_tk_key
d53f : 17d7                  	dw	df_tk_chr
d541 : 29d7                  	dw	df_tk_left
d543 : 29d7                  	dw	df_tk_right
d545 : 2fd7                  	dw	df_tk_mid
d547 : 17d7                  	dw	df_tk_len
d549 : 17d7                  	dw	df_tk_mem
d54b : 29d7                  	dw	df_tk_scrn
d54d : 17d7                  	dw	df_tk_rnd
d54f : 20d7                  	dw	df_tk_elapsed
d551 : 35d7                  	dw	df_tk_call
d553 : 17d7                  	dw	df_tk_hex
d555 : 17d7                  	dw	df_tk_dec
d557 : 17d7                  	dw	df_tk_asc
d559 : 17d7                  	dw	df_tk_val
d55b : 29d7                  	dw	df_tk_pixel
d55d : 17d7                  	dw	df_tk_sgn
d55f : 20d7                  	dw	df_tk_addr
d561 : 17d7                  	dw	df_tk_nvpeek
d563 : 17d7                  	dw	df_tk_fcreate
d565 : 17d7                  	dw	df_tk_fopen
d567 : 17d7                  	dw  df_tk_get
                             	
d569 : 43d7                  	dw	df_tk_mult
d56b : 43d7                  	dw	df_tk_div
d56d : 43d7                  	dw	df_tk_mod
d56f : 43d7                  	dw	df_tk_asl
d571 : 43d7                  	dw	df_tk_lsr
d573 : 43d7                  	dw	df_tk_add
AS65 Assembler for R6502 [1.42].                                     Page   85
---------------------------------- bank1.s -----------------------------------

d575 : 43d7                  	dw	df_tk_sub
                             	
d577 : 43d7                  	dw	df_tk_and
d579 : 43d7                  	dw	df_tk_or
d57b : 43d7                  	dw	df_tk_eor
d57d : 43d7                  	dw	df_tk_lte
d57f : 43d7                  	dw	df_tk_gte
d581 : 43d7                  	dw	df_tk_ne
d583 : 43d7                  	dw	df_tk_lt
d585 : 43d7                  	dw	df_tk_gt
d587 : 43d7                  	dw	df_tk_eq
                             
                             	
                             	
                             	
                             	
                             	
                             	include "dflat/tktyptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser type table (is it a keyword, function
                             ; In token order of df_tokensyms
d589 :                       df_tk_tokentype
d589 : 01                    	db	DFTK_KW
d58a : 01                    	db	DFTK_KW
d58b : 01                    	db	DFTK_KW
d58c : 01                    	db	DFTK_KW
d58d : 01                    	db	DFTK_KW
d58e : 01                    	db	DFTK_KW
d58f : 01                    	db	DFTK_KW
d590 : 01                    	db	DFTK_KW
d591 : 01                    	db	DFTK_KW
d592 : 01                    	db	DFTK_KW
d593 : 01                    	db	DFTK_KW
d594 : 01                    	db	DFTK_KW
d595 : 01                    	db	DFTK_KW
d596 : 01                    	db	DFTK_KW
d597 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   86
---------------------------------- bank1.s -----------------------------------

d598 : 01                    	db	DFTK_KW
d599 : 01                    	db	DFTK_KW
d59a : 01                    	db	DFTK_KW
d59b : 01                    	db	DFTK_KW
d59c : 01                    	db	DFTK_KW
d59d : 01                    	db	DFTK_KW
d59e : 01                    	db	DFTK_KW
d59f : 01                    	db	DFTK_KW
d5a0 : 01                    	db	DFTK_KW
d5a1 : 01                    	db	DFTK_KW
d5a2 : 01                    	db	DFTK_KW
d5a3 : 01                    	db	DFTK_KW
d5a4 : 01                    	db	DFTK_KW
d5a5 : 01                    	db	DFTK_KW
d5a6 : 01                    	db	DFTK_KW
d5a7 : 01                    	db	DFTK_KW
d5a8 : 01                    	db	DFTK_KW
d5a9 : 01                    	db	DFTK_KW
d5aa : 01                    	db	DFTK_KW
d5ab : 01                    	db	DFTK_KW
d5ac : 01                    	db	DFTK_KW
d5ad : 01                    	db	DFTK_KW
d5ae : 01                    	db	DFTK_KW
d5af : 01                    	db	DFTK_KW
d5b0 : 01                    	db	DFTK_KW
d5b1 : 01                    	db	DFTK_KW
d5b2 : 01                    	db	DFTK_KW
d5b3 : 01                    	db	DFTK_KW
d5b4 : 01                    	db	DFTK_KW
d5b5 : 01                    	db	DFTK_KW
d5b6 : 01                    	db	DFTK_KW
d5b7 : 01                    	db	DFTK_KW
d5b8 : 01                    	db	DFTK_KW
d5b9 : 01                    	db	DFTK_KW
d5ba : 01                    	db	DFTK_KW
d5bb : 01                    	db	DFTK_KW
d5bc : 01                    	db	DFTK_KW
d5bd : 01                    	db	DFTK_KW
d5be : 01                    	db	DFTK_KW
d5bf : 01                    	db	DFTK_KW
d5c0 : 01                    	db	DFTK_KW
d5c1 : 01                    	db	DFTK_KW
d5c2 : 01                    	db	DFTK_KW
d5c3 : 01                    	db	DFTK_KW
d5c4 : 01                    	db	DFTK_KW
d5c5 : 01                    	db	DFTK_KW
d5c6 : 01                    	db	DFTK_KW
d5c7 : 01                    	db	DFTK_KW
d5c8 : 01                    	db	DFTK_KW
d5c9 : 01                    	db	DFTK_KW
d5ca : 01                    	db	DFTK_KW
d5cb : 01                    	db	DFTK_KW
d5cc : 01                    	db	DFTK_KW
d5cd : 01                    	db	DFTK_KW
d5ce : 01                    	db	DFTK_KW
d5cf : 01                    	db	DFTK_KW
d5d0 : 01                    	db	DFTK_KW
d5d1 : 01                    	db	DFTK_KW
d5d2 : 01                    	db	DFTK_KW
d5d3 : 01                    	db	DFTK_KW
d5d4 : 01                    	db	DFTK_KW
d5d5 : 01                    	db	DFTK_KW
AS65 Assembler for R6502 [1.42].                                     Page   87
---------------------------------- bank1.s -----------------------------------

d5d6 : 01                    	db	DFTK_KW
d5d7 : 01                    	db	DFTK_KW
d5d8 : 01                    	db	DFTK_KW
d5d9 : 01                    	db	DFTK_KW
                             
d5da : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5db : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5dc : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5dd : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5de : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5df : 42                    	db 	DFTK_FN | DFTK_STR
d5e0 : 42                    	db 	DFTK_FN | DFTK_STR
d5e1 : 42                    	db 	DFTK_FN | DFTK_STR
d5e2 : 42                    	db 	DFTK_FN | DFTK_STR
d5e3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5e4 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5e5 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5e6 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5e7 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5e8 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5e9 : 42                    	db 	DFTK_FN | DFTK_STR
d5ea : 42                    	db 	DFTK_FN | DFTK_STR
d5eb : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5ec : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5ed : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5ee : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5ef : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5f0 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5f1 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5f2 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
d5f3 : 32                    	db 	DFTK_FN | DFTK_INT | DFTK_BYT
                             	;* Operators add the order of precedence (0=high
d5f4 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d5f5 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d5f6 : 38                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 0
d5f7 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d5f8 : 39                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 1
d5f9 : 3e                    	db 	DFTK_OP | DFTK_STROP | DFTK_INT | DFTK_BYT +
d5fa : 3a                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 2
                             
d5fb : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d5fc : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d5fd : 3d                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 5
d5fe : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d5ff : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d600 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d601 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d602 : 3c                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 4
d603 : 3f                    	db 	DFTK_OP | DFTK_INT | DFTK_BYT + 7
                             
                             
                             	
                             	
                             	
                             	
                             
                             	include "dflat/toksubs.s"
                             ;************************************************
                             ;*
                             ;*	DOLO-1 HOMEBREW COMPUTER
                             ;*	Hardware and software design by Dolo Miah
                             ;*	Copyright 2014-18
AS65 Assembler for R6502 [1.42].                                     Page   88
---------------------------------- bank1.s -----------------------------------

                             ;*  Free to use for any non-commercial purpose su
                             ;*  full credit of original my authorship please!
                             ;*
                             ;*  TOKSUBS.S
                             ;*  Module that implements the tokenisation of ke
                             ;*  When a line is being parsed, the index of the
                             ;*  found in the symbol table is used to call a r
                             ;*  here.  The job of a routine here is then to f
                             ;*  parse the raw input e.g. a command that takes
                             ;*  parameters, need to do what it needs to ident
                             ;*  Despite the number of keywords in dflat, this
                             ;*  anywhere near the size of rtsubs.s (the runti
                             ;*  equivalent of this) because there is so much 
                             ;*  synactically.
                             ;*  The tokenised output is put in to its own buf
                             ;*  if the whole input was tokenised successfully
                             ;*  dflat will either try and execute (if in imme
                             ;*  mode), or save it to program memory in line n
                             ;*  order.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;* General routine to tokenise a mandatory variab
d604 :                       df_tk_variable
d604 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d607 : 206ece           [ 6] 	jsr df_tk_peek_buf
d60a : 20b7ce           [ 6] 	jsr df_tk_isalpha
d60d : 901d             [ 3] 	bcc df_tk_error
d60f : a900             [ 2] 	lda #0
d611 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Parse assignment preamble
                             ;****************************************
d612 :                       df_tk_preassign
                             	; Put assignment token
                             	; assume its a numeric int for now
d612 : a980             [ 2] 	lda #0x80
d614 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	
                             	; first find or create a variable
d617 : 2004d6           [ 6] 	jsr df_tk_variable
d61a : 20b6cf           [ 6] 	jsr df_tk_var
                             	; next char sound be =
d61d : a93d             [ 2] 	lda #'='
d61f : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; skip more ws
d622 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; should not be at end of line
d625 : 206ece           [ 6] 	jsr df_tk_peek_buf
d628 : f002             [ 3] 	beq df_tk_parse_ass_err
d62a : 18               [ 2] 	clc
d62b : 60               [ 6] 	rts
d62c :                       df_tk_parse_ass_err
d62c :                       df_tk_error
                             	SWBRK DFERR_SYNTAX
                             
AS65 Assembler for R6502 [1.42].                                     Page   89
---------------------------------- bank1.s -----------------------------------

                             
                             ;****************************************
                             ;* Parse numeric assignment
                             ;****************************************
d62e :                       df_tk_assign
d62e : 2012d6           [ 6] 	jsr df_tk_preassign
                             	; tokenise an expression (int or byte)
d631 : 20fdd0           [ 6] 	jsr df_tk_expression
d634 : 18               [ 2] 	clc
d635 : 60               [ 6] 	rts
                             
                             
d636 :                       df_tk_comment
                             	; copy all subsequent chars to token
d636 : 2074ce           [ 6] 	jsr df_tk_get_buf
d639 : f005             [ 3] 	beq df_tk_comment_done
d63b : 207fce           [ 6] 	jsr df_tk_put_tok
d63e : 80f6             [ 3] 	bra df_tk_comment
d640 :                       df_tk_comment_done
d640 : 18               [ 2] 	clc
d641 : 60               [ 6] 	rts
                             
                             ; Utility to get procedure name with _
d642 :                       df_tk_listp_procname
                             	; try and find the first proc
d642 : a95f             [ 2] 	lda #'_'
d644 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d647 : b01a             [ 3] 	bcs df_tk_listp_procname_err
                             	; now get first alpha then all alphanum
d649 : 206ece           [ 6] 	jsr df_tk_peek_buf
d64c : 20b7ce           [ 6] 	jsr df_tk_isalpha
d64f : 9012             [ 3] 	bcc df_tk_listp_procname_err
d651 :                       df_tk_listp_procname_ch
d651 : 206ece           [ 6] 	jsr df_tk_peek_buf
d654 : 20c4ce           [ 6] 	jsr df_tk_isalphanum
d657 : 9008             [ 3] 	bcc df_tk_listp_procname_ok
d659 : 2074ce           [ 6] 	jsr df_tk_get_buf
d65c : 207fce           [ 6] 	jsr df_tk_put_tok
d65f : 80f0             [ 3] 	bra df_tk_listp_procname_ch
d661 :                       df_tk_listp_procname_ok
d661 : 18               [ 2] 	clc
d662 : 60               [ 6] 	rts
d663 :                       df_tk_listp_procname_err
d663 : 38               [ 2] 	sec
d664 : 60               [ 6] 	rts
                             
d665 :                       df_tk_list
d665 : 2042d6           [ 6] 	jsr df_tk_listp_procname
                             	; if not found try '*' or normal list
d668 : b007             [ 3] 	bcs df_tk_list_procs
                             	; the '-' allows to list to end
d66a : a92d             [ 2] 	lda #'-'
                             	; find and add if it exists
d66c : 2000cf           [ 6] 	jsr df_tk_expect_tok
d66f : 8014             [ 3] 	bra df_tk_list_done
                             	; '*' means list procs
d671 :                       df_tk_list_procs
                             	; try and find the first proc
d671 : a92a             [ 2] 	lda #'*'
d673 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d676 : 900d             [ 3] 	bcc df_tk_list_done
                             	; else normal line number
AS65 Assembler for R6502 [1.42].                                     Page   90
---------------------------------- bank1.s -----------------------------------

d678 :                       df_tk_list_line
                             	; tokenise an expression
d678 : 20fdd0           [ 6] 	jsr df_tk_expression
                             	; if not at the end then keep going
d67b : a92c             [ 2] 	lda #','
d67d : 2000cf           [ 6] 	jsr df_tk_expect_tok
d680 : b003             [ 3] 	bcs df_tk_list_done
                             	; else get the next expression
d682 : 20fdd0           [ 6] 	jsr df_tk_expression	
d685 :                       df_tk_list_done
d685 : 18               [ 2] 	clc
d686 : 60               [ 6] 	rts
                             
d687 :                       df_tk_printat
                             	; Must get 2 parms for x,y
d687 : 204cd7           [ 6] 	jsr df_tk_2parms
                             	; if not at the end then keep going
d68a : a92c             [ 2] 	lda #','
d68c : 2000cf           [ 6] 	jsr df_tk_expect_tok
d68f : 9002             [ 3] 	bcc df_tk_print
                             	; else done
d691 : 18               [ 2] 	clc
d692 : 60               [ 6] 	rts
d693 :                       df_tk_data
d693 :                       df_tk_println
d693 :                       df_tk_print
d693 :                       df_tk_asm_db
d693 :                       df_tk_asm_dw
                             	; tokenise an expression
d693 : 20fdd0           [ 6] 	jsr df_tk_expression
                             	; is there more to come?
d696 : a92c             [ 2] 	lda #','
d698 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d69b : b002             [ 3] 	bcs df_tk_print_done
d69d : 80f4             [ 3] 	bra df_tk_print
d69f :                       df_tk_print_done
d69f : 18               [ 2] 	clc
d6a0 : 60               [ 6] 	rts
                             
d6a1 :                       df_tk_input
d6a1 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d6a4 : 2004d6           [ 6] 	jsr df_tk_variable
d6a7 : 20b6cf           [ 6] 	jsr df_tk_var
                             	; either cc or cs depending on error condition
d6aa : 60               [ 6] 	rts
                             	
d6ab :                       df_tk_read
                             	; tokenise a variable
d6ab : 2004d6           [ 6] 	jsr df_tk_variable
d6ae : 20b6cf           [ 6] 	jsr df_tk_var
                             	; if not at the end then keep going
d6b1 : a92c             [ 2] 	lda #','
d6b3 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d6b6 : 90f3             [ 3] 	bcc df_tk_read
d6b8 : 18               [ 2] 	clc
d6b9 : 60               [ 6] 	rts
                             
d6ba :                       df_tk_dim
d6ba :                       df_tk_redim
                             	; tokenise a variable
d6ba : 2004d6           [ 6] 	jsr df_tk_variable
AS65 Assembler for R6502 [1.42].                                     Page   91
---------------------------------- bank1.s -----------------------------------

d6bd : 20fecf           [ 6] 	jsr df_tk_arrvar
                             	; if not at the end then keep going
d6c0 : a92c             [ 2] 	lda #','
d6c2 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d6c5 : 90f3             [ 3] 	bcc df_tk_dim
d6c7 : 18               [ 2] 	clc
d6c8 : 60               [ 6] 	rts
                             
d6c9 :                       df_tk_local
d6c9 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             	; tokenise a variable
d6cc : 2004d6           [ 6] 	jsr df_tk_variable
d6cf : 20e8cf           [ 6] 	jsr df_tk_localvar
                             	; if not at the end then keep going
d6d2 : a92c             [ 2] 	lda #','
d6d4 : 2000cf           [ 6] 	jsr df_tk_expect_tok
d6d7 : 90f0             [ 3] 	bcc df_tk_local
d6d9 : 18               [ 2] 	clc
d6da : 60               [ 6] 	rts
                             
                             ; A = 0 : Def
                             ; A = 1 : Call
d6db :                       df_tk_def
d6db : a900             [ 2] 	lda #0
d6dd : 2009d0           [ 6] 	jsr df_tk_proc
d6e0 : 60               [ 6] 	rts
                             
                             
                             ; syntax : for %a=1,10,1
d6e1 :                       df_tk_for
d6e1 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise the for variable
d6e4 : a901             [ 2] 	lda #DFVVT_INT
d6e6 : 20b6cf           [ 6] 	jsr df_tk_var
                             
                             	; always expect '='
d6e9 : a93d             [ 2] 	lda #'='
d6eb : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; starting value
d6ee : 20fdd0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d6f1 : a92c             [ 2] 	lda #','
d6f3 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             
                             	; ending value
d6f6 : 20fdd0           [ 6] 	jsr df_tk_expression
                             	
                             	; always expect ',' separator
d6f9 : a92c             [ 2] 	lda #','
d6fb : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	
                             	; step value
d6fe : 20fdd0           [ 6] 	jsr df_tk_expression
d701 :                       df_tk_for_done
d701 : 18               [ 2] 	clc
d702 : 60               [ 6] 	rts
                             	
                             ; call to proc should not occur by itself
d703 :                       df_tk_callproc
AS65 Assembler for R6502 [1.42].                                     Page   92
---------------------------------- bank1.s -----------------------------------

d703 : 38               [ 2] 	sec
d704 : 60               [ 6] 	rts
                             
                             ; timer reset expects an int variable only
d705 :                       df_tk_reset
d705 : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d708 : a901             [ 2] 	lda #DFVVT_INT
d70a : 20b6cf           [ 6] 	jsr df_tk_var
d70d : 60               [ 6] 	rts
                             
                             ; date time expects a string variable only
d70e :                       df_tk_datetime
d70e : 20d0ce           [ 6] 	jsr df_tk_skip_ws
                             
                             	; tokenise a variable
d711 : a904             [ 2] 	lda #DFVVT_STR
d713 : 20b6cf           [ 6] 	jsr df_tk_var
d716 : 60               [ 6] 	rts
                             
                             ; These functions expect 1 parmeter
d717 :                       df_tk_len
d717 :                       df_tk_chr
d717 :                       df_tk_key
d717 :                       df_tk_get
d717 :                       df_tk_stick
d717 :                       df_tk_deek
d717 :                       df_tk_vpeek
d717 :                       df_tk_peek
d717 :                       df_tk_nvpeek
d717 :                       df_tk_mem
d717 :                       df_tk_rnd
d717 :                       df_tk_hex
d717 :                       df_tk_dec
d717 :                       df_tk_asc
d717 :                       df_tk_val
d717 :                       df_tk_sgn
d717 :                       df_tk_fcreate
d717 :                       df_tk_fopen
d717 : 20fdd0           [ 6] 	jsr df_tk_expression
d71a :                       df_tk_closebrkt
d71a : a929             [ 2] 	lda #')'
d71c : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
d71f : 60               [ 6] 	rts
                             
                             ; This function expects a variable only
d720 :                       df_tk_addr
d720 :                       df_tk_elapsed
d720 : 2004d6           [ 6] 	jsr df_tk_variable
d723 : 20b6cf           [ 6] 	jsr df_tk_var
                             	; must have close braket
d726 : 4c1ad7           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 2 parameters
d729 :                       df_tk_left
d729 :                       df_tk_right
d729 :                       df_tk_scrn
d729 :                       df_tk_pixel
d729 : 204cd7           [ 6] 	jsr df_tk_2parms
d72c : 4c1ad7           [ 3] 	jmp df_tk_closebrkt
                             
AS65 Assembler for R6502 [1.42].                                     Page   93
---------------------------------- bank1.s -----------------------------------

                             ; These functions expect 3 parameters
d72f :                       df_tk_mid
d72f : 2058d7           [ 6] 	jsr df_tk_3parms
d732 : 4c1ad7           [ 3] 	jmp df_tk_closebrkt
                             
                             ; These functions expect 4 parameters
d735 :                       df_tk_call
d735 : 204cd7           [ 6] 	jsr df_tk_2parms
d738 : a92c             [ 2] 	lda #','
d73a : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
d73d : 204cd7           [ 6] 	jsr df_tk_2parms
d740 : 4c1ad7           [ 3] 	jmp df_tk_closebrkt
                             
                             ;all these commands require no parameters
d743 :                       df_tk_else
d743 :                       df_tk_endif
d743 :                       df_tk_enddef
d743 :                       df_tk_abort
d743 :                       df_tk_repeat
d743 :                       df_tk_next
d743 :                       df_tk_wend
d743 :                       df_tk_run
d743 :                       df_tk_add
d743 :                       df_tk_sadd
d743 :                       df_tk_dir
d743 :                       df_tk_dirl
d743 :                       df_tk_cls
d743 :                       df_tk_new
d743 :                       df_tk_mult
d743 :                       df_tk_div
d743 :                       df_tk_mod
d743 :                       df_tk_asl
d743 :                       df_tk_lsr
d743 :                       df_tk_sub
d743 :                       df_tk_and
d743 :                       df_tk_or
d743 :                       df_tk_eor
d743 :                       df_tk_lte
d743 :                       df_tk_lt
d743 :                       df_tk_gte
d743 :                       df_tk_gt
d743 :                       df_tk_ne
d743 :                       df_tk_eq
d743 :                       df_tk_monitor
d743 :                       df_tk_fclose
                             ;df_tk_retsub
d743 : 18               [ 2] 	clc
d744 : 60               [ 6] 	rts
                             
                             ; 0 or 1 parameter special!
d745 :                       df_tk_return
d745 : 4cfdd0           [ 3] 	jmp df_tk_expression
                             
                             ; These commands expect 1 parameter	
d748 :                       df_tk_while
d748 :                       df_tk_until
d748 :                       df_tk_if
d748 :                       df_tk_elseif
d748 :                       df_tk_wait
d748 :                       df_tk_cursor
d748 :                       df_tk_mode
d748 :                       df_tk_del
AS65 Assembler for R6502 [1.42].                                     Page   94
---------------------------------- bank1.s -----------------------------------

d748 :                       df_tk_chdir
d748 :                       df_tk_mkdir
d748 :                       df_tk_hires
d748 :                       df_tk_load
d748 :                       df_tk_save
d748 :                       df_tk_pixmode
d748 :                       df_tk_pixmask
d748 :                       df_tk_pixcol
d748 :                       df_tk_put
d748 :                       df_tk_himem
d748 :                       df_tk_font
d748 :                       df_tk_device
d748 :                       df_tk_ptrun
                             ;df_tk_goto
                             ;df_tk_gosub
                             
d748 :                       df_tk_asm_org
d748 :                       df_tk_asm_opt
d748 :                       df_tk_asm_ds
                             
                             	; first parm
d748 : 20fdd0           [ 6] 	jsr df_tk_expression
d74b : 60               [ 6] 	rts
                             
                             ; These commands expect 2 numeric parameters
d74c :                       df_tk_setvdp
d74c :                       df_tk_spritepat
d74c :                       df_tk_spritecol
d74c :                       df_tk_spritenme
d74c :                       df_tk_vpoke
d74c :                       df_tk_poke
d74c :                       df_tk_doke
d74c :                       df_tk_nvpoke
d74c :                       df_tk_point
d74c :                       df_tk_vload
d74c :                       df_tk_ptload
d74c :                       df_tk_ptinit
d74c :                       df_tk_2parms
                             	; first parm
d74c : 20fdd0           [ 6] 	jsr df_tk_expression
d74f : a92c             [ 2] 	lda #','
d751 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise second parm
d754 : 20fdd0           [ 6] 	jsr df_tk_expression
d757 : 60               [ 6] 	rts
                             
                             ; these commands expect 3 numeric parameters
d758 :                       df_tk_hplot
d758 :                       df_tk_plot
d758 :                       df_tk_circle
d758 :                       df_tk_sound
d758 :                       df_tk_colour
d758 :                       df_tk_spritepos
d758 :                       df_tk_shape
d758 :                       df_tk_renum
d758 :                       df_tk_3parms
d758 : 204cd7           [ 6] 	jsr df_tk_2parms
d75b : a92c             [ 2] 	lda #','
d75d : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; tokenise third parm
d760 : 20fdd0           [ 6] 	jsr df_tk_expression
d763 : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   95
---------------------------------- bank1.s -----------------------------------

                             
                             ; these commands expect 4 numeric parameters
d764 :                       df_tk_play
d764 :                       df_tk_music
d764 :                       df_tk_line
d764 :                       df_tk_box
d764 :                       df_tk_bload
d764 :                       df_tk_4parms
d764 : 204cd7           [ 6] 	jsr df_tk_2parms
d767 : a92c             [ 2] 	lda #','
d769 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
d76c : 204cd7           [ 6] 	jsr df_tk_2parms
d76f : 60               [ 6] 	rts
                             
                             ; these commands expect 5 numeric parameters
d770 :                       df_tk_sprite
d770 :                       df_tk_bsave
d770 :                       df_tk_5parms
d770 : 2064d7           [ 6] 	jsr df_tk_4parms
d773 : a92c             [ 2] 	lda #','
d775 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
d778 : 20fdd0           [ 6] 	jsr df_tk_expression
d77b : 60               [ 6] 	rts
                             
                             
                             
d77c :                       mod_sz_tokenise_e
                             
                             
                             
                             	include "dflat/progedit.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROGEDIT.S
                             ;*  dflat module to enable editing of a dflat pro
                             ;*  dflat bascially starts here - waiting for use
                             ;*  when a line is entered, if it is not preceede
                             ;*  line number it is tokenised and attempted to 
                             ;*  immediatly.  If it is preceeded by a line num
                             ;*  number is used to save the tokenised line in 
                             ;*  position in memory.
                             ;*  So this is just like a good old editing sessi
                             ;*  nearly any common flavour of 80s basic. Howev
                             ;*  tokenises everything except whitespace and st
                             ;*  constants - even when saving.  Unlike my trus
                             ;*  where I could type in any garbage and it woul
                             ;*  saved with the line number, dflat needs to be
                             ;*  tokenise the line.  So it's actually a bit mo
                             ;*  Atari 8 bit BASIC.
                             ;*
                             ;************************************************
                             
d77c :                       mod_sz_progedit_s
                             
                             ;****************************************
                             ;* df_pg_find_line
AS65 Assembler for R6502 [1.42].                                     Page   96
---------------------------------- bank1.s -----------------------------------

                             ;* Find a line number in X(L), A(H)
                             ;* Return X(L), A(H) of line, Y = Length
                             ;* C=1 Exact match not found, C=0 Exact Found
                             ;* If not exact match then next highest line addr
                             ;* Will be in X and A
                             ;****************************************
d77c :                       df_pg_find_line
d77c : a49b             [ 3] 	ldy df_prgstrt		; num_tmp contains starting poin
d77e : 8485             [ 3] 	sty num_tmp
d780 : a49c             [ 3] 	ldy df_prgstrt+1
d782 : 8486             [ 3] 	sty num_tmp+1
d784 : 8679             [ 3] 	stx num_a			; num_a contains the line number to 
d786 : 857a             [ 3] 	sta num_a+1
d788 :                       df_pg_check_next_line	; Also used during runtime 
d788 : a585             [ 3] 	lda num_tmp
d78a : c59d             [ 3] 	cmp df_prgend
d78c : d011             [ 3] 	bne df_pg_check_line
d78e : a586             [ 3] 	lda num_tmp+1
d790 : c59e             [ 3] 	cmp df_prgend+1
d792 : d00b             [ 3] 	bne df_pg_check_line
d794 :                       df_pr_line_gt_target	
                             	; End of program or line > target
                             	; X,A = address of finish
                             	; Load Y with the length
d794 : a200             [ 2] 	ldx #0
d796 : a185             [ 6] 	lda (num_tmp,x)
d798 : a8               [ 2] 	tay
d799 : a685             [ 3] 	ldx num_tmp
d79b : a586             [ 3] 	lda num_tmp+1
d79d : 38               [ 2] 	sec
d79e : 60               [ 6] 	rts
d79f :                       df_pg_check_line
d79f : 38               [ 2] 	sec					; Do a trial subtract of
d7a0 : a001             [ 2] 	ldy #DFTK_LINNUM	; target - line
d7a2 : a579             [ 3] 	lda num_a
d7a4 : f185             [ 5] 	sbc (num_tmp),y
d7a6 : 8587             [ 3] 	sta num_tmp+2		; Partial result of sbc
d7a8 : c8               [ 2] 	iny
d7a9 : a57a             [ 3] 	lda num_a+1
d7ab : f185             [ 5] 	sbc (num_tmp),y
d7ad : 0587             [ 3] 	ora num_tmp+2		; or with partial result for z ch
                             	; If C=0 then line > target (done)
d7af : 90e3             [ 3] 	bcc df_pr_line_gt_target
                             	; If partial result Z=0 then got an exact match
d7b1 : f00f             [ 3] 	beq df_pr_line_match
                             	; Else we go to next line
d7b3 : a200             [ 2] 	ldx #0
d7b5 : 18               [ 2] 	clc
d7b6 : a585             [ 3] 	lda num_tmp
d7b8 : 6185             [ 6] 	adc (num_tmp,x)
d7ba : 8585             [ 3] 	sta num_tmp
d7bc : 90ca             [ 3] 	bcc df_pg_check_next_line
d7be : e686             [ 5] 	inc num_tmp+1
d7c0 : d0c6             [ 3] 	bne df_pg_check_next_line	; Always
d7c2 :                       df_pr_line_match
d7c2 : a200             [ 2] 	ldx #0
d7c4 : a185             [ 6] 	lda (num_tmp,x)
d7c6 : a8               [ 2] 	tay
d7c7 : a685             [ 3] 	ldx num_tmp
d7c9 : a586             [ 3] 	lda num_tmp+1
d7cb : 18               [ 2] 	clc
d7cc : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page   97
---------------------------------- bank1.s -----------------------------------

                             	
                             ;****************************************
                             ;* df_pg_insert_block
                             ;* Insert a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d7cd :                       df_pg_insert_block
                             	; Inserting requires a block copy from
                             	; end of program space to the insert address
                             	
                             	; Save address as this is the lowest address
d7cd : 8679             [ 3] 	stx num_a
d7cf : 857a             [ 3] 	sta num_a+1
                             	; End of program space is the first byte to move
d7d1 : a59d             [ 3] 	lda df_prgend
d7d3 : 8581             [ 3] 	sta num_x
d7d5 : a59e             [ 3] 	lda df_prgend+1
d7d7 : 8582             [ 3] 	sta num_x+1	
d7d9 :                       df_pg_insert_byte
                             	; Move a byte from the current top
d7d9 : a200             [ 2] 	ldx #0
d7db : a181             [ 6] 	lda (num_x,x)
                             	; To the new top (+Y)
d7dd : 9181             [ 5] 	sta (num_x),y
                             	; Compare current address with lowest
d7df : a581             [ 3] 	lda num_x
d7e1 : c579             [ 3] 	cmp num_a
d7e3 : d012             [ 3] 	bne df_pg_insert_next_byte
d7e5 : a582             [ 3] 	lda num_x+1
d7e7 : c57a             [ 3] 	cmp num_a+1
d7e9 : d00c             [ 3] 	bne df_pg_insert_next_byte
                             	; Finished, update program end pointer
d7eb : 18               [ 2] 	clc
d7ec : 98               [ 2] 	tya
d7ed : 659d             [ 3] 	adc df_prgend
d7ef : 859d             [ 3] 	sta df_prgend
                             	_bcc 2
                             
d7f3 : e69e             [ 5] 	inc df_prgend+1
d7f5 : 18               [ 2] 	clc
d7f6 : 60               [ 6] 	rts	; C=0
d7f7 :                       df_pg_insert_next_byte
                             	; Decrement current address (trashes A)
                             	_decZPWordA num_x
                             
d804 : 4cd9d7           [ 3] 	jmp df_pg_insert_byte
                             
                             ;****************************************
                             ;* df_pg_delete_block
                             ;* Delete a block at adr (X, A) of size Y
                             ;* df_prgend updated
                             ;* C=1 Error, C=0 Ok
                             ;****************************************
d807 :                       df_pg_delete_block
                             	; Deleting requires a block copy from
                             	; deletion address to end of program
                             	
                             	; Save address as this is the start address
d807 : 8679             [ 3] 	stx num_a
d809 : 857a             [ 3] 	sta num_a+1
d80b : a200             [ 2] 	ldx #0	; No indirect indexing
AS65 Assembler for R6502 [1.42].                                     Page   98
---------------------------------- bank1.s -----------------------------------

d80d :                       df_pg_delete_byte
                             	; Move a byte from current+Y
d80d : b179             [ 5] 	lda (num_a),y
                             	; Down to current (x=0)
d80f : 8179             [ 6] 	sta (num_a,x)
                             	; Compare current address with lowest
d811 : a579             [ 3] 	lda num_a
d813 : c59d             [ 3] 	cmp df_prgend
d815 : d017             [ 3] 	bne df_pg_delete_next_byte
d817 : a57a             [ 3] 	lda num_a+1
d819 : c59e             [ 3] 	cmp df_prgend+1
d81b : d011             [ 3] 	bne df_pg_delete_next_byte
                             	; Finished, update program end pointer
d81d : 8479             [ 3] 	sty num_a
d81f : 38               [ 2] 	sec
d820 : a59d             [ 3] 	lda df_prgend
d822 : e579             [ 3] 	sbc num_a
d824 : 859d             [ 3] 	sta df_prgend
d826 : a59e             [ 3] 	lda df_prgend+1
d828 : e900             [ 2] 	sbc #0
d82a : 859e             [ 3] 	sta df_prgend+1
d82c : 18               [ 2] 	clc
d82d : 60               [ 6] 	rts
d82e :                       df_pg_delete_next_byte
                             	; Increment current address
                             	_incZPWord num_a
                             
d834 : 4c0dd8           [ 3] 	jmp df_pg_delete_byte
                             
                             
                             ;****************************************
                             ;* Get a line of input
                             ;* Input: C=1 for echo, 0 for no echo
                             ;* Output: C=0 means linbuff is valid
                             ;****************************************
d837 :                       df_pg_inputline
                             	; C is set on input for echo or not
                             	; Read a line of input into df_linbuff
d837 : a200             [ 2] 	ldx #lo(df_linbuff)
d839 : a90a             [ 2] 	lda #hi(df_linbuff)
d83b : a078             [ 2] 	ldy #120
d83d : 20cfc5           [ 6] 	jsr io_read_line
                             	
                             	; If nothing entered then sec
d840 : 98               [ 2] 	tya
d841 : d002             [ 3] 	bne df_pg_inputline_ok
d843 : 38               [ 2] 	sec
d844 : 60               [ 6] 	rts
d845 :                       df_pg_inputline_ok
d845 : 18               [ 2] 	clc
d846 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* df_pg_dflat
                             ;* Start a dflat editing session
                             ;****************************************
d847 :                       df_pg_dflat
                             	; reset stack pointer
d847 : a2ff             [ 2] 	ldx #255
d849 : 9a               [ 2] 	txs
                             
AS65 Assembler for R6502 [1.42].                                     Page   99
---------------------------------- bank1.s -----------------------------------

                             	; error handler address
d84a : a927             [ 2] 	lda #lo(df_trap_error)
d84c : 8596             [ 3] 	sta df_pc
d84e : a9f4             [ 2] 	lda #hi(df_trap_error)
d850 : 8597             [ 3] 	sta df_pc+1
                             	
                             	; make sure normal I/O is resumed
                             	;jsr io_init_default
d852 :                       df_pg_prompt
d852 : a2f0             [ 2] 	ldx #lo(df_pg_prompt_msg)
d854 : a9d8             [ 2] 	lda #hi(df_pg_prompt_msg)
d856 : 200bc6           [ 6] 	jsr io_print_line
d859 : a900             [ 2] 	lda #0
d85b : 8594             [ 3] 	sta df_immed
d85d :                       df_pg_getcommand
                             	; current line is the token buffer when editing
d85d : a980             [ 2] 	lda #lo(df_tokbuff)
d85f : 85bc             [ 3] 	sta df_currlin
d861 : a90a             [ 2] 	lda #hi(df_tokbuff)
d863 : 85bd             [ 3] 	sta df_currlin+1
d865 : 38               [ 2] 	sec
d866 : 2037d8           [ 6] 	jsr df_pg_inputline
d869 : b0e7             [ 3] 	bcs df_pg_prompt	; If no input then back to prom
d86b : ad000a           [ 4] 	lda df_linbuff		; Check if first char is ! to es
d86e : c921             [ 2] 	cmp #'!'
d870 : d005             [ 3] 	bne df_pg_skip_mon
d872 : 200ec5           [ 6] 	jsr _cmd_immediate	; If so call monitor immediat
d875 : 80db             [ 3] 	bra df_pg_prompt
d877 :                       df_pg_skip_mon
d877 : 2090d8           [ 6] 	jsr df_pg_tokenise
d87a : a594             [ 3] 	lda df_immed
d87c : f0df             [ 3] 	beq df_pg_getcommand
                             	; clear variables ready to run the statement
d87e : 20f7d8           [ 6] 	jsr df_initrun
                             	; run from tokbuff
d881 : a280             [ 2] 	ldx #lo(df_tokbuff)
d883 : a90a             [ 2] 	lda #hi(df_tokbuff)
                             	; always skip length and line number
d885 : a003             [ 2] 	ldy #3
                             ;	sty df_exeoff
                             	; init currlin
d887 : 2084dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; start execution
d88a : 2095dc           [ 6] 	jsr df_rt_exec_stat
                             	; Go and get another line of input
d88d : 4c52d8           [ 3] 	jmp df_pg_prompt
                             
                             	; tokenise the line
d890 :                       df_pg_tokenise
d890 : a900             [ 2] 	lda #0
d892 : 8593             [ 3] 	sta errno
d894 : 2041d1           [ 6] 	jsr df_lexer_line
                             	; check if line number == 0
d897 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d89a : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
d89d : d00f             [ 3] 	bne df_pg_line_number
                             	; check if line empty
d89f : ad800a           [ 4] 	lda df_tokbuff
d8a2 : f009             [ 3] 	beq df_pg_nothing
                             	
                             	; line number == 0 so in immediate mode from tok
                             	; don't zero out the line length as some routine
AS65 Assembler for R6502 [1.42].                                     Page  100
---------------------------------- bank1.s -----------------------------------

                             	; run the line in immediate mode
d8a4 : a901             [ 2] 	lda #1
d8a6 : 8594             [ 3] 	sta df_immed
                             	; Zero out text line buffer
d8a8 : a900             [ 2] 	lda #0
d8aa : 8d000a           [ 4] 	sta df_linbuff
d8ad :                       df_pg_nothing
d8ad : 60               [ 6] 	rts
                             
                             	; put the numbered line in to the right bit of m
d8ae :                       df_pg_line_number
                             	; Check if this line exists
d8ae : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
d8b1 : aa               [ 2] 	tax
d8b2 : ad820a           [ 4] 	lda df_tokbuff+DFTK_LINNUM+1
d8b5 : 207cd7           [ 6] 	jsr df_pg_find_line
                             	; Save line address for later X then A
d8b8 : 8539             [ 3] 	sta tmp_d
d8ba : 8a               [ 2] 	txa
d8bb : 48               [ 3] 	pha
d8bc : a539             [ 3] 	lda tmp_d
d8be : 48               [ 3] 	pha
                             	; If line exists then it needs deleting
d8bf : b003             [ 3] 	bcs df_pg_skip_del_line
                             
                             	; delete line from program
d8c1 : 2007d8           [ 6] 	jsr df_pg_delete_block
d8c4 :                       df_pg_skip_del_line
                             	; If line length is zero
                             	; then nothing else to do (i.e. line was deleted
d8c4 : ad800a           [ 4] 	lda df_tokbuff+DFTK_LINLEN
                             	; save the tokenised line length
d8c7 : 48               [ 3] 	pha
d8c8 : d004             [ 3] 	bne df_pg_insertline
                             	; Length was zero, so get temp stuff off stack
d8ca : 68               [ 4] 	pla
d8cb : 68               [ 4] 	pla
d8cc : 68               [ 4] 	pla
d8cd : 60               [ 6] 	rts
                             
                             	; insert a program line unless it is immediate
d8ce :                       df_pg_insertline
                             	; Restore previously saved length
d8ce : 68               [ 4] 	pla
d8cf : a8               [ 2] 	tay
                             	; Restore previously saved address to reinsert t
d8d0 : 68               [ 4] 	pla
d8d1 : 8539             [ 3] 	sta tmp_d
d8d3 : 68               [ 4] 	pla
d8d4 : aa               [ 2] 	tax
d8d5 : a539             [ 3] 	lda tmp_d
                             	; And save it all back to stack again A,X,Y
                             	_pushAXY
                             
                             	; We now have insert address and length
d8da : 20cdd7           [ 6] 	jsr df_pg_insert_block
                             	; Restore length and sub 1 to get index in to th
d8dd : 68               [ 4] 	pla
d8de : a8               [ 2] 	tay
d8df : 88               [ 2] 	dey
                             	; Restore address to a pointer, X is pulled firs
d8e0 : 68               [ 4] 	pla
AS65 Assembler for R6502 [1.42].                                     Page  101
---------------------------------- bank1.s -----------------------------------

d8e1 : aa               [ 2] 	tax
d8e2 : 8679             [ 3] 	stx num_a
d8e4 : 68               [ 4] 	pla
d8e5 : 857a             [ 3] 	sta num_a+1
                             	; num_a is destination, tokbuff is source, Y is 
d8e7 :                       df_pg_insertlinbyte
d8e7 : b9800a           [ 4] 	lda df_tokbuff,y
d8ea : 9179             [ 5] 	sta (num_a),y
d8ec : 88               [ 2] 	dey
d8ed : 10f8             [ 3] 	bpl df_pg_insertlinbyte
d8ef : 60               [ 6] 	rts
                             	
d8f0 :                       df_pg_prompt_msg
d8f0 : 52656164790d00        	db "Ready",UTF_CR,0
                             
d8f7 :                       mod_sz_progedit_e
                             
                             	include "dflat/runtime.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RUNTIME.S
                             ;*  This module is the runtime coordinator.  When
                             ;*  wants to run a program, execution of statemen
                             ;*  required procedure starts and proceeds from t
                             ;*  according to normal program flow.
                             ;*  This module also contains critical routines f
                             ;*  evaluation of expressions (numeric and string
                             ;*  Whilst the code to implement a specific comma
                             ;*  rtsubs.s, this is the key module that control
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             
d8f7 :                       mod_sz_runtime_s
                             
                             ;****************************************
                             ;* df_initrun
                             ;* Initialise program space for runtime
                             ;****************************************
d8f7 :                       df_initrun
                             	; Set the key mask to check every 16 instruction
d8f7 : a910             [ 2] 	lda #0x10
d8f9 : 8592             [ 3] 	sta df_checkmsk
d8fb : 8591             [ 3] 	sta df_checkkey
                             
                             	; String and array heap initialisation
                             	; Grows up from end of prog space PLUS 1
                             	; Initially empty (dim will allocate)
                             	_cpyZPWord df_prgend,df_starstrt
                             
                             	_incZPWord df_starstrt
                             
                             	_cpyZPWord df_starstrt,df_starend
                             
AS65 Assembler for R6502 [1.42].                                     Page  102
---------------------------------- bank1.s -----------------------------------

                             
d913 : a2ff             [ 2] 	ldx #0xff
                             	; Reset runtime stack (grows down)
d915 : 86ac             [ 3] 	stx df_rtstop
                             	; make X=0
d917 : e8               [ 2] 	inx
                             	; Reset parameter stack (grows up)
d918 : 86ad             [ 3] 	stx df_parmtop
                             	; Reset data pointer high byte
d91a : 86cb             [ 3] 	stx df_currdat+1
                             	; if nest counter zeroed
d91c : 86c9             [ 3] 	stx df_ifnest
                             
                             	; clear proc addresses
d91e : 2022d9           [ 6] 	jsr df_rt_init_vvt
                             
                             ;	clc
d921 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Initialise vvt
                             ;****************************************
d922 :                       df_rt_init_vvt
                             	; starting at beginning of vvt
                             	_cpyZPWord df_vvtend,df_tmpptra
                             
d92a : a200             [ 2] 	ldx #0
d92c :                       df_rt_init_vvt_slot
d92c : a5d7             [ 3] 	lda df_tmpptra
d92e : c5a3             [ 3] 	cmp df_vvtstrt
d930 : d006             [ 3] 	bne df_rt_init_vvt_slot_undim
d932 : a5d8             [ 3] 	lda df_tmpptra+1
d934 : c5a4             [ 3] 	cmp df_vvtstrt+1
d936 : f02b             [ 3] 	beq df_rt_init_done
d938 :                       df_rt_init_vvt_slot_undim
                             	; Only zero out proc and array pointers
                             	; Scalar variables are not initialised
d938 : a000             [ 2] 	ldy #0
d93a : b1d7             [ 5] 	lda (df_tmpptra),y
d93c : 29c0             [ 2] 	and #DFVVT_PROC|DFVVT_PTR
d93e : f016             [ 3] 	beq df_rt_init_vvt_skip
                             	; skip over the first byte which is variable typ
d940 : c8               [ 2] 	iny
                             	; zero out first 3 bytes for proc and arrays
d941 : a900             [ 2] 	lda #0
d943 : 91d7             [ 5] 	sta (df_tmpptra),y
d945 : c8               [ 2] 	iny
d946 : 91d7             [ 5] 	sta (df_tmpptra),y
d948 : c8               [ 2] 	iny
d949 : 91d7             [ 5] 	sta (df_tmpptra),y
d94b : c8               [ 2] 	iny
                             	; before doing dim2 check if proc
                             	; as we don't want to erase the parm count
                             ;	lda (df_tmpptra,x)
d94c : b2d7             [ 5] 	lda (df_tmpptra)
d94e : 2940             [ 2] 	and #DFVVT_PROC
d950 : d004             [ 3] 	bne df_rt_init_vvt_skip
                             	; if not proc then zero dim2
d952 : a900             [ 2] 	lda #0
d954 : 91d7             [ 5] 	sta (df_tmpptra),y
d956 :                       df_rt_init_vvt_skip
                             	; increment pointer to next slot
AS65 Assembler for R6502 [1.42].                                     Page  103
---------------------------------- bank1.s -----------------------------------

                             	_adcZPByte df_tmpptra,#8
                             
                             ;	jmp df_rt_init_vvt_slot 	; Don't rely on bcc
d961 : 80c9             [ 3] 	bra df_rt_init_vvt_slot 	; Don't rely on bcc
d963 :                       df_rt_init_done
d963 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* pop  X,A result from operator stack
                             ;****************************************
d964 :                       df_rt_getnval
                             	; evaluate the expression
d964 : 206ad9           [ 6] 	jsr df_rt_neval
                             	; get X,A off operator stack
d967 : 4cfbf2           [ 3] 	jmp df_ost_popInt
                             
                             
                             ;****************************************
                             ;* Evaluate a numeric expression
                             ;* Push result to operator stack
                             ;****************************************
d96a :                       df_rt_neval
                             	; push terminator on cpu stack
                             	; so we know where we are
d96a : a900             [ 2] 	lda #0
d96c : 48               [ 3] 	pha
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword token push on to operator stack
d96d :                       df_rt_neval_optk
d96d : a4be             [ 3] 	ldy df_exeoff
                             	; check end of line
                             
                             ;	cpy df_eolidx
                             ;	beq df_rt_neval_process
d96f : c4b5             [ 3] 	cpy df_nxtstidx
d971 : f03a             [ 3] 	beq df_rt_neval_process
d973 : b1bc             [ 5] 	lda (df_currlin),y		; Get the byte which could b
d975 : 3024             [ 3] 	bmi df_rt_neval_tk		; N=1 means it's a keyword t
d977 : c920             [ 2] 	cmp #DFTK_ESCVAL		; >=32 means it's an normal ch
d979 : b007             [ 3] 	bcs df_rt_neval_chr
d97b :                       df_rt_neval_esc
d97b : 20efd9           [ 6] 	jsr df_rt_eval_esc
                             	; move to next byte
d97e : e6be             [ 5] 	inc df_exeoff
d980 : d0eb             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
d982 :                       df_rt_neval_chr
                             	; check for evaluation terminators
                             	; specifically ',' and ']'
d982 : c92c             [ 2] 	cmp #','
d984 : f027             [ 3] 	beq df_rt_neval_process
d986 : c95d             [ 2] 	cmp #']'
d988 : f023             [ 3] 	beq df_rt_neval_process
                             	; check for brackets
                             	; if close bracket then process
d98a : c929             [ 2] 	cmp #')'
d98c : f01f             [ 3] 	beq df_rt_neval_process
                             	; Nothing of interest matched or it's open brack
                             	; so move to next byte either way
d98e : e6be             [ 5] 	inc df_exeoff				; Next byte 
AS65 Assembler for R6502 [1.42].                                     Page  104
---------------------------------- bank1.s -----------------------------------

                             	; if bracket then evaluate expression recursivel
d990 : c928             [ 2] 	cmp #'('
d992 : d0d9             [ 3] 	bne df_rt_neval_optk
                             	; call evaluation function recursively
d994 : 206ad9           [ 6] 	jsr df_rt_neval
                             	; move to next byte
d997 : e6be             [ 5] 	inc df_exeoff
d999 : d0d2             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             	; if a token then push on operator stack
d99b :                       df_rt_neval_tk
d99b : 297f             [ 2] 	and #0x7f
                             	; check if op (look up type using X as index)
                             	; X contains the current operator index
                             
d99d : aa               [ 2] 	tax
d99e : bd89d5           [ 4] 	lda df_tk_tokentype,x
                             	; A contains token type
d9a1 : 48               [ 3] 	pha
d9a2 : 2908             [ 2] 	and #DFTK_OP
d9a4 : d01c             [ 3] 	bne df_rt_neval_tk_opp
                             	; check if fn
d9a6 : 68               [ 4] 	pla
d9a7 : 2902             [ 2] 	and #DFTK_FN
d9a9 : d00c             [ 3] 	bne df_rt_neval_tk_fn
                             
                             	; If got here then something wrong
                             	SWBRK DFERR_OK
                             
                             
d9ad :                       df_rt_neval_process
                             	; pop operator off stack and execute
                             	; keep popping until reached the terminator
d9ad : 68               [ 4] 	pla
d9ae : f006             [ 3] 	beq df_rt_neval_done
                             	; run the token code
d9b0 : 20fbdc           [ 6] 	jsr df_rt_run_token
                             	; top two bytes on ost stack is the result
d9b3 : 4cadd9           [ 3] 	jmp df_rt_neval_process
d9b6 :                       df_rt_neval_done
d9b6 : 60               [ 6] 	rts
                             
d9b7 :                       df_rt_neval_tk_fn
d9b7 : 18               [ 2] 	clc
d9b8 : 8a               [ 2] 	txa
                             	; run a fn token - returns a value on stack
d9b9 : e6be             [ 5] 	inc df_exeoff
d9bb : 20fbdc           [ 6] 	jsr df_rt_run_token
                             	; move to next byte
d9be :                       df_rt_neval_nextbyte
d9be : e6be             [ 5] 	inc df_exeoff
d9c0 : d0ab             [ 3] 	bne df_rt_neval_optk		; ALWAYS as exeoff != 0
                             
d9c2 :                       df_rt_neval_tk_opp
d9c2 : 68               [ 4] 	pla				; Get A off stack which is the type
d9c3 :                       df_rt_neval_tk_op
                             	; X=Op, A=Type
                             	; if this op < current top of op stack
                             	; then do the op as it is higher priority so sho
                             	; not be pushed
                             	; what is top of the op stack?
                             	; save current op token value
                             	; C=0 means process the op now, else don't
AS65 Assembler for R6502 [1.42].                                     Page  105
---------------------------------- bank1.s -----------------------------------

                             	; save current operator index
d9c3 : 86d7             [ 3] 	stx df_tmpptra				; Index in to token table not 
                             	; mask off to keep priority
d9c5 : 2907             [ 2] 	and #DFTK_OPMSK
d9c7 : 85d9             [ 3] 	sta df_tmpptrb
                             	; peek top of op stack - pull and push X
d9c9 : 68               [ 4] 	pla
d9ca : 48               [ 3] 	pha
d9cb : aa               [ 2] 	tax
                             	; if 0 then nothing so push op
d9cc : f01c             [ 3] 	beq df_rt_neval_pushOp
                             	; use it to index in to type table
d9ce : bd89d5           [ 4] 	lda df_tk_tokentype,x
                             	; mask off to keep priority
d9d1 : 2907             [ 2] 	and #DFTK_OPMSK
                             	; compare with the saved token type which includ
d9d3 : c5d9             [ 3] 	cmp df_tmpptrb
                             	; if top of stack >= current then C=1
                             	; else C=0
                             	; what is the state of C?
                             	; if 1 then just pushOp
d9d5 : f002             [ 3] 	beq df_rt_neval_donow
d9d7 : b011             [ 3] 	bcs df_rt_neval_pushOp
d9d9 :                       df_rt_neval_donow
                             	; was C=0 so process now before pushing the new 
                             	; get operator off cpu stack
d9d9 : 68               [ 4] 	pla
d9da : a8               [ 2] 	tay		; Save whilst need to push other things
                             	; save the current op on cpu stack
d9db : a5d7             [ 3] 	lda df_tmpptra
d9dd : 48               [ 3] 	pha
d9de : aa               [ 2] 	tax		; X = current op
d9df : 98               [ 2] 	tya		; Get A back from Y (new op)
                             	; now run the token in A that came off the stack
d9e0 : 20fbdc           [ 6] 	jsr df_rt_run_token
                             	; get current op off cpu stack in to X
d9e3 : 68               [ 4] 	pla
d9e4 : aa               [ 2] 	tax
                             	; get the token type in to A
d9e5 : bd89d5           [ 4] 	lda df_tk_tokentype,x
                             	; now go back around again to check whether to p
d9e8 : d0d9             [ 3] 	bne df_rt_neval_tk_op		; ALWAYS as type never ze
d9ea :                       df_rt_neval_pushOp
                             	; push the operator
d9ea : a5d7             [ 3] 	lda df_tmpptra
d9ec : 48               [ 3] 	pha
                             	; move to next byte
d9ed : d0cf             [ 3] 	bne df_rt_neval_nextbyte	; ALWAYS as token index
                             
                             
                             
                             
                             ; jump to escape evaluation routine
d9ef :                       df_rt_eval_esc
d9ef : 0a               [ 2] 	asl a
d9f0 : aa               [ 2] 	tax
d9f1 : 7cf4d9           [ 6] 	jmp (df_rt_eval_esc_tab,x)
                             ;	lda df_rt_eval_esc_tab,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_eval_esc_tab+1,x
                             ;	sta df_tmpptra+1
                             ;	jmp (df_tmpptra)
AS65 Assembler for R6502 [1.42].                                     Page  106
---------------------------------- bank1.s -----------------------------------

                             
d9f4 :                       df_rt_eval_esc_tab
d9f4 : b1da                  	dw df_rt_eval_chr
d9f6 : bdda                  	dw df_rt_eval_reserved
d9f8 : bdda                  	dw df_rt_eval_reserved
d9fa : bdda                  	dw df_rt_eval_reserved
d9fc : bdda                  	dw df_rt_eval_reserved
d9fe : bdda                  	dw df_rt_eval_reserved	; no such thing as bytdec
da00 : b1da                  	dw df_rt_eval_bythex
da02 : b1da                  	dw df_rt_eval_bytbin
da04 : bdda                  	dw df_rt_eval_reserved
da06 : b1da                  	dw df_rt_eval_intdec
da08 : b1da                  	dw df_rt_eval_inthex
da0a : b1da                  	dw df_rt_eval_intbin
da0c : bdda                  	dw df_rt_eval_reserved
da0e : bdda                  	dw df_rt_eval_reserved
da10 : bdda                  	dw df_rt_eval_reserved
da12 : bdda                  	dw df_rt_eval_reserved
da14 : bfda                  	dw df_rt_eval_strlit
da16 : 04db                  	dw df_rt_eval_var
da18 : f8db                  	dw df_rt_eval_proc
                             
                             
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination is string accumulator
                             ;****************************************
da1a :                       df_rt_seval
da1a : a6b0             [ 3] 	ldx df_sevalptr
da1c : a5b1             [ 3] 	lda df_sevalptr+1
                             ;****************************************
                             ;* Evaluate a string expression
                             ;* X, A = Destination buffer / space
                             ;****************************************
da1e :                       df_rt_sval
                             	; keep X,A on the stack - will be modified
da1e : 8539             [ 3] 	sta tmp_d
da20 : 48               [ 3] 	pha
da21 : 8a               [ 2] 	txa
da22 : 48               [ 3] 	pha
da23 : a539             [ 3] 	lda tmp_d
                             	; push original destination
da25 : 20d0f2           [ 6] 	jsr df_ost_pushStr
                             	; Push the destination to the 6502 stack
                             	; hi byte first then lo
                             	; push string idx so we know our starting positi
                             	; in the string buffer
                             	; this limits all evaluations to 255 bytes
                             ;	lda df_stridx
                             ;	jsr df_ost_pushOp
                             
                             	; find escape token or keyword token
                             	; if escape token push on to operand stack
                             	; if keyword operator token push on to operator 
                             	; if keyword function token run it
                             
da28 :                       df_rt_seval_optk
da28 : a4be             [ 3] 	ldy df_exeoff
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_seval_done
da2a : c4b5             [ 3] 	cpy df_nxtstidx
AS65 Assembler for R6502 [1.42].                                     Page  107
---------------------------------- bank1.s -----------------------------------

da2c : f069             [ 3] 	beq df_rt_seval_done
                             
da2e : b1bc             [ 5] 	lda (df_currlin),y
da30 : 301c             [ 3] 	bmi df_rt_seval_tk
                             
da32 : c920             [ 2] 	cmp #DFTK_ESCVAL
da34 : 900a             [ 3] 	bcc df_rt_seval_esc
                             	; check for evaluation terminators
                             	; specifically ',' and ')'
da36 : c92c             [ 2] 	cmp #','
da38 : f05d             [ 3] 	beq df_rt_seval_done
da3a : c929             [ 2] 	cmp #')'
da3c : f059             [ 3] 	beq df_rt_seval_done
da3e : d04a             [ 3] 	bne df_rt_seval_nextbyte
da40 :                       df_rt_seval_esc
                             	; the only escape char is STRLIT, VAR or PROC
da40 : c910             [ 2] 	cmp #DFTK_STRLIT
da42 : f04b             [ 3] 	beq	df_rt_seval_esc_strlit
da44 : c911             [ 2] 	cmp #DFTK_VAR
da46 : f028             [ 3] 	beq	df_rt_seval_esc_var
da48 : c912             [ 2] 	cmp #DFTK_PROC
da4a : f049             [ 3] 	beq	df_rt_seval_esc_proc
                             
                             	; error if got here
                             	SWBRK DFERR_SYNTAX
                             
                             
                             	; if a token then push on operator stack
da4e :                       df_rt_seval_tk
da4e : 84be             [ 3] 	sty df_exeoff
da50 : 297f             [ 2] 	and #0x7f
                             	; check if op
da52 : aa               [ 2] 	tax
da53 : bd89d5           [ 4] 	lda df_tk_tokentype,x
da56 : 2904             [ 2] 	and #DFTK_STROP
da58 : d009             [ 3] 	bne df_rt_seval_tk_op
                             	; check if fn
da5a : bd89d5           [ 4] 	lda df_tk_tokentype,x
da5d : 2902             [ 2] 	and #DFTK_FN
da5f : d006             [ 3] 	bne df_rt_seval_tk_fn
                             
                             	; token type mismatch if got here
                             	SWBRK DFERR_TYPEMISM
                             
                             
da63 :                       df_rt_seval_tk_op
                             	; the only op is $+
                             	; so just ignore!
da63 : 8a               [ 2] 	txa
da64 : 4c8ada           [ 3] 	jmp df_rt_seval_nextbyte
                             
da67 :                       df_rt_seval_tk_fn
da67 : 8a               [ 2] 	txa
da68 : e6be             [ 5] 	inc df_exeoff
da6a : 20fbdc           [ 6] 	jsr df_rt_run_token
da6d : 4c74da           [ 3] 	jmp df_rt_seval_copy
                             
da70 :                       df_rt_seval_esc_var
                             	; go process the variable as a normal RVAL
da70 : 18               [ 2] 	clc
da71 : 2004db           [ 6] 	jsr df_rt_eval_var
                             	; copy source off rt stack to destination
AS65 Assembler for R6502 [1.42].                                     Page  108
---------------------------------- bank1.s -----------------------------------

da74 :                       df_rt_seval_copy
                             	; pull destination pointer
da74 : 68               [ 4] 	pla
da75 : 85d7             [ 3] 	sta df_tmpptra
da77 : 68               [ 4] 	pla
da78 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; pop source string pointer off stack
da7a : 20f3f2           [ 6] 	jsr df_ost_popStr
da7d : 86d9             [ 3] 	stx df_tmpptrb
da7f : 85da             [ 3] 	sta df_tmpptrb+1
                             	; go and copy the string
da81 : 209bda           [ 6] 	jsr df_rt_copyStr
                             	; now save the destination
da84 : a5d8             [ 3] 	lda df_tmpptra+1
da86 : 48               [ 3] 	pha
da87 : a5d7             [ 3] 	lda df_tmpptra
da89 : 48               [ 3] 	pha
                             
                             ;	jmp df_rt_seval_nextbyte
da8a :                       df_rt_seval_nextbyte
da8a : e6be             [ 5] 	inc df_exeoff
da8c : 4c28da           [ 3] 	jmp df_rt_seval_optk
                             
da8f :                       df_rt_seval_esc_strlit
                             	; evaluate string literal
da8f : 20bfda           [ 6] 	jsr df_rt_eval_strlit
da92 : 4c74da           [ 3] 	jmp df_rt_seval_copy
                             
da95 :                       df_rt_seval_esc_proc
                             	; not yet suported *******
                             	SWBRK DFERR_OK
                             
                             
                             	; keep going until non-ws char found or end of l
da97 :                       df_rt_seval_done
                             	;
da97 : 68               [ 4] 	pla
da98 : 68               [ 4] 	pla
                             
da99 : 18               [ 2] 	clc
da9a : 60               [ 6] 	rts
                             
                             
                             ; Copy string from ptrb to ptra
da9b :                       df_rt_copyStr
da9b : a000             [ 2] 	ldy #0
da9d :                       df_rt_copyStr_ch
da9d : b1d9             [ 5] 	lda (df_tmpptrb),y
da9f : 91d7             [ 5] 	sta (df_tmpptra),y
daa1 : f003             [ 3] 	beq df_rt_copyStr_done
daa3 : c8               [ 2] 	iny
daa4 : d0f7             [ 3] 	bne df_rt_copyStr_ch	; Always relying in Y never
daa6 :                       df_rt_copyStr_done
daa6 : 98               [ 2] 	tya
daa7 : 18               [ 2] 	clc
daa8 : 65d7             [ 3] 	adc df_tmpptra
daaa : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
daae : e6d8             [ 5] 	inc df_tmpptra+1
dab0 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  109
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
                             ;* Evaluate and push numeric value
                             ;****************************************
dab1 :                       df_rt_eval_intdec
dab1 :                       df_rt_eval_bytdec
dab1 :                       df_rt_eval_inthex
dab1 :                       df_rt_eval_bythex
dab1 :                       df_rt_eval_intbin
dab1 :                       df_rt_eval_bytbin
dab1 :                       df_rt_eval_chr
                             	; numeric constant
dab1 : c8               [ 2] 	iny
dab2 : b1bc             [ 5] 	lda (df_currlin),y
dab4 : aa               [ 2] 	tax
dab5 : c8               [ 2] 	iny
dab6 : b1bc             [ 5] 	lda (df_currlin),y
                             	; save offset before calling any routine
dab8 : 84be             [ 3] 	sty df_exeoff
                             	; push number on to stack
daba : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
dabd :                       df_rt_eval_reserved
                             	; should not get here
                             	SWBRK DFERR_OK
                             
                             
                             ;****************************************
                             ;* Evaluate and push string constant
                             ;****************************************
dabf :                       df_rt_eval_strlit
dabf : 84be             [ 3] 	sty df_exeoff
                             	; calculate the effective address in to AX
                             	; y + currlin
dac1 : 98               [ 2] 	tya
                             	; set carry to add one extra
dac2 : 38               [ 2] 	sec
dac3 : 65bc             [ 3] 	adc df_currlin
dac5 : aa               [ 2] 	tax
dac6 : a5bd             [ 3] 	lda df_currlin+1
dac8 : 6900             [ 2] 	adc #0
                             
                             	; push string on to stack
daca : 20d0f2           [ 6] 	jsr df_ost_pushStr
                             	; now proceed until end of string found
dacd : a4be             [ 3] 	ldy df_exeoff
dacf :                       df_rt_eval_strlit_ch
dacf : b1bc             [ 5] 	lda (df_currlin),y
dad1 : f003             [ 3] 	beq df_rt_eval_strlit_done
dad3 : c8               [ 2] 	iny
dad4 : d0f9             [ 3] 	bne df_rt_eval_strlit_ch
dad6 :                       df_rt_eval_strlit_done	; Always relying on Y neve
dad6 : 84be             [ 3] 	sty df_exeoff
dad8 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return array parameter
                             ;* A has parm
                             ;****************************************
dad9 :                       df_rt_arry_parm
                             	; move past open bracket or comma
dad9 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate expression inside bracket
AS65 Assembler for R6502 [1.42].                                     Page  110
---------------------------------- bank1.s -----------------------------------

dadb : 2064d9           [ 6] 	jsr df_rt_getnval
dade : 8a               [ 2] 	txa
                             ;	clc
dadf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Return double array parameter
                             ;* X = dim1, Y = dim2
                             ;****************************************
dae0 :                       df_rt_arry_parm2
                             	; go get array parm 1
dae0 : 20d9da           [ 6] 	jsr df_rt_arry_parm
dae3 : 48               [ 3] 	pha
dae4 : a200             [ 2] 	ldx #0
dae6 : a4be             [ 3] 	ldy df_exeoff
dae8 :                       df_rt_arry_parm2_term
dae8 : b1bc             [ 5] 	lda (df_currlin),y
daea : c95d             [ 2] 	cmp #']'
daec : f011             [ 3] 	beq df_rt_arry_parm2_skiparry2
daee : c92c             [ 2] 	cmp #','
daf0 : f006             [ 3] 	beq df_rt_arry_parm2_arry2
daf2 : 84be             [ 3] 	sty df_exeoff
daf4 : c8               [ 2] 	iny
daf5 : 4ce8da           [ 3] 	jmp df_rt_arry_parm2_term
daf8 :                       df_rt_arry_parm2_arry2
                             	; get second dimension and put in Y
daf8 : 20d9da           [ 6] 	jsr df_rt_arry_parm
dafb : a8               [ 2] 	tay
dafc : 68               [ 4] 	pla
dafd : aa               [ 2] 	tax
                             ;	clc
dafe : 60               [ 6] 	rts
daff :                       df_rt_arry_parm2_skiparry2
daff : a000             [ 2] 	ldy #0
db01 : 68               [ 4] 	pla
db02 : aa               [ 2] 	tax
                             ;	clc
db03 : 60               [ 6] 	rts
                             
                             
                             ;****************************************
                             ;* Evaluate and push variable
                             ;* The actual value is pushed if numeric
                             ;* The pointer is pushed if string
                             ;* Carry Set = LVAR else normal RVAR
                             ;* LVAR : Y = line index, A=vvt type, tmpptra = v
                             ;****************************************
db04 :                       df_rt_eval_var
                             	; save carry bit
db04 : 08               [ 3] 	php
                             	; if lvar mode then already passed escape token
db05 : b00e             [ 3] 	bcs df_rt_eval_lvskip
                             	; move past var escape token
db07 : c8               [ 2] 	iny
                             	; get var vvt address
db08 : b1bc             [ 5] 	lda (df_currlin),y
db0a : 85d7             [ 3] 	sta df_tmpptra
db0c : c8               [ 2] 	iny
db0d : 84be             [ 3] 	sty df_exeoff
db0f : b1bc             [ 5] 	lda (df_currlin),y
db11 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; push vvt type first as this is the last thing 
AS65 Assembler for R6502 [1.42].                                     Page  111
---------------------------------- bank1.s -----------------------------------

db13 : b2d7             [ 5] 	lda (df_tmpptra)
db15 :                       df_rt_eval_lvskip
db15 : 48               [ 3] 	pha
                             	; Test A for array or string
db16 : 2984             [ 2] 	and #DFVVT_PTR|DFVVT_STR
                             	; simple variable
db18 : f00e             [ 3] 	beq df_rt_eval_var_notarry
                             	; even if an array if no dimensions then return 
                             	; if at end of statement or line then simple cop
db1a : c4b5             [ 3] 	cpy df_nxtstidx
db1c : f027             [ 3] 	beq df_rt_eval_var_simple
                             	; if next ch is not [ then simple copy
db1e : c8               [ 2] 	iny
db1f : b1bc             [ 5] 	lda (df_currlin),y
db21 : 88               [ 2] 	dey
db22 : c95b             [ 2] 	cmp #'['
db24 : d01f             [ 3] 	bne df_rt_eval_var_simple
                             	; go do array handling
db26 : f02d             [ 3] 	beq df_rt_eval_var_do_arry
db28 :                       df_rt_eval_var_notarry
                             	; pull the type, not needed here
db28 : 68               [ 4] 	pla
                             	; pull C and check if lvar wanted rather than rv
db29 : 28               [ 4] 	plp
db2a : b00c             [ 3] 	bcs df_rt_eval_lvar
                             	; just push the vvt lo,hi value
db2c : a001             [ 2] 	ldy #DFVVT_LO
db2e : b1d7             [ 5] 	lda (df_tmpptra),y
db30 : aa               [ 2] 	tax
db31 : a002             [ 2] 	ldy #DFVVT_HI
db33 : b1d7             [ 5] 	lda (df_tmpptra),y
                             
db35 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
db38 :                       df_rt_eval_lvar
                             	; it's not an array, push the address of DFVVT_L
                             	; add DFVVT_LO offset to slot address in X,A
db38 : 18               [ 2] 	clc
db39 : a901             [ 2] 	lda #DFVVT_LO
db3b : 65d7             [ 3] 	adc df_tmpptra
db3d : aa               [ 2] 	tax
db3e : a5d8             [ 3] 	lda df_tmpptra+1
db40 : 6900             [ 2] 	adc #0
                             
                             	; push pointer to lo,hi
db42 : 4cd4f2           [ 3] 	jmp df_ost_pushPtr
                             
                             	; Simple push of pointer, needs to be valid
db45 :                       df_rt_eval_var_simple
                             	; clean up stack
db45 : 68               [ 4] 	pla
db46 : 68               [ 4] 	pla
                             	; simply get lo,hi and push ptr on stack
db47 : a001             [ 2] 	ldy #DFVVT_LO
db49 : b1d7             [ 5] 	lda (df_tmpptra),y
db4b : aa               [ 2] 	tax
db4c : a002             [ 2] 	ldy #DFVVT_HI
db4e : b1d7             [ 5] 	lda (df_tmpptra),y
db50 : f078             [ 3] 	beq df_rt_not_dimed
db52 : 4cd4f2           [ 3] 	jmp df_ost_pushPtr
                             
db55 :                       df_rt_eval_var_do_arry
AS65 Assembler for R6502 [1.42].                                     Page  112
---------------------------------- bank1.s -----------------------------------

                             	; move past var index
db55 : e6be             [ 5] 	inc df_exeoff
                             	; zero out x,y as they have dimension info
db57 : a200             [ 2] 	ldx #0
db59 : a000             [ 2] 	ldy #0
                             
                             	; ** Array handling routine **
                             	; A on stack = type
                             	; save vvt address
db5b : a5d8             [ 3] 	lda df_tmpptra+1
db5d : 48               [ 3] 	pha
db5e : a5d7             [ 3] 	lda df_tmpptra
db60 : 48               [ 3] 	pha
                             
                             	; get array parms in X,Y
db61 : 20e0da           [ 6] 	jsr df_rt_arry_parm2
                             	; restore vvt address
db64 : 68               [ 4] 	pla
db65 : 85d7             [ 3] 	sta df_tmpptra
db67 : 68               [ 4] 	pla
db68 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; save dimension indices for later
db6a : 86d9             [ 3] 	stx df_tmpptrb
db6c : 84da             [ 3] 	sty df_tmpptrb+1
                             	; if y is zero then need to decide some stuff
db6e : c000             [ 2] 	cpy #0
db70 : d00e             [ 3] 	bne df_rt_eval_var_dim2adj
                             	; if dim2 > 0 then swap x,y
db72 : a004             [ 2] 	ldy #DFVVT_DIM2
db74 : b1d7             [ 5] 	lda (df_tmpptra),y
db76 : f008             [ 3] 	beq df_rt_eval_var_dim2adj
                             	; swap x,y
db78 : a6d9             [ 3] 	ldx df_tmpptrb
db7a : a4da             [ 3] 	ldy df_tmpptrb+1
db7c : 86da             [ 3] 	stx df_tmpptrb+1
db7e : 84d9             [ 3] 	sty df_tmpptrb
                             
db80 :                       df_rt_eval_var_dim2adj
db80 : a6d9             [ 3] 	ldx df_tmpptrb
db82 : a4da             [ 3] 	ldy df_tmpptrb+1
                             	; don't let y=0
db84 : d001             [ 3] 	bne df_rt_eval_var_dim2adjy
db86 : c8               [ 2] 	iny
db87 :                       df_rt_eval_var_dim2adjy
                             	; don't let x=0
db87 : e000             [ 2] 	cpx #0
db89 : d001             [ 3] 	bne df_rt_eval_var_dim2adjx
db8b : e8               [ 2] 	inx
db8c :                       df_rt_eval_var_dim2adjx
                             	;calculate offset
                             	;(y-1)*dim1 + (x-1)
db8c : ca               [ 2] 	dex
db8d : a900             [ 2] 	lda #0
db8f : 857a             [ 3] 	sta num_a+1
db91 : 88               [ 2] 	dey
                             	; (y-1)
db92 : 8479             [ 3] 	sty num_a
                             	; if y is 0 then no need to multiply
db94 : f00d             [ 3] 	beq df_rt_eval_var_nomult
                             	; (dim1)
db96 : a003             [ 2] 	ldy #DFVVT_DIM1
db98 : a900             [ 2] 	lda #0
AS65 Assembler for R6502 [1.42].                                     Page  113
---------------------------------- bank1.s -----------------------------------

db9a : 857e             [ 3] 	sta num_b+1
db9c : b1d7             [ 5] 	lda (df_tmpptra),y
db9e : 857d             [ 3] 	sta num_b
                             	; (y-1)*dim1 num_a has result
dba0 : 2037cc           [ 6] 	jsr int_fast_mult
dba3 :                       df_rt_eval_var_nomult
                             	; move x to a
dba3 : 8a               [ 2] 	txa
                             	; add x to num_a
dba4 : 18               [ 2] 	clc
dba5 : 6579             [ 3] 	adc num_a
dba7 : 8579             [ 3] 	sta num_a
                             	_bcc 2
                             
dbab : e67a             [ 5] 	inc num_a+1
                             	; now have element offset in num_a
                             	; dimensions in x and y
dbad : a6d9             [ 3] 	ldx df_tmpptrb
dbaf : a4da             [ 3] 	ldy df_tmpptrb+1
                             	; get type of variable originally found
dbb1 : 68               [ 4] 	pla
dbb2 : 48               [ 3] 	pha
dbb3 : 2901             [ 2] 	and #DFVVT_INT
dbb5 : f004             [ 3] 	beq df_rt_eval_var_push
                             	; if it is int then multiply offset by 2
dbb7 : 0679             [ 5] 	asl num_a
dbb9 : 267a             [ 5] 	rol num_a+1
dbbb :                       df_rt_eval_var_push
                             	; add pointer in lo,hi to num_a
dbbb : 18               [ 2] 	clc
dbbc : a001             [ 2] 	ldy #DFVVT_LO
dbbe : b1d7             [ 5] 	lda (df_tmpptra),y
dbc0 : 6579             [ 3] 	adc num_a
dbc2 : 8579             [ 3] 	sta num_a
dbc4 : a002             [ 2] 	ldy #DFVVT_HI
dbc6 : b1d7             [ 5] 	lda (df_tmpptra),y
dbc8 : d002             [ 3] 	bne df_rt_array_exists
                             	; if vvt address hi is zero then array not dimen
dbca :                       df_rt_not_dimed
                             	SWBRK DFERR_DIM
                             
dbcc :                       df_rt_array_exists
dbcc : 657a             [ 3] 	adc num_a+1
dbce : 857a             [ 3] 	sta num_a+1
                             	; get the type
dbd0 : 68               [ 4] 	pla
                             	; if not int or byte then push string
dbd1 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
dbd3 : f01b             [ 3] 	beq df_rt_eval_var_str
                             	; get LVAR preference
dbd5 : 28               [ 4] 	plp
dbd6 : b019             [ 3] 	bcs df_rt_eval_ptr
                             	; need to load lo and hi for int
                             	; but only lo for byt
dbd8 : 2901             [ 2] 	and #DFVVT_INT
dbda : f00b             [ 3] 	beq df_rt_eval_byt
                             	; push the contents pointed to by num_a
dbdc : a000             [ 2] 	ldy #0
dbde : b179             [ 5] 	lda (num_a),y
dbe0 : aa               [ 2] 	tax
dbe1 : c8               [ 2] 	iny
dbe2 : b179             [ 5] 	lda (num_a),y
AS65 Assembler for R6502 [1.42].                                     Page  114
---------------------------------- bank1.s -----------------------------------

dbe4 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
dbe7 :                       df_rt_eval_byt
dbe7 : a000             [ 2] 	ldy #0
dbe9 : b179             [ 5] 	lda (num_a),y
dbeb : aa               [ 2] 	tax
dbec : 98               [ 2] 	tya			; Make A=0
dbed : 4cdbf2           [ 3] 	jmp df_ost_pushInt
dbf0 :                       df_rt_eval_var_str
dbf0 : 28               [ 4] 	plp
dbf1 :                       df_rt_eval_ptr
                             ;	clc
                             	; put num_a not contents
dbf1 : a679             [ 3] 	ldx num_a
dbf3 : a57a             [ 3] 	lda num_a+1
dbf5 : 4cd4f2           [ 3] 	jmp df_ost_pushPtr
                             
dbf8 :                       df_rt_eval_proc
dbf8 : a5ad             [ 3] 	lda df_parmtop				; Save current position of par
dbfa : 48               [ 3] 	pha
dbfb : 2045f1           [ 6] 	jsr df_rt_proc				; Go and call the user functio
dbfe : 68               [ 4] 	pla							; Get back the original parameter stac
dbff : c5ad             [ 3] 	cmp df_parmtop				; if it is the same, then no r
dc01 : f002             [ 3] 	beq df_rt_eval_proc_err
dc03 : 18               [ 2] 	clc
dc04 : 60               [ 6] 	rts
dc05 :                       df_rt_eval_proc_err
                             	; if no return value then report an errror
                             	SWBRK DFERR_RETURN
                             
                             
                             
                             
                             ;****************************************
                             ;* get two ints off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
dc07 :                       df_rt_get2Ints
                             	; the first int popped is actually the second pa
dc07 : 20fbf2           [ 6] 	jsr df_ost_popInt
dc0a : 86d9             [ 3] 	stx df_tmpptrb
dc0c : 85da             [ 3] 	sta df_tmpptrb+1
                             
dc0e : 20fbf2           [ 6] 	jsr df_ost_popInt
dc11 : 86d7             [ 3] 	stx df_tmpptra
dc13 : 85d8             [ 3] 	sta df_tmpptra+1
dc15 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* get two strings off the runtime stack
                             ;* first parm in ptrb, second in ptra
                             ;****************************************
dc16 :                       df_rt_get2Strs
                             	; the first int popped is actually the second pa
dc16 : 20f3f2           [ 6] 	jsr df_ost_popStr
dc19 : 86d9             [ 3] 	stx df_tmpptrb
dc1b : 85da             [ 3] 	sta df_tmpptrb+1
                             
dc1d : 20f3f2           [ 6] 	jsr df_ost_popStr
dc20 : 86d7             [ 3] 	stx df_tmpptra
dc22 : 85d8             [ 3] 	sta df_tmpptra+1
dc24 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  115
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
                             ; common code for 2 ints runtime parsing
                             ;****************************************
dc25 :                       df_rt_parm_2ints
                             	; evaluate 1st parm
dc25 : 206ad9           [ 6] 	jsr df_rt_neval
                             	; jump over comma
dc28 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc2a : 206ad9           [ 6] 	jsr df_rt_neval
                             	
dc2d : 4c07dc           [ 3] 	jmp df_rt_get2Ints
                             
                             ;****************************************
                             ; common code for 3 ints runtime parsing
                             ;****************************************
dc30 :                       df_rt_parm_3ints
                             	; evaluate 1st parm
dc30 : 206ad9           [ 6] 	jsr df_rt_neval
dc33 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc35 : 206ad9           [ 6] 	jsr df_rt_neval
dc38 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc3a : 206ad9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 3rd parm
dc3d :                       df_rt_parm_pop3
dc3d : 20fbf2           [ 6] 	jsr df_ost_popInt
dc40 : 86db             [ 3] 	stx df_tmpptrc
dc42 : 85dc             [ 3] 	sta df_tmpptrc+1
                             	; pop 2nd and 1st
dc44 : 4c07dc           [ 3] 	jmp df_rt_get2Ints
                             
                             ;****************************************
                             ; common code for 4 ints runtime parsing
                             ;****************************************
dc47 :                       df_rt_parm_4ints
                             	; evaluate 1st parm
dc47 : 206ad9           [ 6] 	jsr df_rt_neval
dc4a : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc4c : 206ad9           [ 6] 	jsr df_rt_neval
dc4f : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc51 : 206ad9           [ 6] 	jsr df_rt_neval
dc54 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dc56 : 206ad9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 4th parm
dc59 :                       df_rt_parm_pop4
dc59 : 20fbf2           [ 6] 	jsr df_ost_popInt
dc5c : 86dd             [ 3] 	stx df_tmpptrd
dc5e : 85de             [ 3] 	sta df_tmpptrd+1
                             
                             	; pop 3,2,1 parms
dc60 : 4c3ddc           [ 3] 	jmp df_rt_parm_pop3
                             
                             ;****************************************
                             ; common code for 5 ints runtime parsing
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  116
---------------------------------- bank1.s -----------------------------------

dc63 :                       df_rt_parm_5ints
                             	; evaluate 1st parm
dc63 : 206ad9           [ 6] 	jsr df_rt_neval
dc66 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 2nd parm
dc68 : 206ad9           [ 6] 	jsr df_rt_neval
dc6b : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 3rd parm
dc6d : 206ad9           [ 6] 	jsr df_rt_neval
dc70 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 4th parm
dc72 : 206ad9           [ 6] 	jsr df_rt_neval
dc75 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the 5th parm
dc77 : 206ad9           [ 6] 	jsr df_rt_neval
                             
                             	; pop 5th parm
dc7a : 20fbf2           [ 6] 	jsr df_ost_popInt
dc7d : 86df             [ 3] 	stx df_tmpptre
dc7f : 85e0             [ 3] 	sta df_tmpptre+1
                             
                             	; pop 4,3,2,1 parms
dc81 : 4c59dc           [ 3] 	jmp df_rt_parm_pop4
                             
                             ;****************************************
                             ;* initialise statement to be executed
                             ;* X,A = line pointer, Y=statement offset
                             ;****************************************
dc84 :                       df_rt_init_stat_ptr
                             	; save current line
dc84 : 86bc             [ 3] 	stx df_currlin
dc86 : 85bd             [ 3] 	sta df_currlin+1
dc88 : 84be             [ 3] 	sty df_exeoff
dc8a : 84b6             [ 3] 	sty df_curstidx
dc8c : b1bc             [ 5] 	lda (df_currlin),y
dc8e : 85b5             [ 3] 	sta df_nxtstidx
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dc90 : b2bc             [ 5] 	lda (df_currlin)
dc92 : 85b4             [ 3] 	sta df_eolidx
dc94 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Execute from a statement pointed to
                             ;* by currlin and exeoff
                             ;****************************************
dc95 :                       df_rt_exec_stat
dc95 : a6bc             [ 3] 	ldx df_currlin
dc97 : a5bd             [ 3] 	lda df_currlin+1
dc99 : a4be             [ 3] 	ldy df_exeoff
dc9b :                       df_rt_exec_init_ptr
dc9b : 2084dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; assume normal flow of control if next line hi 
                             	; this means no line can execute below page 1, n
                             ;	lda #0
                             ;	sta df_nextlin+1
dc9e : 64c0             [ 3] 	stz df_nextlin+1
                             
                             	; find first token in statement
dca0 :                       df_rt_exec_find_tok
dca0 : c8               [ 2] 	iny
dca1 : b1bc             [ 5] 	lda (df_currlin),y
AS65 Assembler for R6502 [1.42].                                     Page  117
---------------------------------- bank1.s -----------------------------------

dca3 : 10fb             [ 3] 	bpl df_rt_exec_find_tok
dca5 :                       df_rt_exec_found_tok
                             	; skip past token to next byte in readiness
dca5 : c8               [ 2] 	iny
dca6 : 84be             [ 3] 	sty df_exeoff
                             	; Run that statement - if end of return will pul
                             	; and effectively do an rts from this routine.
dca8 : 20fbdc           [ 6] 	jsr df_rt_run_token
                             
                             	; check for break, asynch get
dcab : a592             [ 3] 	lda df_checkmsk
dcad : 300e             [ 3] 	bmi df_rt_exec_no_key
dcaf : c691             [ 5] 	dec df_checkkey
dcb1 : d00a             [ 3] 	bne df_rt_exec_no_key
dcb3 : a592             [ 3] 	lda df_checkmsk
dcb5 : 8591             [ 3] 	sta df_checkkey
dcb7 : 18               [ 2] 	clc
dcb8 : 20bdc5           [ 6] 	jsr io_get_ch
dcbb : 9027             [ 3] 	bcc df_rt_exec_check_key
dcbd :                       df_rt_exec_no_key
                             	; check if normal flow of control
dcbd : a5c0             [ 3] 	lda df_nextlin+1
dcbf : d031             [ 3] 	bne df_rt_exec_jump
                             	; try and execute another statement until end of
dcc1 : a4b5             [ 3] 	ldy df_nxtstidx
dcc3 : c4b4             [ 3] 	cpy df_eolidx
dcc5 : 84be             [ 3] 	sty df_exeoff
dcc7 : d0cc             [ 3] 	bne df_rt_exec_stat
                             	
                             
                             	; reached end of line, move to next
dcc9 : 18               [ 2] 	clc
                             ;	ldx #0
                             ;	lda (df_currlin,x)
dcca : b2bc             [ 5] 	lda (df_currlin)
dccc : 65bc             [ 3] 	adc df_currlin
dcce : 85bc             [ 3] 	sta df_currlin
                             	_bcc 2
                             
dcd2 : e6bd             [ 5] 	inc df_currlin+1
                             
                             	; start from first statement in new line
dcd4 : a003             [ 2] 	ldy #3
dcd6 : 84be             [ 3] 	sty df_exeoff
                             
                             	; check if this line has any content (length >0)
                             ;	lda (df_currlin,x)
dcd8 : b2bc             [ 5] 	lda (df_currlin)
dcda : 85b4             [ 3] 	sta df_eolidx
                             	; no more lines (len = 0), program done
dcdc : d0b7             [ 3] 	bne df_rt_exec_stat
                             	; else done
                             	; normally wouldn't get here except immediate mo
                             	; if line number <> 0 then error
dcde : a594             [ 3] 	lda df_immed
dce0 : f00e             [ 3] 	beq df_rt_unexpected_end
dce2 :                       df_rt_exec_end
dce2 : 18               [ 2] 	clc
dce3 : 60               [ 6] 	rts
dce4 :                       df_rt_exec_check_key
dce4 : c91a             [ 2] 	cmp #UTF_BRK					; CTRK-Z?
dce6 : f006             [ 3] 	beq df_rt_exec_ctrl_z
AS65 Assembler for R6502 [1.42].                                     Page  118
---------------------------------- bank1.s -----------------------------------

dce8 : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
dcea : d0d1             [ 3] 	bne df_rt_exec_no_key			; None relevant keys, go
dcec :                       df_rt_exec_ctrl_c
                             	SWBRK DFERR_BREAK
                             
dcee :                       df_rt_exec_ctrl_z
                             	; Force a break with zero error number
                             	; this will drop in to the monitor
                             	SWBRK 0
                             
                             
dcf0 :                       df_rt_unexpected_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
                             	; if hi byte of nextline is not zero then
                             	; current line = next line
dcf2 :                       df_rt_exec_jump
                             	; initialise statement pointer from nextlin,toks
dcf2 : a6bf             [ 3] 	ldx df_nextlin
dcf4 : a5c0             [ 3] 	lda df_nextlin+1
dcf6 : a4b5             [ 3] 	ldy df_nxtstidx
dcf8 : 4c9bdc           [ 3] 	jmp df_rt_exec_init_ptr
                             
                             
                             ;****************************************
                             ;* Run statement in A
                             ;****************************************
dcfb :                       df_rt_run_token
                             	; mask off MSB
                             ;	and #0x7f
                             	; multiply by 2
dcfb : 0a               [ 2] 	asl a
dcfc : aa               [ 2] 	tax
dcfd : 7cd8dd           [ 6] 	jmp (df_rt_tokenjmp,x)
                             ;	lda df_rt_tokenjmp,x
                             ;	sta df_tmpptra
                             ;	lda df_rt_tokenjmp+1,x
                             ;	sta df_tmpptra+1
                             ;	; execution code finishes with rts
                             ;	jmp (df_tmpptra)
                             
                             
                             ;****************************************
                             ;* X,A : Line Address, Y = Index
                             ;* C=0 Found next statement
                             ;* C=1 No statement found
                             ;****************************************
dd00 :                       df_rt_nextstat
                             	; save pointer
dd00 : 86c6             [ 3] 	stx df_lineptr
dd02 : 85c7             [ 3] 	sta df_lineptr+1
                             	; if end of program then err
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dd04 : b2c6             [ 5] 	lda (df_lineptr)
dd06 : f022             [ 3] 	beq df_rt_nextstat_err
                             	; if next statement idx == line length
                             ;	lda (df_lineptr),y
                             ;	beq df_rt_nextstat_ln
dd08 : b1c6             [ 5] 	lda (df_lineptr),y
                             ;	cmp (df_lineptr,x)
AS65 Assembler for R6502 [1.42].                                     Page  119
---------------------------------- bank1.s -----------------------------------

dd0a : d2c6             [ 5] 	cmp (df_lineptr)
dd0c : f007             [ 3] 	beq df_rt_nextstat_ln
                             	; then go to next line
                             	; else make this Y
dd0e : a8               [ 2] 	tay
                             	; X = line low
dd0f : a6c6             [ 3] 	ldx df_lineptr
                             	; A = line high
dd11 : a5c7             [ 3] 	lda df_lineptr+1
dd13 : 18               [ 2] 	clc
dd14 : 60               [ 6] 	rts
dd15 :                       df_rt_nextstat_ln
                             	; for next line, add line length to ptr
dd15 : 18               [ 2] 	clc
dd16 : 65c6             [ 3] 	adc df_lineptr
dd18 : 85c6             [ 3] 	sta df_lineptr
                             	_bcc 2
                             
dd1c : e6c7             [ 5] 	inc df_lineptr+1
                             	; if end of program set C as error
                             ;	lda (df_lineptr,x)
dd1e : b2c6             [ 5] 	lda (df_lineptr)
dd20 : f008             [ 3] 	beq df_rt_nextstat_err
dd22 : a6c6             [ 3] 	ldx df_lineptr
dd24 : a5c7             [ 3] 	lda df_lineptr+1
                             	; always skip line number and length for start o
dd26 : a003             [ 2] 	ldy #3
dd28 : 18               [ 2] 	clc
dd29 : 60               [ 6] 	rts
dd2a :                       df_rt_nextstat_err
dd2a : a000             [ 2] 	ldy #0
dd2c : 38               [ 2] 	sec
dd2d : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push current line and statement to runtime sta
                             ;****************************************
dd2e :                       df_rt_push_stat
dd2e : a5b6             [ 3] 	lda df_curstidx
dd30 : 209df2           [ 6] 	jsr df_rst_pushByte
dd33 : a5bd             [ 3] 	lda df_currlin+1
dd35 : a6bc             [ 3] 	ldx df_currlin
dd37 : 4cb5f2           [ 3] 	jmp df_rst_pushWord
                             ;	clc
                             ;	rts
                             
                             ;****************************************
                             ;* Pop line and statement from runtime stack
                             ;* And transfer control to next statement
                             ;****************************************
dd3a :                       df_rt_pop_stat
dd3a : 20c3f2           [ 6] 	jsr df_rst_popWord
dd3d : 86bf             [ 3] 	stx	df_nextlin
dd3f : 85c0             [ 3] 	sta df_nextlin+1
dd41 : 20a6f2           [ 6] 	jsr df_rst_popByte
dd44 : a8               [ 2] 	tay
dd45 : a6bf             [ 3] 	ldx df_nextlin
dd47 : a5c0             [ 3] 	lda df_nextlin+1
dd49 : 2000dd           [ 6] 	jsr df_rt_nextstat
dd4c : 86bf             [ 3] 	stx df_nextlin
dd4e : 85c0             [ 3] 	sta df_nextlin+1
dd50 : 84b5             [ 3] 	sty df_nxtstidx
AS65 Assembler for R6502 [1.42].                                     Page  120
---------------------------------- bank1.s -----------------------------------

                             ;	clc
dd52 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Find proc definition in procptr
                             ;* Only call if proc not found before
                             ;****************************************
dd53 :                       df_rt_findproc
                             	; start at program beginning
                             	_cpyZPWord df_prgstrt,df_lineptr
                             
dd5b : a003             [ 2] 	ldy #3
dd5d : 84c8             [ 3] 	sty df_lineidx
                             ;	ldx #0
                             ;	lda (df_lineptr,x)
dd5f : b2c6             [ 5] 	lda (df_lineptr)
dd61 : f034             [ 3] 	beq df_rt_findproc_err
dd63 :                       df_rt_findproc_cmd
dd63 : c8               [ 2] 	iny
dd64 : b1c6             [ 5] 	lda (df_lineptr),y
dd66 : 10fb             [ 3] 	bpl df_rt_findproc_cmd
dd68 : c986             [ 2] 	cmp #DFRT_DEF
dd6a : d017             [ 3] 	bne df_rt_findproc_nextstat
                             	; skip def token
dd6c : c8               [ 2] 	iny
                             	; skip proc escape token
dd6d : c8               [ 2] 	iny
                             	; now check the proc address against procptr
dd6e : b1c6             [ 5] 	lda (df_lineptr),y
dd70 : c5c4             [ 3] 	cmp df_procptr
dd72 : d00f             [ 3] 	bne df_rt_findproc_nextstat
dd74 : c8               [ 2] 	iny
dd75 : b1c6             [ 5] 	lda (df_lineptr),y
dd77 : c5c5             [ 3] 	cmp df_procptr+1
dd79 : d008             [ 3] 	bne df_rt_findproc_nextstat
                             
                             	; found it, return AXY with line details
dd7b : a6c6             [ 3] 	ldx df_lineptr
dd7d : a5c7             [ 3] 	lda df_lineptr+1
dd7f : a4c8             [ 3] 	ldy df_lineidx
dd81 : 18               [ 2] 	clc
dd82 : 60               [ 6] 	rts
dd83 :                       df_rt_findproc_nextstat
                             	; restore AXY line details and find next stateme
dd83 : a6c6             [ 3] 	ldx df_lineptr
dd85 : a5c7             [ 3] 	lda df_lineptr+1
dd87 : a4c8             [ 3] 	ldy df_lineidx
dd89 : 2000dd           [ 6] 	jsr df_rt_nextstat
dd8c : b009             [ 3] 	bcs df_rt_findproc_err
dd8e : 86c6             [ 3] 	stx df_lineptr
dd90 : 85c7             [ 3] 	sta df_lineptr+1
dd92 : 84c8             [ 3] 	sty df_lineidx
dd94 : 4c63dd           [ 3] 	jmp df_rt_findproc_cmd
                             	; error
dd97 :                       df_rt_findproc_err
                             	SWBRK DFERR_NOPROC
                             
                             
                             ;****************************************
                             ;* Find an escape value
                             ;* Does not check for end of line or statement
                             ;****************************************
AS65 Assembler for R6502 [1.42].                                     Page  121
---------------------------------- bank1.s -----------------------------------

dd99 :                       df_rt_findescval
dd99 : a4be             [ 3] 	ldy df_exeoff
dd9b : 88               [ 2] 	dey
dd9c :                       df_rt_findescval_loop
dd9c : c8               [ 2] 	iny
dd9d : b1bc             [ 5] 	lda (df_currlin),y
dd9f : c920             [ 2] 	cmp #DFTK_ESCVAL
dda1 : b0f9             [ 3] 	bcs df_rt_findescval_loop
dda3 : 84be             [ 3] 	sty df_exeoff
dda5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Skip white space
                             ;* Does not check for end of line or statement
                             ;* A contains non-ws char, df_exeoff updated
                             ;****************************************
dda6 :                       df_rt_skip_ws
dda6 : a4be             [ 3] 	ldy df_exeoff
dda8 : 88               [ 2] 	dey
dda9 :                       df_rt_skip_ws_loop
dda9 : c8               [ 2] 	iny
ddaa : b1bc             [ 5] 	lda (df_currlin),y
ddac : c920             [ 2] 	cmp #' '
ddae : f0f9             [ 3] 	beq df_rt_skip_ws_loop
ddb0 : 84be             [ 3] 	sty df_exeoff
ddb2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Get an lvar
                             ;* Assumes next token will be escape DFTK_VAR
                             ;* tmpptra contains vvt slot address
                             ;* X,A is the lvar pointer
                             ;****************************************
ddb3 :                       df_rt_getlvar
ddb3 : 2099dd           [ 6] 	jsr df_rt_findescval
                             	; move past the escape value
ddb6 : c8               [ 2] 	iny
                             
                             	; get variable address
ddb7 : b1bc             [ 5] 	lda (df_currlin),y
ddb9 : 85d7             [ 3] 	sta df_tmpptra
ddbb : c8               [ 2] 	iny
ddbc : b1bc             [ 5] 	lda (df_currlin),y
ddbe : 85d8             [ 3] 	sta df_tmpptra+1
                             
ddc0 : 84be             [ 3] 	sty df_exeoff
                             	; get the type
ddc2 : a000             [ 2] 	ldy #0
ddc4 : b1d7             [ 5] 	lda (df_tmpptra),y
                             	; set carry flag to return pointer (lvar)
ddc6 : 38               [ 2] 	sec
ddc7 : a4be             [ 3] 	ldy df_exeoff
ddc9 : 2004db           [ 6] 	jsr df_rt_eval_var
ddcc : 4cf7f2           [ 3] 	jmp df_ost_popPtr
                             ;	rts
                             
                             ;****************************************
                             ;* Pop stat from rt stack and continue
                             ;* Y MUST BE ON THE CPU STACK AS IT GETS PLYed HE
                             ;****************************************
ddcf :                       df_rt_pop_stat_go
ddcf : 203add           [ 6] 	jsr df_rt_pop_stat
AS65 Assembler for R6502 [1.42].                                     Page  122
---------------------------------- bank1.s -----------------------------------

                             	; restore stack pointer so we don't lose this en
ddd2 : 68               [ 4] 	pla
ddd3 : a8               [ 2] 	tay
ddd4 : 84ac             [ 3] 	sty df_rtstop
ddd6 : 18               [ 2] 	clc
ddd7 : 60               [ 6] 	rts
                             
                             	include "dflat/rtjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTJUMPTAB.S
                             ;*  Runtime token jump table.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime token an
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; In token order of df_tokensyms
ddd8 :                       df_rt_tokenjmp
ddd8 : 58e6                  	dw	df_rt_assign
ddda : 45f1                  	dw	df_rt_proc
dddc : 5ee6                  	dw	df_rt_comment
ddde : 0ce6                  	dw	df_rt_println
dde0 : d1e5                  	dw	df_rt_printat
dde2 : dbe5                  	dw	df_rt_print
dde4 : e5f1                  	dw	df_rt_def			; 0x86
dde6 : 5ff2                  	dw	df_rt_enddef		; 0x87
dde8 : 5cf2                  	dw	df_rt_return		; 0x88
ddea : 02f1                  	dw	df_rt_abort			; 0x89
ddec : b2e3                  	dw	df_rt_local
ddee : dee3                  	dw	df_rt_dim
ddf0 : 87e2                  	dw	df_rt_repeat		; 0x8c
ddf2 : 8fe2                  	dw	df_rt_until
ddf4 : f2e1                  	dw	df_rt_for			; 0x8e
ddf6 : 2ce2                  	dw	df_rt_next			; 0x8f
ddf8 : d4e0                  	dw	df_rt_while			; 0x90
ddfa : 39e1                  	dw	df_rt_wend			; 0x81
ddfc : b3e1                  	dw	df_rt_if			; 0x92
ddfe : a1e1                  	dw	df_rt_else			; 0x93
de00 : 9ce1                  	dw	df_rt_endif			; 0x94
de02 : a1e1                  	dw	df_rt_elseif		; 0x95
de04 : 5ee6                  	dw	df_rt_data			; 0x96
de06 : 04f6                  	dw	df_rt_asm_assemble	; 0x97
de08 : 5fe6                  	dw	df_rt_run
AS65 Assembler for R6502 [1.42].                                     Page  123
---------------------------------- bank1.s -----------------------------------

de0a : 54e7                  	dw	df_rt_list
de0c : 7de3                  	dw	df_rt_input
de0e : e8e4                  	dw	df_rt_mode
de10 : 6ce4                  	dw	df_rt_plot
de12 : d5e4                  	dw	df_rt_cursor
de14 : 62e4                  	dw	df_rt_cls
de16 : b8e9                  	dw	df_rt_vpoke
de18 : cfe9                  	dw	df_rt_setvdp
de1a : d9e9                  	dw	df_rt_colour
de1c : 28ea                  	dw	df_rt_spritepat
de1e : 56ea                  	dw	df_rt_spritepos
de20 : 94ea                  	dw	df_rt_spritecol
de22 : 99ea                  	dw	df_rt_spritenme
de24 : ffe9                  	dw	df_rt_sprite
de26 : b0e9                  	dw	df_rt_poke
de28 : a2e9                  	dw	df_rt_doke
de2a : c7ea                  	dw	df_rt_sound
de2c : dbea                  	dw	df_rt_music
de2e : f9ea                  	dw	df_rt_play
de30 : d2eb                  	dw	df_rt_save
de32 : edeb                  	dw	df_rt_load
de34 : 7bed                  	dw	df_rt_dir
de36 : fbed                  	dw	df_rt_dirl
de38 : 3fec                  	dw	df_rt_del
de3a : 65e3                  	dw	df_rt_read
de3c : d1e0                  	dw	df_rt_new
de3e : 70e6                  	dw	df_rt_renum
de40 : b8e5                  	dw	df_rt_wait
de42 : 31ee                  	dw	df_rt_reset
de44 : e8e4                  	dw	df_rt_hires
de46 : 09e5                  	dw	df_rt_point
de48 : 31e5                  	dw	df_rt_line
de4a : 13e5                  	dw	df_rt_hplot
de4c : efe4                  	dw	df_rt_pixmode
de4e : f5e4                  	dw	df_rt_pixmask
de50 : fbe4                  	dw	df_rt_pixcol
de52 : 47e5                  	dw	df_rt_box
de54 : 1fe5                  	dw	df_rt_circle
de56 : 5de5                  	dw	df_rt_shape
de58 : 87ec                  	dw	df_rt_vload
de5a : 58ec                  	dw	df_rt_bload
de5c : 2aeb                  	dw	df_rt_bsave
de5e : dbe4                  	dw	df_rt_himem
de60 : cde0                  	dw	df_rt_monitor
de62 : 46ec                  	dw	df_rt_chdir
de64 : 4fec                  	dw	df_rt_mkdir
de66 : 49ee                  	dw	df_rt_datetime
de68 : c4e9                  	dw	df_rt_nvpoke
de6a : 7aec                  	dw	df_rt_font
de6c : 2af1                  	dw	df_rt_device
de6e : 1ff1                  	dw	df_rt_fclose
de70 : dbe3                  	dw	df_rt_redim
de72 : 01e5                  	dw  df_rt_put
de74 : eeec                  	dw	df_rt_ptload
de76 : 57ed                  	dw	df_rt_ptinit
de78 : 63ed                  	dw	df_rt_ptrun
                             
de7a : c1ee                  	dw	df_rt_vpeek
de7c : a8ee                  	dw	df_rt_peek
de7e : a5ee                  	dw	df_rt_deek
de80 : feee                  	dw	df_rt_stick
de82 : 6eef                  	dw	df_rt_key
AS65 Assembler for R6502 [1.42].                                     Page  124
---------------------------------- bank1.s -----------------------------------

de84 : 32f0                  	dw	df_rt_chr
de86 : 85f0                  	dw	df_rt_left
de88 : 96f0                  	dw	df_rt_right
de8a : b1f0                  	dw	df_rt_mid
de8c : cff0                  	dw	df_rt_len
de8e : 22ef                  	dw	df_rt_mem
de90 : 81ef                  	dw	df_rt_scrn
de92 : d9ee                  	dw	df_rt_rnd
de94 : 9def                  	dw	df_rt_elapsed
de96 : bbef                  	dw	df_rt_call
de98 : 46f0                  	dw	df_rt_hex
de9a : 77f0                  	dw	df_rt_dec
de9c : dbf0                  	dw	df_rt_asc
de9e : ecf0                  	dw	df_rt_val
dea0 : 91ef                  	dw	df_rt_pixel
dea2 : cdef                  	dw	df_rt_sgn
dea4 : eaef                  	dw	df_rt_addr
dea6 : cdee                  	dw	df_rt_nvpeek
dea8 : 04f1                  	dw	df_rt_fcreate
deaa : 17f1                  	dw	df_rt_fopen
deac : 6eef                  	dw  df_rt_get
                             	
deae : 21df                  	dw	df_rt_mult
deb0 : 42df                  	dw	df_rt_div
deb2 : 63df                  	dw	df_rt_mod
deb4 : 84df                  	dw	df_rt_asl
deb6 : 97df                  	dw	df_rt_lsr
deb8 : fbde                  	dw	df_rt_add
deba : 0edf                  	dw	df_rt_sub
                             	
debc : aadf                  	dw	df_rt_and
debe : b9df                  	dw	df_rt_or
dec0 : c8df                  	dw	df_rt_eor
dec2 : 67e0                  	dw	df_rt_comlte
dec4 : 72e0                  	dw	df_rt_comgte
dec6 : 7de0                  	dw	df_rt_comne
dec8 : 46e0                  	dw	df_rt_comlt
deca : 51e0                  	dw	df_rt_comgt
decc : 5ce0                  	dw	df_rt_comeq
                             
                             
                             ; escape sequence handlers
                             ; to do the reverse of tokenising during the list
                             ; command which is also used to save to disk.
dece :                       df_rt_escjmp
dece : 28e8                  	dw df_rt_lst_chr
ded0 : 27e8                  	dw df_rt_lst_reserved
ded2 : 27e8                  	dw df_rt_lst_reserved
ded4 : 27e8                  	dw df_rt_lst_reserved
ded6 : 27e8                  	dw df_rt_lst_reserved	
ded8 : 27e8                  	dw df_rt_lst_reserved	; no such thing as bytdec
deda : 45e8                  	dw df_rt_lst_bythex
dedc : 6ae8                  	dw df_rt_lst_bytbin
dede : 27e8                  	dw df_rt_lst_reserved	
dee0 : 8ee8                  	dw df_rt_lst_intdec
dee2 : 58e8                  	dw df_rt_lst_inthex
dee4 : 72e8                  	dw df_rt_lst_intbin
dee6 : 27e8                  	dw df_rt_lst_reserved
dee8 : 27e8                  	dw df_rt_lst_reserved
deea : 27e8                  	dw df_rt_lst_reserved
deec : 27e8                  	dw df_rt_lst_reserved	
deee : ebe8                  	dw df_rt_lst_strlit
AS65 Assembler for R6502 [1.42].                                     Page  125
---------------------------------- bank1.s -----------------------------------

def0 : 99e8                  	dw df_rt_lst_var
def2 : 99e8                  	dw df_rt_lst_proc
                             
                             	include "dflat/rtsubs.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  RTSUBS.S
                             ;*  Module that implements the runtime execution 
                             ;*  keywords and functions.
                             ;*  So this is where most of the action is for ru
                             ;*  a line is being executed, the dflat runtime c
                             ;*  jumps through the runtime table to routines h
                             ;*  Every dflat statement begins with a token (ig
                             ;*  whitespace), even the implicit assignment and
                             ;*  invocation.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
def4 :                       mod_sz_rtsubs_s
                             
                             	include "dflat\numop.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  NUMOP.S
                             ;*	Dflat number AND string operators.
                             ;*  Uses the operator stack to get parameters, le
                             ;*  result on the operator stack.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; common pushint code
def4 :                       df_rt_putintres
def4 : a6d7             [ 3] 	ldx df_tmpptra
def6 : a5d8             [ 3] 	lda df_tmpptra+1
def8 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; add two numbers
defb :                       df_rt_add
defb : 2007dc           [ 6] 	jsr df_rt_get2Ints
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
df0b : 4cf4de           [ 3] 	jmp df_rt_putintres
                             	
                             ; subtract
AS65 Assembler for R6502 [1.42].                                     Page  126
---------------------------------- bank1.s -----------------------------------

df0e :                       df_rt_sub
df0e : 2007dc           [ 6] 	jsr df_rt_get2Ints
                             	_subZPWord df_tmpptra,df_tmpptrb
                             
df1e : 4cf4de           [ 3] 	jmp df_rt_putintres
                             
                             ; multiply
df21 :                       df_rt_mult
df21 : 2007dc           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
df34 : 205ecc           [ 6] 	jsr int_mult
                             	_cpyZPWord num_a,df_tmpptra
                             
df3f : 4cf4de           [ 3] 	jmp df_rt_putintres
                             
                             ; divide
df42 :                       df_rt_div
df42 : 2007dc           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
df55 : 2087cc           [ 6] 	jsr int_div
                             	_cpyZPWord num_a,df_tmpptra
                             
df60 : 4cf4de           [ 3] 	jmp df_rt_putintres
                             
                             ; mod
df63 :                       df_rt_mod
df63 : 2007dc           [ 6] 	jsr df_rt_get2Ints
                             	_cpyZPWord df_tmpptra,num_a
                             
                             	_cpyZPWord df_tmpptrb,num_b
                             
df76 : 2087cc           [ 6] 	jsr int_div
                             	_cpyZPWord num_x,df_tmpptra
                             
df81 : 4cf4de           [ 3] 	jmp df_rt_putintres
                             
                             ; shift left
df84 :                       df_rt_asl
df84 : 2007dc           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
df87 : a6d9             [ 3] 	ldx df_tmpptrb
df89 : e8               [ 2] 	inx
df8a :                       df_rt_aslbit
df8a : ca               [ 2] 	dex
df8b : f007             [ 3] 	beq df_rt_asldone
df8d : 06d7             [ 5] 	asl df_tmpptra
df8f : 26d8             [ 5] 	rol df_tmpptra+1
df91 : 4c8adf           [ 3] 	jmp df_rt_aslbit
df94 :                       df_rt_asldone
df94 : 4cf4de           [ 3] 	jmp df_rt_putintres
                             
                             ; shift right
df97 :                       df_rt_lsr
df97 : 2007dc           [ 6] 	jsr df_rt_get2Ints
                             	; use low byte only for # of shifts
df9a : a6d9             [ 3] 	ldx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  127
---------------------------------- bank1.s -----------------------------------

df9c : e8               [ 2] 	inx
df9d :                       df_rt_lsrbit
df9d : ca               [ 2] 	dex
df9e : f007             [ 3] 	beq df_rt_lsrdone
dfa0 : 46d8             [ 5] 	lsr df_tmpptra+1
dfa2 : 66d7             [ 5] 	ror df_tmpptra
dfa4 : 4c9ddf           [ 3] 	jmp df_rt_lsrbit
dfa7 :                       df_rt_lsrdone
dfa7 : 4cf4de           [ 3] 	jmp df_rt_putintres
                             
                             ; logical and
dfaa :                       df_rt_and
dfaa : 2007dc           [ 6] 	jsr df_rt_get2Ints
dfad : a5d7             [ 3] 	lda df_tmpptra
dfaf : 25d9             [ 3] 	and df_tmpptrb
dfb1 : aa               [ 2] 	tax
dfb2 : a5d8             [ 3] 	lda df_tmpptra+1
dfb4 : 25da             [ 3] 	and df_tmpptrb+1
dfb6 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             	
                             ; logical or
dfb9 :                       df_rt_or
dfb9 : 2007dc           [ 6] 	jsr df_rt_get2Ints
dfbc : a5d7             [ 3] 	lda df_tmpptra
dfbe : 05d9             [ 3] 	ora df_tmpptrb
dfc0 : aa               [ 2] 	tax
dfc1 : a5d8             [ 3] 	lda df_tmpptra+1
dfc3 : 05da             [ 3] 	ora df_tmpptrb+1
dfc5 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; logical eor
dfc8 :                       df_rt_eor
dfc8 : 2007dc           [ 6] 	jsr df_rt_get2Ints
dfcb : a5d7             [ 3] 	lda df_tmpptra
dfcd : 45d9             [ 3] 	eor df_tmpptrb
dfcf : aa               [ 2] 	tax
dfd0 : a5d8             [ 3] 	lda df_tmpptra+1
dfd2 : 45da             [ 3] 	eor df_tmpptrb+1
dfd4 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; a==b common function
dfd7 :                       df_rt_aequb
dfd7 : a5d7             [ 3] 	lda df_tmpptra
dfd9 : c5d9             [ 3] 	cmp df_tmpptrb
dfdb : d004             [ 3] 	bne df_rt_aequbFin
dfdd : a5d8             [ 3] 	lda df_tmpptra+1
dfdf : c5da             [ 3] 	cmp df_tmpptrb+1
dfe1 :                       df_rt_aequbFin
dfe1 : 60               [ 6] 	rts
                             
                             ; a-b common function
dfe2 :                       df_rt_asubb
dfe2 : 38               [ 2] 	sec
dfe3 : a5d7             [ 3] 	lda df_tmpptra
dfe5 : e5d9             [ 3] 	sbc df_tmpptrb
dfe7 : a5d8             [ 3] 	lda df_tmpptra+1
dfe9 : e5da             [ 3] 	sbc df_tmpptrb+1
dfeb : 5002             [ 3] 	bvc df_rt_asubbFin
dfed : 4980             [ 2] 	eor #0x80
dfef :                       df_rt_asubbFin
dfef : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  128
---------------------------------- bank1.s -----------------------------------

                             ; b-a common function
dff0 :                       df_rt_bsuba
dff0 : 38               [ 2] 	sec
dff1 : a5d9             [ 3] 	lda df_tmpptrb
dff3 : e5d7             [ 3] 	sbc df_tmpptra
dff5 : a5da             [ 3] 	lda df_tmpptrb+1
dff7 : e5d8             [ 3] 	sbc df_tmpptra+1
dff9 : 5002             [ 3] 	bvc df_rt_bsubaFin
dffb : 4980             [ 2] 	eor #0x80
dffd :                       df_rt_bsubaFin
dffd : 60               [ 6] 	rts
                             
                             ; common routine push true
dffe :                       df_rt_true
dffe : a2ff             [ 2] 	ldx #0xff
e000 : 8a               [ 2] 	txa
e001 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; common routine push false
e004 :                       df_rt_false
e004 : a200             [ 2] 	ldx #0x00
e006 : 8a               [ 2] 	txa
e007 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; a < b == (a-b) < 0
e00a :                       df_rt_lt
e00a : 2007dc           [ 6] 	jsr df_rt_get2Ints
e00d : 20e2df           [ 6] 	jsr df_rt_asubb
e010 : 30ec             [ 4] 	bmi df_rt_true
e012 : 10f0             [ 3] 	bpl df_rt_false
                             
                             ; a <=b == !(b-a > 0)
e014 :                       df_rt_lte
e014 : 2007dc           [ 6] 	jsr df_rt_get2Ints
e017 :                       df_rt_lte_calc
e017 : 20f0df           [ 6] 	jsr df_rt_bsuba
e01a : 30e8             [ 3] 	bmi df_rt_false
e01c : 10e0             [ 4] 	bpl df_rt_true
                             
                             ; a > b == (b-a) < 0
e01e :                       df_rt_gt
e01e : 2007dc           [ 6] 	jsr df_rt_get2Ints
e021 : 20f0df           [ 6] 	jsr df_rt_bsuba
e024 : 30d8             [ 4] 	bmi df_rt_true
e026 : 10dc             [ 3] 	bpl df_rt_false
                             
                             ; a >= b == (a-b >=0)
e028 :                       df_rt_gte
e028 : 2007dc           [ 6] 	jsr df_rt_get2Ints
e02b :                       df_rt_gte_calc
e02b : 20e2df           [ 6] 	jsr df_rt_asubb
e02e : 10ce             [ 4] 	bpl df_rt_true
e030 : 30d2             [ 3] 	bmi df_rt_false
                             
                             ; a == b
e032 :                       df_rt_eq
e032 : 2007dc           [ 6] 	jsr df_rt_get2Ints
e035 : 20d7df           [ 6] 	jsr df_rt_aequb
e038 : d0ca             [ 3] 	bne df_rt_false
e03a : f0c2             [ 4] 	beq df_rt_true
                             
                             ; a <> b
AS65 Assembler for R6502 [1.42].                                     Page  129
---------------------------------- bank1.s -----------------------------------

e03c :                       df_rt_ne
e03c : 2007dc           [ 6] 	jsr df_rt_get2Ints
e03f : 20d7df           [ 6] 	jsr df_rt_aequb
e042 : f0c0             [ 3] 	beq df_rt_false
e044 : d0b8             [ 4] 	bne df_rt_true
                             
                             ; Common usage of boolean operators for num and s
                             
e046 :                       df_rt_comlt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e04b : 2904             [ 2] 	and #DFST_STR
e04d : d054             [ 3] 	bne df_rt_slt
                             	; If not string then assume number
e04f : f0b9             [ 3] 	beq df_rt_lt
                             
e051 :                       df_rt_comgt
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e056 : 2904             [ 2] 	and #DFST_STR
e058 : d050             [ 3] 	bne df_rt_sgt
                             	; If not string then assume number
e05a : f0c2             [ 3] 	beq df_rt_gt
                             
e05c :                       df_rt_comeq
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e061 : 2904             [ 2] 	and #DFST_STR
e063 : d04e             [ 3] 	bne df_rt_seq
                             	; If not string then assume number
e065 : f0cb             [ 3] 	beq df_rt_eq
                             
e067 :                       df_rt_comlte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e06c : 2904             [ 2] 	and #DFST_STR
e06e : d018             [ 3] 	bne df_rt_slte
                             	; If not string then assume number
e070 : f0a2             [ 3] 	beq df_rt_lte
                             	
e072 :                       df_rt_comgte
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e077 : 2904             [ 2] 	and #DFST_STR
e079 : d01a             [ 3] 	bne df_rt_sgte
                             	; If not string then assume number
e07b : f0ab             [ 3] 	beq df_rt_gte
                             
e07d :                       df_rt_comne
                             	; First find the data type on the stack
                             	_df_ost_peekType
                             
e082 : 2904             [ 2] 	and #DFST_STR
e084 : d016             [ 3] 	bne df_rt_sne
                             	; If not string then assume number
e086 : f0b4             [ 3] 	beq df_rt_ne
                             
AS65 Assembler for R6502 [1.42].                                     Page  130
---------------------------------- bank1.s -----------------------------------

                             
                             ;********** STRING OPS **********
                             
                             ; string less than or equal
e088 :                       df_rt_slte
e088 : 20bae0           [ 6] 	jsr df_rt_str_comp
e08b : 9005             [ 3] 	bcc df_rt_str_comp_true
e08d : f003             [ 3] 	beq df_rt_str_comp_true
e08f :                       df_rt_str_comp_false
e08f : 4c04e0           [ 3] 	jmp df_rt_false
e092 :                       df_rt_str_comp_true
e092 : 4cfedf           [ 3] 	jmp df_rt_true	
                             
                             ; string greater then or equal	
e095 :                       df_rt_sgte
e095 : 20bae0           [ 6] 	jsr df_rt_str_comp
e098 : b0f8             [ 3] 	bcs df_rt_str_comp_true
e09a : 90f3             [ 3] 	bcc df_rt_str_comp_false
                             
                             ; string not equal
e09c :                       df_rt_sne
e09c : 20bae0           [ 6] 	jsr df_rt_str_comp
e09f : d0f1             [ 3] 	bne df_rt_str_comp_true
e0a1 : f0ec             [ 3] 	beq df_rt_str_comp_false
                             
                             ; string less than
e0a3 :                       df_rt_slt
e0a3 : 20bae0           [ 6] 	jsr df_rt_str_comp
e0a6 : 90ea             [ 3] 	bcc df_rt_str_comp_true
e0a8 : b0e5             [ 3] 	bcs df_rt_str_comp_false
                             
                             ; string greater than
e0aa :                       df_rt_sgt
e0aa : 20bae0           [ 6] 	jsr df_rt_str_comp
e0ad : f0e0             [ 3] 	beq df_rt_str_comp_false
e0af : 90de             [ 3] 	bcc df_rt_str_comp_false
e0b1 : d0df             [ 3] 	bne df_rt_str_comp_true
                             
                             ; string equal
e0b3 :                       df_rt_seq
e0b3 : 20bae0           [ 6] 	jsr df_rt_str_comp
e0b6 : f0da             [ 3] 	beq df_rt_str_comp_true
e0b8 : d0d5             [ 3] 	bne df_rt_str_comp_false
                             
                             ; common string comparator
                             ; C=0 means <
                             ; C=1,Z=0 means >
                             ; C=1,Z=1 means ==
e0ba :                       df_rt_str_comp
e0ba : 2016dc           [ 6] 	jsr df_rt_get2Strs
e0bd : a000             [ 2] 	ldy #0
e0bf :                       df_rt_str_comp_byte
e0bf : b1d7             [ 5] 	lda (df_tmpptra),y
e0c1 : d1d9             [ 5] 	cmp (df_tmpptrb),y
e0c3 : d007             [ 3] 	bne df_rt_str_comp_done
                             	; if here then both strings still the same
e0c5 : c900             [ 2] 	cmp #0				; What was op1 char
                             	; if char is zero then end
e0c7 : f003             [ 3] 	beq df_rt_str_comp_done
                             	; else do next char
e0c9 : c8               [ 2] 	iny
e0ca : d0f3             [ 3] 	bne df_rt_str_comp_byte ; Always - relying on Y 
AS65 Assembler for R6502 [1.42].                                     Page  131
---------------------------------- bank1.s -----------------------------------

e0cc :                       df_rt_str_comp_done
e0cc : 60               [ 6] 	rts
                             
                             
                             
                             
e0cd :                       df_rt_monitor
e0cd : 20b6c2           [ 6] 	jsr _command_line
e0d0 : 60               [ 6] 	rts
                             	
e0d1 :                       df_rt_new
e0d1 : 4c3df3           [ 3] 	jmp df_clear
                             
                             ; df_rt_gotosub_common
                             ; 	; get line number in A,X and put in num_a
                             ; 	jsr df_rt_getnval
                             ; 	stx num_a
                             ; 	sta num_a+1
                             ; 	; For the moment start from the beginning
                             ; 	ldy df_prgstrt		; num_tmp contains starting po
                             ; 	sty num_tmp
                             ; 	ldy df_prgstrt+1
                             ; 	sty num_tmp+1
                             ; 	; if current line number > target then start f
                             ; 	; else start from this line number
                             ; 	; do a trial substract of current - target
                             ; 	sec
                             ; 	ldy #DFTK_LINNUM
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a
                             ; 	iny
                             ; 	lda (df_currlin),y
                             ; 	sbc num_a+1
                             ; 	; if C=1 then current >= target so start from 
                             ; 	bcs df_rt_goto_find_line
                             ; 	; else use current line address
                             ; 	lda df_currlin
                             ; 	sta num_tmp
                             ; 	lda df_currlin+1
                             ; 	sta num_tmp+1
                             ; df_rt_goto_find_line
                             ; 	jsr df_pg_check_next_line	; Reuses the line fi
                             ; 	bcs df_rt_goto_not_found	; If no exact match t
                             ; 	rts							; X,A contains address of target lin
                             ; df_rt_goto_not_found
                             ; 	SWBRK DFERR_NOLINE
                             
                             ; df_rt_gosub
                             ; 	; push statement address for return
                             ; 	jsr df_rt_push_stat
                             ; 	; DFRT_WHILE token
                             ; 	lda #DFRT_GOSUB
                             ; 	jsr df_rst_pushByte
                             ; 	; *IMPORTANT* : falls through to the goto code
                             ; df_rt_goto
                             ; 	; Find the line number to goto
                             ; 	jsr df_rt_gotosub_common
                             ; 	; Save it in the next line property
                             ; 	stx df_nextlin
                             ; 	sta df_nextlin+1
                             ; 	; GOTO is from the beginning of a line only
                             ; 	ldy #3
AS65 Assembler for R6502 [1.42].                                     Page  132
---------------------------------- bank1.s -----------------------------------

                             ; 	sty df_nxtstidx
                             ; 	; Runtime will change flow to use next line pr
                             ; 	rts
                             
                             ; df_rt_retsub
                             ; 	; The top of stack needs to be a gosub return 
                             ; 	jsr df_rst_popByte
                             ; 	cmp #DFRT_GOSUB
                             ; 	bne df_rt_retsub_err
                             ; 	; pop the stat and continue
                             ; 	jmp df_rt_pop_stat
                             ; df_rt_retsub_err
                             ; 	SWBRK DFERR_RETURN
                             
                             
e0d4 :                       df_rt_while
                             	; push statement address
e0d4 : 202edd           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_WHILE token
e0d7 : a990             [ 2] 	lda #DFRT_WHILE
e0d9 : 209df2           [ 6] 	jsr df_rst_pushByte
                             
                             	; get value in A,X
e0dc : 2064d9           [ 6] 	jsr df_rt_getnval
                             
                             	; if value<>0 then continue
e0df : e000             [ 2] 	cpx #0
e0e1 : f001             [ 3] 	beq df_rt_while_done
e0e3 : 60               [ 6] 	rts
e0e4 :                       df_rt_while_done
                             	; pop while data off stack as not needed
e0e4 : 20a6f2           [ 6] 	jsr df_rst_popByte
e0e7 : 20a6f2           [ 6] 	jsr df_rst_popByte
e0ea : 20c3f2           [ 6] 	jsr df_rst_popWord
                             	; while evaluated false so find wend
                             	; but check for any nested while/wends
                             	; nest = 1 to start
e0ed : a5c9             [ 3] 	lda df_ifnest
e0ef : 48               [ 3] 	pha
e0f0 : a901             [ 2] 	lda #1
e0f2 : 85c9             [ 3] 	sta df_ifnest
                             	; find the matching else/elseif/endif
                             	; start from current statement
                             	_cpyZPWord df_currlin,df_nextlin
                             
e0fc :                       df_rt_findwend
e0fc : a6bf             [ 3] 	ldx df_nextlin
e0fe : a5c0             [ 3] 	lda df_nextlin+1
e100 : a4b6             [ 3] 	ldy df_curstidx
e102 : 2000dd           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e105 : b030             [ 3] 	bcs df_rt_wend_end
e107 : 86bf             [ 3] 	stx df_nextlin
e109 : 85c0             [ 3] 	sta df_nextlin+1
e10b : 84b6             [ 3] 	sty df_curstidx
                             	; find the command token
e10d :                       df_rt_while_cmd
e10d : c8               [ 2] 	iny
e10e : b1bf             [ 5] 	lda (df_nextlin),y
e110 : 10fb             [ 3] 	bpl df_rt_while_cmd
                             	; check for wend
e112 : c991             [ 2] 	cmp #DFRT_WEND
AS65 Assembler for R6502 [1.42].                                     Page  133
---------------------------------- bank1.s -----------------------------------

e114 : d019             [ 3] 	bne df_rt_check_while
                             	; decrement nest
e116 : c6c9             [ 5] 	dec df_ifnest
                             	; if not zero then go find more commands
e118 : d0e2             [ 4] 	bne df_rt_findwend
                             	; else found it, restore if nest
                             	; and skip the wend statement
e11a : 68               [ 4] 	pla
e11b : 85c9             [ 3] 	sta df_ifnest
e11d : a6bf             [ 3] 	ldx df_nextlin
e11f : a5c0             [ 3] 	lda df_nextlin+1
e121 : a4b6             [ 3] 	ldy df_curstidx
e123 : 2000dd           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e126 : b00f             [ 3] 	bcs df_rt_wend_end
                             	; need to update nxtstidx to transfer control
e128 : 86bf             [ 3] 	stx df_nextlin
e12a : 85c0             [ 3] 	sta df_nextlin+1
e12c : 84b5             [ 3] 	sty df_nxtstidx	
e12e : 60               [ 6] 	rts
e12f :                       df_rt_check_while
                             	; check for while
e12f : c990             [ 2] 	cmp #DFRT_WHILE
e131 : d0c9             [ 4] 	bne df_rt_findwend
                             	; if while found then increment nest
e133 : e6c9             [ 5] 	inc df_ifnest
e135 : 80c5             [ 4] 	bra df_rt_findwend
e137 :                       df_rt_wend_end
                             	SWBRK DFERR_IMMEDIATE
                             
                             
e139 :                       df_rt_wend
e139 : 20a6f2           [ 6] 	jsr df_rst_popByte
e13c : c990             [ 2] 	cmp #DFRT_WHILE
e13e : d00d             [ 3] 	bne df_rt_wend_err
                             	; pop the stat and continue
e140 : 20c3f2           [ 6] 	jsr df_rst_popWord
e143 : 86bf             [ 3] 	stx	df_nextlin
e145 : 85c0             [ 3] 	sta df_nextlin+1
e147 : 20a6f2           [ 6] 	jsr df_rst_popByte
e14a : 85b5             [ 3] 	sta df_nxtstidx
e14c : 60               [ 6] 	rts
e14d :                       df_rt_wend_err
                             	SWBRK DFERR_WEND
                             
                             
                             ;move to next statement during if/else matching
                             ;end of program is an error
e14f :                       df_rt_if_stat
e14f : a6bf             [ 3] 	ldx df_nextlin
e151 : a5c0             [ 3] 	lda df_nextlin+1
e153 : a4b6             [ 3] 	ldy df_curstidx
e155 : 2000dd           [ 6] 	jsr df_rt_nextstat
                             	; got to end of program, then a problem
e158 : b009             [ 3] 	bcs df_rt_if_stat_err
e15a : 86bf             [ 3] 	stx df_nextlin
e15c : 85c0             [ 3] 	sta df_nextlin+1
e15e : 84b6             [ 3] 	sty df_curstidx
e160 : 84b5             [ 3] 	sty df_nxtstidx
e162 : 60               [ 6] 	rts
                             ; program ended with no match
e163 :                       df_rt_if_stat_err
AS65 Assembler for R6502 [1.42].                                     Page  134
---------------------------------- bank1.s -----------------------------------

                             	SWBRK DFERR_UNCLOSEDIF
                             
                             	
                             ; find matching else/elseif/endif
                             ; C = 0 match else/elseif/endif
                             ; C = 1 match endif only
                             ; endif is always matched
                             ; ** MAKE SURE NEXTLIN IS POPULATED! **
e165 :                       df_rt_if_match
                             	; save the current if nest level
e165 : a5c9             [ 3] 	lda df_ifnest
e167 : 48               [ 3] 	pha
                             	; local if nest level is zero to start with
e168 : 64c9             [ 3] 	stz df_ifnest	
                             	; save match pref
e16a : 08               [ 3] 	php
                             	; find the matching else/elseif/endif
                             	; start from df_nextlin, df_curstidx
e16b :                       df_rt_findelseendif
e16b : 204fe1           [ 6] 	jsr df_rt_if_stat
                             	; find command
e16e :                       df_rt_ifcmd
e16e : c8               [ 2] 	iny
e16f : b1bf             [ 5] 	lda (df_nextlin),y
e171 : 10fb             [ 3] 	bpl df_rt_ifcmd
                             	; check for endif
e173 : c994             [ 2] 	cmp #DFRT_ENDIF
e175 : f014             [ 3] 	beq df_rt_ifelse
                             
e177 : 28               [ 4] 	plp
e178 : 08               [ 3] 	php
                             	
e179 : b008             [ 3] 	bcs df_rt_ifskipelseif
e17b : c993             [ 2] 	cmp #DFRT_ELSE
e17d : f00c             [ 3] 	beq df_rt_ifelse
e17f : c995             [ 2] 	cmp #DFRT_ELSEIF
e181 : f008             [ 3] 	beq df_rt_ifelse
e183 :                       df_rt_ifskipelseif
                             	; another if token found - increment lcoal if ne
e183 : c992             [ 2] 	cmp #DFRT_IF
e185 : d002             [ 3] 	bne df_rt_skipnestif
e187 : e6c9             [ 5] 	inc df_ifnest
e189 :                       df_rt_skipnestif
                             	; no tokens of interest found, so next statement
e189 : 80e0             [ 3] 	bra df_rt_findelseendif
                             	
                             	; found else/elseif/endif
                             	; but check if this is nested
e18b :                       df_rt_ifelse
                             	; nest counter zero then found matching else/els
e18b : a6c9             [ 3] 	ldx df_ifnest
e18d : f008             [ 3] 	beq df_rt_if_found
                             	; endif token found so decrement local nest
e18f : c994             [ 2] 	cmp #DFRT_ENDIF
e191 : d002             [ 3] 	bne df_rt_skipnestendif
e193 : c6c9             [ 5] 	dec df_ifnest
e195 :                       df_rt_skipnestendif	
                             	; continue to search for else/endif
e195 : 80d4             [ 3] 	bra df_rt_findelseendif
                             	; ok got a match
e197 :                       df_rt_if_found
                             	; remove pref
AS65 Assembler for R6502 [1.42].                                     Page  135
---------------------------------- bank1.s -----------------------------------

e197 : 28               [ 4] 	plp
                             	; restore global if nest
e198 : fa               [ 4] 	plx
e199 : 86c9             [ 3] 	stx df_ifnest
                             
                             	;A contains the token found, Y is index in to df
                             ;	clc
e19b : 60               [ 6] 	rts
                             
e19c :                       df_rt_endif
                             	; decrement if next level
e19c : c6c9             [ 5] 	dec df_ifnest
e19e : 3011             [ 3] 	bmi df_rt_noif_err
                             ;	clc
e1a0 : 60               [ 6] 	rts
                             	
                             	; else and ifelse encountered in a normal sequen
                             	; only happens when the clause has been executed
                             	; so we only now need to find the endif
e1a1 :                       df_rt_elseif
e1a1 :                       df_rt_else
                             	; not in if mode then error
e1a1 : a5c9             [ 3] 	lda df_ifnest
e1a3 : f00c             [ 3] 	beq df_rt_noif_err
                             	; find endif only
                             	; starting from current line and curstidx
                             	_cpyZPWord df_currlin,df_nextlin
                             
e1ad : 38               [ 2] 	sec
e1ae : 4c65e1           [ 3] 	jmp df_rt_if_match
                             
                             ; endif/else/elseif encountered outside of an if	
e1b1 :                       df_rt_noif_err
                             	SWBRK DFERR_NOIF
                             
                             	
                             	; when if is encountered, the job of this routin
                             	; to determine which clause to execute, then tra
                             	; program control to that point.  in normal prog
                             	; sequence else/elseif statements will signify t
                             	; of an if construct.
e1b3 :                       df_rt_if
                             	; increment global if nest counter
e1b3 : e6c9             [ 5] 	inc df_ifnest
e1b5 :                       df_rt_ifeval
                             	; get value
e1b5 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 if is successful then continue nor
e1b8 : c900             [ 2] 	cmp #0
e1ba : d035             [ 3] 	bne df_rt_if_done
e1bc : e000             [ 2] 	cpx #0
e1be : d031             [ 3] 	bne df_rt_if_done
                             	; got here then if clause evaluated to false
                             	; match with else/elseif/endif
                             	; df_nextlin is used to find the clause to execu
                             	_cpyZPWord df_currlin,df_nextlin
                             
e1c8 : 18               [ 2] 	clc						
e1c9 : 2065e1           [ 6] 	jsr df_rt_if_match
                             	; A contains the token found, Y is index of this
                             
e1cc : c993             [ 2] 	cmp #DFRT_ELSE
AS65 Assembler for R6502 [1.42].                                     Page  136
---------------------------------- bank1.s -----------------------------------

                             	; else: df_nextlin and df_nxtstidx points to the
e1ce : f01e             [ 3] 	beq df_rt_do_else
                             
e1d0 : c994             [ 2] 	cmp #DFRT_ENDIF
                             	; else: df_nextlin and df_nxtstidx points to the
e1d2 : f01d             [ 3] 	beq df_rt_if_done
                             
                             	; elif detected - increment past the token and e
                             	; make this the current line and token index
                             	_cpyZPWord df_nextlin,df_currlin
                             
                             	; move past the token and save position
e1dc : c8               [ 2] 	iny
e1dd : 5a               [ 3] 	phy
                             	; initialise statement pointer
e1de : a4b6             [ 3] 	ldy df_curstidx
e1e0 : a6bc             [ 3] 	ldx df_currlin
e1e2 : a5bd             [ 3] 	lda df_currlin+1
e1e4 : 2084dc           [ 6] 	jsr df_rt_init_stat_ptr
                             	; restore Y (one byte past the token) and save i
e1e7 : 7a               [ 4] 	ply
e1e8 : 84be             [ 3] 	sty df_exeoff
                             	; don't force a jump as we've initalised all var
e1ea : 64c0             [ 3] 	stz df_nextlin+1
                             	; now everyting is set up to evaluate the elif c
e1ec : 80c7             [ 3] 	bra df_rt_ifeval
                             	
e1ee :                       df_rt_do_else
                             	; we need to point to the next statement not thi
e1ee : 204fe1           [ 6] 	jsr df_rt_if_stat
e1f1 :                       df_rt_if_done
                             ;	clc
e1f1 : 60               [ 6] 	rts
                             	
e1f2 :                       df_rt_for
                             	; push statement address to rt stack
e1f2 : 202edd           [ 6] 	jsr df_rt_push_stat
                             	; get lvar
e1f5 : 20b3dd           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e1f8 : 48               [ 3] 	pha
e1f9 : da               [ 3] 	phx
                             
                             	; find starting value
                             	; evaluate the starting value
                             	; can't use df_rt_getnval as need to use A,X fir
e1fa : e6be             [ 5] 	inc df_exeoff
e1fc : 206ad9           [ 6] 	jsr df_rt_neval
                             	; get ready to update the counter
e1ff : fa               [ 4] 	plx
e200 : 86d7             [ 3] 	stx df_tmpptra
e202 : 68               [ 4] 	pla
e203 : 85d8             [ 3] 	sta df_tmpptra+1
e205 : 48               [ 3] 	pha
e206 : da               [ 3] 	phx
                             	; get the starting value from op stack
e207 : 20fbf2           [ 6] 	jsr df_ost_popInt
                             	; save it to counter slot
e20a : a001             [ 2] 	ldy #1
e20c : 91d7             [ 5] 	sta (df_tmpptra),y
e20e : 8a               [ 2] 	txa
e20f : 88               [ 2] 	dey
AS65 Assembler for R6502 [1.42].                                     Page  137
---------------------------------- bank1.s -----------------------------------

e210 : 92d7             [ 5] 	sta (df_tmpptra)
                             
                             	; find end value
                             	; evaluate the end value
e212 : e6be             [ 5] 	inc df_exeoff
e214 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; and put on rt stack
e217 : 20b5f2           [ 6] 	jsr df_rst_pushWord
                             
                             	; find step value
                             	; evaluate the end value
e21a : e6be             [ 5] 	inc df_exeoff
e21c : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; and push on rt stack
e21f : 20b5f2           [ 6] 	jsr df_rst_pushWord
                             	; save the counter slot address
e222 : fa               [ 4] 	plx
e223 : 68               [ 4] 	pla
e224 : 20b5f2           [ 6] 	jsr df_rst_pushWord
                             	; all done - counter set to start
                             	; stack contains counter slot, step val, end val
                             	; now push for token
e227 : a98e             [ 2] 	lda #DFRT_FOR
e229 : 4c9df2           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             
e22c :                       df_rt_next
                             	; remember stack position
e22c : a4ac             [ 3] 	ldy df_rtstop
e22e : 5a               [ 3] 	phy
e22f : 20a6f2           [ 6] 	jsr df_rst_popByte
e232 : c98e             [ 2] 	cmp #DFRT_FOR
e234 : d04f             [ 3] 	bne df_rt_next_err
                             	; get the slot address
e236 : 20c3f2           [ 6] 	jsr df_rst_popWord
                             	; save address to ptrd, contents to ptra
e239 : 86dd             [ 3] 	stx df_tmpptrd
e23b : 85de             [ 3] 	sta df_tmpptrd+1
e23d : b2dd             [ 5] 	lda (df_tmpptrd)
e23f : 85d7             [ 3] 	sta df_tmpptra
e241 : a001             [ 2] 	ldy #1
e243 : b1dd             [ 5] 	lda (df_tmpptrd),y
e245 : 85d8             [ 3] 	sta df_tmpptra+1
                             	
                             	; get step value, save in ptrb
e247 : 20c3f2           [ 6] 	jsr df_rst_popWord
e24a : 86d9             [ 3] 	stx df_tmpptrb
e24c : 85da             [ 3] 	sta df_tmpptrb+1
e24e : 48               [ 3] 	pha					; Push A to check for -ve step
                             
                             	; add step to counter and save back to counter
                             	_addZPWord df_tmpptra,df_tmpptrb
                             
e25c : a5d7             [ 3] 	lda df_tmpptra
e25e : 92dd             [ 5] 	sta (df_tmpptrd)
e260 : a001             [ 2] 	ldy #1
e262 : a5d8             [ 3] 	lda df_tmpptra+1
e264 : 91dd             [ 5] 	sta (df_tmpptrd),y
                             	
                             	; get end value, save in ptrb
e266 : 20c3f2           [ 6] 	jsr df_rst_popWord
e269 : 86d9             [ 3] 	stx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  138
---------------------------------- bank1.s -----------------------------------

e26b : 85da             [ 3] 	sta df_tmpptrb+1
e26d : 68               [ 4] 	pla					; check if if +ve or -ve step
e26e : 1005             [ 3] 	bpl df_rt_check_pos
                             	; call gte operation but no need to get ints
                             	; as already in ptra and ptrb
e270 : 202be0           [ 6] 	jsr df_rt_gte_calc
e273 : 8003             [ 3] 	bra df_rt_next_check
e275 :                       df_rt_check_pos	
                             	; call lte operation but no need to get ints
                             	; as already in ptra and ptrb
e275 : 2017e0           [ 6] 	jsr df_rt_lte_calc
e278 :                       df_rt_next_check
                             	; check if true or false
e278 : 20fbf2           [ 6] 	jsr df_ost_popInt
e27b : e000             [ 2] 	cpx #0
                             	; if false then next is done
e27d : f003             [ 3] 	beq df_next_done
                             	; else we continue
e27f : 4ccfdd           [ 3] 	jmp df_rt_pop_stat_go
                             	; if done, then continue with next statement
e282 :                       df_next_done
e282 : 4ca3e2           [ 3] 	jmp df_rt_untilnext_done
                             	
e285 :                       df_rt_next_err
                             	SWBRK DFERR_NEXTFOR
                             
                             
                             	
e287 :                       df_rt_repeat
                             	; push statement address
e287 : 202edd           [ 6] 	jsr df_rt_push_stat
                             	; DFRT_REPEAT token
e28a : a98c             [ 2] 	lda #DFRT_REPEAT
e28c : 4c9df2           [ 3] 	jmp df_rst_pushByte
                             ;	rts
                             	
e28f :                       df_rt_until
                             	; remember stack position
e28f : a4ac             [ 3] 	ldy df_rtstop
e291 : 5a               [ 3] 	phy
e292 : 20a6f2           [ 6] 	jsr df_rst_popByte
e295 : c98c             [ 2] 	cmp #DFRT_REPEAT
e297 : d011             [ 3] 	bne df_rt_until_err
                             	; evaluate expression in to A,X
e299 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; if value<>0 then continue
e29c : e000             [ 2] 	cpx #0
e29e : d003             [ 3] 	bne df_rt_untilnext_done
                             
                             	; pop the stat and continue
e2a0 : 4ccfdd           [ 3] 	jmp df_rt_pop_stat_go
                             
e2a3 :                       df_rt_untilnext_done
e2a3 : 7a               [ 4] 	ply
                             	; pop 2 items off stack (line address, index)
e2a4 : 20c3f2           [ 6] 	jsr df_rst_popWord
e2a7 : 4ca6f2           [ 3] 	jmp df_rst_popByte
                             	; and continue
                             ;	clc
                             ;	rts
                             
e2aa :                       df_rt_until_err
AS65 Assembler for R6502 [1.42].                                     Page  139
---------------------------------- bank1.s -----------------------------------

                             	SWBRK DFERR_UNTIL
                             
                             	
e2ac :                       df_rt_sadd
                             ;	clc
e2ac : 60               [ 6] 	rts
                             	
e2ad :                       df_rt_print_num
e2ad : 20fbf2           [ 6] 	jsr df_ost_popInt
e2b0 : 18               [ 2] 	clc
e2b1 : 4c7ccb           [ 3] 	jmp print_a_to_d
                             ;	rts
                             	
e2b4 :                       df_rt_print_str
e2b4 : 20f3f2           [ 6] 	jsr df_ost_popStr
e2b7 : 86d7             [ 3] 	stx df_tmpptra
e2b9 : 85d8             [ 3] 	sta df_tmpptra+1
e2bb : a000             [ 2] 	ldy #0
e2bd :                       df_rt_print_str_ch
e2bd : b1d7             [ 5] 	lda (df_tmpptra),y
e2bf : f006             [ 3] 	beq df_rt_print_str_done
e2c1 : 20c0c5           [ 6] 	jsr io_put_ch
e2c4 : c8               [ 2] 	iny
e2c5 : 80f6             [ 3] 	bra df_rt_print_str_ch
e2c7 :                       df_rt_print_str_done
                             ;	clc
e2c7 : 60               [ 6] 	rts
                             
                             ; * Find the position of the next data item to re
e2c8 :                       df_rt_nextdatum
e2c8 : a200             [ 2] 	ldx #0
                             	; load data line offset
e2ca : a4cc             [ 3] 	ldy df_datoff
                             	; if data pointer unitialised (because high byte
e2cc : a5cb             [ 3] 	lda df_currdat+1
e2ce : d02e             [ 3] 	bne df_rt_skipinitdataptr
                             	; then start at program beginning
                             	_cpyZPWord df_prgstrt,df_currdat
                             
e2d8 :                       df_rt_datlinstart
                             	; if end of program then error
e2d8 : a1ca             [ 6] 	lda (df_currdat,x)
e2da : f032             [ 4] 	beq df_rt_datumerr
                             	; index in to first line byte
e2dc : a003             [ 2] 	ldy #3
e2de : 84cc             [ 3] 	sty df_datoff
                             	; find first 'data' statement
e2e0 :                       df_rt_datastatement
e2e0 : c8               [ 2] 	iny
e2e1 : 98               [ 2] 	tya
                             	; end of line reached?
e2e2 : c1ca             [ 6] 	cmp (df_currdat,x)
                             	; if not find data token
e2e4 : d00e             [ 3] 	bne df_rt_getdatatk
e2e6 :                       df_rt_datnextlin
                             	; if so then go to next line
e2e6 : 18               [ 2] 	clc
e2e7 : a5ca             [ 3] 	lda df_currdat
e2e9 : 61ca             [ 6] 	adc (df_currdat,x)
e2eb : 85ca             [ 3] 	sta df_currdat
                             	_bcc 2
                             
AS65 Assembler for R6502 [1.42].                                     Page  140
---------------------------------- bank1.s -----------------------------------

e2ef : e6cb             [ 5] 	inc df_currdat+1
e2f1 : 4cd8e2           [ 3] 	jmp df_rt_datlinstart
e2f4 :                       df_rt_getdatatk
e2f4 : b1ca             [ 5] 	lda (df_currdat),y
e2f6 : 10e8             [ 3] 	bpl df_rt_datastatement
                             	; found data statement?
e2f8 : c996             [ 2] 	cmp #DFRT_DATA
                             	; if not then go to next line
e2fa : d0ea             [ 3] 	bne df_rt_datnextlin
e2fc : 84cc             [ 3] 	sty df_datoff
e2fe :                       df_rt_skipinitdataptr
e2fe : 98               [ 2] 	tya
                             	; end of line reached?
e2ff : c1ca             [ 6] 	cmp (df_currdat,x)
                             	; if so go to next line
e301 : f0e3             [ 4] 	beq df_rt_datnextlin
                             	; else see if escape value
e303 : b1ca             [ 5] 	lda (df_currdat),y
e305 : c920             [ 2] 	cmp #DFTK_ESCVAL
e307 : c8               [ 2] 	iny
e308 : b0f4             [ 4] 	bcs df_rt_skipinitdataptr
                             	; ok found an escape value
                             	; save position and return
e30a : 88               [ 2] 	dey
e30b : 84cc             [ 3] 	sty df_datoff
e30d : 60               [ 6] 	rts
e30e :                       df_rt_datumerr
                             	SWBRK DFERR_NODATA
                             
                             
                             ; read a datum
e310 :                       df_rt_readdatum
                             	; update data pointer to next data item
e310 : 20c8e2           [ 6] 	jsr df_rt_nextdatum
                             	; now get lvar X,A from current statement
e313 : 20b3dd           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
e316 : 86d9             [ 3] 	stx df_tmpptrb
e318 : 85da             [ 3] 	sta df_tmpptrb+1
                             
                             	; first save save current prgoram line and offse
e31a : a5bc             [ 3] 	lda df_currlin
e31c : 48               [ 3] 	pha
e31d : a5bd             [ 3] 	lda df_currlin+1
e31f : 48               [ 3] 	pha
e320 : a5be             [ 3] 	lda df_exeoff
e322 : 48               [ 3] 	pha
e323 : a5b4             [ 3] 	lda df_eolidx
e325 : 48               [ 3] 	pha
e326 : a5b5             [ 3] 	lda df_nxtstidx
e328 : 48               [ 3] 	pha
e329 : a5b6             [ 3] 	lda df_curstidx
e32b : 48               [ 3] 	pha
                             
                             	; use data pointer as current position for evalu
                             	_cpyZPWord df_currdat,df_currlin
                             
e334 : a5cc             [ 3] 	lda df_datoff
e336 : 85be             [ 3] 	sta df_exeoff
e338 : a200             [ 2] 	ldx #0
e33a : a1ca             [ 6] 	lda (df_currdat,x)
e33c : 85b4             [ 3] 	sta df_eolidx
AS65 Assembler for R6502 [1.42].                                     Page  141
---------------------------------- bank1.s -----------------------------------

e33e : 85b5             [ 3] 	sta df_nxtstidx
e340 : a903             [ 2] 	lda #3
e342 : 85b6             [ 3] 	sta df_curstidx
                             
                             	; get type from vvt ptr in tmpa
e344 : a1d7             [ 6] 	lda (df_tmpptra,x)
e346 : a8               [ 2] 	tay
                             	; get lvar point from tmpb
e347 : a6d9             [ 3] 	ldx df_tmpptrb
e349 : a5da             [ 3] 	lda df_tmpptrb+1
                             
                             	; X,A and Y set up, now evaluate and perform ass
e34b : 204ae6           [ 6] 	jsr df_rt_doassign
                             
                             	; update data offset as data has been consumed
e34e : a5be             [ 3] 	lda df_exeoff
e350 : 85cc             [ 3] 	sta df_datoff
                             	; restore line settings
e352 : 68               [ 4] 	pla
e353 : 85b6             [ 3] 	sta df_curstidx
e355 : 68               [ 4] 	pla
e356 : 85b5             [ 3] 	sta df_nxtstidx
e358 : 68               [ 4] 	pla
e359 : 85b4             [ 3] 	sta df_eolidx
e35b : 68               [ 4] 	pla
e35c : 85be             [ 3] 	sta df_exeoff
e35e : 68               [ 4] 	pla
e35f : 85bd             [ 3] 	sta df_currlin+1
e361 : 68               [ 4] 	pla
e362 : 85bc             [ 3] 	sta df_currlin
e364 : 60               [ 6] 	rts
                             
                             
e365 :                       df_rt_read
                             	; find variable to read in to from current posit
e365 : a4be             [ 3] 	ldy df_exeoff
e367 :                       df_rt_read_find_var
e367 : c8               [ 2] 	iny
                             	; if end of line or statement then done
                             ;	cpy df_eolidx
                             ;	beq df_rt_read_done
e368 : c4b5             [ 3] 	cpy df_nxtstidx
e36a : f00e             [ 3] 	beq df_rt_read_done
                             	; if not found escape then next byte
e36c : b1bc             [ 5] 	lda (df_currlin),y
e36e : c920             [ 2] 	cmp #DFTK_ESCVAL
e370 : b0f5             [ 3] 	bcs df_rt_read_find_var
                             	; ok found escape, save position
e372 : 84be             [ 3] 	sty df_exeoff
                             	; go and read in the value
e374 : 2010e3           [ 6] 	jsr df_rt_readdatum
                             	; try find another variable
e377 : 4c65e3           [ 3] 	jmp df_rt_read
                             
e37a :                       df_rt_read_done
                             	; save position
e37a : 84be             [ 3] 	sty df_exeoff
e37c : 60               [ 6] 	rts
                             
                             
e37d :                       df_rt_input
                             	; df_tmpptra has the vvt address, X,A is the lva
AS65 Assembler for R6502 [1.42].                                     Page  142
---------------------------------- bank1.s -----------------------------------

e37d : 20b3dd           [ 6] 	jsr df_rt_getlvar
                             	; Save lvar pointer
e380 : 86d9             [ 3] 	stx df_tmpptrb
e382 : 85da             [ 3] 	sta df_tmpptrb+1
e384 : a078             [ 2] 	ldy #120
                             	; go read a line of input
                             	; X,A is ptr has the input, Y is size
e386 : 38               [ 2] 	sec
e387 : 20cfc5           [ 6] 	jsr io_read_line
                             	; check the type
e38a : b2d7             [ 5] 	lda (df_tmpptra)
e38c : 2904             [ 2] 	and #DFVVT_STR
e38e : d008             [ 3] 	bne df_rt_input_str
e390 : b2d7             [ 5] 	lda (df_tmpptra)
e392 : 2903             [ 2] 	and #DFVVT_INT|DFVVT_BYT
e394 : d003             [ 3] 	bne df_rt_input_num
                             	; if not int or byte then error
e396 : 8018             [ 3] 	bra df_rt_input_err
e398 :                       df_rt_input_str
                             	; If string then done!
                             ;	clc
e398 : 60               [ 6] 	rts
                             
e399 :                       df_rt_input_num
                             	; X,A = address from tmpb, linbuff must be on pa
e399 : a6d9             [ 3] 	ldx df_tmpptrb
e39b : a5da             [ 3] 	lda df_tmpptrb+1
e39d : a000             [ 2] 	ldy #0				; any numeric format
e39f : 203dc9           [ 6] 	jsr con_n_to_a
e3a2 : b00c             [ 3] 	bcs df_rt_input_err
e3a4 : a000             [ 2] 	ldy #0
e3a6 : a579             [ 3] 	lda num_a
e3a8 : 91d9             [ 5] 	sta (df_tmpptrb),y
e3aa : c8               [ 2] 	iny
e3ab : a57a             [ 3] 	lda num_a+1
e3ad : 91d9             [ 5] 	sta (df_tmpptrb),y
                             ;	clc
e3af : 60               [ 6] 	rts
e3b0 :                       df_rt_input_err
                             	SWBRK DFERR_TYPEMISM
                             
                             	
e3b2 :                       df_rt_local
                             	; get current local count off rt stack
e3b2 : 20a6f2           [ 6] 	jsr df_rst_popByte
                             	; save on pc stack for incrmenting
e3b5 : 48               [ 3] 	pha
e3b6 : a4be             [ 3] 	ldy df_exeoff
e3b8 : 88               [ 2] 	dey
e3b9 :                       df_rt_local_findesc
e3b9 : c8               [ 2] 	iny
                             	; check end of line
                             ;	cpy df_eolidx
                             ;	beq df_rt_local_done
e3ba : c4b5             [ 3] 	cpy df_nxtstidx
e3bc : f019             [ 3] 	beq df_rt_local_done
                             	; find a var
e3be : b1bc             [ 5] 	lda (df_currlin),y
e3c0 : c911             [ 2] 	cmp #DFTK_VAR
e3c2 : d0f5             [ 3] 	bne df_rt_local_findesc
                             	; jump over escape value
e3c4 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  143
---------------------------------- bank1.s -----------------------------------

                             	; get var slot in A,X
e3c5 : b1bc             [ 5] 	lda (df_currlin),y
e3c7 : aa               [ 2] 	tax
e3c8 : c8               [ 2] 	iny
e3c9 : b1bc             [ 5] 	lda (df_currlin),y
e3cb : 84be             [ 3] 	sty df_exeoff
                             	; localise this variable
e3cd : 2089f2           [ 6] 	jsr df_rt_proc_local
                             	; increment local counter
e3d0 : 68               [ 4] 	pla
e3d1 : 1a               [ 2] 	inc a
e3d2 : 48               [ 3] 	pha
e3d3 : a4be             [ 3] 	ldy df_exeoff
e3d5 : 80e2             [ 3] 	bra df_rt_local_findesc
e3d7 :                       df_rt_local_done
                             	; get the local counter
                             	; put on to rt stack
e3d7 : 68               [ 4] 	pla
e3d8 : 4c9df2           [ 3] 	jmp df_rst_pushByte
                             ;	clc
                             ;	rts
                             	
e3db :                       df_rt_redim
e3db : 38               [ 2] 	sec
e3dc : b001             [ 3] 	bcs df_rt_dim_main
e3de :                       df_rt_dim
e3de : 18               [ 2] 	clc
e3df :                       df_rt_dim_main
e3df : 08               [ 3] 	php
e3e0 :                       df_rt_dim_loop
e3e0 : a4be             [ 3] 	ldy df_exeoff
e3e2 : 88               [ 2] 	dey
e3e3 :                       df_rt_dim_findesc
                             	; check end of line
e3e3 : c8               [ 2] 	iny
                             ;	cpy df_eolidx
                             ;	beq df_rt_dim_done
e3e4 : c4b5             [ 3] 	cpy df_nxtstidx
e3e6 : f076             [ 4] 	beq df_rt_dim_done
                             	; find a var
e3e8 : b1bc             [ 5] 	lda (df_currlin),y
e3ea : c911             [ 2] 	cmp #DFTK_VAR
e3ec : d0f5             [ 3] 	bne df_rt_dim_findesc
                             	; jump over escape value
e3ee : c8               [ 2] 	iny
                             	; get var address
e3ef : b1bc             [ 5] 	lda (df_currlin),y
e3f1 : 85d7             [ 3] 	sta df_tmpptra
e3f3 : c8               [ 2] 	iny
e3f4 : b1bc             [ 5] 	lda (df_currlin),y
e3f6 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; move to open bracket
e3f8 : c8               [ 2] 	iny
e3f9 : 84be             [ 3] 	sty df_exeoff
                             	; If re-dim, don't check for existing dimensions
e3fb : 28               [ 4] 	plp
e3fc : 08               [ 3] 	php
e3fd : b006             [ 4] 	bcs df_rt_skip_dim_chk
                             	; check if already dim'd
e3ff : a003             [ 2] 	ldy #DFVVT_DIM1
e401 : b1d7             [ 5] 	lda (df_tmpptra),y
e403 : d05b             [ 3] 	bne df_rt_dim_err
AS65 Assembler for R6502 [1.42].                                     Page  144
---------------------------------- bank1.s -----------------------------------

e405 :                       df_rt_skip_dim_chk
                             	; Save slot address found earlier
e405 : a5d7             [ 3] 	lda df_tmpptra
e407 : 48               [ 3] 	pha
e408 : a5d8             [ 3] 	lda df_tmpptra+1
e40a : 48               [ 3] 	pha
e40b : 20e0da           [ 6] 	jsr df_rt_arry_parm2
                             	; Restore slot address
e40e : 68               [ 4] 	pla
e40f : 85d8             [ 3] 	sta df_tmpptra+1
e411 : 68               [ 4] 	pla
e412 : 85d7             [ 3] 	sta df_tmpptra
                             ;	bcs df_rt_dim_err
                             	; save x,y to dim1,2
e414 : 5a               [ 3] 	phy
e415 : da               [ 3] 	phx
e416 : a003             [ 2] 	ldy #DFVVT_DIM1
e418 : 68               [ 4] 	pla
e419 : 91d7             [ 5] 	sta (df_tmpptra),y
e41b : c8               [ 2] 	iny
e41c : 68               [ 4] 	pla
e41d : 91d7             [ 5] 	sta (df_tmpptra),y	
e41f : 28               [ 4] 	plp
e420 : 08               [ 3] 	php
e421 : b02f             [ 3] 	bcs df_rt_dim_set_type
e423 :                       df_rt_dim_alloc
                             	; ok we have up to 2 dimensions
                             	; mult dim 1 and 2 if dim 2 <> 0
e423 : a003             [ 2] 	ldy #DFVVT_DIM1
e425 : b1d7             [ 5] 	lda (df_tmpptra),y
e427 : 8579             [ 3] 	sta num_a
e429 : 647a             [ 3] 	stz num_a+1
e42b : c8               [ 2] 	iny
e42c : b1d7             [ 5] 	lda (df_tmpptra),y
e42e : d002             [ 3] 	bne df_rt_dim2_nz
e430 : a901             [ 2] 	lda #1
e432 :                       df_rt_dim2_nz
e432 : 857d             [ 3] 	sta num_b
e434 : 647e             [ 3] 	stz num_b+1
e436 : 2037cc           [ 6] 	jsr int_fast_mult
                             	; check the type if int then mult2
e439 : b2d7             [ 5] 	lda (df_tmpptra)
e43b : 2901             [ 2] 	and #DFVVT_INT
e43d : f004             [ 3] 	beq df_rt_dim2_mul2
e43f : 0679             [ 5] 	asl num_a
e441 : 267a             [ 5] 	rol num_a+1
e443 :                       df_rt_dim2_mul2	
                             	; finally, we have a size of array
e443 : a679             [ 3] 	ldx num_a
e445 : a57a             [ 3] 	lda num_a+1
                             
                             	; get a block of that size from heap
e447 : 2018f3           [ 6] 	jsr df_st_malloc
                             	; save pointer to block in var
e44a : a002             [ 2] 	ldy #DFVVT_HI
e44c : 91d7             [ 5] 	sta (df_tmpptra),y
e44e : 8a               [ 2] 	txa
e44f : 88               [ 2] 	dey
e450 : 91d7             [ 5] 	sta (df_tmpptra),y
                             	; finally, update the type to indicate array
e452 :                       df_rt_dim_set_type
e452 : b2d7             [ 5] 	lda (df_tmpptra)
AS65 Assembler for R6502 [1.42].                                     Page  145
---------------------------------- bank1.s -----------------------------------

e454 : 0980             [ 2] 	ora #DFVVT_PTR
e456 : 92d7             [ 5] 	sta (df_tmpptra)
                             	; don't increment byte again - go check for more
e458 : 8086             [ 4] 	bra df_rt_dim_loop	
e45a :                       df_rt_dim_next_byte
e45a : e6be             [ 5] 	inc df_exeoff
e45c : 8080             [ 4] 	bra df_rt_dim
e45e :                       df_rt_dim_done
                             ;	clc
e45e : 28               [ 4] 	plp
e45f : 60               [ 6] 	rts
e460 :                       df_rt_dim_err
                             	SWBRK DFERR_DIM
                             
                             
e462 :                       df_rt_cls
                             	; set cursror position to top left first
e462 : a200             [ 2] 	ldx #0
e464 : a000             [ 2] 	ldy #0
e466 : 20a6c3           [ 6] 	jsr _gr_set_cur
e469 : 4ccec2           [ 3] 	jmp _gr_cls
                             ;	clc
                             ;	rts
                             	
e46c :                       df_rt_plot
                             	; evaluate the expression
e46c : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e46f : da               [ 3] 	phx
                             	; jump over comma
e470 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e472 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; save lo byte
e475 : da               [ 3] 	phx
                             	; jump over comma
e476 : e6be             [ 5] 	inc df_exeoff
                             	; evaluate the expression
e478 : 206ad9           [ 6] 	jsr df_rt_neval
                             	; check the type on the stack
                             	_df_ost_peekType
                             
                             	; if >=0x80 then a pointer / string
e480 : 2904             [ 2] 	and #DFST_STR
e482 : d014             [ 3] 	bne df_rt_plotstr
                             	; else it is int
e484 : 20fbf2           [ 6] 	jsr df_ost_popInt
                             	; put low byte of pop result in a
e487 : 8a               [ 2] 	txa
e488 : a616             [ 3] 	ldx vdp_base+vdp_gmode	; Check if in hires mode
e48a : e010             [ 2] 	cpx #0x10
e48c : b005             [ 3] 	bcs df_rt_hchar
                             	; get y and x in that order
e48e : 7a               [ 4] 	ply
e48f : fa               [ 4] 	plx
e490 : 4c46c3           [ 3] 	jmp _gr_plot
e493 :                       df_rt_hchar
                             	; get y and x in that order
e493 : 7a               [ 4] 	ply
e494 : fa               [ 4] 	plx
e495 : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
AS65 Assembler for R6502 [1.42].                                     Page  146
---------------------------------- bank1.s -----------------------------------

e498 :                       df_rt_plotstr
                             	; pop string pointer
e498 : 20f7f2           [ 6] 	jsr df_ost_popPtr
                             	; save pointer to tmpa
e49b : 86d7             [ 3] 	stx df_tmpptra
e49d : 85d8             [ 3] 	sta df_tmpptra+1
e49f : a416             [ 3] 	ldy vdp_base+vdp_gmode	; Check if in hires mode
e4a1 : c010             [ 2] 	cpy #0x10
e4a3 : b017             [ 3] 	bcs df_rt_hplotstr
                             	; get y and x in that order
e4a5 : 7a               [ 4] 	ply
e4a6 : fa               [ 4] 	plx
                             	; set cursror position
e4a7 :                       df_rt_plotstrch
e4a7 : b2d7             [ 5] 	lda (df_tmpptra)
e4a9 : f010             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e4b1 : da               [ 3] 	phx
e4b2 : 5a               [ 3] 	phy
e4b3 : 2046c3           [ 6] 	jsr _gr_plot
e4b6 : 7a               [ 4] 	ply
e4b7 : fa               [ 4] 	plx
e4b8 : e8               [ 2] 	inx
e4b9 : 80ec             [ 3] 	bra df_rt_plotstrch
e4bb :                       df_rt_plotstrdone
e4bb : 60               [ 6] 	rts
e4bc :                       df_rt_hplotstr
                             	; get y and x in that order
e4bc : 7a               [ 4] 	ply
e4bd : fa               [ 4] 	plx
                             	; set cursror position
e4be :                       df_rt_hplotstrch
e4be : b2d7             [ 5] 	lda (df_tmpptra)
e4c0 : f0f9             [ 3] 	beq df_rt_plotstrdone
                             	_incZPWord df_tmpptra
                             
e4c8 : da               [ 3] 	phx
e4c9 : 5a               [ 3] 	phy
e4ca : 205ec3           [ 6] 	jsr _gr_hchar
e4cd : 7a               [ 4] 	ply
e4ce : 68               [ 4] 	pla
e4cf : 18               [ 2] 	clc			; Assume pitch 8 for now
e4d0 : 6908             [ 2] 	adc #8
e4d2 : aa               [ 2] 	tax
e4d3 : 80e9             [ 3] 	bra df_rt_hplotstrch
                             
e4d5 :                       df_rt_cursor
                             	; evaluate the expression
e4d5 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; write low byte of vdp_curoff
                             	; by writing a zero then cursor on else not
e4d8 : 8606             [ 3] 	stx vdp_curoff
                             ;	clc
e4da : 60               [ 6] 	rts
                             		
e4db :                       df_rt_himem
                             	; evaluate the expression
e4db : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; write X,A to df_memtop
e4de : 8eb40c           [ 4] 	stx df_memtop
e4e1 : 8db50c           [ 4] 	sta df_memtop+1
AS65 Assembler for R6502 [1.42].                                     Page  147
---------------------------------- bank1.s -----------------------------------

                             	; now clear everything down
e4e4 : 4c3df3           [ 3] 	jmp df_clear
e4e7 : 60               [ 6] 	rts
                             
e4e8 :                       df_rt_mode
e4e8 :                       df_rt_hires
                             	; evaluate the expression
e4e8 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; only interested in low byte
e4eb : 8a               [ 2] 	txa
e4ec : 4cc6c1           [ 3] 	jmp _gr_init_screen
                             	
e4ef :                       df_rt_pixmode
                             	; evaluate the expression X = mode
e4ef : 2064d9           [ 6] 	jsr df_rt_getnval
e4f2 : 8622             [ 3] 	stx gr_scrngeom+gr_pixmode
                             ;	clc
e4f4 : 60               [ 6] 	rts
                             
e4f5 :                       df_rt_pixmask
                             	; evaluate the expression X = mask
e4f5 : 2064d9           [ 6] 	jsr df_rt_getnval
e4f8 : 8623             [ 3] 	stx gr_scrngeom+gr_pixmask
                             ;	clc
e4fa : 60               [ 6] 	rts
                             
e4fb :                       df_rt_pixcol
                             	; evaluate the expression X = col
e4fb : 2064d9           [ 6] 	jsr df_rt_getnval
e4fe : 8624             [ 3] 	stx gr_scrngeom+gr_pixcol
                             ;	clc
e500 : 60               [ 6] 	rts
                             
e501 :                       df_rt_put
                             	; evaluate the byte to put
e501 : 2064d9           [ 6] 	jsr df_rt_getnval
e504 : 8a               [ 2] 	txa
e505 : 20c0c5           [ 6] 	jsr io_put_ch
e508 : 60               [ 6] 	rts
                             
e509 :                       df_rt_point
e509 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
e50c : a6d7             [ 3] 	ldx df_tmpptra
e50e : a4d9             [ 3] 	ldy df_tmpptrb
e510 : 4c76c3           [ 3] 	jmp _gr_point
                             ;	clc
                             ;	rts
                             
e513 :                       df_rt_hplot
e513 : 2030dc           [ 6] 	jsr df_rt_parm_3ints
e516 : a6d7             [ 3] 	ldx df_tmpptra				; load x
e518 : a4d9             [ 3] 	ldy	df_tmpptrb				; load y
e51a : a5db             [ 3] 	lda df_tmpptrc				; load char
e51c : 4c5ec3           [ 3] 	jmp _gr_hchar
                             
e51f :                       df_rt_circle
e51f : 2030dc           [ 6] 	jsr df_rt_parm_3ints
e522 : a5d7             [ 3] 	lda df_tmpptra				; load x0
e524 : 8579             [ 3] 	sta num_a
e526 : a5d9             [ 3] 	lda	df_tmpptrb				; load y0
e528 : 857a             [ 3] 	sta num_a+1
e52a : a5db             [ 3] 	lda df_tmpptrc				; load r
AS65 Assembler for R6502 [1.42].                                     Page  148
---------------------------------- bank1.s -----------------------------------

e52c : 857b             [ 3] 	sta num_a+2
e52e : 4c2ec3           [ 3] 	jmp _gr_circle
                             
e531 :                       df_rt_line
e531 : 2047dc           [ 6] 	jsr df_rt_parm_4ints
e534 : a5d7             [ 3] 	lda df_tmpptra				; load x0
e536 : 8579             [ 3] 	sta num_a
e538 : a5d9             [ 3] 	lda	df_tmpptrb				; load y0
e53a : 857a             [ 3] 	sta num_a+1
e53c : a5db             [ 3] 	lda df_tmpptrc				; load x1
e53e : 857b             [ 3] 	sta num_a+2
e540 : a5dd             [ 3] 	lda df_tmpptrd				; load y1
e542 : 857c             [ 3] 	sta num_a+3
e544 : 4cfec2           [ 3] 	jmp _gr_line
                             
e547 :                       df_rt_box
e547 : 2047dc           [ 6] 	jsr df_rt_parm_4ints
e54a : a5d7             [ 3] 	lda df_tmpptra				; load x0
e54c : 8579             [ 3] 	sta num_a
e54e : a5d9             [ 3] 	lda	df_tmpptrb				; load y0
e550 : 857a             [ 3] 	sta num_a+1
e552 : a5db             [ 3] 	lda df_tmpptrc				; load x1
e554 : 857b             [ 3] 	sta num_a+2
e556 : a5dd             [ 3] 	lda df_tmpptrd				; load y1
e558 : 857c             [ 3] 	sta num_a+3
e55a : 4c16c3           [ 3] 	jmp _gr_box
                             
e55d :                       df_rt_shape
e55d : 2030dc           [ 6] 	jsr df_rt_parm_3ints
e560 : a6d7             [ 3] 	ldx df_tmpptra				; load x
e562 : da               [ 3] 	phx
e563 : a4d9             [ 3] 	ldy	df_tmpptrb				; load y
e565 : 5a               [ 3] 	phy
e566 : a6db             [ 3] 	ldx df_tmpptrc				; load coords[]
e568 : a5dc             [ 3] 	lda df_tmpptrc+1			; load coords[]
e56a : 20b5f2           [ 6] 	jsr df_rst_pushWord
e56d :                       df_rt_shapeLoop
e56d : 20c3f2           [ 6] 	jsr df_rst_popWord			; Get pointer
e570 : 86d7             [ 3] 	stx df_tmpptra
e572 : 85d8             [ 3] 	sta df_tmpptra+1
e574 : b2d7             [ 5] 	lda (df_tmpptra)			; Get X coord as int
e576 : 8533             [ 3] 	sta tmp_v1
e578 : a001             [ 2] 	ldy #1
e57a : b1d7             [ 5] 	lda (df_tmpptra),y			; Get X hi byte
e57c : 8534             [ 3] 	sta tmp_v1+1
e57e : c8               [ 2] 	iny
e57f : b1d7             [ 5] 	lda (df_tmpptra),y			; Get Y coord as int
e581 : 8537             [ 3] 	sta tmp_b
e583 : c8               [ 2] 	iny
e584 : b1d7             [ 5] 	lda (df_tmpptra),y			; Get Y hi byte
e586 : 8538             [ 3] 	sta tmp_b+1
e588 : a533             [ 3] 	lda tmp_v1					; If X and Y low are zero then en
e58a : d007             [ 3] 	bne df_rt_shapeCalc
e58c : a537             [ 3] 	lda tmp_b
e58e : d003             [ 3] 	bne df_rt_shapeCalc
                             	; Got here then must be finished
e590 : 68               [ 4] 	pla							; Pop bytes off 6502 stack
e591 : 68               [ 4] 	pla
e592 : 60               [ 6] 	rts
e593 :                       df_rt_shapeCalc
e593 : 18               [ 2] 	clc
e594 : a5d7             [ 3] 	lda df_tmpptra				; Increment coord pointer 
AS65 Assembler for R6502 [1.42].                                     Page  149
---------------------------------- bank1.s -----------------------------------

e596 : 6904             [ 2] 	adc #4						; 2 ints is 4 bytes per coord
e598 : aa               [ 2] 	tax
e599 : a5d8             [ 3] 	lda df_tmpptra+1
e59b : 6900             [ 2] 	adc #0
e59d : 20b5f2           [ 6] 	jsr df_rst_pushWord			; Put pointer on runtime s
                             	; previous cursor is starting position
                             	; plus delta is new position
e5a0 : 68               [ 4] 	pla							; get y0 off stack
e5a1 : 18               [ 2] 	clc
e5a2 : 857a             [ 3] 	sta num_a+1
e5a4 : 6537             [ 3] 	adc tmp_b
e5a6 : 857c             [ 3] 	sta num_a+3					; y1 = y0+dy
e5a8 : aa               [ 2] 	tax							; save y1 in X reg
e5a9 : 68               [ 4] 	pla							; get x0 off stack
e5aa : 18               [ 2] 	clc
e5ab : 8579             [ 3] 	sta num_a					; x0
e5ad : 6533             [ 3] 	adc tmp_v1
e5af : 857b             [ 3] 	sta num_a+2					; x1
e5b1 : 48               [ 3] 	pha							; save x1
e5b2 : da               [ 3] 	phx							; save y1
e5b3 : 20fec2           [ 6] 	jsr _gr_line				; line x0,y0,x1,y1
e5b6 : 80b5             [ 3] 	bra df_rt_shapeLoop			; go back to next coord
                             	
e5b8 :                       df_rt_wait
                             	; evaluate the expression
e5b8 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; put high byte in to Y (X,Y)=16 bits
e5bb : a8               [ 2] 	tay
e5bc :                       df_rt_wait_loop
                             	; check X,Y==0
e5bc : 8a               [ 2] 	txa
e5bd : d004             [ 3] 	bne df_rt_wait_countdown
e5bf : 98               [ 2] 	tya
e5c0 : d001             [ 3] 	bne df_rt_wait_countdown
                             	; Done (wait 0 returns immediately)
e5c2 : 60               [ 6] 	rts
e5c3 :                       df_rt_wait_countdown
                             	; get vdp low byte timer val in A for tick wait
e5c3 : a504             [ 3] 	lda vdp_int_cnt
e5c5 : ca               [ 2] 	dex
e5c6 : e0ff             [ 2] 	cpx #0xff
e5c8 : d001             [ 3] 	bne df_rt_wait_tick
e5ca : 88               [ 2] 	dey
e5cb :                       df_rt_wait_tick
                             	; check if a tick has occurred (i.e. val <> A)
e5cb : c504             [ 3] 	cmp vdp_int_cnt
e5cd : f0fc             [ 3] 	beq df_rt_wait_tick
e5cf : d0eb             [ 3] 	bne df_rt_wait_loop		; Always
                             	
e5d1 :                       df_rt_printat
                             	; Get x,y
e5d1 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
e5d4 : a6d7             [ 3] 	ldx df_tmpptra
e5d6 : a4d9             [ 3] 	ldy df_tmpptrb
                             	; Set the cursror here
e5d8 : 20a6c3           [ 6] 	jsr _gr_set_cur
                             	; and continue to normal print command
e5db :                       df_rt_print
e5db : a4be             [ 3] 	ldy df_exeoff
e5dd : 88               [ 2] 	dey
e5de :                       df_rt_print_ws
e5de : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  150
---------------------------------- bank1.s -----------------------------------

                             	; evaluate an expression
                             ;	cpy df_eolidx
                             ;	beq df_rt_print_done
e5df : c4b5             [ 3] 	cpy df_nxtstidx
e5e1 : f026             [ 4] 	beq df_rt_print_done
e5e3 : b1bc             [ 5] 	lda (df_currlin),y
e5e5 : c93a             [ 2] 	cmp #':'
e5e7 : f020             [ 4] 	beq df_rt_print_done
e5e9 : c920             [ 2] 	cmp #' '
e5eb : f0f1             [ 3] 	beq df_rt_print_ws
e5ed : c92c             [ 2] 	cmp #','
e5ef : f0ed             [ 3] 	beq df_rt_print_ws
                             	; save index
e5f1 : 84be             [ 3] 	sty df_exeoff
                             	
                             	; if starts with string literal then process sev
                             ;	cmp #DFTK_STRLIT
                             ;	beq df_rt_print_string
                             	; else evaluate a numeric
e5f3 : 206ad9           [ 6] 	jsr df_rt_neval
                             	; check what is on the argument stack
                             	_df_ost_peekType
                             
e5fb : 2904             [ 2] 	and #DFST_STR
e5fd : d005             [ 4] 	bne df_rt_print_gotstr
e5ff : 20ade2           [ 6] 	jsr df_rt_print_num
e602 : 80d7             [ 4] 	bra df_rt_print
e604 :                       df_rt_print_gotstr
e604 : 20b4e2           [ 6] 	jsr df_rt_print_str
e607 : 80d2             [ 4] 	bra df_rt_print
                             ;df_rt_print_string
                             ;	; point to string accumulator
                             ;	ldx df_sevalptr
                             ;	lda df_sevalptr+1
                             ;	jsr df_rt_seval
                             ;	bra df_rt_print_gotstr
e609 :                       df_rt_print_done
e609 : 84be             [ 3] 	sty df_exeoff
e60b : 60               [ 6] 	rts
                             	
e60c :                       df_rt_println
e60c : 20dbe5           [ 6] 	jsr df_rt_print
e60f : a90d             [ 2] 	lda #UTF_CR
e611 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; assign to a number variable
                             ; X,A must have lvar
e614 :                       df_rt_nassign
e614 : 48               [ 3] 	pha
e615 : da               [ 3] 	phx
                             	; now go evaluate expression in to A,X
e616 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; restore variable address to write to
e619 : 7a               [ 4] 	ply
e61a : 84d7             [ 3] 	sty df_tmpptra
e61c : 7a               [ 4] 	ply
e61d : 84d8             [ 3] 	sty df_tmpptra+1
                             	; save X,A int in contents section
e61f : a001             [ 2] 	ldy #1
e621 : 91d7             [ 5] 	sta (df_tmpptra),y
e623 : 8a               [ 2] 	txa
AS65 Assembler for R6502 [1.42].                                     Page  151
---------------------------------- bank1.s -----------------------------------

e624 : 88               [ 2] 	dey
e625 : 91d7             [ 5] 	sta (df_tmpptra),y
                             
e627 : 60               [ 6] 	rts
                             
                             ; assign to a string variable
                             ; X,A must have lvar
e628 :                       df_rt_sassign
                             	; now go evaluate expression
                             	; with the destination being X,A
e628 : 201eda           [ 6] 	jsr df_rt_sval
                             
                             	; get string pointer from top of runtime stack
e62b : 4cf3f2           [ 3] 	jmp df_ost_popStr
                             	
                             ;	clc
                             ;	rts
                             
                             ; generate lvar from a var token ready for assign
e62e :                       df_rt_generate_lvar
                             	; move past escape val
e62e : a4be             [ 3] 	ldy df_exeoff
e630 : c8               [ 2] 	iny
                             	; pointing to variable index
e631 : b1bc             [ 5] 	lda (df_currlin),y
e633 : 85d7             [ 3] 	sta df_tmpptra
e635 : c8               [ 2] 	iny
e636 : b1bc             [ 5] 	lda (df_currlin),y
e638 : 84be             [ 3] 	sty df_exeoff
e63a : 85d8             [ 3] 	sta df_tmpptra+1
                             
                             	; get the type and save
e63c : b2d7             [ 5] 	lda (df_tmpptra)
e63e : 48               [ 3] 	pha
                             
                             	; set carry flag to return pointer (lvar)
e63f : 38               [ 2] 	sec
e640 : 2004db           [ 6] 	jsr df_rt_eval_var
e643 : 20f7f2           [ 6] 	jsr df_ost_popPtr
                             	; pull the type previously saved into Y
e646 : 7a               [ 4] 	ply
                             	; move past the lvar variable index
e647 : e6be             [ 5] 	inc df_exeoff
                             ;	clc
e649 : 60               [ 6] 	rts
                             
                             ; assign
                             ; X,A,Y contain lvar pointer and type
e64a :                       df_rt_doassign
                             	; save A and put type Y in to A
e64a : 48               [ 3] 	pha
e64b : 98               [ 2] 	tya
e64c : 2904             [ 2] 	and #DFVVT_STR
                             	; if a string then string expression
e64e : f004             [ 3] 	beq df_rt_assign_num
                             	; remember to restore A
                             	; jump to string expression evaluator
e650 : 68               [ 4] 	pla
e651 : 4c28e6           [ 3] 	jmp df_rt_sassign
e654 :                       df_rt_assign_num
                             	; else jump to numeric expression evaluator
                             	; remember to restore A
AS65 Assembler for R6502 [1.42].                                     Page  152
---------------------------------- bank1.s -----------------------------------

e654 : 68               [ 4] 	pla
e655 : 4c14e6           [ 3] 	jmp df_rt_nassign
                             
                             ; general assignment execution
e658 :                       df_rt_assign
e658 : 202ee6           [ 6] 	jsr df_rt_generate_lvar
                             	; go and do the assignment
e65b : 4c4ae6           [ 3] 	jmp df_rt_doassign
                             	
                             ; comment or data token is ignored by runtime
e65e :                       df_rt_comment
e65e :                       df_rt_data
                             ;	clc
e65e : 60               [ 6] 	rts
                             
                             	
                             ; run token	
e65f :                       df_rt_run
                             ;	sec
e65f : 60               [ 6] 	rts
                             
                             ; end of line / statement indicator
                             ; CS = End, CC = not end
e660 :                       df_rt_eos
e660 : a4be             [ 3] 	ldy df_exeoff
                             ;	cpy df_eolidx
                             ;	beq df_rt_eos_true
e662 : c4b5             [ 3] 	cpy df_nxtstidx
e664 : f008             [ 3] 	beq df_rt_eos_true
e666 : b1bc             [ 5] 	lda (df_currlin),y
e668 : c93a             [ 2] 	cmp #':'
e66a : f002             [ 3] 	beq df_rt_eos_true
e66c : 18               [ 2] 	clc
e66d : 60               [ 6] 	rts
e66e :                       df_rt_eos_true
e66e : 38               [ 2] 	sec
e66f : 60               [ 6] 	rts
                             
                             ; renum startLine,newStart,increment
                             ; renumbers from the first matching line to end o
e670 :                       df_rt_renum
e670 : e6be             [ 5] 	inc df_exeoff
e672 : 2030dc           [ 6] 	jsr df_rt_parm_3ints
                             	; starting line number
e675 : a6d7             [ 3] 	ldx df_tmpptra
e677 : a5d8             [ 3] 	lda df_tmpptra+1
e679 : 207cd7           [ 6] 	jsr df_pg_find_line
e67c : 9002             [ 3] 	bcc df_rt_renum_ok
                             	SWBRK DFERR_NOLINE
                             
e680 :                       df_rt_renum_ok
                             	; save starting position pointer in ptrd
e680 : 86dd             [ 3] 	stx df_tmpptrd
e682 : 85de             [ 3] 	sta df_tmpptrd+1
e684 :                       df_rt_renum_do
                             	; if not end of program
e684 : a000             [ 2] 	ldy #0
e686 : b1dd             [ 5] 	lda (df_tmpptrd),y
                             	; then renumber this line
e688 : d001             [ 3] 	bne df_rt_renum_update
                             	; else done
e68a : 60               [ 6] 	rts
AS65 Assembler for R6502 [1.42].                                     Page  153
---------------------------------- bank1.s -----------------------------------

e68b :                       df_rt_renum_update
                             	; so set this line number to new line number
e68b : a001             [ 2] 	ldy #DFTK_LINNUM
e68d : a5d9             [ 3] 	lda df_tmpptrb
e68f : 91dd             [ 5] 	sta (df_tmpptrd),y
e691 : c8               [ 2] 	iny
e692 : a5da             [ 3] 	lda df_tmpptrb+1
e694 : 91dd             [ 5] 	sta (df_tmpptrd),y
                             	; add increment to new line
                             	_addZPWord df_tmpptrb,df_tmpptrc
                             
e6a3 :                       df_rt_renum_next
                             	; point ptrd to the next line
e6a3 : 18               [ 2] 	clc
e6a4 : a5dd             [ 3] 	lda df_tmpptrd
e6a6 : a200             [ 2] 	ldx #0
e6a8 : 61dd             [ 6] 	adc (df_tmpptrd,x)
e6aa : 85dd             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e6ae : e6de             [ 5] 	inc df_tmpptrd+1
e6b0 : 4c84e6           [ 3] 	jmp df_rt_renum_do
                             
                             
                             ; * List all procs in VNT
e6b3 :                       df_rt_listprocnames
                             	; start at the beginning of the vnt table
                             	_cpyZPWord df_vntstrt,df_tmpptra
                             
                             	; start at varcnt
e6bb : a5a7             [ 3] 	lda df_varcnt
e6bd : 85d9             [ 3] 	sta df_tmpptrb
e6bf :                       df_rt_listcheckvnt
                             	; If reached 0 then not found
e6bf : a5d9             [ 3] 	lda df_tmpptrb
e6c1 : f03a             [ 3] 	beq df_rt_listpn_done
e6c3 : a000             [ 2] 	ldy #0
e6c5 : b1d7             [ 5] 	lda (df_tmpptra),y
e6c7 : c95f             [ 2] 	cmp #'_'
e6c9 : d01b             [ 3] 	bne df_rt_listnextvnt
e6cb :                       df_rt_listprocch
e6cb : b1d7             [ 5] 	lda (df_tmpptra),y
e6cd : 20c0c5           [ 6] 	jsr io_put_ch
e6d0 : aa               [ 2] 	tax
e6d1 : f003             [ 3] 	beq df_rt_listproccr
e6d3 : c8               [ 2] 	iny
e6d4 : d0f5             [ 3] 	bne df_rt_listprocch		; Always
e6d6 :                       df_rt_listproccr
e6d6 : a90d             [ 2] 	lda #UTF_CR
e6d8 : 20c0c5           [ 6] 	jsr io_put_ch
e6db : 18               [ 2] 	clc
e6dc :                       df_rt_listprocpause
e6dc : 20bdc5           [ 6] 	jsr io_get_ch
e6df : c920             [ 2] 	cmp #' '
e6e1 : d003             [ 3] 	bne df_rt_listnextvnt
e6e3 :                       df_rt_listwait
e6e3 : 38               [ 2] 	sec
e6e4 : b0f6             [ 3] 	bcs df_rt_listprocpause
e6e6 :                       df_rt_listnextvnt
e6e6 : b1d7             [ 5] 	lda (df_tmpptra),y
e6e8 : f003             [ 3] 	beq df_rt_listgotnext
e6ea : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  154
---------------------------------- bank1.s -----------------------------------

e6eb : d0f9             [ 3] 	bne df_rt_listnextvnt		; Always
e6ed :                       df_rt_listgotnext
                             	; dec vnt #
e6ed : c6d9             [ 5] 	dec df_tmpptrb
                             	; skip past zero terminator
e6ef : c8               [ 2] 	iny
                             	; add this to vnt pointer
e6f0 : 18               [ 2] 	clc
e6f1 : 98               [ 2] 	tya
e6f2 : 65d7             [ 3] 	adc df_tmpptra
e6f4 : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e6f8 : e6d8             [ 5] 	inc df_tmpptra+1
e6fa : 4cbfe6           [ 3] 	jmp df_rt_listcheckvnt
e6fd :                       df_rt_listpn_done
e6fd : 60               [ 6] 	rts
                             
e6fe :                       df_rt_listproc
                             	; A already contains '_'
e6fe : 8d000a           [ 4] 	sta df_linbuff
e701 : a200             [ 2] 	ldx #0
e703 : a4be             [ 3] 	ldy df_exeoff
e705 :                       df_rt_listp_copy
e705 : c8               [ 2] 	iny
e706 : e8               [ 2] 	inx
e707 : b1bc             [ 5] 	lda (df_currlin),y
e709 : 9d000a           [ 5] 	sta df_linbuff,x
e70c : 20c4ce           [ 6] 	jsr df_tk_isalphanum
e70f : b0f4             [ 3] 	bcs df_rt_listp_copy
                             	; zero the line index
e711 : a200             [ 2] 	ldx #0
e713 : 86b2             [ 3] 	stx df_linoff
                             	; save runtime pos
e715 : 84be             [ 3] 	sty df_exeoff
                             	; Now try and find in VNT
e717 : 20e6cc           [ 6] 	jsr df_var_find
e71a : b036             [ 3] 	bcs df_rt_listp_notfound
                             	; Ok we have got a match in X,A find the proc
e71c : 86c4             [ 3] 	stx df_procptr
e71e : 85c5             [ 3] 	sta df_procptr+1
e720 : 2053dd           [ 6] 	jsr df_rt_findproc
                             	; Save the line pointer
e723 : 86d7             [ 3] 	stx df_tmpptra
e725 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; save statement index in to line
                             ;	sty df_lineidx
                             ;	; Check if '-' option used
                             ;	ldy df_exeoff
                             ;	lda (df_currlin),y
                             ;	cmp #'-'
                             ;	; if so, list to end of program
                             ;	beq df_rt_listprgend
                             	; Now try and find the end of this procedure
                             	; enddef or another def
                             	; A,X=Line ptr, Y=line idx
                             ;	ldx df_tmpptra
                             ;	lda df_tmpptra+1
                             ;	ldy df_lineidx
e727 :                       df_rt_listp_findend
                             	; Go to next stat
e727 : 2000dd           [ 6] 	jsr df_rt_nextstat
AS65 Assembler for R6502 [1.42].                                     Page  155
---------------------------------- bank1.s -----------------------------------

e72a : b057             [ 3] 	bcs df_rt_listprgend
                             	; save y (a,x in lineptr), A is ok to trample
e72c : 98               [ 2] 	tya
e72d : 48               [ 3] 	pha
                             	; find the command
e72e :                       df_rt_listp_findcmd
e72e : c8               [ 2] 	iny
e72f : b1c6             [ 5] 	lda (df_lineptr),y
e731 : 10fb             [ 3] 	bpl df_rt_listp_findcmd
                             	; restore y to stat beginning
e733 : 8539             [ 3] 	sta tmp_d
e735 : 68               [ 4] 	pla
e736 : a8               [ 2] 	tay
e737 : a539             [ 3] 	lda tmp_d
                             	; check A - looking for enddef or def
e739 : c987             [ 2] 	cmp #DFRT_ENDDEF
e73b : f00b             [ 3] 	beq df_rt_listp_done
e73d : c986             [ 2] 	cmp #DFRT_DEF
e73f : f007             [ 3] 	beq df_rt_listp_done
                             	; if neither then next stat from current
e741 : a6c6             [ 3] 	ldx df_lineptr
e743 : a5c7             [ 3] 	lda df_lineptr+1
e745 : 4c27e7           [ 3] 	jmp df_rt_listp_findend
e748 :                       df_rt_listp_done
                             	; Push end line on to stack
e748 : a5c7             [ 3] 	lda df_lineptr+1
e74a : 48               [ 3] 	pha
e74b : 8a               [ 2] 	txa
e74c : 48               [ 3] 	pha
e74d : a5c7             [ 3] 	lda df_lineptr+1
e74f : 4c89e7           [ 3] 	jmp df_rt_list_line
e752 :                       df_rt_listp_notfound
                             	; Fatal error if proc not found
                             	SWBRK DFERR_NOPROC
                             
                             
                             ; list token
e754 :                       df_rt_list
e754 : a900             [ 2] 	lda #0
e756 : 85df             [ 3] 	sta df_tmpptre		; Zero means in normal list mode
                             	; find non-ws
e758 : 20a6dd           [ 6] 	jsr df_rt_skip_ws
                             	; if end of statement then no line specifiers
e75b : 2060e6           [ 6] 	jsr df_rt_eos
                             	; so list whole program
e75e : b01b             [ 3] 	bcs df_rt_listprg
                             
                             	;if '_' then use procnames
e760 : c95f             [ 2] 	cmp #'_'
e762 : d003             [ 3] 	bne df_rt_list_all
e764 : 4cfee6           [ 3] 	jmp df_rt_listproc
e767 :                       df_rt_list_all
                             	;if '*' then display all procnames
e767 : c92a             [ 2] 	cmp #'*'
e769 : d003             [ 3] 	bne df_rt_list_linno
e76b : 4cb3e6           [ 3] 	jmp df_rt_listprocnames
e76e :                       df_rt_list_linno
                             	; else get 1st parameter
e76e : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; find the starting line number in X,A
e771 : 207cd7           [ 6] 	jsr df_pg_find_line
                             	; save start in ptra
AS65 Assembler for R6502 [1.42].                                     Page  156
---------------------------------- bank1.s -----------------------------------

e774 : 86d7             [ 3] 	stx df_tmpptra
e776 : 85d8             [ 3] 	sta df_tmpptra+1
e778 : 4c83e7           [ 3] 	jmp df_rt_listprgend
                             	; NO ability to choose and ending line number!
                             
                             ; Common listing routine used by LIST and SAVE
                             ; tmpe = 0 means in LIST mode else SAVE mode
                             ; can stop the listing in LIST mode with CTRL-C
e77b :                       df_rt_listprg
                             	; program start and end as for pointer value
                             	_cpyZPWord df_prgstrt, df_tmpptra
                             
e783 :                       df_rt_listprgend
e783 : a59e             [ 3] 	lda df_prgend+1
e785 : 48               [ 3] 	pha						; df_prgend hi at 102,x
e786 : a59d             [ 3] 	lda df_prgend
e788 : 48               [ 3] 	pha						; df_prgend lo at 101,x
e789 :                       df_rt_list_line
                             	; if line length = 0 then end of program
e789 : a000             [ 2] 	ldy #0
e78b : b1d7             [ 5] 	lda (df_tmpptra),y
e78d : f039             [ 3] 	beq df_rt_list_line_fin
                             	; if in list mode and CTRL-C then also stop
e78f : a5df             [ 3] 	lda df_tmpptre
e791 : d010             [ 3] 	bne df_rt_list_line_cont
                             	; check for break, asynch get
e793 : 18               [ 2] 	clc
e794 :                       df_rt_list_synckey
e794 : a5df             [ 3] 	lda df_tmpptre					; Ignore keys on save mode
e796 : d00b             [ 3] 	bne df_rt_list_line_cont
e798 :                       df_rt_list_pause
e798 : 20bdc5           [ 6] 	jsr io_get_ch
e79b : c920             [ 2] 	cmp #' '						; Space = PAUSE
e79d : f0f9             [ 3] 	beq df_rt_list_pause			; C=1 for synchronouse ke
e79f : c903             [ 2] 	cmp #UTF_ETX					; CTRL-C?
e7a1 : f025             [ 3] 	beq df_rt_list_line_fin
e7a3 :                       df_rt_list_line_cont
e7a3 : a000             [ 2] 	ldy #0
e7a5 : 84b2             [ 3] 	sty df_linoff
e7a7 : 20cbe7           [ 6] 	jsr df_rt_list_all_line
e7aa :                       df_rt_list_next_line
                             	; new line
e7aa : 20c5c8           [ 6] 	jsr utilPrintCRLF
                             	; increment pointer to next line
e7ad : 18               [ 2] 	clc
e7ae : a5d7             [ 3] 	lda df_tmpptra
e7b0 : a000             [ 2] 	ldy #0
e7b2 : 71d7             [ 5] 	adc (df_tmpptra),y
e7b4 : 85d7             [ 3] 	sta df_tmpptra
                             	_bcc 2
                             
e7b8 : e6d8             [ 5] 	inc df_tmpptra+1
                             	; if pointer > end then listing is done
e7ba : ba               [ 2] 	tsx
e7bb : 38               [ 2] 	sec
e7bc : bd0101           [ 4] 	lda 0x101,x						; get prend lo from stack frame
e7bf : e5d7             [ 3] 	sbc df_tmpptra
e7c1 : bd0201           [ 4] 	lda 0x102,x						; get prend hi from stack frame
e7c4 : e5d8             [ 3] 	sbc df_tmpptra+1
e7c6 : b0c1             [ 3] 	bcs df_rt_list_line
e7c8 :                       df_rt_list_line_fin
                             	; if got here then reached tmpb
AS65 Assembler for R6502 [1.42].                                     Page  157
---------------------------------- bank1.s -----------------------------------

e7c8 : 68               [ 4] 	pla
e7c9 : 68               [ 4] 	pla
e7ca :                       df_rt_list_line_only_fin
e7ca : 60               [ 6] 	rts
                             
                             ;Using df_tmpptra as line pointer
                             ;Print decode an entire line
e7cb :                       df_rt_list_all_line				; Start here to include nu
e7cb : 2005e9           [ 6] 	jsr df_rt_list_linnum
e7ce :                       df_rt_list_line_only			; Start here for just the 
e7ce : a003             [ 2] 	ldy #3
e7d0 : b1d7             [ 5] 	lda (df_tmpptra),y
e7d2 : 85c8             [ 3] 	sta df_lineidx
e7d4 : c8               [ 2] 	iny
e7d5 : 84b2             [ 3] 	sty df_linoff
e7d7 :                       df_rt_list_decode
e7d7 : a4b2             [ 3] 	ldy df_linoff
e7d9 : b1d7             [ 5] 	lda (df_tmpptra),y
e7db : 3010             [ 3] 	bmi df_rt_list_token
e7dd : c920             [ 2] 	cmp #DFTK_ESCVAL
e7df : 9006             [ 3] 	bcc df_rt_list_escval
                             	; normal char just print it
e7e1 : 20c0c5           [ 6] 	jsr io_put_ch
e7e4 : 4cf0e7           [ 3] 	jmp df_rt_list_nexttok
e7e7 :                       df_rt_list_escval
                             	; A and Y need to be valid on entry
e7e7 : 2009e8           [ 6] 	jsr df_rt_list_decode_esc
e7ea : 4cf0e7           [ 3] 	jmp df_rt_list_nexttok
e7ed :                       df_rt_list_token
e7ed : 2016e9           [ 6] 	jsr df_rt_list_decode_token
e7f0 :                       df_rt_list_nexttok
                             	; advance the line offset
e7f0 : e6b2             [ 5] 	inc df_linoff
e7f2 : a5b2             [ 3] 	lda df_linoff
                             	; check if at end of line
e7f4 : a200             [ 2] 	ldx #0
e7f6 : c1d7             [ 6] 	cmp (df_tmpptra,x)
e7f8 : f0d0             [ 3] 	beq df_rt_list_line_only_fin
                             	; check if at end of statement
e7fa : c5c8             [ 3] 	cmp df_lineidx
e7fc : d0d9             [ 3] 	bne df_rt_list_decode
e7fe : a8               [ 2] 	tay
                             	; save the next statement offset
e7ff : b1d7             [ 5] 	lda (df_tmpptra),y
e801 : 85c8             [ 3] 	sta df_lineidx
e803 : c8               [ 2] 	iny
e804 : 84b2             [ 3] 	sty df_linoff
e806 : 4cd7e7           [ 3] 	jmp df_rt_list_decode
                             
                             
                             ; decode escape sequences
                             ; Input: A contains the esc val and Y is char lin
e809 :                       df_rt_list_decode_esc
                             	; jump over esc byte
e809 : c8               [ 2] 	iny
e80a : 84b2             [ 3] 	sty df_linoff
e80c : 48               [ 3] 	pha
                             	; get the next two bytes in case needed
e80d : b1d7             [ 5] 	lda (df_tmpptra),y
e80f : 85d9             [ 3] 	sta df_tmpptrb
e811 : c8               [ 2] 	iny
e812 : b1d7             [ 5] 	lda (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  158
---------------------------------- bank1.s -----------------------------------

e814 : 85da             [ 3] 	sta df_tmpptrb+1
e816 : 88               [ 2] 	dey				; Y is on byte after esc byte
e817 : 68               [ 4] 	pla
                             	; x2 to get jmp offset
e818 : 0a               [ 2] 	asl a
e819 : aa               [ 2] 	tax
e81a : bdcede           [ 4] 	lda df_rt_escjmp,x
e81d : 85db             [ 3] 	sta df_tmpptrc
e81f : bdcfde           [ 4] 	lda df_rt_escjmp+1,x
e822 : 85dc             [ 3] 	sta df_tmpptrc+1
                             	; now jump to decoder
e824 : 6cdb00           [ 6] 	jmp (df_tmpptrc)
                             
                             ; reserved
e827 :                       df_rt_lst_reserved
e827 : 60               [ 6] 	rts
                             
                             ; decode a byte char
e828 :                       df_rt_lst_chr
e828 : a927             [ 2] 	lda #0x27			; Single quote
e82a : 20c0c5           [ 6] 	jsr io_put_ch
e82d : a5d9             [ 3] 	lda df_tmpptrb
e82f : 20c0c5           [ 6] 	jsr io_put_ch
e832 : a927             [ 2] 	lda #0x27			; Single quote
e834 : 20c0c5           [ 6] 	jsr io_put_ch
e837 : c8               [ 2] 	iny
e838 : 84b2             [ 3] 	sty df_linoff
e83a : 60               [ 6] 	rts
                             
                             ; Output 0x for hex chars
e83b :                       df_rt_lst_hex_pre
e83b : a930             [ 2] 	lda #'0'
e83d : 20c0c5           [ 6] 	jsr io_put_ch
e840 : a978             [ 2] 	lda #'x'
e842 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             
                             ; Decode a byte hex
e845 :                       df_rt_lst_bythex
e845 : 203be8           [ 6] 	jsr df_rt_lst_hex_pre
e848 :                       df_rt_lst_lo_hex
e848 : a5d9             [ 3] 	lda df_tmpptrb
e84a : 20f2c8           [ 6] 	jsr str_a_to_x
e84d : 20c0c5           [ 6] 	jsr io_put_ch
e850 : 8a               [ 2] 	txa
e851 : 20c0c5           [ 6] 	jsr io_put_ch
e854 :                       df_rt_lst_const_done
e854 : c8               [ 2] 	iny
e855 : 84b2             [ 3] 	sty df_linoff
e857 : 60               [ 6] 	rts
                             
                             ; Decode an int hex
e858 :                       df_rt_lst_inthex
e858 : 203be8           [ 6] 	jsr df_rt_lst_hex_pre
e85b : a5da             [ 3] 	lda df_tmpptrb+1
e85d : 20f2c8           [ 6] 	jsr str_a_to_x
e860 : 20c0c5           [ 6] 	jsr io_put_ch
e863 : 8a               [ 2] 	txa
e864 : 20c0c5           [ 6] 	jsr io_put_ch
e867 : 4c48e8           [ 3] 	jmp df_rt_lst_lo_hex
                             
                             ; Decode a byte binary
AS65 Assembler for R6502 [1.42].                                     Page  159
---------------------------------- bank1.s -----------------------------------

e86a :                       df_rt_lst_bytbin
e86a : a5d9             [ 3] 	lda df_tmpptrb
e86c : 85da             [ 3] 	sta df_tmpptrb+1
e86e : a208             [ 2] 	ldx #8
e870 : d002             [ 3] 	bne df_rt_lst_bin
                             
                             ; Decode a int binary
e872 :                       df_rt_lst_intbin
e872 : a210             [ 2] 	ldx #16
                             	; FALL THROUGH
                             ; Main 01 decoding of binary
e874 :                       df_rt_lst_bin
e874 : a930             [ 2] 	lda #'0'
e876 : 20c0c5           [ 6] 	jsr io_put_ch
e879 : a962             [ 2] 	lda #'b'
e87b : 20c0c5           [ 6] 	jsr io_put_ch
e87e :                       df_rt_lst_bit
e87e : a930             [ 2] 	lda #'0'
e880 : 06d9             [ 5] 	asl df_tmpptrb
e882 : 26da             [ 5] 	rol df_tmpptrb+1
e884 : 6900             [ 2] 	adc #0				; If C=1 then '0' becomes '1'
e886 :                       df_rt_lst_bit_skip0
e886 : 20c0c5           [ 6] 	jsr io_put_ch
e889 : ca               [ 2] 	dex
e88a : d0f2             [ 3] 	bne df_rt_lst_bit
e88c : f0c6             [ 3] 	beq df_rt_lst_const_done
                             
                             ; Decode a decimal integer
e88e :                       df_rt_lst_intdec
e88e : a6d9             [ 3] 	ldx df_tmpptrb
e890 : a5da             [ 3] 	lda df_tmpptrb+1
e892 : c8               [ 2] 	iny
e893 : 84b2             [ 3] 	sty df_linoff
e895 : 18               [ 2] 	clc
e896 : 4c7ccb           [ 3] 	jmp print_a_to_d
                             
                             
                             ; decode a variable or procedure
                             ; Slot address to decode in ptrb
e899 :                       df_rt_lst_var
e899 :                       df_rt_lst_proc
                             	; jump over the address bytes
e899 : c8               [ 2] 	iny
e89a : 84b2             [ 3] 	sty df_linoff
                             
                             	; ptrc starts at VNT start
                             	_cpyZPWord df_vntstrt,df_tmpptrc
                             
                             
                             	; ptrd starts at end of VVT
                             	_cpyZPWord df_vvtend,df_tmpptrd
                             
e8ac : a000             [ 2] 	ldy #0
e8ae :                       df_rt_list_findvvt
                             	; Check have we reached target addr in vvt?
e8ae : a5dd             [ 3] 	lda df_tmpptrd
e8b0 : c5d9             [ 3] 	cmp df_tmpptrb
e8b2 : d006             [ 3] 	bne df_rt_list_vvtend
e8b4 : a5de             [ 3] 	lda df_tmpptrd+1
e8b6 : c5da             [ 3] 	cmp df_tmpptrb+1
e8b8 : f021             [ 3] 	beq df_rt_list_gotvvt
e8ba :                       df_rt_list_vvtend
AS65 Assembler for R6502 [1.42].                                     Page  160
---------------------------------- bank1.s -----------------------------------

e8ba : b1db             [ 5] 	lda (df_tmpptrc),y
e8bc : f009             [ 3] 	beq df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
e8c4 : 4cbae8           [ 3] 	jmp df_rt_list_vvtend
e8c7 :                       df_rt_list_gotvvtend
                             	_incZPWord df_tmpptrc
                             
                             	; move target slot address towards top of mem
e8cd : 18               [ 2] 	clc
e8ce : a5dd             [ 3] 	lda df_tmpptrd
e8d0 : 6908             [ 2] 	adc #DFVVT_SZ
e8d2 : 85dd             [ 3] 	sta df_tmpptrd
                             	_bcc 2
                             
e8d6 : e6de             [ 5] 	inc df_tmpptrd+1
                             	; go back and check again
e8d8 : 4caee8           [ 3] 	jmp df_rt_list_findvvt
e8db :                       df_rt_list_gotvvt
e8db : b1db             [ 5] 	lda (df_tmpptrc),y
e8dd : f025             [ 4] 	beq df_rt_list_donvvt
e8df : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrc
                             
e8e8 : 4cdbe8           [ 3] 	jmp df_rt_list_gotvvt
                             
e8eb :                       df_rt_lst_strlit
e8eb : a922             [ 2] 	lda #0x22
e8ed : 20c0c5           [ 6] 	jsr io_put_ch
e8f0 : a4b2             [ 3] 	ldy df_linoff
e8f2 :                       df_rt_lst_strlitch
e8f2 : b1d7             [ 5] 	lda (df_tmpptra),y
e8f4 : f007             [ 3] 	beq df_rt_lst_strlitdon
e8f6 : 20c0c5           [ 6] 	jsr io_put_ch
e8f9 : c8               [ 2] 	iny
e8fa : 4cf2e8           [ 3] 	jmp df_rt_lst_strlitch
e8fd :                       df_rt_lst_strlitdon
e8fd : a922             [ 2] 	lda #0x22
e8ff : 20c0c5           [ 6] 	jsr io_put_ch
e902 : 84b2             [ 3] 	sty df_linoff
e904 :                       df_rt_list_donvvt
e904 : 60               [ 6] 	rts
                             
e905 :                       df_rt_list_linnum
e905 : a001             [ 2] 	ldy #1
e907 : b1d7             [ 5] 	lda (df_tmpptra),y
e909 : aa               [ 2] 	tax
e90a : c8               [ 2] 	iny
e90b : b1d7             [ 5] 	lda (df_tmpptra),y
e90d : 18               [ 2] 	clc
e90e : 207ccb           [ 6] 	jsr print_a_to_d
e911 : a920             [ 2] 	lda #0x20			; Always add a space after line num
e913 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             ; decode a token value with MSB set
e916 :                       df_rt_list_decode_token
                             	; if not assembler then normal listing
e916 : c997             [ 2] 	cmp #DFRT_ASM
e918 : d003             [ 3] 	bne df_rt_list_decode_token_normal
e91a : 4c54e9           [ 3] 	jmp df_rt_asm_decode_token
e91d :                       df_rt_list_decode_token_normal
e91d : 297f             [ 2] 	and #0x7f
AS65 Assembler for R6502 [1.42].                                     Page  161
---------------------------------- bank1.s -----------------------------------

                             	; token 0 and 1 don't get decoded they are impli
e91f : c902             [ 2] 	cmp #2
e921 : b001             [ 3] 	bcs df_rt_list_do_decode_tkn
e923 : 60               [ 6] 	rts
e924 :                       df_rt_list_do_decode_tkn
e924 : aa               [ 2] 	tax
e925 : a972             [ 2] 	lda #lo(df_tokensyms)
e927 : 85d9             [ 3] 	sta df_tmpptrb
e929 : a9d2             [ 2] 	lda #hi(df_tokensyms)
e92b : 85da             [ 3] 	sta df_tmpptrb+1
e92d :                       df_rt_list_find_sym
e92d : 8a               [ 2] 	txa
e92e : f012             [ 3] 	beq df_rt_list_got_sym
e930 : a000             [ 2] 	ldy #0
e932 :                       df_rt_list_next_ch
e932 : b1d9             [ 5] 	lda (df_tmpptrb),y
e934 : 48               [ 3] 	pha
                             	_incZPWord df_tmpptrb
                             
e93b : 68               [ 4] 	pla
e93c : 10f4             [ 3] 	bpl df_rt_list_next_ch
e93e :                       df_rt_list_got_last_sym
                             	; ok got to the last ch
                             	; advance to next sym
e93e : ca               [ 2] 	dex
e93f : 4c2de9           [ 3] 	jmp df_rt_list_find_sym
e942 :                       df_rt_list_got_sym
e942 : a1d9             [ 6] 	lda (df_tmpptrb,x)		; Relies on X=0 from branch
e944 : 08               [ 3] 	php
e945 : 297f             [ 2] 	and #0x7f
e947 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e950 : 28               [ 4] 	plp
e951 : 10ef             [ 3] 	bpl df_rt_list_got_sym
e953 : 60               [ 6] 	rts
                             
                             ;** Decode assembler token in A **
e954 :                       df_rt_asm_decode_token
e954 : e6b2             [ 5] 	inc df_linoff		; Point to token after asm token
e956 : a4b2             [ 3] 	ldy df_linoff
e958 : b1d7             [ 5] 	lda (df_tmpptra),y	;If token N=1 then keyword
e95a : 300a             [ 3] 	bmi df_rt_asm_decode_token_keyword
e95c : a92e             [ 2] 	lda #'.'			;Put the '.' before escape processing
e95e : 20c0c5           [ 6] 	jsr io_put_ch
e961 : b1d7             [ 5] 	lda (df_tmpptra),y	;Get asm token back
e963 : 4c09e8           [ 3] 	jmp df_rt_list_decode_esc
e966 :                       df_rt_asm_decode_token_keyword
e966 : 297f             [ 2] 	and #0x7f			; Mask off MSB
e968 : aa               [ 2] 	tax					;Put it in to X as the counter
                             	; Point to asm symbol table
e969 : a92b             [ 2] 	lda #lo(df_asm_tokensyms)
e96b : 85d9             [ 3] 	sta df_tmpptrb
e96d : a9f9             [ 2] 	lda #hi(df_asm_tokensyms)
e96f : 85da             [ 3] 	sta df_tmpptrb+1
e971 :                       df_rt_list_find_asm_sym
e971 : 8a               [ 2] 	txa
e972 : f01b             [ 3] 	beq df_rt_list_got_asm_sym
e974 : a000             [ 2] 	ldy #0
e976 :                       df_rt_list_next_asm_ch
                             	_incZPWord df_tmpptrb
                             
AS65 Assembler for R6502 [1.42].                                     Page  162
---------------------------------- bank1.s -----------------------------------

e97c : b1d9             [ 5] 	lda (df_tmpptrb),y
e97e : c920             [ 2] 	cmp #' '			; Skip all chars >=' '
e980 : b0f4             [ 3] 	bcs df_rt_list_next_asm_ch
e982 : 38               [ 2] 	sec					; Skip offset and mode bytes
e983 : 65d9             [ 3] 	adc df_tmpptrb
e985 : 85d9             [ 3] 	sta df_tmpptrb
                             	_bcc 2
                             
e989 : e6da             [ 5] 	inc df_tmpptrb+1
e98b : ca               [ 2] 	dex					; One less symbol to skip over
e98c : 4c71e9           [ 3] 	jmp df_rt_list_find_asm_sym
e98f :                       df_rt_list_got_asm_sym
e98f : a1d9             [ 6] 	lda (df_tmpptrb,x)	; Relies on X=0 from branch
e991 : c920             [ 2] 	cmp #' '
e993 : 900c             [ 3] 	bcc df_rt_asm_decode_token_done
e995 : 20c0c5           [ 6] 	jsr io_put_ch
                             	_incZPWord df_tmpptrb
                             
e99e : 4c8fe9           [ 3] 	jmp df_rt_list_got_asm_sym
e9a1 :                       df_rt_asm_decode_token_done
e9a1 : 60               [ 6] 	rts
                             
                             
e9a2 :                       df_rt_doke
e9a2 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
e9a5 : a5d9             [ 3] 	lda df_tmpptrb
e9a7 : 92d7             [ 5] 	sta (df_tmpptra)
                             	; get high byte to doke
e9a9 : a5da             [ 3] 	lda df_tmpptrb+1
e9ab : a001             [ 2] 	ldy #1
                             	; poke hi byte
e9ad : 91d7             [ 5] 	sta (df_tmpptra),y
e9af : 60               [ 6] 	rts
                             	
e9b0 :                       df_rt_poke
e9b0 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
e9b3 : a5d9             [ 3] 	lda df_tmpptrb
e9b5 : 92d7             [ 5] 	sta (df_tmpptra)
                             ;	clc
e9b7 : 60               [ 6] 	rts
                             
e9b8 :                       df_rt_vpoke
e9b8 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
e9bb : a6d7             [ 3] 	ldx df_tmpptra
e9bd : a4d8             [ 3] 	ldy df_tmpptra+1
e9bf : a5d9             [ 3] 	lda df_tmpptrb
e9c1 : 4c1ec4           [ 3] 	jmp _vdp_poke
                             ;	clc
                             ;	rts
                             
e9c4 :                       df_rt_nvpoke
e9c4 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
e9c7 : a6d7             [ 3] 	ldx df_tmpptra
e9c9 : a5d9             [ 3] 	lda df_tmpptrb
e9cb : 4caec4           [ 3] 	jmp _rtc_nvwrite
                             ;	clc
e9ce : 60               [ 6] 	rts
                             
e9cf :                       df_rt_setvdp
e9cf : 2025dc           [ 6] 	jsr df_rt_parm_2ints
e9d2 : a5d7             [ 3] 	lda df_tmpptra
e9d4 : a6d9             [ 3] 	ldx df_tmpptrb
AS65 Assembler for R6502 [1.42].                                     Page  163
---------------------------------- bank1.s -----------------------------------

e9d6 : 4c50c6           [ 3] 	jmp vdp_wr_reg
                             ;	clc
                             ;	rts
                             
e9d9 :                       df_rt_colour
e9d9 : 2030dc           [ 6] 	jsr df_rt_parm_3ints
                             	; colour is a combination of b and c parms
e9dc : a5d9             [ 3] 	lda df_tmpptrb
e9de : 0a               [ 2] 	asl a
e9df : 0a               [ 2] 	asl a
e9e0 : 0a               [ 2] 	asl a
e9e1 : 0a               [ 2] 	asl a
e9e2 : 05db             [ 3] 	ora df_tmpptrc
e9e4 : 48               [ 3] 	pha
e9e5 : a5d7             [ 3] 	lda df_tmpptra
e9e7 : c920             [ 2] 	cmp #32					; 32 = border colour
e9e9 : f00e             [ 3] 	beq df_rt_colour_border
                             	; else write to the colour table
                             	; first calculate the colour table address
e9eb : 18               [ 2] 	clc
e9ec : 650d             [ 3] 	adc vdp_base+vdp_addr_col
e9ee : aa               [ 2] 	tax
e9ef : a50e             [ 3] 	lda vdp_base+vdp_addr_col+1
e9f1 : 6900             [ 2] 	adc #0
e9f3 : a8               [ 2] 	tay
e9f4 : 68               [ 4] 	pla
                             	; A = colour, YX = address
e9f5 : 208ac6           [ 6] 	jsr vdp_poke
e9f8 : 60               [ 6] 	rts
e9f9 :                       df_rt_colour_border
e9f9 : a907             [ 2] 	lda #7
e9fb : fa               [ 4] 	plx
e9fc : 4c50c6           [ 3] 	jmp vdp_wr_reg
                             
e9ff :                       df_rt_sprite
e9ff : 2063dc           [ 6] 	jsr df_rt_parm_5ints
                             	; calculate the sprite number in vram
ea02 : a5d7             [ 3] 	lda df_tmpptra
ea04 : 0a               [ 2] 	asl a
ea05 : 0a               [ 2] 	asl a
ea06 : 18               [ 2] 	clc
ea07 : 6511             [ 3] 	adc vdp_base+vdp_addr_spa
ea09 : aa               [ 2] 	tax
ea0a : a512             [ 3] 	lda vdp_base+vdp_addr_spa+1
ea0c : 6900             [ 2] 	adc #0
ea0e : 78               [ 2] 	sei				; Disable interrupts
ea0f : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
ea12 : a5db             [ 3] 	lda df_tmpptrc
ea14 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
ea17 : a5d9             [ 3] 	lda df_tmpptrb
ea19 : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the pattern name (tmpd)
ea1c : a5dd             [ 3] 	lda df_tmpptrd
ea1e : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the colour / ec byte (tmpe)
ea21 : a5df             [ 3] 	lda df_tmpptre
ea23 : 2085c6           [ 6] 	jsr vdp_wr_vram
ea26 : 58               [ 2] 	cli				; Enable interrupts
ea27 : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  164
---------------------------------- bank1.s -----------------------------------

                             
                             ; copy pattern array to sprite pattern vram
                             ; pattern array is a mim 4 element int
ea28 :                       df_rt_spritepat
ea28 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
                             	; save sprite number
ea2b : 86d7             [ 3] 	stx df_tmpptra
ea2d : 64d8             [ 3] 	stz df_tmpptra+1
                             	; multiply by 8 to get pattern offset
ea2f : 06d7             [ 5] 	asl df_tmpptra
ea31 : 26d8             [ 5] 	rol df_tmpptra+1
ea33 : 06d7             [ 5] 	asl df_tmpptra
ea35 : 26d8             [ 5] 	rol df_tmpptra+1
ea37 : 06d7             [ 5] 	asl df_tmpptra
ea39 : 26d8             [ 5] 	rol df_tmpptra+1
                             	; add offset to sprite pattern base
                             	; and put in X,A
ea3b : a5d7             [ 3] 	lda df_tmpptra
ea3d : 6513             [ 3] 	adc vdp_base+vdp_addr_spp
ea3f : aa               [ 2] 	tax
ea40 : a5d8             [ 3] 	lda df_tmpptra+1
ea42 : 6514             [ 3] 	adc vdp_base+vdp_addr_spp+1
ea44 : 78               [ 2] 	sei			; Disable interrupts
                             	; set vdp address
ea45 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; start from beginning of array
ea48 : a000             [ 2] 	ldy #0
ea4a :                       df_rt_spritepat_line
                             	; get the sprite patten from array
ea4a : b1d9             [ 5] 	lda (df_tmpptrb),y
                             	; and write to vdp
ea4c : 2085c6           [ 6] 	jsr vdp_wr_vram
ea4f : c8               [ 2] 	iny
                             	; do this for 8 bytes (4 elements)
ea50 : c008             [ 2] 	cpy #8
ea52 : d0f6             [ 3] 	bne df_rt_spritepat_line
ea54 : 58               [ 2] 	cli			; Enable interrupts
ea55 : 60               [ 6] 	rts
                             
ea56 :                       df_rt_spritepos
ea56 : 2030dc           [ 6] 	jsr df_rt_parm_3ints
                             	; calculate the sprite number in vram
ea59 : a5d7             [ 3] 	lda df_tmpptra
ea5b : 0a               [ 2] 	asl a
ea5c : 0a               [ 2] 	asl a
ea5d : 6511             [ 3] 	adc vdp_base+vdp_addr_spa
ea5f : aa               [ 2] 	tax
ea60 : a512             [ 3] 	lda vdp_base+vdp_addr_spa+1
ea62 : 6900             [ 2] 	adc #0
ea64 : 78               [ 2] 	sei
ea65 : 205dc6           [ 6] 	jsr vdp_wr_addr
                             	; now write the vertical position (tmpc, not b)
ea68 : a5db             [ 3] 	lda df_tmpptrc
ea6a : 2085c6           [ 6] 	jsr vdp_wr_vram
                             	; now write the horizontal position (tmpb)
ea6d : a5d9             [ 3] 	lda df_tmpptrb
ea6f : 2085c6           [ 6] 	jsr vdp_wr_vram
ea72 : 58               [ 2] 	cli
ea73 : 60               [ 6] 	rts
                             
                             ; common routine for col and nme variations
                             ; A contains offset in to sprite table to update
AS65 Assembler for R6502 [1.42].                                     Page  165
---------------------------------- bank1.s -----------------------------------

ea74 :                       df_rt_spriteattr
                             	; save A which contains the offset
ea74 : 48               [ 3] 	pha
ea75 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
                             	; calculate the sprite number in vram
ea78 : a5d7             [ 3] 	lda df_tmpptra
ea7a : 0a               [ 2] 	asl a
ea7b : 0a               [ 2] 	asl a
ea7c : 6511             [ 3] 	adc vdp_base+vdp_addr_spa
ea7e : 85d7             [ 3] 	sta df_tmpptra
ea80 : a512             [ 3] 	lda vdp_base+vdp_addr_spa+1
ea82 : 6900             [ 2] 	adc #0
ea84 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; add offset and put in X,A to set VRAM address
ea86 : 68               [ 4] 	pla							; get offset from stack
ea87 : 65d7             [ 3] 	adc df_tmpptra
ea89 : aa               [ 2] 	tax
ea8a : a5d8             [ 3] 	lda df_tmpptra+1
ea8c : 6900             [ 2] 	adc #0
ea8e : a8               [ 2] 	tay
ea8f : a5d9             [ 3] 	lda df_tmpptrb
ea91 : 4c8ac6           [ 3] 	jmp vdp_poke
                             
ea94 :                       df_rt_spritecol
                             	; offset is 3 for colour byte
ea94 : a903             [ 2] 	lda #3
ea96 : 4c74ea           [ 3] 	jmp df_rt_spriteattr
                             
ea99 :                       df_rt_spritenme
                             	; offset is 2 for name byte
ea99 : a902             [ 2] 	lda #2
ea9b : 4c74ea           [ 3] 	jmp df_rt_spriteattr
                             
ea9e :                       df_rt_snd_common
                             	; 3 inputs
                             	; tmpa = channel (1,2,3), tmpb = period, tmpc = 
ea9e : a5d7             [ 3] 	lda df_tmpptra
                             	; tone channel addressing is 0 to 2
eaa0 : 3a               [ 2] 	dec a
eaa1 : 2903             [ 2] 	and #3
                             	; ok doing a tone channel, get reg index for per
eaa3 : 0a               [ 2] 	asl a
eaa4 : aa               [ 2] 	tax
                             	; get low byte of period
eaa5 : a4d9             [ 3] 	ldy df_tmpptrb
eaa7 : 20eec3           [ 6] 	jsr _snd_set
                             	; increment reg number to high byte
eaaa : e8               [ 2] 	inx
                             	; get high byte of period
eaab : a5da             [ 3] 	lda df_tmpptrb+1
eaad : 290f             [ 2] 	and #0x0f
eaaf : a8               [ 2] 	tay
                             	; set period
eab0 : 20eec3           [ 6] 	jsr _snd_set
                             	; get volume register index (8 = channel 1)
eab3 : 18               [ 2] 	clc
eab4 : a5d7             [ 3] 	lda df_tmpptra
eab6 : 2903             [ 2] 	and #3
eab8 : 6907             [ 2] 	adc #7
eaba : aa               [ 2] 	tax
                             	; get volume
eabb : a5db             [ 3] 	lda df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  166
---------------------------------- bank1.s -----------------------------------

eabd : 290f             [ 2] 	and #0x0f
eabf : d002             [ 3] 	bne df_rt_sound_env_skip
                             	; envelope mode
eac1 : 0910             [ 2] 	ora #0x10
eac3 :                       df_rt_sound_env_skip
eac3 : a8               [ 2] 	tay
eac4 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	rts
                             
                             ; sound chan,period,volume	
eac7 :                       df_rt_sound
eac7 : 2030dc           [ 6] 	jsr df_rt_parm_3ints
eaca :                       df_rt_dosound
                             	; check which channel (0 = noise)
eaca : a5d7             [ 3] 	lda df_tmpptra
eacc : f003             [ 3] 	beq df_rt_sound_noise
eace : 4c9eea           [ 3] 	jmp df_rt_snd_common
ead1 :                       df_rt_sound_noise
                             	; ok update the noise channel, volume is irrelev
ead1 : a206             [ 2] 	ldx #6
ead3 : a5d9             [ 3] 	lda df_tmpptrb
ead5 : 291f             [ 2] 	and #0x1f
ead7 : a8               [ 2] 	tay
ead8 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             ; music chan,octave,note,volume
eadb :                       df_rt_music
eadb : 2047dc           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 2 = octave, need to x 12word = 24
eade : 18               [ 2] 	clc
eadf : a5d9             [ 3] 	lda df_tmpptrb
eae1 : 65d9             [ 3] 	adc df_tmpptrb
eae3 : 65d9             [ 3] 	adc df_tmpptrb
eae5 : 0a               [ 2] 	asl a
eae6 : 0a               [ 2] 	asl a
                             	; we have x12, now add note to get index
eae7 : 65db             [ 3] 	adc df_tmpptrc
eae9 : 0a               [ 2] 	asl a
eaea : a8               [ 2] 	tay
                             	; get period A,X (hi/lo)
eaeb : 20bec3           [ 6] 	jsr _snd_get_note
eaee : 86d9             [ 3] 	stx df_tmpptrb
eaf0 : 85da             [ 3] 	sta df_tmpptrb+1
                             	; put vol in tmpc
eaf2 : a5dd             [ 3] 	lda df_tmpptrd
eaf4 : 85db             [ 3] 	sta df_tmpptrc
                             	; tmpa,b,c contain chan,per,vol
eaf6 : 4ccaea           [ 3] 	jmp df_rt_dosound
                             	
                             	
                             ; play tonemask,noisemask,envelope,period
eaf9 :                       df_rt_play
eaf9 : 2047dc           [ 6] 	jsr df_rt_parm_4ints
                             	; parm 1 = tone enable
eafc : a5d7             [ 3] 	lda df_tmpptra
eafe : 2907             [ 2] 	and #7
eb00 : 85d7             [ 3] 	sta df_tmpptra
                             	; parm 2 = noise enable
eb02 : a5d9             [ 3] 	lda df_tmpptrb
eb04 : 2907             [ 2] 	and #7
AS65 Assembler for R6502 [1.42].                                     Page  167
---------------------------------- bank1.s -----------------------------------

eb06 : 0a               [ 2] 	asl a
eb07 : 0a               [ 2] 	asl a
eb08 : 0a               [ 2] 	asl a
eb09 : 05d7             [ 3] 	ora df_tmpptra
                             	; we now have bits set for channels to enable
                             	; but need to invert for the 8910
                             	; keep top 2 bits 0 as these are port a and b in
eb0b : 493f             [ 2] 	eor #0x3f
eb0d : a8               [ 2] 	tay
                             	; reg 7 is control register
eb0e : a207             [ 2] 	ldx #7
eb10 : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 3 = envelope mode
eb13 : a5db             [ 3] 	lda df_tmpptrc
eb15 : 290f             [ 2] 	and #0xf
eb17 : a8               [ 2] 	tay
                             	; 13 is envelope shape register
eb18 : a20d             [ 2] 	ldx #13
eb1a : 20eec3           [ 6] 	jsr _snd_set
                             	; parm 4 = envelope period
                             	; 11 is envelope period register
eb1d : a20b             [ 2] 	ldx #11
                             	; get low
eb1f : a4dd             [ 3] 	ldy df_tmpptrd
eb21 : 20eec3           [ 6] 	jsr _snd_set
                             	; get high
eb24 : e8               [ 2] 	inx
eb25 : a4de             [ 3] 	ldy df_tmpptrd+1
eb27 : 4ceec3           [ 3] 	jmp _snd_set
                             ;	clc
                             ;	rts
                             
                             
                             ;* Binary save mem,hdr,addr,len,filename
eb2a :                       df_rt_bsave
                             	; Get mem type, 0=RAM, else VRAM
eb2a : 206ad9           [ 6] 	jsr df_rt_neval				; Get mem type
eb2d : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
eb30 : e076             [ 2] 	cpx #'v'
eb32 : d003             [ 3] 	bne df_rt_bsave_tryr
eb34 : 18               [ 2] 	clc							; Clear C for vram
eb35 : 8007             [ 3] 	bra df_rt_bsave_savep
eb37 :                       df_rt_bsave_tryr
eb37 : e072             [ 2] 	cpx #'r'
eb39 : f002             [ 3] 	beq	 df_rt_bsave_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
eb3d :                       df_rt_bsave_setR
eb3d : 38               [ 2] 	sec							; Set C for ram
eb3e :                       df_rt_bsave_savep
                             	; save C, clear=VRAM, set=RAM
eb3e : 08               [ 3] 	php
                             
                             	; jump over comma
eb3f : e6be             [ 5] 	inc df_exeoff
                             	; Get header length
eb41 : 206ad9           [ 6] 	jsr df_rt_neval				; Get header length
eb44 : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
eb47 : da               [ 3] 	phx
                             
AS65 Assembler for R6502 [1.42].                                     Page  168
---------------------------------- bank1.s -----------------------------------

                             	; jump over comma
eb48 : e6be             [ 5] 	inc df_exeoff
eb4a : 206ad9           [ 6] 	jsr df_rt_neval				; Get address
eb4d : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = Address
eb50 : 48               [ 3] 	pha
eb51 : da               [ 3] 	phx
                             
                             	; jump over comma
eb52 : e6be             [ 5] 	inc df_exeoff
eb54 : 206ad9           [ 6] 	jsr df_rt_neval				; Get length
eb57 : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = Length
eb5a : 48               [ 3] 	pha
eb5b : da               [ 3] 	phx
                             
                             	; jump over comma
eb5c : e6be             [ 5] 	inc df_exeoff
                             	; Process filename
eb5e : 20c9eb           [ 6] 	jsr df_rt_parse_file
eb61 : 20c6c5           [ 6] 	jsr io_open_write
eb64 : b05a             [ 3] 	bcs df_rt_file_errc3		; Error condition resets t
                             
                             	; On the stack, we have lenlo,lenhi,adlo,adhi,he
eb66 : ba               [ 2] 	tsx
eb67 : bc0501           [ 4] 	ldy 0x105,x					; Get header len
eb6a : f008             [ 3] 	beq df_rt_bsave_byte
eb6c : a900             [ 2] 	lda #0						; Zero filler
eb6e :                       df_rt_bsave_header
eb6e : 20c0c5           [ 6] 	jsr io_put_ch				; Write a byte to disk
eb71 : 88               [ 2] 	dey
eb72 : d0fa             [ 3] 	bne df_rt_bsave_header
eb74 :                       df_rt_bsave_byte
eb74 : ba               [ 2] 	tsx							; Restore SP to X
eb75 : bd0101           [ 4] 	lda 0x101,x					; low<>0 carry on
eb78 : d005             [ 3] 	bne df_rt_bsave_byte_do
eb7a : bd0201           [ 4] 	lda 0x102,x					; hi<>0 carry on
eb7d : f038             [ 3] 	beq df_rt_bsave_done		; else done
eb7f :                       df_rt_bsave_byte_do
eb7f : bd0601           [ 4] 	lda 0x106,x					; Get the C status
eb82 : 48               [ 3] 	pha
eb83 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
eb84 : bd0301           [ 4] 	lda 0x103,x					; Get low address
eb87 : bc0401           [ 4] 	ldy 0x104,x					; Get high address
eb8a : aa               [ 2] 	tax							; X,Y contain address
                             
eb8b : b006             [ 3] 	bcs df_rt_bsave_ram			; RAM or VRAM?
                             	; Read from VRAM
eb8d : 98               [ 2] 	tya							; A needs to contain high byte
eb8e : 2006c4           [ 6] 	jsr _vdp_peek				; Peek VRAM
eb91 : 8006             [ 3] 	bra df_rt_bsave_write
eb93 :                       df_rt_bsave_ram
                             	; Read from RAM
eb93 : 86d7             [ 3] 	stx df_tmpptra				; Save address
eb95 : 84d8             [ 3] 	sty df_tmpptra+1
eb97 : b2d7             [ 5] 	lda (df_tmpptra)			; Peek RAM
eb99 :                       df_rt_bsave_write
eb99 : 20c0c5           [ 6] 	jsr io_put_ch				; Write to disk
eb9c : ba               [ 2] 	tsx							; Get SP to X
eb9d : fe0301           [ 6] 	inc 0x103,x					; Increment low address
eba0 : d003             [ 3] 	bne df_rt_bsave_skiph
eba2 : fe0401           [ 6] 	inc 0x104,x					; Increment high address
eba5 :                       df_rt_bsave_skiph
AS65 Assembler for R6502 [1.42].                                     Page  169
---------------------------------- bank1.s -----------------------------------

eba5 : bc0101           [ 4] 	ldy 0x101,x					; Get low len byte
eba8 : f005             [ 3] 	beq df_rt_bsave_dech
ebaa : de0101           [ 6] 	dec 0x101,x					; A simple decrement
ebad : 80c5             [ 3] 	bra df_rt_bsave_byte		; Process next byte
ebaf :                       df_rt_bsave_dech
ebaf : de0101           [ 6] 	dec 0x101,x					; Decrement low in readiness
ebb2 : de0201           [ 6] 	dec 0x102,x					; Decrement high
ebb5 : 80bd             [ 3] 	bra df_rt_bsave_byte		; Process next byte
ebb7 :                       df_rt_bsave_done
                             	; Tidy the stack
ebb7 : 68               [ 4] 	pla
ebb8 : 68               [ 4] 	pla
ebb9 : 68               [ 4] 	pla
ebba : 68               [ 4] 	pla
ebbb : 68               [ 4] 	pla
ebbc : 68               [ 4] 	pla
ebbd : 4ce6eb           [ 3] 	jmp df_rt_file_cleanup		; Clean up FS
                             
ebc0 :                       df_rt_file_errc3				; Stepping stone!!!
ebc0 : b0fe             [ 3] 	bcs df_rt_file_errc3
                             
                             ;* common filename procesing routine
                             ;* 
ebc2 :                       df_rt_init_filename
                             	; evaluate string X,A has the string pointer
ebc2 : 206ad9           [ 6] 	jsr df_rt_neval
ebc5 : 20f3f2           [ 6] 	jsr df_ost_popStr
                             
ebc8 : 60               [ 6] 	rts
                             	
                             ;* common file parsing routine
ebc9 :                       df_rt_parse_file
ebc9 : a902             [ 2] 	lda #2					; Only works for SD card now
ebcb : 20a5c5           [ 6] 	jsr io_active_device
                             
                             	; now process filename, XA has pointer
ebce : 20c2eb           [ 6] 	jsr df_rt_init_filename
ebd1 : 60               [ 6] 	rts
                             ; save "file"
ebd2 :                       df_rt_save
ebd2 : 20c9eb           [ 6] 	jsr df_rt_parse_file
ebd5 : 20c6c5           [ 6] 	jsr io_open_write
ebd8 : b063             [ 4] 	bcs df_rt_file_errc
                             	; ok now have redirected output to device
                             	; go and list the program in save mode
ebda : a901             [ 2] 	lda #1
ebdc : 85df             [ 3] 	sta df_tmpptre
ebde : 207be7           [ 6] 	jsr df_rt_listprg
                             	; final CR to end the save
ebe1 : a90d             [ 2] 	lda #UTF_CR
ebe3 : 20c0c5           [ 6] 	jsr io_put_ch
ebe6 :                       df_rt_file_cleanup
                             	; close the file
ebe6 : 20c9c5           [ 6] 	jsr io_close
ebe9 : 18               [ 2] 	clc
                             	; restore to default device io
ebea : 4ca2c5           [ 3] 	jmp io_set_default
                             ;	clc
                             ;	rts
                             
                             ; load 'x',"file" where 0=serial, 1=SDCard
ebed :                       df_rt_load
AS65 Assembler for R6502 [1.42].                                     Page  170
---------------------------------- bank1.s -----------------------------------

ebed : 20c9eb           [ 6] 	jsr df_rt_parse_file
ebf0 : 20c3c5           [ 6] 	jsr io_open_read
ebf3 : b048             [ 4] 	bcs df_rt_file_errc
                             	; no echo - very important
                             	; else might try and write to a device
                             	; only open for reading (i.e. SD CARD)
                             
                             	; Initialise to line 10 in scratch, scratch+1
ebf5 : a90a             [ 2] 	lda #10
ebf7 : 8d0009           [ 4] 	sta scratch
ebfa : 9c0109           [ 4] 	stz scratch+1
ebfd :                       df_rt_loadline
ebfd : 18               [ 2] 	clc
ebfe : 2037d8           [ 6] 	jsr df_pg_inputline
                             	; if C clear then tokenise line
ec01 : 9013             [ 3] 	bcc df_rt_ldtokenise
                             	; else done
                             	; clear dflat runtime else will try to execute
                             	; the last tokenised line!
ec03 : 9c800a           [ 4] 	stz df_tokbuff			; Offset to next line
ec06 : 9c810a           [ 4] 	stz df_tokbuff+1		; Clear line low
ec09 : 9c820a           [ 4] 	stz df_tokbuff+2		; Clear line high
ec0c : 64b5             [ 3] 	stz df_nxtstidx			; Clear next statement
ec0e : 64b4             [ 3] 	stz df_eolidx			; Clear end of line too
ec10 : a901             [ 2] 	lda #1					; Set immediate mode to get a 'Ready'
ec12 : 8594             [ 3] 	sta df_immed			; But nothing to run
ec14 : 80d0             [ 4] 	bra df_rt_file_cleanup	; Ok now can close and do
ec16 :                       df_rt_ldtokenise
ec16 : 2041d1           [ 6] 	jsr df_lexer_line		; Tokenise loaded string - ju
                             	; check if line number == 0
ec19 : ad810a           [ 4] 	lda df_tokbuff+DFTK_LINNUM
ec1c : 0d820a           [ 4] 	ora df_tokbuff+DFTK_LINNUM+1
ec1f : d017             [ 3] 	bne df_rt_storeline		; No, then store the line
                             	; Else insert current line number to buffer posi
                             	; also add 10 to the current line number
ec21 : 18               [ 2] 	clc
ec22 : ad0009           [ 4] 	lda scratch				; Get line number lo
ec25 : 8d810a           [ 4] 	sta df_tokbuff+1		; Use current line number
ec28 : 690a             [ 2] 	adc #10					; But increment for next by 10
ec2a : 8d0009           [ 4] 	sta scratch
ec2d : ad0109           [ 4] 	lda scratch+1			; Get line number hi
ec30 : 8d820a           [ 4] 	sta df_tokbuff+2
ec33 : 6900             [ 2] 	adc #0
ec35 : 8d0109           [ 4] 	sta scratch+1
ec38 :                       df_rt_storeline
ec38 : 20aed8           [ 6] 	jsr df_pg_line_number	; Save the line in the rig
ec3b : 80c0             [ 4] 	bra df_rt_loadline		; Continue with next until b
                             
                             ; Somwehere to go to raise a file error!
ec3d :                       df_rt_file_errc
                             	SWBRK DFERR_FNAME
                             
                             
ec3f :                       df_rt_del
ec3f : 20c2eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec42 : 208ec0           [ 6] 	jsr _fs_delete_w			; Delete file
ec45 : 60               [ 6] 	rts
                             
ec46 :                       df_rt_chdir
ec46 : 20c2eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec49 : 205ec0           [ 6] 	jsr _fs_chdir_w				; Try and change directory
ec4c : b0ef             [ 3] 	bcs df_rt_file_errc
AS65 Assembler for R6502 [1.42].                                     Page  171
---------------------------------- bank1.s -----------------------------------

ec4e : 60               [ 6] 	rts
                             
ec4f :                       df_rt_mkdir
ec4f : 20c2eb           [ 6] 	jsr df_rt_init_filename		; Parse filename
ec52 : 2076c0           [ 6] 	jsr _fs_mkdir_w				; Try and make directory
ec55 : b0e6             [ 3] 	bcs df_rt_file_errc
ec57 : 60               [ 6] 	rts
                             
                             ; bload MEM,HEAD,ADDR,FNAME
ec58 :                       df_rt_bload
                             	; Get mem type, 0=RAM, else VRAM
ec58 : 206ad9           [ 6] 	jsr df_rt_neval				; Get mem type
ec5b : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = mem type (only X)
                             	; if check X for v or r
ec5e : e076             [ 2] 	cpx #'v'
ec60 : d003             [ 3] 	bne df_rt_bload_tryr
ec62 : 18               [ 2] 	clc							; Clear C for vram
ec63 : 8007             [ 3] 	bra df_rt_bload_savep
ec65 :                       df_rt_bload_tryr
ec65 : e072             [ 2] 	cpx #'r'
ec67 : f002             [ 3] 	beq	 df_rt_bload_setR
                             	SWBRK DFERR_TYPEMISM		; was not v or r!
                             
ec6b :                       df_rt_bload_setR
ec6b : 38               [ 2] 	sec							; Set C for ram
ec6c :                       df_rt_bload_savep
                             	; save C, clear=VRAM, set=RAM
ec6c : 08               [ 3] 	php
                             	; jump over comma
ec6d : e6be             [ 5] 	inc df_exeoff
                             	; Get header length
ec6f : 206ad9           [ 6] 	jsr df_rt_neval				; Get header length
ec72 : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = Header length (only 
                             	; save X as header length
ec75 : da               [ 3] 	phx
                             	; jump over comma
ec76 : e6be             [ 5] 	inc df_exeoff
ec78 : 8012             [ 3] 	bra df_rt_bvload
ec7a :                       df_rt_font
ec7a : 18               [ 2] 	clc							; Set to video
ec7b : 08               [ 3] 	php
ec7c : a900             [ 2] 	lda #0						; No header
ec7e : 48               [ 3] 	pha
ec7f : a901             [ 2] 	lda #1						; 0x100 address - hi
ec81 : 48               [ 3] 	pha
ec82 : a900             [ 2] 	lda #0						; 0x100 address - lo
ec84 : 48               [ 3] 	pha
ec85 : 800d             [ 3] 	bra df_rt_bload_file
ec87 :                       df_rt_vload
ec87 : 18               [ 2] 	clc							; Hardcode for VRAM
ec88 : 08               [ 3] 	php
ec89 : a207             [ 2] 	ldx #7						; Hardcode header length
ec8b : da               [ 3] 	phx
ec8c :                       df_rt_bvload
ec8c : 206ad9           [ 6] 	jsr df_rt_neval				; Get address
ec8f : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = Address
ec92 : 48               [ 3] 	pha
ec93 : da               [ 3] 	phx
ec94 :                       df_rt_bload_file
                             	; jump over comma
ec94 : e6be             [ 5] 	inc df_exeoff
ec96 : 20c9eb           [ 6] 	jsr df_rt_parse_file
AS65 Assembler for R6502 [1.42].                                     Page  172
---------------------------------- bank1.s -----------------------------------

ec99 : 20c3c5           [ 6] 	jsr io_open_read
ec9c : b09f             [ 3] 	bcs df_rt_file_errc		; Error condition resets th
                             	; On the stack:
                             	; 101+x = adlo
                             	; 102+x = adhi
                             	; 103+x = header length
                             	; 104+x = mem type (c=0 means video)
ec9e : ba               [ 2] 	tsx
ec9f : bc0301           [ 4] 	ldy 0x103,x					; Get header
eca2 : f008             [ 3] 	beq df_rt_vload_byte
eca4 :                       df_rt_vload_header
eca4 : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
eca7 : b03c             [ 3] 	bcs df_rt_vload_done		; If EOF then done
eca9 : 88               [ 2] 	dey
ecaa : d0f8             [ 3] 	bne df_rt_vload_header
ecac :                       df_rt_vload_byte
ecac : ba               [ 2] 	tsx							; Restore SP to X
ecad : bd0401           [ 4] 	lda 0x104,x					; Get the C status
ecb0 : 48               [ 3] 	pha
ecb1 : 28               [ 4] 	plp							; C unaffected by next ops
                             	
ecb2 : bd0101           [ 4] 	lda 0x101,x					; Get low address
ecb5 : bc0201           [ 4] 	ldy 0x102,x					; Get high address
ecb8 : aa               [ 2] 	tax							; X,Y contain address
                             
ecb9 : b014             [ 3] 	bcs df_rt_vload_ram			; RAM or VRAM?
                             	; Poke to VRAM but skip 0x1800-0x1fff
ecbb : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ecbe : b025             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ecc0 : c018             [ 2] 	cpy #0x18					; If page # <= 0x17
ecc2 : 9006             [ 3] 	bcc df_rt_vload_do_vpoke	; then vpoke
ecc4 : c020             [ 2] 	cpy #0x20					; Or page >= 0x20
ecc6 : b002             [ 3] 	bcs df_rt_vload_do_vpoke	; then vpoke
ecc8 : 8010             [ 3] 	bra df_rt_vload_next
ecca :                       df_rt_vload_do_vpoke
ecca : 201ec4           [ 6] 	jsr _vdp_poke				; Write to VRAM
eccd : 800b             [ 3] 	bra df_rt_vload_next
eccf :                       df_rt_vload_ram
                             	; Poke to RAM
eccf : 20bdc5           [ 6] 	jsr io_get_ch				; Get a character
ecd2 : b011             [ 3] 	bcs df_rt_vload_done		; If EOF then done
ecd4 : 86d7             [ 3] 	stx df_tmpptra				; Save address
ecd6 : 84d8             [ 3] 	sty df_tmpptra+1
ecd8 : 92d7             [ 5] 	sta (df_tmpptra)			; Poke byte to RAM
ecda :                       df_rt_vload_next
ecda : ba               [ 2] 	tsx							; Get SP to X
ecdb : fe0101           [ 6] 	inc 0x101,x					; Increment low address
ecde : d003             [ 3] 	bne df_rt_vload_byte_skip
ece0 : fe0201           [ 6] 	inc 0x102,x					; Increment high address
ece3 :                       df_rt_vload_byte_skip
ece3 : 80c7             [ 3] 	bra df_rt_vload_byte		; Back for next video byte
ece5 :                       df_rt_vload_done
ece5 :                       df_rt_ptload_done
                             	; Tidy the stack
ece5 : 68               [ 4] 	pla
ece6 : 68               [ 4] 	pla
ece7 : 68               [ 4] 	pla
ece8 : 68               [ 4] 	pla
ece9 : 4ce6eb           [ 3] 	jmp df_rt_file_cleanup
                             
                             ; Loads a song into any part of RAM including sha
                             ; Always assumes the top half of memory is in ban
AS65 Assembler for R6502 [1.42].                                     Page  173
---------------------------------- bank1.s -----------------------------------

                             	SWBRK DFERR_FNAME
                             
ecee :                       df_rt_ptload
ecee : 206ad9           [ 6] 	jsr df_rt_neval				; Get address
ecf1 : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = Address
ecf4 : 48               [ 3] 	pha
ecf5 : da               [ 3] 	phx
                             	; jump over comma
ecf6 : e6be             [ 5] 	inc df_exeoff
ecf8 : 20c9eb           [ 6] 	jsr df_rt_parse_file
ecfb : 20c3c5           [ 6] 	jsr io_open_read
ecfe : b0ec             [ 3] 	bcs (df_rt_ptload-2)		; Error condition resets t
                             
                             	; Copy code from ROM that does write to RAM
ed00 : a000             [ 2] 	ldy #0
ed02 :                       df_rt_ptload_copycode
ed02 : b932ed           [ 4] 	lda df_rt_ptload_code_s,y
ed05 : 990c0c           [ 5] 	sta ram_code,y
ed08 : c8               [ 2] 	iny
ed09 : c025             [ 2] 	cpy #(df_rt_ptload_code_e-df_rt_ptload_code_s)
ed0b : d0f5             [ 3] 	bne df_rt_ptload_copycode
                             
ed0d : 7a               [ 4] 	ply							; Pull the index of address as Y
ed0e : 68               [ 4] 	pla							; Pull the high address
ed0f : 85d8             [ 3] 	sta df_tmpptra+1			; Just the page address, so l
ed11 : 64d7             [ 3] 	stz df_tmpptra
                             
                             	; Save current port B status of both VIAs
ed13 : ad0004           [ 4] 	lda IO_0+PRB				; VIA0 port B is the ROM and RAM
ed16 : 48               [ 3] 	pha
ed17 : 29cf             [ 2] 	and #0b11001111				; Mask off RAM bank bits
ed19 : 0920             [ 2] 	ora #0b00100000				; Select bank 2
ed1b : 48               [ 3] 	pha							; Save new bank select
ed1c : ad8004           [ 4] 	lda IO_1+PRB				; VIA1 port B controls ROM enabl
ed1f : 48               [ 3] 	pha
ed20 : 29df             [ 2] 	and #0b11011111				; Disable ROM bit
ed22 : 48               [ 3] 	pha							; Save ROM disable state
                             	; Stack contains:
                             	;	101,x = disable ROM value
                             	;	102,x = original ROM value
                             	;	103,x = new RAM bank select value
                             	;	104,x = original RAM bank select value
ed23 :                       df_rt_ptload_byte
ed23 : 20bdc5           [ 6] 	jsr io_get_ch				; Get a byte
ed26 : b0bd             [ 4] 	bcs df_rt_ptload_done		; If EOF then done
ed28 : 200c0c           [ 6] 	jsr ram_code				; Poke byte to RAM bank 2 and ma
ed2b : c8               [ 2] 	iny							; Update page index
ed2c : d0f5             [ 3] 	bne df_rt_ptload_byte		; Back for next byte
ed2e : e6d8             [ 5] 	inc df_tmpptra+1			; Increment high address
ed30 : 80f1             [ 3] 	bra df_rt_ptload_byte		; Back for next byte
                             
                             ; This code gets copied to RAM to do the actual p
ed32 :                       df_rt_ptload_code_s
ed32 : 08               [ 3] 	php							; Save processor status
ed33 : 78               [ 2] 	sei							; Disable VDP interrupts
ed34 : 48               [ 3] 	pha
ed35 : ba               [ 2] 	tsx
ed36 : e8               [ 2] 	inx
ed37 : e8               [ 2] 	inx
ed38 : e8               [ 2] 	inx
ed39 : e8               [ 2] 	inx
ed3a : bd0101           [ 4] 	lda 0x101,x					; Get disable ROM value
AS65 Assembler for R6502 [1.42].                                     Page  174
---------------------------------- bank1.s -----------------------------------

ed3d : 8d8004           [ 4] 	sta IO_1+PRB				; Disable ROM
ed40 : bd0301           [ 4] 	lda 0x103,x					; Get new RAM bank select value
ed43 : 8d0004           [ 4] 	sta IO_0+PRB				; Select bank 2
ed46 : 68               [ 4] 	pla
ed47 : 91d7             [ 5] 	sta (df_tmpptra),y			; Actually poke the byte to
ed49 : bd0201           [ 4] 	lda 0x102,x					; Get original ROM value
ed4c : 8d8004           [ 4] 	sta IO_1+PRB				; Enable ROM
ed4f : bd0401           [ 4] 	lda 0x104,x					; Get original RAM bank select v
ed52 : 8d0004           [ 4] 	sta IO_0+PRB				; Restore RAM bank select	
ed55 : 28               [ 4] 	plp							; Restore processor status
ed56 : 60               [ 6] 	rts
ed57 :                       df_rt_ptload_code_e
                             
ed57 :                       df_rt_ptinit
                             	; Get x,y
ed57 : 2025dc           [ 6] 	jsr df_rt_parm_2ints		; Put address in A,X and l
ed5a : a5d7             [ 3] 	lda df_tmpptra
ed5c : a6d8             [ 3] 	ldx df_tmpptra+1
ed5e : a4d9             [ 3] 	ldy df_tmpptrb
ed60 : 4c3ec5           [ 3] 	jmp _PT3START				; Off to the PT3 player module
                             
ed63 :                       df_rt_ptrun
ed63 : 206ad9           [ 6] 	jsr df_rt_neval				; Get run status in X
ed66 : 20fbf2           [ 6] 	jsr df_ost_popInt			; X,A = Address
ed69 : e000             [ 2] 	cpx #0						; If 0 then stop
ed6b : f003             [ 3] 	beq df_rt_ptrun_stop
                             	; else start
ed6d : 4c6ec5           [ 3] 	jmp _PT3RESUME
ed70 :                       df_rt_ptrun_stop
ed70 : 4c56c5           [ 3] 	jmp _PT3PAUSE
                             
ed73 :                       df_rt_dir_string				; Name of a directory
ed73 : 3c4449523e202000      	db "<DIR>  ",0				; 7 chars + terminator
ed7b :                       df_rt_dir
ed7b : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
ed7e : a214             [ 2] 	ldx #20						; Count of how many files before pa
ed80 : da               [ 3] 	phx
ed81 :                       df_rt_dir_show_entry
ed81 : 18               [ 2] 	clc							; Only looking for valid files
ed82 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ed85 : b052             [ 3] 	bcs df_rt_dir_done			; If C then no more entries
ed87 : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ed89 : a909             [ 2] 	lda #hi(scratch)
ed8b : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ed8e : a20c             [ 2] 	ldx #12						; Put a zero terminator after filen
ed90 : 9e0009           [ 5] 	stz scratch,x
ed93 : a200             [ 2] 	ldx #lo(scratch)			; Print filename
ed95 : a909             [ 2] 	lda #hi(scratch)
ed97 : 200bc6           [ 6] 	jsr io_print_line			; Print name
ed9a : 20bdc8           [ 6] 	jsr utilPrintSPC			; Gap
ed9d : a557             [ 3] 	lda fh_handle+FH_Attr		; Is it a directory?
ed9f : c910             [ 2] 	cmp #0x10
eda1 : d009             [ 3] 	bne df_rt_dir_size
eda3 : a273             [ 2] 	ldx #lo(df_rt_dir_string)	; Set up pointer to na
eda5 : a9ed             [ 2] 	lda #hi(df_rt_dir_string)
eda7 : 200bc6           [ 6] 	jsr io_print_line			; Print directory indicator
edaa : 800d             [ 3] 	bra df_rt_dir_line
edac :                       df_rt_dir_size
edac : a223             [ 2] 	ldx #lo(scratch+35)			; Print size (already term
edae : a909             [ 2] 	lda #hi(scratch+35)
edb0 : 200bc6           [ 6] 	jsr io_print_line			; Print size - 5 chars left 
edb3 : 20bdc8           [ 6] 	jsr utilPrintSPC			; Gap
AS65 Assembler for R6502 [1.42].                                     Page  175
---------------------------------- bank1.s -----------------------------------

edb6 : 20bdc8           [ 6] 	jsr utilPrintSPC			; Gap
                             	; Printed exactly 20 chars per size
edb9 :                       df_rt_dir_line
edb9 : a51b             [ 3] 	lda gr_scrngeom+gr_screen_w	; If 32 col screen t
edbb : c920             [ 2] 	cmp #32
edbd : d003             [ 3] 	bne df_rt_dir_skip_crlf
edbf : 20c5c8           [ 6] 	jsr utilPrintCRLF
edc2 :                       df_rt_dir_skip_crlf
edc2 : fa               [ 4] 	plx							; Decrement file line counter
edc3 : ca               [ 2] 	dex
edc4 : d00d             [ 3] 	bne df_rt_dir_skip_pause
edc6 : a2e0             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
edc8 : a9ed             [ 2] 	lda #hi(df_rt_pausemsg)
edca : 200bc6           [ 6] 	jsr io_print_line
edcd : 38               [ 2] 	sec
edce : 20bdc5           [ 6] 	jsr io_get_ch				; Wait for any key
edd1 : a214             [ 2] 	ldx #20						; Reset line counter
edd3 :                       df_rt_dir_skip_pause	
edd3 : da               [ 3] 	phx							; Save line counter
edd4 : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
edd7 : 80a8             [ 3] 	bra df_rt_dir_show_entry	; Find another entry
edd9 :                       df_rt_dir_done
edd9 : fa               [ 4] 	plx							; Pop line counter
edda : a90d             [ 2] 	lda #UTF_CR					; Final CR
eddc : 20c0c5           [ 6] 	jsr io_put_ch
eddf : 60               [ 6] 	rts
ede0 :                       df_rt_pausemsg
ede0 : 0d507265737320..      	db UTF_CR,"Press any key for more..",UTF_CR,0
                             
edfb :                       df_rt_dirl						; Long listing format
edfb : 204ec1           [ 6] 	jsr _fs_dir_root_start_w	; Start at root
edfe : a214             [ 2] 	ldx #20						; Count of how many files before pa
ee00 : da               [ 3] 	phx
ee01 :                       df_rt_dirl_show_entry
ee01 : 18               [ 2] 	clc							; Only looking for valid files
ee02 : 201ec1           [ 6] 	jsr _fs_dir_find_entry_w	; Find a valid entry
ee05 : b025             [ 3] 	bcs df_rt_dirl_done			; If C then no more entrie
ee07 : a200             [ 2] 	ldx #lo(scratch)			; Set up pointer to string sp
ee09 : a909             [ 2] 	lda #hi(scratch)
ee0b : 20c6c4           [ 6] 	jsr _fs_dir_fhandle_str		; Convert fhandle entry
ee0e : a200             [ 2] 	ldx #lo(scratch)			; Print the whole entry
ee10 : a909             [ 2] 	lda #hi(scratch)
ee12 : 200bc6           [ 6] 	jsr io_print_line
ee15 :                       df_rt_dirl_line
ee15 : fa               [ 4] 	plx							; Decrement file line counter
ee16 : ca               [ 2] 	dex
ee17 : d00d             [ 3] 	bne df_rt_dirl_skip_pause
ee19 : a2e0             [ 2] 	ldx #lo(df_rt_pausemsg)		; Show pause message
ee1b : a9ed             [ 2] 	lda #hi(df_rt_pausemsg)
ee1d : 200bc6           [ 6] 	jsr io_print_line
ee20 : 38               [ 2] 	sec
ee21 : 20bdc5           [ 6] 	jsr io_get_ch				; Wait for any key
ee24 : a214             [ 2] 	ldx #20						; Reset line counter
ee26 :                       df_rt_dirl_skip_pause	
ee26 : da               [ 3] 	phx							; Save line counter
ee27 : 2036c1           [ 6] 	jsr _fs_dir_entry_next_w	; Advance to next slot
ee2a : 80d5             [ 3] 	bra df_rt_dirl_show_entry	; Find another entry
ee2c :                       df_rt_dirl_done
ee2c : fa               [ 4] 	plx							; Pop line counter
ee2d : 20c5c8           [ 6] 	jsr utilPrintCRLF			; Final CR
ee30 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  176
---------------------------------- bank1.s -----------------------------------

                             ; reset %var
ee31 :                       df_rt_reset
                             	; now get lvar X,A from current statement
ee31 : 20b3dd           [ 6] 	jsr df_rt_getlvar
                             	; save lvar in tmpb, vvt ptr in tmpa
ee34 : 86d9             [ 3] 	stx df_tmpptrb
ee36 : 85da             [ 3] 	sta df_tmpptrb+1
                             	; load the vdp count as the reset value of timer
                             	; turn off interrupts while reading vdp lo,hi
ee38 : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of counter (2 bytes only) without di
ee3a : a504             [ 3] 	lda vdp_int_cnt
ee3c :                       df_rt_safe_read
ee3c : 92d9             [ 5] 	sta (df_tmpptrb)
ee3e : a505             [ 3] 	lda vdp_int_cnt+1
ee40 : 91d9             [ 5] 	sta (df_tmpptrb),y
                             	; If first byte has changed since reading it
                             	; then re-read (might happen due to VBI)
ee42 : a504             [ 3] 	lda vdp_int_cnt
ee44 : d2d9             [ 5] 	cmp (df_tmpptrb)
ee46 : d0f4             [ 3] 	bne df_rt_safe_read
ee48 : 60               [ 6] 	rts
                             
                             ; timedate var$
                             ; output to string as dd/mm/yy hh:mm:ss
ee49 :                       df_rt_datetime
                             	; now get lvar X,A from current statement
ee49 : 20b3dd           [ 6] 	jsr df_rt_getlvar
                             	; and save it
ee4c : da               [ 3] 	phx
ee4d : 48               [ 3] 	pha
                             	; Point to 6 bytes of scratch
ee4e : a200             [ 2] 	ldx #lo(scratch)
ee50 : a909             [ 2] 	lda #hi(scratch)
                             	; Populate timedate as hmsdmy
ee52 : 2066c4           [ 6] 	jsr _rtc_gettimedate
                             	; Get destination pointer back
ee55 : 68               [ 4] 	pla
ee56 : 85d8             [ 3] 	sta df_tmpptra+1
ee58 : 68               [ 4] 	pla
ee59 : 85d7             [ 3] 	sta df_tmpptra
                             	; Start at first char of destination
ee5b : a000             [ 2] 	ldy #0
                             	; Get days binary and convert to BCD
ee5d : ae0309           [ 4] 	ldx scratch+3
                             	; Separator character
ee60 : a92f             [ 2] 	lda #'/'
ee62 : 208eee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get months binary and convert to BCD
ee65 : ae0409           [ 4] 	ldx scratch+4
                             	; Separator character
ee68 : a92f             [ 2] 	lda #'/'
ee6a : 208eee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get years binary and convert to BCD
ee6d : ae0509           [ 4] 	ldx scratch+5
                             	; Separator character is space between date and 
ee70 : a920             [ 2] 	lda #' '
ee72 : 208eee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get hours binary and convert to BCD
ee75 : ae0009           [ 4] 	ldx scratch+0
                             	; Separator character
ee78 : a93a             [ 2] 	lda #':'
AS65 Assembler for R6502 [1.42].                                     Page  177
---------------------------------- bank1.s -----------------------------------

ee7a : 208eee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get minutes binary and convert to BCD
ee7d : ae0109           [ 4] 	ldx scratch+1
                             	; Separator character
ee80 : a93a             [ 2] 	lda #':'
ee82 : 208eee           [ 6] 	jsr df_rt_datetime_conv
                             	; Get seconds binary and convert to BCD
ee85 : ae0209           [ 4] 	ldx scratch+2
                             	; Separator character is null to terminate strin
ee88 : a900             [ 2] 	lda #0
ee8a : 208eee           [ 6] 	jsr df_rt_datetime_conv
ee8d : 60               [ 6] 	rts
ee8e :                       df_rt_datetime_conv
ee8e : 48               [ 3] 	pha
ee8f : a900             [ 2] 	lda #0
ee91 : 20f5ca           [ 6] 	jsr word_to_bcd
                             	; We only need least 2 BCD digits
ee94 : a579             [ 3] 	lda num_a+0
                             	; put nibbles in A,X
ee96 : 20f2c8           [ 6] 	jsr str_a_to_x
                             	; And save to destination
ee99 : 91d7             [ 5] 	sta (df_tmpptra),y
ee9b : c8               [ 2] 	iny
ee9c : 8a               [ 2] 	txa
ee9d : 91d7             [ 5] 	sta (df_tmpptra),y
ee9f : c8               [ 2] 	iny
eea0 : 68               [ 4] 	pla
eea1 : 91d7             [ 5] 	sta (df_tmpptra),y
eea3 : c8               [ 2] 	iny
eea4 : 60               [ 6] 	rts
                             
                             ;***** FUNCTIONS *****
                             
eea5 :                       df_rt_deek
eea5 : 38               [ 2] 	sec
eea6 : 8001             [ 3] 	bra df_rt_readbyte
eea8 :                       df_rt_peek
eea8 : 18               [ 2] 	clc
eea9 :                       df_rt_readbyte
eea9 : 08               [ 3] 	php
                             ;	inc df_exeoff
eeaa : 2064d9           [ 6] 	jsr df_rt_getnval
eead : 86d7             [ 3] 	stx df_tmpptra
eeaf : 85d8             [ 3] 	sta df_tmpptra+1
eeb1 : b2d7             [ 5] 	lda (df_tmpptra)
eeb3 : aa               [ 2] 	tax
eeb4 : a900             [ 2] 	lda #0
eeb6 : 28               [ 4] 	plp
eeb7 : 9005             [ 3] 	bcc df_rt_readbyte_skip
eeb9 : 18               [ 2] 	clc
eeba : a001             [ 2] 	ldy #1
eebc : b1d7             [ 5] 	lda (df_tmpptra),y
eebe :                       df_rt_readbyte_skip
eebe : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
eec1 :                       df_rt_vpeek
                             ;	inc df_exeoff
eec1 : 2064d9           [ 6] 	jsr df_rt_getnval
eec4 : 2006c4           [ 6] 	jsr _vdp_peek
eec7 : aa               [ 2] 	tax
eec8 : a900             [ 2] 	lda #0
eeca : 4cdbf2           [ 3] 	jmp df_ost_pushInt
AS65 Assembler for R6502 [1.42].                                     Page  178
---------------------------------- bank1.s -----------------------------------

                             
eecd :                       df_rt_nvpeek
                             ;	inc df_exeoff
eecd : 2064d9           [ 6] 	jsr df_rt_getnval
eed0 : 2096c4           [ 6] 	jsr _rtc_nvread
eed3 : aa               [ 2] 	tax
eed4 : a900             [ 2] 	lda #0
eed6 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; Random number generator
                             ; rnd(0) = get next number
                             ; rnd(>0) = set seed
eed9 :                       df_rt_rnd
                             ;	inc df_exeoff
eed9 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; if input is 0 then generate next random number
eedc : e000             [ 2] 	cpx #0
eede : d017             [ 3] 	bne df_rt_rnd_set
eee0 : c900             [ 2] 	cmp #0
eee2 : d013             [ 3] 	bne df_rt_rnd_set
                             	; generate next number
eee4 : a5ce             [ 3] 	lda df_rnd+1
eee6 : 4a               [ 2] 	lsr a
eee7 : 26cd             [ 5] 	rol df_rnd
eee9 : 9002             [ 3] 	bcc df_rt_rnd_noeor
eeeb : 49b4             [ 2] 	eor #0xb4
eeed :                       df_rt_rnd_noeor
eeed : 85ce             [ 3] 	sta df_rnd+1
eeef : 45cd             [ 3] 	eor df_rnd
eef1 : aa               [ 2] 	tax
eef2 : a900             [ 2] 	lda #0
eef4 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             	; else set the seed to that number and done
eef7 :                       df_rt_rnd_set
eef7 : 86cd             [ 3] 	stx df_rnd
eef9 : 85ce             [ 3] 	sta df_rnd+1
eefb : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; Get joystick status	
eefe :                       df_rt_stick
                             ;	inc df_exeoff
eefe : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ef01 : 86d7             [ 3] 	stx df_tmpptra
ef03 : 20d6c3           [ 6] 	jsr _snd_get_joy0
ef06 : 98               [ 2] 	tya
                             	; invert the bits so that 1=switch on
ef07 : 49ff             [ 2] 	eor #0xff
ef09 : 25d7             [ 3] 	and df_tmpptra
ef0b : aa               [ 2] 	tax
ef0c : a900             [ 2] 	lda #0
ef0e : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; l = msbyte(x)
ef11 :                       df_rt_msbyte
                             ;	inc df_exeoff
ef11 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; only high byte is used
ef14 : aa               [ 2] 	tax
ef15 : a900             [ 2] 	lda #0
ef17 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
AS65 Assembler for R6502 [1.42].                                     Page  179
---------------------------------- bank1.s -----------------------------------

                             	
                             ; l = lsbyte(x)
ef1a :                       df_rt_lsbyte
                             ;	inc df_exeoff
ef1a : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ef1d : a900             [ 2] 	lda #0
ef1f : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             
                             ;* Return memory footprint as follows:
                             ;* 0	Return free memory (start of vvt - end of he
                             ;* 1	Return program size (end of prg - start of p
                             ;* 2	Return size of vars (end of vnt - start of v
ef22 :                       df_rt_mem
                             ;	inc df_exeoff
ef22 : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used
ef25 : e001             [ 2] 	cpx #1
ef27 : f016             [ 3] 	beq df_rt_mem_prg
ef29 : e002             [ 2] 	cpx #2
ef2b : f024             [ 3] 	beq df_rt_mem_var
                             	; default is free memory
ef2d :                       df_rt_mem_free
                             	_cpyZPWord df_vvtstrt,df_tmpptra
                             
                             	_cpyZPWord df_starend,df_tmpptrb
                             
ef3d : 8022             [ 3] 	bra df_rt_mem_calc
ef3f :                       df_rt_mem_prg
                             	_cpyZPWord df_prgend,df_tmpptra
                             
                             	_cpyZPWord df_prgstrt,df_tmpptrb
                             
ef4f : 8010             [ 3] 	bra df_rt_mem_calc
ef51 :                       df_rt_mem_var
                             	_cpyZPWord df_vntend,df_tmpptra
                             
                             	_cpyZPWord df_vvtstrt,df_tmpptrb
                             
ef61 :                       df_rt_mem_calc
                             	; tmpa-tmpb result in X,A
ef61 : 38               [ 2] 	sec
ef62 : a5d7             [ 3] 	lda df_tmpptra
ef64 : e5d9             [ 3] 	sbc df_tmpptrb
ef66 : aa               [ 2] 	tax
ef67 : a5d8             [ 3] 	lda df_tmpptra+1
ef69 : e5da             [ 3] 	sbc df_tmpptrb+1
ef6b : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; %k=key(%sync) %sync>=1 means sync
ef6e :                       df_rt_get					; get is alias for key
ef6e :                       df_rt_key
                             ;	inc df_exeoff
ef6e : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; only low byte is used, check for sync or async
                             	; c=1 if x==0 else x>0 makes c=0
ef71 : e001             [ 2] 	cpx #1
ef73 : 20bdc5           [ 6] 	jsr io_get_ch
ef76 : 9003             [ 3] 	bcc df_rt_key_valid
                             	; zero out A
AS65 Assembler for R6502 [1.42].                                     Page  180
---------------------------------- bank1.s -----------------------------------

ef78 : a900             [ 2] 	lda #0
ef7a : 18               [ 2] 	clc
ef7b :                       df_rt_key_valid
ef7b : aa               [ 2] 	tax
ef7c : a900             [ 2] 	lda #0
ef7e : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             	
                             ; s = scrn(x,y)
ef81 :                       df_rt_scrn
                             ;	inc df_exeoff
ef81 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
ef84 : a6d7             [ 3] 	ldx df_tmpptra
ef86 : a4d9             [ 3] 	ldy df_tmpptrb
ef88 : 208ec3           [ 6] 	jsr _gr_get
ef8b : aa               [ 2] 	tax
ef8c : a900             [ 2] 	lda #0
ef8e : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             ; p = pixel(x,y)
ef91 :                       df_rt_pixel
                             ;	inc df_exeoff
ef91 : 2025dc           [ 6] 	jsr df_rt_parm_2ints
ef94 : a6d7             [ 3] 	ldx df_tmpptra
ef96 : a4d9             [ 3] 	ldy df_tmpptrb
ef98 : a900             [ 2] 	lda #0
ef9a : 4cd8f2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %e=elapsed(%var)
ef9d :                       df_rt_elapsed
                             	; now get lvar X,A from current statement
ef9d : 20b3dd           [ 6] 	jsr df_rt_getlvar
efa0 : e6be             [ 5] 	inc df_exeoff
                             	; save lvar in tmpb, vvt ptr in tmpa
efa2 : 86d9             [ 3] 	stx df_tmpptrb
efa4 : 85da             [ 3] 	sta df_tmpptrb+1
                             	; subtract vdp counter from value
efa6 : a001             [ 2] 	ldy #1	; This is in readiness to read high byte 
                             	; Safe read of vdp counter without disabling int
efa8 :                       df_rt_elapsed_rd
efa8 : a504             [ 3] 	lda vdp_int_cnt
efaa : a605             [ 3] 	ldx vdp_int_cnt+1
efac : c504             [ 3] 	cmp vdp_int_cnt			; If low counter changed due t
efae : d0f8             [ 3] 	bne df_rt_elapsed_rd
efb0 : 38               [ 2] 	sec
efb1 : f2d9             [ 5] 	sbc (df_tmpptrb)
efb3 : aa               [ 2] 	tax
efb4 : a505             [ 3] 	lda vdp_int_cnt+1
efb6 : f1d9             [ 5] 	sbc (df_tmpptrb),y
efb8 : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
efbb :                       df_rt_call
                             ;	inc df_exeoff
efbb : 2047dc           [ 6] 	jsr df_rt_parm_4ints
efbe : a5d9             [ 3] 	lda df_tmpptrb				; load A
efc0 : a6db             [ 3] 	ldx	df_tmpptrc				; load X
efc2 : a4dd             [ 3] 	ldy df_tmpptrd				; load Y
efc4 : 20caef           [ 6] 	jsr df_rt_calljsr
efc7 :                       df_rt_push_int1
efc7 : 4cdbf2           [ 3] 	jmp df_ost_pushInt			; A,X pair is return value	
efca :                       df_rt_calljsr
efca : 6cd700           [ 6] 	jmp (df_tmpptra)			; tmpptra is address, return 
AS65 Assembler for R6502 [1.42].                                     Page  181
---------------------------------- bank1.s -----------------------------------

                             
                             
efcd :                       df_rt_sgn
                             ;	inc df_exeoff
efcd : 2064d9           [ 6] 	jsr df_rt_getnval
efd0 : 86d7             [ 3] 	stx df_tmpptra
efd2 : 05d7             [ 3] 	ora df_tmpptra
efd4 : f00f             [ 3] 	beq df_rt_sgn_z
efd6 : 2980             [ 2] 	and #0x80
efd8 : d006             [ 3] 	bne df_rt_sgn_n
efda : a201             [ 2] 	ldx #1
efdc : a900             [ 2] 	lda #0
efde : f0e7             [ 3] 	beq df_rt_push_int1			; Always
efe0 :                       df_rt_sgn_n
efe0 : a2ff             [ 2] 	ldx #0xff
efe2 : 8a               [ 2] 	txa
efe3 : d0e2             [ 3] 	bne df_rt_push_int1			; Always
efe5 :                       df_rt_sgn_z
efe5 : a200             [ 2] 	ldx #0
efe7 : 8a               [ 2] 	txa
efe8 : f0dd             [ 3] 	beq df_rt_push_int1			; Always
                             
                             ; addr(X)
efea :                       df_rt_addr
                             	; get lvar X,A from current statement
efea : 20b3dd           [ 6] 	jsr df_rt_getlvar
efed : e6be             [ 5] 	inc df_exeoff
efef : 4cdbf2           [ 3] 	jmp df_ost_pushInt
                             
                             
                             ; string length calculator
                             ; X,A = source
                             ; A = length not including zero
eff2 :                       df_rt_strlen_common
eff2 : 86d7             [ 3] 	stx df_tmpptra
eff4 : 85d8             [ 3] 	sta df_tmpptra+1
eff6 : a0ff             [ 2] 	ldy #0xff
eff8 :                       df_rt_strlen_count
eff8 : c8               [ 2] 	iny
eff9 : b1d7             [ 5] 	lda (df_tmpptra),y
effb : d0fb             [ 3] 	bne df_rt_strlen_count
effd : 98               [ 2] 	tya
effe : 60               [ 6] 	rts
                             
                             
                             ; common routine to extract a string
                             ; tmpa = source string
                             ; tmpb = dest string
                             ; tmpc = start pos
                             ; tmpd = endpos
efff :                       df_rt_str_extract
                             	; source string
efff : 20f3f2           [ 6] 	jsr df_ost_popStr
f002 : 86d7             [ 3] 	stx df_tmpptra
f004 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; destination is string accumulator
f006 : a5b0             [ 3] 	lda df_sevalptr
f008 : 85d9             [ 3] 	sta df_tmpptrb
f00a : a5b1             [ 3] 	lda df_sevalptr+1
f00c : 85da             [ 3] 	sta df_tmpptrb+1
                             	; start pos
f00e : a4db             [ 3] 	ldy df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  182
---------------------------------- bank1.s -----------------------------------

f010 : a200             [ 2] 	ldx #0
f012 :                       df_rt_str_cpy_ch
f012 : c4dd             [ 3] 	cpy df_tmpptrd
f014 : f011             [ 3] 	beq df_str_src_end
f016 : b1d7             [ 5] 	lda (df_tmpptra),y
f018 : f00d             [ 3] 	beq df_str_src_end
f01a : 81d9             [ 6] 	sta (df_tmpptrb,x)
                             	_incZPWord df_tmpptrb
                             
f022 : c8               [ 2] 	iny
f023 : d0ed             [ 3] 	bne df_rt_str_cpy_ch
                             	SWBRK DFERR_STRLONG
                             
f027 :                       df_str_src_end
f027 : a900             [ 2] 	lda #0
f029 : 81d9             [ 6] 	sta (df_tmpptrb,x)
f02b : a6b0             [ 3] 	ldx df_sevalptr
f02d : a5b1             [ 3] 	lda df_sevalptr+1
f02f : 4cd0f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = chr(x)
f032 :                       df_rt_chr
                             ;	inc df_exeoff
                             	; get char in X
f032 : 2064d9           [ 6] 	jsr df_rt_getnval
f035 : a000             [ 2] 	ldy #0
                             	; transfer lo byte to A
f037 : 8a               [ 2] 	txa
f038 : 91b0             [ 5] 	sta (df_sevalptr),y
f03a : c8               [ 2] 	iny
                             	; zero terminator
f03b : a900             [ 2] 	lda #0
f03d : 91b0             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f03f : a6b0             [ 3] 	ldx df_sevalptr
f041 : a5b1             [ 3] 	lda df_sevalptr+1
f043 : 4cd0f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = hex(x)
f046 :                       df_rt_hex
                             ;	inc df_exeoff
                             	; create hex digits
f046 : 2064d9           [ 6] 	jsr df_rt_getnval
f049 : 85d7             [ 3] 	sta df_tmpptra	; Save the high byte
f04b : 8a               [ 2] 	txa				; Convert low byte first
f04c : 20f2c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
f04f : 85d9             [ 3] 	sta df_tmpptrb
f051 : 8a               [ 2] 	txa				; Push low digit of low byte from X
f052 : 48               [ 3] 	pha
f053 : a5d9             [ 3] 	lda df_tmpptrb	; Get A back from temp
f055 : 48               [ 3] 	pha				; Push high digit of low byte
f056 : a5d7             [ 3] 	lda df_tmpptra	; Get the high byte
f058 : 20f2c8           [ 6] 	jsr str_a_to_x	; Hex digits in A,X
                             	; create string
f05b : a000             [ 2] 	ldy #0			; Index in to string temp area
                             	; hi/hi
f05d : 91b0             [ 5] 	sta (df_sevalptr),y
f05f : c8               [ 2] 	iny
                             	; hi/lo
f060 : 8a               [ 2] 	txa
f061 : 91b0             [ 5] 	sta (df_sevalptr),y
f063 : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  183
---------------------------------- bank1.s -----------------------------------

                             	; lo/hi
f064 : 68               [ 4] 	pla
f065 : 91b0             [ 5] 	sta (df_sevalptr),y
f067 : c8               [ 2] 	iny
                             	; lo/lo
f068 : 68               [ 4] 	pla
f069 : 91b0             [ 5] 	sta (df_sevalptr),y
f06b : c8               [ 2] 	iny
                             	; zero terminator
f06c : a900             [ 2] 	lda #0
f06e : 91b0             [ 5] 	sta (df_sevalptr),y
                             	; point to seval scratch area
f070 : a6b0             [ 3] 	ldx df_sevalptr
f072 : a5b1             [ 3] 	lda df_sevalptr+1
f074 : 4cd0f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $c = dec(x)
f077 :                       df_rt_dec
f077 : 2064d9           [ 6] 	jsr df_rt_getnval
f07a : 18               [ 2] 	clc						; No leading zeros
f07b : 2039cb           [ 6] 	jsr int_to_str
                             	; point to num_buf scratch area
f07e : a289             [ 2] 	ldx #lo(num_buf)
f080 : a900             [ 2] 	lda #hi(num_buf)
f082 : 4cd0f2           [ 3] 	jmp df_ost_pushStr
                             
                             ; $l = left($s, x)
f085 :                       df_rt_left
                             ;	inc df_exeoff
                             
                             	; first get the string to act on
                             	; point to string accumulator
f085 : 201ada           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars
f088 : e6be             [ 5] 	inc df_exeoff
f08a : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract
f08d : 86dd             [ 3] 	stx df_tmpptrd
                             	; start position
f08f : a000             [ 2] 	ldy #0
f091 : 84db             [ 3] 	sty df_tmpptrc
f093 : 4cffef           [ 3] 	jmp df_rt_str_extract
                             
                             ; $r = right($s, x)
f096 :                       df_rt_right
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f096 : 201ada           [ 6] 	jsr df_rt_seval
                             	; now get the num of chars from the right
f099 : e6be             [ 5] 	inc df_exeoff
f09b : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; number of chars to extract from the right
f09e : 86db             [ 3] 	stx df_tmpptrc
                             	; end pos = len
f0a0 : a6b0             [ 3] 	ldx df_sevalptr
f0a2 : a5b1             [ 3] 	lda df_sevalptr+1
f0a4 : 20f2ef           [ 6] 	jsr df_rt_strlen_common
f0a7 : 85dd             [ 3] 	sta df_tmpptrd
                             	; subtract num chars to extract to get start pos
f0a9 : 38               [ 2] 	sec
f0aa : e5db             [ 3] 	sbc df_tmpptrc
AS65 Assembler for R6502 [1.42].                                     Page  184
---------------------------------- bank1.s -----------------------------------

f0ac : 85db             [ 3] 	sta df_tmpptrc
f0ae : 4cffef           [ 3] 	jmp df_rt_str_extract
                             
                             ; $m = mid($s, x, y)
f0b1 :                       df_rt_mid
                             ;	inc df_exeoff
                             	; first get the string to act on
                             	; point to string accumulator
f0b1 : 201ada           [ 6] 	jsr df_rt_seval
                             	; now get start of string segment
f0b4 : e6be             [ 5] 	inc df_exeoff
f0b6 : 206ad9           [ 6] 	jsr df_rt_neval
                             	; number of chars to extract
f0b9 : e6be             [ 5] 	inc df_exeoff
f0bb : 2064d9           [ 6] 	jsr df_rt_getnval
f0be : 86dd             [ 3] 	stx df_tmpptrd
                             	; start position
f0c0 : 20fbf2           [ 6] 	jsr df_ost_popInt
f0c3 : ca               [ 2] 	dex					; zero offset rather than 1
f0c4 : 86db             [ 3] 	stx df_tmpptrc
                             	; update end pos by adding start pos
f0c6 : 8a               [ 2] 	txa
f0c7 : 18               [ 2] 	clc
f0c8 : 65dd             [ 3] 	adc df_tmpptrd
f0ca : 85dd             [ 3] 	sta df_tmpptrd
f0cc : 4cffef           [ 3] 	jmp df_rt_str_extract
                             
                             ; %l = len($s)
f0cf :                       df_rt_len
                             ;	inc df_exeoff
                             	; evaluate the string in the string accumulator
f0cf : 201ada           [ 6] 	jsr df_rt_seval
f0d2 : 20f3f2           [ 6] 	jsr df_ost_popStr
                             	; now calculate the length of this string
f0d5 : 20f2ef           [ 6] 	jsr df_rt_strlen_common
f0d8 : 4cd8f2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = asc($s)
f0db :                       df_rt_asc
                             ;	inc df_exeoff
                             	; Evaluate string in the string accumulator
f0db : 201ada           [ 6] 	jsr df_rt_seval
f0de : 20f3f2           [ 6] 	jsr df_ost_popStr
                             	; Store point in ZP
f0e1 : 86d7             [ 3] 	stx df_tmpptra
f0e3 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; Find the character at beginning
f0e5 : a200             [ 2] 	ldx #0
f0e7 : a1d7             [ 6] 	lda (df_tmpptra,x)
f0e9 : 4cd8f2           [ 3] 	jmp df_ost_pushIntA
                             
                             ; %l = val($s)
f0ec :                       df_rt_val
                             ;	inc df_exeoff
                             	; evaluate the string
f0ec : 201ada           [ 6] 	jsr df_rt_seval
f0ef : 20f3f2           [ 6] 	jsr df_ost_popStr
f0f2 : a000             [ 2] 	ldy #0				; any numeric format
f0f4 : 203dc9           [ 6] 	jsr con_n_to_a		; result in num_a
f0f7 : b007             [ 4] 	bcs df_rt_val_err
f0f9 : a679             [ 3] 	ldx num_a
f0fb : a57a             [ 3] 	lda num_a+1
AS65 Assembler for R6502 [1.42].                                     Page  185
---------------------------------- bank1.s -----------------------------------

                             	; Save as an int
f0fd : 4cdbf2           [ 3] 	jmp df_ost_pushInt
f100 :                       df_rt_val_err
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ; stop execution
f102 :                       df_rt_abort
                             	SWBRK DFERR_ABORT
                             
                             
                             ;* ok=fcreate(filename)
f104 :                       df_rt_fcreate
f104 : 20c9eb           [ 6] 	jsr df_rt_parse_file
f107 : 20c6c5           [ 6] 	jsr io_open_write
f10a :                       df_rt_fcreate_check
                             	; Assume -1 which is OK
f10a : a2ff             [ 2] 	ldx #-1
f10c : 9002             [ 3] 	bcc df_rt_fcreate_ok
                             	; Else 0 which is error
f10e : a200             [ 2] 	ldx #0
f110 :                       df_rt_fcreate_ok
f110 : 8a               [ 2] 	txa				; make A=X
                             	; Save as an int
f111 : 20dbf2           [ 6] 	jsr df_ost_pushInt
                             	; Ensure we're back to the normal IO device
f114 : 4ca2c5           [ 3] 	jmp io_set_default
                             	
                             ;* ok=fopen(filename)
f117 :                       df_rt_fopen
f117 : 20c9eb           [ 6] 	jsr df_rt_parse_file
f11a : 20c3c5           [ 6] 	jsr io_open_read
f11d : 80eb             [ 3] 	bra df_rt_fcreate_check
                             
                             ;* ok=fclose()
f11f :                       df_rt_fclose
f11f : a902             [ 2] 	lda #2					; Only works for SD card now
f121 : 20a5c5           [ 6] 	jsr io_active_device
f124 : 20c9c5           [ 6] 	jsr io_close
                             	; Ensure we're back to the normal IO device
f127 : 4ca2c5           [ 3] 	jmp io_set_default
                             
                             ;* device <num>
f12a :                       df_rt_device
f12a : 2064d9           [ 6] 	jsr df_rt_getnval
                             	; Force update of status register
f12d : 8a               [ 2] 	txa
f12e : 300a             [ 3] 	bmi df_rt_device_default
                             	; Stop dflat from trying to read inputs for Ctrl
f130 : a592             [ 3] 	lda df_checkmsk
f132 : 0980             [ 2] 	ora #0x80
f134 : 8592             [ 3] 	sta df_checkmsk
f136 : 8a               [ 2] 	txa
                             	; A contains the device to activate
f137 : 4ca5c5           [ 3] 	jmp io_active_device
f13a :                       df_rt_device_default
                             	; Allow dflat to read inputs for Ctrl-C
f13a : a592             [ 3] 	lda df_checkmsk
f13c : 297f             [ 2] 	and #0x7f
f13e : 8592             [ 3] 	sta df_checkmsk
f140 : 4ca2c5           [ 3] 	jmp io_set_default
                             
AS65 Assembler for R6502 [1.42].                                     Page  186
---------------------------------- bank1.s -----------------------------------

f143 :                       mod_sz_rtsubs_e
                             
                             
                             	include "dflat/proc.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  PROC.S
                             ;*  dflat module to handle procedures:
                             ;*  - executing a procedure
                             ;*  - find a proc, pass local and non-local param
                             ;*  - return from a proc, unload locals
                             ;*  - save the definition of a proc in the VNT an
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f143 :                       mod_sz_proc_s
                             
f143 :                       df_rt_proc_parmerr
f143 :                       df_rt_deferr
                             	SWBRK DFERR_PROCPARM
                             
                             
                             
                             ; call procedure
f145 :                       df_rt_proc
                             	; move past escape token
f145 : a4be             [ 3] 	ldy df_exeoff
f147 : c8               [ 2] 	iny
                             	; Get VVT address X,A and procptr
f148 : b1bc             [ 5] 	lda (df_currlin),y
f14a : aa               [ 2] 	tax
f14b : c8               [ 2] 	iny
f14c : b1bc             [ 5] 	lda (df_currlin),y
f14e : c8               [ 2] 	iny
f14f : 84be             [ 3] 	sty df_exeoff
f151 : 86c4             [ 3] 	stx df_procptr
f153 : 85c5             [ 3] 	sta df_procptr+1
                             	
                             	; is index 0 (held in dim1)
                             	; then need to find the procedure
f155 : a003             [ 2] 	ldy #DFVVT_DIM1
f157 : b1c4             [ 5] 	lda (df_procptr),y
f159 : d014             [ 3] 	bne df_rt_proc_addr
                             	; find proc
f15b : 2053dd           [ 6] 	jsr df_rt_findproc
                             	; save y (line index)
f15e : 8439             [ 3] 	sty tmp_d
                             	; now go and update the proc vvt address
f160 : a002             [ 2] 	ldy #DFVVT_HI
f162 : 91c4             [ 5] 	sta (df_procptr),y
f164 : a001             [ 2] 	ldy #DFVVT_LO
f166 : 8a               [ 2] 	txa
f167 : 91c4             [ 5] 	sta (df_procptr),y
AS65 Assembler for R6502 [1.42].                                     Page  187
---------------------------------- bank1.s -----------------------------------

f169 : a003             [ 2] 	ldy #DFVVT_DIM1
                             	; get back line index in to A
f16b : a539             [ 3] 	lda tmp_d
f16d : 91c4             [ 5] 	sta (df_procptr),y
f16f :                       df_rt_proc_addr
                             	; move past first open bracket
f16f : e6be             [ 5] 	inc df_exeoff
                             	
                             	; get parm count
f171 : a004             [ 2] 	ldy #DFVVT_DIM2
f173 : b1c4             [ 5] 	lda (df_procptr),y	
f175 : f018             [ 3] 	beq df_rt_proc_parm_none
                             	; push the right number of parms on
f177 : 48               [ 3] 	pha
                             
f178 : c6be             [ 5] 	dec df_exeoff		; Pre-adjust
f17a :                       df_rt_proc_push_parm
                             	; move past comma or opening bracket
f17a : e6be             [ 5] 	inc df_exeoff
                             	; if at end then error!
f17c : a4be             [ 3] 	ldy df_exeoff
f17e : b1bc             [ 5] 	lda (df_currlin),y
f180 : c929             [ 2] 	cmp #')'
f182 : f0bf             [ 3] 	beq df_rt_proc_parmerr
                             	; else try and evaluate
f184 : 206ad9           [ 6] 	jsr df_rt_neval
                             	; get parm count off stack
f187 : 68               [ 4] 	pla
                             	; decrement
f188 : 38               [ 2] 	sec
f189 : e901             [ 2] 	sbc #1
                             	; and put back on stack
f18b : 48               [ 3] 	pha
                             	; go back and do all required parms
f18c : d0ec             [ 3] 	bne df_rt_proc_push_parm
                             	; remove parm counter from stack
f18e :                       df_rt_proc_parm_done
f18e : 68               [ 4] 	pla
f18f :                       df_rt_proc_parm_none
                             	; should be at close bracket
f18f : a4be             [ 3] 	ldy df_exeoff
f191 : b1bc             [ 5] 	lda (df_currlin),y
f193 : c929             [ 2] 	cmp #')'
f195 : d0ac             [ 3] 	bne df_rt_proc_parmerr
                             	; should be no more parms
                             	; ok, finally we have all parms on rt stack
                             	; now execute the procedure
                             	; get back the proc address
f197 : a6c4             [ 3] 	ldx df_procptr
f199 : a5c5             [ 3] 	lda df_procptr+1
                             ;	bne df_rt_exec_proc		; ALWAYS as procptr+1 !=0
                             	
                             ; executing a procedure in VVT slot A,X
f19b :                       df_rt_exec_proc
                             	; save slot address
f19b : 86d7             [ 3] 	stx df_tmpptra
f19d : 85d8             [ 3] 	sta df_tmpptra+1
                             	
                             	; need to save all important vars
f19f : a5bc             [ 3] 	lda df_currlin
f1a1 : 48               [ 3] 	pha
f1a2 : a5bd             [ 3] 	lda df_currlin+1
AS65 Assembler for R6502 [1.42].                                     Page  188
---------------------------------- bank1.s -----------------------------------

f1a4 : 48               [ 3] 	pha
f1a5 : a5be             [ 3] 	lda df_exeoff
f1a7 : 48               [ 3] 	pha
f1a8 : a5b5             [ 3] 	lda df_nxtstidx
f1aa : 48               [ 3] 	pha
f1ab : a5b6             [ 3] 	lda df_curstidx
f1ad : 48               [ 3] 	pha
f1ae : a5b4             [ 3] 	lda df_eolidx
f1b0 : 48               [ 3] 	pha
f1b1 : a5c9             [ 3] 	lda df_ifnest
f1b3 : 48               [ 3] 	pha
                             
                             	; now initialise the data
f1b4 : a001             [ 2] 	ldy #DFVVT_LO
f1b6 : b1d7             [ 5] 	lda (df_tmpptra),y
f1b8 : 85bc             [ 3] 	sta df_currlin
f1ba : c8               [ 2] 	iny
f1bb : b1d7             [ 5] 	lda (df_tmpptra),y
f1bd : 85bd             [ 3] 	sta df_currlin+1
f1bf : c8               [ 2] 	iny
f1c0 : b1d7             [ 5] 	lda (df_tmpptra),y
f1c2 : 85be             [ 3] 	sta df_exeoff
f1c4 : 85b6             [ 3] 	sta df_curstidx
f1c6 : a000             [ 2] 	ldy #0		; hmm XXXXX might need to be tay to get 
f1c8 : b1bc             [ 5] 	lda (df_currlin),y
f1ca : 85b5             [ 3] 	sta df_nxtstidx
                             	; now execute statements
f1cc : 2095dc           [ 6] 	jsr df_rt_exec_stat
                             ;	bcs df_rt_exec_proc_err
                             	; now restore the position
f1cf : 68               [ 4] 	pla
f1d0 : 85c9             [ 3] 	sta df_ifnest
f1d2 : 68               [ 4] 	pla
f1d3 : 85b4             [ 3] 	sta df_eolidx
f1d5 : 68               [ 4] 	pla
f1d6 : 85b6             [ 3] 	sta df_curstidx
f1d8 : 68               [ 4] 	pla
f1d9 : 85b5             [ 3] 	sta df_nxtstidx
f1db : 68               [ 4] 	pla
f1dc : 85be             [ 3] 	sta df_exeoff
f1de : 68               [ 4] 	pla
f1df : 85bd             [ 3] 	sta df_currlin+1
f1e1 : 68               [ 4] 	pla
f1e2 : 85bc             [ 3] 	sta df_currlin
                             	; should be all restored, so return
f1e4 : 60               [ 6] 	rts
                             
                             
f1e5 :                       df_rt_def
                             	; line offset pointing at DFTK_PROC
                             	; skip over PROC address and open bracket
f1e5 : a6be             [ 3] 	ldx df_exeoff
f1e7 : e8               [ 2] 	inx
f1e8 : e8               [ 2] 	inx
f1e9 : e8               [ 2] 	inx
f1ea : 86be             [ 3] 	stx df_exeoff
                             	; parms on stack in reverse order to parm list
                             	; so get each parm and type and save to scratch
f1ec : a201             [ 2] 	ldx #1									; index in to scratch
f1ee : 86c2             [ 3] 	stx df_procargs							; Proc args is the #args-1
f1f0 : a4be             [ 3] 	ldy df_exeoff
f1f2 :                       df_rt_def_find_var
AS65 Assembler for R6502 [1.42].                                     Page  189
---------------------------------- bank1.s -----------------------------------

f1f2 : c8               [ 2] 	iny
f1f3 : b1bc             [ 5] 	lda (df_currlin),y
                             	; check if end of parm list
f1f5 : c929             [ 2] 	cmp #')'
f1f7 : f021             [ 4] 	beq df_rt_def_parm_done
                             	; else check if found a variable escape token (<
f1f9 : c911             [ 2] 	cmp #DFTK_VAR
f1fb : f007             [ 4] 	beq df_rt_def_got_var
                             	; else check if non-local specifier
f1fd : c926             [ 2] 	cmp #DFTK_VARPARM						; This is a regular ASCII
f1ff : d0f1             [ 3] 	bne df_rt_def_find_var
f201 :                       df_rt_def_got_varparm
                             	; set high bit
f201 : 0980             [ 2] 	ora #0x80
                             	; advance over non-local specifier
f203 : c8               [ 2] 	iny
f204 :                       df_rt_def_got_var
f204 : 4980             [ 2] 	eor #0x80			; If was set by '&' qualifier then w
f206 : 9d0009           [ 5] 	sta scratch,x		; Save parm type (by value or ref
                             	; get address and save in scratch
f209 : c8               [ 2] 	iny
f20a : b1bc             [ 5] 	lda (df_currlin),y
f20c : 9d2009           [ 5] 	sta scratch+32,x	; Hope 32 params is enough! :-)
f20f : c8               [ 2] 	iny
f210 : b1bc             [ 5] 	lda (df_currlin),y
f212 : 9d4009           [ 5] 	sta scratch+64,x
f215 : e8               [ 2] 	inx
f216 : e6c2             [ 5] 	inc df_procargs
f218 : d0d8             [ 4] 	bne df_rt_def_find_var  ; always - relies not ze
f21a :                       df_rt_def_parm_done
                             	; save index that we got to
f21a : 84be             [ 3] 	sty df_exeoff
                             	; save def param list position in temp
f21c : 86c1             [ 3] 	stx df_procmode
                             	; all var indices on the operator stack
                             	; now load up variables with parameters
                             	; initially assume no locals
f21e : a900             [ 2] 	lda #0
f220 : 85c3             [ 3] 	sta df_procloc
f222 :                       df_rt_def_load_var
f222 : c6c2             [ 5] 	dec df_procargs
f224 : f02f             [ 3] 	beq df_rt_def_load_var_done
                             	; get var address
f226 : c6c1             [ 5] 	dec df_procmode
f228 : a6c1             [ 3] 	ldx df_procmode
f22a : bd2009           [ 4] 	lda scratch+32,x
f22d : 85d7             [ 3] 	sta df_tmpptra
f22f : bd4009           [ 4] 	lda scratch+64,x
f232 : 85d8             [ 3] 	sta df_tmpptra+1
                             	
f234 : bd0009           [ 4] 	lda scratch,x
                             	; if MSB is clear then this is not a local varia
                             	; so just go an initialise with stacking
f237 : 1009             [ 3] 	bpl df_rt_def_initialise_parm
                             	; else call the local handling code to 
                             	; push the var address on to the runtime stack
f239 : a6d7             [ 3] 	ldx df_tmpptra
f23b : a5d8             [ 3] 	lda df_tmpptra+1
f23d : 2089f2           [ 6] 	jsr df_rt_proc_local
                             	; increment number of locals
f240 : e6c3             [ 5] 	inc df_procloc
f242 :                       df_rt_def_initialise_parm
AS65 Assembler for R6502 [1.42].                                     Page  190
---------------------------------- bank1.s -----------------------------------

                             	; load type
f242 : a000             [ 2] 	ldy #DFVVT_TYPE
f244 : b1d7             [ 5] 	lda (df_tmpptra),y
f246 : a8               [ 2] 	tay					; Put the type into Y
f247 : 20fdf2           [ 6] 	jsr df_ost_popParmX	; Try to get this off the st
                             	; update the variable
f24a : a002             [ 2] 	ldy #DFVVT_HI
f24c : 91d7             [ 5] 	sta (df_tmpptra),y
f24e : 88               [ 2] 	dey
f24f : 8a               [ 2] 	txa
f250 : 91d7             [ 5] 	sta (df_tmpptra),y
                             
f252 : 4c22f2           [ 3] 	jmp df_rt_def_load_var
f255 :                       df_rt_def_load_var_done
                             	; save the number of local parameters found so t
                             	; be unloaded when the proc ends
f255 : a5c3             [ 3] 	lda df_procloc
f257 : 209df2           [ 6] 	jsr df_rst_pushByte
                             	; continue with next statement
f25a : 18               [ 2] 	clc
f25b : 60               [ 6] 	rts
                             
                             	
                             ; return a value
f25c :                       df_rt_return
                             	; evaluate the return and put on the parameter s
                             	; then process this like an end of procedure
f25c : 206ad9           [ 6] 	jsr df_rt_neval
                             ; end def for a proc
f25f :                       df_rt_enddef
                             	; unload any locals
                             ;	jsr df_rt_proc_unlocal
                             	; nothing to do - main loop will terminate
                             ;	clc
                             ;	rts
                             ; enddef falls through to the unlocal code	
                             	
                             ; unload any local variables from runtime stack
                             ;df_rt_proc_unlocal
f25f : 20a6f2           [ 6] 	jsr df_rst_popByte
f262 : aa               [ 2] 	tax
f263 : f020             [ 3] 	beq df_rt_proc_unload_done
f265 :                       df_rt_proc_unloadvar
f265 : 8a               [ 2] 	txa
f266 : 48               [ 3] 	pha
                             	; var value is popped first then index
                             	; get a word and put in tmpb
f267 : 20c3f2           [ 6] 	jsr df_rst_popWord
f26a : 86d9             [ 3] 	stx df_tmpptrb
f26c : 85da             [ 3] 	sta df_tmpptrb+1
                             	; get the var address
f26e : 20c3f2           [ 6] 	jsr df_rst_popWord
f271 : 86d7             [ 3] 	stx df_tmpptra
f273 : 85d8             [ 3] 	sta df_tmpptra+1
                             	; store lo byte first
f275 : a001             [ 2] 	ldy #DFVVT_LO
f277 : a5d9             [ 3] 	lda df_tmpptrb
f279 : 91d7             [ 5] 	sta (df_tmpptra),y
                             	; then hi
f27b : c8               [ 2] 	iny
f27c : a5da             [ 3] 	lda df_tmpptrb+1
f27e : 91d7             [ 5] 	sta (df_tmpptra),y
AS65 Assembler for R6502 [1.42].                                     Page  191
---------------------------------- bank1.s -----------------------------------

                             	; restore counter
f280 : 68               [ 4] 	pla
f281 : aa               [ 2] 	tax
f282 : ca               [ 2] 	dex
f283 : d0e0             [ 3] 	bne df_rt_proc_unloadvar
f285 :                       df_rt_proc_unload_done
f285 : 68               [ 4] 	pla					; Pull the return address off stack
f286 : 68               [ 4] 	pla					; to get to the previous level
f287 : 18               [ 2] 	clc
f288 : 60               [ 6] 	rts
                             	
                             ; push a local variable to the runtime stack
                             ; X,A = var slot
f289 :                       df_rt_proc_local
                             	; save address
f289 : 86d7             [ 3] 	stx df_tmpptra
f28b : 85d8             [ 3] 	sta df_tmpptra+1
                             	; push var slot on rt stack
f28d : 20b5f2           [ 6] 	jsr df_rst_pushWord
f290 :                       df_rt_proc_local_load	
                             	; load x,a with var value lo,hi
f290 : a001             [ 2] 	ldy #DFVVT_LO
f292 : b1d7             [ 5] 	lda (df_tmpptra),y
f294 : aa               [ 2] 	tax
f295 : c8               [ 2] 	iny
f296 : b1d7             [ 5] 	lda (df_tmpptra),y
                             	; push word on to rt stack
f298 : 20b5f2           [ 6] 	jsr df_rst_pushWord
f29b : 18               [ 2] 	clc
f29c : 60               [ 6] 	rts
                             		
f29d :                       mod_sz_proc_e
                             
                             
f29d :                       mod_sz_runtime_e
                             
                             
                             
                             	include "dflat/stack.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  STACK.S
                             ;*  This module implements the dflat software sta
                             ;*  needs a few stacks:
                             ;*  - 6502 stack for expression parsing and reent
                             ;*  - dflat runtime stack for things like for/nex
                             ;*  - dflat parameter stack for passing parameter
                             ;*  The two software stacks are implemented in th
                             ;*  with the operator stack growing up from 0 and
                             ;*  runtime stack growing down from 255.  Hopeful
                             ;*  don't meet as there are no checks for this at
                             ;*  purely because I want speed over friendliness
                             ;*  I may come to regret this!
                             ;*  I have also added the only runtime memory all
                             ;*  needed by dflat here.  Humourously I have cal
                             ;*  which is taken from the C language, but it's 
AS65 Assembler for R6502 [1.42].                                     Page  192
---------------------------------- bank1.s -----------------------------------

                             ;*  grab some memory after end the of dflat progr
                             ;*  arrays - which of course cannot have storage 
                             ;*  tokenisation time (e.g. because I dimension a
                             ;*  a size from a variable).
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             
                             ;****************************************
                             ;* Push a byte on to runtime stack
                             ;* A = byte
                             ;****************************************
f29d :                       df_rst_pushByte
f29d : a4ac             [ 3] 	ldy df_rtstop
f29f : 99000b           [ 5] 	sta df_rtstck,y
f2a2 : 88               [ 2] 	dey
f2a3 : 84ac             [ 3] 	sty df_rtstop
f2a5 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f2a6 :                       df_rst_popByte
f2a6 : a4ac             [ 3] 	ldy df_rtstop
f2a8 : c8               [ 2] 	iny
f2a9 : b9000b           [ 4] 	lda df_rtstck,y
f2ac : 84ac             [ 3] 	sty df_rtstop
f2ae : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Peek a byte off runtime stack
                             ;* A = byte
                             ;****************************************
f2af :                       df_rst_peekByte
f2af : a4ac             [ 3] 	ldy df_rtstop
                             	; Look at what is below top of stack
                             	; below means the next address up as
                             	; this stack grows downwards like 6502
f2b1 : b9010b           [ 4] 	lda df_rtstck+1,y
f2b4 : 60               [ 6] 	rts
                             	
                             ;****************************************
                             ;* Push a word on to runtime stack
                             ;* X,A = word lo,hi
                             ;****************************************
f2b5 :                       df_rst_pushWord
f2b5 : a4ac             [ 3] 	ldy df_rtstop
f2b7 : 99000b           [ 5] 	sta df_rtstck,y
f2ba : 88               [ 2] 	dey
f2bb : 8a               [ 2] 	txa
f2bc : 99000b           [ 5] 	sta df_rtstck,y
f2bf : 88               [ 2] 	dey
f2c0 : 84ac             [ 3] 	sty df_rtstop
f2c2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a word off runtime stack
                             ;* X,A = word lo,hi
AS65 Assembler for R6502 [1.42].                                     Page  193
---------------------------------- bank1.s -----------------------------------

                             ;****************************************
f2c3 :                       df_rst_popWord
f2c3 : a4ac             [ 3] 	ldy df_rtstop
f2c5 : c8               [ 2] 	iny
f2c6 : be000b           [ 4] 	ldx df_rtstck,y
f2c9 : c8               [ 2] 	iny
f2ca : b9000b           [ 4] 	lda df_rtstck,y
f2cd : 84ac             [ 3] 	sty df_rtstop
f2cf : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Push a string pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f2d0 :                       df_ost_pushStr
f2d0 : a004             [ 2] 	ldy #DFST_STR
f2d2 : d009             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             
                             ;****************************************
                             ;* Push a general pointer on to parm stack
                             ;* X,A - int
                             ;****************************************
f2d4 :                       df_ost_pushPtr
f2d4 : a0ff             [ 2] 	ldy #DFST_PTR
f2d6 : d005             [ 3] 	bne df_ost_pushParmX		; ALWAYS!
                             	
                             ;****************************************
                             ;* Push A on to parm stack
                             ;* X,A - int
                             ;****************************************
f2d8 :                       df_ost_pushIntA
f2d8 : aa               [ 2] 	tax
f2d9 : a900             [ 2] 	lda #0
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push an int on to parm stack
                             ;* X,A - int
                             ;****************************************
f2db :                       df_ost_pushInt
f2db : a003             [ 2] 	ldy #DFST_INT
                             	; ***FALLS THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Push a parameter on to parm stack
                             ;* X,A - int
                             ;* Y - type
                             ;****************************************
f2dd :                       df_ost_pushParmX
f2dd : 8439             [ 3] 	sty tmp_d		; Save Type
f2df : a4ad             [ 3] 	ldy df_parmtop	; Get stack index
                             	; push high byte first (A)
f2e1 : 99000b           [ 5] 	sta df_rtstck,y
f2e4 : c8               [ 2] 	iny
                             	; push low byte next (X)
f2e5 : 8a               [ 2] 	txa
f2e6 : 99000b           [ 5] 	sta df_rtstck,y
f2e9 : c8               [ 2] 	iny
f2ea : a539             [ 3] 	lda tmp_d		; get Type
f2ec : 99000b           [ 5] 	sta df_rtstck,y
f2ef : c8               [ 2] 	iny
                             	; save new top of stack
AS65 Assembler for R6502 [1.42].                                     Page  194
---------------------------------- bank1.s -----------------------------------

f2f0 : 84ad             [ 3] 	sty df_parmtop
f2f2 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Pop a string pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f2f3 :                       df_ost_popStr
f2f3 : a904             [ 2] 	lda #DFST_STR
f2f5 : d006             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             	
                             ;****************************************
                             ;* Pop a general pointer off parm stack
                             ;* X,A - int
                             ;****************************************
f2f7 :                       df_ost_popPtr
f2f7 : a9ff             [ 2] 	lda #0xff
f2f9 : d002             [ 3] 	bne df_ost_popParmX			; ALWAYS!
                             		
                             ;****************************************
                             ;* Pop an int off parm stack
                             ;* X,A - int
                             ;****************************************
f2fb :                       df_ost_popInt
f2fb : a903             [ 2] 	lda #DFST_INT
                             	; ***FALL THROUGH TO NEXT ROUTINE***
                             
                             ;****************************************
                             ;* Pop parameter from the stack
                             ;* X,A - int
                             ;* A - type expected
                             ;****************************************
f2fd :                       df_ost_popParmX
f2fd : a4ad             [ 3] 	ldy df_parmtop
                             	; pull type first
f2ff : 88               [ 2] 	dey
f300 : 39000b           [ 4] 	and df_rtstck,y
f303 : f00b             [ 3] 	beq df_st_typemismatcherr
                             	; pull low byte first
f305 : 88               [ 2] 	dey
f306 : be000b           [ 4] 	ldx df_rtstck,y
                             	; pull high byte next
f309 : 88               [ 2] 	dey
f30a : b9000b           [ 4] 	lda df_rtstck,y
                             	; save new top of stack
f30d : 84ad             [ 3] 	sty df_parmtop
f30f : 60               [ 6] 	rts
f310 :                       df_st_typemismatcherr
                             	SWBRK DFERR_TYPEMISM
                             
                             
                             ;****************************************
                             ;* Return type on top of stack
                             ;* A - type
                             ;****************************************
f312 :                       df_ost_peekType
f312 : a4ad             [ 3] 	ldy df_parmtop
f314 : b9ff0a           [ 4] 	lda df_rtstck-1,y
f317 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* Allocate space on the heap
AS65 Assembler for R6502 [1.42].                                     Page  195
---------------------------------- bank1.s -----------------------------------

                             ;* X, A = Number of bytes to allocate
                             ;* X, A return address of allocated space
                             ;****************************************
f318 :                       df_st_malloc
                             	; save A in Y
f318 : a8               [ 2] 	tay
                             	; save old starend
f319 : a5ab             [ 3] 	lda df_starend+1
f31b : 48               [ 3] 	pha
f31c : a5aa             [ 3] 	lda df_starend
f31e : 48               [ 3] 	pha
                             	; restore A from Y
f31f : 98               [ 2] 	tya
                             	; add X,A to starend
f320 : 48               [ 3] 	pha
f321 : 8a               [ 2] 	txa
f322 : 18               [ 2] 	clc
f323 : 65aa             [ 3] 	adc df_starend
f325 : 85aa             [ 3] 	sta df_starend
f327 : 68               [ 4] 	pla
f328 : 65ab             [ 3] 	adc df_starend+1
f32a : 85ab             [ 3] 	sta df_starend+1
                             	; return old starend as start of space
f32c : 68               [ 4] 	pla
f32d : aa               [ 2] 	tax
f32e : 68               [ 4] 	pla
f32f : 60               [ 6] 	rts
                             	
                             
                             ;****************************************
                             ;* df_init
                             ;* Initialise dflat language settings
                             ;****************************************
f330 :                       df_init
                             	; Initialise top of memory to default
                             	; This can be overridden by himem command
f330 : a900             [ 2] 	lda #lo(DF_MEMTOP)
f332 : 8db40c           [ 4] 	sta df_memtop
f335 : a9c0             [ 2] 	lda #hi(DF_MEMTOP)
f337 : 8db50c           [ 4] 	sta df_memtop+1
                             
                             	; Init program space
f33a : 203df3           [ 6] 	jsr df_clear
                             
                             	; Initialise assembler
                             ;	jsr asm_init
                             
                             ;	rts
                             
                             
                             ;****************************************
                             ;* df_clear
                             ;* Initialise program space
                             ;****************************************
f33d :                       df_clear
                             	; Start of program space
f33d : a9b6             [ 2] 	lda #lo(DF_PROGSTART)
f33f : 859b             [ 3] 	sta df_prgstrt
f341 : 859d             [ 3] 	sta df_prgend
f343 : a90c             [ 2] 	lda #hi(DF_PROGSTART)
f345 : 859c             [ 3] 	sta df_prgstrt+1
f347 : 859e             [ 3] 	sta df_prgend+1
AS65 Assembler for R6502 [1.42].                                     Page  196
---------------------------------- bank1.s -----------------------------------

                             	; Terminal value in prog space
f349 : a900             [ 2] 	lda #0
f34b : a8               [ 2] 	tay
f34c : 919b             [ 5] 	sta (df_prgstrt),y
                             	; No variables - zero the count
f34e : 85a7             [ 3] 	sta df_varcnt
                             
                             	; Variable value table
                             	; Grows down from mem top
f350 : adb40c           [ 4] 	lda df_memtop
f353 : 85a3             [ 3] 	sta df_vvtstrt
f355 : 85a5             [ 3] 	sta df_vvtend
f357 : adb50c           [ 4] 	lda df_memtop+1
f35a : 85a4             [ 3] 	sta df_vvtstrt+1
f35c : 85a6             [ 3] 	sta df_vvtend+1
                             
                             	; Variable name table
                             	; Grows down from mem top
f35e : a5a3             [ 3] 	lda df_vvtstrt
f360 : 859f             [ 3] 	sta df_vntstrt
f362 : 85a1             [ 3] 	sta df_vntend
f364 : a5a4             [ 3] 	lda df_vvtstrt+1
f366 : 85a0             [ 3] 	sta df_vntstrt+1
f368 : 85a2             [ 3] 	sta df_vntend+1
                             
                             	; String accumulator
f36a : a900             [ 2] 	lda #lo(scratch)
f36c : 85b0             [ 3] 	sta df_sevalptr
f36e : a909             [ 2] 	lda #hi(scratch)
f370 : 85b1             [ 3] 	sta df_sevalptr+1
                             
f372 : 60               [ 6] 	rts
                             
f373 :                       mod_sz_dflat_e
                             
                             	include "dflat\error.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.S
                             ;*  Error handling module.
                             ;*  Whan an error is thrown using BRK, this modul
                             ;*  displaying the error plus any associated line
                             ;*  if it was running a program.  It then resets 
                             ;*  settings and takes the system back to program
                             ;*  mode.  The message uses the general IO handle
                             ;*  output must be set to the right place else fo
                             ;*	the error message will be written to tape!
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code
                             	include "dflat/error.i"
                             ;************************************************
                             ;*
                             ;*	BBC128
AS65 Assembler for R6502 [1.42].                                     Page  197
---------------------------------- bank1.s -----------------------------------

                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  ERROR.I
                             ;*  Error definitions file.
                             ;*  The macro to throw an error is elswhere, but 
                             ;*  It issues a 6502 BRK commmand with the next b
                             ;*  the error code.  The BRK handler then picks u
                             ;*  code and shows the appropriate message plus a
                             ;*  number if a program was running.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Error message numbers
0000 =                       DFERR_OK		=	0
0001 =                       DFERR_SYNTAX	=	1
0002 =                       DFERR_TYPEMISM	=	2
0003 =                       DFERR_DIM		=	3
0004 =                       DFERR_UNTIL		=	4
0005 =                       DFERR_NOPROC	=	5
0006 =                       DFERR_PROCPARM	=	6
0007 =                       DFERR_IMMEDIATE	=	7
0008 =                       DFERR_UNCLOSEDIF=	8
0009 =                       DFERR_NOIF		=	9
000a =                       DFERR_NEXTFOR	=	10
000b =                       DFERR_FNAME		=	11
000c =                       DFERR_STRLONG	=	12
000d =                       DFERR_BREAK		=	13
000e =                       DFERR_NODATA	=	14
000f =                       DFERR_WEND		=	15
0010 =                       DFERR_NOLINE	=	16
0011 =                       DFERR_RETURN	=	17
0012 =                       DFERR_ABORT		=	18
0013 =                       DFERR_QUANTITY	=	19
0014 =                       DFERR_NOORG		=	20
                             
                             
                             
                             
                             
                             ; Error message table, each msg null terminated
f373 :                       df_tk_errortab
f373 : 4f6b00                	db	"Ok", 0
f376 : 53796e74617800        	db	"Syntax", 0
f37d : 5479706500            	db	"Type", 0
f382 : 52652d64696d00        	db	"Re-dim", 0
f389 : 4e6f2072657065..      	db	"No repeat", 0
f393 : 4e6f206465666e00      	db	"No defn", 0
f39b : 5061726d00            	db	"Parm", 0
f3a0 : 456e64656400          	db	"Ended", 0
f3a6 : 4e6f20656e6469..      	db	"No endif", 0
f3af : 4e6f20696600          	db	"No if", 0
f3b5 : 4e6f20666f7200        	db	"No for", 0
f3bc : 4e6f7420666f75..      	db	"Not found", 0
f3c6 : 546f6f206c6f6e..      	db	"Too long", 0
f3cf : 427265616b00          	db	"Break", 0
f3d5 : 4e6f206461746100      	db	"No data", 0
AS65 Assembler for R6502 [1.42].                                     Page  198
---------------------------------- bank1.s -----------------------------------

f3dd : 4e6f207768696c..      	db	"No while", 0
f3e6 : 4e6f206c696e6500      	db	"No line", 0
f3ee : 4e6f2072657475..      	db	"No return ", 0
f3f9 : 41626f7274656400      	db	"Aborted", 0
f401 : 426f756e647300        	db	"Bounds", 0
f408 : 4e6f206f726700        	db	"No org", 0
f40f : 00                    	db	0
                             
f410 :                       df_tk_error_inline
f410 : 20696e206c696e..      	db	" in line ", 0
f41a :                       df_tk_error_atpos
f41a : 20706f732000          	db	" pos ", 0
f420 :                       df_tk_error_error
f420 : 206572726f7200        	db	" error", 0
                             
                             ;****************************************
                             ;* df_trap_error
                             ;* Show an error message
                             ;* errno is error number
                             ;* currlin = Line number
                             ;* exeoff = offset
                             ;* at the end jump to program editor
                             ;****************************************
f427 :                       df_trap_error
                             	; set IO back to normal
f427 : 20a2c5           [ 6] 	jsr io_set_default
f42a : 58               [ 2] 	cli
                             
f42b : a973             [ 2] 	lda #lo(df_tk_errortab)
f42d : 85d7             [ 3] 	sta df_tmpptra
f42f : a9f3             [ 2] 	lda #hi(df_tk_errortab)
f431 : 85d8             [ 3] 	sta df_tmpptra+1
f433 : a693             [ 3] 	ldx errno				; 0 or >=128 goes to monitor
f435 : f002             [ 3] 	beq df_trap_go_monitor
f437 : 1003             [ 3] 	bpl df_trap_normal
f439 :                       df_trap_go_monitor
f439 : 4cb8f4           [ 3] 	jmp df_trap_monitor
f43c :                       df_trap_normal
f43c : a000             [ 2] 	ldy #0
f43e :                       df_show_err_find
                             	; If on a zero, then error table exhausted
                             	; so drop in to the monitor
f43e : b1d7             [ 5] 	lda (df_tmpptra),y
f440 : f076             [ 3] 	beq df_trap_monitor
                             	; Skip over this error text including zero termi
f442 :                       df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f448 : b1d7             [ 5] 	lda (df_tmpptra),y
f44a : d0f6             [ 3] 	bne df_show_err_skip
                             	_incZPWord df_tmpptra
                             
f452 : ca               [ 2] 	dex
f453 : d0e9             [ 3] 	bne df_show_err_find
                             	; Error message found
f455 : a6d7             [ 3] 	ldx df_tmpptra
f457 : a5d8             [ 3] 	lda df_tmpptra+1
f459 : 200bc6           [ 6] 	jsr io_print_line
f45c : a220             [ 2] 	ldx #lo(df_tk_error_error)
f45e : a9f4             [ 2] 	lda #hi(df_tk_error_error)
f460 : 200bc6           [ 6] 	jsr io_print_line
                             	; if line number <> 0 then print it
AS65 Assembler for R6502 [1.42].                                     Page  199
---------------------------------- bank1.s -----------------------------------

f463 : a001             [ 2] 	ldy #DFTK_LINNUM
f465 : b1bc             [ 5] 	lda (df_currlin),y
f467 : aa               [ 2] 	tax
f468 : c8               [ 2] 	iny
f469 : b1bc             [ 5] 	lda (df_currlin),y
f46b : d004             [ 3] 	bne df_show_err_linnum
f46d : e000             [ 2] 	cpx #0x00
f46f : f011             [ 3] 	beq df_show_err_fin
f471 :                       df_show_err_linnum
                             	_println df_tk_error_inline
                             
f47e : 18               [ 2] 	clc
f47f : 207ccb           [ 6] 	jsr print_a_to_d
f482 :                       df_show_err_fin
f482 : a4b2             [ 3] 	ldy df_linoff
f484 : f02b             [ 3] 	beq df_show_err_done
                             	_println df_tk_error_atpos
                             
f493 : 98               [ 2] 	tya
f494 : aa               [ 2] 	tax
f495 : a900             [ 2] 	lda #0
f497 : 18               [ 2] 	clc
f498 : 207ccb           [ 6] 	jsr print_a_to_d
f49b : 20c5c8           [ 6] 	jsr utilPrintCRLF
f49e : a000             [ 2] 	ldy #0
                             	; Show the error line with error pos inverse
f4a0 :                       def_show_err_line
f4a0 : b9000a           [ 4] 	lda df_linbuff,y
f4a3 : f00c             [ 3] 	beq df_show_err_done
f4a5 : c4b2             [ 3] 	cpy df_linoff
f4a7 : d002             [ 3] 	bne def_show_err_line_skip
f4a9 : 0980             [ 2] 	ora #0x80
f4ab :                       def_show_err_line_skip
f4ab : 20c0c5           [ 6] 	jsr io_put_ch
f4ae : c8               [ 2] 	iny
f4af : d0ef             [ 3] 	bne def_show_err_line	; Always
f4b1 :                       df_show_err_done
f4b1 : 20c5c8           [ 6] 	jsr utilPrintCRLF
f4b4 : 18               [ 2] 	clc
                             	; back to editor
f4b5 : 4c47d8           [ 3] 	jmp df_pg_dflat
                             
                             
                             ; For unknown errors, jump to monitor
f4b8 :                       df_trap_monitor
                             	; Print PC
                             	_println_low df_msg_pc
                             
f4bf : a599             [ 3] 	lda df_brkpc+1
f4c1 : 20cdc8           [ 6] 	jsr utilPrintA
f4c4 : a598             [ 3] 	lda df_brkpc
f4c6 : 20cdc8           [ 6] 	jsr utilPrintA
f4c9 : 20bdc8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print A
                             	_println_low df_msg_acc
                             
f4d3 : a579             [ 3] 	lda num_a
f4d5 : 20cdc8           [ 6] 	jsr utilPrintA
f4d8 : 20bdc8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print X
AS65 Assembler for R6502 [1.42].                                     Page  200
---------------------------------- bank1.s -----------------------------------

                             	_println_low df_msg_xreg
                             
f4e2 : a57a             [ 3] 	lda num_a+1
f4e4 : 20cdc8           [ 6] 	jsr utilPrintA
f4e7 : 20bdc8           [ 6] 	jsr utilPrintSPC
                             
                             	; Print Y
                             	_println_low df_msg_yreg
                             
f4f1 : a57b             [ 3] 	lda num_a+2
f4f3 : 20cdc8           [ 6] 	jsr utilPrintA
f4f6 : 20c5c8           [ 6] 	jsr utilPrintCRLF
                             
f4f9 : 20cde0           [ 6] 	jsr df_rt_monitor
                             	; back to editor
f4fc : 4c47d8           [ 3] 	jmp df_pg_dflat
                             
f4ff :                       df_msg_pc
f4ff : 50433a00              	db "PC:\x0"
f503 :                       df_msg_acc
f503 : 413a00                	db "A:\x0"
f506 :                       df_msg_xreg
f506 : 583a00                	db "X:\x0"
f509 :                       df_msg_yreg
f509 : 593a00                	db "Y:\x0"
                             
                             	include	"dflat\asm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*  This is the main controller code file for the
                             ;*  This file includes all the required source fi
                             ;*	in addition to dflat.s
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f50c :                       mod_sz_asm_s
                             
                             	;	dflat.s is already included, so just the addit
                             	include "dflat\asm.i"
                             ;*	BBC-128 BREADBOARD COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             
                             ;* Addressing modes - 15 in total, 16 with direct
                             ;*  0   Nothing
                             ;*	1 	Absolute			XXX <word>
                             ;*	2 	Absolute,X			XXX <word>,x
                             ;*	3 	Absolute,Y			XXX <word>,y
                             ;*	4	Zeropage			XXX	<byte>
                             ;*	5	Zeropage,X			XXX	<byte>,x
AS65 Assembler for R6502 [1.42].                                     Page  201
---------------------------------- bank1.s -----------------------------------

                             ;*	6	Zeropage,Y			XXX	<byte>,y
                             ;*	7	Indirect			XXX	(<byte>)
                             ;*	8	Indirect,X			XXX	(<byte>,x)
                             ;*	9	Indirect,Y			XXX	(<byte>),y
                             ;*	A	Absolute indirect	XXX	(<word>)
                             ;*	B	Absolute indirect,x	XXX	(<word>,x)
                             ;*	C	Immediate			XXX #<byte>
                             ;*	D	Accumulator			XXX (same as implied)
                             ;*	E	Implied				XXX
                             ;*	F	Relative			XXX	<byte>
                             ;*	10	Assembler directive	XXX .......
                             
0000 =                       AM_NONE		= 0
0001 =                       AM_ABS	 	= 1
0002 =                       AM_ABSX		= 2
0003 =                       AM_ABSY		= 3
0004 =                       AM_ZP		= 4
0005 =                       AM_ZPX		= 5
0006 =                       AM_ZPY		= 6
0007 =                       AM_ZPIND	= 7
0008 =                       AM_ZPINDX	= 8
0009 =                       AM_ZPINDY	= 9
000a =                       AM_ABSIND	= 10
000b =                       AM_ABSINDX	= 11
000c =                       AM_IMM		= 12
000d =                       AM_ACC		= 13
000d =                       AM_IMP		= AM_ACC
000f =                       AM_REL		= 15
0010 =                       AM_DIR		= 16
                             
                             
                             
                             	include "dflat\tkasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASM.S
                             ;*	Module that implements tokenisation of the ass
                             ;* 	The assembler is an extension to dflat, almos
                             ;*	almost a language within a language, as it has
                             ;*	own symbol tables to allow adding new keywords
                             ;*	running out of space in the main symtol table 
                             ;*	for normal 6502 asembler syntax which is at od
                             ;*	regular dflat.
                             ;*	Hence, this module has to do its own additiona
                             ;*	to tokenise the assembly.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f50c :                       mod_sz_tkasm_s
                             
                             	; if didn't find regular keywords then try assen
f50c :                       df_tk_asm_parse_command
                             ;	; skip the white space after the dot
AS65 Assembler for R6502 [1.42].                                     Page  202
---------------------------------- bank1.s -----------------------------------

                             ;	jsr df_tk_skip_ws
                             	; find the assembler symbol
f50c : 2041f5           [ 6] 	jsr df_tk_asm_matchtok
                             	; if no match with asm token they maybe a label?
f50f : b01d             [ 3] 	bcs df_tk_asm_label
f511 :                       df_tk_asm_found_command
                             	; Before asm keyword, put the asm handler token
f511 : a997             [ 2] 	lda #DFRT_ASM
f513 : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; Set the MSB of found symbol index
f516 : a5b9             [ 3] 	lda df_symoff
f518 : 0980             [ 2] 	ora #0x80
f51a : 207fce           [ 6] 	jsr df_tk_put_tok
                             	; check the first addressing mode code
                             	; remember to jump over the offset byte
f51d : a001             [ 2] 	ldy #1
f51f : b1b7             [ 5] 	lda (df_symtab),y
                             	; Directive?
f521 : c910             [ 2] 	cmp #AM_DIR
f523 : d006             [ 3] 	bne df_tk_asm_mnemonic
                             	; if directive then process it
f525 : a5b9             [ 3] 	lda df_symoff
f527 : 4c98f5           [ 3] 	jmp df_tk_asm_exec_parser
f52a :                       df_tk_asm_parse_command_err
f52a : 60               [ 6] 	rts
f52b :                       df_tk_asm_mnemonic
                             	; for all nmemonics, work out the addressing mod
f52b : 4c9df5           [ 3] 	jmp df_tk_asm_addr_mode
                             
                             ; try to tokenise a label
f52e :                       df_tk_asm_label
                             	; labels must start with '.'
f52e : a92e             [ 2] 	lda #'.'
f530 : 20f2ce           [ 6] 	jsr df_tk_expect
f533 : b0f5             [ 3] 	bcs df_tk_asm_parse_command_err
                             	; Before asm label, put the asm handler token
f535 : a997             [ 2] 	lda #DFRT_ASM
f537 : 207fce           [ 6] 	jsr df_tk_put_tok
f53a : e6b2             [ 5] 	inc df_linoff			;Skip the '.'
                             	; Tokenise a variable
f53c : a900             [ 2] 	lda #0
f53e : 4cb6cf           [ 3] 	jmp df_tk_var
                             
                             
                             ;****************************************
                             ;* df_tk_asm_matchtok
                             ;* Try and find a token match against the table d
                             ;* Input:
                             ;*			Current df_linbuff and df_linoff
                             ;* Return: 	CC = No Error, CS = Error
                             ;*			df_linoff points to next char if CC else unc
                             ;****************************************
f541 :                       df_tk_asm_matchtok
                             	; Start at token symbols beginning
f541 : a92b             [ 2] 	lda #lo(df_asm_tokensyms)
f543 : 85b7             [ 3] 	sta df_symtab
f545 : a9f9             [ 2] 	lda #hi(df_asm_tokensyms)
f547 : 85b8             [ 3] 	sta df_symtab+1
f549 : a900             [ 2] 	lda #0
f54b : 85b9             [ 3] 	sta df_symoff
f54d : a200             [ 2] 	ldx #0
f54f :                       df_tk_asm_checknexttok
AS65 Assembler for R6502 [1.42].                                     Page  203
---------------------------------- bank1.s -----------------------------------

                             	; From the line buffer current pointer
                             	; Check for a token match
f54f : a4b2             [ 3] 	ldy df_linoff
f551 :                       df_tk_asm_checktokch
                             	; Get symtable char
f551 : a1b7             [ 6] 	lda (df_symtab,x)
                             	; if less than ascii ' ' then reached end of
                             	; this symbol and everything matched so found!
f553 : c920             [ 2] 	cmp #' '
f555 : 9033             [ 3] 	bcc df_tk_asm_symfound
                             	; Else compare with current line buffer char
f557 : d9000a           [ 4] 	cmp df_linbuff,y
                             	; If chars not match then this symbol fails
f55a : d00a             [ 3] 	bne df_tk_asm_symnomatch
                             	; else more chars to match
                             	; so increment line buffer pointers
                             	_incZPWord df_symtab
                             
f562 : c8               [ 2] 	iny
f563 : 4c51f5           [ 3] 	jmp df_tk_asm_checktokch
f566 :                       df_tk_asm_symnomatch
                             	; Increment symbol counter to next symbol
f566 : e6b9             [ 5] 	inc df_symoff
f568 :                       df_tk_asm_symnextentry
f568 : a1b7             [ 6] 	lda (df_symtab,x)
                             	; End of symbol is < ' '
f56a : c920             [ 2] 	cmp #' '
f56c : 9009             [ 3] 	bcc  df_tk_asm_foundsymend
                             	_incZPWord df_symtab
                             
f574 : 4c68f5           [ 3] 	jmp df_tk_asm_symnextentry
f577 :                       df_tk_asm_foundsymend
                             	; Now at the offset to jump over addressing
                             	; mode and opcode values. Add offset to ptr
                             	; remember than C is clear and A has offset
                             	; set C so always jump over the offset
f577 : 38               [ 2] 	sec
f578 : 65b7             [ 3] 	adc df_symtab
f57a : 85b7             [ 3] 	sta df_symtab
f57c : a5b8             [ 3] 	lda df_symtab+1
f57e : 6900             [ 2] 	adc #0
f580 : 85b8             [ 3] 	sta df_symtab+1
                             	; If next char is not zero then
                             	; try and match with line buffer
f582 : a1b7             [ 6] 	lda (df_symtab,x)
f584 : d0c9             [ 3] 	bne df_tk_asm_checknexttok
                             	; else symbol table exhausted
                             	; so no match found
                             	; Zero symbol counter
f586 : 85b9             [ 3] 	sta df_symoff		; Relies on A=0
                             	; Set C to indicate error (no match)
f588 : 38               [ 2] 	sec
f589 : 60               [ 6] 	rts
f58a :                       df_tk_asm_symfound
                             	; Full match with keyword in symtable but
                             	; check the next buffer char is not alphanum
                             	; as this could be part of a symbol
                             	; Point to next buffer char in any case
                             	; y already points to char after keyword
f58a : b9000a           [ 4] 	lda df_linbuff,y
                             	; if it is an alphanum then
f58d : 20c4ce           [ 6] 	jsr df_tk_isalphanum
AS65 Assembler for R6502 [1.42].                                     Page  204
---------------------------------- bank1.s -----------------------------------

                             	; do not count as a match
f590 : b0d4             [ 3] 	bcs df_tk_asm_symnomatch
                             	; Save line buffer pointer (points to next char)
                             	; Clear C to indicate success (match)
f592 : 84b2             [ 3] 	sty df_linoff
f594 : a5b9             [ 3] 	lda df_symoff
                             	; df_symtab points to the offset
f596 :                       df_tk_asm_addr_mode_ok
f596 : 18               [ 2] 	clc
f597 : 60               [ 6] 	rts
                             
                             ;****************************************
                             ;* df_tk_asm_exec_parser
                             ;* Execute parse routine for this statement
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f598 :                       df_tk_asm_exec_parser
f598 : 0a               [ 2] 	asl a
f599 : aa               [ 2] 	tax
f59a : 7c9cfc           [ 6] 	jmp (df_tk_asm_tokenjmp,x)
                             
                             
                             ;****************************************
                             ;* df_tk_asm_addr_mode
                             ;* Tokenise the addressing mode
                             ;* Input: a is the token found
                             ;* Return: CC = Parsed ok, CS = Error
                             ;****************************************
f59d :                       df_tk_asm_addr_mode
f59d : 20d0ce           [ 6] 	jsr df_tk_skip_ws		;Skip whitespace
f5a0 : c900             [ 2] 	cmp #0					;End of line?
f5a2 : f0f2             [ 3] 	beq df_tk_asm_addr_mode_ok
f5a4 : c93a             [ 2] 	cmp #':'				;End of statement?
f5a6 : f0ee             [ 3] 	beq df_tk_asm_addr_mode_ok
f5a8 : a923             [ 2] 	lda #'#'				; Check for immediate
f5aa : 2000cf           [ 6] 	jsr df_tk_expect_tok
f5ad : b003             [ 3] 	bcs df_tk_asm_addr_mode_1
f5af : 4cd4f5           [ 3] 	jmp df_tk_imm		; Process immediate
f5b2 :                       df_tk_asm_addr_mode_1
f5b2 : a928             [ 2] 	lda #'('				; One of indirect modes?
f5b4 : 2000cf           [ 6] 	jsr df_tk_expect_tok
f5b7 : b003             [ 3] 	bcs df_tk_asm_addr_mode_2
f5b9 : 4cd9f5           [ 3] 	jmp df_tk_indirect
f5bc :                       df_tk_asm_addr_mode_2
                             	; here just a regular address
                             	; Just one expression expected
f5bc : 20fdd0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f5bf : a92c             [ 2] 	lda #','
f5c1 : 2000cf           [ 6] 	jsr df_tk_expect_tok
f5c4 : b0d0             [ 3] 	bcs df_tk_asm_addr_mode_ok
                             	; must be x or y
f5c6 : a978             [ 2] 	lda #'x'
f5c8 : 2000cf           [ 6] 	jsr df_tk_expect_tok
f5cb : 90c9             [ 3] 	bcc df_tk_asm_addr_mode_ok
                             	; got to here, must be y
f5cd : a979             [ 2] 	lda #'y'
f5cf : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
f5d2 : 18               [ 2] 	clc
f5d3 : 60               [ 6] 	rts
                             	
AS65 Assembler for R6502 [1.42].                                     Page  205
---------------------------------- bank1.s -----------------------------------

                             	
                             ;* Toeknise immediate addressing mode	
f5d4 :                       df_tk_imm
                             	; Just one expression expected
f5d4 : 20fdd0           [ 6] 	jsr df_tk_expression
f5d7 : 18               [ 2] 	clc
f5d8 : 60               [ 6] 	rts
                             	
                             ;* Tokenise indirect
f5d9 :                       df_tk_indirect
                             	; Just one expression expected
f5d9 : 20fdd0           [ 6] 	jsr df_tk_expression
                             	; Is there a comma after the expression
f5dc : a92c             [ 2] 	lda #','
f5de : 2000cf           [ 6] 	jsr df_tk_expect_tok
                             	; if not then might be indirect Y
f5e1 : b00c             [ 3] 	bcs df_tk_indirect_y
                             	; Else must have be indirect "x)"
f5e3 : a978             [ 2] 	lda #'x'
f5e5 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
f5e8 : a929             [ 2] 	lda #')'
f5ea : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
f5ed : 18               [ 2] 	clc
f5ee : 60               [ 6] 	rts
                             	
f5ef :                       df_tk_indirect_y
                             	; Definitely has a close bracket
f5ef : a929             [ 2] 	lda #')'
f5f1 : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
                             	; Is there a comma after the expression
f5f4 : a92c             [ 2] 	lda #','
f5f6 : 2000cf           [ 6] 	jsr df_tk_expect_tok
f5f9 : b007             [ 4] 	bcs df_tk_indirect_done
                             	; if comma then must be indirect y
f5fb : a979             [ 2] 	lda #'y'
f5fd : 200bcf           [ 6] 	jsr df_tk_expect_tok_err
f600 : 18               [ 2] 	clc
f601 : 60               [ 6] 	rts
                             
f602 :                       df_tk_indirect_done
f602 : 18               [ 2] 	clc
f603 : 60               [ 6] 	rts
                             	
                             
                             	
                             
                             
                             ;************************************************
                             ;*           TOKENISATION SUBROUTINES
                             ;************************************************
                             
                             
                             ;* HANDLE DIRECTIVES
                             
                             ;* All tokenisation is part of regular toksub rou
                             
                             
                             
                             
                             
                             
                             
AS65 Assembler for R6502 [1.42].                                     Page  206
---------------------------------- bank1.s -----------------------------------

                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
                             
f604 :                       mod_sz_tkasm_e
                             
                             
                             	include "dflat\rtasm.s"
                             ;************************************************
                             ;*
                             ;*	BBC128
                             ;*	Dolo Miah (@6502Nerd)
                             ;*	Copyright (c) 2020
                             ;*  Free to use for any non-commercial purpose su
                             ;*  credit of original my authorship please!
                             ;*
                             ;*  RTASM.S
                             ;*  Module that implements the runtime execution 
                             ;*  assembler.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
f604 :                       mod_sz_rtasm_s
                             
f604 :                       df_rt_asm_assemble
                             	; check if >=0x80 (directive or mnemonic)
f604 : a4be             [ 3] 	ldy df_exeoff
f606 : b1bc             [ 5] 	lda (df_currlin),y
f608 : 1009             [ 3] 	bpl df_rt_asm_do_label
f60a : 2017f6           [ 6] 	jsr df_rt_asm_command
f60d : 200ff8           [ 6] 	jsr df_rt_asm_printCR
f610 : 4c16f6           [ 3] 	jmp df_rt_asm_assemble_done
f613 :                       df_rt_asm_do_label
f613 : 203bf6           [ 6] 	jsr df_rt_asm_label
f616 :                       df_rt_asm_assemble_done
                             	; any clean up here
f616 : 60               [ 6] 	rts
                             
                             ; Jump to mnemonic or 
                             ; directive with index in A ignoring MSB
f617 :                       df_rt_asm_command
f617 : 297f             [ 2] 	and #0x7f
AS65 Assembler for R6502 [1.42].                                     Page  207
---------------------------------- bank1.s -----------------------------------

f619 : 48               [ 3] 	pha
f61a : aa               [ 2] 	tax
                             	; Point to Xth symtable entry of addr modes and 
f61b : 20ddf8           [ 6] 	jsr df_rt_asm_skip_to_sym
                             
                             	; Get first addressing mode (ignoring offset byt
f61e : a001             [ 2] 	ldy #1
f620 : b1b7             [ 5] 	lda (df_symtab),y
                             	; is it a directive?
f622 : c910             [ 2] 	cmp #AM_DIR
                             	; if directive
f624 : f003             [ 3] 	beq df_rt_asm_dir
                             	; Else must be a normal mnemonic
f626 : 4c03f7           [ 3] 	jmp df_rt_asm_mnem
                             
                             ; Jump to the appropriate directive
f629 :                       df_rt_asm_dir
                             	; Get the index and *2
                             	; to get jump vector
f629 : 68               [ 4] 	pla
f62a : 0a               [ 2] 	asl a
f62b : aa               [ 2] 	tax
                             	; jump over directive code
f62c : e6be             [ 5] 	inc df_exeoff
                             	; jump to directive handler
f62e : bda6fc           [ 4] 	lda df_rt_asm_tokenjmp,x
f631 : 85d7             [ 3] 	sta df_tmpptra
f633 : bda7fc           [ 4] 	lda df_rt_asm_tokenjmp+1,x
f636 : 85d8             [ 3] 	sta df_tmpptra+1
f638 : 6cd700           [ 6] 	jmp (df_tmpptra)
                             
                             ; Process label
                             ; Set the label to the PC
f63b :                       df_rt_asm_label
                             	; Get the address of the variable in A,X
f63b : 202ee6           [ 6] 	jsr df_rt_generate_lvar
f63e : 86d4             [ 3] 	stx df_asmoprnd
f640 : 85d5             [ 3] 	sta df_asmoprnd+1
                             	; Assign to value of PC
f642 : a000             [ 2] 	ldy #0
f644 : a5cf             [ 3] 	lda df_asmpc
f646 : 91d4             [ 5] 	sta (df_asmoprnd),y
f648 : a5d0             [ 3] 	lda df_asmpc+1
f64a : c8               [ 2] 	iny
f64b : 91d4             [ 5] 	sta (df_asmoprnd),y
f64d : 60               [ 6] 	rts	
                             
                             ;* Set the code origin
f64e :                       df_rt_asm_org
                             	; Get the address from expression
f64e : 20baf8           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to PC
f651 : a5d4             [ 3] 	lda df_asmoprnd
f653 : 85cf             [ 3] 	sta df_asmpc
f655 : a5d5             [ 3] 	lda df_asmoprnd+1
f657 : 85d0             [ 3] 	sta df_asmpc+1
f659 : a903             [ 2] 	lda #3
f65b : 85d6             [ 3] 	sta df_asmlen
f65d : 4cd1f7           [ 3] 	jmp df_rt_asm_printPC
                             
                             ; Set the assembly option
                             ; Bit 0 set = Print code to console
AS65 Assembler for R6502 [1.42].                                     Page  208
---------------------------------- bank1.s -----------------------------------

                             ; But 1 set = Write code to memory
                             ; Be sure to run 2 non-write passes
                             ; before a write pass
                             ; First pass may result in ZP used a lot
                             ; Second pass resolves forward refs to ABS
                             ; Final write pass then stores the code
f660 :                       df_rt_asm_opt
                             	; Get the value from expression
f660 : 20baf8           [ 6] 	jsr df_rt_asm_get_operand
                             	; Put this in to OPT
f663 : a5d4             [ 3] 	lda df_asmoprnd
f665 : 85d1             [ 3] 	sta df_asmopt
f667 : 60               [ 6] 	rts
                             
                             ; dw and db handled here
                             ; keep going through comma separated
                             ; list and write bytes or words
                             ; string expansion also handled
f668 :                       df_rt_asm_db
f668 : a902             [ 2] 	lda #2
f66a : 2c                    	db	0x2c			; BIT abs to ignore next 2 bytes
f66b :                       df_rt_asm_dw
f66b : a903             [ 2] 	lda #3
f66d :                       df_rt_asm_db_start
f66d : 85d6             [ 3] 	sta df_asmlen
f66f : 20d1f7           [ 6] 	jsr df_rt_asm_printPC
f672 : 20ecf7           [ 6] 	jsr df_rt_asm_printSPC
f675 :                       df_rt_asm_data
f675 : 206ad9           [ 6] 	jsr df_rt_neval		; Evaluate expression
                             	_df_ost_peekType	; What is the type
                             
f67d : 2904             [ 2] 	and #DFST_STR
f67f : d00d             [ 3] 	bne df_rt_asm_string; If string
f681 : 20fbf2           [ 6] 	jsr df_ost_popInt	; else get number in A,X
f684 : 86d4             [ 3] 	stx df_asmoprnd		; store low value
f686 : 85d5             [ 3] 	sta df_asmoprnd+1	; store high value
f688 : 20b6f6           [ 6] 	jsr df_rt_asm_data_write
f68b : 4cabf6           [ 3] 	jmp df_rt_asm_data_next
f68e :                       df_rt_asm_string
f68e : 20f7f2           [ 6] 	jsr df_ost_popPtr	; pop string pointer
f691 : 86d7             [ 3] 	stx df_tmpptra		; save pointer to tmpa
f693 : 85d8             [ 3] 	sta df_tmpptra+1
f695 :                       df_rt_asm_string_ch
f695 : a000             [ 2] 	ldy #0
f697 : b1d7             [ 5] 	lda (df_tmpptra),y	; Get string char, 0=done
f699 : f010             [ 3] 	beq df_rt_asm_data_next
f69b : 85d4             [ 3] 	sta df_asmoprnd		; Save as operand
f69d : 84d5             [ 3] 	sty df_asmoprnd+1	; High is always zero
f69f : 20b6f6           [ 6] 	jsr df_rt_asm_data_write
                             	_incZPWord df_tmpptra
                             
f6a8 : 4c95f6           [ 3] 	jmp df_rt_asm_string_ch
f6ab :                       df_rt_asm_data_next
f6ab : 2060e6           [ 6] 	jsr df_rt_eos		; End?
f6ae : b005             [ 3] 	bcs df_rt_asm_data_done
f6b0 : e6be             [ 5] 	inc df_exeoff		; Jump over ','
f6b2 : 4c75f6           [ 3] 	jmp df_rt_asm_data
f6b5 :                       df_rt_asm_data_done
f6b5 : 60               [ 6] 	rts	
                             
                             ; Write one db or dw value
                             ; Check for value too big for db
AS65 Assembler for R6502 [1.42].                                     Page  209
---------------------------------- bank1.s -----------------------------------

                             ; Advance PC by df_asmlen
f6b6 :                       df_rt_asm_data_write
f6b6 : 20f5f7           [ 6] 	jsr df_rt_asm_printOPR
f6b9 :                       df_rt_asm_data_write_skip1
f6b9 : a902             [ 2] 	lda #2
f6bb : 25d1             [ 3] 	and df_asmopt
f6bd : f017             [ 3] 	beq df_rt_asm_data_write_skip2
f6bf : a5d4             [ 3] 	lda df_asmoprnd
f6c1 : a000             [ 2] 	ldy #0
f6c3 : 91cf             [ 5] 	sta (df_asmpc),y
f6c5 : c8               [ 2] 	iny
f6c6 : a902             [ 2] 	lda #2
f6c8 : c5d6             [ 3] 	cmp df_asmlen
f6ca : d006             [ 3] 	bne df_rt_asm_data_write_hi
f6cc : a5d5             [ 3] 	lda df_asmoprnd+1
f6ce : d014             [ 3] 	bne df_rt_asm_data_write_err
f6d0 : f004             [ 3] 	beq df_rt_asm_data_write_skip2
f6d2 :                       df_rt_asm_data_write_hi
f6d2 : a5d5             [ 3] 	lda df_asmoprnd+1
f6d4 : 91cf             [ 5] 	sta (df_asmpc),y
f6d6 :                       df_rt_asm_data_write_skip2
f6d6 : a4d6             [ 3] 	ldy df_asmlen
f6d8 : 88               [ 2] 	dey					; Add 1 less!
f6d9 : 98               [ 2] 	tya
f6da : 18               [ 2] 	clc
f6db : 65cf             [ 3] 	adc df_asmpc
f6dd : 85cf             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f6e1 : e6d0             [ 5] 	inc df_asmpc+1
f6e3 : 60               [ 6] 	rts
f6e4 :                       df_rt_asm_data_write_err	
                             	SWBRK DFERR_QUANTITY
                             
                             	
                             	
f6e6 :                       df_rt_asm_ds
f6e6 : 20d1f7           [ 6] 	jsr df_rt_asm_printPC
f6e9 : 20ecf7           [ 6] 	jsr df_rt_asm_printSPC
                             	; Get the address from expression
f6ec : 20baf8           [ 6] 	jsr df_rt_asm_get_operand
                             	; ADD this in to PC
f6ef : 18               [ 2] 	clc
f6f0 : a5d4             [ 3] 	lda df_asmoprnd
f6f2 : 65cf             [ 3] 	adc df_asmpc
f6f4 : 85cf             [ 3] 	sta df_asmpc
f6f6 : a5d5             [ 3] 	lda df_asmoprnd+1
f6f8 : 65d0             [ 3] 	adc df_asmpc+1
f6fa : 85d0             [ 3] 	sta df_asmpc+1
                             	; len=1 for printing
f6fc : a903             [ 2] 	lda #3
f6fe : 85d6             [ 3] 	sta df_asmlen
f700 : 4cf5f7           [ 3] 	jmp df_rt_asm_printOPR
                             
                             
                             ; Process a normal assembler mnemonic
f703 :                       df_rt_asm_mnem
f703 : 68               [ 4] 	pla				; Throw away previous temp variable
                             	; jump over mnemonic code
f704 : e6be             [ 5] 	inc df_exeoff
                             	; work out the addressing mode and get operand
f706 : 203df8           [ 6] 	jsr df_rt_asm_addrmode
AS65 Assembler for R6502 [1.42].                                     Page  210
---------------------------------- bank1.s -----------------------------------

                             
f709 :                       df_rt_asm_mnem_try
f709 : a5d2             [ 3] 	lda df_asmadmd					; With the addressing mode
f70b : 20c5f8           [ 6] 	jsr df_rt_asm_find_addr_mode	; Find it for this 
f70e : c900             [ 2] 	cmp #AM_NONE					; Exists?
f710 : d014             [ 3] 	bne	df_rt_asm_mnem_chk			; If does then check it
f712 :                       df_rt_asm_check_alt
f712 : a6d2             [ 3] 	ldx df_asmadmd					; Use ad mode as an index
f714 : bd1af9           [ 4] 	lda df_asm_altaddrmode,x		; Else get alternate
f717 : c900             [ 2] 	cmp #AM_NONE					; Is there an alternate?
f719 : f02d             [ 3] 	beq df_rt_asm_mnem_err			; If no then error
f71b : 20c5f8           [ 6] 	jsr df_rt_asm_find_addr_mode	; Check does mode e
f71e : c900             [ 2] 	cmp #AM_NONE					; this instruction
f720 : f026             [ 3] 	beq df_rt_asm_mnem_err			; if no then error
f722 : c5d2             [ 3] 	cmp df_asmadmd					; Same as the original?
f724 : f00e             [ 3] 	beq df_rt_asm_mnem_done			; if so then done
f726 :                       df_rt_asm_mnem_chk
f726 : 85d2             [ 3] 	sta df_asmadmd					; This is the final mode
f728 : aa               [ 2] 	tax								; Get the length
f729 : bd09f9           [ 4] 	lda df_asm_length,x
f72c : a6d5             [ 3] 	ldx df_asmoprnd+1				; Is operand hi non-zero?
f72e : f004             [ 3] 	beq df_rt_asm_mnem_done			; If zero then done
f730 : c903             [ 2] 	cmp #3							; Else must be len 3?
f732 : d0de             [ 3] 	bne df_rt_asm_check_alt			; Try an alternate
f734 :                       df_rt_asm_mnem_done
f734 : a6d2             [ 3] 	ldx df_asmadmd					; Get the final mode index
f736 : bd09f9           [ 4] 	lda df_asm_length,x				; Get the length
f739 : 85d6             [ 3] 	sta df_asmlen
f73b : a5d2             [ 3] 	lda df_asmadmd					; Get the final mode
f73d : 20c5f8           [ 6] 	jsr df_rt_asm_find_addr_mode	; Get the Y index o
                             	; Ok now get the opcode
f740 : c8               [ 2] 	iny
f741 : b1b7             [ 5] 	lda (df_symtab),y
f743 : 85d3             [ 3] 	sta df_asmopcde
                             	; Now have all information to assemble
f745 : 4c4af7           [ 3] 	jmp df_rt_asm_encode
                             	
f748 :                       df_rt_asm_mnem_err
                             	SWBRK DFERR_SYNTAX
                             
                             	
                             ; Take assembler data and encode it
                             ; depending on the current option
                             ; Option 0 = No write
                             ; Option 1 = No write, Print
                             ; Option 2 = Write
                             ; Option 3 = Write, Print
f74a :                       df_rt_asm_encode
                             	; If relative then need to calculate offset
f74a : a5d2             [ 3] 	lda df_asmadmd
f74c : c90f             [ 2] 	cmp #AM_REL
f74e : d033             [ 3] 	bne df_rt_asm_encode_skiprel
                             	; If high byte is 0 then do nothing
f750 : a5d5             [ 3] 	lda df_asmoprnd+1
f752 : f02f             [ 3] 	beq df_rt_asm_encode_skiprel
                             	; else calculate distance from PC
                             	; first take 2 off operand
f754 : 38               [ 2] 	sec
f755 : a5d4             [ 3] 	lda df_asmoprnd
f757 : e902             [ 2] 	sbc #2
f759 : 85d4             [ 3] 	sta df_asmoprnd
f75b : a5d5             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  211
---------------------------------- bank1.s -----------------------------------

f75d : e900             [ 2] 	sbc #0
f75f : 85d5             [ 3] 	sta df_asmoprnd+1
                             	; now calculate current operand-PC
f761 : 38               [ 2] 	sec
f762 : a5d4             [ 3] 	lda df_asmoprnd
f764 : e5cf             [ 3] 	sbc df_asmpc
f766 : 85d4             [ 3] 	sta df_asmoprnd
f768 : a5d5             [ 3] 	lda df_asmoprnd+1
f76a : e5d0             [ 3] 	sbc df_asmpc+1
                             	; put 0 in high operand storage
                             	; but A contains result of subtraction
                             	; so check that for out of range
f76c : a000             [ 2] 	ldy #0
f76e : 84d5             [ 3] 	sty df_asmoprnd+1
                             	; detect too far; high byte is either 0 or 255
                             	; else it's an error
f770 : a8               [ 2] 	tay
f771 : f00a             [ 3] 	beq df_rt_asm_encode_relpos
f773 : c9ff             [ 2] 	cmp #0xff
f775 : d00a             [ 3] 	bne df_rt_asm_encode_relfar
                             	; if high is ff then low must be same -ve
f777 : a5d4             [ 3] 	lda df_asmoprnd
f779 : 3008             [ 3] 	bmi df_rt_asm_encode_skiprel
                             	; else error
f77b : 1004             [ 3] 	bpl df_rt_asm_encode_relfar
f77d :                       df_rt_asm_encode_relpos
                             	; if high is 00 then low must be same +ve
f77d : a5d4             [ 3] 	lda df_asmoprnd
f77f : 1002             [ 3] 	bpl df_rt_asm_encode_skiprel
                             	; else error
f781 :                       df_rt_asm_encode_relfar
                             	; set to non-zero value, dec because it is zero 
f781 : c6d5             [ 5] 	dec df_asmoprnd+1
f783 :                       df_rt_asm_encode_skiprel
                             	; Only write the code if bit 1=1
f783 : a902             [ 2] 	lda #0x02
f785 : 25d1             [ 3] 	and df_asmopt
f787 : f028             [ 3] 	beq df_rt_asm_encode_print
f789 : a000             [ 2] 	ldy #0
f78b : a5d3             [ 3] 	lda df_asmopcde
f78d : 91cf             [ 5] 	sta (df_asmpc),y
f78f : a5d6             [ 3] 	lda df_asmlen
f791 : c901             [ 2] 	cmp #1						; No operand
f793 : f01c             [ 3] 	beq df_rt_asm_encode_print
f795 : c903             [ 2] 	cmp #3						; Word operand
f797 : f00e             [ 3] 	beq df_rt_asm_encode_writeword
                             	; byte operand, high byte must be zero
f799 : a5d5             [ 3] 	lda df_asmoprnd+1
f79b : f002             [ 3] 	beq df_rt_asm_encode_writebyte
                             	SWBRK DFERR_QUANTITY
                             
f79f :                       df_rt_asm_encode_writebyte
f79f : c8               [ 2] 	iny 
f7a0 : a5d4             [ 3] 	lda df_asmoprnd
f7a2 : 91cf             [ 5] 	sta (df_asmpc),y
f7a4 : 4cb1f7           [ 3] 	jmp df_rt_asm_encode_print
f7a7 :                       df_rt_asm_encode_writeword
f7a7 : c8               [ 2] 	iny 
f7a8 : a5d4             [ 3] 	lda df_asmoprnd
f7aa : 91cf             [ 5] 	sta (df_asmpc),y
f7ac : c8               [ 2] 	iny 
f7ad : a5d5             [ 3] 	lda df_asmoprnd+1
AS65 Assembler for R6502 [1.42].                                     Page  212
---------------------------------- bank1.s -----------------------------------

f7af : 91cf             [ 5] 	sta (df_asmpc),y	
f7b1 :                       df_rt_asm_encode_print
f7b1 : 20c1f7           [ 6] 	jsr df_rt_asm_print_mmen
                             	; advance pc
f7b4 : 18               [ 2] 	clc
f7b5 : a5cf             [ 3] 	lda df_asmpc
f7b7 : 65d6             [ 3] 	adc df_asmlen
f7b9 : 85cf             [ 3] 	sta df_asmpc
                             	_bcc 2
                             
f7bd : e6d0             [ 5] 	inc df_asmpc+1
f7bf : 18               [ 2] 	clc
f7c0 : 60               [ 6] 	rts
                             
                             
                             ; Print the full 1,2,3 byte instruction
                             ; depends on df_asmopt
f7c1 :                       df_rt_asm_print_mmen
f7c1 : 20d1f7           [ 6] 	jsr df_rt_asm_printPC
f7c4 : 20ecf7           [ 6] 	jsr df_rt_asm_printSPC
f7c7 : 20e1f7           [ 6] 	jsr df_rt_asm_printOPC
f7ca : 20ecf7           [ 6] 	jsr df_rt_asm_printSPC
f7cd : 20f5f7           [ 6] 	jsr df_rt_asm_printOPR
f7d0 :                       df_rt_asm_print_rts			; Hopefully subs can get he
f7d0 : 60               [ 6] 	rts
                             
f7d1 :                       df_rt_asm_printPC
                             	; Check the option bit 0 (Print)
f7d1 : a901             [ 2] 	lda #0x01
f7d3 : 25d1             [ 3] 	and df_asmopt
f7d5 : f0f9             [ 3] 	beq df_rt_asm_print_rts
                             	; Print current PC
f7d7 : a5d0             [ 3] 	lda df_asmpc+1
f7d9 : 20cdc8           [ 6] 	jsr utilPrintA
f7dc : a5cf             [ 3] 	lda df_asmpc
f7de : 4ccdc8           [ 3] 	jmp utilPrintA
                             
f7e1 :                       df_rt_asm_printOPC
                             	; Check the option bit 0 (Print)
f7e1 : a901             [ 2] 	lda #0x01
f7e3 : 25d1             [ 3] 	and df_asmopt
f7e5 : f0e9             [ 3] 	beq df_rt_asm_print_rts
f7e7 : a5d3             [ 3] 	lda df_asmopcde
f7e9 : 4ccdc8           [ 3] 	jmp utilPrintA
                             
f7ec :                       df_rt_asm_printSPC
                             	; Check the option bit 0 (Print)
f7ec : a901             [ 2] 	lda #0x01
f7ee : 25d1             [ 3] 	and df_asmopt
f7f0 : f0de             [ 3] 	beq df_rt_asm_print_rts
f7f2 : 4cbdc8           [ 3] 	jmp utilPrintSPC
                             	
f7f5 :                       df_rt_asm_printOPR
                             	; Check the option bit 0 (Print)
f7f5 : a901             [ 2] 	lda #0x01
f7f7 : 25d1             [ 3] 	and df_asmopt
f7f9 : f0d5             [ 3] 	beq df_rt_asm_print_rts	
f7fb : a5d6             [ 3] 	lda df_asmlen				; check how may operand bytes
f7fd : c901             [ 2] 	cmp #1						; if only opcode, done
f7ff : f0cf             [ 3] 	beq df_rt_asm_print_rts	
f801 : c902             [ 2] 	cmp #2
f803 : f005             [ 3] 	beq df_rt_asm_printOPR_1	; if only 2 do low byte
AS65 Assembler for R6502 [1.42].                                     Page  213
---------------------------------- bank1.s -----------------------------------

f805 : a5d5             [ 3] 	lda df_asmoprnd+1
f807 : 20cdc8           [ 6] 	jsr utilPrintA
f80a :                       df_rt_asm_printOPR_1
f80a : a5d4             [ 3] 	lda df_asmoprnd
f80c : 4ccdc8           [ 3] 	jmp utilPrintA
                             
f80f :                       df_rt_asm_printCR
                             	; Check the option bit 0 (Print)
f80f : a901             [ 2] 	lda #0x01
f811 : 25d1             [ 3] 	and df_asmopt
f813 : f0bb             [ 4] 	beq df_rt_asm_print_rts
f815 : 4cc5c8           [ 3] 	jmp utilPrintCRLF
                             
f818 :                       df_rt_asm_printCH
f818 : 8539             [ 3] 	sta tmp_d
                             	; Check the option bit 0 (Print)
f81a : a901             [ 2] 	lda #0x01
f81c : 25d1             [ 3] 	and df_asmopt
f81e : f0b0             [ 4] 	beq df_rt_asm_print_rts
f820 : a539             [ 3] 	lda tmp_d
f822 : 4cc0c5           [ 3] 	jmp io_put_ch
                             
                             ; Print an entire line, but save df_exeoff
f825 :                       df_rt_asm_printline
                             	; Check the option bit 0 (Print)
f825 : a901             [ 2] 	lda #0x01
f827 : 25d1             [ 3] 	and df_asmopt
f829 : f0a5             [ 4] 	beq df_rt_asm_print_rts
f82b : a5be             [ 3] 	lda df_exeoff
f82d : 48               [ 3] 	pha
                             	; use df_tmpptra
                             	_cpyZPWord df_currlin, df_tmpptra
                             
f836 : 20cee7           [ 6] 	jsr df_rt_list_line_only
f839 : 68               [ 4] 	pla
f83a : 85be             [ 3] 	sta df_exeoff
f83c : 60               [ 6] 	rts
                             
                             
                             ; Calculate the addressing mode
                             ; Populate the operand as needed
                             ; A and df_asmadmd contain Addressing Mode
f83d :                       df_rt_asm_addrmode	
                             	; Store nothing in address mode
f83d : a900             [ 2] 	lda #AM_NONE
f83f : 85d2             [ 3] 	sta df_asmadmd
                             	; zero out the operand
f841 : a900             [ 2] 	lda #0
f843 : 85d4             [ 3] 	sta df_asmoprnd
f845 : 85d5             [ 3] 	sta df_asmoprnd+1
f847 : 2060e6           [ 6] 	jsr df_rt_eos			; End of statement?
f84a : b00d             [ 3] 	bcs df_rt_asm_AM_IMP
                             	; jump over whitespace
f84c : 20a6dd           [ 6] 	jsr df_rt_skip_ws
                             	; Check what it is
f84f : c923             [ 2] 	cmp #'#'				; Immediate?
f851 : f034             [ 3] 	beq df_rt_asm_AM_IMM
f853 : c928             [ 2] 	cmp #'('				; Indirect something?
f855 : f03a             [ 3] 	beq df_rt_asm_AM_INDIRECT
                             	; Must be ABS,ZP or REL
f857 : d005             [ 3] 	bne df_rt_asm_ABSREL
                             ; Process IMP/ACC
AS65 Assembler for R6502 [1.42].                                     Page  214
---------------------------------- bank1.s -----------------------------------

f859 :                       df_rt_asm_AM_IMP
f859 : a90d             [ 2] 	lda #AM_IMP
f85b : 85d2             [ 3] 	sta df_asmadmd
f85d : 60               [ 6] 	rts
                             ; Process ABS or REL
f85e :                       df_rt_asm_ABSREL	
                             	; Evaluate operand
f85e : 20baf8           [ 6] 	jsr df_rt_asm_get_operand
                             
f861 : 2060e6           [ 6] 	jsr df_rt_eos			; End of statement?
f864 : b00f             [ 3] 	bcs df_rt_asm_AM_ABS
f866 : c8               [ 2] 	iny						; Jump over ","
f867 : b1bc             [ 5] 	lda (df_currlin),y		; Load X or Y
f869 : c8               [ 2] 	iny						; Jump over index reg
f86a : 85be             [ 3] 	sta df_exeoff			; Save exe offset
f86c : c978             [ 2] 	cmp #'x'				; Indirect X?
f86e : f012             [ 3] 	beq df_rt_asm_AM_ABSX
                             ; Process ABSY
f870 :                       df_rt_asm_AM_ABSY
f870 : a906             [ 2] 	lda #AM_ZPY				; Go for smallest modes
f872 : 85d2             [ 3] 	sta df_asmadmd
f874 : 60               [ 6] 	rts
                             ; Process what looks like pure ABS, could be REL
f875 :                       df_rt_asm_AM_ABS
f875 : a001             [ 2] 	ldy #1					; Check first addressing mode
f877 : b1b7             [ 5] 	lda (df_symtab),y
f879 : c90f             [ 2] 	cmp #AM_REL
f87b : f002             [ 3] 	beq df_rt_asm_AM_REL
f87d : a904             [ 2] 	lda #AM_ZP				; Go for smallest modes
f87f :                       df_rt_asm_AM_REL
f87f : 85d2             [ 3] 	sta df_asmadmd
f881 : 60               [ 6] 	rts
                             ; Process ABSX
f882 :                       df_rt_asm_AM_ABSX
f882 : a905             [ 2] 	lda #AM_ZPX				; Go for smallest modes
f884 : 85d2             [ 3] 	sta df_asmadmd
f886 : 60               [ 6] 	rts
                             ; Process Immediate
f887 :                       df_rt_asm_AM_IMM
                             	; skip over #
f887 : e6be             [ 5] 	inc df_exeoff
                             	; Get operand
f889 : 20baf8           [ 6] 	jsr df_rt_asm_get_operand
                             	; Mark as immediate
f88c : a90c             [ 2] 	lda #AM_IMM
f88e : 85d2             [ 3] 	sta df_asmadmd
f890 : 60               [ 6] 	rts
                             ; Process indirect
f891 :                       df_rt_asm_AM_INDIRECT
                             	; skip over (
f891 : e6be             [ 5] 	inc df_exeoff
                             	; Calculate the operand
f893 : 20baf8           [ 6] 	jsr df_rt_asm_get_operand
                             	; what is next char?
f896 : a4be             [ 3] 	ldy df_exeoff
f898 : b1bc             [ 5] 	lda (df_currlin),y
f89a : c929             [ 2] 	cmp #')'			; Could be IND or INDY
f89c : f009             [ 3] 	beq df_rt_asm_AM_ZPINDORY
                             	; else must be INDX
                             	; skip 'x)'
f89e : c8               [ 2] 	iny
f89f : c8               [ 2] 	iny
AS65 Assembler for R6502 [1.42].                                     Page  215
---------------------------------- bank1.s -----------------------------------

f8a0 : 84be             [ 3] 	sty df_exeoff
f8a2 : a908             [ 2] 	lda #AM_ZPINDX
f8a4 : 85d2             [ 3] 	sta df_asmadmd
f8a6 : 60               [ 6] 	rts
                             ; Pure indirect mode found
f8a7 :                       df_rt_asm_AM_ZPINDORY
f8a7 : a907             [ 2] 	lda #AM_ZPIND			; Assume ZPIND
f8a9 : c8               [ 2] 	iny
f8aa : 84be             [ 3] 	sty df_exeoff
                             	; if at end of line/statement then pure indirect
f8ac : 2060e6           [ 6] 	jsr df_rt_eos			; End of statement?
f8af : b006             [ 3] 	bcs df_rt_asm_AM_ZPIND
                             	; else must be INDY
f8b1 : a909             [ 2] 	lda #AM_ZPINDY
                             	; skip ',Y'
f8b3 : c8               [ 2] 	iny
f8b4 : c8               [ 2] 	iny
f8b5 : 84be             [ 3] 	sty df_exeoff
f8b7 :                       df_rt_asm_AM_ZPIND
f8b7 : 85d2             [ 3] 	sta df_asmadmd
f8b9 : 60               [ 6] 	rts
                             
                             ; Get and save the operand
                             ; df_asmoprnd contains the result
f8ba :                       df_rt_asm_get_operand
                             	; evaluate
f8ba : 206ad9           [ 6] 	jsr df_rt_neval
                             	; Get the parameter from stack
f8bd : 20fbf2           [ 6] 	jsr df_ost_popInt
                             	; put in the operand
f8c0 : 86d4             [ 3] 	stx df_asmoprnd
f8c2 : 85d5             [ 3] 	sta df_asmoprnd+1
f8c4 : 60               [ 6] 	rts
                             	
                             ; From current symtab entry, find addressing
                             ; mode in A.  AM_NONE=Not found, Y=index
f8c5 :                       df_rt_asm_find_addr_mode
                             	; save A in tmp
f8c5 : 8539             [ 3] 	sta tmp_d
                             	; Start first entry (1) - 2 = 0xff
f8c7 : a0ff             [ 2] 	ldy #0xff
f8c9 : a200             [ 2] 	ldx #0
f8cb :                       df_rt_asm_find_addr_mode_loop
                             	; next entry
f8cb : c8               [ 2] 	iny
f8cc : c8               [ 2] 	iny
                             	; if current index > num entries then error
f8cd : 98               [ 2] 	tya
f8ce : 38               [ 2] 	sec
f8cf : e1b7             [ 6] 	sbc (df_symtab,x)
f8d1 : b007             [ 3] 	bcs df_rt_asm_find_addr_mode_err
                             	; is symtab addressing mode what we want?
f8d3 : b1b7             [ 5] 	lda (df_symtab),y
f8d5 : c539             [ 3] 	cmp tmp_d
f8d7 : d0f2             [ 3] 	bne df_rt_asm_find_addr_mode_loop
                             	; done A=mode, y=index in to df_symtab
f8d9 : 60               [ 6] 	rts
f8da :                       df_rt_asm_find_addr_mode_err
f8da : a900             [ 2] 	lda #AM_NONE
f8dc :                       df_rt_asm_skip_to_sym_done; Used by function belo
f8dc : 60               [ 6] 	rts
                             
AS65 Assembler for R6502 [1.42].                                     Page  216
---------------------------------- bank1.s -----------------------------------

                             
                             ; Skip X amount of symbols in table
                             ; A contains how many addr mode and op code bytes
                             ; df_symtab points to offset byte
f8dd :                       df_rt_asm_skip_to_sym
f8dd : e8               [ 2] 	inx				; so done when X=0
                             	; Start at token symbols beginning
f8de : a92b             [ 2] 	lda #lo(df_asm_tokensyms)
f8e0 : 85b7             [ 3] 	sta df_symtab
f8e2 : a9f9             [ 2] 	lda #hi(df_asm_tokensyms)
f8e4 : 85b8             [ 3] 	sta df_symtab+1
f8e6 : a900             [ 2] 	lda #0
f8e8 : 85b9             [ 3] 	sta df_symoff
f8ea : a8               [ 2] 	tay
f8eb :                       df_rt_asm_skip_to_sym_next
                             	; Get symtable char
f8eb : b1b7             [ 5] 	lda (df_symtab),y
                             	; if < ' ' then jumped over symbol chars
f8ed : c920             [ 2] 	cmp #' '
f8ef : 9009             [ 3] 	bcc df_rt_asm_skip_to_sym_end
                             	;else next smy tab char
                             	_incZPWord df_symtab
                             
f8f7 : 4cebf8           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             	; Found end of symbol
f8fa :                       df_rt_asm_skip_to_sym_end
                             	;if done then return
f8fa : ca               [ 2] 	dex
f8fb : f0df             [ 3] 	beq df_rt_asm_skip_to_sym_done
                             	;jump over addr and op code by A bytes
f8fd : 38               [ 2] 	sec
f8fe : 65b7             [ 3] 	adc df_symtab
f900 : 85b7             [ 3] 	sta df_symtab
                             	_bcc 2
                             
f904 : e6b8             [ 5] 	inc df_symtab+1
f906 : 4cebf8           [ 3] 	jmp df_rt_asm_skip_to_sym_next
                             
f909 :                       mod_sz_rtasm_e
                             
                             
                             	include "dflat\asmsymtab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMSYMTAB.S
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             	;* Length of each addressing mode
                             	;* ORDER significant!
f909 :                       df_asm_length
f909 : 00030303020202..      	db	0,3,3,3,2,2,2,2,2,2,3,3,2,1,1,2,0
                             
AS65 Assembler for R6502 [1.42].                                     Page  217
---------------------------------- bank1.s -----------------------------------

                             	; Always try for lowest addressing mode, but
                             	; this table maps to alternative
f91a :                       df_asm_altaddrmode
f91a : 00                    	db AM_NONE		;AM_NONE	= 0
f91b : 00                    	db AM_NONE		;AM_ABS	 	= 1
f91c : 00                    	db AM_NONE		;AM_ABSX	= 2
f91d : 00                    	db AM_NONE		;AM_ABSY	= 3
f91e : 01                    	db AM_ABS		;AM_ZP		= 4
f91f : 02                    	db AM_ABSX		;AM_ZPX		= 5
f920 : 03                    	db AM_ABSY		;AM_ZPY		= 6
f921 : 0a                    	db AM_ABSIND	;AM_ZPIND	= 7
f922 : 0b                    	db AM_ABSINDX	;AM_ZPINDX	= 8
f923 : 09                    	db AM_ZPINDY	;AM_ZPINDY	= 9
f924 : 00                    	db AM_NONE		;AM_ABSIND	= 10
f925 : 00                    	db AM_NONE		;AM_ABSINDX	= 11
f926 : 00                    	db AM_NONE		;AM_IMM		= 12
f927 : 00                    	db AM_NONE		;AM_ACC		= 13
f928 : 00                    	db AM_NONE		;AM_IMP		= AM_ACC
f929 : 0f                    	db AM_REL		;AM_REL		= 15
f92a : 00                    	db AM_NONE		;AM_DIR		= 16
                             
                             
                             	;*	Mnemonic/	How many addressing modes /
                             	;* 	Mode		Opcode for mode
f92b :                       df_asm_tokensyms
                             	;* Start with directives
f92b : 2e6f726702            	db	".org",		1*2
f930 : 1000                  	db	AM_DIR,		0x00
f932 : 2e6f707402            	db	".opt",		1*2
f937 : 1000                  	db	AM_DIR,		0x00
f939 : 2e646202              	db	".db",		1*2
f93d : 1000                  	db	AM_DIR,		0x00
f93f : 2e647702              	db	".dw",		1*2
f943 : 1000                  	db	AM_DIR,		0x00
f945 : 2e647302              	db	".ds",		1*2
f949 : 1000                  	db	AM_DIR,		0x00	
                             
f94b : 61646312              	db	"adc",		9*2
f94f : 0c69                  	db	AM_IMM,		0x69
f951 : 0465                  	db	AM_ZP,		0x65
f953 : 0575                  	db	AM_ZPX,		0x75
f955 : 016d                  	db	AM_ABS,		0x6d
f957 : 027d                  	db	AM_ABSX,	0x7d
f959 : 0379                  	db	AM_ABSY,	0x79
f95b : 0861                  	db	AM_ZPINDX,	0x61
f95d : 0971                  	db	AM_ZPINDY,	0x71
f95f : 0772                  	db	AM_ZPIND,	0x72
                             	
f961 : 616e6412              	db	"and",		9*2
f965 : 0c29                  	db	AM_IMM,		0x29
f967 : 0425                  	db	AM_ZP,		0x25
f969 : 0535                  	db	AM_ZPX,		0x35
f96b : 012d                  	db	AM_ABS,		0x2d
f96d : 023d                  	db	AM_ABSX,	0x3d
f96f : 0339                  	db	AM_ABSY,	0x39
f971 : 0821                  	db	AM_ZPINDX,	0x21
f973 : 0931                  	db	AM_ZPINDY,	0x31
f975 : 0732                  	db	AM_ZPIND,	0x32
                             
f977 : 636d7012              	db	"cmp",		9*2
f97b : 0cc9                  	db	AM_IMM,		0xc9
f97d : 04c5                  	db	AM_ZP,		0xc5
AS65 Assembler for R6502 [1.42].                                     Page  218
---------------------------------- bank1.s -----------------------------------

f97f : 05d5                  	db	AM_ZPX,		0xd5
f981 : 01cd                  	db	AM_ABS,		0xcd
f983 : 02dd                  	db	AM_ABSX,	0xdd
f985 : 03d9                  	db	AM_ABSY,	0xd9
f987 : 08c1                  	db	AM_ZPINDX,	0xc1
f989 : 09d1                  	db	AM_ZPINDY,	0xd1
f98b : 07d2                  	db	AM_ZPIND,	0xd2
                             
f98d : 656f7212              	db	"eor",		9*2
f991 : 0c49                  	db	AM_IMM,		0x49
f993 : 0445                  	db	AM_ZP,		0x45
f995 : 0555                  	db	AM_ZPX,		0x55
f997 : 014d                  	db	AM_ABS,		0x4d
f999 : 025d                  	db	AM_ABSX,	0x5d
f99b : 0359                  	db	AM_ABSY,	0x59
f99d : 0841                  	db	AM_ZPINDX,	0x41
f99f : 0951                  	db	AM_ZPINDY,	0x51
f9a1 : 0752                  	db	AM_ZPIND,	0x52
                             
f9a3 : 6c646112              	db	"lda",		9*2
f9a7 : 0ca9                  	db	AM_IMM,		0xa9
f9a9 : 04a5                  	db	AM_ZP,		0xa5
f9ab : 05b5                  	db	AM_ZPX,		0xb5
f9ad : 01ad                  	db	AM_ABS,		0xad
f9af : 02bd                  	db	AM_ABSX,	0xbd
f9b1 : 03b9                  	db	AM_ABSY,	0xb9
f9b3 : 08a1                  	db	AM_ZPINDX,	0xa1
f9b5 : 09b1                  	db	AM_ZPINDY,	0xb1
f9b7 : 07b2                  	db	AM_ZPIND,	0xb2
                             
f9b9 : 6f726112              	db	"ora",		9*2
f9bd : 0c09                  	db	AM_IMM,		0x09
f9bf : 0405                  	db	AM_ZP,		0x05
f9c1 : 0515                  	db	AM_ZPX,		0x15
f9c3 : 010d                  	db	AM_ABS,		0x0d
f9c5 : 021d                  	db	AM_ABSX,	0x1d
f9c7 : 0319                  	db	AM_ABSY,	0x19
f9c9 : 0801                  	db	AM_ZPINDX,	0x01
f9cb : 0911                  	db	AM_ZPINDY,	0x11
f9cd : 0712                  	db	AM_ZPIND,	0x12
                             
f9cf : 73626312              	db	"sbc",		9*2
f9d3 : 0ce9                  	db	AM_IMM,		0xe9
f9d5 : 04e5                  	db	AM_ZP,		0xe5
f9d7 : 05f5                  	db	AM_ZPX,		0xf5
f9d9 : 01ed                  	db	AM_ABS,		0xed
f9db : 02fd                  	db	AM_ABSX,	0xfd
f9dd : 03f9                  	db	AM_ABSY,	0xf9
f9df : 08e1                  	db	AM_ZPINDX,	0xe1
f9e1 : 09f1                  	db	AM_ZPINDY,	0xf1
f9e3 : 07f2                  	db	AM_ZPIND,	0xf2
                             
f9e5 : 73746110              	db	"sta",		8*2
f9e9 : 0485                  	db	AM_ZP,		0x85
f9eb : 0595                  	db	AM_ZPX,		0x95
f9ed : 018d                  	db	AM_ABS,		0x8d
f9ef : 029d                  	db	AM_ABSX,	0x9d
f9f1 : 0399                  	db	AM_ABSY,	0x99
f9f3 : 0881                  	db	AM_ZPINDX,	0x81
f9f5 : 0991                  	db	AM_ZPINDY,	0x91
f9f7 : 0792                  	db	AM_ZPIND,	0x92
                             
AS65 Assembler for R6502 [1.42].                                     Page  219
---------------------------------- bank1.s -----------------------------------

f9f9 : 61736c0a              	db	"asl",		5*2
f9fd : 0d0a                  	db	AM_IMP,		0x0a
f9ff : 0406                  	db	AM_ZP,		0x06
fa01 : 0516                  	db	AM_ZPX,		0x16
fa03 : 010e                  	db	AM_ABS,		0x0e
fa05 : 021e                  	db	AM_ABSX,	0x1e
fa07 : 6465630a              	db	"dec",		5*2
fa0b : 0d3a                  	db	AM_IMP,		0x3a
fa0d : 04c6                  	db	AM_ZP,		0xc6
fa0f : 05d6                  	db	AM_ZPX,		0xd6
fa11 : 01ce                  	db	AM_ABS,		0xce
fa13 : 02de                  	db	AM_ABSX,	0xde
fa15 : 696e630a              	db	"inc",		5*2
fa19 : 0d1a                  	db	AM_IMP,		0x1a
fa1b : 04e6                  	db	AM_ZP,		0xe6
fa1d : 05f6                  	db	AM_ZPX,		0xf6
fa1f : 01ee                  	db	AM_ABS,		0xee
fa21 : 02fe                  	db	AM_ABSX,	0xfe
fa23 : 6c73720a              	db	"lsr",		5*2
fa27 : 0d4a                  	db	AM_IMP,		0x4a
fa29 : 0446                  	db	AM_ZP,		0x46
fa2b : 0556                  	db	AM_ZPX,		0x56
fa2d : 014e                  	db	AM_ABS,		0x4e
fa2f : 025e                  	db	AM_ABSX,	0x5e
fa31 : 726f6c0a              	db	"rol",		5*2
fa35 : 0d2a                  	db	AM_IMP,		0x2a
fa37 : 0426                  	db	AM_ZP,		0x26
fa39 : 0536                  	db	AM_ZPX,		0x36
fa3b : 012e                  	db	AM_ABS,		0x2e
fa3d : 023e                  	db	AM_ABSX,	0x3e
fa3f : 726f720a              	db	"ror",		5*2
fa43 : 0d6a                  	db	AM_IMP,		0x6a
fa45 : 0466                  	db	AM_ZP,		0x66
fa47 : 0576                  	db	AM_ZPX,		0x76
fa49 : 016e                  	db	AM_ABS,		0x6e
fa4b : 027e                  	db	AM_ABSX,	0x7e
                             
fa4d : 6269740a              	db	"bit",		5*2
fa51 : 0c89                  	db	AM_IMM,		0x89
fa53 : 0424                  	db	AM_ZP,		0x24
fa55 : 0534                  	db	AM_ZPX,		0x34
fa57 : 012c                  	db	AM_ABS,		0x2c
fa59 : 023c                  	db	AM_ABSX,	0x3c
                             	
fa5b : 62726b02              	db	"brk",		1*2
fa5f : 0d00                  	db	AM_IMP,		0x00
fa61 : 73747002              	db	"stp",		1*2
fa65 : 0ddb                  	db	AM_IMP,		0xdb
fa67 : 77616902              	db	"wai",		1*2
fa6b : 0dcb                  	db	AM_IMP,		0xcb
                             	
fa6d : 636c6302              	db	"clc",		1*2
fa71 : 0d18                  	db	AM_IMP,		0x18
fa73 : 636c6402              	db	"cld",		1*2
fa77 : 0dd8                  	db	AM_IMP,		0xd8
fa79 : 636c6902              	db	"cli",		1*2
fa7d : 0d58                  	db	AM_IMP,		0x58
fa7f : 636c7602              	db	"clv",		1*2
fa83 : 0db8                  	db	AM_IMP,		0xb8
fa85 : 73656302              	db	"sec",		1*2
fa89 : 0d38                  	db	AM_IMP,		0x38
fa8b : 73656402              	db	"sed",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  220
---------------------------------- bank1.s -----------------------------------

fa8f : 0df8                  	db	AM_IMP,		0xf8
fa91 : 73656902              	db	"sei",		1*2
fa95 : 0d78                  	db	AM_IMP,		0x78
                             	
fa97 : 63707806              	db	"cpx",		3*2
fa9b : 0ce0                  	db	AM_IMM,		0xe0
fa9d : 04e4                  	db	AM_ZP,		0xe4
fa9f : 01ec                  	db	AM_ABS,		0xec
faa1 : 63707906              	db	"cpy",		3*2
faa5 : 0cc0                  	db	AM_IMM,		0xc0
faa7 : 04c4                  	db	AM_ZP,		0xc4
faa9 : 01cc                  	db	AM_ABS,		0xcc
faab : 64657802              	db	"dex",		1*2
faaf : 0dca                  	db	AM_IMP,		0xca
fab1 : 64657902              	db	"dey",		1*2
fab5 : 0d88                  	db	AM_IMP,		0x88
fab7 : 696e7802              	db	"inx",		1*2
fabb : 0de8                  	db	AM_IMP,		0xe8
fabd : 696e7902              	db	"iny",		1*2
fac1 : 0dc8                  	db	AM_IMP,		0xc8
fac3 : 6c64780a              	db	"ldx",		5*2
fac7 : 0ca2                  	db	AM_IMM,		0xa2
fac9 : 04a6                  	db	AM_ZP,		0xa6
facb : 06b6                  	db	AM_ZPY,		0xb6
facd : 01ae                  	db	AM_ABS,		0xae
facf : 03be                  	db	AM_ABSY,	0xbe
fad1 : 6c64790a              	db	"ldy",		5*2
fad5 : 0ca0                  	db	AM_IMM,		0xa0
fad7 : 04a4                  	db	AM_ZP,		0xa4
fad9 : 05b4                  	db	AM_ZPX,		0xb4
fadb : 01ac                  	db	AM_ABS,		0xac
fadd : 02bc                  	db	AM_ABSX,	0xbc
fadf : 73747806              	db	"stx",		3*2
fae3 : 0486                  	db	AM_ZP,		0x86
fae5 : 0696                  	db	AM_ZPY,		0x96
fae7 : 018e                  	db	AM_ABS,		0x8e
fae9 : 73747906              	db	"sty",		3*2
faed : 0484                  	db	AM_ZP,		0x84
faef : 0594                  	db	AM_ZPX,		0x94
faf1 : 018c                  	db	AM_ABS,		0x8c
faf3 : 73747a08              	db	"stz",		4*2
faf7 : 0464                  	db	AM_ZP,		0x64
faf9 : 0574                  	db	AM_ZPX,		0x74
fafb : 019c                  	db	AM_ABS,		0x9c
fafd : 029e                  	db	AM_ABSX,	0x9e
                             	
                             
faff : 62636302              	db	"bcc",		1*2
fb03 : 0f90                  	db	AM_REL,		0x90
fb05 : 62637302              	db	"bcs",		1*2
fb09 : 0fb0                  	db	AM_REL,		0xb0
fb0b : 62657102              	db	"beq",		1*2
fb0f : 0ff0                  	db	AM_REL,		0xf0
fb11 : 626d6902              	db	"bmi",		1*2
fb15 : 0f30                  	db	AM_REL,		0x30
fb17 : 626e6502              	db	"bne",		1*2
fb1b : 0fd0                  	db	AM_REL,		0xd0
fb1d : 62706c02              	db	"bpl",		1*2
fb21 : 0f10                  	db	AM_REL,		0x10
fb23 : 62726102              	db	"bra",		1*2
fb27 : 0f80                  	db	AM_REL,		0x80
fb29 : 62766302              	db	"bvc",		1*2
AS65 Assembler for R6502 [1.42].                                     Page  221
---------------------------------- bank1.s -----------------------------------

fb2d : 0f50                  	db	AM_REL,		0x50
fb2f : 62767302              	db	"bvs",		1*2
fb33 : 0f70                  	db	AM_REL,		0x70
fb35 : 6a6d7006              	db	"jmp",		3*2
fb39 : 014c                  	db	AM_ABS,		0x4c
fb3b : 0a6c                  	db	AM_ABSIND,	0x6c
fb3d : 0b7c                  	db	AM_ABSINDX,	0x7c
fb3f : 6a737202              	db	"jsr",		1*2
fb43 : 0120                  	db	AM_ABS,		0x20
                             	
fb45 : 6e6f7002              	db	"nop",		1*2
fb49 : 0dea                  	db	AM_IMP,		0xea
fb4b : 70686102              	db	"pha",		1*2
fb4f : 0d48                  	db	AM_IMP,		0x48
fb51 : 70687002              	db	"php",		1*2
fb55 : 0d08                  	db	AM_IMP,		0x08
fb57 : 70687802              	db	"phx",		1*2
fb5b : 0dda                  	db	AM_IMP,		0xda
fb5d : 70687902              	db	"phy",		1*2
fb61 : 0d5a                  	db	AM_IMP,		0x5a
fb63 : 706c6102              	db	"pla",		1*2
fb67 : 0d68                  	db	AM_IMP,		0x68
fb69 : 706c7002              	db	"plp",		1*2
fb6d : 0d28                  	db	AM_IMP,		0x28
fb6f : 706c7802              	db	"plx",		1*2
fb73 : 0dfa                  	db	AM_IMP,		0xfa
fb75 : 706c7902              	db	"ply",		1*2
fb79 : 0d7a                  	db	AM_IMP,		0x7a
fb7b : 72746902              	db	"rti",		1*2
fb7f : 0d40                  	db	AM_IMP,		0x40
fb81 : 72747302              	db	"rts",		1*2
fb85 : 0d60                  	db	AM_IMP,		0x60
fb87 : 74617802              	db	"tax",		1*2
fb8b : 0daa                  	db	AM_IMP,		0xaa
fb8d : 74617902              	db	"tay",		1*2
fb91 : 0da8                  	db	AM_IMP,		0xa8
fb93 : 74737802              	db	"tsx",		1*2
fb97 : 0dba                  	db	AM_IMP,		0xba
fb99 : 74786102              	db	"txa",		1*2
fb9d : 0d8a                  	db	AM_IMP,		0x8a
fb9f : 74787302              	db	"txs",		1*2
fba3 : 0d9a                  	db	AM_IMP,		0x9a
fba5 : 74796102              	db	"tya",		1*2
fba9 : 0d98                  	db	AM_IMP,		0x98
                             	
fbab : 74726204              	db	"trb",		2*2
fbaf : 0414                  	db	AM_ZP,		0x14
fbb1 : 011c                  	db	AM_ABS,		0x1c
fbb3 : 74736204              	db	"tsb",		2*2
fbb7 : 0404                  	db	AM_ZP,		0x04
fbb9 : 010c                  	db	AM_ABS,		0x0c
                             	
fbbb : 6262723002            	db	"bbr0",		1*2
fbc0 : 0f0f                  	db	AM_REL,		0x0f
fbc2 : 6262723102            	db	"bbr1",		1*2
fbc7 : 0f1f                  	db	AM_REL,		0x1f
fbc9 : 6262723202            	db	"bbr2",		1*2
fbce : 0f2f                  	db	AM_REL,		0x2f
fbd0 : 6262723302            	db	"bbr3",		1*2
fbd5 : 0f3f                  	db	AM_REL,		0x3f
fbd7 : 6262723402            	db	"bbr4",		1*2
fbdc : 0f4f                  	db	AM_REL,		0x4f
AS65 Assembler for R6502 [1.42].                                     Page  222
---------------------------------- bank1.s -----------------------------------

fbde : 6262723502            	db	"bbr5",		1*2
fbe3 : 0f5f                  	db	AM_REL,		0x5f
fbe5 : 6262723602            	db	"bbr6",		1*2
fbea : 0f6f                  	db	AM_REL,		0x6f
fbec : 6262723702            	db	"bbr7",		1*2
fbf1 : 0f7f                  	db	AM_REL,		0x7f
fbf3 : 6262733002            	db	"bbs0",		1*2
fbf8 : 0f8f                  	db	AM_REL,		0x8f
fbfa : 6262733102            	db	"bbs1",		1*2
fbff : 0f9f                  	db	AM_REL,		0x9f
fc01 : 6262733202            	db	"bbs2",		1*2
fc06 : 0faf                  	db	AM_REL,		0xaf
fc08 : 6262733302            	db	"bbs3",		1*2
fc0d : 0fbf                  	db	AM_REL,		0xbf
fc0f : 6262733402            	db	"bbs4",		1*2
fc14 : 0fcf                  	db	AM_REL,		0xcf
fc16 : 6262733502            	db	"bbs5",		1*2
fc1b : 0fdf                  	db	AM_REL,		0xdf
fc1d : 6262733602            	db	"bbs6",		1*2
fc22 : 0fef                  	db	AM_REL,		0xef
fc24 : 6262733702            	db	"bbs7",		1*2
fc29 : 0fff                  	db	AM_REL,		0xff
fc2b : 726d623002            	db	"rmb0",		1*2
fc30 : 0f07                  	db	AM_REL,		0x07
fc32 : 726d623102            	db	"rmb1",		1*2
fc37 : 0f17                  	db	AM_REL,		0x17
fc39 : 726d623202            	db	"rmb2",		1*2
fc3e : 0f27                  	db	AM_REL,		0x27
fc40 : 726d623302            	db	"rmb3",		1*2
fc45 : 0f37                  	db	AM_REL,		0x37
fc47 : 726d623402            	db	"rmb4",		1*2
fc4c : 0f47                  	db	AM_REL,		0x47
fc4e : 726d623502            	db	"rmb5",		1*2
fc53 : 0f57                  	db	AM_REL,		0x57
fc55 : 726d623602            	db	"rmb6",		1*2
fc5a : 0f67                  	db	AM_REL,		0x67
fc5c : 726d623702            	db	"rmb7",		1*2
fc61 : 0f77                  	db	AM_REL,		0x77
fc63 : 736d623002            	db	"smb0",		1*2
fc68 : 0f87                  	db	AM_REL,		0x87
fc6a : 736d623102            	db	"smb1",		1*2
fc6f : 0f97                  	db	AM_REL,		0x97
fc71 : 736d623202            	db	"smb2",		1*2
fc76 : 0fa7                  	db	AM_REL,		0xa7
fc78 : 736d623302            	db	"smb3",		1*2
fc7d : 0fb7                  	db	AM_REL,		0xb7
fc7f : 736d623402            	db	"smb4",		1*2
fc84 : 0fc7                  	db	AM_REL,		0xc7
fc86 : 736d623502            	db	"smb5",		1*2
fc8b : 0fd7                  	db	AM_REL,		0xd7
fc8d : 736d623602            	db	"smb6",		1*2
fc92 : 0fe7                  	db	AM_REL,		0xe7
fc94 : 736d623702            	db	"smb7",		1*2
fc99 : 0ff7                  	db	AM_REL,		0xf7
                             	
                             	;* Terminates with a zero
fc9b : 00                    	db	0
                             
                             	include	"dflat\asmjmptab.s"
                             ;************************************************
                             ;*
                             ;*	BBC-128 HOMEBREW COMPUTER
AS65 Assembler for R6502 [1.42].                                     Page  223
---------------------------------- bank1.s -----------------------------------

                             ;*	Hardware and software design by @6502Nerd (Dol
                             ;*	Copyright 2014-20
                             ;*  Free to use for any non-commercial purpose su
                             ;*  appropriate credit of my authorship please!
                             ;*
                             ;*  ASMJUMPTAB.S
                             ;*  Runtime token jump table for assembler.
                             ;*  dflat uses four key tables to tokenise and ru
                             ;*  - df_tokensyms    - table of token symbols
                             ;*  - df_tk_tokentype - table of token types
                             ;*  - df_tk_tokenjmp  - table of tokenising routi
                             ;*  - df_rt_tokenjmp  - table of runtime routines
                             ;*  The key is the token symbols.  When a line is
                             ;*  in to the raw (untokenised) buffer, df_tokens
                             ;*  used to identify tokens.  The position of the
                             ;*  token is used to then look up type and jump v
                             ;*  in the other tables.
                             ;*
                             ;************************************************
                             
                             	; ROM code
                             	code  
                             
                             ; Tokeniser jump table
                             ; Only directives needed as all opcodes are handl
                             ; through a single routine
fc9c :                       df_tk_asm_tokenjmp
fc9c : 48d7                  	dw	df_tk_asm_org
fc9e : 48d7                  	dw	df_tk_asm_opt
fca0 : 93d6                  	dw	df_tk_asm_db
fca2 : 93d6                  	dw	df_tk_asm_dw
fca4 : 48d7                  	dw	df_tk_asm_ds
                             
fca6 :                       df_rt_asm_tokenjmp
fca6 : 4ef6                  	dw	df_rt_asm_org
fca8 : 60f6                  	dw	df_rt_asm_opt
fcaa : 68f6                  	dw	df_rt_asm_db
fcac : 6bf6                  	dw	df_rt_asm_dw
fcae : e6f6                  	dw	df_rt_asm_ds
                             
                             
                             ;****************************************
                             ;* as_init
                             ;* Initialise assembler settings
                             ;****************************************
fcb0 :                       asm_init
                             	; Zero the PC
fcb0 : 64cf             [ 3] 	stz df_asmpc
fcb2 : 64d0             [ 3] 	stz df_asmpc+1
                             	; Zero the option
fcb4 : 64d1             [ 3] 	stz df_asmopt
fcb6 : 60               [ 6] 	rts
                             	
fcb7 :                       mod_sz_asm_e
                             
                             
                             	; End of Code
fcb7 :                       _code_end
fcb7 :                       _bank1_end
                             	
                             
No errors in pass 2.
AS65 Assembler for R6502 [1.42].                                     Page  224
---------------------------------- bank1.s -----------------------------------

Wrote binary from address $c000 through $ffff.
Total size 16384 bytes.
