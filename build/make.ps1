# Script to build homebrew computer rom
# This is a multi-rom build with cross-rom calls
# Requires the as65 assembler as preproceesing is done using symbol tables
try {

  $startTime = (Get-Date)

  # File for autogenerated cross-bank locations
  $autogen = "bank/autogen.s"
  # File containing cross-bank (external) locations
  $extern = "bank/extern.mak"
  # Build / version file is built each time
  $build = "kernel/build.s"
  # Starting bank number and ending bank number
  $start = 0
  $end = 3

  # Generate build version file
  Write-Output "Generating build.s file"

  Set-Content -Value (" db `"Build : "+(Get-Date -Format "dd-MM-yyyy")+"`\r`"") -Path $build
  Add-Content -Value (" db `"128K Breadboard Computer`\r`"") -Path $build
  Add-Content -Value (" db `"By @6502Nerd`\r`"") -Path $build
  Add-Content -Value (" db `"Copyright (c) 2025`\r`",0") -Path $build

  # Initial binary creating symbol table with dummy values
  Write-Output "Generating symbol table for externals"

  # Initial comment line in the dummy autogen file
  Set-Content -Value ";" -Path $autogen

  # Read each line from the cross-bank list
  $lines = Get-Content -Path $extern
  # Process each extern reference
  foreach ($line in $lines) {
    # Add a label with '_' prepended to extern function name
    Add-Content -Value ("_"+$line) -Path $autogen
    # Add macro call to _bankjsr with dummy address and bank number
    Add-Content -Value (" _bankjsr bankjsr_nul_addr, bankjsr_nul_bank") -Path $autogen
  }

  # Build with -t option to get the symbol table using dummy autogen file
  foreach ($bank in $start..$end) {
    Write-Output ("Bank "+$bank)
    ./as65 "-n" "-x" "-c" "-t" "-dBANK$bank" "-o../rom/bank$bank.bin" "bank/bank$bank.s"
    if ($LASTEXITCODE -gt 0) { throw }
    # copy symbol table to .sym file as we will use later
    Copy-Item "bank/bank$bank.lst" -Destination "bank/bank$bank.sym"
  }

  # Final binary which include the real extern addresses and correct bank numbers
  Write-Output "Generating final symbol tables for externals"

  # Initial comment line in the real autogen file
  Set-Content -Value ";" -Path $autogen
  Add-Content -Value "mod_sz_autogen_s" -Path $autogen
  # Go through each extern reference and find in one of the banks
  foreach ($line in $lines) {
    $found = 0
    $bank = 0
    do {
      # Match this reference with a line in this bank's symbol table
      $match = (Select-String -Path "bank/bank$bank.sym" -Pattern (" "+$line+" :")).Line
      # If got a match then add it to autogen
      if ($match.Length) {
        $found = 1
        # add _extern
        Add-Content -Value ("_"+$line) -Path $autogen
        # add _bankjsr $abcd, x
        Add-Content -Value (" _bankjsr "+$match.Split(":")[1].Split(" ")[1]+", "+$bank) -Path $autogen
      }
      $bank++
    } until ($found)
  }
  Add-Content -Value "mod_sz_autogen_e" -Path $autogen

  # Build with -l option to get full listing
  Write-Output "Building ROMs"

  foreach ($bank in $start..$end) {
    Write-Output ("Bank "+$bank)
    ./as65 "-n" "-x" "-c" "-l" "-dBANK$bank" "-o../rom/bank$bank.bin" bank/bank$bank.s
    if ($LASTEXITCODE -gt 0) { throw }
  }

  # Combine individual banks in to one 64K binary for EEPROM sequence 0,2,1,3
  Get-Content -Encoding Byte ../rom/bank0.bin, ../rom/bank2.bin, ../rom/bank1.bin, ../rom/bank3.bin | Set-Content -Encoding Byte ../rom/HB-BBC-128.ROM
  # Create compressed ROM for MAME emulator
  Compress-Archive -Path "../rom/HB-BBC-128.ROM" -DestinationPath "../emu/roms/hb128bbc.zip" -Force

  # Output a combined symbol table using one bank - TBD

  # Information on extend of each bank
  Write-Output (Select-String -Path "bank/bank0.sym" -Pattern "_bank0_end" -SimpleMatch).Line
  Write-Output (Select-String -Path "bank/bank1.sym" -Pattern "_bank1_end" -SimpleMatch).Line
  Write-Output (Select-String -Path "bank/bank2.sym" -Pattern "_bank2_end" -SimpleMatch).Line
  Write-Output (Select-String -Path "bank/bank3.sym" -Pattern "_bank3_end" -SimpleMatch).Line
  Write-Output (Select-String -Path "bank/bank3.sym" -Pattern "_end_zero_page" -SimpleMatch).Line

  # Final build complete message and timing
  Write-Output ("Build completed in   :"+((Get-Date)-$startTime)+" seconds")
}
catch {
  Write-Output "COMPILATION ERRORS"
}
